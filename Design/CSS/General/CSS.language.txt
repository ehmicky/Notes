
       
   CSS  
       



SUMMARY ==>                                     #HTML:
                                                #  - <link rel="stylesheet">, <style>, <any style>
                                                #CSSOM:
                                                #  - WINDOW.getComputedStyle(ELEM).PROP, ELEM.style.PROP, document.styleSheets[*].cssRules[*].type|cssText|selectorText|style
                                                #Devices:
                                                #  - resolution (WINDOW.devicePixelRatio), zoom, size, <meta name="viewport">, frequency, rotation
                                                #Types:
                                                #  - LEN: rem|em|ex|ch, vh|vw|vmin, px, in|pc|pt|cm|mm
                                                #  - COLOR: NAME, #NNN[A][NNN[A]], rgb[a](), hsl[a](), hwb(), gray(), transparent, currentColor,
                                                #    color(COLOR red|green|blue|alpha|hue|saturation|lightness|whiteness|blackness|blend|tint|shade|contrast())
                                                #  - [repeating-]linear|radial|conic-gradient()
                                                #  - calc(EXPR)
                                                #Basic syntax:
                                                #  - case sensitive, ignores whitespaces and errors, CSS.escape()
                                                #Syntax:
                                                #  - declared|cascaded|specified|computed|used|actual
                                                #  - initial|inherit
                                                #  - all
                                                #Variables:
                                                #  - --VAR, var(--VAR[, VAL]), @custom-media --VAR, (--VAR), @custom-selector :--VAR, :--VAR, --MIXIN {...}, @apply --MIXIN
                                                #At-rules:
                                                #  - @import
                                                #  - @namespace
                                                #Media queries:
                                                #  - height|width|aspect-ratio|resolution|orientation|color|color-index|monochrome|scan|grid|hover
                                                #  - @media, <any media>, WINDOW.matchMedia()
                                                #Selectors:
                                                #  - specificity: !important > HTML-inline > #ID > .CLASS|:PSEUDO|[ATTR] > TAG|::PSEUDO > load order
                                                #  - combinators: space, comma, > + ~, nesting
                                                #  - :not(), :matches()
                                                #  - * #ID .CLASS [ATTR] [ATTR= $= ^= |= *= ~="STR"] TAG
                                                #  - :enabled|disabled|checked, :lang(), :target, :required|optional|indeterminate|[in]valid
                                                #  - :link|visited|any-link
                                                #  - ::placeholder, :root
                                                #  - :first|last|only|nth[-last]-child|of-type(), :empty
                                                #  - :hover|active|focus, ::selection
                                                #  - ::first-letter|line
                                                #Dimensions, display, position:
                                                #  - [min|max-]height|width, padding|border|margin[-top|right|bottom|left], box-sizing, collapsed margins, line-height
                                                #  - display: inline, block, inline-block
                                                #  - display: none, <any hidden>, visibility
                                                #  - position: static|relative|absolute|fixed, top|right|bottom|left, float, clear, clearfix, z-index
                                                #  - fullscreen: requestFullscreen(), :fullscreen
                                                #  - CSSOM view: dimensions, position, scrolling
                                                #Alignment:
                                                #  - margin: auto, flexbox, calc(), text|vertical-align
                                                #Overflow:
                                                #  - wrapping: white-space, word-break, overflow-wrap
                                                #  - clipping: overflow[-x|y], text-overflow
                                                #Paragraph:
                                                #  - text|vertical-align, text-indent, letter|word-spacing
                                                #Fonts:
                                                #  - @font-face: WOFF2+WOFF, font-*, unicode-range
                                                #  - font-size, font-family, color, font-style, font-weight, text-decoration, font, system fonts
                                                #  - font-feature-settings, font-kerning, font-variant[-position|ligatures|cap|numeric]
                                                #  - text-transform
                                                #  - direction, unicode-bidi
                                                #Background:
                                                #  - background[-color|image|origin|attachment|position|size|clip|repeat]
                                                #Replaced element:
                                                #  - object-position|fit
                                                #Borders:
                                                #  - border[-top|right|bottom|left][-color|style|width|radius]
                                                #  - border-image[-slice|source|repeat|width|outset]
                                                #  - outline[-color|width|style]
                                                #Flexbox:
                                                #  - display: [inline-]flex
                                                #  - flex-direction, flex-wrap, flex-flow, flex-basis, order
                                                #  - flex-grow, flex-shrink, flex
                                                #  - justify-content, align-content, align-items, align-self
                                                #Columns:
                                                #  - column-width|count, columns
                                                #  - column-gap, column-rule[-color|style|width], column-fill
                                                #Tables:
                                                #  - display: [inline-]table, table-caption|header|row|footer-group|column[-group]|row|cell
                                                #  - table-layout, border-collapse, border-spacing, empty-cells, caption-side
                                                #Lists:
                                                #  - display: list-item, list-style[-type|image|position]
                                                #Effects:
                                                #  - opacity
                                                #  - text-shadow, box-shadow
                                                #  - transform: translate|scale|rotate[X|Y|Z|3d](), perspective(), skewX|Y(), matrix[3d](),
                                                #    transform-origin, perspective, perspective-origin, backface-visibility, will-change
                                                #Transitions/animations:
                                                #  - transition[-property|duration|delay|timing-function], ELEM.ontransitionend
                                                #  - @keyframes, animation[-name|duration|delay|timing-function|direction|iteration-count|fill-mode|play-state],
                                                #    ELEM.onanimationstart|end|iteration
                                                #  - Web animations API (same + playbackRate, endDelay, iterationStart,composite, iterationComposite, spacing)
                                                #Paged media:
                                                #  - page-break-before|after|inside, @page[:first|left|right], @POSITION
                                                #Generated content:
                                                #  - content: none|STR|IMAGE|attr()
                                                #  - content: [no-]open|close-quote, quotes
                                                #  - content: counter[s](), counter-reset|increment
                                                #  - CSS triangle
                                                #Browser UI:
                                                #  - cursor, pointer-events, user-select
                                                #  - <meta|link> (address bar styling, splash screen)

                                  ┌─────────────┐
                                  │   GENERAL   │
                                  └─────────────┘

STANDARDS ==>                                   #W3C, mostly CSS working group
                                                #Continuous work but sometimes publish snapshots (2007, 2010, 2015, 2017)
                                                #CSS3|4 on-going, divided in modules.
                                                #WHATWG (fork) has few specs

MIME TYPE ==>                                   #text/css

INTEROPERABILITY ==>                            #Non-supported is skipped, last line wins. So put fallback first.
                                                #See HTML doc for list of browsers
                                                #Extensions fallbacks used when experimental:
                                                #   -moz- (Firefox), -webkit- (Chrome+Safari), -o- (Opera), -ms- (IE)
                                               ##Ext: means necessarily prefix

STATIC ANALYSIS ==>                             #See stylestats

                                  ┌──────────┐
                                  │   HTML   │
                                  └──────────┘

<link rel="stylesheet" href="URI.css">/         #From external file.
  LINK.sheet                                    #STYLESHEET|null

<style>...</style>                              #Inline
  type="STR"                                    #MIME type. Def: 'text/css'
  STYLE.sheet                                   #STYLESHEET|null

<any>
  style="NAME: VAL;..."                         #In tags

LOADING|PARSING ORDER ==>                       #See DOM doc

                                  ┌───────────┐
                                  │   CSSOM   │
                                  └───────────┘

HTMLELEM.style                                  #CSSSTYLEDEC: inline styling. For setting.
WINDOW.getComputedStyle(HTMLELEM[, ':PSEUDO'])  #CSSSTYLEDEC: used values (readonly). For getting.

CSSStyleDeclaration                             #Many CSS "PROP:VAL;"
CSSSTYLEDEC.length                              #
CSSSTYLEDEC[UINT]                               #'PROP'
CSSSTYLEDEC.cssText                             #'PROP:VAL;...'

CSSSTYLEDEC.PROP                                #'VAL'. PROP is camelcase
                                                #float -> cssFloat
CSSSTYLEDEC.getPropertyValue('prop')->'VAL'     #
CSSSTYLEDEC.                                    #Like CSSSTYLEDEC.PROP but:
getPropertyPriority('prop')->'important|'       #  - 'prop' lowercase with dash
CSSSTYLEDEC.setProperty                         #  - can get|set !important
('prop', 'VAL'[, 'important'])                  #  - can remove
CSSSTYLEDEC.removeProperty('prop')->'VAL'       #  - can manipulate CSS variables

CSSSTYLEDEC.parentRule                          #CSSRULE|null


DOCUMENT.styleSheets                            #STYLESHEETLIST
STYLESHEETLIST.length
STYLESHEETLIST[UINT]

StyleSheet                                      #
STYLESHEET.ownerNode                            #NODE (usually STYLE|LINK).
STYLESHEET.type                                 #
STYLESHEET.href                                 #
STYLESHEET.title                                #
STYLESHEET.disabled                             #Same as STYLESHEET.ownerNode.type|href|title|disabled

CSSStyleSheet                                   #STYLESHEET child
CSSSTYLESHEET.cssRules                          #CSSRULELIST (CSSRULE_ARR-like)
                                                #Can be null for same-origin policy reasons
CSSSTYLESHEET.insertRule
('SELECTORS { ... }', UINT)                     #
CSSSTYLESHEET.deleteRule(UINT)                  #


CSSRule                                         #
RULE.parentStyleSheet                           #CSSSTYLESHEET
RULE.parentRule                                 #Parent RULE (e.g. in CSSMEDIARULE), or null
RULE.type                                       #ENUM among CSSRule.STYLE|CHARSET|IMPORT|MEDIA|NAMESPACE|FONT_FACE|PAGE|...|UNKNOWN_RULE
                                                #Readonly
RULE.cssText                                    #'SELECTORS { ... }'. Readonly.

CSSStyleRule                                    #CSSRULE for usual rule
STYLERULE.selectorText                          #'SELECTORS'. Readonly.
STYLERULE.style                                 #Readonly CSSSTYLEDEC


CSSPageRule                                     #CSSRULE for @page
PAGERULE.style                                  #Readonly CSSSTYLEDEC

CSSKeyframesRule                                #CSSRULE for @keyframes
KEYFRAMESRULE.name                              #'KEYFRAMES'
KEYFRAMESRULE.cssRules                          #KEYFRAMERULE_ARR (array-like)
KEYFRAMESRULE.appendRule('PERC,... { ... }')    #
KEYFRAMESRULE.find|deleteRule('PERC,...')       #

CSSKeyframeRule                                 #CSSRULE for PERC,... { ... } inside @keyframes
KEYFRAMERULE.keyText                            #'PERC,...'
KEYFRAMERULE.style                              #Readonly CSSSTYLEDEC

CSSNamespaceRule                                #CSSRULE for @namespae
NAMESPACERULE.namespaceURI                      #
NAMESPACERULE.prefix                            #

CSSImportRule                                   #CSSRULE for @import
IMPORTRULE.href                                 #
IMPORTRULE.styleSheet                           #Referenced CSSSTYLESHEET
STYLESHEET.parentStyleSheet                     #Parent STYLESHEET (when @import was used) or null
CSSSTYLESHEET.ownerRule                         #Parent IMPORTRULE or null

CSSMediaRule                                    #CSSRULE for @media
MEDIARULE.cssRules|insert|deleteRule(...)       #Like CSSSTYLESHEET

                                  ┌────────────┐
                                  │   DEVICE   │
                                  └────────────┘

RESOLUTION ==>                                  #  - also called pixel density
                                                #  - can be for:
                                                #     - logical|virtual|CSS pixels (browser-level)
                                                #        - used in CSS/JavaScript for LEN
                                                #        - also called DP|PT (device independant pixels|points)
                                                #     - physical|hardware|device pixels (device-level)
                                                #        - used in CSS/JavaScript for RESOLUTION
                                                #  - ratio between both is pixel ratio:
                                                #     - WINDOW.devicePixelRatio
                                                #     - usually:
                                                #        - LDPI: 0.75
                                                #        - MDPI: 1
                                                #        - TVDPI: 1.33
                                                #        - HDPI|HiDPI: 1.5
                                                #        - XHDPI: 2
                                                #        - XXHDPI: 3
                                                #        - XXXHDPI: 4
                                                #     - unit is dppx (dot per pixel)
                                                #     - "retina display" is marketing term for higher one
                                                #     - painting is done at physical resolution not logical one:
                                                #        - vector graphics (e.g. fonts, lines, SVG) will always look better
                                                #        - bitmap graphics (e.g. images, videos) will look better if size matches physical resolution
                                                #  - ppi (pixel per inch) (computers) vs dpi (dots per pixel) (print but also used as synonymous for ppi)
                                                #  - max resolution a really good eye can perceive:
                                                #     - RESOLUTION (ppi) = 12000/DISTANCE (cm)
                                                #     - examples:
                                                #        - phone: 400-800ppi
                                                #        - tablets: 250-550ppi
                                                #        - laptops: 160-270ppi
                                                #        - TV: 60-120ppi
WINDOW.devicePixelRatio                         #See above

ZOOM ==>                                        #Modifies physical resolution:
                                                #  - not logical, i.e. logical sizes|dimensions will be kept (except for the jittering caused by changing number of available logical pixels)
                                                #Difference:
                                                #  - zoom changes physical resolution by changing available physical pixels (not logical)
                                                #  - high-resolution displays changes physical resolution by changing available logical pixels (not physical)
                                                #Since it changes available logical pixels:
                                                #  - it will move things around and change elements dimensions|positions
                                                #  - but zooming in is theoritically the same as a device with smaller logical dimensions and higher physical resolution

TYPICAL SIZES ==>                               #In CSS pixels:
                                                #  - smartphones: 320-400 x 480-700
                                                #  - phablets: 360-440 x 640-780
                                                #  - tablets: 600-800 x 1000-1300
                                                #  - notebooks/monitors: 1024-2560 x 768-1600

<meta name="viewport" content="WORD, ...">/     #WORD:
                                                #  - width|height=NUM|device-width|height:
                                                #     - viewport logical size, on mobile browsers
                                                #     - as such, it changes pixel ratio
                                                #     - def: desktop-like size, e.g. 980 for width (for non-responsive websites)
                                                #     - device-width|height:
                                                #        - use SCREEN.width|height, i.e. fits real mobile mobile size (with "normal" pixel ratio)
                                                #        - should use width=device-width
                                                #     - not updated on rotation, unless initial-scale defined (should do it)
                                                #  - initial|minimum|maximum-scale=DOUBLE: zoom value, from 0.0 to 10.0
                                                #     - def initial-scale:
                                                #        - zoom out to fit content.
                                                #        - should be 1 instead if website is responsive
                                                #  - user-scalable=yes|no:
                                                #     - user can zoom-in|out (def: yes)
                                                #     - should be enabled (better accessibility)
                                                #     - disabling zoom used to also disable the 300ms tap delay (used for double-tap zooms), but this delay is not used anymore
                                                #  - shrink-to-fit=yes|no:
                                                #     - zoom out to fit content
                                                #     - Def: yes, should be no
                                                #     - Mobile Safari-specific

FREQUENCY ==>                                   #Frame rate|frequency:
                                                #  - number of frames per second (FPS)
                                                #  - often expressed in Hz
                                                #  - usually 60Hz

ROTATION ==>                                    #Can force rotation lock with @media (orientation) + html { transform: rotate(90deg); }


SCREEN.colorDepth                               #Should always be 24, i.e. 8/channel with RGB.
SCREEN.pixelDepth                               #Same as colorDepth

                                  ┌───────────┐
                                  │   TYPES   │
                                  └───────────┘

STR
"STR"
'STR'                                           #
VAR                                             #VAR names, e.g. COUNTER_VAR

INT                                             #
NUM                                             #Single-precision FLOAT, can use scientific notation.
LEN                                             #Relative to font-size:
                                                #  - NUMrem: 1em === <html> font-size
                                                #  - NUMem: 1em === current font-size
                                                #     - when inherited, 1em === parent (that uses NUMem) font-size
                                                #     - to always use current font-size instead, use NUM (only with line-height)
                                                #  - NUMex: lowercase x-height (baseline to meanline) in current font-size
                                                #  - NUMch: '0' width (including left|right bearing (i.e. spaces)) in current font-size
                                                #Relative to viewport size (i.e. only visible part):
                                                #  - NUMvh|vw: 1% of viewport height|width
                                                #  - NUMvmin: 1% of viewport min(height, width)
                                                #Absolute:
                                                #  - NUMpx: logical pixels
                                                #  - NUMin|pc|pt|cm|mm (avoid):
                                                #     - number of logical pixels using 96ppi logical resolution
                                                #     - 96px = 1in = 6pc = 72pt = 2.54cm = 25.4mm
PERC                                            #Percentage. Depends on property.
LENP                                            #LEN|PERC

LENGTHS ==>                                     #Which unit to use, according to whether size depends on:
                                                #  - textual content (e.g. should keep number of lines or chars per line):
                                                #     - em (uppercase height)
                                                #     - ex (lowercase x-height)
                                                #     - ch (width)
                                                #  - container:
                                                #     - parent: %
                                                #        - should be used in most components, so they are layout-agnostic
                                                #     - viewport: v*
                                                #        - should only be used in big|page-size layout components
                                                #  - nothing: px
                                                #font-size property:
                                                #  - should use:
                                                #     - rem: at component root to reset font size
                                                #     - em: otherwise
                                                #  - only em|rem use browser default font size (for accessibility)
                                                #calc(LEN + v*) is often used:
                                                #  - "CSS locks":
                                                #     - removing v* under|above some viewport size (using media queries) so that is does not decrease|increase too much
                                                #     - must add NUMpx to LEN in order to compensate loss of v* (to keep continuity)
                                                #        - e.g. if 5vw, NUM = 0.05 * breakpoint viewport width
                                                #  - using em|rem in LEN:
                                                #     - should be done with font-size (see above)
                                                #        - e.g. root font-size: calc(1rem + NUMpx + NUM2vmin)
                                                #     - with "CSS locks", should keep same em|rem across breakpoints:
                                                #        - otherwise continuity cannot be calculated (since default browser font size is unknown)
                                                #        - i.e. should change rest of LEN instead, e.g. NUMpx

RESOLUTION                                      #NUMdpi (physical resolution)

DIRECTION                                       #top|left|bottom|right|center
POSITION                                        #[DIRECTION] [LENP] [DIRECTION2] [LENP2]
                                                #Syntax:
                                                #  - DIRECTION2 must be specified if DIRECTION and LENP[2] are
                                                #  - center cannot use LENP[2] 0
                                                #Def:
                                                #  - DIRECTION: left
                                                #  - DIRECTION2: top if LENP2 specified, center otherwise
                                                #  - LENP[2]: 0

ANGLE                                           #NUMdeg, NUMrad, NUMgrad, NUMturn. Can be negative.

TIME                                            #TIMEms|TIMEs
COLOR                                           #Can be:
                                                #  - STR, including blue, red, etc. (SVG color keywords) (avoid)
                                                #  - #NNN[A][NNN[A]]
                                               $#    CSSNext 'colorHexAlpha' when specifying alpha
                                                #  - rgb[a](255|100%,255|100%,255|100%[,1])
                                                #  - hsl[a](360,100%,100%[,1])
                                               $#  - hwb(360,100%,100%[,1])
                                               $#    CSSNext 'colorHwb'
                                               $#  - gray(VAL[,1]): same as rgba(VAL, VAL, VAL[,1])
                                               $#    CSSNext 'colorGray'
                                                #  - transparent: like rgba(1,1,1,0)
                                                #  - currentColor: current font "color"
                                               $#  - color(COLOR|HUE [MOD(VAL) ...])
                                               $#     - where MOD(VAL) can be:
                                               $#        - red|green|blue|alpha|a([+|-|* ]NUM|PERC)
                                               $#        - hue|saturation|lightness([+|-|* ]PERC)
                                               $#        - whiteness|blackness([+|-|* ]PERC)
                                               $#        - blend(COLOR2 PERC [rgb|hsl|hwb])
                                               $#        - tint|shade(PERC): same as blend(white|black PERC rgb)
                                               $#        - contrast(PERC): create different color with sufficient contrast
                                              $$#     - not supported by CSSNext: COLOR cannot be currentColor
                                               $#     - CSSNext 'colorFunction'

URI                                             #url("URI")|none
GRADIENT                                        #[repeating-]linear-gradient(ANGLE|STR, COLOR[ LENP],...)
                                                #  - STR: to [left|right] [top|bottom] (def: to bottom)
                                                #  - LENP: def: 0|100% for begin|end, interpolation for others.
                                                #    Cannot be negative.
                                                #[repeating-]radial-gradient([STR][ VAL][at POSITION], COLOR[ PERC],...)
                                                #  - STR: circle or ellipse (déf)
                                                #  - VAL is radius (def: farthest-corner):
                                                #    - STR: closest|farthest-corner|side
                                                #    - LEN for circle, LENP LENP2 for ellipse
                                                #  - POSITION is center (def: center)
                                               $#conic-gradient([from ANGLE] [at POSITION], COLOR[ ANGLE2|PERC2][ANGLE3|PERC3])
                                               $#  - ANGLE (def: 0deg): starting angle
                                               $#  - POSITION is center (def: center)
                                               $#  - ANGLE3|PERC3:
                                               $#     - adds a second color stop with same COLOR
                                               $#     - so there is plain (non-interpolated) color between the two color stops with same COLOR
                                               $#  - 'postcss-conic-gradient' (to document when used) (does not seem to support from ANGLE or at POSITION)
IMAGE                                           #URI|GRADIENT

FUNC                                            #FUNC(ARG)


calc(EXPR)                                      #Perform - + * / operations:
                                                #  - any NUM value, with[out] units
                                                #     - for * /, only one side can have unit
                                                #     - for + -, can mix units
                                                #  - can use ( )
                                                #  - must use space around operators
                                                #Cannot be used in MEDIAQUERY

VAL,...                                         #Usually used for similar-kind values
VAL ...                                         #Usually used for different-kind values (e.g. shorthands), and for positions lists

                                  ┌──────────────────┐
                                  │   BASIC SYNTAX   │
                                  └──────────────────┘

CASE  ==>                                       #Case sensitive.

WHITESPACES ==>                                 #Skips whitespaces.

ERRORS ==>                                      #Unknown @RULE|PROP|VAL or grammar errors are skipped
                                                #This allows introducing new ones without breaking old browsers

@charset "CHARSET";                             #Should always be at beginning with no newline|whitespace before.
                                                #Ex: "UTF-8"
                                                #Not needed if CSS served with Content-Type with correct charset

ESCAPING ==>                                    #Escaping:
                                                #  - \CHAR (ASCII only)
                                                #  - \XX[XX[XX]]
                                                #Those chars are permitted unescaped:
                                                #  - in tokens (VAR, SELECTOR, unquoted STR, etc.): [:alnum:] _
                                                #  - in strings (quoted STR, URI, etc.): anything but newline
CSS.escape(STR)->STR                           $#Escape so it can be used as token or string (e.g. by querySelector())
                                               $#'mathiasbynens CSS.escape' (1.5.0)

                                  ┌────────────┐
                                  │   SYNTAX   │
                                  └────────────┘

/* COMMENT */

@STR VAL;                                       #At-rules

SELECTORS {                                     #RULE
  PROP: VAL;...
}


VALUE CALCULATION ==>                           #  - declared: as written in CSS prop
                                                #  - cascaded: after cascading, i.e. picks one among many declared values
                                                #  - specified: after defaulting, i.e. assigning default value if cascading value empty:
                                                #     - for inherited properties, and has parent: parent computed value
                                                #     - otherwise, default value ("initial value")
                                                #  - computed: after non-layout calculation, e.g. resolving relative URI, em, keywords (bold)
                                                #  - used: after layout calculation, e.g. resolving auto, %, vh
                                                #  - actual: after browser correction, e.g. border-width FLOAT->INT

INHERITANCE ==>                                 #Some properties are inherited by elements children:
                                                #  - paragraph-related: text-align, white-space, visibility, etc.
                                                #  - font-related: color, font-*, etc.
                                                #  - table-related: border-collapse, etc.
                                                #  - list-related: list-*
                                                #  - quotes

initial                                        $#Used as a VAL, means initial value
                                               $#CSSNext 'initial' (PLUGIN_OPTS: see 'all')
inherit                                         #Used as a VAL, means parent VAL:
                                                #  - for inherited properties, allows restoring values, e.g.:
                                                #      .CLASS        { font-weight: bold;    } // Override parent VAL
                                                #      .CLASS.CLASS2 { font-weight: inherit; } // Restore parent VAL
                                                #  - for non-inherited properties, make them inherited, e.g.:
                                                #      PARENT { border: VAL }
                                                #      CHILD { border: inherit }

all: VAL                                       $#Same as { PROP: VAL ... } for any possible PROP
                                               $#VAL can be initial|inherit|unset|revert
                                               $#CSSNext 'initial':
                                               $#  - initial only
                                               $#  - polyfills by replacing with all PROP: initial_value (for all PROP).
                                               $#    So should use only once, then inherit from it, otherwise big file size.
                                               $#  - PLUGIN_OPTS:
                                               $#     - replace BOOL (def: false): whether to only add polyfill or replace 'all'
                                               $#       altogether
                                               $#     - reset STR: which PROP to use:
                                               $#        - 'all' (def)
                                               $#        - 'inherited': only PROP that can be inherited

SHORTHAND PROPERTY ==>                          #Allow defining several properties in one, e.g. border, outline,
                                                #margin, padding, font, etc.
                                                #Note:
                                                #  - ommitted VAL takes default value, even if previously defined
                                                #  - inherit|initial|unset only works with 1-value syntax
                                                #  - order usually does not matter if can guess from parameter types.  Otherwise:
                                                #     - on positional values:
                                                #        - 4: TOP RIGHT BOTTOM LEFT
                                                #        - 3: TOP RIGHT|LEFT BOTTOM
                                                #        - 2: TOP|BOTTOM RIGHT|LEFT
                                                #        - 1: TOP|BOTTOM|RIGHT|LEFT
                                                #     - on corners: same but -45deg:
                                                #        - 4: TOP-LEFT TOP-RIGHT BOTTOM-RIGHT BOTTOM-LEFT
                                                #        - 3: TOP-LEFT TOP-RIGHT|BOTTOM-LEFT BOTTOM-RIGHT
                                                #        - 2: TOP-LEFT|BOTTOM-RIGHT TOP-RIGHT|BOTTOM-LEFT
                                                #        - 1: TOP-LEFT|BOTTOM-RIGHT|TOP-RIGHT|BOTTOM-LEFT
                                                #     - others: see properties

                                  ┌───────────────┐
                                  │   VARIABLES   │
                                  └───────────────┘

--VAR: VAL                                     $#Declare a PROP's value variable
                                               $#Scoping:
                                               $#  - scoped to current SELECTORS, including @media.
                                               $#  - overrides declarations of VAR for less specific selectors.
                                               $#  - CSSnext only supports scoping to :root
                                               $#Updating a variable (e.g. using CSSOM) updates its references.
                                               $#CSSNext 'customProperties'
                                               $#PLUGIN_OPTS:
                                               $#  - variables.VAR:
                                               $#     - add :root declarations with higher priority
                                               $#     - can also use PLUGIN.setVariables(OBJ)
                                               $#  - strict BOOL: if true (def), first output default value declaration, then
                                               $#    actual declaration
                                               $#  - preserve BOOL|STR (def: false):
                                               $#     - if true|'computed', keeps --VAR: VAL in output
                                               $#     - if true, keeps var(--VAR) in output
                                               $#  - appendVariables BOOL (def: false): adds var(--VAR) at the end of output (unless preserve false)
                                               $#  - warnings BOOL (def: true)
var(--VAR[, VAL])                              $#Use a PROP's value variable
                                               $#VAL is default value

@custom-media --VAR MEDIAQUERYLIST             $#Declare a MEDIAQUERYLIST variable
                                               $#CSSNext 'customMedia'
                                               $#PLUGIN_OPTS:
                                               $#  - extensions.VAR: declare variables
                                               $#  - preserve BOOL (def: false): keeps @custom-media in output
                                               $#  - appendExtensions BOOL (def: false): adds @custom-media at end of output
                                               $#    (unless preserve false)
(--VAR)                                        $#Use a MEDIAQUERYLIST variable

@custom-selector :--VAR SELECTORS              $#Declare a SELECTORS variable
                                               $#Considered a :PSEUDO selector, which evaluates to :matches(SELECTORS)
                                               $#CSSNext 'customSelectors'
                                               $#PLUGIN_OPTS:
                                               $#  - extensions[:--VAR]: declare variables
                                               $#  - transformMatches BOOL (def: true): transform to :matches(SELECTORS)
                                               $#  - lineBreak BOOL (def: true): add newline after ,
:--VAR                                         $#Use a SELECTORS variable

--MIXIN { PROP: VAL, ... };                    $#Declare a MIXIN.
                                               $#Must be scoped by a selector, including :root
                                               $#When redefined, it resets previous definition (as opposed to merging)
                                               $#CSSNext 'applyRule':
                                               $#  - only scoped to :root
@apply --MIXIN;                                $#Use a MIXIN, i.e. expand it.
                                               $#Must be where a PROP would have been

                                  ┌──────────────┐
                                  │   AT-RULES   │
                                  └──────────────┘

@import URI|"URI" [MEDIAQUERY]                  #Must be put first, but after @charset

@namespace [NAMESPACE] URI|"URI"                #Define an XML NAMESPACE or the default one (URI points to XML namespace)
                                                #This allows using NAMESPACE|SELECTOR, to restrict to a given NAMESPACE,
                                                #or SELECTOR to use default one.
                                                #Useful e.g. when mixing SVG with XHTML.
                                                #Must be put first, but after @charset|import

                                  ┌───────────────────┐
                                  │   MEDIA QUERIES   │
                                  └───────────────────┘

@media MEDIAQUERYLIST { RULE }                  #Fire RULE if MEDIAQUERYLIST is met:
                                                #  - MEDIAQUERYLIST: [not] MEDIAQUERY,...
                                                #     - comma is 'or'
                                                #  - MEDIAQUERY:
                                                #     - MEDIA|(FEATURE) [and ...]
                                                #     - if present, MEDIA must be first
                                                #  - MEDIA: "all|screen|print|speech" (def: 'all'): device type
                                                #  - (FEATURE) is either:
                                                #     - ([min-|max-]VAR[: VAL]) (def VAL: "not 0")
                                               $#     - ([NUM OP] VAR [OP2 NUM2]), where OP is < <= = >= >
                                               $#       CSSNext 'mediaQueriesRange'
                                                #  - VAR|VAL are:
                                                #     - height|width LEN: viewport size
                                                #     - aspect-ratio NUM/NUM2 (e.g. 16/9)
                                                #     - resolution RESOLUTION
                                               ##       Ext: -webkit. Called device-pixel-ratio on Safari
                                                #     - orientation landscape|portrait
                                                #     - color NUM: bits/channel (0 if no colors)
                                                #     - color-index NUM: number of indexed colors (0 if none)
                                                #     - monochrome NUM: bits/channel. If not monochrome, 0.
                                                #     - scan progressive|interlace (for tv)
                                                #     - grid NUM: 1 if tty or feature phone old display (0 otherwise)
                                               $#     - hover none|hover (def: hover):
                                               $#        - input device can hover (e.g. mouse, not touchscreen)
                                               $#        - primary input only, i.e. secondary input might have different behavior
                                               $#        - 'mq4-hover-shim' (0.3.0) (PostCSS) (to document when used)

<link|style|source>
  media="MEDIAQUERYLIST"                        #Does not work for <link rel="import">
STYLESHEET|MEDIARULE|IMPORTRULE.media           #MEDIALIST
MEDIALIST.length
MEDIALIST[UINT]                                 #'MEDIAQUERY'
MEDIALIST.mediaText                             #'MEDIAQUERYLIST'
MEDIALIST.appendMedium('MEDIAQUERY')
MEDIALIST.deleteMedium('MEDIAQUERY')            #

WINDOW.matchMedia("MEDIAQUERYLIST")->MQUERYLIST #
MEDIAQUERYLIST.media                            #"MEDIAQUERYLIST". Readonly
MEDIAQUERYLIST.matches                          #BOOL
MEDIAQUERYLIST.add|removeListener
(FUNC("MEDIAQUERYLIST"))                        #When matches changes.

                                  ┌───────────────┐
                                  │   SELECTORS   │
                                  └───────────────┘


SPECIFICITY ==>                                 #When several SELECTOR for the same element.
                                                #Priority is 'specificity', checking:
                                                #  - !important > HTML-inline > #ID > .CLASS|:PSEUDO|[ATTR] > TAG|::PSEUDO > declaration source order (even if async)
                                                #     - compare first, then second, etc.
                                                #     - often noted '[[NUM,]NUM2,]NUM3,NUM4,NUM5'
                                                #     - * is never counted
                                                #  - add points to matching SELECTOR, i.e.:
                                                #     - SSELECTOR combinators (except ,): add points
                                                #     - SELECTOR,... or :matches(SELECTOR,...): only matching ones
                                                #     - :not(SELECTOR,...): max points
                                                #  - avoid !important
                                                #Also depends on origin of the stylesheet:
                                                #  - user agent < end-user < website
                                                #  - order inverted if !important

SELECTORS                                       #Same as SELECTOR,...
SELECTOR                                        #Include combinators
SSELECTOR                                       #Exclude combinators

SELECTOR, SELECTOR2,...                         #Or
SSELECTORSSELECTOR2                             #And

SSELECTOR SSELECTOR2 ...                        #Descendant
SSELECTOR > SSELECTOR2 >...                     #Direct child
SSELECTOR + SSELECTOR2 +...                     #Direct next sibling
SSELECTOR ~ SSELECTOR2 ~...                     #Any following sibling

SELECTORS { [@nest] SELECTORS2 { ... } }       $#Each SELECTOR2 must contain &:
                                               $#  - SELECTORS is removed, but replaces each & by :matches(SELECTORS)
                                               $#  - @nest is mandatory if SELECTORS2 does not start with &
                                               $#CSSNext 'nesting'
SELECTORS { @RULE { ... } }                    $#Same as @RULE { SELECTORS { ... } }
                                               $#CSSNext 'nesting'
                                               $#PLUGIN_OPTS:
                                               $#  - bubble STR_ARR (def: 'document', 'media', 'supports'): supported @RULE
@RULE { @RULE2 { ... } ... }                   $#Combines @RULEs
                                               $#CSSNext 'nesting'


:not(SELECTOR,...)                              #!SELECTOR && ...
                                               $#CSSNext 'pseudoClassNot' (using several SELECTOR,...)
:matches(SELECTOR,...)                         $#SELECTOR || ...
                                               $#CSSNext 'pseudoClassMatches' (only works with several SELECTOR)
                                               $#PLUGIN_OPTS: lineBreak BOOL (def: false)


*                                               #Any. To avoid.
TAG                                             #<TAG>

[ATTR]                                          #ATTR exists
[ATTR="STR"]                                    #ATTR value === "STR"
[ATTR$="STR"]                                   #ATTR value === "[...]STR"
[ATTR^="STR"]                                   #ATTR value === "STR[...]"
[ATTR|="STR"]                                   #ATTR value === "STR[-...]"
[ATTR*="STR"]                                   #ATTR value === "[...]STR[...]"
[ATTR~="STR"]                                   #ATTR value === "[... ]STR[ ...]"
#ID                                             #Same as [id="ID"]. Prefer using .CLASS
.CLASS                                          #Same as [class~="CLASS"]

:enabled|disabled                               #ELEM.disabled
:checked                                        #ELEM.checked|selected
:lang(LANG)                                     #Like [lang="LANG"] but case-insensitive, and includes parents
:target                                         #ID is URL's #HASH
                                               ##IE11<: does not react to back|forward history buttons

:required                                       #Like input|textarea|select[required]
:optional                                       #Like input|textarea|select:not([required])
:indeterminate                                  #Like input[type="checkbox"] + ELEM.indeterminate === true
:[in]valid                                      #ELEM.validity.valid

:link                                           #Like [href], not previously clicked on it.
                                                #Should follow this order: :link, :visited, :hover, :active
:visited                                        #Like [href], previously clicked on it.
                                                #Can apply change color-related properties (and not opacity).
:any-link                                      $#Like [href], previously clicked on it or not
                                               $#CSSNext 'pseudoClassAnyLink'

:root                                           #<html>
::placeholder                                   #<input|textarea> placeholder
                                                #Can only change font, text decoration and background properties
                                               ##Called ::input-placeholder by IE (automatically handled by Autoprefixer)

:empty                                          #Has no child
:nth-child([NUMn] + [NUM2])                     #Current element is x-th's child of its parent, where x === NUM*n + NUM2, with n>0
                                                #NUM|NUM2 can be negative.
                                                #Can also be :nth-child(odd|event), i.e. 2n[+1]
:nth-last-child(...)                            #Same but counting children from the end.
:first|last-child                               #Same as :nth-[last-]child(1)
:only-child                                     #Same as :first-child:last-child
:...-of-type                                    #Same as :...-child, but consider children tag by tag.

:hover                                          #On mouseover.
:active                                         #On clickdown.
:focus                                          #On focus.
::selection                                     #On selection.
                                                #Can only change color, background-color, outline, text-decoration, text-emphasis-color, text-shadow
                                                #Setting one resets the others

::first-letter                                  #Can only change font, text decoration, background and box model properties
                                                #Does not work with flexbox
                                                #Display BLOCK only
::first-line                                    #Can only change font, text decoration and background properties
                                                #Does not work with flexbox
                                                #Display BLOCK only

                                  ┌────────────────┐
                                  │   DIMENSIONS   │
                                  └────────────────┘

BOX MODEL ==>                                   #Content > Padding > Border > Margin
[min|max-]height|width: LENP|auto               #Actual content:
                                                #  - def: auto, i.e. according to content
                                                #     - exception: BODY, according to viewport (except for its scrollbar, the top-level one)
                                                #  - Can use box-sizing: content-box|border-box:
                                                #     - if border-box, specifies border-box height|width, not actual content
                                                #     - for browser compatibility (useless)
                                                #  - percentage:
                                                #     - *width:
                                                #        - containing block's width
                                                #     - *height:
                                                #        - if position: absolute|fixed, containing block's height
                                                #        - otherwise, closest containing block's with specified height
                                                #        - otherwise, <body> height
                                                #  - Display BLOCK only
padding[-top|bottom|left|right]: LENP           #Padding:
                                                #  - space between content and border
                                                #  - def: 0
                                                #  - Percentage: containing block's width
border-top|bottom|left|right-width: LEN|STR     #Border: see below (def: medium, but border-style none)
margin[-top|bottom|left|right]: LENP|auto       #Margin:
                                                #  - margin-top|bottom: Display BLOCK only
                                                #  - can be negative:
                                                #     - left|top: will move element itself
                                                #     - right|bottom: will move next elements
                                                #  - def: 0
                                                #  - Percentage: like padding
                                                #  - auto: like 0, except horizontally centers if:
                                                #     - on both margin-left|right
                                                #     - not floats
                                                #     - if position: absolute|fixed, both left and right not 'auto'
                                                #     - Display BLOCK only
                                                #  - collapsed:
                                                #     - when two margin-top|bottom follow each other with nothing in-between, e.g.:
                                                #        - margin-bottom and margin-top of an element with content+padding+border 0px
                                                #        - nothing (border|padding, text node, etc.) separating:
                                                #           - first child's margin-top and parent's margin-top
                                                #           - last child's margin-bottom and parent's margin-bottom
                                                #        - two vertical siblings (not necessarily same tag)
                                                #     - only bigger margin is kept.
                                                #       If negative NUM, sum of smallest negative NUM and biggest positive NUM.
                                                #     - both elements must be normal flow and not flex items|containerss

line-height: LENP|normal|NUM                    #Line boxes min-height
                                                #Display INLINE only
                                                #Percentage: like using NUMem
                                                #NUM (prefer) is like NUMem, but always current font-size even when inherited (see above)
                                                #Def: normal (around 1.2)

                                  ┌────────────────────────────┐
                                  │   CSSOM VIEW: DIMENSIONS   │
                                  └────────────────────────────┘

WINDOW.screen                                   #SCREEN
WINDOW.screenX|Y                                #Distance between real screen topleft corner and browser window topleft corner.
SCREEN.width|height                             #Real screen size.
                                                #IE: takes zoom into account
SCREEN.availWidth|Height                        #SCREEN.width|height minus OS's UI
WINDOW.outerHeight|Width                        #Browser tab screen size (including browser UI)

SCROLLING HEIGHT|WIDTH ==>                      #If scrollable, difference between:
                                                #  - visual dimensions|viewport: only visible part
                                                #  - layout dimensions|viewport: also non-visible part
                                                #'scrollable':
                                                #  - means scrolling on the given element, not a parent
                                                #  - i.e. only BODY are 'scrollable' according to top-level scroll
                                                #Unless specified:
                                                #  - WINDOW|HTML|BODY: layout dimensions
                                                #  - ELEM: visual dimensions
                                                #  - all: include scrollbar
                                                #BODY:
                                                #  - width: auto: see above
                                                #  - scrollHeight uses HTML margin-box instead

WINDOW.innerHeight|Width                        #Viewport size (including scrollbar)

HTMLELEM.offsetHeight|Width                     #Border-box (readonly)
ELEM.clientHeight|Width                         #Padding-box (display BLOCK only) (readonly) (visual dimensions) (excluding scrollbar)
ELEM.scrollHeight|Width                         #Padding-box (display BLOCK only) (readonly) (layout dimensions) (excluding scrollbar)

ELEM.clientTop|Left                             #Top|Left border-width (display BLOCK only) (readonly)

                                  ┌─────────────┐
                                  │   DISPLAY   │
                                  └─────────────┘

TEXT NODES ==>                                  #display: block but behaves like Display INLINE

display: VAL                                    #Default depends on HTML tag:
                                                #  - <table>-related elements: display: table-*
                                                #  - <li>: display: list-item
                                                #  - <ol|ul>: display: block
                                                #  - invisible content, like <head|link|script|meta|title|base>: display: none
                                                #  - top-level controls, like <input|button|textarea|select>: display: inline-block
                                                #  - lower-level controls, like <optgroup|option>: display: block
                                                #  - replaced elements: no default display
                                                #  - phrasing content, like <span>: display: inline
                                                #  - sectioning content, like <div|p>: display: block

display: inline|inline-block|block              #Differences:
                                                #  - normal flow:
                                                #     - inline elements stacked horizontally (using line boxes)
                                                #     - block vertically
                                                #     - inline-block horizontally unless they span another line
                                                #  - inline[-*] usually phrasing content, block usually sectioning or embedded content
                                                #  - some properties are only for Display BLOCK (e.g. *width|height, margin-top|bottom), others only for Display INLINE (e.g. line-height)
Display BLOCK                                   #Means not display: inline
Display INLINE                                  #Means display: inline[-*]

SPACES BETWEEN INLINE ELEMENTS ==>              #HTML whitespace between inline elements is collapsed as a single space character.
                                                #This is not always wanted, especially for inline-block elements.
                                                #Possible solutions:
                                                #  - avoid HTML whitespace, e.g. wrapping it in a comment or omitting optional end tags (e.g. <li>)
                                                #  - fix with CSS:
                                                #     - manual positioning
                                                #     - or parent font-size to 0 (for the inserted space) then override on the children
                                                #     - in both cases, word-spacing will increase space size, so should not be used

display: none                                   #Remove element from layout
<any>                                           #Like display:none but:
  hidden                                        #  - overriden if CSS display specified
                                                #  - to use when should never be shown in current state
visibility: STR                                 #Affect visibility:
                                                #  - visible (def)
                                                #  - hidden: but does not affect layout

                                  ┌──────────────┐
                                  │   POSITION   │
                                  └──────────────┘

CONTAINING BLOCK ==>                            #Means (according to position):
                                                #  - static|relative or floats: closest parent's content box with Display BLOCK
                                                #  - absolute: closest positioned parent's padding box (if none, <body>)
                                                #  - fixed: viewport (i.e. not affected by scrolling)
POSITIONED ==>                                  #Means position: relative|absolute|fixed

NORMAL FLOW ==>                                 #
position: static                                #  - normal (def)
position: relative                              #  - same, but with shift relative to normal position.
                                                #    Siblings and parents stay at same position.

FLOATS ==>                                      #
float: left|right|none                          #Align to left|right, taking space normal flow cannot occupy anymore:
                                                #  - taken out of normal flow, e.g. does not modify parent's height|width (see clearfix)
                                                #  - will stack horizontally with other floats (unless clear: left|right|both)
                                                #  - forces display: block|table
clear: none|left|right|both                     #Shift element down to the lowest left|right|both floating box
                                                #No effect on position: absolute|fixed
                                                #"Clearfix":
                                                #  - make float's parent's min-height === float's height
                                                #  - how: set on parent those properties:
                                                #     - overflow: hidden|auto
                                                #     - or content: "" (with :after), display: block|table, clear: both
                                                #  - for IE7, used to require also zoom: 1 or width: 100%

ABSOLUTE ==>                                    #Taken out of normal flow:
position: absolute|fixed                        #  - margin-box relative to containing block

top|bottom|right|left: LENP|auto                #Specify shift|position with position: relative|absolute|fixed
                                                #Def: auto, i.e. 'not specified'
                                                #Percentage:
                                                #  - containing block's height|width
                                                #  - top|bottom with position: relative has no effect

STACKING CONTEXT ==>                            #Created when:
                                                #  - <html> (root)
                                                #  - z-index non-auto
                                                #  - opacity, blend mode, filter
                                                #  - transform
                                                #  - will-change
                                                #  - @page @POSITION
                                                #  - CSS region
                                                #Stacking context are isolated from each other:
                                                #  - children are stacked independently of their stacking context's siblings|parents
                                                #Inside a stacking context (but not recursively) elements are stacked according to (in order):
                                                #  - position: positioned + z-index>=0 > static (including parent) > positioned + z-index<0 > stacking context top element
                                                #     - positioned: absolute|fixed > float > relative
                                                #  - z-index: higher is on top
                                                #  - DOM order
z-index: NUM|auto                               #auto (def): like 0 except does not create stacking context
                                                #No effect (including creating stacking context) if position: static, unless flexbox item

                                  ┌────────────────┐
                                  │   FULLSCREEN   │
                                  └────────────────┘

ELEM.requestFullscreen()->PROMISE()            $#Make ELEM fullscreen:
                                               $#  - introduces an "always-top" stacking context
                                               $#  - should show user that Esc removes fullscreen mode
                                               $#Will either:
                                               $#  - succeed: PROMISE resolved, fullscreenchange event
                                               $#  - be rejected: PROMISE resolved, fullscreenerror event (e.g. on <iframe>)
                                               $#Browser support:
                                               $#  - ext: -webkit-, -ms-, -moz- (sometimes different case too)
                                               $#     - including ::fullscreen, called e.g. ::[-EXT-]full-screen in Chrome|Opera|Safari
                                               $#  - IE use callbacks not PROMISE
                                               $#  - almost no support for ::backdrop
                                               $#  - no support on Mobile Safari, but degrades gracefully
                                               $#'fullscreen-api-polyfill' (1.1.2):
                                               $#  - fixes browser incompatibility
                                               $#  - does not polyfills CSS pseudo-elements
DOCUMENT.exitFullscreen()->PROMISE()           $#
DOCUMENT.fullscreenEnabled                     $#BOOL: true if supported and can request
DOCUMENT.fullscreenElement                     $#ELEM|null
DOCUMENT.onfullscreenchange|error = FUNC(EVENT)$#See above

:fullscreen                                    $#When contained (including descendant) in "always-top" fullscreen stacking context

<iframe>
  allowfullscreen="true|false"                 $#ELEM.requestFullscreen() fails unless this is set to true (def: false)

                                  ┌──────────────────────────┐
                                  │   CSSOM VIEW: POSITION   │
                                  └──────────────────────────┘

ELEM|RANGE.getClientRects()->OBJ_ARR            #Returns all border-boxes as OBJ:
                                                #  - top|bottom|left|right: offset compared to visual viewport's top-left corner
                                                #  - width|height
                                                #I.e. inline elements have one border-box for each line.
                                                #Readonly
ELEM|RANGE.getBoundingClientRect()->OBJ         #Same but using union of all getClientRects()
DOCUMENT.elementFromPoint(DOUBLE,DOUBLE2)->ELEM #innermost ELEM with boundingClientRect containing DOUBLE,DOUBLE2 point
                                                #null if out-of-bound

HTMLELEM.offsetParent                           #Containing block (null for viewport)
                                                #Readonly
HTMLELEM.offsetTop|Left                         #Shift from HTMLELEM border to HTMLELEM.offsetParent padding.
                                                #Readonly

                                  ┌───────────────┐
                                  │   ALIGNMENT   │
                                  └───────────────┘

SUMMARY ==>                                     #  - no alignment needed       -> width: auto
                                                #  - position: static|relative -> flexbox alignments
                                                #  - position: absolute|fixed  -> margin-[OPP-]DIR: auto; [OPP-]DIR: 0
                                                #  - inline lines              -> text-align, vertical-align
                                                #  - more flexibility needed   -> DIR: calc(PERC - EDIM * PERC2)

NOTATION ==>                                    #  - DIR: left|right|top|bottom
                                                #  - [OPP-]DIR: must use both, e.g. left and right
                                                #  - PDIM|EDIM: parent|element dimension (see boxes to see if it is padding-box, etc.)
                                                #  - PERC: is -PERC with right|bottom property
                                                #  - PERC2:
                                                #     - which part of the element gets aligned (def: middle)
                                                #     - is FLOAT when in an operation, percentage otherwise
                                                #  - |||: better alternatives exist

                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
                                                #  | DIRECTION  | DISPLAY      | POSITION                | PARENT | ELEM  | ALIGNMENT | BASELINE | BOXES                       | NOTES                 |
                                                #  |            |              |                         | SIZE   | SIZE  | (PERC)    | (PERC2)  | (CHILD -> PARENT|CONTAINER) |                       |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
width: auto                                     #  | horiz,vert | block        | static,relative         |        | whole | 50%       |          | margins -> paddings         |                       |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
flex-grow|shrink                                #  | horiz,vert | flex         | static,relative         |        |       | any       |          | margins -> content          |                       |
justify-content                                 #  | horiz,vert | flex         | static,relative         |        |       | 0,50,100% |          | margins -> content          |                       |
align-content                                   #  | horiz,vert | flex         | static,relative         |        |       | 0,50,100% |          | margins -> content          |                       |
align-items|self                                #  | horiz,vert | flex         | static,relative         |        |       | 0,50,100% |          | margins -> content          |                       |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
margin-left|right: auto                         #||| horiz      | block        | static,relative         |        |       | 0,50,100% |          | margins -> content          |                       |
margin-[OPP-]DIR: auto; [OPP-]DIR: 0            #  | horiz,vert | block        | absolute,fixed          |        |       | 0,50,100% |          | margins -> paddings         |                       |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
DIR: calc(PERC - EDIM * PERC2)                  #  | horiz,vert | block        | relative,absolute,fixed |        | known | any       | yes      | any     -> paddings         |                       |
DIR: PERC; margin-DIR: EDIM * -PERC2            #||| horiz,vert | block        | relative,absolute,fixed |        | known | any       | yes      | any     -> paddings|content |                       |
DIR:PERC;translateX|Y(-PERC2);margin-[OPP-]DIR:0#||| horiz,vert | block        | relative,absolute,fixed |        |       | any       | yes      | margins -> content          | see "hack note" below |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
margin-DIR: (PDIM - EDIM) * PERC                #||| horiz,vert | block        | static,relative         | known  | known | any       |          | borders -> content          |                       |
padding-DIR: (PDIM - EDIM) * PERC               #||| horiz,vert | block        | static,relative         | known  | known | any       |          | margins -> paddings         | on parent             |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+
text-align: left|center|right                   #  | horiz      | inline lines | any                     |        |       | 0,50,100% |          | margins -> content          |                       |
vertical-align: middle|PERC                     #  |       vert | inline lines | any                     |        |       | any       |          | margins -> content          | parent must be inline |
vertical-align: middle; display: table[-cell]   #|||       vert | inline whole | static,relative         |        |       | 50%       |          | margins -> content          | table is on parent    |
                                                #  +------------+--------------+-------------------------+--------+-------+-----------+----------+-----------------------------+-----------------------+

HACK NOTES ==>                                  #  - DIR: PERC; translateX|Y() requires margin-right: -PERC
                                                #     - if position: absolute|fixed and DIR is left|right
                                                #     - reason:
                                                #        - width calculation is done after right|left (reducing available space) but before translate() is performed
                                                #        - margin-left|right -PERC gives back the space lost
                                                #        - otherwise element will be correctly aligned, but will have a width of max 100%-PERC
                                                #     - will align to padding-box, not content box

                                  ┌──────────────┐
                                  │   OVERFLOW   │
                                  └──────────────┘

OVERFLOW ==>                                    #Types:
                                                #  - longer than width
                                                #  - longer than [max-]height
                                                #Handing:
                                                #  - wrapping:
                                                #     - line boxes, i.e. Display INLINE only
                                                #     - only fixes "longer than width" overflow
                                                #     - "breaks", i.e. insert newlines if overflow
                                                #  - clipping (with[out] scrollbar)

white-space: STR                                #Decides:
                                                #  - wrapped:
                                                #     - break on whitespaces, dashes or between CJK characters
                                                #     - long words will still overflow
                                                #  - collapsed: several whitespaces -> one space
                                                #                         +--------------+-------------+
                                                #                         | Wrapped      | Not wrapped |
                                                # +-----------------------+--------------+-------------+
                                                # |     Any collapsed     | normal (def) | nowrap      |
                                                # +-----------------------+--------------+-------------+
                                                # | Newline not collapsed | pre-line     |             |
                                                # +-----------------------+--------------+-------------+
                                                # | Nothing collapsed     | pre-wrap     | pre         |
                                                # +-----------------------+--------------+-------------+
word-break: STR                                 #Augment white-space wrapping (i.e. requires and overrides it):
                                                #  - normal (def): do nothing
                                                #  - break-all: break on any character
                                                #  - keep-all: do not break between CJK characters
overflow-wrap: STR                             $#Augment white-space wrapping (i.e. requires and overrides it):
                                               $#  - normal (def): do nothing
                                               $#  - break-word: break on any character, but only if normal wrapping not enough (i.e. long words)
                                               $#CSSNext 'overflowWrap' (PLUGIN_OPTS.method 'copy' must be used) (to use the name 'overflow-wrap' instead of old name 'word-wrap')

overflow[-x|y]: STR                             #Clips overflow:
                                                #  - visible (def): never clips
                                                #  - hidden: always clips, no scrollbar
                                                #  - auto: always clips, scrollbar if needed
                                                #  - scroll: always clips, always scrollbar
text-overflow: STR                              #How clipped content is displayed:
                                                #  - clip (def): hidden
                                                #  - ellipsis: same but with "..."

                                  ┌───────────────────────────┐
                                  │   CSSOM VIEW: SCROLLING   │
                                  └───────────────────────────┘

DOCUMENT.scrollingElement                      $#Where top-level scrolling happens
                                               $#HTML (IE) or BODY (other browsers)
                                               $#'mathiasbynens document.scrollingElement' (1.5.1)
WINDOW.pageX|YOffset                            #Top-level scrolling

ELEM.scrollTop|Left                             #Pixels having being scrolled
                                                #scrollLeft can be negative if dir="rtl".
                                                #Block-level only. Readonly.

WINDOW.scroll[To](UINT, UINT2)                  #In pixels, absolute.
WINDOW.scrollBy(UINT, UINT2)                    #In pixels, relative.
WINDOW.scroll[To|By](OBJ)                      $#OBJ:
                                               $#  - left UINT, top UINT2: like above
                                               $#  - behavior: 'auto' (def), 'instant' or 'smooth'
                                               $#'iamdustan smoothscroll' (0.3.3)
HTMLELEM.scrollIntoView([BOOL])                 #Scroll to put ELEM's top (or bottom if BOOL false) on viewport's top
HTMLELEM.scrollIntoView(OBJ)                   $#OBJ: behavior (see above)
                                               $#'iamdustan smoothscroll' (0.3.3)

                                  ┌───────────────┐
                                  │   PARAGRAPH   │
                                  └───────────────┘

text-align: left|right|center|justify           #Horizontal alignment of children with Display INLINE
                                                #Display BLOCK only
vertical-align: VAL                             #Vertical alignment:
                                                #  - baseline (def): baseline to reference baseline
                                                #  - sub|super: baseline to reference subscript|superscript's line
                                                #  - text-top|bottom: top|bottom to top|bottom's reference line
                                                #  - top|bottom: top|bottom to top|bottom's reference box
                                                #  - middle: middle to reference baseline + 1ex
                                                #  - LENP: baseline to reference baseline + LENP
                                                #Either:
                                                #  - Display INLINE:
                                                #     - align each line box
                                                #     - reference is parent
                                                #     - sub|super|LENP changes line-height
                                                #  - display: table-cell:
                                                #     - align whole cell
                                                #     - reference is same row's cell's
                                                #Percentage: current line-height

text-indent: LENP                               #Text indent of first line box (i.e. Display INLINE children)
                                                #Percentage: container's block width
                                                #Should avoid negative value
                                                #Display BLOCK only
word-spacing: LENP|normal                       #Space between words.
                                                #Percentage: current font's width
letter-spacing: LEN|normal                      #Space between letters.

                                  ┌───────────┐
                                  │   FONTS   │
                                  └───────────┘

ICON FONTS ==>                                  #Like FontAwesome.
                                                #But icons should be images, not fonts:
                                                #  - can be hard to style with CSS
                                                #  - affected by CSS font properties instead of image properties
                                                #  - might require downloading full font set

@font-face { PROP: VAL;... }                    #Loads a font, allowing it to be used as font-family.
                                                #PROP:
                                                #  - font-family: STR, new font-family name
                                                #  - src: SRC,...
                                                #     - SRC is local(STR) or URI [format(STR)]:
                                                #     - must be in same domain (same origin policy)
                                                #     - local(STR) look in user's browser. Use URI as fallback.
                                                #     - formats:
                                                #        - woff: all
                                                #        - embedded-opentype: only IE
                                                #        - opentype|truetype: not IE
                                                #        - woff2: not IE
                                                #        - svg (deprecated): only Safari
                                                #       Should use fallbacks because of browser support (can use online generators)
                                                #  - font-style|variant|weight|stretch|feature-settings: for selecting font variants.
                                                #  - unicode-range URANGE,...:
                                                #     - URANGE: U+XX[XX][-XX[XX]]
                                                #        - can contain wildcard ?
                                                #        - designates Unicode codepoints
                                                #     - only downloads the whole font if the current HTML contains any of those codepoints
                                                #     - efficiency optimization when font might be used or not

font-size: VAL                                  #Uppercase height of the font
                                                #VAL:
                                                #  - LENP
                                                #    Percentage: same as em, i.e. 100% === 1em
                                                #  - rem-based keywords: [[x]x-]small|medium|large (about 0.55, 0.6, 0.8, 1, 1.125, 1.5, 2rem)
                                                #  - em-based keywords: larger|smaller (about 0.8, 1.2em)
font-family: STR,...                            #Font:
                                                #  - "STR": specific font (font name, which can differ from filename)
                                                #  - STR: browser font among sans-serif|serif|fantasy|cursive|monospace
                                                #Can use several for fallbacks:
                                                #  - done glyph by glyph, for a specific variant (font-style|etc.)

color: COLOR                                    #Font color
font-style: STR                                 #Can be:
                                                #  - normal (def)
                                                #  - oblique: slopped but not curvy
                                                #  - italic: slopped and curvy, fallbacks to oblique
font-weight: VAL                                #Can be:
                                                #  - normal (def)|bold
                                                #  - 100-900: 100 is thin, 400 is normal, 700 is bold, 900 is extra bold
                                                #  - lighter|bolder: less|more than parent's, among 100|400|700|900
text-decoration: STR                            #Can be none|underline|overline|line-through
font: FONT-STYLE FONT-VARIANT FONT-WEIGHT       #Note:
 FONT-SIZE /LINE-HEIGHT FONT-FAMILY             #  - font-size: must be defined, and be after font-style|variant|weigth but before line-height
                                                #  - font-family: must be defined, and be last
                                                #  - font-variant: only normal|small-caps allowed
                                                #  - font-stretch|kerning|size-adjust: reset
font: SYSTEM-FONT                               #Use the browser UI sans-serif font properties:
                                                #  - [small-]caption, icon, menu, message-box or status-bar
                                                #     - at the moment, all use same font properties
                                                #  - browser font:
                                                #     - can usually be configures in settings
                                                #     - is e.g. on my machine:
                                                #        - Chrome: Arial 16px
                                                #        - Firefox: Ubuntu 15px
                                                #        - IE11: Segoe UI 12px

font-feature-settings: VAL,...                  #Sets OpenType features. VAL can be:
                                                #  - normal (def)
                                                #  - "FEAT"[ NUM|on|off]:
                                                #     - on (def) or off: same as 1|0
                                                #Prefer using font-variant when possible: higher-level, and not specific to OpenType
font-kerning                                   $#Whether to use kerning (font calculates letter spacing depending on letter):
                                               $#  - auto (def): decided by browser depending on font-size
                                               $#  - normal|none: yes|no
                                               $#CSSNext 'fontVariant', see below
font-variant*                                  $#CSSNext 'fontVariant'
                                               $#Works by translating to font-feature-settings, so only works for OpenType
                                               $#Does not work for inherit|initial|unset|auto|normal|none except:
                                               $#  - font-variant: normal|inherit
                                               $#  - font-kerning: normal|none
                                               $#font-variant: normal|small-caps is supported natively
font-variant-position: VAL                     $#Can be:
                                               $#  - 'normal' (def)
                                               $#  - 'sub': subscript
                                               $#  - 'super': superscript
font-variant-ligatures: VAL                    $#How letters combine with each other. Can be:
                                               $#  - normal (def)
                                               $#  - none
                                               $#  - VAL2 ..., where VAL2 can be (in order, all optional):
                                               $#     - [no-]common-ligatures: usual ligatures, like fi, ffi, th
                                               $#     - [no-]discretionary-ligatures: ligatures only specific to the font
                                               $#     - [no-]historical-ligatures: ligatures used in old books
                                               $#     - [no-]contextual-ligatures: ligatures that depend on the surrounding letters
font-variant-caps: VAL                         $#Controls case. Can be:
                                               $#  - normal (def): keep case
                                               $#  - small-caps|unicase|all-small-caps: use small capitals on lowercase|uppercase|all chars
                                               $#  - petite-caps|all-petite-capps: use petite capitals (i.e. smaller than small
                                               $#    capitals on lowercase|all chars)
                                               $#  - titling-caps: use special "titling case" present in some font
font-variant-numeric: VAL                      $#How NUM/FLOAT are displayed. Can be:
                                               $#  - normal (def)
                                               $#  - VAL2 ..., where VAL2 can be (in order, all optional):
                                               $#     - ordinal: superscript for 1st, 2nd, etc.
                                               $#     - slashed-zero: slash on 0
                                               $#     - lining|oldstyle-nums: whether numbers should be aligned on baseline or not
                                               $#     - propertial|tabular-nums: whether numbers should have same size or not
                                               $#     - diagonal|stacked-fractions: whether fractions use a diagonal or horizontal line
font-variant: LIGATURES ALTERNATES CAPS
 NUMERIC EAST-ASIAN                            $#Shorthand

text-transform: STR                             #Can be none|lowercase|uppercase|capitalize
                                                #Firefox|Safari: not taken into account when copying selection

direction: STR                                  #Text direction: rtl or ltr (def)
unicode-bidi: STR                               #How 'direction' is used:
                                                #  - normal (def)
                                                #  - embed: only for children
                                                #  - bidi-override: also revert individual letters

                                  ┌────────────────┐
                                  │   BACKGROUND   │
                                  └────────────────┘


background-color: COLOR                         #
background-image: IMAGE,...                     #Interaction with background-color:
                                                #  - goes over it
                                                #  - should always put a backup background-color in case image can't be downloaded.
                                                #Multiple IMAGE:
                                                #  - First IMAGE goes on top.
                                                #  - Doing successive background-image erase previous, not go over it.
                                                #  - For all other background-* (except color), multiple VAL,... affect those
                                                #    different backgrounds in same order.
                                                #SVG images:
                                                #  - automatically fit to container unless size or ratio is specified in the SVG file

background-attachment: STR,...                  #Background's origin (background-image containing box):
                                                #  - scroll (def): element visual dimensions (i.e. does not scroll when element scrolls)
                                                #  - local: element layout dimensions (i.e. scroll when element scrolls)
                                                #  - fixed: visual viewport (i.e. never scroll)
background-origin: STR,...                      #Background's origin box: content-box, padding-box (def) or border-box

background-position: POSITION,...               #Where first background-image should start, within its origin box (def: top left)
                                                #Percentage:
                                                #  - 100% === origin box's size - image's size
                                                #  - rational: 50% will center image, 100% will mirror it to other corner
background-size: VAL,...                        #background-image's size, within its origin box:
                                                #  - X Y, where X|Y:
                                                #     - auto (def): image's intrisic size
                                                #     - LENP. Percentage: origin's box
                                                #  - XY: same as XY XY
                                                #  - contain:
                                                #     - rescaled to background-image origin's box
                                                #     - while keeping ratio, so it is "contained":
                                                #        - one side of the image == one side of the box,
                                                #        - the other side image < other side box
                                                #  - cover: same but the other side image > other side box ("clipped")

background-clip: STR,...                        #Clip background-color|image (but does not change background's origin box nor position)
                                                #Can be content-box, padding-box or border-box (def)
                                                #If border-box, goes beyond border (which can be transparent).
background-repeat: X[ Y] ,...                   #Repetition of the background-image (X alone means X X)
                                                #  - no-repeat
                                                #  - repeat (def)
                                                #  - repeat-x|y: same as repeat no-repeat (or inverse)
                                                #  - space: like repeat, except if adds minimal gaps so last image is not clipped
                                                #  - round: like repeat, except it minimally stretches so last image is not clipped

background: B-COLOR B-IMAGE B-POSITION
B-REPEAT B-ATTACHMENT B-CLIP ,...               #

                                  ┌──────────────────────┐
                                  │   REPLACED ELEMENT   │
                                  └──────────────────────┘

REPLACED ELEMENT ==>                            #Embedded (e.g. <video>), form-related (e.g. <input>), and elements inserted with 'content'
                                                #Means an external source influence display.
                                                #Display:
                                                #  - def: 'inline'
                                                #  - but does not matter, i.e. always behaves like inline-block elements
                                                #  - no line boxes, so not affected by phrasing content properties like line-height

object-position: POSITION,...                  $#Like background-position but for replaced element content inside its element
                                              $$#Only works for <video|img|picture>
                                               $#'object-fit-images' (2.5.3) + 'postcss-object-fit-images' (1.1.2):
                                               $#  - <img|picture> only
                                               $#  - must call OBJECT-FIT-IMAGES([IMG[_ARR]|SELECTOR][, CONF]) on DOMContentLoaded
                                               $#  - must use CONF.watchMQ true if using scale-down or object-fit changes with media queries
                                               $#    Not that load event will fire again on media queries
object-fit: VAL                                $#Like background-size but for replaced element content inside its element:
                                               $#  - none: similar to background-size: auto
                                               $#  - fill (def for <img>): similar to background-size: 100%
                                               $#  - cover|contain (def for <video>): similar to background-size: cover|contain
                                               $#  - scale-down: none (if it does not overflow element), contain (otherwise)
                                              $$#Only works for <video|img|picture>
                                               $#'object-fit-images' + 'postcss-object-fit-images': see above

                                  ┌─────────────┐
                                  │   BORDERS   │
                                  └─────────────┘

border-left|top|bottom|right-color: COLOR       #Def: currentColor
border-left|top|bottom|right-style: STR         #Parmi :
                                                #  - none|hidden (def): put width to 0. Prefer using border-*-width: 0
                                                #  - solid: one plain line
                                                #  - double: two plain lines
                                                #  - dotted
                                                #  - dashed
                                                #  - outset|inset : simple embossed|carved
                                                #  - ridge|groove : advanced embossed|carved
border-left|top|bottom|right-width: LEN|STR     #Width:
                                                #  - STR can be thin|medium|thick
                                                #  - def: medium (but def border-style is none)
border-bottom|top-left|right-radius:LENP[ LENP2]#Rounded corner: LENP horiz., LENP2 vertical.
                                                #Percentage: border-box dimensions

border-color: COLOR ...                         #Shorthand
border-style: STR ...                           #Shorthand
border-width: VAL ...                           #Shorthand
border-radius: LENP ...[ / LENP2 ...]           #Shorthand. LENP sont les horiz. et LENP2 les vertic.

border-left|top|bottom|right: B-COLOR B-STYLE
B-WIDTH                                         #Shorthand
border: B-COLOR B-STYLE B-WIDTH                 #Shorthand


ALL ==>                                         #Border-image box:
                                                #  - is originally same as border box, but when changed does not change border box
                                                #  - can go over border box:
                                                #     - with border-image-width > border-width: inside, covering padding|content
                                                #     - with border-image-outset > 0: outside, covering margins
border-image-source: IMAGE                      #If defined, border-color becomes transparent.
                                                #Must be the full square, 4 corners + 4 sides (corners will not be repeated, only middle image)
border-image-slice: VAL ... [fill]              #Same values as border-width except is either:
                                                #  - NUM (pixels)
                                                #  - PERC (of the image dimensions)
                                                #Defines how the border-image-source is divided into corners, sides and middle,
                                                #by specifying top|bottom and left|right width:
                                                #  - e.g. with a 30*30px square, sides are 10px-wide and middle 10*10px, so should
                                                #    use 10 10 10 10
                                                #  - is blank beyond border-image-source
                                                #  - def: 100%, i.e. corner images will be full image, and side images will be empty
                                                #  - if 'fill', adds background-image as middle image
                                                #    fill can be placed anywhere
border-image-repeat: STR[ STR2]                 #How side images are repeated.
                                                #For horizontal[ vertical]:
                                                #  - stretch (def): to fit
                                                #  - repeat|space|round: like background-repeat
border-image-width: VAL ...                     #Same values as border-width
                                                #border-image box width (def: border-width)
border-image-outset: VAL ...                    #Same values as border-width
                                                #Grows/offsets border-image box (but does not change width)
border-image: BI-SOURCE BI-SLICE BI-WIDTH
BI-OUTSET BI-REPEAT                             #Shorthand


outline-color: COLOR                            #Outline are just like borders, except :
outline-style: STR                              #  - they are just outside borders
outline-width: VAL                              #  - they don't take space (can even go over margin box).
outline: O-COLOR O-STYLE O-WIDTH                #  - they may be non-rectangular if some phrasing content is bigger than other
                                                #    phrasing content (depends on browser)
                                                #Avoid outline-style: none (bad for accessibility)

                                  ┌─────────────┐
                                  │   FLEXBOX   │
                                  └─────────────┘

FLEXBOX ==>                                     #Items stacking:
                                                #  - parent is flex container, children flex items
                                                #  - items are stacked along the "main axis",
                                                #    then along the "cross axis" ("wrapping")
                                                #     - wrapped when last item margin box would overflow
                                                #     - according to main|cross axis direction
                                                #     - each line of item is a "flex line"
                                                #  - items content-box dimensions (before positioning|resizing) are
                                                #    "main size" and "cross size"
                                                #  - can arbitrarily reorder flex items with "order"
                                                #Items positioning|resizing:
                                                #  - done after items stacking
                                                #     - e.g. only shrinks if cannot wrap
                                                #  - uses different methods and properties for main axis and cross axis
                                                #     - cross axis distinguish between positioning flex lines,
                                                #       and items inside each of them
                                                #  - can either:
                                                #     - reposition:
                                                #        - beginning or end:
                                                #           - (cross axis only) can make sure baselines align
                                                #        - center: with space or not between|around items
                                                #     - resize:
                                                #        - distributes positive|negative space to stretch|shrink
                                                #          above|under each item main size
                                                #        - (main axis only) can distribute space using weights
                                                #Comparison with CSS grid layout:
                                                #  - flexbox is for content conceptually one-dimensional that can get stacked
                                                #    in any way that fits the container (column, row, grid)
                                                #  - grid is for content conceptually two-dimensional:
                                                #     - does not change stacking order (without media queries)
                                                #     - areas spanning several rows and columns
                                                #     - items align on both axis

display: [inline-]flex                          #Specifies current element as flex container, children as flex items.
                                                #Children can be flex containers themselves but do not have to.
                                                #Flex containers are in flex flow (not normal flow, etc.)
                                                #On containers
flex-direction: row|column[-reverse]            #Decides:
                                                #  - whether main axis is horizonal|vertical
                                                #  - main axis direction. Affected by CSS dir if flex-direction row-*
                                                #Def: row
                                                #On containers
                                               ##IE 11<:
                                               ##  - unless align-items: stretch, or items have max-width: 100%
                                               ##  - items content will not wrap properly, and overflow the container
flex-wrap: nowrap, wrap[-reverse]               #Decides:
                                                #  - whether to wrap or not
                                                #  - cross axis direction. Affected by CSS dir if flex-direction column-*
                                                #Def: nowrap
                                                #On containers
flex-flow: [F-DIRECTION] [F-WRAP]               #Shorthand
flex-basis: LENP|auto                           #Item main size, i.e. sets width|height
                                                #auto (def): use content-box's dimensions
                                                #Percentage refers to parent's width|height
                                                #On items
order: INT                                      #Item order among siblings
                                                #INT is index like z-index
                                                #If same index, uses DOM order
                                                #Def: 0
                                                #On items

flex-shrink: NUM                                #Main axis negative space distribution by resizing
                                                #NUM is weight, i.e. 0 means no shrinking
                                                #Def: 1
                                                #On items
flex-grow: NUM                                  #Main axis positive space distribution by resizing
                                                #NUM is weight, i.e. 0 means no growing
                                                #Def: 0
                                                #On items
flex: [F-GROW] [F-SHRINK] [F-BASIS]             #Shorthand
                                                #Can also be:
                                                #  - none: same as 0 0 auto
                                                #  - auto: same as 1 1 auto
                                                #On items
                                               ##IE11<: cannot use shorthand if:
                                               ##  - F-BASIS === 0
                                               ##  - F-BASIS uses calc()
justify-content: JUSTIFY                        #Main axis positive space distribution by positioning
                                                #Incompatible with flex-grow > 0 (has less priority)
                                                #Def: flex-start
                                                #On containers

align-content: JUSTIFY                          #Cross axis positive space distribution by positioning|resizing,
                                                #among flex lines
                                                #Def: stretch
                                                #On containers
align-items: JUSTIFY                            #Cross axis positive space distribution by positioning|resizing,
                                                #among items inside flex lines
                                                #Def: stretch
                                                #On containers
align-self: JUSTIFY|auto                        #Same as align-items but on items not container
                                                #auto (def): element's align-items

JUSTIFY                                         #How to positions items:
                                                #                 +--------------+------------------------------+-----------------------+--------------------------+
                                                #                 | Position     | Extra behavior               | Not for               | Reason                   |
                                                # +---------------+--------------+------------------------------+-----------------------+--------------------------+
                                                # | flex-start    | xxyyzz       |                              |                       |                          |
                                                # | baseline      | xxyyzz       | align content first baseline | justify|align-content | cross axis only          |
                                                # | flex-end      |       xxyyzz |                              |                       |                          |
                                                # | center        |    xxyyzz    |                              |                       |                          |
                                                # | space-between | xx   yy   zz |                              | align-items|self      | needs 2+ items           |
                                                # | space-around  |  xx  yy  zz  |                              | align-items|self      | needs 2+ items           |
                                                # | stretch       | xxxxyyyyzzzz | resize items                 | justify-content       | flex-grow|shrink instead |
                                                # +---------------+--------------+------------------------------+-----------------------+--------------------------+

INTERACTION WITH USUAL PROPERTIES ===>          #
float|clear|vertical-align|column-*             #No effect on flex items
position: absolute|fixed                        #For items: taken out of flexbox stacking and positioning
                                               ##IE11<: taken out of resizing, but should not

margin: auto                                    #Distribute positive space along main|cross axis:
                                                #  - i.e. center element among its siblings
                                                #  - if positive space available, i.e. unless flex-grow > 0 for main axis
                                                #  - alternative (for margins on main axis): using flex-items with
                                                #    flex-grow > 0
min|max-width|height: VAL                       #Constrained is still applied:
                                                #  - before stacking, as it would in normal BLOCK display
                                                #  - during positive|negative spaces distribution, i.e. stop being distributed
                                                #    to this items (and is distributed to others) beyond those limits
                                               ##IE11<: min-height does not work on container
content-size: VAL                               #Affects what "main|cross size" means
                                               ##IE11<: not affected
margin|padding-top|bottom: PERC                ##Firefox|Safari: percentage refers to containing block
                                               ##(if position: static|relative or float) height, not width

<img>                                          ##IE11<: as items do not work: when resized, the image ratio will not be kept
<fieldset>                                     ##IE11<: as items do not work
content: VAL                                   ##IE11<: pseudo-elements cannot be items


                                  ┌─────────────┐
                                  │   COLUMNS   │
                                  └─────────────┘

column-width: LEN|auto                          #Divides layout into several columns according to column width:
                                                #  - fill one column after another
                                                #  - no element can span several columns
                                                #Display BLOCK only
                                                #Allow using column*
                                                #auto (def): do not do anything unless column-count set
                                               ##Ext: -webkit, -moz
column-count: UINT|auto                         #If column-width not set, same but according to number of columns.
                                                #If set, max. number of columns
                                                #Allow using column*
                                                #auto (def): do not do anything unless column-width set
columns: WIDTH COUNT                            #Shorthand

column-gap: LEN|normal                          #Space between each column.
                                                #(déf: normal, i.e. 1em)

column-rule-color: COLOR                        #Like for border-* but for lines between columns:
column-rule-style: STR                          #  - only appearing when columns are needed
column-rule-width: VAL                          #  - does not change columns positions
column-rule: COLOR STR VAL                      #Shorthand

column-fill: VAL                                #When [max-]height specified, whether content should be:
                                                #  - balance (def): distributed equally over columns
                                                #  - auto: filled sequentially from first column

                                  ┌────────────┐
                                  │   TABLES   │
                                  └────────────┘

display: table                                  #Like <table>
display: table-caption                          #Like <caption>
display: table-header|row|footer-group          #Like <thead|tbody|tfoot>
display: table-column[-group]                   #Like <col[group]>
display: table-row|cell                         #Like <tr|td|th>
                                                #Are all default display values for those elements.
                                                #All except:
                                                #  - table:                   no position: relative
                                                #  - table[-caption]:         no margin
                                                #  - table[-caption|cell]:    no padding
                                                #  - table[-caption|column*]: no *width
                                                #  - table[-caption|row*]:    no *height
                                                #Table-cell can use vertical-align (see above)
                                                #Allow using table-related properties below.
                                                #Are all Display BLOCK
display: inline-table                           #Like display: table, but Display INLINE

table-layout: STR                               #How cells width is calculated:
                                                #  - auto (def): according to content
                                                #  - fixed:
                                                #     - if <col[group]>, according to their width
                                                #     - otherwise according to first <tr>'s cells width
                                                #On display: [inline-]table.
border-collapse: STR                            #How cell borders are merged:
                                                #  - collapse: merged.
                                                #    border-radius does not work.
                                                #  - separate (def): not merged. An extra 1px is added between cells
                                                #On display: [inline-]table.
border-spacing: LEN [LEN2]                      #If border-collapse: separate, space between cell borders (def: depends on browser)
                                                #On display: [inline-]table.
empty-cells: STR                                #Whether empty cells have borders and backgrounds: show (def) or hide.
                                                #On display: table-cell
caption-side: STR                               #Whether caption is on top (def) or bottom.
                                                #On display: table-caption

                                  ┌───────────┐
                                  │   LISTS   │
                                  └───────────┘

display: list-item                              #Like <li>:
                                                #  - allow using list-style-*
                                                #  - user agent usually adds margins on top|bottom and padding on left
                                                #Are default display values for <li> (<ol|ul> are display: block)

list-style-type: STR                            #Bullet point image, among:
                                                #  - none
                                                #  - disc (def for <ul>), square: shapes
                                                #  - decimal[-leading-zero] (def for <ol>): numbers
                                                #  - lower|upper-roman|alpha|latin (alpha|latin are same): letters
                                                #  - lower-greek, armenian, georgian
list-style-image: IMAGE                         #Bullet point image
list-style-position: STR                        #Bullet point position:
                                                #  - inside: current box
                                                #  - outside (def): create extra inline box on left of current box
list-style: LS-IMAGE LS-POSITION LS-TYPE        #

                                  ┌─────────────┐
                                  │   EFFECTS   │
                                  └─────────────┘

opacity: NUM                                    #From 0 to 1

text-shadow: VAL,...                            #Same syntax as box-shadow, except no spread nor inset.
box-shadow: VAL,...                             #Shadow inside/outside of the margin box.
                                                #Can be none or [inset] LEN LEN2 [LEN3[ LEN4]][ COLOR] :
                                                #  - inset: inside instead of outside
                                                #  - LEN LEN2: horizontal/vertical shift
                                                #  - LEN3: blur radius (def: 0)
                                                #  - LEN4: spread, i.e. size compared to element, where positive number
                                                #    grows, negative shrinks (def: 0)
                                                #Can use multiple VAL for multiple shadows.

transform: FUNC ...                             #Affects any child, but does not affects any parent.
                                                #Can be:
                                                #  - translateX|Y|Z(LENP)
                                                #     - Percentages: relative to border-box
                                                #  - translate[3d](LENP, LENP2[, LENP3])
                                                #     - 3d: only difference is to allow using LENP3
                                                #  - scaleX|Y|Z(NUM)
                                                #     - scaleZ multiplies translateZ
                                                #  - scale[3d](NUM, NUM2[, NUM3])
                                                #     - 3d: only difference is to allow using NUM3
                                                #  - rotate[X|Y|Z](ANGLE):
                                                #     - rotate(): same as rotateZ()
                                                #  - rotate3d(X, Y, Z, ANGLE):
                                                #     - keep rotation axis fixed, according to ratio X/Y/Z
                                                #  - perspective(LEN): like 'perspective: LEN', except:
                                                #     - applied to (only) current element
                                                #     - must come before the FUNC that will use perspective
                                                #     - perspective-origin is transform-origin
                                                #        - if parent's perspective-origin present, use both
                                                #  - skewX|Y(ANGLE)
                                                #  - matrix[3d](6|12 NUM): matrix like OpenGL
transform-origin: X[ Y[ Z]]                     #Transformation center (def: 50% 50% 0).
                                                #In other words: translate3d(-X, -Y, -Z), applies transform(), then translate3d(X, Y, Z)
                                                #X|Y|Z can be LENP|DIRECTION (Percentage: border-box)

perspective: LEN|none                           #Changes perspective ('distance from eye') for rotateX|Y(), translateZ(),
                                                #for all child elements using 'transform' (but not for itself)
perspective-origin: X[ Y[ Z]]                   #Focus center ('eye position') of 'perspective' (def: 50% 50%)
                                                #X|Y|Z can be LENP|DIRECTION (Percentage: border-box)

backface-visibility: STR                        #Whether back side is visible (def) or hidden

will-change: VAL,...                           $#Browser hint that the element will be animated/transformed/DOM-manipulated
                                               $#VAL can be:
                                               $#  - auto (def)
                                               $#  - scroll-position: vertical position in viewport
                                               $#  - contents: children
                                               $#  - PROP: including "transform"
                                               $#Example of browser optimizations:
                                               $#  - create new GPU stack layer in advance:
                                               $#     - for 3D transform and opacity transitions:
                                               $#        - automatically done otherwise
                                               $#        - this will create in advance
                                               $#     - for other transitions/animations: will
                                               $#        - not automatically done otherwise
                                               $#        - this will force using GPU for them
                                               $#     - before, used to be done with hack:
                                               $#        - using translateZ or backface-visibility PROP to force GPU stack layer
                                               $#  - scroll-position: prerender invisible part of viewport
                                               $#  - contents: do not cache children content
                                               $#Improve performance but take more resources, so can decrease performance if overused.
                                               $#Should only be used:
                                               $#  - for a limited period of time, i.e. added|removed by JavaScript or on CSS :hover
                                               $#     - exception: if this would result in frequent add|remove, i.e. slideshows
                                               $#  - on limited number of elements
                                               $#  - afterwards, if performance is a problem, not as premature optimization
                                               $#  - some time before the actual change happens, to give browser time to optimize
                                               $#Other example of optimization:
                                               $#  - with Chrome 53>= only
                                               $#  - with will-change: transform
                                               $#  - does not re-rasterize vectors after transform has been applied
                                               $#'postcss-will-change' (1.1.0):
                                               $#  - only for will-change adding GPU stack layer

                                  ┌────────────────────────────┐
                                  │   TRANSITIONS ANIMATIONS   │
                                  └────────────────────────────┘

PERFORMANCE ==>                                 #  - CSS > JavaScript, but Web Animations API is fast
                                                #  - use requestAnimationFrame()
                                                #  - animate properties that do not trigger reflow or repaint (see DOM doc)


transition-property: STR|none|all,...           #Property to transition (déf: all):
                                                #  - any change to this property will be done smoothly, according to
                                                #    other transition-*
                                                #  - with several STR,... other transition-* will follow same property order
                                                #    (or repeat if using only one value)
                                                #  - can be transited:
                                                #     - property based on numbers: including RECT, FUNC(NUM,...), COLOR
                                                #     - visibility
                                                #  - cannot be transited:
                                                #     - property based on TIME
                                                #     - background-repeat|size|position, font-stretch, text-shadow, grid-*,
                                                #       border-*color, border-spacing
                                                #     - invisible elements
                                                #     - elements not ready on the document
                                                #Should avoid 'all'
transition-delay: TIME,...                      #How long before starting (def: 0s)
transition-duration: TIME,...                   #How long it lasts (def: 0s).
                                                #Should add transition-delay to it.
transition-timing-function: FUNC,...            #Relation between value change and time spent (e.g. slower at end, etc.).
                                                #Can be :
                                                #  - linear (def)
                                                #  - ease-in|out: slow begin|end
                                                #  - ease-in-out: slow begin, slow end
                                                #  - ease: like ease-out, but slightly less slow begin
                                                #  - steps(NUM[, start|end]):
                                                #     - if start (def: end), first step occurs immediately
                                                #  - step-start|end: like steps(1, start|end)
                                                #  - cubic-bezier(4 NUM):
                                                #     - bezier curve, where start handler has position NUM1, NUM2
                                                #       and end handler NUM3, NUM4
                                                #     - for jQuery UI Sine, Quad, Cubic, Quart, Circ, Expo, Back and Quint
                                                #       (but not Elastic nor Bounce) to cubic-bezier, see http://easings.net/
transition: PROPERTY DURATION FUNC DELAY ,...   #Shorthand

DOCUMENT|ELEM.ontransitionend =                 #When a CSS transition ends.
FUNC(TRANSITIONEVENT)                          ##Ext: webkitTransitionEnd
TransitionEvent                                 #Readonly.
                                               ##Ext: Webkit
TRANSITIONEVENT.propertyName
TRANSITIONEVENT.elapsedTime                     #Does not take transition-delay into account


ALL ==>                                        ##Ext: -webkit
ANIMATIONS ==>                                  #Like transition, but:
                                                #  - sequence of them
                                                #  - can pause|repeat|reverse
                                                #  - launched as soon as the CSS selector containing 'animation-name' applies
@keyframes KEYFRAMES {                          #Define an animation.
  PERC,... { ... }                              #Each line is a single 'keyframe':
  ...                                           #  - go from 0% to 100%:
}                                               #     - can use 'from|to' for 0|100%
                                                #     - 0|100% must be specified
                                                #     - the timing is defined by the others animation-*
                                                #  - each time a keyframe is reached, its rules { ... } are applied
                                                #     - transitions are applied between keyframes
                                                #     - properties mentioned in some keyframes but not others are interpolated
                                                #     - animatable properties are same as transitionnable properties
                                                #  - cannot contain animation-*, except animation-timing-function which can be
                                                #    in KEYFRAMES (valid only for this one) or outside (for any)
animation-name: KEYFRAMES|none,...              #Fires an animation.
                                                #Can be several animation, like transitions.

animation-duration: TIME,...                    #
animation-timing-function: FUNC,...             #
animation-delay: TIME,...                       #Like transitions, but for the whole animation.

animation-iteration-count: UINT|infinite,...    #Number of iterations (def: 1)
animation-direction: STR,...                    #Where to start each new iteration:
                                                #  - normal (def): always 0% to 100%
                                                #  - reverse: always 100% to 0%
                                                #  - alternate: 0% to 100%, then 100% to 0%
                                                #  - alternate-reverse: 100% to 0%, then 0% to 100%
animation-fill-mode: STR,...                    #Style to apply when animation is applied, but not playing yet|anymore:
                                                #  - yet, during delay:
                                                #     - none|forwards (def): no keyframe
                                                #     - backwards|both: first keyframe
                                                #  - anymore, after last keyframe:
                                                #     - none|backwards (def): no keyframe
                                                #     - forwards|both: last keyframe
animation-play-state: STR,...                   #When paused (def: running), stops current animation.
                                                #To manipulate:
                                                #  - having animation-name + animation-play-state: paused on general selector
                                                #    and animation-play-state: running on specific selector, so the
                                                #    animation keeps state
                                                #  - through JavaScript
animation: NAME DURATION FUNC DELAY UINT DIR    #
  FILL STATE ,...                               #Shorthand

DOCUMENT|ELEM.onanimationstart|end =
FUNC(ANIMATIONEVENT)                            #When CSS animation starts/ends.
DOCUMENT|ELEM.onanimationiteration =            #When CSS animation ends an interation (except the last one).
FUNC(ANIMATIONEVENT)                           ##Ext: webkitAnimationStart|End|Iteration
AnimationEvent                                  #Readonly.
                                               ##Ext: Webkit
ANIMATIONEVENT.animationName
ANIMATIONEVENT.elapsedTime                      #Does not take animation-delay into account

                                  ┌────────────────────────┐
                                  │   WEB ANIMATIONS API   │
                                  └────────────────────────┘

WEB ANIMATIONS API ==>                          $#CSS animations in JavaScript (same performance). Extra features:
                                                $#  - options: playbackRate, endDelay, iterationStart, composite, iterationComposite, spacing
                                                $#  - timeline: easier synchronization of several animations
                                                $#'web-animations-next-js' (2.2.1):
                                                $#  - should not use and does not have to use vendor prefixes
ANIMATION VS KEYFRAME ==>                       $#Keyframes are a specific type (and the only one so far) of animation, where properties are interpolated.

ELEM|CSSPSEUDOELEM.animate                      $#Same as:
(KEYFRAMES[, KEFFECTOPTS])->ANIMATION           $#  let effect = new KeyframeEffectReadOnly(ELEM, KEYFRAMES, KEFFECTOPTS);
                                                $#  let animation = new Animation(effect, ELEM.ownerDocument.timeline);
                                                $#  animation.play();
                                                $#Except:
                                                $#  - can specify KEFFECTOPTS.id for the ANIMATION.id
ELEM|CSSPSEUDOELEM.getAnimations()->ANIMTION_ARR$#Includes animations created using CSS
DOCUMENT.getAnimations()->ANIMATION_ARR        $$#

new Animation([AEFFECTREADONLY[, TIMELINE]])    $#Animation instance
                                                $#Def TIMELINE: DOCUMENT.timeline
ANIMATION.effect                                $#AEFFECTREADONLY
ANIMATION.timeline                              $#TIMELINE
ANIMATION.id                                    $#STR (def: '')
ANIMATION.currentTime                           $#See TIMELINE.currentTime
                                                $#null if 'idle|pending'
ANIMATION.startTime                             $#Unix time at animation start:
                                                $#  - when started playing (past)
                                                $#  - or when will be played (future)
                                                $#null if 'idle'
ANIMATION.playbackRate                          $#How fast TIMELINE.currentTime progress.
                                                $#NUM (def: 1) (can be negative, or 0)
ANIMATION.reverse()                             $#Changes direction
ANIMATION.playState                             $#Similar to CSS animation-play-state but more values:
                                                $#  - 'pending': before start, if startTime specified
                                                $#  - 'idle': before start, if startTime not specified
                                                $#  - 'running': between start and end
                                                $#  - 'paused': after ANIMATION.pause()
                                                $#  - 'finished': after end
ANIMATION.play()                                $#[Re]starts from beginning, playState -> 'running'
ANIMATION.pause()                               $#Stops, playState -> 'paused'
ANIMATION.finish()                              $#Goes to end|beginning (depending on direction), playState -> 'finished'
ANIMATION.cancel()                              $#Removes any animation, playState -> 'idle'
ANIMATION.ready                                 $#PROMISE, resolved with ANIMATION when playState leaves 'idle|pending'
ANIMATION.finished                              $#PROMISE, resolved with ANIMATION when playState enters 'finished'
ANIMATION.oncancel|finish = FUNC(PLAYBACKEVENT) $#PLAYBACKEVENT:
                                               $$#  - currentTime NUM|null
                                               $$#  - timelineTime NUM|null

AnimationEffectReadonly                         $#Animation type
AEFFECTREADONLY.timing                          $#TIMING
AEFFECTREADONLY.getComputedTiming()->CTIMING   $$#
new KeyframeEffect[ReadOnly]                    $#Keyframe type
([ELEM[, KEYFRAMES[, KEFFECTOPTS]]])            $#Inherits from AnimationEffect[Readonly]
KEFFECT[READONLY].target                        $#ELEM|null
KEFFECT[READONLY].getKeyframes()->KEYFRAMES     $$#KEYFRAMES:
                                                $#  - uses OBJ_ARR syntax
                                               $$#  - also add computedOffset: like offset but with computed default values when unspecified
KEFFECT[READONLY].setKeyframes(KEYFRAMES|null) $$#Not if readonly

KEYFRAMES                                       $#Keyframes transformations. Can be:
                                                $#  - OBJ_ARR:
                                                $#     - PROP: VAL
                                                $#     - offset NUM (0-1): percentage of where it happens (def: see KEFFECTOPTS.spacing)
                                                $#     - easing, composite: see below
                                                $#  - OBJ: PROP: VAL_ARR
                                               $$#  - new SharedKeyframeList(KEYFRAMES)
                                               $$#     - is like KEYFRAMES, except KEYFRAMES will only be parsed the first ANIMATION that uses it

AnimationEffectTiming                           $#TIMING: animation options
ComputedTiming                                  $#CTIMING: computed animation options
KeyframeEffectOptions                           $#Keyframes options. Inherits from TIMING
TIMING.delay|duration|direction|easing|         $#Like CSS animation-delay|duration|direction|timing-function|iteration-count|fill-mode
iterations|fill                                 $#(including default values). Note:
                                                $#  - iterations can use Infinity
                                                $#  - fill|duration can use 'auto' (same as 'none'|0, and converted to it in CTIMING)
                                                $#  - use NUM instead of time
TIMING.endDelay                                 $#NUM (def: 0). Like delay, but at the end (i.e. delay finishing)
TIMING.iterationStart                           $#NUM (def: 0). Where to start (can use float number). Keep same duration, so ends in a different place.
CTIMING.delay|...|iterationStart               $$#Like TIMING
CTIMING.localTime                              $$#TIMELINE.currentTime now
CTIMING.endTime                                $$#TIMELINE.currentTime when animation will be over
CTIMING.activeDuration                         $$#duration * iterations
CTIMING.currentIteration                       $$#NUM|null (starts at 0): current iteration index
CTIMING.progress                               $$#NUM|null (0-1): current iteration progress
KEFFECTOPTS.composite                          $$#If an animated PROP is animated by another ANIMATION, how do they mix:
                                               $$#  - 'replace' (def): overrides,  e.g. 'translateX(VAL)' + 'translateX(VAL2)' -> 'translateX(VAL)'
                                               $$#  - 'add':           concanates, e.g. 'translateX(VAL)' + 'translateX(VAL2)' -> 'translateX(VAL) translateX(VAL2)'
                                               $$#  - 'accumulate':    add values, e.g. 'translateX(VAL)' + 'translateX(VAL2)' -> 'translateX(VAL+VAL2)'
KEFFECTOPTS.iterationComposite                 $$#How animated PROP mix when an interation last keyframe and next iteration's first keyframe coincide:
                                               $$#  - 'replace' (def): see KEFFECTOPTS.composite
                                               $$#  - 'accumulate': see KEFFECTOPTS.composite
KEFFECTOPTS.spacing                            $$#Def offset for keyframes with none specified:
                                               $$#  - 'distribute' (def): interpolate time-wise
                                               $$#  - 'paced': interpolate value-wise
                                               $$#Ex:
                                               $$#  - [ { offset: 0, PROP: 0 }, { PROP: 0.2 }, { offset: 1, PROP: 1 }
                                               $$#  - missing offset will be: 0.5 (distribute) or 0.2 (paced)

AnimationTimeline                               $#TIMELINE. Contains:
                                                $#  - start time:
                                                $#     - when animations will start (future) or started (past)
                                                $#     - Unix time (in ms).
                                                $#  - current time:
                                                $#     - current animations offset
                                                $#     - offset from start time (in ms)
                                                $#     - null if not started yet, or canceled
                                                $#Can be shared by several animations
TIMELINE.currentTime                            $#NUM|null
new DocumentTimeline(NUM)                      $$#Inherits from TIMELINE.
                                               $$#Start time === navigationStart Unix time + NUM
DOCUMENT.timeline                               $#Is new DocumentTimeline(0)

                                  ┌─────────────────┐
                                  │   PAGED MEDIA   │
                                  └─────────────────┘

PAGED MEDIA ==>                                 #For application that divides in pages, e.g. when printing.

CSS PRINT PROFILE ==>                           #Subset of CSS 2.1 (i.e. only support some properties/selectors/values)
                                                #See standard for full list of supported subset
                                                #Designed for low-cost printers that cannot implement full CSS

page-break-after|before: STR                    #Insert page break:
                                                #  - auto (def): if at end|beginning of page
                                                #  - always
                                                #Display BLOCK only, and Normal flow
page-break-inside: STR                          #Can insert page break inside the element:
                                                #  - auto (def)
                                                #  - avoid
                                                #Display BLOCK only, and Normal flow

@page { ... }                                   #Only applies on paged media.
                                                #Can only change: margin, orphans|widows, page-break*
@page:first { ... }                             #Only first page
@page:left|right { ... }                        #Only left|right

@POSITION                                       #Describe margins:
                                                #  - must be inside @page
                                                #  - only contain generated content, i.e. content: VAL
                                                #  - can be:
                                                #     - @top|bottom-left|right-corner: corners
                                                #     - @top|bottom-left|right and @left|right-top|bottom: next to corners
                                                #     - @top|bottom|left|right-middle: middle of each side

                                  ┌───────────────────────┐
                                  │   GENERATED CONTENT   │
                                  └───────────────────────┘

content: VAL ... (general)                      #Add inline box before|after SELECTOR.
                                                #Selector must be SELECTOR::after|before or @page
                                                #Fill inline box with with content VAL ...:
                                                #  - none|normal (def)
                                                #  - STR
                                                #  - IMAGE
                                                #  - attr(ATTR[, STR]): value of HTML attribute ATTR, or STR if absent (def: "")

content: VAL ... (quotes)                       #With:
                                                #  - open|close-quote:
                                                #     - opening|closing quotes
                                                #     - value depends on quote depth level, i.e. if a parent is preceded by
                                                #       an opening quote
                                                #     - their value can be determined by 'quotes'
                                                #  - no-open|close-quote: don't insert quotes, but increment quote depth level
quotes: VAL                                     #open|close-quote's value (def: auto):
                                                #  - none
                                                #  - [STR STR2] ...: one for each quote depth level

content: VAL ... (counters)                     #With:
                                                #  - counter(COUNTER_VAR[, STR]): replaced by bullet value:
                                                #     - number is COUNTER_VAR value
                                                #        - COUNTER_VAR is initialized|incremented by counter-reset|increment
                                                #        - it is done per siblings, i.e. independently for each DOM depth level,
                                                #          introducing counter depth level
                                                #     - STR is list-style-type (def: 'decimal')
                                                #  - counters(COUNTER_VAR, STR2[, STR]): same but:
                                                #     - preceded by counter value of each parent counter depth level, each followed
                                                #       by STR2 (e.g. ".")
counter-reset|increment: COUNTER_VAR[ NUM] ...  #Set|increments COUNTER_VAR (def NUM: 0|1)
                                                #Other increment is done in each SELECTOR::after|before, and reset is done before
                                                #any (e.g. on <body> or <ul|ol>).

CSS TRIANGLE ==>                                #Can create rectangle with a BLOCK box where:
                                                #  - width|height = 0
                                                #  - same background-width
                                                #  - one background side has color, others are transparent

                                  ┌────────────────┐
                                  │   BROWSER UI   │
                                  └────────────────┘

cursor: VAL,...                                 #Image du cursor.
                                                #Can be multiple so if first fails, second is used, except if first fails
                                                #because of URI NUM NUM2 syntax not supported (IE). In last case, put
                                                #"cursor: VAL" fallback before another "cursor: URI NUM NUM2".
                                                #VAL possible :
                                                #  - STR parmi (see MDN for pictures) :
                                                #    - auto, default (def), none
                                                #    - context-menu, help, pointer, progress, wait
                                                #    - cell, crosshair, [vertical-]text
                                                #    - alias, copy, move, no-drop, not-allowed
                                                #    - all-scroll, col|row-resize, n|e|s|w|ne|nw|se|sw|ew|ns|nesw|nwse-resize
                                                #  - URI: can provide several URI as fallbacks
                                                #Mobile browsers do not support

pointer-events: VAL                             #When mouse events can be triggered.
                                                #Note that child events might still trigger it, then bubble it to the parent.
                                                #Removing pointer events can also help selecting elements stacked below it.
                                                #VAL:
                                                #  - auto (def, i.e. always for non-SVG, visiblePainted for SVG)
                                                #  - none: never
                                                #  (SVG only)
                                                #  - fill: mouse over fill
                                                #  - stroke: mouse over stroke
                                                #  - all: mouse over fill|stroke
                                                #  - painted: same as 'all' + fill|stroke SVG property not 'none'
                                                #  - visible, visiblePainted|Fill|Stoke: same as 'all|painter|fill|stroke' +
                                                #    visibility SVG property is 'visible'

user-select: VAL                                #How selection can be performed:
                                                #  - auto: same as text
                                                #  - text: can select
                                                #  - none:
                                                #     - cannot select
                                                #     - IE still allow to select with select all
                                                #CSS generated content (content: STR, list-style-style) can never be selected.
                                                #Firefox only: no inheritance for children with position: absolute|fixed
                                               ##Ext: -webkit, -moz, -ms

<meta>/
  name="theme-color" content="#HEX"             #Address bar color (Mobile Chrome/Opera)
  name="msapplication-navbutton-color"
    content="#HEX"                              #Address bar color (Windows Phone)
  name="[apple-]mobile-web-app-capable"         #If "yes" (def: "no"), replace address bar by small status bar, and remove button bar
    content="yes|no"                            #With "apple": iOS, without: Android
  name="apple-mobile-web-app-status-bar-style"
    content="black[-translucent|default]"       #If apple-mobile-web-app-capable "yes", color of status bar.

<link>/
  rel="apple-touch-startup-image" href="FIL.png"#Splash screen or image shown while page is loading.
  media="(device-width: NUM) and                #Has to be in the correct size SIZE, using media queries:
  (device-height: NUM2) and                     #  DEVICE                     SIZE        NUM     NUM2    NUM3  ORIENTATION
  (-webkit-device-pixel-ratio: NUM3)            #  iPad retina portrait       1536x2008   768px   1024px  2     portrait
  [ and (orientation: ORIENTATION)]"            #  iPad retina landscape      1496x2048   768px   1024px  2     landscape
                                                #  iPad non-retina portrait   768x1004    768px   1024px  1     portrait
                                                #  iPad non-retina landscape  748x1024    768px   1024px  1     landscape
                                                #  iPhone 6 Plus portrait     1242x2148   414px   736px   3     portrait
                                                #  iPhone 6 Plus landscape    1182x2208   414px   736px   3     landscape
                                                #  iPhone 6                   750x1294    375px   667px   2
                                                #  iPhone 5                   640x1096    320px   568px   2
                                                #  iPhone <5 retina           640x920     320px   480px   2
                                                #  iPhone <5 non-retina       320x460     320px   480px   1

                                  ┌───────────────────┐
                                  │   NOT SUPPORTED   │
                                  └───────────────────┘

POLYFILLS ==>                                   #
UPDATING ==>                                    #
STAGES ==>                                      #
UNSUPPORTED BROWSERS ==>                        #
PARTIAL SUPPORT ==>                             #See HTML doc


FULLY SUPPORTED ==>                             #CSS Color level 3 (R)
                                                #CSS Namespaces Level 3 (R)
                                                #CSS Print Profile (R)
                                                #CSS Style Attributes (R)
                                                #CSS Syntax level 3 (R)
                                                #Selectors API Level 1 (R)
                                                #CSS basic box model (W)
                                                #WHATWG Quirks Mode (W)

FULLY|PARTIALLY UNSUPPORTED ==>                 #Follows, by category.


SYNTAX ==>                                 $IE11#CSS @apply rule (E)
                                                #CSS Cascading and Inheritance level 3 (R):
                                           $IE11#  - all
                                           $IE11#  - initial
                                            IE11#  - unset
                                            IE11#CSS Cascading and Inheritance level 4 (R) (revert (enhanced unset), @import "URI" supports(MEDIAQUERYLIST))
                                           $IE11#CSS Color level 4 (W)
                                           $IE11#CSS Custom Properties level 1 (R)
                                                #CSS Extensions (E):
                                           $IE11#  - custom selector
                                            IE11#  - custom function, selector combinator, @RULE
                                            IE11#  - enhanced custom variables
                                           $IE11#CSS Nesting level 3 (E)
                                            IE11#CSS Scoping Level 1 (W) (encapsulation/modules, including interaction with shadow DOM)
                                                #CSS Values and Units level 3 (R):
                                            IE11#  - LENvmax
                                            IE11#  - LENq (1/4cm)
                                            IE11#  - attr(TYPE ATTR)
                                            IE11#  - toggle(VAL,...) (alternate VAL for same PROP)

SELECTORS ==>                                   #CSS Pseudo-Elements Level 4 (W):
                                            IE11#  - WINDOW: getPseudoElements(), CSSPSEUDOELEMENT[LIST] (pseudo element DOM)
                                            IE11#  - ::grammar|spelling-error (user agent spell checker)
                                            IE11#  - ::inactive-selection (like ::selection but when DOCUMENT not active)
                                            IE11#  - ::placeholder instead of ::input-placeholder
                                                #CSS Selectors level 3 (R)
                                            IE11#  - :target (different behavior)
                                                #CSS Selectors level 4 (W):
                                           $IE11#  - :any-link, :matches(), :not(SELECTOR,...)
                                            IE11#  - [ATTR="VAL" i] (case insensitive)
                                            IE11#  - :dir()
                                            IE11#  - :lang(LANG,...)
                                            IE11#  - :local-link[()] (relative URIs)
                                            IE11#  - :scope (parent <style scoped>)
                                            IE11#  - :past|current|future (time dimensions, e.g. subtitles)
                                            IE11#  - :in|out-of-range, :required|optional, :default, :read-only|write, :placeholder-shown, :user-error (form control state)
                                            IE11#  - nth-[last-]match() (:nth() + :matches())
                                            IE11#  - :[nth-[last-]]column() (<table> column)
                                            IE11#  - SSELECTOR /ATTR/ SSELECTOR2 (#ID referencer)
                                            IE11#  - SSELECTOR !> SSELECTOR2 (inverse of >)
                                            IE11#  - :active|valid|invalid-drop-target
                                            IE11#  - :blank (enhanced :empty)
                                            IE11#Non-element Selectors Level 1 (W) (SELECTOR targeting HTML attributes, when CSS used only as query language)

JAVASCRIPT API ==>                              #CSSOM (W):
                                           $IE11#  - CSS: escape()
                                            IE11#  - CSSSTYLEDEC: _camel_cased|_webkit_cased|_dashed_attribute (convert between camelCase and camel-case)
                                            IE11#  - setPropertyValue|Priority() (shorter forms for setProperty())
                                            IE11#  - CSSMARGINRULE
                                             F52#  - CSSPAGERULE: selectorText
                                                #CSSOM View (W):
                                           $IE11#  - DOCUMENT: scrollingElement
                                            IE11#  - DOCUMENT: caretPositionFromPoint(), elementsFromPoint()
                                           $IE11#  - ELEM: scrollIntoView(OBJ) (polyfill does not handle OBJ.block|inline)
                                           $IE11#  - WINDOW: scroll[To|By](OBJ)
                                            IE11#  - ELEM: scroll[To]|By()
                                            IE11#  - ELEM (instead of HTMLELEM): scrollIntoView()
                                            IE11#  - IMG: x|y
                                             F52#  - MOUSEEVENT: x|y (alias for clientX|Y)
                                            IE11#  - TEXT|ELEM|DOCUMENT: convert*FromNode(), getBoxQuads()
                                            IE11#  - WINDOW: scrollX|Y
                                                #DOM2 Style Specification (R):
                                            IE11#  - CSSFONTFACERULE, CSSPAGERULE, CSSCHARSETRULE, CSSUNKNOWNRULE
                                            IE11#  - CSSSTYLEDECLARATION: getPropertyCSSValue(), CSSVALUE[LIST], CSSPRIMITIVEVALUE, RGBCOLOR, RECT, COUNTER (value as OBJ instead of 'CSS_VAL')
                                            IE11#  - DOCUMENT: getOverrideStyle() (like getComputedStyle() but different behavior with !important)
                                            IE11#  - DOMIMPLEMENTATION: createCSSStyleSheet()
                                                #Selectors API level 2 (R):
                                            IE11#  - DOCUMENT[FRAG]|ELEM: find[All]() (enhanced querySelector[All]())
                                           $IE11#  - ELEM: matches() (like JQ.is())

HOUDINI ==>                                     #CSS Conditional Rules level 3 (R):
                                           $IE11#  - nested at-rules
                                            IE11#  - CSSCONDITIONRULE, CSSGROUPINGRULE
                                            IE11#  - @supports, CSS.supports(), CSSSUPPORTSRULE (check for PROP|@RULE native support)
                                            IE11#CSS Layout API level 1 (W)
                                            IE11#CSS Painting API level 1 (W) (low-level CSS -> CANVAS painting)
                                            IE11#CSS Properties and Values API level 1 (W) (creating custom PROP with custom logic)
                                            IE11#CSS Typed OM level 1 (W) (CSSOM but typed (e.g. angle, keyword, etc. types))
                                            IE11#Worklets level 1 (W) (web workers designed for CSS polyfills)


LAYOUT ==>                                  IE11#CSS Box Alignment level 3 (W) (like flexbox alignment but enhanced and not only for flexbox)
                                        IE11+F52#CSS Display level 3 (W) (enhanced display property)
                                                #CSS Flexible Box Layout level 1 (R)
                                        IE11+F52#  - different behaviors (see doc)
                                            IE11#  - flex[-basis]: content
                                          SM10.2#CSS Grid layout level 1 (R) (like flexbox but two-dimensional)
                                            IE11#CSS Grid layout level 2 (W)
                                                #CSS Multi-Column layout (R):
                                             F52#  - column-span (span an element across several columns)
                                            IE11#CSS Positioned Layout Level 3 (W) (sticky positioning, setting custom containing block)
                                            IE11#CSS Table Module Level 3 (W) (advanced version of table display)
                                            IE11#CSS Template Layout (R) (group note mixing grid layout, CSS exclusions and absolute positioning)

INLINE LAYOUT ==>                           IE11#CSS Inline Layout Level 3 (W) (baseline and vertical rhythm, initial letters)
                                            IE11#CSS Line Grid Level 1 (W) (baseline and vertical rhythm)
                                                #CSS Overflow Level 3 (W)
                                            IE11#  - overflow[-x|y]: clip (enhanced overflow: hidden)
                                            IE11#  - max-lines (clip lines)
                                            IE11#CSS Ruby Layout Level 1 (W) (asian characters)
                                                #CSS Text level 3 (W):
                                             C57#  - hyphens (enhanced line breaking)
                                             F52#  - line-break (enhanced line breaking)
                                           S10.0#  - text-align-last, text-justify (enhanced text-align)
                                            IE11#  - hanging-punctuation (enhanced line breaking)
                                            IE11#  - text-align: [start] [end], match-parent (enhanced text-align)
                                            IE11#  - tab-size, text-indent: handing|each-line (enhanced indentation)
                                            IE11#  - text-transform: full-width (align latin characters with asian ones)
                                           S10.0#  - text-transform (different behaviors when copying selection)
                                           $IE11#  - overflow-wrap instead of word-wrap
                                            IE11#CSS Text Level 4 (W) (whitespace handling, enhanced line breaking)
                                            IE11#CSS Writing Modes level 3 (R) (vertical text direction)
                                            IE11#CSS Writing Modes level 4 (W)

FLOATS ==>                                 S10.0#CSS Exclusions Level 1 (W) (float-like text exclusion areas, but not only for floats)
                                            IE11#CSS Figures (R) (WHATWG competitor to W3C CSS page floats)
                                            IE11#CSS Page Floats (W) (more positioning options for floats)
                                             F52#CSS Regions Level 1 (W) (content going through a sequence of several HTML elements)

PAGED MEDIA ==>                                 #CSS 2.2 (W):
                                            IE11#  - page-break-after|before: avoid, page-break-inside: always
                                            IE11#  - page-break-after|before|inside: left|right (enforce content on left|right page)
                                             F52#  - orphans, widows (enhanced page breaks)
                                            IE11#CSS Books, and related CSS Generated Content for Paged Media (R) (enhanced paged media: footnotes, headers, leaders, references)
                                           S10.0#CSS Fragmentation level 3 (R) (enhanced page breaks)
                                            IE11#CSS Paged Media level 3 (W) (enhanced paged media)

LISTS ==>                                   IE11#CSS Counter Styles level 3 (R) (enhanced bullet points)
                                                #CSS Lists and Counters Level 3 (W)
                                            IE11#  - counter-set
                                            IE11#  - position: marker, marker-side, ::marker (enhanced bullet points)
                                            IE11#CSS Predefined Counter Styles (W) (i18n bullet points)


TYPOGRAPHY ==>                              IE11#CSS Font Loading Level 3 (W) (@font-face JavaScript API)
                                                #CSS Fonts level 3 (R):
                                           S10.0#  - font-stretch
                                            IE11#  - font-kerning (how some letters are spaced to each other)
                                            IE11#  - font-size-adjust (like font-size, but based on lowercase height)
                                            IE11#  - font-synthesis (controls missing bold|italic characters placeholders)
                                           $IE11#  - font-variant[*] except font-variant-east-asian|alternates
                                            IE11#  - @font-feature-values, CSSFONTFEATUREVALUESRULE, font-variant-alternates (font stylistics like swash, fleurons, etc.)
                                            IE11#  - font-variant-east-asian
                                            IE11#CSS Fonts level 4 (W) (OpenType variable and multicolored fonts)
                                                #CSS Text Decoration level 3 (R):
                                            IE11#  - text-decoration[-line|color|style|skip] (enhanced underline|overline|linethrough)
                                             F52#  - text-underline-position (enhanced underline)
                                            IE11#  - text-emphasis[-color|style|position] (add marks above characters, or fill in character shape)
                                            IE11#CSS Text Decoration level 4 (W)

IMAGES AND CONTENT ==>                          #CSS Backgrounds and Borders level 3 (R):
                                          SM10.0#  - background-attachment: local|fixed (see QuirksMode)
                                            IE11#CSS Generated Content Level 3 (W) (enhanced content: VAL)
                                                #CSS Image Values and Replaced Content level 3 (R):
                                            IE11#  - image() (fallback IMAGE, plain color IMAGE, URL#HASH IMAGE)
                                            IE11#  - image-resolution (allow higher resolution e.g. on printers)
                                            IE11#  - image-orientation
                                           $IE11#  - object-fit|position
                                                #CSS Image Values and Replaced Content Level 4 (W):
                                           $IE11#  - conic gradients
                                            IE11#  - use ELEM as IMAGE
                                            IE11#  - pixel art resizing
                                            IE11#CSS Intrinsic & Extrinsic Sizing Level 3 (W) (box width|height depending on content, e.g. image.
                                                #                                              when supported, add min-height|width: auto to flexbox as well)
                                            IE11#CSS Logical Properties and Values Level 1 (W) (RTL languages)

EFFECTS ==>                                 IE11#CSS Compositing and Blending level 1 (R) (enhanced opacity, i.e. blending)
                                            IE11#CSS Masking level 1 (R) (clip image with path or bitmap)
                                            IE11#CSS Shapes level 1 (R) (non-square boxes, e.g. circle or polygon)
                                                #CSS Transforms level 1 (W):
                                            IE11#  - transform-box (enhanced transform-origin)
                                            IE11#  - transform-style (nested transforms)
                                            IE11#DOMMatrix interface (W) (see Geometry Interfaces)
                                            IE11#Filter Effects Level 1 (W) (effects like blur, color, contrast)
                                            IE11#Geometry Interfaces Level 1 (R) (and related CSSOM view functions) (get DOM elements underlying SVG shapes)
                                            IE11#Motion Path Level 1 (W) (make box|content follow SVG line)

ANIMATIONS ==>                                  #CSS Animations (W) + CSS Transitions level 1 (W):
                                            IE11#  - animation|transition on 'content', ANIMATIONEVENT|TRANSITIONEVENT: pseudoElement
                                            IE11#CSS Animations and Transitions on SVG Attributes (R)
                                            IE11#Geometry Interfaces Module Level 1 (R) (low-level API on Web Animations transformations)
                                            IE11#Intersection observer (E) (event when DOM elements overlap each other, or when appear in viewport while scrolling)
                                           $IE11#Web animations level 1 (W)
                                            IE11#CSS timing functions level 1 (W) (adds frames(), similar to steps())

DEVICE ADAPTATION ==>                        F52#CSS Device Adaptation Level 1 (W) (changes viewport size, zoom and orientation)
                                                #CSS Media Queries level 3 (R):
                                           S10.0#  - @media (resolution) instead of (device-pixel-ratio)
                                            IE11#  - dppx, dpcm RESOLUTION
                                                #CSS Media Queries level 4 (R):
                                           $IE11#  - media queries range
                                            IE11#  - CSSCUSTOMMEDIARULE
                                            IE11#  - @media update (whether screen re-renders automatically)
                                            IE11#  - @media overflow-block|inline (whether overflow is scrolled or paged through)
                                            IE11#  - @media color-gamut (range of colors supported)
                                            IE11#  - @media any-pointer, [any-]hover (type of input device, e.g.  stylus|touch|Wii|mouse)
                                           $IE11#  - @media pointer
                                                #CSS Media Queries level 5 (E):
                                           $IE11#  - custom media queries
                                            IE11#  - @media inverted-colors (whether colors have been inverted)
                                            IE11#  - @media prefers-reduced-motion (whether user wants less animation)
                                            IE11#  - @media prefers-reduced-transparency (whether user wants less transparency)
                                            IE11#  - @media light-level (ambiant light)
                                            IE11#  - @media scripting (whether JavaScript disabled)
                                            IE11#CSS Round Display Level 1 (W) (round screens, e.g. smartwatches)
                                            IE11#CSS Speech (R) (audio readers)

BROWSER UI ==>                                  #CSS Basic User Interface level 3 (R):
                                            IE11#  - outline-offset (distance with outline)
                                            IE11#  - resize (like contenteditable but for resizing)
                                            IE11#  - text-overflow (two-value of STR) (for left-side and right-side)
                                            IE11#  - cursor: grab[bing]|zoom-in|out
                                            IE11#  - caret-color
                                            IE11#  - nav-up|right|down|left (arrow keys next target)
                                                #CSS Basic User Interface Level 4 (W):
                                            IE11#  - text-overflow: fade[()] (ellipsis with fade effect)
                                            IE11#  - caret[-animation|shape] (enhanced caret control)
                                            IE11#  - appearance (avoid form control browser native rendering)
                                             C57#  - user-select: contain|all
                                            IE11#  - user-select: none (different behavior)
                                             F52#  - user-select (different behavior)
                                             C57#CSS Scroll Snap Points Level 1 (R)
                                                #CSSOM view (W):
                                            IE11#  - scroll-behavior (smooth scrolling)
                                            IE11#  - MEDIAQUERYLIST: onchange = FUNC(MEDIAQUERYLISTEVENT)

PERFORMANCE ==>                            $IE11#CSS Will Change level 1 (R)
                                            IE11#CSS Containment Module level 1 (R) (hint to browser that element does not change painting|layout of children|parents)

OTHERS ==>                                      #CSS 2.2 (W):
                                            IE11#  - outline-color: invert
                                             C57#  - visibility: collapse (different behavior)
                                            IE11#WHATWG HTML + CSSOM (W) (alternate style sheets / styleSheetSet)



                           
   ARCHITECTURE/FORMATTING  
                           


                                  ┌─────────────┐
                                  │   SUMMARY   │
                                  └─────────────┘

ARCHITECTURE ==>                                #JavaScript -> stylesheets when need JavaScript runtime, standard stylesheets for the rest.

COMPONENT-BASED ARCHITECTURE ==>                #Applies (for most of it) to any architecture:
                                                #  - layers (directory, classname prefix, can only reference (but not override) same|upper):
                                                #     - index.css (only @import, globbing if possible)
                                                #     - base, context, helpers: categorized
                                                #     - components: COMPONENT.css, sorted according to abstraction and size (atom|molecule|organism|page)
                                                #  - break into small UI components/blocks:
                                                #     - abtract, can be placed anywhere
                                                #     - defined by size (vertical) and abstraction (horizontal) levels:
                                                #        - use small|base components when possible, e.g. by abstracting skin
                                                #        - use common styling layers (variables, etc.) when needed
                                                #     - composition over inheritance: limited override with .CLASS .CLASS2
                                                #  - selectors:
                                                #     - JavaScript: .js-my-class, -qa-my-class, .is-my-state
                                                #     - CSS:
                                                #        - .project-my-block[__my-elem][--my-mod[--my-mod-value]][.is-my-block-my-state][:PSEUDO] (BEM)
                                                #           - must properly name
                                                #        - alternative: .my-elem [.my-mod] [.is-my-state] [:PSEUDO] (CSS modules)
                                                #           - simpler but requires tooling
                                                #        - .t-THEME SELECTOR
                                                #        - _SELECTOR: hack

CSS FORMATTING ==>                              #  // Variables are in a different file
                                                #  $header-size: .5em;
                                                #  $font-size: 14px;
                                                #  $sidebar-size: 0;
                                                #
                                                #
                                                #  /**
                                                #   * Block comment
                                                #   */
                                                #
                                                #  .my-block,
                                                #  .my-other-unrelated-block {
                                                #    ...
                                                #  }
                                                #
                                                #    // props order: display/positioning, transformations, visibility, margin->padding, content, text, misc
                                                #    .my-block.is-state, .my-block.is-similar-state {
                                                #      display: block;
                                                #      // props order: top, right, bottom, left
                                                #      top:   $header-size;
                                                #      right: $sidebar-size;
                                                #      // No background properties
                                                #      background-image: url("URI");
                                                #      background-clip: content-box, padding-box;
                                                #      box-shadow: inset 50% 50% #ede,
                                                #                  inset 10% 10% #aaeeff;
                                                #    }
                                                #    // Comment explaining override
                                                #    .my-block.is-state .my-other-block {
                                                #      ...
                                                #    }
                                                #
                                                #  @media MEDIA_QUERY {
                                                #
                                                #    .my-block {
                                                #      ...
                                                #    }
                                                #
                                                #  }

SASS/LESS FORMATTING ==>                        #  - syntax:
                                                #     - (EXPR * VAL), NUM * 1px (not NUM + px)
                                                #     - (VAL,...)
                                                #     - (
                                                #         'VAR': VAL,
                                                #       )
                                                #  - props (in order, two newlines between each group):
                                                #     - variables: constants, media queries, not temp variables
                                                #     - @extend: only semantic inheritance, using simple %placeholder
                                                #     - mixins with no content: only simple grouping together props
                                                #     - others
                                                #     - mixins with content
                                                #     - nested selectors with &: only :PSEUDO and .is-STATE
                                                #     - nested selectors without &
                                                #  - variables: from most generic to most specific
                                                #  - functions: only simple
                                                #  - avoid logic/loop, except to print warning message
                                                #  - module to import should not define rulesets
                                                #  - naming: [-][PROJECT]- (- for functions, PROJECT if needed)

                                  ┌──────────────────────┐
                                  │   CSS ARCHITECTURE   │
                                  └──────────────────────┘

ABBREVIATIONS ==>                               #  - AD:  Atomic Design (different from Atomic CSS)
                                                #  - BEM: BEM
                                                #  - CG:  cssguidelin.es
                                                #  - DC:  DocSSa 2.0
                                                #  - GC:  grvcoelho CSS style guide
                                                #  - GS:  Google HTML/CSS style guide
                                                #  - IC:  Idiomatic CSS
                                                #  - IS:  Idiomatic Sass
                                                #  - JC:  jQuery CSS style guide
                                                #  - KC:  Khan CSS style guide
                                                #  - MW:  Mediawiki CSS coding conventions
                                                #  - MCG: mdo code guide
                                                #  - MCS: MCSS
                                                #  - MN:  Montage naming convention
                                                #  - OC:  OOCSS
                                                #  - PG:  primercss.io guidelines
                                                #  - RS:  RSCSS
                                                #  - SG:  Sass guidelines
                                                #  - SM:  SMACSS
                                                #  - TC:  Trello CSS style guide
                                                #  - WC:  Wordpress CSS coding standards

ALTERNATIVES ==>                                #When there are competing recommandations, we use / instead of -, with the preferred choice on top

MAIN ARCHITECTURE CHOICE ==>                    #Should use stylesheets for most CSS, and JavaScript -> stylesheets when need runtime JavaScript
                                                #Summary:
                                                #  - stylesheets: most standard/simple, but needs to use strong naming scheme
                                                #  - JavaScript -> stylesheets: can use runtime JavaScript
                                                #  - JavaScript -> HTML: can use runtime JavaScript but limitations (@rules, :pseudo, performance, debugging)
                                                #  - HTML only: limited flexibility, custom/complex syntax, duplicated code
                                                #Details:
                                                #  - flexibility:
                                                #     - JavaScript -> stylesheets: run-time JavaScript
                                                #     - JavaScript -> HTML: run-time JavaScript. Hard to work with @rules and :pseudo
                                                #     - stylesheets: compile-time Less/Sass
                                                #     - HTML only: compile-time HTML. Hard to work with @rules and :pseudo
                                                #  - standard:
                                                #     - stylesheets: standard
                                                #     - JavaScript -> HTML/stylesheets: relies on tools, but can follow similar syntax as CSS
                                                #     - HTML only: custom notation
                                                #  - simplicity:
                                                #     - syntax:
                                                #        - stylesheets: simplest syntax
                                                #        - JavaScript -> HTML: simple syntax
                                                #        - JavaScript -> stylesheets: simple syntax
                                                #        - HTML only: complicated syntax
                                                #     - selectors:
                                                #        - JavaScript -> HTML, HTML only: simplest (inline)
                                                #        - JavaScript -> stylesheets: simple naming scheme
                                                #        - stylesheets: strong naming scheme
                                                #  - DRY:
                                                #     - stylesheets, JavaScript -> stylesheets: low
                                                #     - JavaScript -> HTML: low in source code, but duplicated code in production
                                                #     - HTML only: duplicated code

 +=============================+=============================+=============================+=============================+=============================+
 | FEATURE                     | STYLESHEETS                 | HTML ONLY                   | JAVASCRIPT -> HTML          | JAVASCRIPT -> STYLESHEETS   |
 +=============================+=============================+=============================+=============================+=============================+
 | Declaration                 | Component-oriented CSS      | Only inline style or classes| JavaScript translated into  | JavaScript translated into  |
 |                             | stylesheets                 |                             | runtime HTML inline style   | runtime <style>/stylesheets |
 |                             |                             |                             |                             | CSSX allows CSS syntax      |
 |                             |                             |                             |                             | inside JavaScript           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Example                     |                             | Atomic CSS                  | Radium, JSS                 | JSS, CSSX, Radium, aphrodite|
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+------------------------------
 | Source organization         | Inside CSS files            | Inside HTML files           | Inside JS files                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Compile step                | Yes with LESS/SASS          | Yes with atomizer           | No                                                        |
 +-----------------------------+-----------------------------+-----------------------------+------------------------------------------------------------
 | Properties/values           | Compile-time                | Compile-time                | Run-time (JavaScript)                                     |
 |                             | (LESS/SASS expressions)     |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Reuse code                  | LESS/SASS variables,        | Limited                     | JavaScript logic                                          |
 |                             | mixins, functions, @extend, |                             |                                                           |
 |                             | structures                  |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Selectors                   | Component-oriented.         | Inline: simpler.                                          | Can be component-oriented.  |
 |                             | Usually using naming scheme | Problem: cannot edit all instances at once when debugging | JSS: favor .CLASS--BLOCK    |
 |                             | like BEM                    | Can still reuse some ideas of component-oriented.         |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | @rules, :pseudo             | Normal                      | No                          | Must either:                | Normal                      |
 |                             |                             |                             |  - use JS -> stylesheets    |                             |
 |                             |                             |                             |  - use JS logic,            |                             |
 |                             |                             |                             |    e.g. window.matchMedia() |                             |
 |                             |                             |                             |    for @media               |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Re-using LESS/SASS libraries| Ok                          | Cannot reuse                                                                            |
 +-----------------------------+-----------------------------+------------------------------------------------------------------------------------------
 | Automatic vendor prefix     | Through plugins or builtin                                                                                            |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Performance                 | Fastest                     | Slower:                                                   | Fast                        |
 |                             |                             | - duplicate inline styles, so more bytes and more         |                             |
 |                             |                             |   calculation                                             |                             |
 |                             |                             | - React diff of style prop                                |                             |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Stability                   | Standard                    | Relies on external tools                                                                |
 +=============================+=============================+=========================================================================================+

                                  ┌────────────────────────┐
                                  │   COMPONENT-ORIENTED   │
                                  └────────────────────────┘

CLASSNAMES ==>                                  #Naming scheme:
                                                #  - main elements:
                                                #     - PROJECT
                                                #     - MODULE|FILE: unique identifier for a given file
                                                #        - is same as BLOCK/COMPONENT in components
                                                #     - BLOCK|COMPONENT: [sub]component (unique across app)
                                                #        - often at least two words
                                                #        - CamelCase for blocks, camelCase for rest (MN)
                                                #        - can be namespaced:
                                                #           - c-: component, i.e. self-contained module
                                                #              - a-: atom
                                                #              - m-: molecule
                                                #              - l-: layout
                                                #              - o-: organism
                                                #              - t-: template
                                                #              - p-: page
                                                #           - o-: object, i.e. non-self-contained module, to avoid
                                                #           - u-: utility or h-: helper
                                                #           - t-: theme, see below
                                                #           - _:  hack, see below
                                                #     - ELEMENT: [sub]component's part (unique across BLOCK)
                                                #        - when too many subelements, should be extracted as a BLOCK instead
                                                #        - only one level of depth
                                                #     - MODIFIER|VARIANT: styling state
                                                #        - always local to a specific BLOCK|ELEMENT (no global MODIFIER)
                                                #        - HTML need to have both selectors: with and without MODIFIER
                                                #     - STATE: interaction state
                                                #        - always local to a specific BLOCK|ELEMENT (no global STATE)
                                                #        - :PSEUDO can be used instead or in addition to STATE
                                                #        - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
                                                #  - a given DOM element can be several BLOCK|ELEMENT ('mixin')
                                                #  - component syntax:
                                                #     / .ELEMENT [.MODIFIER] [.is|has-STATE] (CSS modules, see below):
                                                #        - compiles to .MODULE-ELEMENT [.MODULE-MODIFIER] [.MODULE-is|has-STATE]
                                                #        - comparison with BEM syntax:
                                                #           - simpler naming scheme
                                                #           - easier to enforce
                                                #           - requires tooling:
                                                #              - CSS sourcemaps (only supported with Webpack at the moment)
                                                #              - mapping compiled names, compile-time or run-time
                                                #     / .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-[BLOCK-]STATE] (BEM MN GC CG IS DC):
                                                #        - can sometimes use _ or - instead of __ or --
                                                #        - no BLOCK__ELEMENT__SUBELEMENT
                                                #        - @MODIFIER instead of --MODIFIER:
                                                #           - responsive suffix, used for media queries breakpoints, browser or theming
                                                #           - alternatives, which might be simplier:
                                                #              - breakpoints: using @media only
                                                #              - browser/theming:
                                                #                 - using DOM-top-level class, e.g. .t-CLASS SELECTOR
                                                #                 - using processor logic, e.g. @if, to create several files
                                                #        - can .BLOCK--MODIFIER .BLOCK__ELEMENT (because .BLOCK--MODIFIER__ELEMENT is not correct syntax)
                                                #        - BLOCK-STATE: not standard syntax, but required to avoid name conflict when using mixins
                                                #     / .BLOCK-ELEMENT[-SUBELEMENT-...][.mod|is-MODIFIER] (TC)
                                                #     / .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER] (RS)
                                                #        - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
                                                #     / .BLOCK .ELEMENT [.SUBELEMENT-...] [.MODIFIER|STATE] (OC)
                                                #  - other syntax:
                                                #     - .PROJECT-SELECTOR: project-wide namespace (MN MW)
                                                #     - .t-CLASS SELECTOR: theming
                                                #     - _SELECTOR: hack. Can also put in separate file shame.css
                                                #  - do not use nesting (including through & or mixins) to make naming scheme shorter

COMPONENTS DEFINITION ==>                       #Focus on using UI component (RS TC SM OC CG IS SG DC):
                                                #  - 1 UI component === 1 BLOCK
                                                #     - single responsibility: should break down big UI components
                                                #     - make components as abstract as possible, including in classnames chosen
                                                #  - components provide isolation but can create code duplication and less styling consistency. Should avoid by:
                                                #     - creating small|base components when possible
                                                #     - using variables/functions/mixins for common styling properties (see layers)
                                                #  - define components types: layout/positioning, typography, other styling (IS)
                                                #  - external styling (i.e. positioning|margins):
                                                #     - should not be defined by a BLOCK, so it can be reused in different contexts
                                                #     - but can be defined by upper level, e.g. BLOCK2 BLOCK
                                                #  - isolate component:
                                                #     - top element can use CSS reset (see postcss-autoreset in PostCSS doc)
                                                #     - when using containing blocks (for positioning, percentages, etc.), should not be outside component
                                                #     - top element should create its own stacking context
                                                #Separate structure and skin (OC CG DC):
                                                #  - structure: UI component, with only invariant structure, behavior and styling
                                                #  - skin:
                                                #     - can be:
                                                #        - variant styling: 1 UI component can have many skins (like using BEM MODIFIER|STATE)
                                                #        - cross-UI-component: 1 skin can be applied to many UI components (like using global BEM MODIFIER|STATE)
                                                #     - should try to put as many things into skin as possible
                                                #        - often colors, typography, visual, whereas structure usually has
                                                #          display, positioning, box model, visibility
                                                #        - e.g. using MODIFIER|STATE anytime something might be variant

COMPONENTS INTERACTION ==>                      #Use composition over inheritance for components (MCS CG)
                                                #Avoid .CLASS .CLASS2 (TC GC CG MCG PG):
                                                #  - only use it when a UI component override another component:
                                                #     - override can be e.g. positioning
                                                #     - but must not overriding the inside of that other component. The other component should define MODIFIER instead.
                                                #  - not when specifying a subelement: use naming scheme instead
                                                #  - as such, rarely need to use Less/Sass nesting

COMPONENTS DIMENSIONS ==>                       #Abstraction (horizontal):
                                                #  - from base components (no modifiers, more structure) to specific components (modifiers, more skin)
                                                #Size (vertical) (AD):
                                                #  - atom (very few HTML tags)
                                                #  - molecule (normal size component)
                                                #  - organism (several molecules, together), i.e. small layout
                                                #  - template|page (whole page, i.e. several organisms), i.e. big layout
                                                #     - template is base component, page specific component
                                                #Should strive towards abstract and small components

CSS MODULES ==>                                 #Transform .CLASS in FILE into .CLASS-FILE_ID:
                                                #  - JavaScript must load CSS:
                                                #     - which exports { CLASS: 'CLASS-FILE_ID' ... }
                                                #     - using:
                                                #        - no loaders:
                                                #           - CSS:
                                                #              - postcss-modules: transforms CLASS to CLASS-FILE_ID and returns { CLASS: 'CLASS-FILE_ID' ... }
                                                #              - postcss-modules-scope + postcss-modules-extract-imports: adds :export|import
                                                #           - HTML:
                                                #              - posthtml-css-modules: transforms CLASS to CLASS-FILE_ID using { CLASS: 'CLASS-FILE_ID' ... }
                                                #        - Webpack:
                                                #           - css-loader
                                                #           - react-css-modules: better than css-loader but requires React
                                                #        - Browserify: css-modulesify
                                                #        - RequireJS: css-modules-require-hook
                                                #     - when processed, actually adds two pseudo-classes (ICSS):
                                                #        - :export { CLASS: 'CLASS-FILE_ID' ... }
                                                #        - :import(FILE2) { CLASS: 'CLASS-FILE2_ID' }
                                                #  - can switch back and forth to normal mode with :global|local[(SELECTOR)] inside selectors
                                                #Also allow inheritance:
                                                #  - composes: CLASS ... [from FILE]: like @extend
                                                #postcss-modules-values also allows:
                                                #  - @value FILE_ALIAS: "FILE";
                                                #  - @value VAR[as VAR2],... from "FILE";

                                  ┌─────────────────┐
                                  │   CSS IN HTML   │
                                  └─────────────────┘

CSS IN HTML ==>                                 #Use only inline styles.
                                                #As such, do not use CSS classes as abstraction layer between HTML and CSS

ATOMIC CSS ==>                                  #Similar idea but more concise by using CSS classes shorthands for CSS props/vals:
                                                #  - [ANCESTORCLASS[:PSEUDO]_]FUNC[(VAL|VAR,...)][!][:[:]PSEUDO][--MEDIA_QUERY]
                                                #     - ! is !important
                                                #     - FUNC: CSS props being styled, based on Emmet abbreviation, with some extensions
                                                #  - a tool (atomizer) exists to create CSS stylesheets based on atomic class name that are used

                                  ┌───────────────────────┐
                                  │   CSS IN JAVASCRIPT   │
                                  └───────────────────────┘

SUMMARY ==>                                     #Translated into stylesheets, <style> or 'CSS': see JSS, CSSX, aphrodite
                                                #Translated into HTML inline style: see React-CSS

                                  ┌───────────────┐
                                  │   SELECTORS   │
                                  └───────────────┘

SELECTORS ==>                                   #  - only use .CLASS selectors (BEM RS JC):
                                                #     - with possibly :PSEUDO
                                                #     - but not tag selectors, attribute selectors, combinations nor *
                                                #  - use namespaced js-CLASS for JavaScript selection (BEM RS PG MCG). Can also use qa-CLASS for browser testing.
                                                #  - no !important (BEM RS JC MW)

CLASS NAMING ==>                                #  - use abstract, meaningful, structural (not presentational) classnames/variables (MCG WC GS JC)
                                                #  - case:
                                                #     / dasherized (JC MW KC)
                                                #     / dasherized or camelcased (BEM GS RS)
                                                #  - can use abbreviation list to keep CSS classnames short (MCS)

                                  ┌─────────────────────────┐
                                  │   LAYERS/ORGANIZATION   │
                                  └─────────────────────────┘

FILE ORGANIZATION ==>                           #Root dirs:
                                                #  / per layer (see below)
                                                #  / Idiomatic Sass (IS):
                                                #     - assets/: static assets
                                                #     - local/: private
                                                #     - lib/: public
                                                #     - components/: dependencies
                                                #Main file:
                                                #  - name: index.css (IS SG)
                                                #  - order: each layer from most generic to most specific (TC)
                                                #  - with only @import grouped by category (SG)
                                                #  - use globbing where possible (SG)
                                                #  - can use index files for subdirectories too (DC)
                                                #File division:
                                                #  / BLOCK.css, 1 component === 1 file (RS MCG IS)
                                                #  / FULL_SELECTOR.EXT (BEM):
                                                #     - 1 component [subelement] + MODIFIER|STATE === 1 file
                                                #     - directory: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]
                                                #     - group with other assets: .js|png|etc.
                                                #File order:
                                                #  - .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries (TC)

LAYERS ==>                                      #What layers are, in order:
                                                #  (external)
                                                #  - vendors: external libraries (SG DC)
                                                #  (base)
                                                #  - base: CSS reset (MCS SM SG DC)
                                                #  - context: media queries breakpoints, browser or theming (MCS SM SG DC)
                                                #  (helpers)
                                                #  / cosmetic styling: common generic styling (e.g. clearfix, padding, etc.) (MCS DC)
                                                #  / abstracts: variables/functions/mixins, fonts (SG DC)
                                                #  (components layers)
                                                #  / sort according to:
                                                #     / first, size:
                                                #        / page
                                                #        / organism
                                                #        / molecule
                                                #        / atom
                                                #     / second, abstraction level:
                                                #        / "base_*" folder for base|abstract components (MCS DC AD)
                                                #        / "project_*" folder for less abstract components, specific to a given page|region|use-case (MCS SG DC)
                                                #  / other possible directories, outside:
                                                #     / layout: layout-related UI components BLOCK (SM SG)
                                                #     / module: other UI components BLOCK (SM SG)
                                                #     / state: UI components MODIFIER/STATE (SM)
                                                #What layers do:
                                                #  - has its own file or directory (MCS SM SG PG IS)
                                                #  - has its own classname prefix (SM)
                                                #  - can be defined as (MCS SM SG):
                                                #     - CSS classes: components, cosmetic styling, context (e.g. on body)
                                                #     - variable or simple mixins/functions/inheritance: cosmetic styling, context
                                                #  - restricted usage:
                                                #     - cannot reference lower layer CSS classes/variables (MCS)
                                                #     - can reference (e.g. inheritance/mixins/variables) but not override (e.g. new rules for selectors) upper|same layer ("immutable css")

                                  ┌────────────────────┐
                                  │   CSS FORMATTING   │
                                  └────────────────────┘

NEWLINES ==>                                    #  - newlines between rulesets/@rules:
                                                #     / one between related, two between unrelated but same section, five between sections (CG WC)
                                                #     / two (GC PG GS IC IS JC MW KC)
                                                #  - newline before comment (JC)
                                                #  - newline around { }:
                                                #     / always (CG GS SG JC MW)
                                                #     / except if only one prop/val (MCG IC)
                                                #  - newline after , in selectors:
                                                #     / except related selector (CG SG)
                                                #     / always (GC MCG WC GS IC IS JC MW KC)
                                                #  - newline after ; (GC CG MCG WC PG IC IS SG JC MW KC)
                                                #     - two newlines around props groups

INDENT/WIDTH ==>                                #  - indent size:
                                                #     / 2 spaces (MCG PG GS IS SG)
                                                #     / 4 spaces (CG IC KC)
                                                #     / tab (WC JC MW)
                                                #  - indent according to depth level (e.g. .BLOCK__ELEMENT more than .BLOCK) (BEM RS CG)
                                                #  - indent to vertically align related values (e.g. top:   0; bottom: 0;) (CG MCG)
                                                #  - 80 chars columns (CG WC IC SG KC)
                                                #  - use .editorconfig (MCG IC)

SPACE ==>                                       #  - no trailing whitespace (JC)
                                                #  - space after , > + ~ in selectors
                                                #  - space before { (CG MCG PG IC IS JC KC)
                                                #  - space around ( ) (MW)
                                                #  - space around < <= > >= in @media
                                                #  - space after : but not before (GC CG MCG WC PG GS IC SG JC MW KC)
                                                #  - space after , in values:
                                                #     / except in longer values (like box-shadow):
                                                #        / put every part on a new line except first one (WC)
                                                #        / put every part on a new line (IC)
                                                #     / always (IS SG MW)
                                                #     / except inside FUNC() (MCG JC KC)

COMMENTS ==>                                    #  - style:
                                                #     - always // COMMENT (PG)
                                                #     - always /* COMMENT */ (JC KC)
                                                #  - separate sections in a file with comments, using consistent amount of newlines (CG GS MCG)
                                                #  - when selector from another file is being overriden (CG)
                                                #  - on linting disable

PROPS ==>                                       #  - order:
                                                #     / logical:
                                                #        / display/positioning, transformations, visibility, margin->padding, content, text, misc ('Concentric CSS')
                                                #        / positioning, display, box model, text, background, border, transformations, others ('recess')
                                                #        / positioning, display, box model, list, text, transformations, others ('Zen')
                                                #        / width|height, display, positioning, list, transformations, box model, text ('Yandex')
                                                #        / display, positioning, box model, colors/typography, misc (WC)
                                                #        / positioning, box model, typography, visual, misc (MCG)
                                                #        / box model, border, background, text, others ('smacss')
                                                #        / positioning, display & box model, misc (IC)
                                                #     / alphabetical (GS KC)
                                                #     - when not using shorthand properties, follow values order, e.g. top, right, bottom, left (WC)
                                                #     - empty lines between props groups
                                                #  - shorthand properties:
                                                #     / never (MCG PG)
                                                #     / always (WC GS JC)
                                                #     - their value should be as short as possible, i.e. margin: 1px not margin: 1px 1px

VALUES ==>                                      #  - floats:
                                                #     / .5 (MCG GS JC)
                                                #     / 0.5 (WC SG)
                                                #     - 1 not 1.0
                                                #     - max precision: 2
                                                #     - no trailing zeros
                                                #  - unitless 0, for LEN (MCG WC PG GS IC IS SG JC KC)
                                                #  - colors:
                                                #     / hex colors, lowercase, with 3 letters instead of 6 if possible, unless rgba() (MCG WC PG GS IC IS JC MW KC)
                                                #     / hsl() (SG)
                                                #  - em/percentage vs px:
                                                #     / em/percentage, except px for font-size (PG)
                                                #     / em/percentage (WC JC)
                                                #  - keywords:
                                                #     - do not use in font-weight (except lighter|darker)

QUOTES ==>                                      #  / "" (MCG WC IC IS JC)
                                                #  / '' (SG)
                                                #  / '', except for URI: do not use anything (GS MW)

@MEDIA ==>                                      #  - place:
                                                #     / put @media-queries close to related code without the @media-queries (MCG TC)
                                                #     / grouped together in beginning of each file (WC)

                                  ┌──────────────────────────┐
                                  │   SASS/LESS FORMATTING   │
                                  └──────────────────────────┘

EXPRESSIONS ==>                                 #  - (EXPR * VAL) or #{EXPR * VAL} (MCG SG)
                                                #  - manipulate units with arithmetic, not string manipulation,
                                                #    e.g. NUM * 1px or NUM / 1px, but not NUM + px (SG)

ARR|OBJ ==>                                     #  - ARR: (VAL,...) on one line if short, with newlines after ( or , otherwise (SG)
                                                #  - OBJ: ('VAR': VAL ,...) with trailing comma, space after :, newline after ( or , (SG)

PROPS ==>                                       #  - order:
                                                #     / variables, inheritance, mixins with no content, others, mixins with content, nested selectors with &, nested selectors without & (IS)
                                                #     / variables, mixins with no content, others, nested selectors, mixins with content (SG)
                                                #     / inheritance, mixins, others (IC)
                                                #  - two newlines between each group (SG)

NESTING ==>                                     #  - use &:
                                                #     - only :PSEUDO or .is-STATE (SG)
                                                #  - two newlines separation (MW)

MIXINS/FUNC/VARIABLES/PLACEHOLDERS NAMING ==>   #  - dasherized (SG DC)
                                                #  - constants: all-caps (SG)
                                                #  - namespaced:
                                                #     / [-][PROJECT]- (IS):
                                                #        - first dash: if functions (as opposed to mixin)
                                                #        - PROJECT: unless private
                                                #        - PROJECt is CamelCase if output selectors, camelCase if output props
                                                #     / PROJECT- (SG IC)
                                                #     / m|u- (TC)
                                                #     / mixin- (MW)

VARIABLES ==>                                   #  - use:
                                                #     - instead of constants (SG WC TC KC)
                                                #     - for media queries, according to size ('medium', etc.) not devices ('tablet', etc.) (SG WC TC)
                                                #     - not as temporary variables (SG)
                                                #  - can group them as OBJ (SG)
                                                #  - sort from most generic to most specific (DC)
                                                #  - private variables:
                                                #     - only used inside their file
                                                #     - name convention: _VAR

INHERITANCE ==>                                 #  - use @EXTEND|:EXTEND:
                                                #     / only where there is semantic inheritance (SG)
                                                #     / prefer over mixin (IS)
                                                #  - use %placeholder, and no complex one (SG)

MIXINS ==>                                      #  - use:
                                                #     - only to group together often used props (SG TC)
                                                #     - keep them simple (SG TC)
                                                #     - mixin arguments can be an alternative to variables (DC)
                                                #  - MIXIN, not MIXIN() (SG)
                                                #  - use variadic/splat, or named arguments (SG)

FUNCTIONS ==>                                   #  - use:
                                                #     - only simple helpers (SG TC)

LOGIC/LOOP ==>                                  #  - use:
                                                #     - conditions to check mixin arguments, together with @debug|warn|error() (SG)
                                                #     - avoid otherwise (SG)
                                                #  - space before @else

IMPORT ==>                                      #  - modules to import should not define rulesets (IS)

                                  ┌─────────────────┐
                                  │   PERFORMANCE   │
                                  └─────────────────┘

USE HIGH SPECIFICITY ==>                        #  - except !important
                                                #  - rightmost SSELECTOR matters most
                                                #  - only #ID or .CLASS
                                                #  - inline is fast

USE FEWER SELECTORS ==>                         #  - don't overqualify SELECTORS
                                                #  - don't use combinators, especially space

USE LESS RULES ==>                              #  - rely on property inheritance, set a top-level
                                                #  - CSS component-based approach, loaded on demand

AVOID SLOW PROPERTIES ==>                       #  - gradients
                                                #  - radius
                                                #  - shadow, opacity
                                                #  - animations, transitions
                                                #  - transform

USE HINT PROPERTIES ==>                         #  - will-change



           
   TESTING  
           


APPROACHES ==>                                  #  - image comparison:
                                                #     - should not compare dynamic elements. Possible solutions:
                                                #        - mocking content
                                                #        - making element invisible
                                                #     - should compare components, not full pages
                                                #  - DOM+CSSOM comparison:
                                                #     - full DOM+CSSOM (e.g. for refactoring check)
                                                #     - general DOM selector + specific style (e.g. design guide check, like "match color scheme")
                                                #     - specific DOM selector + specific style (e.g. component style unit test)
