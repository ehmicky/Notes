
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   DOCKER_CLOUD   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.0.7

SUMMARY ==>                       #Continuous deployment for Docker, based on (slimmer version of) Docker compose
                                  #Also has CI (automatic build and test)
                                  #Features:
                                  #  - deployment:
                                  #     - support many cloud providers
                                  #     - automatic deploy on IMAGE change or service definition change
                                  #     - sequential or parallel deployment
                                  #     - placement on node: fewest containers, fewest containers of that service, or 1 per node
                                  #  - scaling:
                                  #     - can scale number of containers per service
                                  #  - operations:
                                  #     - can upgrade dockerd
                                  #     - easy way to inspect logs or SSH into containers
                                  #  - networking:
                                  #     - automatically assign domain names linking to hosts
                                  #  - automation:
                                  #     - CI:
                                  #        - automatically build images (like Docker Hub)
                                  #        - automatic test (so image is not built if fails)
                                  #        - custom hooks
                                  #     - webhooks
                                  #     - email/Slack notifications
                                  #  - others:
                                  #     - tags (metadata) on node clusters, nodes, services

PRICING ==>                       #Like Docker Hub, i.e. must pay for private repos and more parallel builds

WEB APP ==>                       #There is a web app which allow to do same as CLI

                                  ┌────────────────────┐
                                  │   COMMON OPTIONS   │
                                  └────────────────────┘

docker-cloud nodecluster create|rm
docker-cloud node upgrade|rm ...
docker-cloud stack
 create|update|terminate
docker-cloud
 stack|service|container
 start|stop|redeploy
docker-cloud service|container
 create|set|terminate
--sync                            #Make command synchronous


docker-cloud repository|
 nodecluster|node|stack|action|
 trigger
 ls
docker-cloud nodecluster
 provider|region|az
docker-cloud service|container ps #
-q
--quiet                           #

                                  ┌────────────────┐
                                  │   REPOSITORY   │
                                  └────────────────┘

REPOSITORY ==>                    #Docker registry repository
                                  #Must be logged in, or pass ENVVAR DOCKERCLOUD_USER|PASS
                                  #The CLI only deals with custom registry repositories


docker-cloud repository register  #Add custom repository
-u USER
--username USER
-p PASSWORD
--password PASSWORD               #Custom repo credential

docker-cloud repository update RPO#Same options as docker-cloud repository register

docker-cloud repository rm REPO   #

docker-cloud repository ls        #

docker-cloud repository inspect
 REPO                             #

                                  ┌─────────────────┐
                                  │   NODECLUSTER   │
                                  └─────────────────┘


NODECLUSTER ==>                   #Group of nodes, i.e. cloud provider, in a specific region, for a specific instance type


docker-cloud nodecluster create
 NODECLUSTER_NAME PROVIDER REGION
 INSTANCE_TYPE                    #
--disk NUM                        #Main partition size, in GB (def: 60)
--aws-vpc-id VPC_ID
--aws-vpc-subnet SUBNET
--aws-vpc-security-group
--aws-iam-instance-profile-name
 IAM_INSTANCE_PROFILE_NAME        #AWS options

docker-cloud nodecluster rm
 NODECLUSTER...                   #

docker-cloud nodecluster ls       #Show: NODECLUSTER_NAME|ID, REGION, NODETYPE, ctime, status, current|target number of nodes

docker-cloud nodecluster inspect
 NODECLUSTER...                   #


docker-cloud nodecluster provider #List all possible provider

docker-cloud nodecluster nodetype #List all provider's available NODETYPE
-p PROVIDER
--provider PROVIDER               #
-r REGION
--region REGION                   #

docker-cloud nodecluster region   #List all provider's available regions
-p PROVIDER
--provider PROVIDER               #

docker-cloud nodecluster az       #List added provider's available Availablity zones

                                  ┌──────────┐
                                  │   NODE   │
                                  └──────────┘


NODE ==>                          #Host (e.g. cloud provider's instance)
                                  #Not Swarm mode NODE (although conceptually similar)


docker-cloud node byo             #Add node

docker-cloud node rm NODE_ID...   #

docker-cloud node ls              #Show: NODE_ID, URL, mtime, status, NODECLUSTER

docker-cloud node inspect
 NODE_ID...                       #

                                  ┌────────────────┐
                                  │   DEPLOYMENT   │
                                  └────────────────┘


DEPLOYMENT ==>                    #When a stack definition is updated, redeploy to nodeclusters

SCONF.autoredeploy                #BOOL (def: false): continuous deployment, i.e. redeploy when image changes in registry

SCONF.sequential_deployment       #BOOL (def: false): similar to Swarm "update parallelism"

SCONF.deployment_strategy         #Where to place new tasks (similar to Swarm "task mode"):
                                  #  - empties_node (def): NODE with fewest CONTAINERs
                                  #  - high_availability: NODE with fewest CONTAINERs of that SERVICE
                                  #  - every_node: 1 per NODE. Cannot scale (since 1 is max and min)

                                  ┌───────────┐
                                  │   SCALE   │
                                  └───────────┘

SCONF.target_num_containers       #Number of CONTAINERs per SERVICE

docker-cloud nodecluster
 create|update ...
docker-cloud service create|update
-t NUM
--target-num-nodes NUM            #

docker-cloud service scale
 SERVICE... NUM                   #

                                  ┌─────────────┐
                                  │   UPGRADE   │
                                  └─────────────┘

docker-cloud node upgrade
 NODE_ID...                       #Upgrade dockerd

                                  ┌───────────┐
                                  │   STACK   │
                                  └───────────┘

STACK ==>                         #Set of SERVICE, bound to a specific STACK_FILE
STACK_FILE                        #Similar to Docker compose file, holding SCONF
SCONF                             #Trimmed down version of CPSCONF, with CPSCONF.image required
                                  #CPSCONF features not available in SCONF:
                                  #  - container_name, depends_on, tmpfs, entrypoint, env_file, extends, external_links, logging,
                                  #    log_driver, log_opt, networks, stop_signal, ulimits, volume_driver, cpu_quota, ipc, shm_size
                                  #  - CPSCONF.build -> only SCONF.image (required)
                                  #CPSCONF features renamed:
                                  #  - docker-compose run --rm -> SCONF.autodestroy "always", "no" or "on-success"
                                  #     - "on-success": destroys if container exit code if 0
                                  #  - CPSCONF.network_mode -> SCONF.net
                                  #  - CPSCONF.scale -> SCONF.target_num_containers NUM
                                  #SCONF features ont available in CPSCONF:
                                  #  - nickname STR: only used in web app
                                  #  - others documented below


docker-cloud stack create         #
-n STACK_NAME
--name STACK_NAME                 #
-f STACK_FILE
--file STACK_FILE                 #

docker-cloud stack update STACK_ID#Same options as docker-cloud stack create, except --name

docker-cloud stack terminate
 STACK_ID...                      #Removes

docker-cloud stack ls             #Show: STACK_NAME, STACK_ID, status, mtime, deletion time

docker-cloud stack inspect
 STACK_ID...                      #


docker-cloud stack export STACK_ID#Outputs STACK_FILE
-f STACK_FILE
--file STACK_FILE                 #

                                  ┌─────────────┐
                                  │   SERVICE   │
                                  └─────────────┘

SERVICE ==>                       #Conceptually similar to Docker compose services


docker-cloud service create
 IMAGE_NAME                       #
-n SERVICE_NAME
--name SERVICE_NAME               #
--cpushares
--memory
--privileged
-r
--run-command
--entrypoint
-p
--publish
--expose
-e
--env
--env-file
--link-service
--autodestroy
--autoredeploy
--autorestart
--role
--sequential
-v
--volume
--volumes-from
--deployment-strategy
--net NET
--pid PID                         #Same options as STACK_FILE

docker-cloud service set SERVICE  #Updates. Same options as create, except: --image IMAGE_NAME, and no --name

docker-cloud service env
 add|ls|rm|set|update             #Updates ENVVAR

docker-cloud service terminate
 SERVICE...                       #Removes

docker-cloud service ps           #Lists. Shows: SERVICE_NAME|ID, status, number of containers, IMAGE, mtime, DNS, STACK
--stack STACK                     #
--status STATUS                   #

docker-cloud service inspect
 SERVICE...                       #

                                  ┌───────────────┐
                                  │   CONTAINER   │
                                  └───────────────┘

CONTAINER ==>                     #Conceptually similar to Docker container


docker-cloud container terminate
 CONTAINER...                     #Removes

docker-cloud container ps         #Lists. Show: CONTAINER_NAME|ID, status, IMAGE, COMMAND, exit code, mtime, URL, NODE, STACK
--service SERVICE                 #
--status STATUS                   #
--no-trunc                        #

docker-cloud container inspect
 CONTAINER...                     #

                                  ┌─────────────────────┐
                                  │   CONTAINER STATE   │
                                  └─────────────────────┘

docker-cloud
 stack|service|container
 start|stop
 STACK|SERVICE|CONTAINER...       #Start|stop [all] SERVICE

docker-cloud
 stack|service|container
 redeploy
 STACK|SERVICE|CONTAINER...       #Restart [all] SERVICE
--not-reuse-volumes               #Do not reuse data volumes

docker-cloud [stack] up ...       #Same as docker-cloud stack create + start
docker-cloud [service] run ...    #Same as docker-cloud service create + start

                                  ┌──────────────────────────┐
                                  │   CONTAINER INSPECTION   │
                                  └──────────────────────────┘

docker-cloud [container] exec
 CONTAINER ...                    #Similar to docker exec ...


docker-cloud
 service|container|action
 logs SERVICE|CONTAINER|ACTION... #Similar to docker logs but potentially for several containers
-f
--follow
-t NUM
--tail NUM                        #Like docker logs

                                  ┌───────────────────────┐
                                  │   SERVER INSPECTION   │
                                  └───────────────────────┘

ACTIONS ==>                       #Like docker events, but for Docker-cloud central REST API
                                  #Can be cancelled|retried


docker-cloud action ls            #Shows: ACTION_ID, type, start|end, target, IP, IP location
-l NUM
--last NUM                        #

docker-cloud action inspect ACTION#

docker-cloud action cancel|retry
 ACTION                           #


docker-cloud events               #Similar to docker events, but for docker-cloud actions


SCONF.roles global                #Add ENVVAR DOCKERCLOUD_AUTH to the container, which is HTTP Authenticate credentials to Docker cloud REST API

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

TAGS ==>                          #Like docker tags, but for NODECLUSTER, SERVICE or NODE

docker-cloud nodecluster
 create|update ...
docker-cloud service create
--tag TAG

docker-cloud tag add|rm|ls|set ...#

                                  ┌──────────────┐
                                  │   TRIGGERS   │
                                  └──────────────┘

TRIGGERS ==>                      #URL that performs an operation when POST request to it

docker-cloud trigger create SERVIC#
-n TRIGGER_NAME
--name TRIGGER_NAME               #
-o OPERATION
--operation OPERATION             #Among: redeploy (def), scale_up

docker-cloud trigger rm URL SERVIC#

docker-cloud trigger ls           #


EMAIL/SLACK NOTIFICATION ==>      #Only through the web app

                                  ┌────────────────────────────┐
                                  │   CONTINUOUS INTEGRATION   │
                                  └────────────────────────────┘

AUTOMATIC IMAGE BUILD ==>         #When Dockerfile is changed on GitHub (like Docker Hub)
                                  #Can push different images according to conditions (e.g. tag, branch), or use different Dockerfiles or build contexts
                                  #Can disable build caching

AUTOMATIC TEST ==>                #CI test, run on pull requests
                                  #Use a different Docker compose file: /*.test.yml
                                  #Then:
                                  #  - build service named "rut"
                                  #  - run CPSCONF.command (which should be a test runner)
                                  #  - use exit code 0|1
                                  #If fails, do not co automatic image build

ENVVAR ==>                        #Set during CI:
                                  #  - SOURCE_BRANCH|COMMIT, COMMIT_MSG
                                  #  - DOCKER_REPO|TAG, IMAGE_NAME
                                  #Can also set custom ones

HOOKS ==>                         #Can run scripts, placed in /hooks/[pre|post_]STAGE
                                  #STAGE is: checkout, build, test, push
                                  #Used by automatic image build and automatic test

                                  ┌─────────┐
                                  │   DNS   │
                                  └─────────┘

DNS ==>                           #Gives domain names (and sets ENVVAR) linking:
                                  #  - to either: NODE (machine), SERVICE (Docker compose SERVICE) or CONTAINER (Docker container)
                                  #  - hostname:
                                  #     - sub-host:
                                  #        - DOCKERCLOUD_NODE_HOSTNAME: HOST_UUID
                                  #        - DOCKERCLOUD_SERVICE_HOSTNAME: SERVICE_NAME
                                  #        - DOCKERCLOUD_CONTAINER_HOSTNAME: SERVICE_NAME_NUM
                                  #     - full host:
                                  #        - DOCKERCLOUD_NODE_FQDN: HOSTNAME.node.dockerapp.io
                                  #        - DOCKERCLOUD_SERVICE_FQDN: HOSTNAME.STACK.SERVICE_ID.svc.dockerapp.io
                                  #        - DOCKERCLOUD_CONTAINER_FQDN: HOSTNAME.STACK.CONTAINER_ID.cont.dockerapp.io
                                  #  - path:
                                  #     - DOCKERCLOUD_NODE_API_URI: /api/infra/v1/USER/node/HOST_UUID
                                  #     - DOCKERCLOUD_SERVICE|CONTAINER_API_URI: /api/app/v1/USER/service|container/SERVICE|CONTAINER_ID/
                                  #  - domain name:
                                  #     - DOCKERCLOUD_REST_HOST: https://cloud.docker.com
                                  #     - DOCKERCLOUS_STREAM_HOST: wss://ws.cloud.docker.com
                                  #     - DOCKERCLOUD_IP_ADDRESS
                                  #  - URL:
                                  #     - DOCKERCLOUD_NODE|SERVICE|CONTAINER_API_URL: https://cloud.docker.com/ + path

                                  ┌─────────────────────┐
                                  │   USER MANAGEMENT   │
                                  └─────────────────────┘

USER MANAGEMENT ==>               #Only through web app
