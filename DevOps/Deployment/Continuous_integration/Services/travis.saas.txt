
                                  ┏━━━━━━━━━━━━┓
                                  ┃   TRAVIS   ┃
                                  ┗━━━━━━━━━━━━┛

ALTERNATIVES ==>              #See GitHub actions

PLANS ==>                     #  - pro: for private GitHub repos
                              #  - enterprise: on-premise

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

SETTINGS                      #Configuration that apply to all repositories

travis settings [VAR...]      #List SETTINGS
--keys                        #Do not show descriptions
-t|--enable
-f|--disable
-s|--set VAL                  #Modify SETTINGS
-c|--configure                #Modify SETTINGS interactively

CONF                          #Repository-specific configuration.
                              #ROOT_DIR/.travis.yml
                              #YAML 1.1

travis lint [FILE]            #Lint .travis.yml
                              #Does not work well
-q|--[no-]quiet               #
-x|--[no-]exit-code           #Set exit code to 1 if warnings

CONF.version                  #When set to '~> 1.0', CONF is validated

DEBUG ==>                     #Can be done at https://config.travis-ci.com/explore

travis init [LANGUAGE] [FILE] #Creates a .travis.yml
--PHASE VALUE
--env VALUE
--LANGUAGE_ENV VALUE          #Add specific CONF.* properties
-k|--skip-enable              #Do not trigger travis enable
-s|--skip-sync                #Do not sync with GitHub
-f|--force                    #No confirmation on override
-p|--print-conf               #Dry run

SETTINGS
 builds_only_with_travis_yml  #BOOL (def: false). If true, do not build if no .travis.yml

CONF.import                   #IMPORT[_ARR]. Merge another CONF.
                              #Can also be STR (same as {source STR})
                              #CONF.version must be set to '~> 1.0'
IMPORT.source                 #'[USER/REPO:]PATH[@REF]'
IMPORT.mode                   #'merge' or 'deep_merge[_append|_prepend]' (def: deep_merge_append)

                                  ┌──────────────┐
                                  │   ENABLING   │
                                  └──────────────┘

travis enable|disable         #Enable|disable using Travis for this repository
-s|--skip-sync                #Don't sync with GitHub

travis sync                   #Sync with GitHub
-c|--check                    #Show if currently syncing
-b|--background               #
-f|--force                    #Sync even if currently syncing

travis accounts               #List organizations for current user

travis repos                  #Show all repositories current user can access
-o|--owner USER               #Only with this owner
-d|--admin
-D|--no-admin                 #Only where current user is admin or not
-a|--active
-A|--inactive                 #Only if enabled|disabled
-n|--name STR                 #Exact match on name
-m|--match STR                #Globbing match on name

                                  ┌─────────────┐
                                  │   TRIGGER   │
                                  └─────────────┘

PUSH ==>                      #Pushing to GitHub triggers builds.
SETTINGS build_pushes         #BOOL (def: true)

PULL REQUESTS ==>             #Can trigger builds.
                              #  - not done if merge conflicts
                              #Updates status image.
                              #They never use *deploy phases
                              #Pull requests from forks cannot use encrypted VARs
                              #  - reason: forks could log decrypted VARs to gain access to them
                              #  - should test ENVVAR TRAVIS_PULL_REQUEST before using encrypted VARs in 'BASH'
SETTINGS build_pull_requests  #BOOL (def: true)

CRON ==>                      #Runs builds at regular intervals (daily|weekly|monthly)
                              #Uses latest commit
                              #  - can specify branch
                              #  - can skip if there was no build in last 24 hours

REST API ==>                  #Can trigger builds
                              #Can be triggered from the web app (manual trigger)

SETTINGS auto_cancel_pushes
SETTINGS                      #BOOL (def: true)
 auto_cancel_pull_requests    #Cancel builds that have not started, when a new build is queued.

travis cancel [BUILD|JOB_NUM] #Cancels a job|build

travis restart [BUILD|JOB_NUM]#Restart a build|job

TIMEOUT ==>                   #Job-wise: 50mins (or 10mins with no output)

                                  ┌─────────────┐
                                  │   ACTIONS   │
                                  └─────────────┘

SETTINGS                      #Max NUM of parallel jobs
 maximum_number_of_builds     #Def|max:
                              #  - 5 for open-source
                              #  - 1|2|5|10 for pro, depending on pricing plan

ORDER ==>                     #  - build: set of stages run serially
                              #  - stage: set of jobs run in parallel
                              #  - job: set of phases run serially
                              #  - phase: set of Bash commands run serially
                              #Each job has a separate VM (does not share any state)

CONF.stages                   #'STAGE'|STAGE_ARR
                              #Stages serial order (def: 'test' then first-defined stages first)
STAGE.name                    #'STAGE'

CONF.stage                    #Default 'STAGE' (def: 'test')

MATRIX ==>                    #One job is run for each combination (cartesian product) of MCONF properties.
                              #Max 200 total combinations.
MCONF                         #Like CONF but only:
                              #  - CONF.os|dist|osx_image|arch
                              #  - CONF.env
                              #  - CONF.language
                              #  - language-specific environment CONF.* (e.g. CONF.node_js)
CONF.jobs|matrix.exclude      #MCONF_ARR. Exclude matrix combinations from cartesian product.

CONF.PHASE                    #'BASH'[_ARR] or 'skip|ignore|true'
                              #  - should use ARR not 'STR; STR2'
                              #Phases for each matrix job.
                              #Must use sudo for privileges (don't require password typing), e.g. apt-get
                              #Serial order is as followed.
CONF.before_install           #E.g. apt-get install -y (not apt-get upgrade)
CONF.install                  #E.g. npm install
CONF.before_script            #E.g. starts database|server|daemon, set config
CONF.script                   #E.g. npm test
CONF.before_cache             #E.g. cleaning up previous cache
CONF.after_success            #E.g. deploying
CONF.after_failure            #E.g. notifications
CONF.before_deploy            #Run once per provider
CONF.deploy                   #DEPLOY[_ARR] (see below)
CONF.after_deploy             #Run once per provider
CONF.after_script             #

CONF.jobs|matrix.include      #JOB_ARR. Add extra jobs.
                              #If MATRIX has only one job, replace it. Otherwise, added to MATRIX jobs.
JOB.name                      #STR
JOB.stage                     #'STAGE'
                              #Def: same as previous item in JOB_ARR, or CONF.stage if first item
JOB.PHASE                     #Def: CONF.PHASE
JOB.os|dist|osx_image|env|... #Any MCONF.*
                              #Def: first element of each MATRIX dimension

                                  ┌──────────────┐
                                  │   FAILURES   │
                                  └──────────────┘

FAILURES ==>                  #A failure (exit code !== 0) at any stage|job|phase|Bash command:
                              #  - cancel next ones
                              #  - make parent build|stage|job|phase fail
                              #Exceptions:
                              #  - jobs are run in parallel, i.e. do not cancel each others
                              #  - before_cache, after_* phases:
                              #     - do not cancel next phases nor make job fail
                              #     - are not cancelled by "script" failure (but *deploy are cancelled)

CONF.matrix.allow_failures    #MCONF_ARR
                              #Do not make stage fail when matching jobs fail
DEPLOY.allow_failure          #BOOL (def: false)
CONF.matrix.fast_finish       #BOOL (def: false): do not wait for "allow_failures" combinations to complete to mark stage as "completed"

set -e                        #Recommended in Bash scripts (exit whole file when one statement has exit code !== 0)

travis_retry ...              #Available in Bash. Runs ... and retries it twice if exit code !== 0

                                  ┌──────────────┐
                                  │   SKIPPING   │
                                  └──────────────┘

CONF.branches.only|except     #'LBRANCH'|'/LBRANCH_REGEXP/'[_ARR]
                              #Whitelist|blacklist (can't use both)
                              #Branch "gh-pages" is excluded by default

EXCLUDING COMMIT ==>          #If commit message includes "[ci skip]"

CONF[.allow_failures]|STAGE|  #CONDITION. Filters build|stage|job according to CONDITION
 JOB|IMPORT.if                #Possible VARs:
                              #  - type 'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
                              #  - repo 'USER/REPO'
                              #  - branch 'LBRANCH'
                              #  - head_repo|branch: same for pull requests
                              #  - tag 'TAG'
                              #  - commit_message STR
                              #  - sender 'USER'
                              #  - fork BOOL (if repo is a fork)
                              #  - os STR
                              #  - dist STR (OS distribution)
                              #  - group STR (VM image)
                              #  - language STR
                              #  - sudo BOOL
                              #Types:
                              #  - true|false
                              #  - "STR" 'STR' or unquoted STR
                              #  - /REGEXP/ or "REGEXP"
                              #  - (VAL,...) (array)
                              #Operators:
                              #  - VAL == != VAL2
                              #  - STR =~ !~ REGEXP
                              #  - VAL [not] in ARR
                              #  - VAL is [not] present|blank
                              #  - ! || && (aliases: not or and)
                              #  - ()
                              #Functions:
                              #  - env('ENVVAR') (only the ones defined in CONF)
                              #  - concat(STR,...)

DEPLOY.on                     #Conditional deploy.
                              #'LBRANCH' or OBJ:
                              #  - repo 'USER/REPO'
                              #  - branch LBRANCH (def: app-*, master) or all_branches true
                              #  - node|jdk|perl|php|python|ruby|scala|go VERSION[_ARR]
                              #  - condition 'BASH_COMMAND' (e.g. '$ENVVAR == VAL')
                              #  - tags true: only when TAG is applied (only if all_branches true)

travis requests               #List "requests" to create a build (which can be denied according to CONF.if, CONF.branches, etc.)
-l|--limit NUM                #Def: 25

                                  ┌─────────┐
                                  │   ENV   │
                                  └─────────┘

REPO_ENVVARs                  #ENVVARs added to all builds of a repository
                              #Can be git branch-wise

travis env ...                #Manipulate REPO_ENVVARs
-P|--[no-]public
-p|--[no-]private             #Make new values public|private (def: private)
-f|--force                    #No confirmation on deletion
-u|--[no-]unescape            #Do not escape values

travis env list               #
travis env set VAR VAL        #
travis env unset VAR...       #
travis env copy VAR...        #
travis env clear              #

CONF.env[.matrix]             #Build-specific ENVVARs.
                              #"ENVVAR=VAL ..."[_ARR]
CONF.env.global               #Like CONF.env.matrix but for all matrix combinations

ENVVAR CI
ENVVAR TRAVIS
ENVVAR CONTINUOUS_INTEGRATION #'true'

ENVVAR LANG|LC_ALL            #'en_US.UTF-8'
ENVVAR PATH                   #Includes './node_modules/.bin'
ENVVAR USER                   #'travis'
ENVVAR HOME                   #'/home/travis'
ENVVAR SHELL                  #'/bin/bash'
ENVVAR TERM                   #'xterm'

ENVVAR DEBIAN_FRONTEND        #'noninteractive'

ENVVAR TRAVIS_BUILD_DIR       #ROOTDIR absolute path
ENVVAR TRAVIS_BUILD_STAGE_NAME#STAGE.name
ENVVAR TRAVIS_BUILD_
 ID|NUMBER|WEB_URL            #
ENVVAR TRAVIS_JOB_
 ID|NUMBER|WEB_URL            #
ENVVAR TRAVIS_JOB_NAME        #JOB.name

ENVVAR TRAVIS_CMD             #Current 'BASH' command
ENVVAR TRAVIS_TEST_RESULT     #'0' if all commands in the 'script' phase had exit code 0

ENVVAR TRAVIS_EVENT_TYPE      #'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
ENVVAR TRAVIS_REPO_SLUG
ENVVAR TRAVIS_
 PULL_REQUEST_SLUG            #'USER/REPO'
ENVVAR TRAVIS_
 [PULL_REQUEST_]BRANCH        #'LBRANCH'
ENVVAR TRAVIS_TAG             #'TAG'
ENVVAR TRAVIS_COMMIT
ENVVAR TRAVIS_PULL_REQUEST_SHA#'COMMIT'
ENVVAR TRAVIS_COMMIT_RANGE    #'COMMI2...COMMIT'
ENVVAR TRAVIS_COMMIT_MESSAGE  #STR
ENVVAR TRAVIS_PULL_REQUEST    #'PR_ID|false'

ENVVAR TRAVIS_OS_NAME         #CONF.os (not set on Windows)
ENVVAR TRAVIS_DIST            #CONF.dist
ENVVAR TRAVIS_OSX_IMAGE       #CONF.osx_image
ENVVAR TRAVIS_LANGUAGE        #CONF.language
ENVVAR TRAVIS_*               #Language-specific MCONF.* e.g. TRAVIS_NODE_VERSION
ENVVAR TRAVIS_ALLOW_FAILURE   #CONF.matrix.allow_failures

CONF.addons.hosts             #HOSTNAME_ARR: customize host names (/etc/hosts)
CONF.addons.hostname          #STR

                                  ┌──────────────┐
                                  │   SECURITY   │
                                  └──────────────┘

travis encrypt                #Encrypt a value to be used in CONF, using auto-generated RDS from current user
                              #Can then put { secure: 'ENCRYPTED' } instead of STR anywhere in CONF
-a|--add VARR                 #Add to CONF.VARR
-x|--override                 #Override if already existing
-p|--append                   #Prepend to arrays instead of overwriting
-s|--[no-]split               #Streaming mode: use newline-separated stdin

travis encrypt-file FILE      #Encrypt file with AES-256
 [FILE2]                      #Def FILE2: stdout
                              #Create REPO_ENVVARs encrypted_ID_key|iv to store encryption key|IV
-K|--key STR                  #Encryption key (def: random)
--iv STR                      #Encryption IV (def: random)
-p|--print-key                #Prints --key and --iv
-f|--force                    #Overwrite FILE2
-d|--decrypt                  #Decrypt instead of encrypt
-a|--add PHASE                #Add decryption command to CONF.PHASE
-w|--decrypt-to PATH          #Where decryption command should output decrypted file

travis pubkey                 #Print repo's SSH RSA public key
-p|--pem                      #PEM format
-f|--fingerprint              #

travis sshkey                 #Check SSH key (only for private repos)
-c|--check                    #Exit code 1 if does not exist
-g|--generate                 #Create SSH key
-p|--passphrase STR           #
-d|--description STR          #Set description
-u|--upload FILE              #Set SSH key
-s|--stdin                    #Set SSH key from stdin
-D|--delete                   #Delete SSH key

ENVVAR TRAVIS_SECURE_ENV_VARS #'true|false' if some { secure: 'ENCRYPTED' } are used

                                  ┌────────┐
                                  │   OS   │
                                  └────────┘

CONF.os                       #STR[_ARR]. Either:
CONF.dist                     #  - os 'windows'
CONF.osx_image                #     - Windows Server 2016 VM
                              #     - uses Bash
                              #     - cannot use sudo
                              #  - os 'osx'
                              #     - OSX VM
                              #     - osx_image 'xcodeVERSION' (def: '9.4')
                              #  - os 'linux' (def)
                              #     - dist 'precise'
                              #        - Ubuntu 12.04 VM
                              #     - dist 'trusty' (def)
                              #        - Ubuntu 14.04 VM
                              #     - dist 'xenial'
                              #        - Ubuntu 16.04 VM
                              #     - dist 'bionic'
                              #        - Ubuntu 18.04 VM
                              #     - dist 'focal'
                              #        - Ubuntu 20.04 VM
                              #3GB of RAM


CONF.arch                     #STR[_ARR] among 'amd64', 'arm64', 'ppc64le' or 's390x'
                              #Only with OS 'linux'

                                  ┌───────────────┐
                                  │   LANGUAGES   │
                                  └───────────────┘

CONF.language                 #STR.
                              #See online doc for full list, but some useful ones:
                              #  - 'minimal' (also called 'sh|shell|bash'): git, build-essential, docker, curl|wget, openssl, python
                              #  - 'generic':
                              #     - also ruby, node, go, jvm, php, hhvm, all databases from CONF.services|addons
                              #     - Linux 'Trusty' environment is based on this
                              #  - 'node_js'

NODE.JS ==>                   #Def PHASE:
                              #  - install:
                              #     - if package-lock|npm-shrinkwrap.json, npm ci
                              #     - npm install
                              #  - script: npm test
                              #If ./yarn.lock exists, use yarn --frozen-lockfile [test] instead
CONF.node_js                  #STR_ARR, among anything nvm understands (see its doc)
                              #Can also use .nvmrc
ENVVAR TRAVIS_NODE_VERSION    #

                                  ┌─────────┐
                                  │   GIT   │
                                  └─────────┘

GIT CLONING ==>               #Does:
                              #  - git clone --branch=LBRANCH REPO DIR
                              #  - cd DIR
                              #  - git checkout -qf COMMIT

CONF.git.clone                #BOOL (def: true). Whether to use git clone
CONF.git.depth                #NUM or BOOL (def: 50). How many recent commits to clone.
CONF.git.quiet                #BOOL (def: false). Whether to use git clone -q

CONF.git.submodules           #BOOL (def: true): automatically init and update git submodules if .gitmodules
CONF.git.submodules_depth     #NUM

CONF.git.sparse_checkout      #'PATH' (def: none). Copy 'PATH' to .git/info/sparse-checkout (see Git doc)

CONF.git.lfs_skip_smudge      #BOOL. Skip fetch git-lfs files during initial git clone

                                  ┌─────────────┐
                                  │   INSTALL   │
                                  └─────────────┘

CONF.addons.apt.packages      #'PACKAGE'_ARR to install with apt-get install (Linux)
CONF.addons.apt.sources       #Sources of packages to download using apt-get update
                              #Can be:
                              #  - OBJ:
                              #     - sourceline STR (/etc/apt/sources.list line, e.g. "deb URL DIST main")
                              #     - key_url STR: GPG key if one is needed
                              #  - STR:
                              #     - pre-defined alias among the list at https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
                              #Default distribution packages list are available by default.
CONF.addons.apt.dist          #STR
CONF.addons.apt.update        #BOOL. If true (def), run apt-get update
CONF.addons.apt.config        #OBJ

CONF.addons.snaps             #Ubuntu SNAP[_ARR] to install
SNAP.name                     #STR
SNAP.classic                  #BOOL
SNAP.channel                  #STR

CONF.addons.homebrew.packages #'PACKAGE'_ARR to install with Homebrew (OSX)
CONF.addons.homebrew.update   #BOOL (def: false): runs brew update
CONF.addons.homebrew.casks    #'PACKAGE'[_ARR] to install with Homebrew casks
CONF.addons.homebrew.taps     #'PACKAGE'[_ARR] to install with Homebrew casks taps
CONF.addons.homebrew.brewfile #'PATH' or BOOL (def: false): if true use ROOTDIR/Brewfile

PRIVATE REPOSITORIES ==>      #  - GitHub "deploy key": repository-specific SSH key
                              #  - GitHub "user key": user-specific SSH key
                              #     - manipulated with CLI "travis sshkey"
                              #  - any other credentials, e.g. password or API key
CONF.addons.ssh_known_hosts   #'HOSTNAME'[_ARR] to add to ~/.ssh/known_hosts
                              #Secure for *.github.com. For others, read online documentation on security implication

                                  ┌──────────────┐
                                  │   SERVICES   │
                                  └──────────────┘

DOCKER ==>                    #Is available in any 'BASH', providing 'docker' specified in CONF.services
                              #docker-compose also available

CONF.services                 #STR[_ARR]
                              #Automatically starts a database server at before_install PHASE
                              #Available: 'mysql', 'postgresql', 'mongodb', 'couchdb', 'rabbitmq', 'riak', 'memcached',
                              #'redis-server', 'cassandra', 'neo4j', 'elasticsearch', 'docker', 'xvfb'
CONF.postgresql|mariadb
 rethinkdb                    #'VERSION'. Like CONF.services
CONF.addons.firefox           #'VERSION|latest[-esr|beta|dev|nightly|unsigned]' (already installed, but can specify version here)
CONF.addons.chrome            #'stable|beta'

CONF.addons.sauce_connect     #To launch Sauce Connect (not Sauce Labs)
                              #Either:
                              #  - OBJ.username|access_key STR
                              #  - BOOL true:
                              #     - alternative using ENVVAR SAUCE_USERNAME|ACCESS_KEY
                              #CAPAB_OBJ:
                              #  - tunnel-identifier: TRAVIS_JOB_NUMBER
                              #  - build: TRAVIS_BUILD_NUMBER
                              #  - tags: TRAVIS_*_VERSION, CI

travis setup SERVICE          #Modify CONF to setup a specific SERVICE
-f|--force                    #Allow overwriting

                                  ┌────────────────┐
                                  │   DEPLOYMENT   │
                                  └────────────────┘

CONF|JOB.deploy               #DEPLOY[_ARR]
                              #Automatic deploy on success
DEPLOY.provider               #'PROVIDER'
                              #Can have same PROVIDER several times in CONF.deploy DEPLOY_ARR
DEPLOY.cleanup                #BOOL (def: true): cleanup files and Travis local changes before deploying
DEPLOY.*                      #Other options depend on 'PROVIDER'

AVAILABLE PROVIDERS ==>       #  - 'script' (see below)
                              #  - 'npm' (see its doc)
                              #  - 'github' (see its doc)
                              #  - 'heroku' (see its doc)
                              #  - 's3' (see its doc)
                              #  - others: see online doc

SCRIPT_DEPLOY.provider        #'script'
                              #Run bash command
SCRIPT_DEPLOY.script          #'BASH'
                              #Checks exit code

                                  ┌───────────────┐
                                  │   ARTIFACTS   │
                                  └───────────────┘

CONF.addons.artifacts         #BOOL or OBJ ARTIFACTS
                              #Upload files to S3 after deploy (after_script)
                              #Each ARTIFACTS.* can also be set with ENVVAR ARTIFACTS_*
ARTIFACTS.enabled             #BOOL (def: true)
ARTIFACTS.paths               #Source 'PATH'[_ARR] (def: git ls-files -o, i.e. untracked files)
ARTIFACTS.branch              #'LBRANCH'
ARTIFACTS.target_paths        #S3 destination 'PATH'[_ARR] (def: '/${TRAVIS_REPO_SLUG}/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}')
ARTIFACTS.bucket              #STR. S3 bucker
ARTIFACTS.endpoint            #STR. S3 endpoint.
ARTIFACTS.key                 #STR. S3 access key ID
ARTIFACTS.secret              #STR. S3 secret access key
ARTIFACTS.region              #STR (def: 'us-east-1'). S3 region.
ARTIFACTS.log_format          #STR
ARTIFACTS.debug               #BOOL (def: false)
ARTIFACTS.concurrency         #NUM
ARTIFACTS.max_size            #NUM
ARTIFACTS.permissions         #STR
ARTIFACTS.working_dir         #'PWD' (def: current one)
ARTIFACTS.cache_control       #STR

                                  ┌────────┐
                                  │   S3   │
                                  └────────┘

S3_DEPLOY                         #Automatically upload built directory to S3 with Travis (see its doc)
S3_DEPLOY.provider                #'s3'
S3_DEPLOY.local_dir               #Which 'DIR' to upload (def: ROOTDIR)
S3_DEPLOY.region                  #STR (def: 'us-east-1')
S3_DEPLOY.access_key_id           #STR
S3_DEPLOY.secret_access_key       #STR
S3_DEPLOY.bucket                  #STR. S3 Bucket name
S3_DEPLOY.acl                     #'private' (def) or 'public_read[_write]', 'authenticated_read', 'bucket_owner_read',
                                  #'bucket_owner_full_control'
                                  #'s3:PutObjectAcl' must be allowed
S3_DEPLOY.upload-dir              #'PATH' to deploy on S3
S3_DEPLOY.default_text_charset    #STR (def: ''): set Content-Type [S] charset
S3_DEPLOY.detect_encoding         #BOOL (def: false): detect and set Content-Encoding [S]
S3_DEPLOY.cache_control           #STR (def: 'no-cache'): set Cache-Control [S]
S3_DEPLOY.expires                 #STR (def: undefined): set Expires [S]
S3_DEPLOY.endpoint                #'URL' (different S3 endpoint/proxy)

TRAVIS_CONF.addons.artifacts      #Deploy built files to S3 with Travis (see its doc)
                                  #Similar to S3_DEPLOY, but meant for archiving built files more than deploying
                                  #true or ARTIFACTS
ARTIFACTS.paths                   #'FILES'_ARR to upload
                                  #'FILES':
                                  #  - is colon-separated list of files
                                  #  - interpreted in BASH, e.g. can include "$(BASH)" or $ENVVAR
                                  #Def: "$(git ls-files -o | tr '\n' ':')", i.e. any files not tracked/committed in Git
                                  #(i.e. produced by the build)
ENVVAR ARTIFACTS_PATHS            #Same but colon-separated list "...:..."
ARTIFACTS.working_dir             #'DIR' (def: ROOTDIR)
ARTIFACTS.s3_region
ENVVAR ARTIFACTS_REGION           #AWS region (def: 'us-east-1')
ENVVAR ARTIFACTS_KEY              #AWS access key id
ENVVAR ARTIFACTS_SECRET           #AWS secret access key
ENVVAR ARTIFACTS_BUCKET           #S3 bucket name
ARTIFACTS.target_paths            #S3 'PATH'_ARR
                                  #Interpreted in BASH like ARTIFACTS.paths
                                  #Def: "/${TRAVIS_REPO_SLUG}/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}"
ARTIFACTS.debug                   #BOOL
ENVVAR ARTIFACTS_DEBUG=1          #Verbose

                                  ┌───────────────────┐
                                  │   NOTIFICATIONS   │
                                  └───────────────────┘

CONF.notifications.PROVIDER   #NOTIFY[_ARR]. Notify according to build status failure|success
                              #By default, NOTIFY.email is enabled
NOTIFY.on_success             #'always|never|change' (def: 'change' for email, 'always' otherwise)
NOTIFY.on_failure             #'always|never|change' (def: 'always')
NOTIFY.on_pull_requests       #BOOL (def: true)
NOTIFY.template               #STR[_ARR]. Can use template ${VAR} with build information (see online doc for list)

NOTIFY.email[.recipents]      #EMAIL[_ARR] or BOOL
                              #true (def) means to committer email, providing it's:
                              #  - someone who can push to Travis
                              #  - registered to GitHub

NOTIFY.slack[.rooms]          #'ACCOUNT:TOKEN[#CHANNEL]'[_ARR]
                              #  - TOKEN is obtained when installing Slack's integration

NOTIFY.webhooks[.urls]        #'URL'[_ARR]:
                              #  - method: POST
                              #  - Signature: TOKEN [C]
                              #     - TOKEN is SHA1(PAYLOAD) signed by public key
                              #     - public key can be retrieved with REST API (see online doc)
                              #     - should be checked
                              #  - Content-Type: application/x-www-form-urlencoded [C]
                              #  - payload: see online doc
NOTIFY.webhooks.on_start      #'always|never|change' (def: 'never')
NOTIFY.webhooks.on_cancel     #'always|never|change' (def: 'always')
NOTIFY.webhooks.on_error      #'always|never|change' (def: 'always')

NOTIFY.irc|flowdock|pushover|
 opsgenie                     #Other providers

BUILDNOTIFY ==>               #Desktop status bar notification
                              #Must install buildnotify then add either:
                              #  - https://api.travis-ci.org/repos/USER.xml
                              #  - https://api.travis-ci.org/repos/USER/REPO/cc.xml[?branch=LBRANCH]

ATOM FEED ==>                 #Available at https://api.travis-ci.org/repos/USER/REPO/builds[.atom]
                              #Can use ?token for private repositories

WALLS ==>                     #  - node-build-monitor
                              #  - ahmedelsayed-93 ci-dashboard

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

LOGGING ==>                   #stdout|stderr is logged
                              #Max output: 4MB
set -v                        #Possible in Bash scripts (prints script's every statement)

travis logs [BUILD|JOB_NUM]   #Show a build|job stdout|stderr
-d|--delete [REASON]          #Delete logs instead
-f|--force                    #Do not confirm logs deletion
--[no-]stream                 #Whether to stream (def: on)

                                  ┌────────────┐
                                  │   STATUS   │
                                  └────────────┘

travis monitor                #Show start|success|failure of each new build|job
-m|--my-repos                 #Only own repositories
-n|--[no-]notify [STR]        #Send desktop notifications (def: on). STR is osx|growl|libnotify
                              #Too verbose (also notify for start and success)
-b|--builds                   #Show builds only, not jobs
-p|--push
-P|--pull                     #Only show push|pull requests

travis history                #List latests builds and their statuses
-b|--branch LBRANCH           #
-p|--pull-request PR_NUM      #
-a|--after BUILD_NUM          #
-l|--limit NUM                #Def: 10
--[no-]all                    #No limits
-d|--date
-c|--committer                #Also print data|committer

travis branches               #List branches and their statuses

travis whatsup                #Show status of latest build for each enabled repo
-m|--my-repos                 #Only repos where current user is owner

travis status                 #Show status of latest build
-x|--[no-]exit-code           #Status code 1 if error
-p|--[no-]fail-pending        #Status code 1 if pending
-q|--[no-]quiet               #

travis show [BUILD|JOB_NUM]   #Show a build|job status|type|branch|URL|times|configuration

travis open [BUILD|JOB_NUM]   #Open build|job in browser
-p|--print                    #Print URL instead of opening
-g|--github                   #Open project GitHub page instead

                                  ┌─────────────┐
                                  │   PR BOTS   │
                                  └─────────────┘

TRAVIS-BUDDY ==>              #Better status image comments on GitHub PR
NOTIFY.webhooks               #'https://www.travisbuddy.com'
                              #Can also use query variables:
                              #  - ?only=failed,errored: only comment when PR first build was a failure|error
                              #  - ?insertMode=STR: like CONF.travisBuddy.*
                              #Can stop Travis buddy by posting comment "@TravisBuddy stop"
CONF.travisBuddy              #Configuration OBJ:
                              #  - insertMode STR:
                              #     - 'append' (def): one new comment each time
                              #     - 'update': update always same comment
                              #  - regex 'REGEX', regexOptions 'FLAGS': only keep log lines matching this
ROOTDIR/travis-buddy-
 success|failure|error-
 template.md                  #Mustache template to use for the comment

                                  ┌───────────┐
                                  │   CACHE   │
                                  └───────────┘

CONF.cache.directories        #'DIR'_ARR to cache between builds
                              #Cached files:
                              #  - are downloaded from S3
                              #  - done right after 'before_cache'
                              #Should only be used for files slow to build, not for big files (since they are still downloaded)
                              #There is one cache per LBRANCH and per MCONF
                              #  - can set explicit cache with ENVVAR CACHE_NAME
CONF.cache                    #STR[_ARR] or false (def). Alias for pre-defined list of files to cache for a given package installer
                              #Available: 'apt', 'npm', 'yarn', 'pip', 'ccache', 'packages' (R), 'cargo', 'cocoapods', 'bundler' (Ruby)
CONF.cache.STR                #BOOL. Same as using CONF.cache STR
CONF.cache.timeout            #NUM (def: 180, in secs)
CONF.cache.branch             #'LBRANCH'

travis cache                  #List cached directories, their size and mtime
-m|--match STR                #Only whose name include STR
-b|--branch LBRANCH           #
-d|--delete                   #Delete cached directories
-f|--force                    #No confirmation on deletion

                                  ┌────────────────────┐
                                  │   AUTHENTICATION   │
                                  └────────────────────┘

travis
-t|--token API_TOKEN
ENVVAR TRAVIS_TOKEN           #Authentication

travis login                  #Retrieve TRAVIS_TOKEN and store it in GCONF.endpoints.*.access_token
                              #Asks for username and password
-u|--user USER                #
-M|--no-manual                #Do not ask for username and password
-g|--github-token OAUTH_TOKEN #Authenticate with GitHub token
--list-github-token           #List GitHub tokens instead
--skip-token-check            #Don't verify GitHub token
-T|--auto-token               #Try to guess token from sending requests to GitHub API
-p|--auto-password            #Store password in OSX keychain
-a|--auto                     #Same as -T -p

travis logout                 #

travis token                  #Print TRAVIS_TOKEN

travis whoami                 #Print current user

                                  ┌─────────┐
                                  │   CLI   │
                                  └─────────┘

travis.rb                     #CLI

~/.travis/config.yml          #GCONF
                              #As opposed to CONF, it is global config

travis
-i|--[no-]interactive         #Colors (def: auto)

travis
--debug                       #Show API requests
--debug-http                  #Show HTTP requests

travis
--skip-version-check          #Do not check for updates
--skip-completion-check       #Do not check for auto-completion
GCONF.checked_completion      #BOOL

travis branches|cache|cancel|
 disable|enable|encrypt|
 encrypt-file|env|history|
 init|logs|monitor|open|
 pubkey|requests|restart|
 settings|setup|show|sshkey|
 status
-r|--repo USER/REPO           #GitHub reposition (def: auto-detect)
-R|--store-repo USER/REPO     #Same but persist value for current repo

                                  ┌──────────────┐
                                  │   REST API   │
                                  └──────────────┘

travis raw RESOURCE           #Do a GET /RESOURCE to the REST API
--[no-]json                   #

travis console                #Run a Ruby client to access REST API
-x|--eval STR                 #Ruby code to evaluate

REST API                      #FUNC() are non-CRUD actions
                              #Resources:
                              #  - Owner (id, GitHub login|name|id|avatar|sync, GitHub sync(), isEducationAccount)
                              #    (can be either a User or Organization)
                              #     - Installation (GitHub App installation)
                              #  - Repository (id|slug, owner, GitHub id|name|description|language|isInstallation, enabled, private,
                              #    defaultBranch, starred) (enable|disable(), star|unstar())
                              #     - Branch (name, isDefault, isOnGitHub)
                              #        - Commit (id|sha|ref, message, URL, date, committer|author)
                              #           - Request (id, isProcessed, createdAt, eventType, yamlConfig)
                              #              - Message
                              #              - Build (id|number, createdBy, status, duration|startedAt|updatedAt|finishedAt,
                              #                eventType, PR_title|number, private, git tag) (cancel(), restart())
                              #                 - Stage (id|number|name, status, startedAt|finishedAt)
                              #                    - Job (id|number, allowFailure, status, createdAt|updatedAt|startedAt|finishedAt, queue, private)
                              #                      (cancel(), restart())
                              #                       - Log (id, content)
                              #        - CronJob (id, dontRunIfNoChanges, interval|lastRun|nextRun|createdAt, active)
                              #        - Cache
                              #  - Setting (name|value)
                              #  - Preferences (name|value)
                              #  - EnvVar (REPO_ENVVARs)
                              #  - KeyPair (SSH key)
                              #  - Lint
                              #  - EmailSubscription

NODE-TRAVIS-CI                #JavaScript client for the REST API (see online doc)

                                  ┌───────────┐
                                  │   LOCAL   │
                                  └───────────┘


PREVIS ==>                    #Try to replicate Travis behavior but locally, using Docker
                              #Is quite limited

                                  ┌────────────┐
                                  │   BADGES   │
                                  └────────────┘

BADGE ==>                     #  - https://img.shields.io/travis/USER/REPO[/BRANCH].svg
                              #  - https://travis-ci.org/USER/REPO.svg[?branch=LBRANCH]
                              #Def LBRANCH is latest build's
                              #Should link to https://travis-ci.org/USER/REPO[?branch=LBRANCH]
