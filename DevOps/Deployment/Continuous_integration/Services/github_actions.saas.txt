
                  
   GITHUB_ACTIONS  
                  



ALTERNATIVES ==>                  #  - GitHub actions (preferred):
                                  #     - run shell command or Docker container
                                  #     - plugins
                                  #     - triggered on push, PR, cron, API, any GitHub event
                                  #     - Windows, Mac, Linux
                                  #     - integrated with GitHub UI
                                  #     - 20 parallel jobs
                                  #     - great hardware
                                  #     - any background process/service (Docker container)
                                  #     - nice conditional logic
                                  #     - timeout 6 mins
                                  #     - fast fail
                                  #     - secret environment variables with GitHub repo UI settings
                                  #     - simple templating
                                  #  - Travis:
                                  #     - run shell command
                                  #     - no plugins
                                  #     - triggered on push, PR, cron, API
                                  #     - Windows, Mac, Linux
                                  #     - 5 parallel jobs
                                  #     - good hardware
                                  #     - specific built-in background process/service
                                  #     - nice conditional logic
                                  #     - timeout 50 mins
                                  #     - fast fail
                                  #     - secret environment variables with CLI
                                  #     - can re-use configuration file
                                  #     - auto-cancel several builds in a row
                                  #     - can run on multiple CPU architectures


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIMITS ==>                        #  - 20 workflows in parallel at once per repository
                                  #  - 20 jobs in parallel at once for all repositories
                                  #     - 5 for MacOS
                                  #     - 40 for Pro, 60 for Team
                                  #  - 1000 API requests per hour per repository
                                  #  - for private, max 2000|3000|10000|50000 mins/month for free|pro|team|enterprise
                                  #     - can pay for extra mins

FORKED REPOSITORY ==>             #Do not trigger any workflows:
                                  #  - unless enabled in web UI
                                  #  - not for private repositories

STATUS BADGE ==>                  #https://github.com/USER/REPO/workflows/WORKFLOW_NAME/badge.svg


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.runs-on                       #Host OS among:
                                  #  - ubuntu-VERSION (latest|22.04|20.04)
                                  #  - macOS-VERSION (latest|11.0)
                                  #  - windows-VERSION (latest|2022|2019|2016)
                                  #Each JOB runs in own virtual machine instance.
                                  #With custom runners, linux|windows|macos and x86|x64|ARM|ARM64 instead
ENVVAR RUNNER_OS
CONTEXT.runner.os                 #'Linux|macOS|Windows'

SOFTWARE ==>                      #See https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions
                                  #and https://github.com/actions/virtual-environments for list of global dependencies but this includes:
                                  #  - Node.js 10.16.3
                                  #  - nvm on Mac, n on Linux|Windows
                                  #  - Bash, powershell
                                  #  - Git
                                  #  - gulp, grunt
                                  #  - yarn, bower
                                  #  - typescript
                                  #  - wget, curl
                                  #  - python, ruby, php, rust, go
ENVVAR HOME                       #Can be used
PRIVILEGES ==>                    #Passwordless sudo on Linux|Mac, no admin prompt for Windows
ENVVAR USER                       #'runner'

HARDWARE ==>                      #Hosted on Azure Standard_DS2_v2 for Windows|Linux:
                                  #  - 2 CPUs
                                  #  - 7GB RAM
                                  #  - 14GB SSD temporary storage
                                  #  - max I/O: 8000 IOPS and 8MB/s
                                  #  - max network: 200MB/s
                                  #Hosted on MacStadium for Mac

JOB.container                     #Docker CONTAINER to run every STEP that uses STEP.run (not STEP.uses)

JOB.services.SERVICE_ID           #Docker SERVICE, i.e. container started in background before all STEPs and closed after all.
CONTAINER|SERVICE.image           #'IMAGE[:TAG]'
CONTAINER|SERVICE.ports           #NUM_ARR to expose
CONTAINER|SERVICE.volumes         #ARR of Docker volumes '[HOST_DIR:]CONTAINER_DIR'
CONTAINER|SERVICE.options         #'--OPT ...' passed to docker create
CONTEXT.job.container|services.
 SERVICE.id                       #CONTAINER|SERVICE's ID
CONTEXT.job.container|services.
 network                          #CONTAINER|SERVICE's NETWORK ID
CONTEXT.job.container|services.
 ports                            #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW.on                       #EVENT[_NAME][_ARR] triggering this workflow.
                                  #Not recursive, i.e. workflow cannot trigger another workflow.

EVENT                             #{ EVENT_NAME: OPTS,... }
                                  #OPTS:
                                  #  - types STR_ARR:
                                  #     - filter to only those sub-types
                                  #     - def to all sub-types unless indicated otherwise
                                  #  (push|pull_request only)
                                  #  (can use globbing including globstar and '!...')
                                  #  - branches[-ignore] 'LBRANCH'_ARR
                                  #  - tags[-ignore] 'TAG'_ARR
                                  #  - paths[-ignore] 'PATH'_ARR
                                  #     - only for those files
                                  #     - relative to root directory
                                  #     - no starting slash

EVENT_NAME repository_dispatch    #Custom event to trigger a workflow
EVENT_NAME workflow_dispatch      #UI button trigger.
EVENT_NAME schedule               #Regular intervals
                                  #OPTS_ARR:
                                  #  - cron '0-59 0-23 1-31 1-12 0-6'
                                  #     - hour minute dayOfMonth month dayOfWeek
                                  #     - each FIELD can be:
                                  #        - *: every
                                  #        - FIELD,...: and
                                  #        - FIELD-FIELD: from-to
                                  #        - NUM/NUM2: from NUM, then every NUM2
EVENT_NAME push                   #New commit.
                                  #Includes push to a branch that is also a pull request (i.e. would create 2 workflows, one
                                  #for push, one for pull_request)
                                  #Does not include push to a forked repository that is also a pull_request
EVENT_NAME pull_request[_target]  #Types (def: opened synchronize reopened):
                                  #  - [re]opened edited closed
                                  #  - [un]locked
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - synchronize
                                  #  - ready_for_review review_requested review_request_removed
                                  #If "_target", run inside the fork instead
                                  #  - i.e. access to SECRET_ENVVARs
EVENT_NAME pull_request_review    #Types: submitted edited dismissed
EVENT_NAME
 pull_request_review_comment      #Types: created edited deleted
EVENT_NAME commit_comment         #Comment on a commit
EVENT_NAME issues                 #Types:
                                  #  - [re]opened edited deleted closed
                                  #  - [un]locked
                                  #  - [un]pinned
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - [de]milestoned
                                  #  - transferred (to another repo)
EVENT_NAME issue_comment          #Each comment in an issue
                                  #Types: created edited deleted
EVENT_NAME label                  #List of possible issue labels in the repository
                                  #Types: created edited deleted
EVENT_NAME milestone              #Types: created opened edited deleted closed
EVENT_NAME project                #GitHub project
                                  #Types: created|reopened updated|edited deleted closed
EVENT_NAME project_column         #GitHub project column of cards
                                  #Types: created updated deleted moved
EVENT_NAME project_card           #GitHub project card
                                  #Types: created edited deleted moved converted (to an issue)
EVENT_NAME watch                  #Starred (not starting watching)
                                  #Types: started
EVENT_NAME fork                   #Someone forked repo
EVENT_NAME release                #GitHub release
                                  #Types: created edited deleted prereleased|[un]published
EVENT_NAME deployment             #Deploy code to remote server
                                  #Must be handled by external providers
EVENT_NAME deployment_status      #Deployment status changed
EVENT_NAME status                 #Commit status
EVENT_NAME check_suite            #Group of checks (automatic CI actions)
                                  #Types: [re]requested completed
EVENT_NAME check_run              #Single check
                                  #Types: created|rerequested completed requested_action (button to ask user for additional action)
EVENT_NAME public                 #Make private repository public
EVENT_NAME create|delete          #A branch|tag
EVENT_NAME member                 #Collaborators|admins
                                  #Types: added edited deleted
EVENT_NAME page_build             #GitHub Pages build
EVENT_NAME gollum                 #Wiki update
EVENT_NAME branch_protection_rule #Branch protection rule changed.
                                  #Types: created|edited|deleted

CONTEXT.github.event_name
ENVVAR GITHUB_EVENT_NAME
GITHUB.context.eventName          #'EVENT_NAME' that triggered the WORKFLOW
CONTEXT.github.actor
ENVVAR GITHUB_ACTOR
GITHUB.context.actor              #STR. Username or app that triggered the WORKFLOW
CONTEXT.github.event              #OBJ of the GitHub event payload
GITHUB.context.payload            #See GitHub API documentation online for those payloads
ENVVAR GITHUB_EVENT_PATH
CONTEXT.github.event_path         #'PATH' to a JSON file containing CONTEXT.github.event


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORCHESTRATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW                          #.github/workflows/WORKFLOW.y[a]ml
                                  #There can be several per repository
WORKFLOW.name                     #'WORKFLOW_NAME'. Shown in Web UI.
                                  #Def: filepath
CONTEXT.github.workflow
ENVVAR GITHUB_WORKFLOW
GITHUB.context.workflow           #WORKFLOW.name
ENVVAR GITHUB_RUN_NUMBER
CONTEXT.github.run_number         #WORKFLOW ID inside the repository. Incremented from 1

ENVVAR GITHUB_RUN_ID
CONTEXT.github.run_id             #Workflow run unique ID.

WORKFLOW.jobs.JOB_ID              #JOB. Run in parallel (unless JOB.needs)
                                  #JOB_ID must be [:alnum:]-_
JOB.name                          #'JOB_NAME'. Displayed in web UI
JOB.needs                         #'JOB_ID'[_ARR]. Wait for those jobs first.
CONTEXT.github.job                #'JOB_ID'

WORKFLOW[.jobs.JOB_ID.]
 concurrency                      #STR. Same as concurrency.group STR
WORKFLOW[.jobs.JOB_ID.]           #Ensure two workflows|jobs with different STR are run serially
 concurrency.group                #Def: 'ci-${{github.ref}}'
WORKFLOW[.jobs.JOB_ID.]
 concurrency.cancel-in-progress   #BOOL (def: false).

JOB.steps                         #STEP_ARR. Run serially.
STEP.id                           #'STEP_ID'
STEP.name                         #'STEP_NAME' (def: STEP.run|uses). Displayed in web UI

CONTEXT.job.status
CONTEXT.needs.JOB_ID.result       #JOB's status among 'success', 'failure' and 'cancelled'
CONTEXT.steps.STEP_ID.            #STEP's status among 'success', 'failure', 'cancelled' and 'skipped'
 outcome|conclusion               #If exit code non-0 but continue-on-error true, outcome is 'failure' but conclusion is 'success'
STEP.continue-on-error            #BOOL. If false (def), exits whole JOB once any STEP.run|uses has exit code non-0

JOB|STEP.if                       #BOOL. If false, skips this JOB|STEP
                                  #Usually used with ${{EXPR}} but ${{ }} can be omitted
                                  #EXPR can use the additional following functions:
success|failure()->BOOL           #Whether previous STEP failed
cancelled()->BOOL                 #Whether previous STEP was cancelled
always()->BOOL                    #Always returns true

SKIP GIT MESSAGE ==>              #Skip CI when using git message with any of: '[skip ci]', '[no ci]', '[skip actions]' (or reverse order)

JOB|STEP.timeout-minutes          #NUM (max|def: 6)

CANCEL|RE-RUN ==>                 #Done through web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MATRIX             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.strategy.matrix               #Build matrix: repeat JOB once for each cartesian product
                                  #OBJ:
                                  #  - VAR: ARR
                                  #  - include OBJ_ARR
                                  #     - either add additional VAR: VAL to a specific dimension
                                  #       (if VAR match)
                                  #     - or add a new dimension (otherwise)
                                  #  - exclude OBJ_ARR:
                                  #     - remove a dimension
                                  #     - all VAR: VAL of that dimension must be specified

CONTEXT.matrix.VAR                #Access each dimension's values
CONTEXT.strategy.job-index        #NUM of current dimension
CONTEXT.strategy.job-total        #NUM of dimensions

JOB.strategy.fail-fast            #BOOL (def: true). Cancels whole matrix if any JOB fails.
CONTEXT.strategy.fail-fast        #
JOB.strategy.max-parallel         #NUM (def: max available)
CONTEXT.strategy.max-parallel     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMAND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STEP.run                          #'SHELL_COMMAND'
                                  #Can use several commands with newline separators.
STEP.shell                        #Shell to use with STEP.run:
WORKFLOW|JOB.defaults.run.shell   #  - 'bash': bash --noprofile --norc -eo pipefail ...
                                  #     - def on Unix
                                  #     - uses msys on Windows
                                  #  - 'sh': sh -e ...
                                  #     - not supported on Windows
                                  #  - 'cmd': %ComSpec% /D /E:ON /V:OFF /S /C "CALL "...""
                                  #     - def on Windows
                                  #     - only supported on Windows
                                  #  - 'pwsh': pwsh -command "& '...'"
                                  #     - core PowerShell
                                  #  - 'powershell': powershell -command "& '...'"
                                  #     - only supported on Windows
                                  #     - desktop PowerShell
                                  #  - 'python': python ...
                                  #  - 'COMMAND ...': custom
                                  #     - {0} is replaced with command

ACTION                            #Command to execute within a STEP, delivered as a plugin.
                                  #Alternative to STEP.run
STEP.uses                         #ACTION_REF (see below)
STEP.with.INPUT_ID                #STR (see ACTION.inputs.INPUT_ID)
STEP.with.entrypoint|args         #Override ACTION.entrypoint|args (see below)
ENVVAR GITHUB_ACTION
CONTEXT.github.action
GITHUB.context.action             #ACTION_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOGS ==>                          #Can be seen through web UI

ACTIONS_RUNNER_DEBUG=true         #SECRET_ENVVAR. Add debug information about environment and orchestration
ACTIONS_STEP_DEBUG=true           #SECRET_ENVVAR. Add debug information about each job itself (see ACTION_COMMAND debug below)

DOWNLOAD ARTIFACTS ==>            #Done through web UI

MENU NOTIFICATION ==>             #Not integrated with CCMenu yet.
                                  #Can use https://cryptic-stream-13380.herokuapp.com/USER/REPO/WORKFLOW.yml for the moment


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ENVVAR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW|JOB|STEP|CONTAINER.env   #OBJ of ENVVARs

SECRET_ENVVAR                     #Set in web UI, or in JOBS.secrets.VAR
                                  #Cannot be used in forked repositories (except GITHUB_TOKEN)
                                  #Can only be accessed through CONTEXT.secrets.VAR, not as a normal ENVVAR
                                  #Limits:
                                  #  - 100 per repository
                                  #  - 64KB value
CONTEXT.secrets.VAR               #Use a SECRET_ENVVAR

JOB.environment                   #'NAME'
                                  #Sets of SECRET_ENVVARs, set in web UI
                                  #When a JOB uses them, can require specific rules:
                                  #  - reviewers approval
                                  #  - fixed wait time
                                  #  - specific branches

ENVVAR GITHUB_WORKSPACE           #'DIR' used as PWD for ACTIONs (e.g. '/home/runner/work/REPO/REPO')
CONTEXT.github.workspace          #This will be most likely where repository root directory will be checked out by ACTIONs
                                  #Cannot be used if inside an ACTION that uses USER Dockerfile instruction
ENVVAR RUNNER_WORKSPACE
CONTEXT.runner.workspace          #Parent directory of GITHUB_WORKSPACE
STEP.working-directory
WORKFLOW|JOB.defaults.run.
 working-directory                #'PATH' for PWD

ENVVAR GITHUB_ACTIONS             #Always 'true'
ENVVAR CI                         #Always 'true'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              GIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTEXT.github.repository
ENVVAR GITHUB_REPOSITORY          #'USER/REPO'
GITHUB.context.repo               #OBJ: owner 'USER', repo 'REPO'
                                  #Uses either ENVVAR GITHUB_REPOSITORY or GitHub event payload.repository.owner|name
GITHUB.context.issue              #Same but also adds OBJ.number NUM, which is GitHub event payload[.issue|pullRequest].number
CONTEXT.github.repository_owner   #'USER'
CONTEXT.github.sha
ENVVAR GITHUB_SHA
GITHUB.context.sha                #'HASH'
CONTEXT.github.ref
ENVVAR GITHUB_REF
GITHUB.context.ref                #'refs/heads/BRANCH|TAG'
CONTEXT.github.head_ref
ENVVAR GITHUB_HEAD_REF            #Same but for head if forked repository
CONTEXT.github.base_ref
ENVVAR GITHUB_BASE_REF            #Same but for base repository if forked repository

GITHUB_TOKEN                      #SECRET_ENVVAR with a GitHub token:
CONTEXT.github.token              #  - scoped to current repository
                                  #  - read|write on most endpoints
                                  #     - read-only in forked repositories
                                  #Can create one token if not enough permissions
WORKFLOW|JOB.permissions          #Either:
                                  #  - OBJ: TYPE: 'read|write|none'
                                  #  - 'read-all|write-all'
                                  #Permissions granted to GITHUB_TOKEN
                                  #TYPE can be actions|checks|contents|...

GITHUB                            #Instance of new Octokit() (see @octokit/rest)
                                  #Exception: argument is ('AUTH_TOKEN', OPTS) instead of ({...OPTS, auth: 'token AUTH_TOKEN'})
GITHUB.graphql                    #Same with @octokit/graphql

actions/checkout                  #Action that does a git pull + git checkout
                                  #Version 3.0.2
INPUTS.token                      #GitHub token (def: ENVVAR GITHUB_TOKEN)
INPUTS.ssh-key                    #STR. Alternative to INPUTS.token
INPUTS.ssh-known-hosts            #STR.
INPUTS.ssh-strict                 #BOOL (def: true). Use StrictHostKeyChecking=yes and CheckHostIP=no SSH options
INPUTS.persist-credentials        #BOOL (def: true). Use local git config for INPUTS.token|ssh-key if available
INPUTS.repository                 #'USER/REPO' (def: ENVVAR GITHUB_REPOSITORY)
INPUTS.ref                        #'COMMIT|BRANCH|TAG' (def: ENVVAR GITHUB_REF or 'refs/heads/master')
INPUTS.path                       #'PATH' where to checkout (def: '.')
INPUTS.clean                      #BOOL (def: true). Does git clean -ffdx + git reset --hard before git checkout
INPUTS.fetch-depth                #NUM (def: 1, 0 for all). How many commits to fetch
INPUTS.lfs                        #BOOL (def: false). Download Git-LFS files
INPUTS.submodules                 #BOOL (def: false) or 'recursive'. Checkout git submodules shallowly|deeply
INPUTS.set-safe-directory         #BOOL (def: false): use git config safe.directory instead of overridding global gitconfig

actions/github-script             #Fire an inline JavaScript async function, with access to the following variables:
                                  #  - github: Octokit|GITHUB instance (see @actions/github)
                                  #  - context: GITHUB.context
                                  #  - core: CORE
                                  #  - io: @actions/io
                                  #  - exec: @actions/exec
                                  #  - require()
                                  #Version 6.1.0
INPUTS.script                     #'JAVASCRIPT'. Function body
                                  #Can use top-level await
INPUTS.github-token               #Def: '${{github.token}}'
INPUTS.debug                      #BOOL (def: false). Sets Octokit OPTS.log = console
INPUTS.user-agent                 #STR (def: 'actions/github-script'). Sets Octokit OPTS.userAgent
INPUTS.previews                   #'STR,...'. Sets Octokit OPTS.previews
INPUTS.result-encoding            #'json' (def) or 'string'.
OUTPUTS.result                    #STR. Function return value.
                                  #If INPUTS-result-encoding 'json', JSON.stringify(). If 'string', String()

ad-m/github-push-actions          #Does a git push to current repo
                                  #Does git push https://USER:GITHUB_TOKEN@github.com/REPOSITORY.git HEAD:BRANCH --follow-tags
                                  #Version 0.6.0
INPUTS.github_token               #'TOKEN'. Required. E.g. ${{ secrets.GITHUB_TOKEN }}
INPUTS.repository                 #'USER/REPO' (def: current one)
INPUTS.branch                     #'BRANCH' (def: 'master')
INPUTS.force                      #BOOL (def: false). Does --force
INPUTS.tags                       #BOOL (def: false). Does --tags
INPUTS.directory                  #'PATH' (def: '.'). Current directory


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


${{EXPR}}                         #Template variable to use anywhere.
                                  #Can use:
                                  #  - 'STR'|"STR"|BOOL|NUM|null
                                  #  - operators: () [] ! && || < <= > >= == !=
                                  #     - does type coercion (STR -> BOOL|NUM, BOOL -> 0|1|'BOOL', NUM -> 'NUM', null -> 0|'')
                                  #  - VARR from CONTEXT.**
                                  #     - can use ARR.*...
                                  #     - can use either OBJ.VAR or OBJ['VAR']
                                  #     - VAR must be [:alnum:]-_
                                  #  - one of the FUNC() below
CONTEXT                           #Values that can be used as VARR inside ${{EXPR}}

contains(STR, STR2)->BOOL         #Like STR.includes(), case-insensitive
contains(ARR, VAL)->BOOL          #Like ARR.includes(), case-insensitive
startsWith(STR, STR2)->BOOL       #Like STR.startsWith(), case-insensitive
endsWith(STR, STR2)->BOOL         #Like STR.endsWith(), case-insensitive
format(STR, VAL...)->STR          #Replace {NUM} placeholders in STR. {{}} for escaping {}
join(STR[_ARR], STR2)->STR        #Like [...STR_ARR, STR2].join(' ')
toJson(VAL)->STR                  #Like VAL.toJson()
fromJson(STR)->VAL                #Like JSON.parse()
hashFiles('GLOB')->'HASH'         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ARTIFACTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARTIFACT ==>                      #*.zip archive that can be downloaded either:
                                  #  - in-between jobs of a build
                                  #  - in the UI of the build that uploaded it
                                  #Cannot be downloaded in future builds though.
                                  #Done by the underlying RUNNER (using RUNS.plugin 'upload|download')
                                  #Retention of 3 months (restarted on each new commit for PRs)

actions/upload-artifact           #Action that uploads files as an artifact
                                  #Version 3.1.0
INPUTS.path                       #'FILE|DIR'[_ARR]
                                  #Can use GLOB, ~
INPUTS.name                       #STR: artifact name. Def: 'artifact'
                                  #If already exists, overwrite it
INPUTS.retention-days             #NUM of days
                                  #Min 1, max 90 (def).

actions/download-artifact         #Action that download an artifact files
                                  #Version 3.0.0
INPUTS.path                       #'PATH' (def: '.')
INPUTS.name                       #STR: artifact name (def: all)
OUTPUTS.download-path             #'FILE|DIR'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CACHING ==>                       #Uses internal GitHub actions REST API to cache files as a key-value store
                                  #Scoped to each repository
                                  #  - scoped to branch too, but `master` and parent branch (including in PRs) caches are available too
                                  #  - not scoped to each matrix dimension, so need to namespace KEY with it
                                  #Cache eviction:
                                  #  - rotated on max 5GB per repository, based on atime
                                  #  - also removed after 7 days if not accessed
                                  #Can be accessed by anyone who can create PRs, i.e. should not contain confidential information

CACHE_URL                         #API endpoint
                                  #Is BASE/actions/cache/_apis/artifactcache/caches
                                  #  - BASE is ENVVAR ACTIONS_CACHE_URL|ACTIONS_RUNTIME_URL
                                  #  - Authorization: Bearer BASE64_TOKEN [C] using ENVVAR ACTIONS_RUNTIME_TOKEN
                                  #  - Accept: application/json;api-version=6.0-preview.1 [C]
GET CACHE_URL?keys=KEY,...        #Get|restore cached file information
                                  #Response is OBJ:
                                  #  - cacheKey 'KEY'
                                  #  - archiveLocation 'FILE_PATH': file is located at BASE/actions/cache/FILE_PATH
                                  #  - scope 'USER/REPO'
                                  #  - creationTime 'DATE'
POST CACHE_URL/KEY                #Save cached file
                                  #Can stream with Content-Type: application/content-stream [C]
KEY                               #File's ID.
                                  #On restore, it can be just the prefix
                                  #  - if several, use the last created one
                                  #Cache miss:
                                  #  - when trying to restore a file that is not cached yet
                                  #  - can use additional KEYs to retrieve a fallback instead
                                  #So usually use:
                                  #  - a main save|restore KEY: using namespace prefix + file hash|timestamp
                                  #  - additional restore KEY: using namespace prefix only
                                  #Cannot contain comma

@actions/cache                    #Cache a file|directory to GitHub actions API:
                                  #  - on action start, restore remote cached file|directory to local path
                                  #  - on job end, if cache was missed, save local file|directory to remove cache
                                  #Restoring cache steps:
                                  #  - GET CACHE_URL?keys=INPUTS.key[,INPUTS.restore-keys...]
                                  #  - GET BASE/actions/cache/FILE_PATH
                                  #  - write to TMPCOREDIR/cache.tgz|tzst
                                  #  - extract cache.tgz|tzst to INPUTS.path
                                  #Saving cache steps:
                                  #  - create TMPCOREDIR/cache.tgz|tszt from INPUTS.path
                                  #  - POST CACHE_URL/KEY (stream the body)
                                  #Uses 'tar' binary
                                  #Version 3.0.8
INPUTS.path                       #'PATH' of the FILE|DIR to save|restore. Can start with ~
                                  #Can be several paths, newline-delimited
                                  #Can contain GLOB
                                  #Example: ~/.cache/pip
INPUTS.key                        #Main 'KEY' on save|restore
                                  #Example: '${{matrix.os}}-NAMESPACE-${{hashFiles('GLOB')}}'
INPUTS.restore-keys               #Fallback 'KEY\n...' on restore
                                  #Example: '${{matrix.os}}-NAMESPACE-'
INPUTS.upload-chunk-size          #NUM (in bytes) to divide up chunks while streaming
OUTPUTS.cache-hit                 #'true|false' whether cache miss


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CACHE HELPERS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@actions/tool-cache               #Contains:
                                  #  - helpers to do HTTP download and tar|zip|7z extraction using a standardized temporary directory
                                  #  - helpers to cache files locally using a standardized cache directory
                                  #Version 1.1.2

USERSDIR                          #Is:
                                  #  - Linux: /home
                                  #  - Mac: /Users
                                  #  - Windows: ENVVAR USERPROFILE (or C:\)

CACHEBASEDIR                      #Either:
CONTEXT.runner.tool_cache         #  - ENVVAR RUNNER_TOOL_CACHE (e.g. /opt/hostedtoolcache)
                                  #  - USERS_DIR/actions/cache
CACHEDIR                          #CACHEBASEDIR/NAME/VERSION/ARCH
                                  #  - NAME is any project name
                                  #  - VERSION is normalized with SEMVER.clean() (see its doc)
                                  #  - ARCH def is OS.arch()
                                  #Created by cacheFile|cacheDir() if does not exist
cacheFile('PATH', 'PATH2',        #Copy 'PATH' to CACHEDIR/PATH2
 'NAME', 'VERSION'[, 'ARCH'])     #Create CACHEDIR if does not exist
 ->PROMISE_'CACHEDIR'             #Once done, write an empty file at CACHEDIR.complete
                                  #  - this is checked by find[AllVersions]() to exclude still ongoing copies
cacheDir('DIR',
 'NAME', 'VERSION'[, 'ARCH'])
 ->PROMISE_'CACHEDIR'             #Same with a 'DIR' recursively
findAllVersions('NAME'[, 'ARCH'])
 ->'VERSION'_ARR                  #Find all 'VERSION' from CACHEBASEDIR/NAME/*. Uses sync I/O
find('NAME', 'VERSION_RANGE'
 [', ARCH'])->'CACHEDIR'          #Find the 'CACHEDIR' of a specific NAME+VERSION_RANGE+ARCH. Uses sync I/O

TMPBASEDIR                        #Either:
CONTEXT.runner.temp               #  - ENVVAR RUNNER_TEMP (e.g. /home/runner/work/_temp)
                                  #  - USERS_DIR/actions/temp
TMPCOREDIR                        #TMPBASEDIR/UUIDv4
                                  #Created by downloadTool|extract*() if does not exist
downloadTool('URL')               #Download URL and stream it to TMPCOREDIR
 ->PROMISE_TMPCOREDIR             #Throw HTTPError if status not 200. Throw other ERROR if other issues.
extractTar
 (  'PATH'[, 'TMPCOREDIR'][, STR])  #Extract tar archive to temporary directory, using 'tar' binary
 ->PROMISE_TMPCOREDIR             #STR def is tar flags (def: 'xz')
extractZip('PATH'[, 'PATH2'])
 ->PROMISE_PATH2                  #Same with zip using 'unzip' binary (on Unix) or Powershell Power.IO.Compression.FileSystem (on Windows)
extract7z('PATH'[, 'PATH2']
 [, '7Z_BIN_PATH'])               #Same with 7z using '7z' binary, which is shipped as *.exe with the code but can be '7Z_BIN_PATH' too
 ->PROMISE_PATH2                  #Windows only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REUSABLE WORKFLOW       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.uses                          #'USER/REPO/.github/workflows/FILENAME.yml@TAG'
                                  #Use a reusable workflow
                                  #Cannot be used inside another reusable workflow
JOB.with.INPUT_ID                 #STR. Like STEP.with.INPUT_ID but for reusable workflows.
JOB.secrets.VAR                   #Sets SECRET_ENVVAR
JOB.secrets.inherit               #

WORKFLOW.on.workflow_call         #Declare that WORKFLOW can be used as a reusable workflow
                                  #OPTS:
                                  #  - secrets OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_REF                        #'[USER/REPO][/PATH]@REF'
                                  #Path to DIR with action.yml
                                  #Def USER/REPO: current one
                                  #Def PATH: /
                                  #REF can be:
                                  #  - BRANCH
                                  #  - VERSION (GitHub release): vX (X.*.*) or vX.Y (X.Y.*)
                                  #  - COMMIT
                                  #Only public repository
                                  #If not meant to be published, recommend to put in .github/actions/ACTION_ID
                                  #Can also be 'docker://[HOST/]IMAGE[:TAG]' (public Docker image)
action.yml                        #ACTION.* file

ACTION.name                       #'ACTION_NAME'. Displayed in web UI
ACTION.description                #STR
ACTION.author                     #STR
ACTION.branding                   #BRANDING. Badge shown in GitHub marketplace
                                  #Can preview at https://create-github-action.now.sh
BRANDING.color                    #'white|gray-dark|yellow|blue|green|orange|red|purple'
BRANDING.icon                     #STR (feathers library icon name)

ACTION.runs                       #RUNS. Main command execution
RUNS.using                        #Either:
                                  #  - 'node12|16' (NODE_RUNS): run in child process
                                  #  - 'docker' (DOCKER_RUNS)
                                  #     - only on Linux hosts
                                  #     - slower than 'node12'
                                  #  - 'composite' (SHELL_RUNS): shell commands
NODE_RUNS.main                    #'PATH' to file to execute
NODE_RUNS.pre|post                #'PATH' to file to execute at the start|end of the JOB
                                  #Whether it was successful or not, but can use NODE_RUNS.pre|post-if 'success|failure()' to restrict
NODE_RUNS.pre|post-if             #Like JOB|STEP.if but for NODE_RUNS.pre|post
DOCKER_RUNS.image                 #'PATH', 'docker://[HOST/]IMAGE[:TAG]' or 'USER/REPO' to Dockerfile
SHELL_RUNS.steps                  #STEP_ARR
                                  #Cannot use STEP.uses|with|continue-on-error

RUNS.plugin                       #'PLUGIN'. Action that is done at the RUNNER-level
                                  #Available: 'download|upload' (see below)

@actions/toolkit                  #Monorepo with @actions/core|io|exec|github|tool-cache
@actions/core                     #CORE
                                  #Version 1.2.0
@actions/github                   #GITHUB. Instance of octokit with some helper methods to retrieve ENVVAR GITHUB_* and GitHub event payloads
                                  #Version 2.0.0
@actions/io                       #Filesystem utilities. Prefer alternative packages since they are not as good:
                                  #  - cp|copyFile|cpDirRecursive(...): like CP-FILE|CPY (see their docs)
                                  #  - mv(...): like MV-FILE (see its docs)
                                  #  - rmRF(...): like RIMRAF|DEL (see their docs)
                                  #  - mkdirP(...): like MAKE-DIR (see its docs)
                                  #  - which(...): like NODE-WHICH (see its docs)
                                  #Version 1.0.1
@actions/exec                     #Like EXECA but not as good
                                  #Version 1.0.2
@actions/glob                     #Globbing library

MARKETPLACE ==>                   #Where users search for Actions
                                  #Must publish to Marketplace each GitHub release explicitly through GitHub release UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACTION STATUS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATUS ==>                        #'success' if exit code 0, 'failure' otherwise

CORE.setFailed(STR)               #Sets process.exitCode = 1 + CORE.error(STR)
                                  #Should wrap top-level function with it, using error.message as STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION IPC           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_COMMAND                    #IPC mechanism between ACTION and RUNNER
 ({ATTR: STR,...}[, STR2])        #Printed to stdout as ::ACTION_COMMAND [ATTR=STR],...::[STR2]
                                  #Must percent-encode:
                                  #  - STR|STR2: \r \n
                                  #  - STR: ] ;
                                  #ACTION_COMMAND|ATTR are case-insensitive
                                  #Must use OS-specific newline.
ACTION_COMMAND stop-commands      #Pauses IPC mechanism.
 ('ACTION_COMMAND2')              #Should be done before printing user-supplied string.
                                  #Resume with ACTION_COMMAND2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       ACTION I/O DOCKER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOCKER_RUNS.entrypoint            #'SHELL_COMMAND'. Sets|overrides ACTION's Dockerfile ENTRYPOINT, i.e. main command to run.
DOCKER_RUNS.args                  #STR. Sets|overrides Dockerfile CMD, i.e. arguments to ENTRYPOINT.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ACTION I/O DECLARATIVE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION.inputs.INPUT_ID            #INPUT. ENVVAR used as arguments
                                  #INPUT_ID is case-sensitive when matching STEP.with
                                  #It is passed as ENVVAR INPUT_{INPUT_ID.toUpperCase()}=STR
                                  #INPUT_ID must be [:alnum:]-_
INPUT.required                    #BOOL (def: false)
INPUT.default                     #STR
INPUT.description                 #STR

CONTEXT.inputs.INPUT_ID           #Available with EVENT_NAME workflow_call|workflow_dispatch
                                  #With workflow_dispatch: shown as UI input fields
INPUT.type                        #Only for EVENT_NAME workflow_dispatch
                                  #STR among 'choice|boolean|number|string|environment'
INPUT.choices                     #STR_ARR. Only if INPUT.type 'choice'

CORE.getInput('INPUT_ID'[, OPTS]) #Retrieve ENVVAR INPUT_{INPUT_ID.toUpperCase()}
 ->STR                            #Trims value
                                  #If OPTS.required true (def: false), throw if STR empty string (before trimming)

ACTION.outputs.OUTPUT_ID          #OUTPUT.
                                  #OUTPUT_ID must be [:alnum:]-_ (lowercase-only)
OUTPUT.description                #STR
ACTION_COMMAND set-output
 ({name: 'OUTPUT_ID'}, STR)
CORE.setOutput('OUTPUT_ID', STR)  #Set OUTPUT
CONTEXT.steps.STEP_ID.outputs.VAR #Get OUTPUT of previous STEPs' ACTIONs
CONTEXT.needs.JOB_ID.outputs.VAR  #Can only be used in the following STEPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ACTION I/O ENVVARS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNS.env                          #OBJ of ENVVARs

ENVVAR GITHUB_ENV                 #Newline-separated file containing ENVVAR=VVAL to set in parent process and following STEPs (not current one)
CORE.exportVariable('VAR', 'VAL') #Add to GITHUB_ENV + set process.env.VAR

ENVVAR GITHUB_PATH                #Newline-separted file where each line is a DIR to prepend to PATH ENVVAR
                                  #in parent process and following STEPs (not current one)
CORE.addPath('DIR')               #Add to GITHUB_PATH + set process.env.PATH (not process.env.Path)

ENVVAR GITHUB_STEP_SUMMARY        #'PATH' to a Markdown file shown in summary
CORE.summary.*                    #Helper functions to set GITHUB_STEP_SUMMARY

ACTION_COMMAND save-state
 ('VAR', 'VAL')                   #Set ENVVAR STATE_VAR=VAL. Only within current action
CORE.saveState('VAR', 'VAL')      #Meant for communication between NODE_RUNS.main and NODE_RUNS.post
CORE.getState('VAR')->'VAL'       #Retrieve ENVVAR STATE_VAR ('' if not set)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION LOGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_COMMAND debug|warning|error#Print message
 (OBJ, STR)                       #OBJ (all optional): file 'FILENAME', line NUM, col NUM
CORE.debug|warning|error(STR)     #If debug, only printed if SECRET_ENVVAR ACTIONS_STEP_DEBUG is 'true'

ACTION_COMMAND group('GROUP')
CORE.startGroup('GROUP')          #Start foldable group
ACTION_COMMAND endgroup()
CORE.endGroup()                   #Stop last foldable group
CORE.group
 ('GROUP', FUNC()[->PROMISE])
 ->PROMISE                        #Call ACTION_COMMAND group|endgroup before|after FUNC()

ACTION_COMMAND add-mask(STR)      #Replace any STR in logs by *
CORE.setSecret(STR)               #Meant for confidential values
                                  #If STR is multiline, should be called on each line.

ACTION_COMMAND add-matcher        #Creates GitHub annotations in Action logs, by looking for specific RegExps
 ({}, 'PATH.json')                #For example use the highlight warning|errors (such as linting|validation)
                                  #PATH.json is OBJ: problemMatcher OBJ_ARR:
                                  #  - owner 'NAME': project name
                                  #  - pattern OBJ_ARR:
                                  #     - how to detect and parse log lines to GitHub annotations
                                  #     - when several OBJ, read|parse logs with each of them in order:
                                  #        - create a single GitHub annotation for all of them
                                  #        - if OBJ.loop true, create several annotations, by repeating REGEXP until it fails
                                  #     - OBJ:
                                  #        - regexp 'REGEXP': each NUM below represents a parens group inside REGEXP
                                  #        - message NUM
                                  #        - code NUM: code sample
                                  #        - severity NUM: 'warning'|'error'
                                  #        - file|line|column NUM: error location
                                  #        - loop BOOL (def: false)
ACTION_COMMAND remove-matcher
 ({owner STR})                    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNNER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNNER                            #Underlying server that executes WORKFLOW files.
                                  #By default hosted on GitHub, but can be customized.
                                  #Code at https://github.com/actions/runner

CUSTOM RUNNER ==>                 #Executable provided by GitHub to run WORKFLOWs locally.
                                  #Must enable it and download executable via each GitHub repository Settings UI.
                                  #Background daemon that communicates results to GitHub HTTP API.
                                  #Supports Linux|Mac|OS.
                                  #Should only be used for private repositories, since forks could run arbitrary code to local machine.
                                  #Can setup a proxy with ENVVARs http[s]_proxy|no_proxy (see online doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SETUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@actions/setup-node               #Download Node.js and add it to PATH. Also set npm authToken for publishing.
                                  #Version 3.4.1
INPUTS.node-version               #VERSION|RANGE (see semver) or 'lts/NAME|lts/-NUM|current|node|latest|*' of Node.js to download and prepend to ENVVAR PATH
                                  #Optionally prefixed with 'nodejs '
                                  #RANGE uses latest Node.js version using GET nodejs.org/dist/index.json
                                  #Download 'node' binary from nodejs.org/dist/ and extract to TMPCOREDIR
                                  #Cached to CACHEDIR
                                  #Default: '16'
OUTPUTS.node-version              #'vX.Y.Z'
INPUTS.node-version-file          #Same with a 'FILE' with same content, e.g. .nvmrc
INPUTS.architecture               #'ARCH'[_ARR] (def: 'x64')
INPUTS.check-latest               #BOOL (def: false)
                                  #Always check nodejs.org/dist for new versions, bypassing any cache
INPUTS.registry-url               #'REGISTRY_URL' to publish packages, e.g. 'https://registry.npmjs.org' (see npm)
                                  #Adds npm CONF:
                                  #  - REGISTRY_URL:_authToken '${NODE_AUTH_TOKEN}'
                                  #  - [@SCOPE:]registry REGISTRY_URL
                                  #Must manually set token by:
                                  #  - adding SECRET_ENVVAR NPM_TOKEN
                                  #  - adding WORKFLOW|JOB|STEP|CONTAINER.env.NODE_AUTH_TOKEN '${{secrets.NPM_TOKEN}}'
                                  #Do it by creating a .npmrc:
                                  #  - at ENVVAR RUNNER_TEMP (def: '.')
                                  #  - append to it if already exists
                                  #  - set CONF.userconfig (through ENVVAR NPM_CONFIG_USERCONFIG) to point to it
INPUTS.scope                      #Regitry|npm '@SCOPE'
                                  #Def to:
                                  #  - if REGISTRY_URL 'npm.pkg.github.com' (GitHub packages), GitHub repo owner 'USER'
                                  #  - otherwise, none
INPUTS.always-auth                #BOOL (def: false)
                                  #Sets npm CONF.always-auth true
INPUTS.cache                      #Like @actions/cache but pre-configured.
                                  #Can be nothing (def), 'npm|yarn|pnpm'
INPUTS.cache-dependency-path      #Path to lock file (def: 'package-lock.json' or 'yarn.lock'), for monorepos
OUTPUTS.cache-hit                 #BOOL
