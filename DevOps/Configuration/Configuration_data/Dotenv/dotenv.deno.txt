
          
   DOTENV  
          



VERSION ==>                       #See Deno doc

std/dotenv/mod.ts                 #

DOTENV FORMAT ==>                 #
#COMMENT                          #
VAR=VAL                           #VAL can contain any characters, including = or space
                                  #Trimmed
VAR="VAL"
VAR='VAL'                         #To avoid trimming
VAR=                              #VAL is ""
VAR=$ENVVAR
VAR=${ENVVAR}                    E#Can \-escape $
VAR=${ENVVAR:-DEFAULT}           E#

load([OPTS])->>OBJ               R#Load dotfile as OBJ
OPTS.envPath                      #'PATH'|null (def: './.env')
OPTS.examplePath                  #'PATH'|null (def: './.env.example') to a dotenv file used for validation
                                  #Any ENVVARs defined in it are required
OPTS.defaultsPath                 #'PATH'|null (def: './.env.defaults') to default values
OPTS.export                       #BOOL (def: false). If true, use Deno.env.set(), unless already set
OPTS.allowEmptyValues             #BOOL (def: false)

std/dotenv/load.ts                #Import with side-effect that calls loadSync({ export: true })

parse('DOTENV_CONTENTS'           #If ENVVARs specified, only allow those specific ones.
 [, 'ENVVAR'_ARR])->OBJ           #Use current process value instead otherwise
stringify(OBJ)->'DOTENV_CONTENTS' #
