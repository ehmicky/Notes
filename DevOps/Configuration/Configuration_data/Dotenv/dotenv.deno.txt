
          
   DOTENV  
          



VERSION ==>                       #See Deno doc

DOTENV FORMAT ==>                 #
#COMMENT                          #
VAR=VAL                           #VAL can contain any characters, including = or space
                                  #Trimmed
VAR="VAL"
VAR='VAL'                         #To avoid trimming
VAR=                              #VAL is ""
VAR=$ENVVAR
VAR=${ENVVAR}                    E#Can \-escape $
VAR=${ENVVAR:-DEFAULT}           E#

@std/dotenv/mod
load([OPTS])->>OBJ               R#Load dotfile as OBJ
OPTS.envPath                      #'PATH'|null (def: './.env')
OPTS.export                       #BOOL (def: false). If true, use Deno.env.set(), unless already set

@std/dotenv/load                  #Import with side-effect that calls loadSync({ export: true })

deno bench|compile|eval|install
 |run|repl|serve|test
--env-file[=FILE]                 !#Similar to @std/dotenv/load
                                  #Does not need --allow-read

@std/dotenv/parse
parse('DOTENV_CONTENTS'           #If ENVVARs specified, only allow those specific ones.
 [, 'ENVVAR'_ARR])->OBJ           #Use current process value instead otherwise

@std/dotenv/stringify
stringify(OBJ)->'DOTENV_CONTENTS' #

