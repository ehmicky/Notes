
               
   DENO_DEPLOY  
               



VERSION ==>                       #2023-05-06


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INFRASTRUCTURE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING ==>                       #0$ for free, 10$ for pro

INFRASTRUCTURE ==>                #Runs on AWS Lambda or GCP
                                  #Memory 512MB
ENVVAR DENO_REGION                #AWS region. There are 35 of them. Readonly

REQUESTS COUNT ==>                #Max 1e5/day and 1e3/min (free), or 1$ per 5e5 requests (pro)
DURATION ==>                      #Max 10ms (free) or 50ms (pro) per request
EGRESS ==>                        #100GB/month free. Then 1$/3GB.

SUBHOSTING ==>                    #White-labelling solution for companies
                                  #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT ==>                       #Similar to a repository

ORGANIZATION ==>                  #Group of members

GITHUB APP ==>                    #Must be installed to use GitHub features

ENVVAR ==>                        #Can be set
                                  #Max 8KB

LOGS ==>                          #stdout|stderr for a given run
                                  #Not persisted. Only kept when a client is currently streaming it.
                                  #Max 2KB per line

ANALYTICS ==>                     #Requests count, egress bytes


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REQUESTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB APP ==>                    #Must be installed to use GitHub features

std serve()                       #Must be used to handle REQs
                                  #Cannot use Deno.listenTls|shutdown|serve()
TOP-LEVEL SCOPE ==>               #Is run on start, like AWS Lambda
                                  #Frozen between requests, i.e. can be used to keep state

BroadcastChannel                  #Sends message to all clients
                                  #Max 64KB/s egress per REGION

Deno.Kv                           #Backed by a database instead of local SQLite
                                  #Max 1GB per user
                                  #In the future, will be charged per GB
                                  #Should prefer OPTS.consistency 'eventual', as it is much faster

RESPONSE COMPRESSION ==>          #Automatic providing all of:
                                  #  - Content-Type [S] is compressible (using mime-db)
                                  #  - Accept-Encoding [C]
                                  #  - size > 20 bytes
                                  #  - no Content-Encoding [S]
                                  #  - no Content-Range [S]
                                  #  - no Cache-Control: no-transform [S]
                                  #Either Brotli (preferred) or gzip

NOT SUPPORTED ==>                 #Any --unstable
                                  #Important:
                                  #  - localStorage|sessionStorage
                                  #  - Deno.ChildProcess|Command|Process, Worker
                                  #Less important:
                                  #  - location
                                  #  - Deno.close|read|write|seek|fdatasync|fsync|fstat|ftruncate|futime
                                  #  - onload|beforeunload|onunload
                                  #  - Cache API
                                  #  - Deno.version|osRelease
                                  #  - Deno.[un]refTimer
                                  #  - ABORT_SIGNAL with file operations
                                  #  - Deno.open() OPTS, and readonly
                                  #  - Deno.file() OPTS
                                  #  - FILE_INFO except size|is*
                                  #Not relevant when single file:
                                  #  - Deno.mainModule
                                  #Not relevant when not run locally:
                                  #  - Deno.consoleSize
                                  #  - alert|confirm|prompt
                                  #  - Deno.hostname|networkInterfaces
                                  #  - Deno.osUptime|Deno.loadavg
                                  #  - Deno.uid|gid, Deno.std*
                                  #  - Deno.memoryUsage|systemMemoryInfo
                                  #  - Unix sockets


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEPLOYMENT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPLOYMENT ==>                    #Sets of assets.
                                  #Associated with a URL which runs the main file.
                                  #Max 30/h
ENVVAR DENO_DEPLOYMENT_ID         #'DEPLOYMENT_ID'

PRODUCTION ==>                    #One deployment of a given PROJECT is production. Others are "preview"

ROLLBACK ==>                      #Can rollback to a previous deployment

ASSETS ==>                        #Files which can be read|write by:
                                  #  - imports
                                  #  - file operations
                                  #Uploaded at each deployment
                                  #  - assets checksums are computed, i.e. never uploaded twice unless changed
                                  #Cwd is root
                                  #Max 1000 JavaScript|TypeScript files per deployment, with max 20MB

PROJECT_ID.deno.dev               #Production URL.
                                  #Can use custom domain
                                  #  - including wildcards (pro)
PROJECT_ID--DEPLOYMENT_ID.deno.dev#Preview URL
PROJECT_ID--BRANCH.deno.dev       #Git branch URL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPLOY API ==>                    #Not documented yet
                                  #Does CRUD on PROJECT|deployment, and stream logs

ENVVAR DEPLOY_API_ENDPOINT        #API ENDPOINT (def: 'https://dash.deno.com')
Bearer: ACCESS_TOKEN [C]          #Generated from the UI

dash.deno.com                     #Web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deployctl                    WRNUE#CLI for the Deploy API
                                  #Version 1.7.0
--project=PROJECT_ID              #
ENVVAR DENO_DEPLOY_TOKEN
--token=ACCESS_TOKEN              #

deployctl deploy UPATH            #Deploy. UPATH is main file
--prod                            #Make it production deployment (def: false)
--no-static                       #Unless specified, upload ./** as assets
--include|exclude=GLOB,...        #From assets
--import-map=IMPORT_MAP           #
--dry-run                         #

deployctl logs                    #Print logs, in streaming mode
--deployment=DEPLOYMENT_ID        #Def: latest deployment
--prod                            #Use product deployment


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         GITHUB ACTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


denoland/deployctl                #GitHub action running same logic as deployctl deploy
                                  #Requires JOB.permissions.id-token 'write', contents 'read'
                                  #Version: same as deployctl

INPUTS.entrypoint                 #'UPATH'
INPUTS.root                       #'DIR' (def: '.')
INPUTS.project
INPUTS.import-map                 #Like --*

OUTPUTS.deployment-id             #DEPLOYMENT_ID
OUTPUTS.url                       #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CI               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CI ==>                            #Deploy on GitHub push
                                  #Main branch is production, others are previews
                                  #Uploads all files as assets
                                  #  - no build step
                                  #No IMPORT_MAP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PLAYGROUND           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLAYGROUND ==>                    #Deploy and edit a single file through a web editor
                                  #Can convert to GitHub repo
                                  #Can be made public|private
                                  #Can format on save
