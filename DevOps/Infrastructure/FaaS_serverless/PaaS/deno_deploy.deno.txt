
               
   DENO_DEPLOY  
               



VERSION ==>                       #2023-05-06

INFRASTRUCTURE ==>                #Runs on AWS Lambda. 32 regions

NOT SUPPORTED ==>                 #Any --unstable
                                  #Important:
                                  #  - localStorage|sessionStorage
                                  #  - Deno.ChildProcess|Command|Process, Worker
                                  #Less important:
                                  #  - location
                                  #  - Deno.close|read|write|seek|fdatasync|fsync|fstat|ftruncate|futime
                                  #  - onload|beforeunload|onunload
                                  #  - Cache API
                                  #  - Deno.version|osRelease
                                  #  - Deno.[un]refTimer
                                  #  - ABORT_SIGNAL with file operations
                                  #  - Deno.open() OPTS, and readonly
                                  #  - Deno.file() OPTS
                                  #  - FILE_INFO except size|is*
                                  #Not relevant when single file:
                                  #  - Deno.mainModule
                                  #Not relevant when not run locally:
                                  #  - Deno.consoleSize
                                  #  - alert|confirm|prompt
                                  #  - Deno.hostname|networkInterfaces
                                  #  - Deno.osUptime|Deno.loadavg
                                  #  - Deno.uid|gid, Deno.std*
                                  #  - Deno.memoryUsage|systemMemoryInfo
                                  #  - Unix sockets
IMPORT_MAP ==>                    #Only with deployctl

Deno.serve()                      #Must be used to receive request information
                                  #Cannot use Deno.listen[Tls]|shutdown|serveHttp()

BroadcastChannel                  #Sends message to all clients
                                  #Persisted for a little while???

Deno.Kv                           #Backed by a database instead of local SQLite
                                  #Max 1GB per user
                                  #Should prefer OPTS.consistency 'eventual', as it is much faster

RESPONSE COMPRESSION ==>          #Automatic providing all of:
                                  #  - Content-Type [S] is compressible (using mime-db)
                                  #  - Accept-Encoding [C]
                                  #  - size > 20 bytes
                                  #  - no Content-Encoding [S]
                                  #  - no Content-Range [S]
                                  #  - no Cache-Control: no-transform [S]
                                  #Either Brotli (preferred) or gzip

LIMITS ==>                        #Max 10ms per request

dash.deno.com                     #Web UI

GITHUB APP ==>                    #Must be installed to use GitHub features

PROJECT ==>                       #Similar to a repository

DEPLOYMENT ==>                    #Sets of assets.
                                  #Associated with a URL which runs the main file.
PRODUCTION ==>                    #One deployment of a given project is production, i.e. has a URL.
                                  #Others are "preview"
ROLLBACK ==>                      #Can rollback to a previous deployment

DOMAIN NAME ==>                   #PROJECT_ID.deno.dev, or custom domain

ENVVAR ==>                        #Can be set

LOGS ==>                          #stdout|stderr for a given run. Can be streamed.

ANALYTICS ==>                     #Requests count, egress bytes

ORGANIZATION ==>                  #Group of members

ASSETS ==>                        #Files which can be read|write by file operations.
                                  #Uploaded at each deployment
                                  #  - assets checksums are computed, i.e. never uploaded twice unless changed
                                  #Cwd is root.

DEPLOY API ==>                    #Not documented yet
                                  #Does CRUD on PROJECT|deployment, and stream logs
ENVVAR DEPLOY_API_ENDPOINT        #API ENDPOINT (def: 'https://dash.deno.com')
Bearer: ACCESS_TOKEN [C]          #Generated from the UI

deployctl                    WRNUE#CLI for the Deploy API
                                  #Version 1.5.0
--project=PROJECT_ID              #
ENVVAR DENO_DEPLOY_TOKEN
--token=ACCESS_TOKEN              #

deployctl deploy UPATH            #Deploy. UPATH is main file
--prod                            #Make it production deployment (def: false)
--no-static                       #Unless specified, upload ./** as assets
--include|exclude=GLOB,...        #From assets
--import-map=IMPORT_MAP           #
--dry-run                         #

deployctl logs                    #Print logs, in streaming mode
--deployment=DEPLOYMENT_ID        #Def: latest deployment
--prod                            #Use product deployment

denoland/deployctl                #GitHub action running same logic as deployctl deploy
                                  #Requires JOB.permissions.id-token 'write', contents 'read'
                                  #Version: same as deployctl
INPUTS.entrypoint                 #'UPATH'
INPUTS.root                       #'DIR' (def: '.')
INPUTS.project
INPUTS.import-map                 #Like --*
OUTPUTS.deployment-id             #DEPLOYMENT_ID
OUTPUTS.url                       #'URL'

CI ==>                            #Deploy on GitHub push
                                  #Main branch is production, others are previews
                                  #Uploads all files as assets
                                  #  - no build step

PLAYGROUND ==>                    #Deploy and edit a single file through a web editor
                                  #Can convert to GitHub repo
                                  #Can be made public|private
                                  #Can format on save
