
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POWERTOOLS_LAMBDA_BATCH   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See AWS Lambda docs
                                  #Package '@aws-lambda-powertools/batch'

GOAL ==>                          #Helper for Lambda FUNCTIONs processing EVENT_SOURCEs
                                  #Only for "partial batches", i.e. with EVENT_SOURCE.FunctionResponseTypes ['ReportBatchItemFailures']

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

processPartialResponse[Sync]      #Call PFUNC on each REQ.Records RECORD_ARR
 (REQ, PFUNC, PROC[, OPTS])       #REQ|RES is from Lambda EVENT_SOURCE's HANDLER (see its doc)
 ->[>]RES                         #RES.batchItemFailures is automatically computed

FUNC(RECORD, COBJ)->[>]SVAL       #PFUNC
                                  #To make a RECORD fail: throw ERROR
OPTS.context                      #COBJ (def: none)
                                  #Usually meant for Lambda NCONTEXT, but could be anything

new BatchProcessor[Sync]('TYPE')  #PROC
                                  #'TYPE' is 'SQS', 'KinesisDataStreams' or 'DynamoDBStreams'

OPTS.processInParallel            #BOOL (def: true)
                                  #Whether to process RECORDs sequentially or in parallel
                                  #If sync, always sequential

OPTS.throwOnFullBatchFailure      #BOOL. If true (def):
                                  #  - if every RECORD fails
                                  #     - as opposed to only some of them
                                  #  - then throw a FullBatchFailureError ERROR
                                  #     - has ERROR.recordErrors (same as PROC.errors)
                                  #If false, never throws regardless of RECORD failures

                                  ┌─────────┐
                                  │   SQS   │
                                  └─────────┘

new SqsFifoPartialProcessor()     #Like new BatchProcessorSync('SQS'), except if any RECORD fails:
                                  #  - stops iterating
                                  #  - fails any remaining RECORD with a SqsFifoShortCircuitError ERROR
                                  #Only for FIFO QUEUEs
OPTS.skipGroupOnError             #BOOL (def: false). On RECORD failure:
                                  #  - do not fail all remaining RECORDs
                                  #  - but only the ones with the same RECORD.attributes.MessageGroupId
                                  #Also ERROR is SqsFifoMessageGroupShortCircuitError instead

                                  ┌────────────┐
                                  │   CUSTOM   │
                                  └────────────┘

CUSTOM PROC ==>                   #Must inherit from BasePartialProcessor
                                  #Must implement following methods

PROC.prepare()                    #Called before .processRecord[Sync]()

PROC.processRecord[Sync](RECORD)  #Called on each RECORD
 ->[>]ARR                         #Must call PROC.handler and pass OPTS.context
                                  #Must return either:
                                  #  - PROC.successHandler(RECORD, SVAL)
                                  #  - PROC.failureHandler(RECORD, ERROR)

PROC.clean()                      #Called after .processRecord[Sync]()
                                  #Must re-implement logic for OPTS.throwOnFullBatchFailure

PROC.response()->RES              #Called after PROC.clean()

FIELDS ==>                        #Can use following fields
PROC.records|handler|options      #RECORD_ARR|PFUNC|OPTS passed to processPartialResponse[Sync]()
PROC.successMessages              #SVAL_ARR for RECORDs that passed
PROC.errors|failureMessages       #ERROR_ARR|RECORD_ARR for RECORDs that failed

ADVANCED CUSTOMIZATION ==>        #To either:
                                  #  - customize how serial|parallel sequencing is happening, e.g. throttled parallelization
                                  #  - run code for each successful|failed RECORD
                                  #     - including ones failed automatically by SqsFifoPartialProcessor
                                  #Check source code of SqsFifoPartialProcessor, seeing how PROC.process[Sync]() can be re-implemented
