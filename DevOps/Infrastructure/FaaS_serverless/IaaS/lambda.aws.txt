
                                  ┏━━━━━━━━━━━━┓
                                  ┃   LAMBDA   ┃
                                  ┗━━━━━━━━━━━━┛

VERSION ==>                       #2024-10-31

SUMMARY ==>                       #Functions: versions, aliases, alias routing, singleton
                                  #Main code: zip (upload|S3) or container, sign, esbuild
                                  #Additional code: layer, internal|external extension
                                  #Runtimes: versions|upgrades, custom, options, Node|Python|Java|Ruby|DotNet, Custom|Deno
                                  #Environment: memory, CPU, envvar, /tmp, EFS, VPC, logging, insights
                                  #Invoke: instance, sync|async, dry, streaming, URL, destination
                                  #Event source: batch size|duration, filters, concurrency
                                  #Errors: timeout, retries, dead letter, tracing, recursion
                                  #Concurrency: total, reserved, provisioned

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

AWS_DOMAIN                        #'amazonaws.com' or 'api.aws'

FORMAT ==>                        #Request: REST methods|routes, JSON
                                  #Response: JSON
                                  #Paths all start with ACTION-specific version /YYYY-MM-DD

REQ_ID                            #x-amzn-request-id [S]

PAGINATION ==>                    #Req: Marker STR, MaxItems STR (def|max: 1e4)
                                  #Res: NextMarker STR

THROTTLING ==>                    #Max 15 requests per second, except:
                                  #  - GetFunction(): 100 requests per second
                                  #  - Invoke(): no limits

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

Lambda_FullAccess                 #AWS managed POLICY. Grants all Lambda PACTIONs
Lambda_ReadOnlyAccess             #Same but readonly

                                  ┌─────────────┐
                                  │   PRICING   │
                                  └─────────────┘

SUMMARY ==>                       #Most of the price is proportional to:
                                  #  - total duration of INVOCATIONs, especially if INVOCATION duration >15ms
                                  #  - number of INVOCATIONs, especially if INVOCATION duration <15ms
                                  #  - MemorySize
                                  #Free: 1 INVOCATION per 3s, with 400ms INVOCATION duration, MemorySize 1GB
                                  #Provisioned CONCURRENCY:
                                  #  - cheap for FUNC_INSTANCEs run >60% of the time
                                  #  - otherwise, quite expensive
                                  #/tmp is cheap
                                  #Use ARM because cheaper

INVOCATIONS ==>                   #1$ per 5e6 INVOCATIONs
                                  #Free: first 1e6 INVOCATIONs, per month (~1 per 3s)

DURATION ==>                      #Amount of time spent running FUNCTION|extensions
                                  #  - includes initialization, INVOCATIONs and shutdown
                                  #  - does not include time frozen, i.e. between INVOCATIONs
                                  #  - each INVOCATION's duration is rounded up to 1ms
                                  #1$ per 7.5e3 seconds (~21h) with MemorySize 1GB
                                  #  - price is proportional to duration + MemorySize
                                  #Free: 4e5 seconds (~4.5 days) with MemorySize 1GB, per month
                                  #I.e. same price as INVOCATION cost if:
                                  #  - 400ms per INVOCATION, with 1GB (in free tier)
                                  #  - 15ms per INVOCATION, with 1GB (out of free tier)
                                  #25% more expensive with x86_64
                                  #High duration discount:
                                  #  - 10% cheaper over 7.5e9 seconds, with MemorySize 1GB, per month (~3000 FUNC_INSTANCEs fulltime)
                                  #  - 20% cheaper over 11.25e9 seconds, with MemorySize 1GB, per month (~7000 FUNC_INSTANCEs fulltime)

PROVISIONED CONCURRENCY ==>       #9$ per month, per provisioned CONCURRENCY, with MemorySize 1GB
                                  #Price is proportional to:
                                  #  - MemorySize
                                  #  - provisioned CONCURRENCY
                                  #  - percentage of time it was enabled
                                  #     - but not proportional to INVOCATIONs duration
                                  #Impacts INVOCATIONs duration price:
                                  #  - 40% cheaper
                                  #  - no free tier, nor high duration discount
                                  #Free: none
                                  #Provisioning the CONCURRENCY of a FUNC_INSTANCE can be less|more expensive,
                                  #depending on how much it runs (excuding free tier):
                                  #  - 100% of the time: 15% cheaper
                                  #  - 60% of the time: same price
                                  #  - 30% of the time: 40% more expensive
                                  #  - 10% of the time: 2x more expensive
                                  #  - 1% of the time: 25x more expensive
                                  #I.e. possible scenarios for a given FUNC_INSTANCE
                                  #  - high-utilization: cheaper
                                  #  - low-utilization: high fixed cost, in exchange for high latency

/TMP ==>                          #1$ per 3e7 seconds (~1 year) with EphemeralStorage.Size 1GB
                                  #Price is proportional to Size + total duration (for all INVOCATIONs)
                                  #I.e. when MemorySize === EphemeralStorage.Size, /tmp is 4000 times cheaper than RAM
                                  #Free: none

CODE STORAGE ==>                  #Free
FUNCTION VERSIONS COUNT ==>       #Free

STREAMING DATA TRANSFER ==>       #1$/125GB. Free: 6MB

OTHER DATA TRANSFER ==>           #Same as EC2

                                  ┌─────────────┐
                                  │   METRICS   │
                                  └─────────────┘

DVAR FunctionName                 #'FUNCTION'. Available with all CloudWatch METRICs
DVAR Resource                     #'FUNCTION:QUALIFIER'. Available with all CloudWatch METRICs

Function.metricAll
 ('METRIC'[, CMETRIC_OPTS])       #Like new Metric() but sets CMETRIC_OPTS.namespace|metricName
 ->CMETRIC                        #Not with CFUNC_VERSION|CALIAS
Function.metricAllMETRIC
 ([CMETRIC_OPTS])->CMETRIC        #Same but also sets CMETRIC_OPTS.statistic

CFACADE.monitorLambda
 (CXMONITORING_OPTS)              #See cdk-monitoring-constructs doc
CXMONITORING_OPTS.lambdaFunction  #ICANYFUNC

                                  ┌──────────────────────┐
                                  │   ACCOUNT SETTINGS   │
                                  └──────────────────────┘

ACCOUNT_SETTINGS                  #AWS account settings for Lambda
                                  #Not logged by CloudTrail
ACCOUNT_SETTINGS.AccountLimit     #ACCOUNT_LIMIT. Maximum limits
ACCOUNT_SETTINGS.AccountUsage     #ACCOUNT_USAGE. Current usage
ACCOUNT_USAGE.FunctionCount       #NUM. Number of FUNCTIONs

                                  ┌──────────────────────────┐
                                  │   ACCOUNT SETTINGS API   │
                                  └──────────────────────────┘

GET /account-settings             #Req: empty
GetAccountSettings()              #Res: ACCOUNT_SETTINGS

                                  ┌──────────────┐
                                  │   FUNCTION   │
                                  └──────────────┘

FUNCTION                          #AWS Lambda function, including all its FUNC_VERSIONs
FUNCTION.Configuration            #FUNC_VERSION
FUNC_VERSION                      #FUNCTION's specific version
                                  #WAIT (GetFunction(), every 1s, timeout 20s) FunctionExists: when it exists
NEW_FUNC_VERSION                  #Like FUNC_VERSION, but when being created.
                                  #  - no FunctionArn, MasterArn, CodeSha256, Version
                                  #  - no CodeSize, LastModified, LastUpdateStatus*, State*, *.Error
                                  #  - no RuntimVersionConfig, Signing*, SnapStart.OptimizationStatus, VpcConfig.VpcId
                                  #  - Layers LAYER_VERSION_SUMMARY_ARR -> 'LAYER_VERSION_ARN'_ARR
                                  #Also some additional fields, documented here

FUNC_VERSION.LastModified         #'DATE'
FUNC_VERSION.Description          #STR

FUNC_VERSION.State                #STR, among:
                                  #  - 'Pending': just created, initializing VPC|EFS|...
                                  #  - 'Failed': creation failed
                                  #  - 'Active'
                                  #  - 'Inactive':
                                  #     - idle for a few weeks
                                  #     - next INVOCATION fails, but sets State to 'Pending'
                                  #WAIT (GetFunction(), every 1s, timeout 5m) FunctionActiveV2: when 'Active'
FUNC_VERSION.StateReason          #STR
FUNC_VERSION.StateReasonCode      #STR

FUNC_VERSION.LastUpdateStatus     #STR, among:
                                  #  - 'InProgress': just updated
                                  #  - 'Successful': last update succeeded
                                  #  - 'Failed': last update failed
                                  #WAIT (GetFunction(), every 1s, timeout 5m) FunctionUpdatedV2: when 'Successful'
FUNC_VERSION
 .LastUpdateStatusReason          #STR
FUNC_VERSION
 .LastUpdateStatusReasonCode      #STR

                                  ┌──────────────────┐
                                  │   FUNCTION API   │
                                  └──────────────────┘

POST /functions                   #Req: NEW_FUNC_VERSION
CreateFunction()                  #  - no RevisionId
                                  #  - also Tags
                                  #Res: FUNC_VERSION
PUT /functions/SHORT_FUNC_ARN     #Req: NEW_FUNC_VERSION
 /configuration                   #  - no Architectures, PackageType, CodeSigningConfigArn, Publish, Code
UpdateFunctionConfiguration()     #Res: FUNC_VERSION
PUT /functions/SHORT_FUNC_ARN     #Req: NEW_FUNC_CODE
 /code                            #  - also RevisionId|Architectures: like FUNC_VERSION
UpdateFunctionCode()              #  - also Publish: like NEW_FUNC_VERSION.*
                                  #  - DryRun BOOL (def: false)
                                  #Res: FUNC_VERSION
GET /functions
 /SHORT_FUNC_VERSION_ARN
 /configuration                   #Req: empty
GetFunctionConfiguration()        #Res: FUNC_VERSION
GET /functions
 /SHORT_FUNC_VERSION_ARN          #Req: empty
GetFunction()                     #Res: FUNCTION
GET /functions                    #Req:
ListFunctions()                   #  - FunctionVersion 'ALL': all FUNC_VERSIONs instead of only latest
                                  #  - MasterRegion STR: AWS region of FUNC_VERSION.MasterArn
                                  #Res: Functions FUNC_VERSION_ARR
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_VERSION
 /versions                        #  - only FunctionName
ListVersionsByFunction()          #Res: Versions FUNC_VERSION_ARR
DELETE /functions                 #Req: empty
 /SHORT_FUNC_VERSION_ARN          #Res: empty
DeleteFunction()                  #Cannot use an ALIAS_ARN
                                  #If not specifying a VERSION_NUM, deletes FUNCTION + all FUNC_VERSIONs

                                  ┌──────────────────┐
                                  │   FUNCTION CLI   │
                                  └──────────────────┘

CLI wizard 'new-function'         #For CreateFunction()

                                  ┌──────────────────┐
                                  │   FUNCTION IAC   │
                                  └──────────────────┘

AWS::Lambda::Function             #Represents FUNCTION + $LATEST FUNC_VERSION
AWS::Lambda::Function|Version     #Includes RESPROPs: Description

[I]CANYFUNC                       #Base CKRESOURCE inherited by CFUNCTION|CFUNC_VERSION|CALIAS
                                  #I.e. FUNCTION + FUNC_VERSION, $LATEST or not
                                  #In code, called `IFunction` (ICANYFUNC), `FunctionBase` (CANYFUNC)

new Function(...CARGS, OPTS)      #CFUNCTION. CKRESOURCE wrapping FUNCTION + $LATEST FUNC_VERSION
                                  #Inherits CANYFUNC
Function.fromFunctionName
 (...CARGS, 'FUNCTION')
 ->ICFUNCTION                     #
Function.fromFunctionArn
 (...CARGS, FUNCTION_ARN)
 ->ICFUNCTION                     #
Function.fromFunctionAttributes
 (...CARGS, ICFUNCTION_OPTS)
 ->ICFUNCTION                     #
ICFUNCTION_OPTS.functionArn       #'FUNCTION_ARN'
CFUNCTION_OPTS.description        #FUNC_VERSION.*

                                  ┌──────────────────────┐
                                  │   FUNCTION TOOLKIT   │
                                  └──────────────────────┘

DELETE FUNCTION ==>               #Can be done from "Explorer"

                                  ┌────────────────────────────┐
                                  │   FUNCTION SINGLETON IAC   │
                                  └────────────────────────────┘

new SingletonLambda(...CARGS,OPTS)#CSINGLETON_FUNC. FUNCTION that is a singleton for current CSTACK
                                  #I.e. if already exists, re-use it instead of creating it
                                  #Wraps an underlying CFUNCTION
                                  #  - can use all CFUNCTION[_OPTS].*
                                  #     - except CFUNCTION.deadLetter*|timeout|invalidateVersionBasedOn()|addAlias()
                                  #  - i.e. can be used as if it was a CFUNCTION

OPTS.uuid                         #STR. Machine-friendly ID, used for uniqueness
OPTS.lambdaPurpose                #STR (def: 'SingletonLambda'). Human-friendly ID, prepended to OPTS.uuid, i.e. also used for uniqueness

ICANYFUNC.permissionsNode         #Must be used instead of ICANYFUNC.node, so it works with CSINGLETON_FUNC
CSINGLETON_FUNC
 .addDependency|addMetadata(...)  #Must be used instead of CFUNCTION.node.addDependency|addMetadata(...), so it works with CSINGLETON_FUNC
CSINGLETON_FUNC
 .dependOn(CONSTRUCT)             #Inverse of addDependency()

                                  ┌─────────────────────┐
                                  │   FUNCTION PULUMI   │
                                  └─────────────────────┘

NEW_FUNC_VERSION                  #FUNCTION|[NEW_]FUNC_VERSION are merged
                                  #Can use skipDestroy

                                  ┌─────────────────┐
                                  │   IDENTIFIERS   │
                                  └─────────────────┘

FUNC_VERSION.FunctionArn          #FUNC_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION'
SHORT_FUNC_ARN                    #'[[arn:aws:lambda:REGION:]ACCOUNT_ID:function:]FUNCTION'
FUNC_VERSION.FunctionName         #'FUNCTION'
ENVVAR AWS_LAMBDA_FUNCTION_NAME   #'FUNCTION'

QUALIFIER                         #'VERSION_NUM|ALIAS'
[SHORT_]FUNC_VERSION_ARN          #'[SHORT_]FUNC_ARN[:QUALIFIER]'
                                  #"Qualified|unqualified ARN": whether QUALIFIER is used
                                  #When [SHORT_]FUNC_VERSION_ARN is in URL path, QUALIFIER can always be specified either:
                                  #  - as ':QUALIFIER' suffix to the ARN
                                  #  - as ?Qualifier query parameter
                                  #Def QUALIFIER: '$LATEST'

FUNC_VERSION.RevisionId           #'REVISION_ID'. Changes each time a specific FUNC_VERSION|ALIAS|PERMISSION is updated
                                  #Update call fails if not matching
                                  #I.e. can fetch it, then make update call, which fails if there was a concurrent update in-between
FUNC_VERSION.CodeSha256           #STR. SHA256 checksum
                                  #Can be used with a similar purpose

                                  ┌─────────────────────┐
                                  │   IDENTIFIERS IAC   │
                                  └─────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: FunctionName
                                  #Includes RESATTRs: Arn
AWS::Lambda::Version              #Includes RESPROPs: CodeSha256

ICANYFUNC.functionArn             #FUNC_VERSION_ARN
ICANYFUNC.functionName
ICFUNCTION_OPTS.functionName      #'FUNCTION'
CFUNC_VERSION_OPTS.codeSha256     #FUNC_VERSION.*

                                  ┌─────────────────┐
                                  │   LAMBDA@EDGE   │
                                  └─────────────────┘

FUNC_VERSION.MasterArn            #Main FUNC_VERSION_ARN
                                  #Cannot use VERSION_NUM '$LATEST'
                                  #Cannot use FUNC_VERSION.Environment.Variables

                                  ┌─────────────────────┐
                                  │   LAMBDA@EDGE IAC   │
                                  └─────────────────────┘

ICFUNC_VERSION.edgeArn            #FUNC_VERSION_ARN. FUNC_VERSION.MasterArn
CFUNC_VERSION.edgeArn             #Same but as a STR_TK
ENV_OPTS.removeInEdge             #BOOL (def: false). Must be true when using Lambda@Edge
                                  #  - which is detected based on whether CFUNC_VERSION.edgeArn is accessed
                                  #This ensures ENVVAR is not passed

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

NEW_FUNC_VERSION.Publish          #BOOL (def: false)
                                  #Whether should also call PublishVersion()
                                  #WAIT (GetFunctionConfiguration(), every 5s, timeout 26m) PublishedVersionActive: when published

FUNC_VERSION                      #Created by PublishVersion() (which is similar to `git commit`)

FUNC_VERSION.Version              #VERSION_NUM. Automatically incremented by PublishVersion(), starting at 1
                                  #Similar to a git commit `hash`
ENVVAR AWS_LAMBDA_FUNCTION_VERSION#'NUM'

$LATEST                           #Special VERSION_NUM
                                  #Similar to git `HEAD`
                                  #Default VERSION_NUM of FUNC_VERSION-specific entities|ACTIONs
                                  #New FUNC_VERSIONs are copied from $LATEST during PublishVersion()
                                  #Always exists, including after CreateFunction() or PublishVersion()
                                  #UpdateFunction*() always target $LATEST
                                  #  - i.e. once published, FUNC_VERSION.* is read-only
                                  #However other FUNC_VERSION-specific entities can still be updated for any given VERSION_NUM
                                  #  - e.g. RUNTIME_MGMT, EVENT_INVOKE, etc.

FUNCTION.*                        #Configuration that applies to all FUNC_VERSIONs
                                  #As opposed to FUNC_VERSION.*, which is FUNC_VERSION-specific
                                  #Some entities are FUNCTION-specific, i.e. URL uses [SHORT_]FUNC_ARN
                                  #Others are FUNC_VERSION-specific, i.e. URL uses [SHORT_]FUNC_VERSION_ARN

                                  ┌─────────────────┐
                                  │   VERSION API   │
                                  └─────────────────┘

POST /functions/SHORT_FUNC_ARN    #Req: FUNC_VERSION
 /versions                        #  - only RevisionId, CodeSha256, Description
PublishVersion()                  #Res: FUNC_VERSION
                                  #Not logged by CloudTrail

                                  ┌─────────────────┐
                                  │   VERSION IAC   │
                                  └─────────────────┘

AWS::Lambda::Function
new Function(...CARGS, OPTS)      #Represents FUNCTION + $LATEST FUNC_VERSION (not a specific VERSION_NUM)

AWS::Lambda::Version              #Represents a FUNC_VERSION with a specific VERSION_NUM (not $LATEST)
                                  #Each create|replace calls PublishVersion()
                                  #  - i.e. usually trigger replaces by either:
                                  #     - setting RESPROP CodeSha256: published on CODE change
                                  #     - putting VERSION_NUM in RESPROP Description: published manually
                                  #RESPROPs: FunctionName
                                  #RESATTRs: FunctionArn, Version
                                  #Cannot update (replace only)

new Version(...CARGS, OPTS)       #CFUNC_VERSION. CKRESOURCE wrapping FUNC_VERSION
                                  #Not for $LATEST (except when using ICANYFUNC.latestVersion)
                                  #Inherits CANYFUNC
Version.fromVersionArn
 (...CARGS, 'CFUNC_VERSION_ARN')
 ->ICFUNC_VERSION                 #
Version.fromVersionAttributes
 (...CARGS, OPTS)->ICFUNC_VERSION #OPTS: version 'VERSION_NUM', lambda CFUNCTION

ICFUNC_VERSION.functionArn        #FUNC_VERSION_ARN
ICFUNC_VERSION.version            #'VERSION_NUM'_CSATTR. FUNC_VERSION.Version
                                  #Like AWS::CloudFormation::Version: incremented on RESPROP changes
ICFUNC_VERSION.qualifier          #Same except undefined with ICANYFUNC.latestVersion
ICFUNC_VERSION.functionName       #'FUNCTION:VERSION_NUM'
OPTS|ICFUNC_VERSION.lambda        #ICFUNCTION

CFUNC_VERSION_OPTS.description    #FUNC_VERSION.*
CFUNC_VERSION_OPTS.removalPolicy  #REMOVAL_POLICY (def: destroy)

ICANYFUNC.latestVersion           #CFUNC_VERSION with VERSION_NUM '$LATEST'
                                  #Does not provision anything, just forward to the underlying CFUNCTION

CFUNCTION.currentVersion          #CFUNC_VERSION which VERSION_NUM is incremented every time any FUNCTION RESPROP changes
                                  #Does so by appending FUNC_VERSION_LID with 'CURRENT_HASH' (hash of FUNCTION RESPROPs)
                                  #Not created unless CFUNCTION.currentVersion accessed
                                  #I.e. helper over `new Version()`, automatically handling publishing new FUNC_VERSIONs
CFUNCTION_OPTS
 .currentVersionOptions           #CFUNC_VERSION_OPTS used with CFUNCTION.currentVersion
Function.classifyVersionProperty  #Add|remove RESPROP to CURRENT_HASH, i.e. which one should publish new FUNC_VERSIONs
 ('RESPROP', BOOL)                #Def: all RESPROPs are included
                                  #  - except non-FUNC_VERSION-specific RESPROPs: Tags, ReservedConcurrentExecutions, CodeSigningConfigArn
CFUNCTION                         #Add a direct value to CURRENT_HASH, i.e. any change to it would publish a new FUNC_VERSION
 .invalidateVersionBasedOn(STR)   #Meant for FUNCTION changes that are not in its RESPROPs, e.g. value of a SSM PARAM
                                  #Can also be done for code change, since FUNC_CODE mostly contains URIs, not contents, except:
                                  #  - Code.fromInline(): since it uses NEW_FUNC_CODE.ZipFile, which is contents
                                  #  - Code.fromAsset(): since NEW_FUNC_CODE.S3Key includes 'FILE_HASH'
                                  #  - Code.fromBucket|fromCfnParameters(): providing 'OBJECT' includes 'FILE_HASH'
                                  #  - Code.fromDockerBuild(): since NEW_FUNC_CODE.imageUri includes 'IMAGE_TAG', which is updated when 'IMAGE_HASH' changes
FFLAG @aws-cdk/aws-lambda:
 recognizeLayerVersion            #If true (recommended): add any LAYER (and its RESPROPs) to CURRENT_HASH
FFLAG @aws-cdk/aws-lambda:        #If true (recommended): only consider known FUNCTION RESPROPs
 recognizeVersionProps            #Must set to false if using RESPROPs not known to CDK

                                  ┌─────────────────────┐
                                  │   VERSION METRICS   │
                                  └─────────────────────┘

DVAR ExecutedVersion              #VERSION_NUM. Available with all CloudWatch METRICs

                                  ┌───────────┐
                                  │   ALIAS   │
                                  └───────────┘

ALIAS                             #'ALIAS' pointing to a FUNC_VERSION
                                  #Can change its target, similar to a git tag
                                  #Not logged by CloudTrail
ALIAS.AliasArn                    #ALIAS_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION:ALIAS'
ALIAS.Name                        #'ALIAS'
ALIAS.FunctionName                #SHORT_FUNC_ARN
ALIAS.FunctionVersion             #'VERSION_NUM' (required)
ALIAS.RevisionId                  #'REVISION_ID'
ALIAS.Description                 #STR

ALIAS.RoutingConfig               #Route some traffic to different FUNC_VERSIONs
 .AdditionalVersionWeights        #  - otherwise, route the rest of the traffic to current ALIAS
                                  #  - max 2 FUNC_VERSIONs, i.e. meant for transitioning between 2 FUNC_VERSIONs
                                  #OBJ:
                                  #  - key is 'FUNC_VERSION'
                                  #  - value is NUM from 0 to 1 (percentage)
                                  #FUNC_VERSIONs must:
                                  #  - have same Role|DeadLetterConfig as ALIAS
                                  #  - be published
                                  #  - not be '$LATEST'

                                  ┌───────────────┐
                                  │   ALIAS API   │
                                  └───────────────┘

POST /functions/SHORT_FUNC_ARN    #Req: ALIAS
 /aliases                         #  - no AliasArn, RevisionId
CreateAlias()                     #Res: ALIAS
PUT /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases/ALIAS                   #  - no AliasArn
UpdateAlias()                     #Res: ALIAS
GET /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases/ALIAS                   #  - only Name
GetAlias()                        #Res: ALIAS
GET /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases                         #  - only FunctionVersion (def: any)
ListAliases()                     #Res: Aliases ALIAS_ARR
DELETE /functions/SHORT_FUNC_ARN  #Req: ALIAS
 /aliases/ALIAS                   #  - only Name
DeleteAlias()                     #Res: empty

                                  ┌───────────────┐
                                  │   ALIAS IAC   │
                                  └───────────────┘

AWS::Lambda::Alias                #RESPROPs: Name, FunctionName, FunctionVersion, Description, RoutingConfig

new Alias(...CARGS, OPTS)         #CALIAS. CKRESOURCE wrapping ALIAS
                                  #Inherits CANYFUNC
CFUNCTION.addAlias
 ('ALIAS'[, OPTS])->CALIAS        #Same but sets OPTS: aliasName 'ALIAS', version CFUNCTION.currentVersion
Alias.fromAliasAttributes
 (...CARGS, OPTS)->ICALIAS        #OPTS: aliasName 'ALIAS', aliasVersion ICFUNC_VERSION
ICALIAS.functionArn               #ALIAS_ARN. ALIAS.AliasARN
OPTS|ICALIAS.aliasName
ICALIAS.qualifier                 #'ALIAS'. ALIAS.Name
ICALIAS.functionName              #'FUNCTION:ALIAS'
OPTS|ICALIAS.version              #ICFUNC_VERSION
ICALIAS.lambda                    #ICFUNCTION
OPTS.description                  #ALIAS.*
OPTS.additionalVersions           #OBJ_ARR: version ICFUNC_VERSION, weight NUM. ALIAS.RoutingConfig.AdditionalVersionWeights

                                  ┌──────────┐
                                  │   CODE   │
                                  └──────────┘

FUNC_VERSION.PackageType          #How code is uploaded:
                                  #  - 'Zip': .zip file passed either directly or with S3 URL
                                  #  - 'Image': container image
                                  #Also called "deployment package"
FUNCTION.Code                     #FUNC_CODE. Where .zip archive or container image is located
NEW_FUNC_VERSION.Code             #NEW_FUNC_CODE
                                  #Can use `aws cloudformation package` or `sam package`

                                  ┌──────────────┐
                                  │   CODE IAC   │
                                  └──────────────┘

AWS::Lambda::Function             #Includes RESPROPs: PackageType, Code

CFUNCTION_OPTS.code               #CCODE. FUNCTION.Code|ImageConfig

                                  ┌─────────────────┐
                                  │   CODE PULUMI   │
                                  └─────────────────┘

NEW_FUNC_VERSION.Code             #This is an ARCHIVE, and NEW_FUNC_CODE.S3* -> FUNCTION.S3*
                                  #sourceCodeHash 'HASH' can be used as TRIGGER

CW.lambda.CallbackFunction        #Like Pulumi FUNCTION|[NEW_]FUNC_VERSION except for the following.
                                  #Code is generated from a FUNC value instead of an ARCHIVE file:
                                  #  - RPROPS.code -> RPROPS.callback FUNC(...): same signature as in Node runtime
                                  #     - using NR.serializeFunction()
                                  #     - can use RPROPS.callbackFactory()->RPROPS.callback also instead
                                  #  - generated ARCHIVE includes Node modules dependencies
                                  #     - using NR.computeCodePathsWorker(OPTS)
                                  #     - can pass RPROPS.codePathOptions OPTS
                                  #  - RPROPS.handler: always '__index.handler'
                                  #  - def RPROPS.runtime: Node 16
                                  #  - if FUNC body contains a }VAL{ marked as secret, OUTPUTS.code is too
                                  #Also, a default RPROPS.role is created:
                                  #  - available at OUTPUTS.roleInstance ROLE
                                  #  - trust policy: sts:AssumeRole for Principal.Service 'lambda.amazonaws.com'
                                  #  - attached policies: RPROPS.policies POLICY_ARN or { POLICY: POLICY_ARN, ... }
                                  #     - def: AWS managed POLICYs Lambda|CloudWatch[Events]|AmazonS3FullAccess,
                                  #       AmazonDynamoDB|AmazonSQS|AmazonKinesisFullAccess, AmazonCognitoPowerUser, AWSXrayWriteOnlyAccess
EFUNC                             #Either:
                                  #  - inline FUNC: will be handled by CallbackFunction, i.e. easiest
                                  #  - CALLBACK_FUNCTION: allow passing [Callback]Function RPROPS
                                  #  - Lambda FUNCTION: allow full customization
CW.lambda.isEventHandler(VAL)
 ->BOOL                           #True if EFUNC
CW.lambda
 .createFunctionFromEventHandler
 ('FUNCTION', EFUNC, NCROPTS)     #If EFUNC already FUNCTION, noop.
 ->FUNCTION                       #Otherwise, like new CallbackFunction(...) using RPROPS.callback EFUNC

                                  ┌──────────────┐
                                  │   CODE ZIP   │
                                  └──────────────┘

NEW_FUNC_CODE.ZipFile             #Zip archive content, base64-encoded
                                  #Not logged to CloudTrail
                                  #Only with Runtime node|python
                                  #Sometimes called "inline code"
                                  #In CLI: FILE, in SDK: INPUT_BLOB
FUNC_CODE.Location                #S3 'URI' to .zip archive
                                  #I.e. when using ZipFile, automatically uploaded to S3, on an AWS managed ACCOUNT
                                  #Only valid 10 minutes

NEW_FUNC_CODE.S3Bucket            #STR. S3 'BUCKET' storing the .zip code
                                  #Either:
                                  #  - no ZipFile, i.e. must specify S3 location
                                  #  - ZipFile, i.e. S3 location automatically allocated
NEW_FUNC_CODE.S3Key               #STR. S3 'OBJECT'
                                  #After FUNC_VERSION updated, can delete from S3
NEW_FUNC_CODE.S3ObjectVersion     #STR. S3 VERSION_ID

FUNC_CODE.RepositoryType          #'S3' or undefined

FUNC_VERSION.CodeSize             #NUM (in bytes). Size of the zip archive
ACCOUNT_LIMIT.TotalCodeSize       #NUM (in bytes). Max size of all FUNC_VERSION|LAYER_VERSIONs .zip files on S3, per REGION.
                                  #Max 75GB (flexible to a few TBs)
                                  #I.e. should cleanup FUNC_VERSION|LAYER_VERSIONs.
ACCOUNT_USAGE.TotalCodeSize       #NUM (in bytes). Current usage of ACCOUNT_LIMIT.TotalCodeSize
ACCOUNT_LIMIT.CodeSizeZipped      #NUM (in bytes). Max size when uploading a single FUNCTION|LAYER's .zip archive (without S3)
                                  #i.e. of NEW_FUNC_CODE|LAYER_VERSION_INPUT.ZipFile
                                  #Max 50MB
ACCOUNT_LIMIT.CodeSizeUnzipped    #NUM (in bytes). Max size when extracting a single FUNCTION|LAYER's .zip archive (with|without S3)
                                  #Max 250MB
                                  #In UI, also max 3MB per file

NEW_FUNC_CODE.SourceKMSKeyArn     #AWS KMS key ARN. Encrypt .zip file at rest
                                  #Def: automatically created
FUNC_VERSION.KMSKeyArn            #See below. Encrypt files after being unzipped

                                  ┌─────────────────┐
                                  │   CODE ZIP UI   │
                                  └─────────────────┘

BLUEPRINT ==>                     #Sample NEW_FUNC_CODE.ZipFile for a given Runtime.
                                  #Only available through the UI

EDITOR ==>                        #VSCode is available to edit files in UI

                                  ┌───────────────────┐
                                  │   CODE ZIP AUTH   │
                                  └───────────────────┘

kms:Decrypt|GenerateDataKey       #If custom NEW_FUNC_CODE.SourceKMSKeyArn, must be allowed
                                  #  - on KMS KEY
                                  #  - for SERVICE lambda.amazonaws.com
                                  #  - COND_KEY kms:EncryptionContext:aws:lambda:FunctionArn FUNC_ARN

                                  ┌──────────────────┐
                                  │   CODE ZIP IAC   │
                                  └──────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Code: ZipFile, S3Bucket, S3Key, S3ObjectVersion, SourceKMSKeyArn

Code.fromInline(STR)->CCODE       #NEW_FUNC_CODE.ZipFile

Code.fromBucket(ICBUCKET,
 'OBJECT', VERSION_ID)->CCODE     #NEW_FUNC_CODE.S3Bucket|S3Key|S3ObjectVersion, as direct values

Code.fromCfnParameters
 ([OPTS])->CCODE                  #NEW_FUNC_CODE.S3Bucket|S3Key, as STACK PARAMs
OPTS.bucketNameParam              #CPARAM (def: new one). NEW_FUNC_CODE.S3Bucket
OPTS.objectKeyParam               #CPARAM (def: new one). NEW_FUNC_CODE.S3Key
CPARAM
 .bucketNameParam|objectKeyParam  #CPARAM_LID
CPARAM.assign(S3_CLOCATION)->OBJ  #Keys: CPARAM_LID, values: S3_CLOCATION.bucketName|objectKey

Code.fromAsset                    #NEW_FUNC_CODE.S3Bucket|S3Key, as local DIR|archive
 ('PATH'[, HFOPTS])->CCODE        #Creates a HFASSET, i.e. uploads to S3 and copies to 'TARGET_PATH' (in ASSEMBLY_DIR)
                                  #'PATH' must be either 'DIR' or *.tar[.gz]|tgz|zip|jar
                                  #Def HFOPTS.deployTime true, i.e. deleted from S3 after `cdk deploy`
                                  #Automatically calls HFASSET.addResourceMetadata(), i.e. adds TEMPLATE.Resources.FUNCTION.Metadata:
                                  #  - 'aws:asset:property': 'Code' (in CFUNCTION) or 'Content' (in CLAYER_VERSION)
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:is-bundled': BOOL (whether HFOPTS.bundling used)

Code.fromCustomCommand
 ('PATH', STR_ARR[, OPTS])->CCOPTS#Like Code.fromAsset() but first calls child_process.spawnSync(...STR_ARR, OPTS.commandOptions)
OPTS.*                            #HFOPTS.*

Code.fromDockerBuild              #Like Code.fromAsset() but first:
 ('PATH'[, OPTS])->CCODE          #  - `docker build PATH`
                                  #  - `docker cp CONTAINER_ID:PATH2 PATH3`
OPTS.imagePath                    #'PATH2', i.e. PATH in CONTAINER with result of `docker build`
                                  #Def: '/asset'
OPTS.outputPath                   #'PATH3', i.e. local PATH with result of `docker build`
                                  #Passed to Code.fromAsset('PATH3')
OPTS.*                            #Same as DockerImage.fromBuild(..., OPTS) (see CDK doc)

                                  ┌───────────────────┐
                                  │   CODE ZIP LINT   │
                                  └───────────────────┘

cfn-lint E3678                    #If NEW_FUNC_CODE.ZipFile set, validate Runtime is specified
cfn-lint E3677                    #If NEW_FUNC_CODE.ZipFile set, validate Runtime is node|python

                                  ┌──────────────────────┐
                                  │   CODE ZIP TOOLKIT   │
                                  └──────────────────────┘

UPLOAD CODE ==>                   #Can be done as a command, using .zip or DIR

DOWNLOAD CODE ==>                 #Can be done from "Explorer"

                                  ┌────────────────┐
                                  │   CODE IMAGE   │
                                  └────────────────┘

CONTAINER IMAGE ==>               #Must follow OCI 1.0.0 specification
                                  #Must follow Docker image manifest v2, schema 2
                                  #Must be Linux-based
                                  #Max 10GB uncompressed
                                  #Must use the custom runtime API
                                  #Must not write on the filesystem, except for /tmp

[NEW_]FUNC_CODE.ImageUri          #'URI' to the container image in AWS ECR
                                  #Can use `sam package` (not `aws cloudformation package`)
FUNC_CODE.ResolvedImageUri        #'URI' to the container image, after optimization, used internally by API
                                  #API optimizes image after upload, for performance

FUNC_VERSION.KMSKeyArn            #See below. Encrypts FUNC_CODE.ResolvedImageUri (not ImageUri)

FUNC_VERSION[.ImageConfigResponse]#IMAGE. Container image's configuration.
 .ImageConfig                     #Max 16KB
IMAGE.EntryPoint                  #STR_ARR. Like Docker ENTRYPOINT
IMAGE.Command                     #STR_ARR. Like Docker CMD, i.e. arguments to EntryPoint
IMAGE.WorkingDirectory            #STR. Like Docker WORKDIR
ENV ==>                           #Automatically filled by FUNC_VERSION.Environment

public.ecr.aws/lambda/            #Recommended base images (called "AWS [managed] base image for Lambda")
 RUNTIME[:VERSION[-ARCH]]         #Follow every constraint, including implementing the custom runtime API
                                  #Exposes following ENVVARs: LAMBDA_TASK_ROOT, LAMBDA_RUNTIME_DIR
                                  #RUNTIME can be "provided" (called "OS-only base image")

                                  ┌────────────────────┐
                                  │   CODE IMAGE IAC   │
                                  └────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: ImageConfig, Code: ImageUri

new DockerImageFunction
 (...CARGS, OPTS)                 #CFUNCTION with following changes
OPTS.*                            #Like CFUNCTION
OPTS.runtime                      #Always Runtime.FROM_IMAGE
OPTS.code                         #Must be either:
                                  #  - DockerImageCode.fromEcr(...): like Code.fromEcrImage(...)
                                  #  - DockerImageCode.fromImageAsset(...): like Code.fromAssetImage(...)
                                  #     - except HIOPTS.platform's default value uses ICFUNCTION_OPTS.architecture

Code.fromEcrImage                 #NEW_FUNC_CODE.ImageUri + FUNC_VERSION.ImageConfig, as direct values
 (ECR_CREPO[, OPTS])->CCODE       #Automatically allows PACTIONs to lambda.amazonaws.com:
                                  #  - ecr:GetAuthorizationToken
                                  #  - ecr:BatchCheckLayerAvailability, ecr:GetDownloadUrlForLayer, ecr:BatchGetImage
OPTS.tagOrDigest                  #'TAG' or 'sha256:DIGEST' (def: 'latest'), to retrieve NEW_FUNC_CODE.ImageUri
                                  #I.e. CREPO_ARN:TAG or CREPO_ARN@DIGEST
OPTS
 .cmd|entrypoint|workingDirectory #IMAGE.*

Code.fromAssetImage               #NEW_FUNC_CODE.ImageUri + FUNC_VERSION.ImageConfig, as local DIR
 ('DIR', HIOPTS)->CCODE           #Creates a HIASSET, i.e. `docker build`, uploads to ECR and copies to 'TARGET_PATH' (in ASSEMBLY_DIR)
                                  #'DIR' must have a Dockerfile
                                  #Automatically allows PACTIONs to lambda.amazonaws.com, like EcrImageCode
                                  #Automatically calls HIASSET.addResourceMetadata(), i.e. adds TEMPLATE.Resources.FUNCTION.Metadata:
                                  #  - 'aws:asset:property': 'Code.ImageUri'
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:dockerfile-path': 'PATH'
                                  #  - 'aws:asset:docker-*': HIOPTS.* related to IASSET_NEW.docker*, but dash-case'd
OPTS
 .cmd|entrypoint|workingDirectory #IMAGE.*

                                  ┌────────────────┐
                                  │   LAYER MAIN   │
                                  └────────────────┘

LAYER                             #Lambda layer, as output
                                  #.zip archive with files shared between multiple FUNCTIONs
                                  #E.g. libraries, custom runtime or data|config files
                                  #Mounted at /opt
                                  #  - directories|files are merged, with last LAYER having priority
                                  #Only if PackageType 'Zip'
                                  #Not logged by CloudTrail
                                  #Max 5 per FUNCTION
LAYER.LayerArn                    #LAYER_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME'
LAYER.LayerName                   #'LAYER_NAME'

                                  ┌────────────────────┐
                                  │   LAYER MAIN API   │
                                  └────────────────────┘

GET /layers                       #Req: LAYER_VERSION
ListLayers()                      #  - only CompatibleRuntime, CompatibleArchitecture
                                  #Res: Layers LAYER_ARR
                                  #  - no LatestMatchingVersion.Content

                                  ┌───────────────────┐
                                  │   LAYER VERSION   │
                                  └───────────────────┘

LAYER_VERSION                     #Specific version of a LAYER
                                  #Unlike FUNCTION versions:
                                  #  - no $LATEST, i.e. always specific version NUM
                                  #  - completely immutable
                                  #Only PublishLayerVersion() is logged by CloudTrail
LAYER_VERSION.LayerVersionArn     #LAYER_VERSION_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME:NUM'
LAYER_VERSION.Version             #NUM
LAYER_VERSION.CreatedDate         #'DATE'
LAYER_VERSION.Description         #STR
LAYER_VERSION.LicenseInfo         #STR. Open-source license identifier

LAYER.LatestMatchingVersion       #Most recent LAYER_VERSION

LAYER_VERSION.Content             #In input: LAYER_CONTENT_INPUT
                                  #In output: LAYER_CONTENT_OUTPUT
LAYER_VERSION_INPUT.ZipFile|S3*   #Like NEW_FUNC_CODE.*
                                  #Can use `aws cloudformation package` or `sam package`
LAYER_VERSION_OUTPUT.CodeSha256|
 CodeSize|SigningJobArn|
 SigningProfileVersionArn         #Like FUNC_VERSION.*
LAYER_VERSION_OUTPUT.Location     #Like FUNC_CODE.*

FUNC_VERSION.Layers               #LAYER_VERSION_SUMMARY_ARR. Layers to associate to a FUNC_VERSION
LAYER_VERSION_SUMMARY             #Like LAYER_VERSION, but fewer fields:
                                  #  - LayerVersionArn -> Arn
                                  #  - Content.CodeSize|SigningJobArn|SigningProfileVersionArn -> CodeSize|...

/bin
/lib                              #Preferred location for LAYERs shared binaries|libraries

                                  ┌────────────────────────┐
                                  │   LAYER VERSION AUTH   │
                                  └────────────────────────┘

COND_KEY lambda:Layer             #LAYER_VERSION_ARN_ARR. Only with CreateFunction|UpdateFunctionConfiguration()

                                  ┌───────────────────────┐
                                  │   LAYER VERSION API   │
                                  └───────────────────────┘

POST /layers/LAYER/versions       #Req: LAYER_VERSION
PublishLayerVersion()             #  - LayerVersionArn -> LayerName 'LAYER_NAME'|LAYER_ARN
                                  #  - no CreatedDate, Version
                                  #Res: LAYER_VERSION
GET /layers/LAYER                 #Req: LAYER_VERSION
 /versions/VERSION_NUM            #  - LayerVersionArn -> LayerName 'LAYER_NAME'|LAYER_ARN
GetLayerVersion()                 #  - only Version -> VersionNumber
                                  #Res: LAYER_VERSION
GET /layers                       #Req: LAYER_VERSION
GetLayerVersionByArn()            #  - LayerVersionArn -> Arn
                                  #  - only Version -> find
                                  #Res: LAYER_VERSION
GET /layers/LAYER/versions        #Req: LAYER_VERSION
ListLayerVersions()               #  - LayerVersionArn -> LayerName 'LAYER_NAME'|LAYER_ARN
                                  #  - only CompatibleRuntimes, CompatibleArchitectures
                                  #Res: LayerVersions LAYER_VERSION_ARR
                                  #  - no Content
DELETE /layers/LAYER              #Req: LAYER_VERSION
 /versions/VERSION_NUM            #  - LayerVersionArn -> LayerName 'LAYER_NAME'|LAYER_ARN
DeleteLayerVersion()              #  - only Version -> VersionNumber
                                  #Res: empty

                                  ┌───────────────────────┐
                                  │   LAYER VERSION IAC   │
                                  └───────────────────────┘

AWS::Lambda::LayerVersion         #RESPROPs:
                                  #  - LayerName 'LAYER'|LAYER_ARN
                                  #  - Description, LicenseInfo
                                  #  - Content LAYER_CONTENT_INPUT (no ZipFile)
                                  #RESATTRs: LayerVersionArn
                                  #Cannot update (replace only)
AWS::Lambda::Function             #Includes RESPROPs: Layers LAYER_VERSION_ARN_ARR

new LayerVersion(...CARGS, OPTS)  #CLAYER_VERSION. CKRESOURCE wrapping LAYER_VERSION
LayerVersion.fromLayerVersionArn
 (...CARGS, 'LAYER_VERSION_ARN')
 ->ICLAYER_VERSION                #
LayerVersion
 .fromLayerVersionAttributes
 (...CARGS, OPTS)->ICLAYER_VERSION#OPTS: layerVersionArn, compatibleRuntimes

ICLAYER_VERSION.layerVersionArn   #LAYER_VERSION.*
OPTS.layerVersionName             #'LAYER'
OPTS.description
OPTS.license                      #LAYER_VERSION.*
OPTS.code                         #CCODE. Only through S3, not ZipFile nor Docker
OPTS.removalPolicy                #REMOVAL_POLICY (def: delete)

CFUNCTION_OPTS.layers             #ICLAYER_VERSION_ARR
CFUNCTION
 .addLayers(ICLAYER_VERSION,...)  #

                                  ┌──────────────────────────┐
                                  │   LAYER VERSION PULUMI   │
                                  └──────────────────────────┘

LAYER_VERSION                     #Can use skipDestroy

                                  ┌─────────────────────┐
                                  │   LAYER BUILD IAC   │
                                  └─────────────────────┘

new NodejsDependencyPackager      #CLAYER_VERSION_BUILDER
 (...CARGS, OPTS)                 #Like new LayerVersion() but builds LAYER_VERSION's CCODE
                                  #Builds it inside a FUNCTION (not locally):
                                  #  - goal: CI performance
                                  #  - uses a CUSTOM_RESOURCE under-the-hood
                                  #  - uses a BUCKET to send|receive files from it
                                  #Install dependencies, then zip the whole DIR
                                  #  - con: no optimization like esbuild does
                                  #Not documented yet: support for CodeBuild, Python, Ruby
                                  #Package @cloudsnorkel/cdk-turbo-layers (version 0.2.5)
OPTS.runtime                      #CRUNTIME (def: Runtime.NODEJS_16_X). CLAYER_VERSION.CompatibleRuntimes
                                  #Must be Node.js
OPTS.architecture                 #CLAYER_VERSION.CompatibleArchitectures
OPTS.vpc|subnetSelection          #CFUNCTION_OPTS.*
OPTS.preinstallCommands           #'SHELL_COMMAND'_ARR (def: []) run first

CLAYER_VERSION_BUILDER
 .layerFromPackageJson
 ('ANY_NAME', 'DIR'[, OPTS])
 ->CLAYER_VERSION                 #Runs `npm ci` with `DIR/package[-lock].json`
CLAYER_VERSION_BUILDER
 .layerFromInline('ANY_NAME',
 'PACKAGE@RANGE'_ARR[, OPTS])
 ->CLAYER_VERSION                 #Runs `npm install` with a package.json with PACKAGE.dependencies.PACKAGE 'RANGE'
CLAYER_VERSION_BUILDER
 .layerFromYarn
 ('ANY_NAME', 'DIR'[, OPTS])
 ->CLAYER_VERSION                 #Runs `yarn install --check-files --frozen-lockfile` with `DIR/yarn.lock`
OPTS.alwaysRebuild                #BOOL. If false (def), noop if files have not changed

                                  ┌───────────────┐
                                  │   EXTENSION   │
                                  └───────────────┘

/opt/extensions/FILE              #"External extensions", i.e. executable run separately from the runner
                                  #  - different process than the FUNC_INSTANCE's
                                  #  - initialized|shutdown at the same time as the runner
                                  #Either:
                                  #  - shared as LAYER, for PackageType 'Zip'
                                  #  - added manually by Dockerfile, if PackageType 'image'
                                  #Max 10 per FUNCTION
                                  #Only partially documented for the moment

EAPI                              #http://AWS_LAMBDA_RUNTIME_API/2020-01-01/extension
POST EAPI/register                #Initializes
POST EAPI/init/error              #Initialization error
GET EAPI/event/next               #Receives next INVOCATION or Shutdown event
POST EAPI/exit/error              #Exit error

TELEMETRY API ==>                 #Allows extensions to retrieve logs, metrics and traces related to:
                                  #  - the execution environment lifecycle|logs
                                  #  - the INVOCATIONs logs
                                  #  - the extension itself logs
                                  #Done via HTTP|TCP webhooks

                                  ┌───────────────────────┐
                                  │   EXTENSION METRICS   │
                                  └───────────────────────┘

AWS/Lambda/
 PostRuntimeExtensionDuration     #NUM of ms spent in external extension after request ended

                                  ┌─────────────┐
                                  │   RUNTIME   │
                                  └─────────────┘

FUNC_VERSION.Runtime              #STR. Runtime, among:
                                  #  - 'nodejs[VERSION]' with VERSION: 18.x, 20.x
                                  #  - 'pythonVERSION' with VERSION: 3.9, 3.10, 3.11, 3.12
                                  #  - 'javaVERSION' with VERSION: 8.al2, 11, 17, 21
                                  #  - 'rubyVERSION' with VERSION: 3.2, 3.3
                                  #  - 'dotnetVERSION' with VERSION: 8
                                  #  - 'provided[VERSION]' with VERSION: .al2, .al2023
                                  #OS:
                                  #  - Amazon Linux 2: nodejs18.x, <=python3.11, <=java17, ruby3.2, provided.al2
                                  #  - Amazon Linux 2023: all others
                                  #Not if PackageType 'Image'
ENVVAR AWS_EXECUTION_ENV          #'AWS_Lambda_RUNTIME'

LAYER_VERSION.CompatibleRuntimes  #STR_ARR among same values as FUNC_VERSION.Runtime

FUNC_VERSION.Handler              #'FILE.METHOD'. Code's entry point function name
                                  #FILE does not include '.EXT'
                                  #Not if PackageType 'Image'

ENVVAR LAMBDA_RUNTIME_DIR         #Path to Runtime files, e.g. /var/runtime

ENVVAR AWS_LAMBDA_EXEC_WRAPPER    #'PATH' to an executable script.
                                  #"Wrapper script", executed instead of FUNC_VERSION.Runtime
                                  #Script arguments are same as original Runtime
                                  #  - including argv[0], i.e. runtime binary itself
                                  #Not with Amazon Linux 1, nor 'provided.al2'
INTERNAL EXTENSION ==>            #Logic that runs inside the FUNC_INSTANCE's process
                                  #Achieved by using ENVVAR AWS_LAMBDA_EXEC_WRAPPER

                                  ┌─────────────────┐
                                  │   RUNTIME IAC   │
                                  └─────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Runtime, Handler
AWS::Lambda::LayerVersion         #Includes RESPROPs: CompatibleRuntimes

CFUNCTION_OPTS.handler            #FUNC_VERSION.*

CFUNCTION[_OPTS].runtime          #CRUNTIME. FUNC_VERSION.Runtime|PackageType

Runtime.NODEJS[_*_*|LATEST]
Runtime.GO[_*_*]
Runtime.PYTHON[_*_*]
Runtime.JAVA[_*]
Runtime.RUBY[_*_*]
Runtime.DOTNET[_*]
Runtime.PROVIDED[_*]              #CRUNTIME with FUNC_VERSION.PackageType 'Zip', i.e. when Runtime
Runtime.FROM_IMAGE                #CRUNTIME with FUNC_VERSION.PackageType 'Image', i.e. when no Runtime
Runtime.ALL                       #All available CRUNTIMEs, as ARR

new Runtime
 ('NAME'[, FAMILY[, OPTS]])       #CRUNTIME
CRUNTIME.name                     #'NAME', e.g. 'nodejs20.x'
CRUNTIME.toString()->'NAME'       #
CRUNTIME.family                   #FAMILY, i.e. RuntimeFamily ENUM NODEJS|GO|PYTHON|JAVA|RUBY|DOTNET_CORE|OTHER

CRUNTIME.runtimeEquals
 (CRUNTIME2)->BOOL                #

OPTS|CRUNTIME.supportsInlineCode  #BOOL (def: false). Whether can use NEW_FUNC_CODE.ZipFile, i.e. whether node|python
OPTS|CRUNTIME.isVariable          #BOOL (def: false). Target the latest version. Only true with node

OPTS.bundlingDockerImage          #ECR 'REPO' (def: 'public.ecr.aws/sam/build-NAME')
                                  #Docker image used when NEW_FUNC_VERSION.PackageType 'Image'
CRUNTIME.bundlingImage            #DOCKER_IMAGE (see CDK doc)

ICLAYER_VERSION[_OPTS]
 .compatibleRuntimes              #CRUNTIME_ARR. LAYER_VERSION.*

FactName.latestNodeRuntime        #RFACT for latest Node.js RUNTIME version
                                  #Slightly older for some PARTITIONs
determineLatestNodeRuntime        #Retrieve latest Node.js RUNTIME, using FactName.latestNodeRuntime
 (CONSTRUCT)->CRUNTIME            #CONSTRUCT is used to retrieve CSTACK

                                  ┌────────────────────┐
                                  │   RUNTIME PULUMI   │
                                  └────────────────────┘

CW.lambda.Runtime.NodeJS10dX|...  #'nodejs10.x|...'

                                  ┌──────────────────┐
                                  │   RUNTIME LINT   │
                                  └──────────────────┘

cfn-lint E2531|W2531              #No deprecated FUNC_VERSION.Runtime
cfn-lint E2533                    #No EOL FUNC_VERSION.Runtime
cfn-lint W2533                    #FUNC_VERSION.Runtime|Handler must be set, unless PackageType 'Image'

cdk-nag LambdaLatestVersion       #Must use latest VERSION of FUNC_VERSION.Runtime

                                  ┌────────────────────┐
                                  │   CUSTOM RUNTIME   │
                                  └────────────────────┘

CUSTOM RUNTIME ==>                #When FUNC_VERSION.Runtime 'provided*'
                                  #FUNC_CODE|LAYER must include an executable script at '/bootstrap', which is run
                                  #Only partially documented for the moment

RUNTIME INTERFACE CLIENT (RIC) ==>#Client for the runtime API
                                  #Available for every RUNTIME language, and also Rust and Go

ENVVAR LAMBDA_TASK_ROOT           #FUNC_CODE's 'DIR', e.g. /var/task
                                  #Used as cwd, i.e. should change cwd to it during initialization

ENVVAR _HANDLER                   #FUNC_VERSION.Handler

ENVVAR AWS_LAMBDA_RUNTIME_API     #'HOST:PORT' of custom runtime API
RAPI                              #http://AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime

POST RAPI/init/error              #Report error during initialization
GET RAPI/invocation/next          #Get next INVOCATION_REQ
                                  #Request body: empty
                                  #Res: INVOCATION_REQ.Payload
POST                              #Set INVOCATION_RES
 RAPI/invocation/REQ_ID/response  #Request body: INVOCATION_RES.ResponseBody
                                  #Res: empty
POST RAPI/invocation/REQ_ID/error #Report error during INVOCATION

                                  ┌─────────────────────┐
                                  │   RUNTIME VERSION   │
                                  └─────────────────────┘

RUNTIME_VERSION                   #Minor|patch version of a specific FUNC_VERSION.Runtime

RUNTIME_MGMT                      #How RUNTIMEs are upgraded to new RUNTIME_VERSIONs
                                  #Not logged by CloudTrail
RUNTIME_MGMT.FunctionArn          #FUNC_VERSION_ARN
RUNTIME_MGMT.UpdateRuntimeOn      #STR. How RUNTIME upgrade happens, among:
                                  #  - 'Auto' (def):
                                  #     - in a first phase, only on newly created|updated FUNCTIONs
                                  #     - in a second phase, on all FUNCTIONs
                                  #  - 'FunctionUpdate': only on newly created|updated FUNCTIONs
                                  #  - 'Manual': pinned to RUNTIME_MGMT.RuntimeVersionArn
RUNTIME_MGMT
 .RuntimeVersionArn
FUNC_VERSION.RuntimeVersionConfig #RUNTIME_VERSION_ARN. Runtime specific version
 .RuntimeVersionArn               #'arn:aws:lambda:REGION::runtime:RUNTIME_VERSION'

                                  ┌─────────────────────────┐
                                  │   RUNTIME VERSION API   │
                                  └─────────────────────────┘

PUT /functions
 /SHORT_FUNC_VERSION_ARN          #Req: RUNTIME_MGMT
 /runtime-management-config       #  - RuntimeVersionArn: only if UpdateRuntimeOn 'Manual'
PutRuntimeManagementConfig()      #Res: RUNTIME_MGMT
GET /functions
 /SHORT_FUNC_VERSION_ARN
 /runtime-management-config       #Req: empty
GetRuntimeManagementConfig()      #Res: RUNTIME_MGMT

                                  ┌─────────────────────────┐
                                  │   RUNTIME VERSION IAC   │
                                  └─────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: RuntimeManagementConfig RUNTIME_MGMT
AWS::Lambda::Version              #Includes RESPROPs: RuntimePolicy RUNTIME_MGMT

CFUNCTION_OPTS                    #Either:
 .runtimeManagementMode           #  - RuntimeManagementMode.AUTO|FUNCTION_UPDATE
                                  #  - RuntimeManagementMode.manual('RUNTIME_VERSION_ARN')

                                  ┌────────────┐
                                  │   MEMORY   │
                                  └────────────┘

FUNC_VERSION.MemorySize           #NUM (in MB). Amount of memory
                                  #Min: 128, max: 10GB
                                  #Also allocates 1 vCPU for each 1769MB
                                  #aws-lambda-power-tuning is a project to guess best value
ENVVAR
 AWS_LAMBDA_FUNCTION_MEMORY_SIZE  #'NUM'

MAX PROCESSES ==>                 #1e3

                                  ┌────────────────┐
                                  │   MEMORY IAC   │
                                  └────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: MemorySize

CFUNCTION_OPTS.memorySize         #FUNC_VERSION.*

                                  ┌─────────────────────┐
                                  │   MEMORY VALIDATE   │
                                  └─────────────────────┘

cfn-lint-serverless aws_lambda
 _function_default_memory
 (ES1005)                         #FUNC_VERSION.MemorySize must be set

                                  ┌─────────────────────┐
                                  │   MEMORY FUNCTION   │
                                  └─────────────────────┘

NCONTEXT.memoryLimitInMB          #NUM (in MB). FUNC_VERSION.MemorySize

                                  ┌─────────┐
                                  │   CPU   │
                                  └─────────┘

FUNC_VERSION.Architectures        #STR_ARR. CPU architecture. Single item, among:
                                  #  - 'x86_64' (def)
                                  #  - 'arm64'
                                  #     - cheaper for equivalent performance
                                  #     - must make sure FUNC_VERSION|LAYER_VERSION's code supports ARM
                                  #Not if PackageType 'Image'

LAYER_VERSION
 .CompatibleArchitectures         #STR_ARR among same values as FUNC_VERSION.Architectures

                                  ┌─────────────┐
                                  │   CPU IAC   │
                                  └─────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Architectures
AWS::Lambda::LayerVersion         #Includes RESPROPs: CompatibleArchitectures

ICANYFUNC.architecture            #CARCH, among:
ICFUNCTION_OPTS.architecture      #  - Architecture.X86_64 (def)
                                  #  - Architecture.ARM64
                                  #  - Architecture.custom(STR[, STR2])
                                  #     - STR2 is `docker build --platform`, e.g. used by HIOPTS.platform (HIASSETs)
                                  #     - can be 'linux/amd64' (def) or 'linux/arm64'
                                  #When using FUNC_VERSION|ALIAS: forwards to underlying FUNCTION instead
CLAYER_VERSION_OPTS
 .compatibleArchitectures         #CARCH_ARR. LAYER_VERSION.*

                                  ┌───────────────────────────┐
                                  │   ENVIRONMENT VARIABLES   │
                                  └───────────────────────────┘

FUNC_VERSION                      #'VAL'. Environment variable.
 .Environment.Variables.ENVVAR    #Not logged by CloudTrail
                                  #Max 4KB for all environment variables per FUNC_VERSION

FUNC_VERSION.KMSKeyArn            #AWS KMS key ARN. Encrypt environment variables
                                  #Def: automatically created, named 'aws/lambda'
ENCRYPTION IN TRANSIT ==>         #Can encrypt each environment variable not only when persisted, but also its value runtime
                                  #Must be done through UI

ENVVAR AWS_REGION
ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
ENVVAR AWS_SESSION_TOKEN          #

ENVVAR LANG                       #'en_US.UTF-8'
ENVVAR TZ                         #'UTC'
ENVVAR PATH                       #'/usr/local/bin:/usr/bin/:/bin:/opt/bin'
ENVVAR LD_LIBRARY_PATH            #'/lib64:/usr/lib64:$LAMBDA_RUNTIME_DIR:$LAMBDA_RUNTIME_DIR/lib:$LAMBDA_TASK_ROOT:$LAMBDA_TASK_ROOT/lib:/opt/lib'

                                  ┌───────────────────────────────┐
                                  │   ENVIRONMENT VARIABLES IAC   │
                                  └───────────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Environment, KmsKeyArn

CFUNCTION_OPTS.environment        #OBJ. FUNC_VERSION.Environment.Variables
CFUNCTION.addEnvironment
 ('ENVVAR', 'VAL'[, ENV_OPTS])
 ->CFUNCTION                      #
CFUNCTION_OPTS
 .environmentEncryption           #KMS ICKEY. FUNC_VERSION.KMSKeyArn

                                  ┌────────────────────────────────────┐
                                  │   ENVIRONMENT VARIABLES VALIDATE   │
                                  └────────────────────────────────────┘

cfn-lint E3663                    #FUNC_VERSION.Environment.Variables.ENVVAR name is not one reserved|used by AWS

                                  ┌────────────────┐
                                  │   FILESYSTEM   │
                                  └────────────────┘

FUNC_VERSION.EphemeralStorage.Size#NUM (in MB) to allocate for /tmp
                                  #Def|min: 512MB, max: 10GB
                                  #Kept for a given FUNC_INSTANCE

FUNC_VERSION.FileSystemConfigs    #FUNC_EFS_ARR. Mount an AWS EFS
FUNC_EFS.Arn                      #EFS ACCESS_POINT_ARN
FUNC_EFS.LocalMountPath           #'/mnt/DIR'

MAX FILE DESCRIPTORS ==>          #1e3

                                  ┌─────────────────────┐
                                  │   FILESYSTEM AUTH   │
                                  └─────────────────────┘

PERMISSIONS ==>                   #FUNC_EFS requires PACTIONs:
                                  #  - elasticfilesystem:ClientMount
                                  #     - with COND_KEY elasticfilesystem:AccessPointArn ACCESS_POINT_ARN
                                  #  - elasticfilesystem:ClientWrite (unless readonly) on EFS FILESYSTEM

                                  ┌────────────────────┐
                                  │   FILESYSTEM IAC   │
                                  └────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: EphemeralStorage, FileSystemConfigs

CFUNCTIN_OPTS.ephemeralStorageSize#SIZE. FUNC_VERSION.EphemeralStorage.Size
CFUNCTION_OPTS.filesystem         #Must be Filesystem.fromEfsAccessPoint(EFS_ICACCESS_POINT, FUNC_EFS.LocalMountPath)
                                  #FUNC_VERSION.FileSystemConfigs
                                  #Automatically allows PACTIONs (as described above) to FUNC_VERSION.Role
                                  #Automatically adds ingress|egress RULEs from|to VPC

                                  ┌────────────────┐
                                  │   NETWORKING   │
                                  └────────────────┘

FUNC_VERSION.VpcConfig            #FUNC_VPC. VPC of a FUNCTION
                                  #By default, uses a VPC that cannot access other VPCs|resources of current account
                                  #Max 250 NETWORK_INTERFACEs
FUNC_VPC.VpcId                    #STR
FUNC_VPC.SubnetIds                #STR_ARR
FUNC_VPC.SecurityGroupIds         #STR_ARR
FUNC_VPC.Ipv6AllowedForDualStack  #BOOL (def: false)

                                  ┌─────────────────────┐
                                  │   NETWORKING AUTH   │
                                  └─────────────────────┘

COND_KEY lambda:VpcIds
COND_KEY lambda:SubnetIds
COND_KEY lambda:SecurityGroupIds  #FUNC_VPC.VpcId|SubnetIds|SecurityGroupIds. Only with CreateFunction|UpdateFunctionConfiguration()

AWSLambdaVPCAccessExecutionRole   #AWS managed POLICY allowing a FUNCTION to use ec2:*NetworkInterface|PrivateIpAddresses*
                                  #and logs:PutLogEvents|CreateLogGroup|CreateLogStream
AWSLambdaENIManagementAccess      #AWS managed POLICY allowing a FUNCTION to use ec2:*NetworkInterface*

                                  ┌────────────────────┐
                                  │   NETWORKING IAC   │
                                  └────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: VpcConfig

CFUNCTION_OPTS.vpc                #ICVPC. FUNC_VPC, used only to compute SubnetIds|SecurityGroupIds
                                  #When set, default CFUNCTION_OPTS.role gets AWSLambdaVPCAccessExecutionRole managed POLICY
CFUNCTION_OPTS.vpcSubnets         #OBJ (def: {}). FUNC_VPC.SubnetIds, using ICVPC.selectSubnets(OBJ)
CFUNCTION_OPTS.allowPublicSubnet  #BOOL. If false (def), do not allow SUBNETs to be public

CFUNCTION_OPTS.securityGroups     #EC2 ICSECURITY_GROUP_ARR (def: new one). FUNC_VPC.SecurityGroupIds
CFUNCTION_OPTS.allowAllOutbound   #BOOL (def: true) passed to default CFUNCTION_OPTS.securityGroups
CFUNCTION_OPTS
 .allowAllIpv6Outbound            #BOOL (def: false) passed to default CFUNCTION_OPTS.securityGroups
ICFUNCTION_OPTS.securityGroup     #ICSECURITY_GROUP. Same as CFUNCTION_OPTS.securityGroups but:
                                  #  - for Function.fromFunctionAttributes(...CARGS, ICFUNCTION_OPTS)
                                  #  - no default value
CFUNCTION_OPTS
 .ipv6AllowedForDualStack         #FUNC_VPC.Ipv6AllowedForDualStack

ICANYFUNC.isBoundToVpc            #BOOL. Whether FUNC_VPC is set
                                  #Only false when using Function.fromFunction*(..., OPTS) without OPTS.securityGroup[Id]

ICANYFUNC.connections             #EC2 CCONNECTIONS. Created automatically as part of FUNC_VPC
                                  #Uses same CSECURITY_GROUPs as VPC

                                  ┌─────────────────────┐
                                  │   NETWORKING LINT   │
                                  └─────────────────────┘

cdk-nag LambdaInsideVPC           #FUNC_VERSION.VpcConfig must be set, and FUNC_VPC.SubnetIds|SecurityGroupIds not empty

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

INVOCATION_REQ.LogType            #Whether to include INVOCATION_RES.LogResult: 'None' (no, def) or 'Tail' (yes)
                                  #Only if InvocationType 'RequestResponse'
INVOCATION_RES[_END].LogResult    #FUNCTION stdout|stderr
                                  #Last 4KB only
                                  #Base64 encoded

[NEW_]FUNC_VERSION.LoggingConfig  #FUNC_LOGGING. CloudWatch logs LOG_GROUP receiving all FUNCTION stdout|stderr
                                  #Includes errors during init
                                  #For both:
                                  #  - system logs: by runtime
                                  #  - application logs: by FUNCTION code
                                  #Automatically timestamped
                                  #Can take up to 10m

ENVVAR AWS_LAMBDA_LOG_GROUP_NAME  #'LOG_GROUP'
NCONTEXT.logGroupName             #Def: /aws/lambda/FUNCTION
FUNC_LOGGING.LogGroup             #Must otherwise be YYYY/MM/DD/FUNCTION[QUALIFIER][ENV_UUID]

ENVVAR AWS_LAMBDA_LOG_STREAM_NAME #'LOG_STREAM'
NCONTEXT.logStreamName            #Def: YYYY/MM/DD/[VERSION_NUM]FUNC_INSTANCE_ID

ENVVAR AWS_LAMBDA_LOG_FORMAT      #Whether system logs are:
FUNC_LOGGING.LogFormat            #  - 'Text' (def): flat
                                  #  - 'JSON': SLOG
                                  #Also applies to application logs:
                                  #  - if 'JSON', must print 'ALOG_JSON' on stdout|stderr
                                  #  - with runtime node|java|python:
                                  #     - can use runtime-specific logger, e.g. console.LEVEL() with node
                                  #     - it automatically converts to ALOG

FUNC_LOGGING.SystemLogLevel       #Minimum SLOG.level

SLOG.level                        #'DEBUG', 'INFO' (def), 'WARN'
SLOG.time                         #'DATE'
SLOG.type                         #STR, e.g. 'platform.initStart'
SLOG.record                       #OBJ. Type-specific
                                  #Not fully documented yet

RLOG                              #System logs on each request
                                  #Documented here as RLOG.*

ENVVAR AWS_LAMBDA_LOG_LEVEL       #Minimum ALOG.level
FUNC_LOGGING.ApplicationLogLevel  #Only if FUNC_LOGGING.LogFormat 'JSON'

ALOG.level                        #'TRACE', 'DEBUG', 'INFO' (def), 'WARN', 'ERROR', 'FATAL'
ALOG.timestamp                    #'DATE' (def: now)
ALOG.message                      #Depending on console.LEVEL() argument:
                                  #  - STR
                                  #  - OBJ
                                  #  - ERROR_RES_OBJ: when passing ERROR
ALOG.requestId                    #'REQ_ID' (def: current)

                                  ┌────────────────┐
                                  │   LOGGING UI   │
                                  └────────────────┘

LIVE TAIL ==>                     #Can view CloudWatch live tail (see its doc) in UI
                                  #Unlike normal LOGGING:
                                  #  - works with any InvocationType
                                  #  - full logs, not only last 4KB
                                  #  - immediate, i.e. does not take up to 10m

                                  ┌──────────────────┐
                                  │   LOGGING AUTH   │
                                  └──────────────────┘

PERMISSIONS ==>                   #For FUNC_LOGGING, FUNC_VERSION.Role must be allowed PACTIONs:
                                  #  - logs:CreateLogGroup
                                  #  - logs:CreateLogStream|PutLogEvents on LOG_GROUP
                                  #For live tail, must also have logs:StartLiveTrail|StopLiveTrail|DescribeLogGroups

                                  ┌─────────────────┐
                                  │   LOGGING SDK   │
                                  └─────────────────┘

@aws-lambda-powertools/logger     #Node.js logger made for AWS Lambda
                                  #See its doc

                                  ┌─────────────────┐
                                  │   LOGGING IAC   │
                                  └─────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: LoggingConfig

CFUNCTION[_OPTS].logGroup         #ICLOG_GROUP. FUNC_LOGGING.LogGroup
                                  #Def:
                                  #  - LogGroup.fromLogGroupName(..., '/aws/lambda/FUNCTION')
                                  #  - only if either:
                                  #     - CFUNCTION.logGroup accessed
                                  #     - CFUNCTION_OPTS.logRetention defined
CFUNCTION_OPTS
 .loggingFormat|systemLogLevelV2
 |applicationLogLevelV2           #FUNC_LOGGING.*

CFUNCTION_OPTS.logRetention       #NUM (def: infinite). LOG_GROUP.LogRetention of FUNC_LOGGING.LogGroup
                                  #  - only when using default value
                                  #Uses a CLOG_RETENTION under-the-hood (see CloudWatch Logs docs)
CFUNCTION_OPTS.logRetentionRole
 |logRetentionRetryOptions        #Passed to CLOG_RETENTION_OPTS.*

                                  ┌─────────────────────┐
                                  │   LOGGING TOOLKIT   │
                                  └─────────────────────┘

VIEW LOGS ==>                     #Can be done from Toolkit

                                  ┌───────────────────┐
                                  │   INSIGHTS MAIN   │
                                  └───────────────────┘

LAMBDA INSIGHTS ==>               #Send additional CloudWatch custom METRICs related to Memory, CPU, Network
                                  #Uses embedded METRICs (~1KB payload)
                                  #Sent to LOG_GROUP '/aws/lambda-insights'
                                  #Can take up to 20m
                                  #Has dedicated automated DASHBOARD in CloudWatch

INSIGHTS LAYER ==>                #External extension, shared as a LAYER
                                  #'arn:aws:lambda:REGION:HARDCODED_ACCOUNT_ID:layer:LambdaInsightsExtension[-Arm64]:VERSION' (see list online)
                                  #Can also be installed from the UI
                                  #See online doc on how to install on container images

ENVVAR LAMBDA_INSIGHTS_LOG_LEVEL  #If 'info', verbose logging for debugging

                                  ┌────────────────────────┐
                                  │   INSIGHTS MAIN AUTH   │
                                  └────────────────────────┘

CloudWatchLambdaInsights          #AWS managed POLICY to attach to FUNC_VERSION.Role
 ExecutionRolePolicy              #Allows PACTIONs:
                                  #  - logs:CreateLogGroup
                                  #  - logs:CreateLogStream|PutLogEvents on LOG_GROUP '/aws/lambda-insights'

                                  ┌───────────────────────┐
                                  │   INSIGHTS MAIN IAC   │
                                  └───────────────────────┘

CFUNCTION_OPTS.insightsVersion    #Add Insights LAYER. Can be:
                                  #  - LambdaInsightsVersion.VERSION_1_0_*_0
                                  #  - LambdaInsightsVersion.fromInsightVersion('LAYER_VERSION')
                                  #  - LambdaInsightsVersion.fromInsightVersionArn('LAYER_ARN')
                                  #Also attach CloudWatchLambdaInsightsExecutionRolePolicy to FUNC_VERSION.Role

CXMONITORING_OPTS
 .lambdaInsightsEnabled           #BOOL (def: false). Required with cdk-monitoring-constructs

                                  ┌──────────────────────┐
                                  │   INSIGHTS METRICS   │
                                  └──────────────────────┘

METRICS ==>                       #All namespaced with AWS/LambdaInsights
                                  #DVARs: function_name 'FUNCTION', version VERSION_NUM
ROOT                              #Embedded METRICs root (see CloudWatch metrics doc)
                                  #The following are top-level properties, i.e. available in logs, but not as METRICs
ROOT.METRIC                       #For each METRIC below
@FIELD                            #CloudWatch Logs QUERY can use additional @FIELDs with Lambda, documented below

ROOT|RLOG.function_name           #'FUNCTION'
ROOT|RLOG.version                 #VERSION_NUM
@type
ROOT.event_type                   #STR, e.g. 'performance'

@requestId
ROOT|RLOG.request_id              #'REQ_ID'
@xrayTraceId
ROOT|RLOG.trace_id                #X-Ray TRACE_ID
@xraySegmentId
RLOG.segment_id                   #X-Ray SEGMENT_ID
RLOG.sampled                      #BOOL, for X-Ray

@duration
ROOT|RLOG.duration                #NUM of ms handling request (including cold start, if ROOT.cold_start true)
@billedDuration
ROOT|RLOG.billed_duration         #Same but rounded
ROOT|RLOG.cold_start              #BOOL
ROOT.timeout                      #BOOL
ROOT.shutdown_reason              #STR, among 'Failure', 'Timeout', 'Spindown'

@maxMemoryUsed
METRIC|RLOG used_memory_max       #Max memory used (in MB)
METRIC memory_utilization         #Max memory used (in % of total_memory)
                                  #cdk-monitoring-constructs:
                                  #  - avg|90|max: METRIC, WIDGET, MALARM EnhancedMonitoringAvg|P90|MaxMemory > CXALARM_OPTS.maxUsagePercent
@memorySize
METRIC|RLOG total_memory          #FUNC_VERSION.MemorySize (in MB)
ROOT.billed_mb_ms                 #total_memory * billed_duration

ROOT.cpu_user_time                #CPU time spent (in ms) (user)
ROOT.cpu_system_time              #CPU time spent (in ms) (system)
METRIC cpu_total_time             #cpu_user_time + cpu_system_time
                                  #cdk-monitoring-constructs:
                                  #  - avg|90|max: METRIC, WIDGET, MALARM EnhancedMonitoringAvg|P90|MaxCpuTotalTime > CXALARM_OPTS.maxDuration DURATION
                                  #  - sum * max(memory_utilization) (for cost purpose): METRIC, WIDGET
METRIC init_duration              #Time spent (in ms) in cold start

ROOT.fd_use                       #NUM of file descriptors used
ROOT.fd_max                       #Max NUM of file descriptors
ROOT.tmp_used                     #NUM of bytes used in /tmp
ROOT.tmp_max                      #Max size of /tmp

ROOT.threads_max                  #Max NUM of threads

METRIC rx_bytes                   #Network bytes received
METRIC tx_bytes                   #Network bytes sent
METRIC total_network              #rx_bytes + tx_bytes

ROOT.agent_version                #'X.Y.Z.A'. CloudWatch agent version
ROOT.agent_memory_avg|max         #NUM of MB taken by CloudWatch agent in average|max

                                  ┌───────────────┐
                                  │   PROFILING   │
                                  └───────────────┘

AWS_CODEGURU_PROFILER_ENABLED     #'TRUE' when using CodeGuru profiler
                                  #Only with python|java runtimes
AWS_CODEGURU_PROFILER_GROUP_ARN   #CodeGuru PROFILER_GROUP_ARN
AWS_CODEGURU_PROFILER_GROUP_NAME  #CodeGuru 'PROFILER_GROUP'
AWS_CODEGURU_PROFILER_
 TARGET_REGION                    #'REGION'

                                  ┌───────────────────┐
                                  │   PROFILING IAC   │
                                  └───────────────────┘

CFUNCTION_OPTS.profiling          #BOOL (def: false). FUNCTION.Environment.Variables.AWS_CODEGURU_PROFILER_ENABLED|GROUP_ARN
CFUNCTION_OPTS.profilingGroup     #CodeGuru ICPROFILING_GROUP (def: new one)
                                  #Automatically allows FUNC_VERSION.Role to PACTIONs codeguru-profiler:ConfigureAgent|PostAgentProfile
CRUNTIME[_OPTS]
 .supportsCodeGuruProfiling       #BOOL (def: false). Whether can use CodeGuru Profiler, i.e. whether python|java

                                  ┌─────────────────────────┐
                                  │   PERMISSION IDENTITY   │
                                  └─────────────────────────┘

FUNC_VERSION.Role                 #ROLE_ARN. "Execution role"
                                  #Permissions of FUNC_VERSION towards other resources
                                  #ROLE's trust policy must authorize Principal 'lambda.amazonaws.com'

AWSLambdaBasicExecutionRole       #AWS managed ROLE meant for FUNC_VERSION.Role minimum permissions
                                  #Allows logs:CreateLogGroup|CreateLogStream|PutLogEvents
AWSLambdaExecute                  #AWS managed ROLE allowing a FUNCTION to do logs:* or s3:GetObject|PutObject

COND_KEY lambda:SourceFunctionArn #FUNC_VERSION_ARN. For any PACTION, when PRINCIPAL is 'lambda.amazonaws.com'
                                  #Not available in resource-based POLICYs

                                  ┌─────────────────────────────┐
                                  │   PERMISSION IDENTITY IAC   │
                                  └─────────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Role

ICFUNCTION_OPTS|ICANYFUNC.role    #ICROLE. FUNC_VERSION.Role
                                  #Def: new ROLE assumable by lambda.amazonaws.com
                                  #  - with managed POLICY AWSLambdaBasicExecutionRole
                                  #ICANYFUNC is YGRANTABLE|KGRANTABLE, using it
                                  #When using Function.fromFunction*(...):
                                  #  - no default value
                                  #  - i.e. not YGRANTABLE|KGRANTABLE if not defined
                                  #When using FUNC_VERSION|ALIAS: forwards to underlying FUNCTION instead
CFUNCTION_OPTS.initialPolicy      #CSTATEMENT_ARR attached to FUNC_VERSION.Role

                                  ┌─────────────────────────┐
                                  │   PERMISSION RESOURCE   │
                                  └─────────────────────────┘

PERMISSION                        #Resource-based single-STATEMENT POLICY for a FUNCTION|FUNC_VERSION|ALIAS
                                  #Permissions of other resources towards FUNCTION|FUNC_VERSION|ALIAS
                                  #Max POLICY_DOC size: 20KB

VERSION|ALIAS PERMISSIONS ==>     #Permissions can target a:
                                  #  - FUNC_VERSION|ALIAS
                                  #     - cannot be '$LATEST'
                                  #  - FUNCTION: i.e. all FUNC_VERSIONs|ALIASs
                                  #However:
                                  #  - if PACTION lambda:InvokeFunction[Url]
                                  #     - including as part of PACTION lambda:*
                                  #  - then permissions to a FUNCTION only apply to invocations to FUNCTION without any QUALIFIER
                                  #  - but can individually target both to fix this
                                  #     - i.e. STATEMENT.Resource ['FUNC_ARN', 'FUNC_ARN:*'], or ['FUNC_ARN*']
                                  #This is for both:
                                  #  - PERMISSION (resource-based POLICY)
                                  #  - identity-based POLICYs attached to callers

PERMISSION.FunctionArn            #SHORT_FUNC_VERSION_ARN
PERMISSION.RevisionId             #'REVISION_ID'

PERMISSION.Statement              #'STATEMENT'
                                  #Aggregation of the following fields
                                  #Automatically adds STATEMENT.Resource FUNCTION|FUNC_VERSION|ALIAS_ARN

PERMISSION.StatementId            #STATEMENT.Id
PERMISSION.Action                 #'lambda:SERVICE_ACTION' or '[lambda:]*'. STATEMENT.Action
                                  #SERVICE_ACTION can only be InvokeFunction, *Function (not CreateFunction|UpdateFunctionConfiguration|ListFunctions),
                                  #*Alias, *FunctionConcurrency, *ProvisionedConcurrencyConfig, *FunctionEventInvokeConfig, *Tag*, PublishVersion, GetPolicy
PERMISSION.Principal              #'ACCOUNT_ID|ROOT_ARN|SERVICE_DOMAIN|*'. STATEMENT.Principal.AWS|Service
PERMISSION.SourceArn              #'ARN'. STATEMENT.Condition.StringEquals.aws:SourceArn
PERMISSION.SourceAccount          #STR. STATEMENT.Condition.StringEquals.aws:SourceAccount
PERMISSION.PrincipalOrgID         #STR. STATEMENT.Condition.StringEquals.aws:PrincipalOrgId
PERMISSION.EventSourceToken       #STR. Alexa Smart Home function token

                                  ┌──────────────────────────────┐
                                  │   PERMISSION RESOURCE AUTH   │
                                  └──────────────────────────────┘

COND_KEY lambda:Principal         #PERMISSION.Principal. Only with *Permission*()

                                  ┌─────────────────────────────┐
                                  │   PERMISSION RESOURCE API   │
                                  └─────────────────────────────┘

POST /functions                   #Req: PERMISSION
 /SHORT_FUNC_VERSION_ARN/policy   #  - no Statement
AddPermission()                   #Res: PERMISSION
                                  #  - only Statement
GET /functions                    #Req: empty
 /SHORT_FUNC_VERSION_ARN/policy   #Res:
GetPolicy()                       #  - Policy POLICY_DOC
                                  #  - RevisionId STR: of the POLICY
DELETE /functions
 /SHORT_FUNC_VERSION_ARN/policy   #Req: PERMISSION
 /STATEMENT_ID                    #  - only RevisionId|StatementId
RemovePermission()                #Res: empty

                                  ┌─────────────────────────────┐
                                  │   PERMISSION RESOURCE IAC   │
                                  └─────────────────────────────┘

AWS::Lambda::Permission           #RESPROPs: FunctionName, Action, Principal, SourceArn, SourceAccount, PrincipalOrgID, EventSourceToken
                                  #Cannot update (replace only)

ICANYFUNC.addPermission           #Create a new PERMISSION, including PERMISSION.FunctionArn
 ('CPERMISSION', CPERMISSION_OBJ) #For PACTION lambda:InvokeFunction[Url]:
                                  #  - if an ALIAS|FUNC_VERSION exists
                                  #  - should use ICALIAS|ICFUNC_VERSION.addPermission() instead of ICFUNCTION.addPermission()
CPERMISSION_OBJ.scope             #CPERMISSION's PARENT_CONSTRUCT (def: ICANYFUNC)
CPERMISSION_OBJ.action            #PERMISSION.Action (def: 'lambda:InvokeFunction')
CPERMISSION_OBJ.principal         #PERMISSION.Principal. ICPRINCIPAL among AccountPrincipal, ArnPrincipal|OrganizationPrincipal, ServicePrincipal, AnyPrincipal
                                  #Can only have the COND_OBJ described below
CPERMISSION_OBJ.sourceArn         #PERMISSION.SourceArn
                                  #Def: ICPRINCIPAL's COND_OBJ.ArnLike.aws:SourceArn
CPERMISSION_OBJ.sourceAccount     #PERMISSION.SourceAccount
                                  #Def: ICPRINCIPAL's COND_OBJ.StringEquals.aws:SourceAccount
CPERMISSION_OBJ.organizationId    #PERMISSION.PrincipalOrgID
                                  #Def: ICPRINCIPAL's COND_OBJ.StringEquals.aws:PrincipalOrgID
CPERMISSION_OBJ.eventSourceToken  #PERMISSION.*

ICANYFUNC.grantInvoke             #Allows PACTION lambda:InvokeFunction to YGRANTABLE (identity-based POLICY)
 (YGRANTABLE)->CGRANT             #If either fails or cross-account, also allows it through a PERMISSION (resource-based POLICY)
ICANYFUNC
 .grantInvokeCompositePrincipal
 (CPRINCIPALS)->CGRANT_ARR        #Like ICANYFUNC.grantInvoke() but on multiple PRINCIPALs
ICANYFUNC                         #ARN_ARR targeted by ICANYFUNC.grantInvoke():
 .resourceArnsForGrantInvoke      #  - FUNCTION: ['FUNC_ARN', 'FUNC_ARN:*'] (both FUNCTION and all its FUNC_VERSIONs|ALIASs)
                                  #  - FUNC_VERSION: ['FUNC_VERSION_ARN']
                                  #  - ALIAS: ['ALIAS_ARN']
ICANYFUNC.grantInvokeVersion
 (YGRANTABLE, ICFUNC_VERSION)
 ->CGRANT                         #Like ICANYFUNC.grantInvoke() but targeting FUNC_VERSION_ARN
ICANYFUNC.grantInvokeLatestVersion
 (YGRANTABLE)->CGRANT             #Same as ICANYFUNC.grantInvokeVersion(YGRANTABLE, ICANYFUNC.latestVersion)

ICFUNCTION_OPTS.sameEnvironment   #BOOL. When using:
                                  #  - Function.fromFunctionArn():
                                  #     - if different ACCOUNT than current STACK
                                  #     - then cannot create PERMISSION on ICFUNCTION
                                  #     - this is because PERMISSIONs must be in same ACCOUNT than FUNCTIONs they apply to
                                  #  - Function.fromFunctionAttributes(): same but can bypass|force using ICFUNCTION_OPTS.sameEnvironment true|false
                                  #  - Function.fromFunctionName(): always bypass since 'FUNCTION' name is looked up in current ACCOUNT
ICFUNCTION_OPTS.skipPermissions   #If false (def), throws when ICFUNCTION.grant*():
                                  #  - tries to add a PERMISSION
                                  #  - but could not due to using Function.fromFunctionArn|Attributes() on a FUNCTION from another ACCOUNT (or agnostic)
                                  #If true, noop instead

                                  ┌───────────────────────────────┐
                                  │   PERMISSION PRINCIPAL LINT   │
                                  └───────────────────────────────┘

cfn-lint-serverless aws_lambda
 _permission_multiple_principals
 (WS1002)                         #PERMISSION.Principal must have a single item
cfn-lint W3663                    #PERMISSION.SourceAccount must be set if no PERMISSION.SourceArn

cdk-nag LambdaFunction
 PublicAccessProhibited           #PERMISSION.Principal cannot be '*' unless PERMISSION.SourceArn|SourceAccount|PrincipalOrgID set

                                  ┌──────────────────────┐
                                  │   PERMISSION LAYER   │
                                  └──────────────────────┘

LAYER_PERMISSION                  #Similar to PERMISSION except:
                                  #  - Resource is LAYER_VERSION_ARN
                                  #  - Action is always 'lambda:GetLayerVersion'
                                  #     - required to invoke a FUNCTION with that LAYER_VERSION
LAYER_PERMISSION.LayerName        #'LAYER'
LAYER_PERMISSION.VersionNumber    #NUM
LAYER_PERMISSION.RevisionId       #'REVISION_ID'

LAYER_PERMISSION.Statement
LAYER_PERMISSION.StatementId      #Like PERMISSION.*
LAYER_PERMISSION.Action           #Always 'lambda:GetLayerVersion'
LAYER_PERMISSION.Principal        #STR. STATEMENT.Principal. 'ACCOUNT_ID|ROOT_ARN|*'.
LAYER_PERMISSION.OrganizationId   #STR. With LAYER_PERMISSION.Principal '*', only authorize AWS accounts of that AWS organization ID.

                                  ┌──────────────────────────┐
                                  │   PERMISSION LAYER API   │
                                  └──────────────────────────┘

POST /layers/LAYER                #Req: LAYER_PERMISSION
 /versions/VERSION_NUM/policy     #  - no Statement
AddLayerVersionPermission()       #Res: LAYER_PERMISSION
                                  #  - only RevisionId, Statement
GET /layers/LAYER                 #Req: empty
 /versions/VERSION_NUM/policy     #Res:
GetLayerVersionPolicy()           #  - Policy POLICY_DOC
                                  #  - RevisionId STR: of the POLICY
DELETE /layers/LAYER
 /versions/VERSION_NUM            #Req: LAYER_PERMISSION
 /policy/STATEMENT_ID             #  - only RevisionId
RemoveLayerVersionPermission()    #Res: empty

                                  ┌──────────────────────────┐
                                  │   PERMISSION LAYER IAC   │
                                  └──────────────────────────┘

AWS::Lambda::                     #RESPROPs: LayerVersionArn, Action, Principal, OrganizationId
 LayerVersionPermission           #Cannot update (replace only)

ICLAYER_VERSION.addPermission
 ('CLAYER_PERMISSION', OPTS)      #Create a LAYER_PERMISSION
OPTS.accountId                    #LAYER_PERMISSION.Principal
OPTS.organizationId               #LAYER_PERMISSION.*

                                  ┌─────────────────────┐
                                  │   RESOURCE POLICY   │
                                  └─────────────────────┘

RESOURCE_POLICY                   #Underlying POLICY_DOC used by PERMISSIONs
                                  #Can set it directly, overwriting any PERMISSION
RESOURCE_POLICY.Policy            #'POLICY_DOC_JSON'. Same constraints as PERMISSIONs
                                  #Unlike PERMISSIONs, can use full POLICY_DOC syntax (e.g. Deny, any COND_KEY, etc.)
                                  #STATEMENT.Effect 'Deny': only for PACTIONs InvokeFunction, Create|UpdateAlias, UpdateFunctionConfiguration, UpdateFunctionCode
                                  #Max 20KB
RESOURCE_POLICY.RevisionId        #'REVISION_ID', like PERMISSION.*

                                  ┌──────────────────────────┐
                                  │   RESOURCE POLICY AUTH   │
                                  └──────────────────────────┘

PACTION lambda:AddPermission      #Required together with PACTION lambda:PutResourcePolicy
PACTION lambda:RemovePermission   #Required together with PACTION lambda:Put|DeleteResourcePolicy
PACTION lambda:GetPolicy          #Required together with PACTION lambda:GetResourcePolicy

                                  ┌─────────────────────────┐
                                  │   RESOURCE POLICY API   │
                                  └─────────────────────────┘

PUT /resource-policy
 /SHORT_FUNC_VERSION_ARN          #Req: RESOURCE_POLICY
PutResourcePolicy()               #Res: RESOURCE_POLICY
GET /resource-policy
 /SHORT_FUNC_VERSION_ARN          #Req: empty
GetResourcePolicy()               #Res: RESOURCE_POLICY
DELETE /resource-policy
 /SHORT_FUNC_VERSION_ARN          #Req: RESOURCE_POLICY
DeleteResourcePolicy()            #Res: empty

                                  ┌───────────────────┐
                                  │   PUBLIC ACCESS   │
                                  └───────────────────┘

PUBLIC_ACCESS_BLOCK               #BOOL (def: true). Do not allow RESOURCE_POLICYs that grant public access:
 .BlockPublicPolicy               #  - same rules as S3
                                  #  - always includes FUNC_URL, even with FUNC_URL.AuthType 'NONE'
PUBLIC_ACCESS_BLOCK               #BOOL (def: true). Do not allow public access, regardless of RESOURCE_POLICYs
 .RestrictPublicResource          #E.g. no FUNC_URLs, regardless of RESOURCE_POLICYs
                                  #Should be set to false if BlockPublicPolicy is false

                                  ┌───────────────────────┐
                                  │   PUBLIC ACCESS API   │
                                  └───────────────────────┘

PUT /public-access-block/FUNC_ARN #Req: PublicAccessBlockConfig PUBLIC_ACCESS_BLOCK
PutPublicAccessBlockConfig()      #Res: PublicAccessBlockConfig PUBLIC_ACCESS_BLOCK
GET /public-access-block/FUNC_ARN #Req: empty
GetPublicAccessBlockConfig()      #Res: PublicAccessBlockConfig PUBLIC_ACCESS_BLOCK

                                  ┌───────────────────────┐
                                  │   CODE SIGNING MAIN   │
                                  └───────────────────────┘

CODE_SIGNING                      #Require signing a code package to publish it
                                  #Uses AWS Signer
CODE_SIGNING.Description          #STR
CODE_SIGNING.LastModified         #'DATE'

CODE_SIGNING.CodeSigningConfigArn #CODE_SIGNING_ARN
                                  #'arn:aws:lambda:REGION:ACCOUNT_ID:code-signing-config:CODE_SIGNING'
CODE_SIGNING.CodeSigningConfigId  #'CODE_SIGNING'.
                                  #'csc-' followed by [:alnum:]_-.
CODE_SIGNING.AllowedPublishers
 .SigningProfileVersionArns       #SIGNING_PROFILE_ARN_ARR allowed to sign a code package
CODE_SIGNING                      #What to do when code package not properly signed. Either
 .CodeSigningPolicies             #  - 'Warn' (def): CloudWatch log (LLEVENT) + METRIC
 .UntrustedArtifactOnDeployment   #  - 'Enforce': publish fails

                                  ┌───────────────────────────┐
                                  │   CODE SIGNING MAIN API   │
                                  └───────────────────────────┘

POST /code-signing-configs        #Req: CODE_SIGNING
CreateCodeSigningConfig()         #  - no CodeSigningConfigArn|Id, LastModified
                                  #Res: CODE_SIGNING
PUT /code-signing-configs         #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - no CodeSigningConfigId, LastModified, Tags
UpdateCodeSigningConfig()         #Res: CODE_SIGNING
GET /code-signing-configs         #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - only CodeSigningConfigArn
GetCodeSigningConfig()            #Res: CODE_SIGNING
                                  #  - no Tags
GET /code-signing-configs         #Req: empty
ListCodeSigningConfigs()          #Res: CodeSigningConfigs CODE_SIGNING_ARR
                                  #  - no Tags
DELETE /code-signing-configs      #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - only CodeSigningConfigArn
DeleteCodeSigningConfig()         #Res: empty

                                  ┌───────────────────────────┐
                                  │   CODE SIGNING MAIN IAC   │
                                  └───────────────────────────┘

AWS::Lambda::CodeSigningConfig    #RESPROPs: Description, AllowedPublishers, CodeSigningPolicies
                                  #RESATTRs: CodeSigningConfigArn, CodeSigningConfigId

new CodeSigningConfig
 (...CARGS, OPTS)                 #CCODE_SIGNING. CKRESOURCE wrapping CODE_SIGNING
CodeSigningConfig
 .fromCodeSigningConfigArn
 (...CARGS, 'SIGNING_PROFILE_ARN')
 ->ICCODE_SIGNING                 #
OPTS.description
ICCODE_SIGNING
 .codeSigningConfigArn
 |codeSigningConfigId
OPTS.untrustedArtifactOnDeployment#CODE_SIGNING.*
OPTS.signingProfiles              #AWS Signer ICSIGNING_PROFILE_ARR. CODE_SIGNING.AllowedPublishers.SigningProfileVersionArns

                                  ┌───────────────────────────┐
                                  │   CODE SIGNING FUNCTION   │
                                  └───────────────────────────┘

FUNC_CODE_SIGNING                 #Associate a FUNCTION with a CODE_SIGNING
                                  #Only if PackageType 'Zip'
                                  #Not logged with CloudTrail
FUNC_CODE_SIGNING.FunctionName    #SHORT_FUNC_ARN
FUNC_CODE_SIGNING|NEW_FUNC_VERSION
 .CodeSigningConfigArn            #CODE_SIGNING_ARN

FUNC_VERSION
 .SigningProfileVersionArn        #AWS Signer's SIGNING_PROFILE_ARN
FUNC_VERSION.SigningJobArn        #AWS Signer's SIGNING_JOB_ARN

                                  ┌────────────────────────────────┐
                                  │   CODE SIGNING FUNCTION AUTH   │
                                  └────────────────────────────────┘

COND_KEY                          #FUNC_CODE_SIGNING|NEW_FUNC_VERSION.CodeSigningConfigArn
 lambda:CodeSigningConfigArn      #Only with PutFunctionCodeSigningConfig|CreateFunction()

                                  ┌───────────────────────────────┐
                                  │   CODE SIGNING FUNCTION API   │
                                  └───────────────────────────────┘

PUT /functions/SHORT_FUNC_ARN
 /code-signing-config             #Req: FUNC_CODE_SIGNING
PutFunctionCodeSigningConfig()    #Res: FUNC_CODE_SIGNING
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_CODE_SIGNING
 /code-signing-config             #  - no CodeSigningConfigArn
GetFunctionCodeSigningConfig()    #Res: FUNC_CODE_SIGNING
GET /code-signing-configs
 /CODE_SIGNING_ARN/functions      #Req: FUNC_CODE_SIGNING
ListFunctionsByCodeSigningConfig()#Res: FunctionArns FUNC_VERSION_ARN_ARR
DELETE /functions/SHORT_FUNC_ARN  #Req: FUNC_CODE_SIGNING
 /code-signing-config             #  - no CodeSigningConfigArn
DeleteFunctionCodeSigningConfig() #Res: empty

                                  ┌───────────────────────────────┐
                                  │   CODE SIGNING FUNCTION IAC   │
                                  └───────────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: CodeSigningConfigArn

CFUNCTION_OPTS.codeSigningConfig  #CCODE_SIGNING. FUNC_CODE_SIGNING

                                  ┌───────────────┐
                                  │   LIFECYCLE   │
                                  └───────────────┘

INVOCATION                        #Single run of a FUNC_VERSION
                                  #Can be done by Invoke(), FUNC_URL, or TRIGGER

FUNC_INSTANCE                     #When a FUNC_VERSION is first invoked, a FUNC_INSTANCE boots ("cold start"/"init"):
                                  #  - code is downloaded
                                  #  - runtime is initialized
                                  #     - for most runtimes, ~200-500ms
                                  #     - with PackageType 'Image', ~750-1250ms
                                  #  - function is initialized
                                  #     - e.g. top-level scope is read with Node.js
                                  #     - done sync, i.e. might freeze in the middle of any async ongoing logic
                                  #        - can workaround this by performing any one-time async logic in the main handler,
                                  #          but guarding it using a top-level BOOL
                                  #  - not charged
                                  #  - max 10s
                                  #     - otherwise, restarted, slower and charged
                                  #After each INVOCATION:
                                  #  - the FUNC_INSTANCE stays up to be re-used by the next INVOCATION
                                  #  - the environment is frozen
                                  #  - any background process still running will resume in next INVOCATION
                                  #After each INVOCATION that crashes process or times out:
                                  #  - the runtime|function is shutdown
                                  #  - FUNC_INSTANCE stays up, but the runtime|function is re-initialized in next INVOCATION
                                  #     - but the code is not re-downloaded
                                  #After 5m-7m idle, the runtime and FUNC_INSTANCE are shutdown
                                  #  - max 2s, otherwise SIGKILL
                                  #"Proactive initialization":
                                  #  - cold start happening pre-emptively, before INVOCATION
                                  #     - similar to how PCONCURRENCY behaves
                                  #  - when:
                                  #     - a new FUNC_VERSION is created for a FUNCTION that usually has many concurrent FUNC_INSTANCEs
                                  #        - done as many times as that usual concurrency
                                  #     - "eager assignment":
                                  #        - a FUNC_INSTANCE started but was not used because another FUNC_INSTANCE2
                                  #          became available while it was cold starting
                                  #        - FUNC_INSTANCE remains then available for other INVOCATIONs
                                  #  - not guaranteed: this happens only sometimes

                                  ┌──────────────────────────┐
                                  │   LIFECYCLE MIDDLEWARE   │
                                  └──────────────────────────┘

@middy/warmup                     #Part of Middy (see its doc)
WARMUP([OPTS])->MIDDY_MDWR        #Make a dummy ('warmup') early response for specific requests
                                  #Meant for requests made at regular intervals to avoid cold start
OPTS.isWarmingUp                  #FUNC(REQ)->BOOL
                                  #Def: if REQ.source 'serverless-plugin-warmup', which is a Serverless plugin for that purpose

                                  ┌───────────────────────┐
                                  │   LIFECYCLE METRICS   │
                                  └───────────────────────┘

AWS/Lambda/Invocations            #CloudWatch METRIC with NUM of INVOCATIONs, excluding invocation errors
                                  #cdk-monitoring-constructs:
                                  #  - count: METRIC, WIDGET, MALARM MinInvocationCount < CXALARM_OPTS.minCount
                                  #  - rate/s: METRIC, summary WIDGET, MALARM Low|HighTps < > CXALARM_OPTS.min|maxTps
Function.metricAllInvocations
 ([CMETRIC_OPTS])->CMETRIC        #

AWS/Lambda/Duration               #CloudWatch METRIC with NUM of ms spent handling request
                                  #cdk-monitoring-constructs:
                                  #  - p50|90|99: METRIC, summary WIDGET, MALARM Latency-P50|90|99 > CXALARM_OPTS.maxLatency DURATION
                                  #  - max: MALARM MaxLatency > CXALARM_OPTS.maxLatency DURATION
Function.metricAllDuration
 ([CMETRIC_OPTS])->CMETRIC        #

                                  ┌────────────┐
                                  │   INVOKE   │
                                  └────────────┘

INVOCATION_REQ                    #Request of an INVOCATION
                                  #Is a CloudTrail DATA_ACTION
INVOCATION_REQ.FunctionArn        #SHORT_FUNC_VERSION_ARN

INVOCATION_REQ.InvocationType     #STR. One of:
                                  #  - 'RequestResponse' (def): sync call
                                  #  - 'Event':
                                  #     - async call
                                  #     - client's request is placed in a queue
                                  #        - empty response returned to client
                                  #     - queue sends requests to FUNCTION
                                  #        - FUNCTION's response is ignored
                                  #  - 'DryRun': only validate parameters and permissions
INVOCATION_REQ.Payload            #'JSON'. Request payload
                                  #Sometimes also called "event"
                                  #Max size depends on InvocationType:
                                  #  - RequestResponse|DryRun: 6MB
                                  #  - Event: 256KB
                                  #In CLI: FILE, in SDK: INPUT_BLOB
INVOCATION_REQ.ClientContext      #STR. Base64-encoded context 'JSON' to pass to FUNCTION
                                  #Only if InvocationType 'RequestResponse'

INVOCATION_RES                    #Response of an INVOCATION
                                  #In CLI: FILE, in SDK: OUTPUT_BLOB
INVOCATION_RES.StatusCode         #NUM
                                  #On success or function error, depends on InvocationType:
                                  #  - RequestResponse: 200
                                  #  - Event: 202
                                  #  - DryRun: 204
                                  #On invocation error: 4**|5**
INVOCATION_RES.FunctionError      #'MESSAGE' on function error
INVOCATION_RES.ResponseBody       #STR, as sent by FUNCTION
                                  #Or ERROR_RES on function error
                                  #Empty if InvocationType 'Event|DryRun'
                                  #Max size: 6MB
INVOCATION_RES.ExecutedVersion    #VERSION_NUM

ERROR_RES                         #JSON response sent on function errors
ERROR_RES.errorType               #STR. ERROR.name
ERROR_RES.errorMessage            #STR. ERROR.message
ERROR_RES.stackTrace              #STR_ARR. ERROR.stack
ERROR_RES.cause                   #ERROR_RES. ERROR.cause

CLOUDTRAIL_SMETADATA
 ESMDisableReason                 #'ERROR' when could not start Invoke() due to wrong FUNCTION, REGION, authorization, etc.

                                  ┌─────────────────┐
                                  │   INVOKE AUTH   │
                                  └─────────────────┘

PACTION InvokeFunction            #Name for Invoke() instead

AWSLambdaRole                     #AWS managed POLICY to allow InvokeFunction

                                  ┌────────────────┐
                                  │   INVOKE API   │
                                  └────────────────┘

POST /functions                   #Req: INVOCATION_REQ
 /SHORT_FUNC_VERSION_ARN          #  - URI path: FunctionArn
 /invocations                     #  - X-Amz-* [C] header: Invocation-Type|Client-Context|Log-Type
Invoke()                          #  - Request payload: Payload
                                  #Response: INVOCATION_RES
                                  #  - status code: StatusCode
                                  #  - X-Amz-* [S] headers: Executed-Version|Log-Result|Function-Error
                                  #  - body: ResponseBody

                                  ┌───────────────────┐
                                  │   INVOKE PULUMI   │
                                  └───────────────────┘

INVOCATION_REQ_RPROPS.triggers    #TRIGGER_OBJ

                                  ┌────────────────────┐
                                  │   INVOKE TOOLKIT   │
                                  └────────────────────┘

REMOTE INVOKE ==>                 #Can invoke from "Explorer"

                                  ┌────────────────┐
                                  │   TEST EVENT   │
                                  └────────────────┘

TEST_EVENT                        #INVOCATION_REQ saved for test purpose
                                  #Can be either:
                                  #  - private: user-specific
                                  #     - max: 10
                                  #  - shared: AWS account-specific
                                  #     - saved as SCHEMAs in an EventBridge SCHEMA_REGISTRY named 'lambda-testevent-schemas'

EVENT BRIDGE ==>                  #Uses EventBridge under-the-hood
                                  #Schema registry 'lambda-testevent-schemas'
                                  #Schema name '_FUNCTION-schema'
                                  #Schema value is OpenAPI v3 SPEC
                                  #  - SPEC.components.examples.TEST_EVENT.value INVOCATION_REQ
                                  #Uses versioning, i.e. keep previous versions

                                  ┌─────────────────────┐
                                  │   TEST EVENT AUTH   │
                                  └─────────────────────┘

PACTION schemas:Create|Update
 |Describe|DeleteSchema
PACTION
 schemas:GetDiscoveredSchema
PACTION
 schemas:Create|DescribeRegistry
PACTION
 schemas:List|DeleteSchemaVersion #Required

                                  ┌────────────────────────┐
                                  │   TEST EVENT TOOLKIT   │
                                  └────────────────────────┘

USE TEST EVENT ==>                #When invoking a FUNCTION

                                  ┌───────────────┐
                                  │   STREAMING   │
                                  └───────────────┘

INVOCATION_RES.EventStream        #Like INVOCATION_RES.ResponseBody but streamed:
                                  #  - each payload is an INVOCATION_RES_EVENT
                                  #  - most payloads have a PayloadChunk
                                  #  - the last payload has an InvokeComplete
                                  #Uses HTTP 1.1 chunked transfer encoding
                                  #INVOCATION_REQ.InvocationType cannot be 'Event'
                                  #Cannot invoke through:
                                  #  - API Gateway AWS_PROXY (but HTTP_PROXY works)
                                  #  - ALB
                                  #Only with Node runtime
                                  #Total max size: 20MB
                                  #Max bandwidth: 2MB/s

INVOCATION_RES_EVENT.PayloadChunk #INVOCATION_RES_CHUNK
INVOCATION_RES_CHUNK.Payload      #'BASE64'
INVOCATION_RES
 .ResponseStreamContentType       #'MIME' of each INVOCATION_RES_CHUNK

INVOCATION_RES_EVENT
 .InvokeComplete                  #INVOCATION_RES_END
INVOCATION_RES_END.ErrorCode      #STR
INVOCATION_RES_END.ErrorDetails   #STR

FUNC_URL.InvokeMode               #Either:
                                  #  - 'BUFFERED' (def): use Invoke()
                                  #  - 'RESPONSE_STREAM': use InvokeWithResponseStream()

                                  ┌────────────────────┐
                                  │   STREAMING AUTH   │
                                  └────────────────────┘

PACTION lambda:InvokeFunction     #Used for InvokeWithResponseStream() instead

                                  ┌───────────────────┐
                                  │   STREAMING API   │
                                  └───────────────────┘

POST /functions                   #Req: INVOCATION_REQ
 /SHORT_FUNC_VERSION_ARN          #Res: INVOCATION_RES
 /response-streaming-invocations  #  - ResponseBody -> EventStream
InvokeWithResponseStream()        #  - FunctionError|LogResult -> INVOCATION_RES_END.*

                                  ┌────────────────────────┐
                                  │   STREAMING FUNCTION   │
                                  └────────────────────────┘

awslambda                         #Global variable
awslambda.streamifyResponse       #Must use this as the Node.js HANDLER instead of FUNC(REQ, NCONTEXT)->>RES
 (FUNC(REQ, OSTREAM, NCONTEXT)->>)#Must write STR chunks to OSTREAM, then call OSTREAM.end()

awslambda.HttpResponseStream.from #Used to set response status|headers
 (OSTREAM[, OPTS])->OSTREAM2      #Must then write to OSTREAM2 instead
OPTS.statusCode|headers|cookies   #Like FUNC_URL_RES.*, i.e. sets response status|headers

OSTREAM.setContentType('MIME')    #Sets INVOCATION_RES.ResponseStreamContentType

                                  ┌───────────────────┐
                                  │   STREAMING SDK   │
                                  └───────────────────┘

INVOCATION_RES.EventStream        #ASYNC_ITERABLE of INVOCATION_RES_EVENT

                                  ┌───────────────────┐
                                  │   STREAMING CLI   │
                                  └───────────────────┘

STREAMING WITH CLI ==>            #Not available

                                  ┌───────────────────┐
                                  │   STREAMING IAC   │
                                  └───────────────────┘

AWS::Lambda::Url                  #Includes RESPROPs: InvokeMode

CFUNC_URL_OPTS.invokeMode         #FUNC_URL.*

                                  ┌──────────────────────────┐
                                  │   STREAMING MIDDLEWARE   │
                                  └──────────────────────────┘

MIDDY_OPTS.streamifyResponse      #BOOL (def: false). When using FUNC_URL.InvokeMode 'RESPONSE_STREAM' (see Lambda doc)
                                  #Use awslambda.streamifyResponse() and awslambda.HttpResponseStream.from() under-the-hood
                                  #Part of Middy (see its doc)

FUNC(REQ, NCONTEXT)
 ->>RES_OBJ[.body]                #Must be used as HANDLER instead

RES_OBJ.statusCode                #NUM. Required if returning REQ_OBJ.body, else def 200
RES_OBJ.headers                   #OBJ
RES_OBJ.cookies                   #'VAR=VAL[;...]'_ARR
RES_OBJ.body                      #ISTREAM|STR (def: '')

                                  ┌─────────┐
                                  │   URL   │
                                  └─────────┘

FUNC_URL                          #HTTP[S] URL to invoke a FUNCTION directly
                                  #Public by default
                                  #IPv4|6
FUNC_URL.FunctionArn              #SHORT_FUNC_VERSION_ARN
                                  #Can use an ALIAS but not a VERSION_NUM
FUNC_URL.CreationTime             #'DATE'
FUNC_URL.LastModifiedTime         #'DATE'

FUNC_URL.FunctionUrl              #'https://URL_ID.lambda-url.REGION.on.aws'

FUNC_URL.AuthType                 #Authentication to access the URL, among:
PERMISSION.FunctionUrlAuthType    #  - 'NONE' (def)
                                  #  - 'AWS_IAM': only IAM-authenticated users

FUNC_URL.Cors                     #CORS headers
CORS.AllowOrigins                 #'URI'_ARR
CORS.AllowMethods                 #'METHOD'_ARR
CORS.AllowHeaders                 #'HEADER'_ARR
CORS.AllowCredentials             #BOOL (def: false)
CORS.MaxAge                       #NUM (in secs). Def: 5s. Max: 1 day
CORS.ExposeHeaders                #'HEADER'_ARR

                                  ┌──────────────┐
                                  │   URL AUTH   │
                                  └──────────────┘

PACTION lambda:InvokeFunctionUrl  #Allow accessing the URL

COND_KEY
 lambda:FunctionUrlAuthType       #FUNC_URL.AuthType. Only with *FunctionUrlConfig*() and *Permissions*()

                                  ┌─────────────┐
                                  │   URL API   │
                                  └─────────────┘

POST /functions                   #Req: FUNC_URL
 /SHORT_FUNC_VERSION_ARN/url      #  - no FunctionUrl, CreationTime, LastModifiedTime
CreateFunctionUrlConfig()         #Res: FUNC_URL
PUT /functions                    #Req: FUNC_URL
 /SHORT_FUNC_VERSION_ARN/url      #  - no FunctionUrl, CreationTime, LastModifiedTime
UpdateFunctionUrlConfig()         #Res: FUNC_URL
GET /functions
 /SHORT_FUNC_VERSION_ARN/url      #Req: empty
GetFunctionUrlConfig()            #Res: FUNC_URL
GET /functions/SHORT_FUNC_ARN/urls#Req: empty
ListFunctionUrlConfigs()          #Res: FunctionUrlConfigs FUNC_URL_ARR
DELETE /functions
 /SHORT_FUNC_VERSION_ARN/url      #Req: empty
DeleteFunctionUrlConfig()         #Res: empty

                                  ┌─────────────┐
                                  │   URL IAC   │
                                  └─────────────┘

AWS::Lambda::Url                  #RESPROPs: TargetFunctionArn, Qualifier, AuthType, Cors
                                  #RESATTRs: FunctionArn, FunctionUrl
AWS::Lambda::Permission           #Includes RESPROPs: FunctionUrlAuthType

new FunctionUrl(...CARGS, OPTS)   #CFUNC_URL. CKRESOURCE wrapping FUNC_URL
ICANYFUNC.addFunctionUrl
 (OPTS)->CFUNC_URL                #Same but sets OPTS.function ICANYFUNC

CFUNC_URL.functionArn             #'FUNC_VERSION_ARN'_CSATTR. FUNC_URL.*
OPTS|CFUNC_URL.function           #ICANYFUNC (except CFUNC_VERSION)

CFUNC_URL.url                     #'URL'_CSATTR. FUNC_URL.FunctionUrl

CFUNC_URL|ICANYFUNC.grantInvokeUrl
 (YGRANTABLE)->CGRANT             #Like ICANYFUNC.grantInvoke() but for PACTION lambda:InvokeFunctionUrl

OPTS.authType                     #FUNC_URL.AuthType (def: 'AWS_IAM')
                                  #If 'NONE', create a PERMISSION to allow PACTION 'lambda:InvokeFunctionUrl' to Principal '*'
CPERMISSION_OBJ                   #PERMISSION.FunctionUrlAuthType
 .functionUrlAuthType             #Def:
                                  #  - CFUNC_URL|ICANYFUNC.grantInvokeUrl(): 'AWS_IAM'
                                  #  - ICANYFUNC.addPermission(): 'NONE'

OPTS.cors                         #FUNC_URL.Cors
                                  #CORS.MaxAge is DURATION
                                  #CORS.AllowedMethods default to ['*']

                                  ┌─────────────────┐
                                  │   URL METRICS   │
                                  └─────────────────┘

AWS/Lambda/UrlRequestCount        #NUM of requests through FUNC_URLs
AWS/Lambda/Url4xx|5xxError        #Same but only for requests with 4**|5** response

AWS/Lambda/UrlRequestLatency      #NUM of ms FUNC_URLs spent handling requests

                                  ┌──────────────┐
                                  │   URL LINT   │
                                  └──────────────┘

cdk-nag LambdaFunctionUrlAuth     #FUNC_URL.AuthType must not be 'NONE'

                                  ┌────────────────────┐
                                  │   URL INVOCATION   │
                                  └────────────────────┘

FUNC_URL_REQ                      #Request made over a FUNC_URL
FUNC_URL_REQ.requestContext       #FUNC_URL_REQ_CONTEXT
FUNC_URL_REQ_CONTEXT.http         #FUNC_URL_REQ_CONTEXT_HTTP

FUNC_URL_REQ.version              #'2.0'. 'FUNC_URL_REQ's format

FUNC_URL_REQ_CONTEXT_HTTP.protocol#'HTTP/NUM'
FUNC_URL_REQ_CONTEXT_HTTP.method  #STR, e.g. 'POST'
FUNC_URL_REQ_CONTEXT.apiId        #'FUNC_URL_ID'
FUNC_URL_REQ_CONTEXT.domainPrefix #'URL_ID'
FUNC_URL_REQ_CONTEXT.domainName   #'URL_ID.lambda-url.REGION.on.aws'
FUNC_URL_REQ.rawPath
FUNC_URL_REQ_CONTEXT_HTTP.path    #'/PATH'

FUNC_URL_REQ.rawQueryString       #Query string as 'VAR=VAL&...'
FUNC_URL_REQ.queryStringParameters#Query string as OBJ, after percent-decoding
                                  #Duplicate keys have their value ,-joined
FUNC_URL_REQ.headers              #OBJ
                                  #Duplicate keys have their value ,-joined
FUNC_URL_REQ.cookies              #'VAR=VAL[;...]'_ARR
FUNC_URL_REQ.body                 #STR
                                  #If body is:
                                  #  - JSON: serialized
                                  #  - binary: base64-encoded
FUNC_URL_REQ.isBase64Encoded      #BOOL

FUNC_URL_REQ_CONTEXT.requestId    #'REQ_ID'. Request UUID
FUNC_URL_REQ_CONTEXT.time         #'DATE'
FUNC_URL_REQ_CONTEXT.timeEpoch    #DATE_NUM
FUNC_URL_REQ_CONTEXT_HTTP.sourceIp#'IPv4|v6'
FUNC_URL_REQ_CONTEXT_HTTP
 .userAgent                       #STR

FUNC_URL_REQ_CONTEXT.accountId    #ACCOUNT_ID of FUNCTION
FUNC_URL_REQ_CONTEXT              #FUNC_URL_REQ_IAM. Caller's IAM identity
 .authorizer.iam                  #null if none
FUNC_URL_REQ_IAM.principalOrgId   #STR|null
FUNC_URL_REQ_IAM.accountId        #ACCOUNT_ID of caller
FUNC_URL_REQ_IAM.userArn          #USER_ARN
FUNC_URL_REQ_IAM.userId           #'USER'
FUNC_URL_REQ_IAM.cognitoIdentity  #STR|null
FUNC_URL_REQ_IAM.callerId         #STR
FUNC_URL_REQ_IAM.accessKey        #STR

FUNC_URL_RES                      #Response made over a FUNC_URL
FUNC_URL_RES.statusCode           #NUM
                                  #Def: 200
FUNC_URL_RES.headers              #OBJ
                                  #Def Content-Type: 'application/json' [S]
FUNC_URL_RES.cookies              #'VAR=VAL[;...]'_ARR
                                  #Def: []
                                  #Prefer using it instead of setting Cookies [S] with FUNC_URL_RES.headers
FUNC_URL_RES.body                 #STR
FUNC_URL_RES.isBase64Encoded      #BOOL
                                  #Def: false

                                  ┌──────────────────┐
                                  │   TRIGGER MAIN   │
                                  └──────────────────┘

TRIGGER ==>                       #Resource from another SERVICE invoking a FUNCTION

SYNC TRIGGER ==>                  #TRIGGER with InvocationType 'RequestResponse'
                                  #One of: Alexa, API Gateway, CloudFront (Lambda@Edge), Cognito, Connect,
                                  #ELB, Kinesis Data Firehose, Lex, S3 Batch, Secrets Manager

ASYNC TRIGGER ==>                 #TRIGGER with InvocationType 'Event'
                                  #One of: CloudFormation, EventBridge (CloudWatch Events), CloudWatch Logs,
                                  #CodeCommit, CodePipeline, Config, IoT [Events], SES, SNS, S3

EVENT_SOURCE                      #TRIGGER with InvocationType 'RequestResponse', that polls for batches of events
                                  #One of: MSK, self-managed Kafka, MQ, self-managed RabbitMQ, Kinesis, DynamoDB, DocumentDB, SQS

SPECIAL TRIGGER ==>               #AWS EFS and X-Ray

                                  ┌────────────────────┐
                                  │   TRIGGER PULUMI   │
                                  └────────────────────┘

CW.lambda.EventSubscription       #KREZ representing a TRIGGER FUNCTION
                                  #  - can be an EFUNC
                                  #  - automatically setup, including PERMISSION
                                  #Base class inherited by specific SERVICEs, either:
                                  #  - PARENT_REZ.onEVENT|onEvent('FUNCTION', EFUNC, SUBSCRIPTION_REZ_RPROPS, KROPTS)->SUBSCRIPTION
                                  #  - new PARENT_REZEventSubscription('FUNCTION', PARENT_REZ, EFUNC, SUBSCRIPTION_REZ_RPROPS, KROPTS)
NEVENT_SUBSCRIPTION.func          #FUNCTION
NEVENT_SUBSCRIPTION.permission    #PERMISSION. Usually:
                                  #  - allow lambda:invokeFunction
                                  #  - on FUNCTION
                                  #  - from Principal.Service 'SERVICE_DOMAIN'
                                  #  - with COND_KEY aws:sourceArn PARENT_REZ_ARN
NEVENT_SUBSCRIPTION.PARENT_CLASS  #PARENT_REZ. REZ making the request, e.g. SNS TOPIC.
                                  #Also passed to ROPTS.parent
NEVENT_SUBSCRIPTION.subscription  #SUBSCRIPTION_REZ. REZ registering the subscription, e.g. SNS TOPIC_SUBSCRIPTION

                                  ┌───────────┐
                                  │   ERROR   │
                                  └───────────┘

INVOCATION ERROR ==>              #Error unrelated to the FUNCTION's code:
                                  #  - permissions
                                  #  - quotas, throttling, concurrency
                                  #  - max EVENT_INVOKE retries
FUNCTION ERROR ==>                #Error related to the FUNCTION's code:
                                  #  - Runtime: process exit, timeout, invalid payload
                                  #  - Function: error response, exception
FINAL SUCCESS|ERROR ==>           #State after all retries, for both invocation|function error

FUNC_VERSION.Environment|
 ImageConfigResponse|
 RuntimeVersionConfig.Error       #FUNC_VERSION_ERROR. Error when Environment|ImageConfig|Runtime cannot be applied
FUNC_VERSION_ERROR.Message        #STR
FUNC_VERSION_ERROR.ErrorCode      #STR

FUNC_VERSION.TracingConfig        #TRACING. AWS X-Ray configuration.
TRACING.Mode                      #'Disabled' (def), 'Active' or 'PassThrough'

                                  ┌────────────────┐
                                  │   ERROR AUTH   │
                                  └────────────────┘

PACTION xray:*                    #Required with FUNC_VERSION.Role for FUNC_VERSION.TracingConfig
                                  #E.g. using AWSXRayDaemonWriteAccess AWS managed POLICY

                                  ┌───────────────┐
                                  │   ERROR IAC   │
                                  └───────────────┘

AWS::Lambda::Function             #Includes RESPROPs: TracingConfig

CFUNCTION_OPTS.tracing            #TRACING.*
                                  #Automatically allows FUNC_VERSION.Role to PACTIONs xray:PutTraceSegments|PutTelemetryRecords

                                  ┌───────────────────┐
                                  │   ERROR METRICS   │
                                  └───────────────────┘

AWS/Lambda/Errors                 #NUM of INVOCATIONs with a FUNCTION error
                                  #cdk-monitoring-constructs:
                                  #  - count: METRIC, WIDGET, MALARM FaultCount > CXALARM_OPTS.maxErrorCount
                                  #  - rate: METRIC, summary WIDGET, MALARM FaultRate > CXALARM_OPTS.maxErrorRate
Function.metricAllErrors
 ([CMETRIC_OPTS])->CMETRIC        #

                                  ┌────────────────┐
                                  │   ERROR LINT   │
                                  └────────────────┘

cfn-lint-serverless aws_lambda
 _function_tracing_rule
 (WS1000)                         #TRACING.Mode must be 'Active'

                                  ┌─────────────┐
                                  │   TIMEOUT   │
                                  └─────────────┘

FUNC_VERSION.Timeout              #NUM (in secs). Times out for each INVOCATION
                                  #Excludes initialization, but includes extensions
                                  #Def: 3s, max: 15m

                                  ┌─────────────────┐
                                  │   TIMEOUT IAC   │
                                  └─────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: Timeout

CFUNCTION[_OPTS].timeout          #DURATION. FUNC_VERSION.*

                                  ┌──────────────────┐
                                  │   TIMEOUT LINT   │
                                  └──────────────────┘

cfn-lint-serverless aws_lambda
 _function_default_timeout
 (ES1006)                         #FUNC_VERSION.Timeout must be set

                                  ┌──────────────────────┐
                                  │   TIMEOUT FUNCTION   │
                                  └──────────────────────┘

NCONTEXT
 .getRemainingTimeInMillis()->NUM #NUM of ms before timeout

                                  ┌────────────────────────┐
                                  │   TIMEOUT MIDDLEWARE   │
                                  └────────────────────────┘

MIDDY_OPTS.timeoutEarlyInMillis   #NUM (in ms, def: 5)
                                  #Time out the HANDLER NUMms before the INVOCATION itself times out (NCONTEXT.getRemainingTimeInMillis())
                                  #'after|onError' STEPs and MIDDY_OPTS.* hooks are still run
                                  #  - NUM should be high enough for this logic to run
                                  #Part of Middy, see its doc

MIDDY_OPTS.timeoutEarlyResponse   #FUNC()->RES used instead of HANDLER when it times out
                                  #Def: throw an ERROR with name 'TimeoutError' and cause.package '@middy/core'

{signal: ABORT_SIGNAL}            #Passed as third argument to HANDLER, when using Middy
                                  #Aborted on HANDLER timeout
                                  #When HANDLER times out, it is short-circuited with Promise.race(), but it still runs
                                  #I.e. must use that ABORT_SIGNAL to interrupt any ongoing logic on timeout

                                  ┌───────────────┐
                                  │   RECURSION   │
                                  └───────────────┘

RECURSION.RecursiveLoop           #Whether enabled: 'Terminate' (true, def) or 'Allow' (false)
                                  #When enabled, if Lambda FUNCTION is being called recursively, terminate it
                                  #E.g. two FUNCTIONs calling each other
                                  #Only between Lambda, S3, SQS and SNS
                                  #Based on X-Ray TRACING under-the-hood (even if not enabled)

                                  ┌───────────────────┐
                                  │   RECURSION API   │
                                  └───────────────────┘


PUT /functions/SHORT_FUNC_ARN
 /recursion-config                #Req: RECURSION
PutFunctionRecursionConfig()      #Res: RECURSION
GET /functions/SHORT_FUNC_ARN
 /recursion-config                #Req: empty
GetFunctionRecursionConfig()      #Res: RECURSION

                                  ┌───────────────────┐
                                  │   RECURSION IAC   │
                                  └───────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: RecursiveLoop

CFUNCTION_OPTS.recursiveLoop      #RECURSION.RecursiveLoop

                                  ┌───────────────────────┐
                                  │   RECURSION METRICS   │
                                  └───────────────────────┘

AWS/Lambda
 /RecursiveInvocationsDropped     #NUM of INVOCATIONs errored due to recursion

                                  ┌────────────────┐
                                  │   ASYNC MAIN   │
                                  └────────────────┘

EVENT_INVOKE                      #INVOCATION configuration for InvocationType 'Event'
                                  #Not logged by CloudTrail
EVENT_INVOKE.FunctionArn          #FUNC_VERSION_ARN
EVENT_INVOKE.LastModified         #DATE_NUM

                                  ┌────────────────────┐
                                  │   ASYNC MAIN API   │
                                  └────────────────────┘

PUT /functions
 /SHORT_FUNC_VERSION_ARN          #Req: EVENT_INVOKE
 /event-invoke-config             #  - no LastModified
PutFunctionEventInvokeConfig()    #Res: EVENT_INVOKE
POST /functions
 /SHORT_FUNC_VERSION_ARN          #Req: EVENT_INVOKE
 /event-invoke-config             #  - no LastModified
UpdateFunctionEventInvokeConfig() #Res: EVENT_INVOKE
GET /functions
 /SHORT_FUNC_VERSION_ARN
 /event-invoke-config             #Req: empty
GetFunctionEventInvokeConfig()    #Res: EVENT_INVOKE
GET /functions/SHORT_FUNC_ARN
 /event-invoke-config/list        #Req: empty
ListFunctionEventInvokeConfigs()  #Res: FunctionEventInvokeConfigs EVENT_INVOKE_ARR
DELETE /functions
 /SHORT_FUNC_VERSION_ARN
 /event-invoke-config             #Req: empty
DeleteFunctionEventInvokeConfig() #Res: empty

                                  ┌────────────────────┐
                                  │   ASYNC MAIN IAC   │
                                  └────────────────────┘

AWS::Lambda::EventInvokeConfig    #RESPROPs: FunctionName, Qualifier

new EventInvokeConfig
 (...CARGS, OPTS)                 #CEVENT_INVOKE. CKRESOURCE wrapping EVENT_INVOKE
ICANYFUNC
 .configureAsyncInvoke(OPTS)      #Same but with OPTS.function ICANYFUNC and OPTS.qualifier (if CFUNC_VERSION|CALIAS)
OPTS.function                     #ICANYFUNC. EVENT_INVOKE.FunctionArn (except QUALIFIER)
OPTS.qualifier                    #'QUALIFIER' (def: '$LATEST'). EVENT_INVOKE.FunctionArn (QUALIFIER)

                                  ┌────────────────────────┐
                                  │   ASYNC MAIN METRICS   │
                                  └────────────────────────┘

AWS/Lambda/AsyncEventsReceived    #NUM of started INVOCATIONs that are async,
                                  #i.e. either InvocationType 'Event', or EVENT_SOURCE

AWS/Lambda/AsyncEventsDropped     #NUM of async INVOCATIONs that failed due to final error

AWS/Lambda/AsyncEventAge          #NUM of secs to process async INVOCATIONs

                                  ┌───────────────────────┐
                                  │   ASYNC DESTINATION   │
                                  └───────────────────────┘

EVENT_INVOKE.DestinationConfig    #ARN receiving response (INVOKE_PAYLOAD) on final success|error
 .onSuccess|onFailure.Destination #Can be:
                                  #  - SQS QUEUE (not FIFO)
                                  #  - SNS TOPIC (not FIFO)
                                  #  - EventBridge EVENT_BUS
                                  #  - another FUNCTION

INVOKE_PAYLOAD.version            #Always '1.0'
INVOKE_PAYLOAD.timestamp          #'DATE'

INVOKE_PAYLOAD.requestPayload     #INVOCATION_REQ.Payload (as VAL)

INVOKE_PAYLOAD.responsePayload    #Either INVOCATION_RES.ResponseBody (as VAL)
INVOKE_PAYLOAD.responseContext    #INVOCATION_RES.*, camelCase'd, without ResponseBody

INVOKE_PAYLOAD.requestContext     #INVOKE_CONTEXT
INVOKE_CONTEXT.requestId          #'REQ_ID'
INVOKE_CONTEXT.functionArn        #FUNC_VERSION_ARN
INVOKE_CONTEXT
 .approximateInvokeCount          #NUM of invocations, including retries
INVOKE_CONTEXT.condition          #'RetriesExhausted', if failed after too many retries

                                  ┌────────────────────────────┐
                                  │   ASYNC DESTINATION AUTH   │
                                  └────────────────────────────┘

PACTION sqs:SendMessage           #Required with FUNC_VERSION.Role for EVENT_INVOKE.DestinationConfig with SQS
 |GetQueueAttributes|GetQueueUrl  #Also kms:* if needed
PACTION sns:Publish               #Required with FUNC_VERSION.Role for EVENT_INVOKE.DestinationConfig with SNS
PACTION events:PutEvents          #Required with FUNC_VERSION.Role for EVENT_INVOKE.DestinationConfig with EventBridge
PACTION lambda:InvokeFunction     #Required with FUNC_VERSION.Role for EVENT_INVOKE.DestinationConfig with Lambda
                                  #Alternatively, can use a PERMISSION

                                  ┌───────────────────────────┐
                                  │   ASYNC DESTINATION IAC   │
                                  └───────────────────────────┘

AWS::Lambda::EventInvokeConfig    #Includes RESPROPs: DestinationConfig

CANYFUNC_OPTS.onSuccess|onFailure #Like CEVENT_INVOKE_OPTS.* but also creates CEVENT_INVOKE
CEVENT_INVOKE_OPTS                #CDESTINATION. EVENT_INVOKE.DestinationConfig.*
 .onSuccess|onFailure             #Automatically grants to FUNC_VERSION.Role relevant PACTIONs (see above)
                                  #One of:
                                  #  - new SqsDestination(ICQUEUE)
                                  #  - new SnsDestination(ICTOPIC)
                                  #  - new EventBridgeDestination([ICEVENT_BUS])
                                  #     - def EVENT_BUS: named 'default'
                                  #  - new LambdaDestination(ICFUNCTION[, OPTS])
                                  #     - OPTS.responseOnly BOOL (def: false)
                                  #        - INVOKE_PAYLOAD -> INVOKE_PAYLOAD.responsePayload
                                  #        - the filtering is done using an EventBridge RULE in-between both FUNCTIONs

                                  ┌───────────────────────────────┐
                                  │   ASYNC DESTINATION METRICS   │
                                  └───────────────────────────────┘

AWS/Lambda/
 DestinationDeliveryFailures      #NUM of DestinationConfig that failed to send

                                  ┌────────────────────────────┐
                                  │   ASYNC DESTINATION LINT   │
                                  └────────────────────────────┘

cfn-lint-serverless
 aws_lambda_event_invoke_config
 _async_on_failure                #EVENT_INVOKE.DestinationConfig.OnFailure.Destination ARN must be set
 (ES1007)                         #A PERMISSION must also exist, with its FunctionName's value identical to EVENT_INVOKE.FunctionName

                                  ┌───────────────────────┐
                                  │   ASYNC DEAD LETTER   │
                                  └───────────────────────┘

FUNC_VERSION                      #ARN receiving request (INVOCATION_REQ) on final error
 .DeadLetterConfig.TargetArn      #Can be:
                                  #  - SQS_QUEUE_ARN (not FIFO)
                                  #  - SNS_TOPIC_ARN (not FIFO)
                                  #Unlike EVENT_INVOKE.DestinationConfig.OnFailure.Destination:
                                  #  - FUNC_VERSION-specific, not FUNCTION-specific
                                  #  - payload is INVOCATION_REQ, i.e. SQS|SNS can be used as EVENT_SOURCE to retry the event later
                                  #Only if InvocationType 'Event'

                                  ┌────────────────────────────┐
                                  │   ASYNC DEAD LETTER AUTH   │
                                  └────────────────────────────┘

PACTION sqs:SendMessage           #Required with FUNC_VERSION.Role for FUNC_VERSION.DeadLetterConfig with SQS
PACTION sns:Publish               #Required with FUNC_VERSION.Role for FUNC_VERSION.DeadLetterConfig with SNS

                                  ┌───────────────────────────┐
                                  │   ASYNC DEAD LETTER IAC   │
                                  └───────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: DeadLetterConfig

CFUNCTION[_OPTS].deadLetterQueue  #SQS ICQUEUE
                                  #Automatically allows FUNC_VERSION.Role to PACTION sqs:SendMessage
CFUNCTION_OPTS                    #BOOL (def: undefined)
 .deadLetterQueueEnabled          #If false, setting CFUNCTION_OPTS.deadLetterQueue throws
                                  #If true, default CFUNCTION_OPTS.deadLetterQueue is new QUEUE with retentionPeriod 14d
CFUNCTION[_OPTS].deadLetterTopic  #SNS ICTOPIC
                                  #Automatically allows FUNC_VERSION.Role to PACTION sns:Publish

                                  ┌───────────────────────────────┐
                                  │   ASYNC DEAD LETTER METRICS   │
                                  └───────────────────────────────┘

AWS/Lambda/DeadLetterErrors       #NUM of DeadLetterConfig that failed to send

                                  ┌────────────────────────────┐
                                  │   ASYNC DEAD LETTER LINT   │
                                  └────────────────────────────┘

cdk-nag LambdaDLQ                 #Validate FUNC_VERSION.DeadLetterConfig.TargetArn is set

                                  ┌─────────────────┐
                                  │   ASYNC RETRY   │
                                  └─────────────────┘

EVENT_INVOKE                      #Max NUM (in secs) of time to keep retrying on invocation error
 .MaximumEventAgeInSeconds        #Min: 1m, def|max: 6h
                                  #Retries uses exponential backoff from 1s to 5m
EVENT_INVOKE.MaximumRetryAttempts #NUM of retries on function error
                                  #Max: 2
                                  #The first retry is after 1m, the second after another 2m

                                  ┌─────────────────────┐
                                  │   ASYNC RETRY IAC   │
                                  └─────────────────────┘

AWS::Lambda::EventInvokeConfig    #Includes RESPROPs: MaximumEventAgeInSeconds, MaximumRetryAttempts

CANYFUNC_OPTS
 .maxEventAge|retryAttempts       #Like CEVENT_INVOKE_OPTS.* but also creates CEVENT_INVOKE
CEVENT_INVOKE_OPTS.maxEventAge    #DURATION. EVENT_INVOKE.*
CEVENT_INVOKE_OPTS.retryAttempts  #EVENT_INVOKE.*

                                  ┌────────────────┐
                                  │   BATCH MAIN   │
                                  └────────────────┘

EVENT_SOURCE                      #Make a FUNCTION poll for events from an AWS resource
EVENT_SOURCE.EventSourceMappingArn#EVENT_SOURCE_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:event-source-mapping:EVENT_SOURCE_MID'
EVENT_SOURCE.UUID                 #EVENT_SOURCE_MID
EVENT_SOURCE.FunctionArn          #FUNC_VERSION_ARN
EVENT_SOURCE.LastModified         #DATE_NUM

EVENT_SOURCE.State                #STR among:
                                  #  - 'Creating'
                                  #  - 'Enabling|Disabling', 'Enabled|Disabled'
                                  #  - 'Updating'
                                  #  - 'Deleting'
EVENT_SOURCE.StateTransitionReason#STR. Whether current EVENT_SOURCE.State is due to user or to system
EVENT_SOURCE.LastProcessingResult #STR. Result of last INVOCATION

EVENT_SOURCE.EventSourceArn       #SERVICE-specific resource ARN

EVENT_SOURCE.BatchSize            #Batch each NUM records from the source together
                                  #  - to pass to the function's payload
                                  #  - up to payload size limit (6MB)
                                  #Def: 100, max: 1e4
EVENT_SOURCE                      #NUM (in secs). Maximum duration to gather records for each batch
 .MaximumBatchingWindowInSeconds  #Def: 500ms, min: 0, max: 300

EVENT_SOURCE.StartingPosition     #STR. Position where to start reading stream source, among:
                                  #  - 'LATEST': at most recent time
                                  #  - 'AT_TIMESTAMP': at specific time
                                  #     - not with DynamoDB
                                  #  - 'TRIM_HORIZON'
                                  #Not with SQS nor MQ
EVENT_SOURCE
 .StartingPositionTimestamp       #DATE_NUM when EVENT_SOURCE 'AT_TIMESTAMP'

EVENT_SOURCE                      #SOURCE_ACCESS_ARR
 .SourceAccessConfigurations      #Only authorize specific source
SOURCE_ACCESS.Type                #SERVICE-specific, see below
SOURCE_ACCESS.URI                 #'URI'|'ARN'. Value based on SOURCE_ACCESS.Type
                                  #Can be Secret Manager SECRET_ARN

                                  ┌─────────────────────┐
                                  │   BATCH MAIN AUTH   │
                                  └─────────────────────┘

PACTION secretsmanager:
 GetSecretValue|DescribeSecret    #Required for SOURCE_ACCESS.URI SECRET_ARN

COND_KEY lambda:FunctionArn       #FUNC_VERSION_ARN. Only with *EventSourceMapping|FunctionUrlConfig()

                                  ┌────────────────────┐
                                  │   BATCH MAIN API   │
                                  └────────────────────┘

POST /event-source-mappings       #Req: EVENT_SOURCE
CreateEventSourceMapping()        #  - FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
                                  #  - no EventSourceMappingArn, UUID, LastModified, LastProcessingResult, StateTransitionReason, FilterCriteriaError
                                  #  - State -> Enabled BOOL
                                  #Res: EVENT_SOURCE
PUT /event-source-mappings        #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
UpdateEventSourceMapping()        #  - no EventSourceMappingArn, UUID, LastModified, LastProcessingResult, StateTransitionReason, FilterCriteriaError
                                  #  - no EventSourceArn, StartPosition*, Amazon|SelfManagedKafkaEventSourceConfig,
                                  #    SelfManagedEventSource, Queues, Topics, Tags
                                  #  - State -> Enabled BOOL
                                  #Res: EVENT_SOURCE
GET /event-source-mappings        #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - only UUID
GetEventSourceMapping()           #Res: EVENT_SOURCE
                                  #  - no Tags
GET /event-source-mappings        #Req: EVENT_SOURCE
ListEventSourceMappings()         #  - only EventSourceArn
                                  #  - also FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
                                  #Res: EventSourceMappings EVENT_SOURCE_ARR
                                  #  - no Tags
DELETE /event-source-mappings     #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - only UUID
DeleteEventSourceMapping()        #Res: EVENT_SOURCE

                                  ┌────────────────────┐
                                  │   BATCH MAIN IAC   │
                                  └────────────────────┘

AWS::Lambda::EventSourceMapping   #RESPROPs:
                                  #  - FunctionName, EventSourceArn, BatchSize, MaximumBatchingWindowInSeconds,
                                  #    SourceAccessConfigurations, StartingPosition[Timestamp]
                                  #  - Enabled BOOL
                                  #RESATTRs: EventSourceMappingArn, Id

CFUNCTION_OPTS.events             #CCEVENT_SOURCE_ARR
ICANYFUNC.addEventSource          #Creates CEVENT_SOURCEs
 (CCEVENT_SOURCE)                 #Automatically allows FUNC_VERSION.Role to relevant PACTIONs

new EventSourceMapping
 (...CARGS, OPTS)                 #CEVENT_SOURCE. CKRESOURCE wrapping EVENT_SOURCE
ICANYFUNC.addEventSourceMapping
 ('CEVENT_SOURCE', CEVENT_SOURCE) #Same as new EventSourceMapping() but with OPTS.target ICANYFUNC
EventSourceMapping
 .fromEventSourceMappingId
 (...CARGS, EVENT_SOURCE.UUID)
 ->ICEVENT_SOURCE                 #
ICEVENT_SOURCE
 .eventSourceMappingArn           #EVENT_SOURCE_ARN
ICEVENT_SOURCE
 .eventSourceMappingId            #EVENT_SOURCE.UUID
OPTS.target                       #ICANYFUNC. EVENT_SOURCE.FunctionArn
OPTS.eventSourceArn|batchSize
 |startingPosition[Timestamp]     #EVENT_SOURCE.*
OPTS.enabled                      #BOOL (def: true). EVENT_SOURCE.State
OPTS.maxBatchingWindow            #DURATION. EVENT_SOURCE.MaximumBatchingWindowInSeconds
OPTS.sourceAccessConfigurations   #SOURCE_ACCESS_ARR among:
                                  #  - SourceAccessConfigurationType.STR (preferred)
                                  #  - SourceAccessConfigurationType.of(STR)

                                  ┌────────────────────────┐
                                  │   BATCH MAIN METRICS   │
                                  └────────────────────────┘

AWS/Lambda/IteratorAge            #NUM of ms for records to be read
                                  #I.e. average age of EVENT_SOURCE.StartingPosition[Timestamp] record
                                  #Not with Kafka
                                  #cdk-monitoring-constructs:
                                  #  - max: METRIC, WIDGET, MALARM MaxIteratorAge > CXALARM_OPTS.maxAgeInMillis
                                  #  - only if CXMONITORING_OPTS.isIterator true (def)

                                  ┌─────────────────────┐
                                  │   BATCH MAIN LINT   │
                                  └─────────────────────┘

cfn-lint E3633                    #EVENT_SOURCE.StartingPosition must be set
cfn-lint E3634                    #Do not use EVENT_SOURCE.StartingPosition when using SQS EVENT_SOURCE

                                  ┌────────────────────┐
                                  │   BATCH FUNCTION   │
                                  └────────────────────┘

REQ                               #REQ passed to FUNCTION is SERVICE-specific

@aws-lambda-powertools/batch      #Helper for the EVENT_SOURCE's FUNCTION (see its doc)

                                  ┌──────────────────┐
                                  │   BATCH FILTER   │
                                  └──────────────────┘

EVENT_SOURCE                      #OBJ_ARR: Pattern 'PATTERNS_JSON'
 .FilterCriteria.Filters          #Ignores events that do not match one of the patterns
                                  #OBJ_ARR are or'd
                                  #Max OBJ_ARR length: 5

PATTERNS.VARR                     #PATTERN_ARR
                                  #VARR matches event payload
                                  #  - can be nested, e.g. PATTERNS.VAR.VAR2
                                  #All VARR fields are and'd
PATTERNS.$or                      #PATTERNS_ARR

PATTERN_ARR                       #Can be ARR of STR|NUM|BOOL|null, for ARR.includes() (case-sensitive)
                                  #Otherwise, single item
PATTERN.anything-but              #ARR. !ARR.includes() (case-sensitive)
PATTERN.equals-ignore-case        #STR. === (case-insensitive)
PATTERN.numeric                   #['OP', NUM[, 'OP2', NUM2]]
                                  #OP is = > >= < <=
PATTERN.exists                    #BOOL. !==|=== undefined
PATTERN.prefix|suffix             #STR. startsWith|endsWith(STR)

EVENT_SOURCE.KMSKeyArn            #AWS KMS key ARN. Encrypt EVENT_SOURCE.FilterCriteria.Filters
                                  #Def: automatically created
EVENT_SOURCE.FilterCriteriaError  #OBJ: ErrorCode 'CODE', Message STR
                                  #Errors related to EVENT_SOURCE.KMSKeyArn

                                  ┌───────────────────────┐
                                  │   BATCH FILTER AUTH   │
                                  └───────────────────────┘

KMS PERMISSIONS ==>               #For EVENT_SOURCE.KMSKeyArn, must allow:
                                  #  - kms:Decrypt to Principal.Service lambda.REGION.amazonaws.com
                                  #  - kms:Decrypt|DescribeKey|GenerateDataKey to consumer
                                  #     - with COND_KEY kms:ViaService 'lambda.REGION.amazonaws.com'

                                  ┌──────────────────────┐
                                  │   BATCH FILTER IAC   │
                                  └──────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: FilterCriteria, KmsKeyArn

CEVENT_SOURCE_OPTS.filters        #OBJ_ARR. EVENT_SOURCE.FilterCriteria.Filters

FilterCriteria.filter
 (PATTERNS_OBJ)->OBJ              #{ pattern: 'PATTERNS_JSON' }

FilterRule.*(...)->PATTERN_OBJ    #
FilterRule.or(STR_ARR)            #STR_ARR
FilterRule.isEqual(STR|NUM|BOOL)  #[STR|NUM|BOOL]
FilterRule.empty()                #['']
FilterRule.null()                 #[null]
FilterRule.notEquals(STR)         #[{ anything-but: [STR] }]
FilterRule.isEqual(NUM)           #[{ numeric: ['=', NUM] }]
FilterRule.between(NUM, NUM2)     #[{ numeric: ['>', NUM, '<=', NUM2] }]
FilterRule.exists()               #[{ exists: true }]
FilterRule.notExists()            #[{ exists: false }]
FilterRule.beginsWith(STR)        #[{ prefix: STR }]

CEVENT_SOURCE_OPTS                #IKMS_KEY. EVENT_SOURCE.KMSKeyArn
 .filterEncryption                #Automatically grants the right permissions

                                  ┌─────────────────┐
                                  │   BATCH KAFKA   │
                                  └─────────────────┘

EVENT_SOURCE.EventSourceArn       #CLUSTER_ARN or VPC_CONNECTION_ARN
                                  #Not if self-managed Kafka

EVENT_SOURCE.Topics               #STR_ARR. Names of Kafka topics

EVENT_SOURCE.Amazon
 ManagedKafkaEventSourceConfig    #MSK_SOURCE. Amazon MSK's source config
EVENT_SOURCE.Self
 ManagedKafkaEventSourceConfig    #SMSK_SOURCE. Self-managed Kafka source config
[S]MSK_SOURCE.ConsumerGroupId     #STR. Kafka consumer group id

EVENT_SOURCE
 .SelfManagedEventSource
 .Endpoints
 .KafkaBootstrapServers           #Self-managed Kafka source 'HOST:PORT'_ARR

SOURCE_ACCESS.Type                #STR among:
                                  #  - 'SASL_SCRAM_512_AUTH'
                                  #  (self-managed only)
                                  #  - 'SASL_SCRAM_256_AUTH'
                                  #  - 'BASIC_AUTH'
                                  #  - 'CLIENT_CERTIFICATE_TLS_AUTH'
                                  #  - 'SERVER_ROOT_CA_CERTIFICATE'
                                  #  - 'VPC_SECURITY_GROUP': SECURITY_GROUP_MID
                                  #  - 'VPC_SUBNET': SUBNET_MID

                                  ┌──────────────────────┐
                                  │   BATCH KAFKA AUTH   │
                                  └──────────────────────┘

PACTION kafka:DescribeCluster
 |GetBootstrapBrokers
 |ListScramSecrets                #Required for Kafka EVENT_SOURCE, if not self-managed

AWSLambdaMSKExecutionRole         #AWS managed POLICYs for FUNC_VERSION.Role

                                  ┌─────────────────────┐
                                  │   BATCH KAFKA IAC   │
                                  └─────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: Topics, AmazonManagedKafkaEventSourceConfig, SelfManagedKafkaEventSourceConfig,
                                  #SelfManagedEventSource

new ManagedKafkaEventSource(OPTS) #CCEVENT_SOURCE
OPTS.*                            #Like CEVENT_SOURCE_OPTS.* except:
                                  #  - no target
                                  #  - eventSourceArn -> clusterArn
                                  #  - kafka* -> *
OPTS.secret                       #Secret Manager ICSECRET. SOURCE_ACCESS.Type 'SASL_*', 'CLIENT_CERTIFICATE_TLS_AUTH' or 'BASIC_AUTH'

new SelfManagedKafkaEventSource
 (OPTS)                           #CCEVENT_SOURCE
OPTS.*                            #Like ManagedKafkaEventSource
OPTS.authenticationMethod         #STR. SOURCE_ACCESS.Type
OPTS.rootCACertificate            #Secret Manager ICSECRET. SOURCE_ACCESS.Type 'SERVER_ROOT_CA_CERTIFICATE'
OPTS.securityGroup                #ICSECURITY_GROUP. SOURCE_ACCESS.Type 'VPC_SECURITY_GROUP'
OPTS.vpcSubnets                   #ICSUBNET_ARR. SOURCE_ACCESS.Type 'VPC_SUBNET'
OPTS.vpc                          #ICVPC, to specify with OPTS.vpcSubnets

CEVENT_SOURCE_OPTS.kafkaTopic     #STR. EVENT_SOURCE.Topics

CEVENT_SOURCE_OPTS                #Either:
 .kafkaConsumerGroupId            #  - MSK_SOURCE.ConsumerGroupId: if OPTS.eventSourceArn
                                  #  - SMSK_SOURCE.ConsumerGroupId: if OPTS.kafkaBootstrapServers

CEVENT_SOURCE_OPTS
 .kafkaBootstrapServers           #'HOST:PORT'_ARR. EVENT_SOURCE.SelfManagedEventSource.Endpoints.KAFKA_BOOTSTRAP_SERVERS

                                  ┌─────────────────────────┐
                                  │   BATCH KAFKA METRICS   │
                                  └─────────────────────────┘

AWS/Lambda/OffsetLag              #NUM of ms for records to be picked up
                                  #I.e. duration between last record write to a topic, and last record read
                                  #cdk-monitoring-constructs:
                                  #  - max: METRIC, WIDGET, MALARM MaxOffsetLag > CXALARM_OPTS.maxOffsetLag
                                  #  - only if CXMONITORING_OPTS.isOffsetLag true (def: false)

                                  ┌──────────────┐
                                  │   BATCH MQ   │
                                  └──────────────┘

EVENT_SOURCE.EventSourceArn       #BROKER_ARN
                                  #Not if self-managed RabbitMQ

EVENT_SOURCE.Queues               #STR_ARR. Names of the Amazon MQ broker sources

SOURCE_ACCESS.Type                #'BASIC_AUTH' (not self-managed) or 'VIRTUAL_HOST' (self-managed)
                                  #Only if self-managed RabbitMQ

RETRIES ==>                       #Retries until message expires

                                  ┌──────────────────┐
                                  │   BATCH MQ IAC   │
                                  └──────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: Queues

                                  ┌───────────────┐
                                  │   BATCH SQS   │
                                  └───────────────┘

EVENT_SOURCE.EventSourceArn       #SQS QUEUE_ARN

EVENT_SOURCE.BatchSize            #Same as above, but def 10 and (if FIFO) max 10
EVENT_SOURCE                      #Same as above, but def 0, i.e. as soon as possible
 .MaximumBatchingWindowInSeconds  #Also min 1, unless EVENT_SOURCE.BatchSize <=10

EVENT_SOURCE                      #NUM. Max CONCURRENCY
 .ScalingConfig.MaximumConcurrency#Min 2, max 1e4

EVENT_SOURCE                      #If FUNCTION fails, all RECORDs are considered failed
 .FunctionResponseTypes           #If ['ReportBatchItemFailures'] (def: [], i.e. disabled):
                                  #  - FUNCTION can partially succeed
                                  #     - also known as "partial batch"
                                  #  - it specifies which RECORD failed or not
                                  #  - does so with RES: batchItemFailures OBJ_ARR: itemIdentifier 'RECORD_ID'
                                  #     - 'RECORD_ID' is RECORD.messageId
                                  #     - only for RECORDs that failed

                                  ┌────────────────────┐
                                  │   BATCH SQS AUTH   │
                                  └────────────────────┘

PACTION sqs:ReceiveMessage
 |ChangeMessageVisibility
 |GetQueueUrl|DeleteMessage       #Required for SQS EVENT_SOURCE
 |GetQueueAttributes              #Also kms:*, if needed

AWSLambdaSQSQueueExecutionRole    #AWS managed POLICYs for FUNC_VERSION.Role

                                  ┌───────────────────┐
                                  │   BATCH SQS IAC   │
                                  └───────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: ScalingConfig, FunctionResponseTypes

new SqsEventSource(ICQUEUE[,OPTS])#CCEVENT_SOURCE
OPTS.*                            #Like CEVENT_SOURCE_OPTS.*, except:
                                  #  - no target
                                  #  - eventSourceArn -> ICQUEUE

CEVENT_SOURCE_OPTS.maxConcurrency #NUM. EVENT_SOURCE.scalingConfig.maximumConcurrency

CEVENT_SOURCE_OPTS
 .reportBatchItemFailures         #BOOL (def: false). EVENT_SOURCE.FunctionResponseTypes

                                  ┌───────────────────┐
                                  │   BATCH KINESIS   │
                                  └───────────────────┘

EVENT_SOURCE.EventSourceArn       #Kinesis STREAM_ARN

EVENT_SOURCE
 .MaximumBatchingWindowInSeconds  #Same as SQS
EVENT_SOURCE.FunctionResponseTypes#Same as SQS but RECORD_ID is RECORD.kinesis.sequenceNumber

EVENT_SOURCE                      #NUM (in secs). Processing window duration.
 .TumblingWindowInSeconds         #Max 900
EVENT_SOURCE.ParallelizationFactor#NUM of batches to process concurrently.
                                  #Def 1, max 10

EVENT_SOURCE
 .BisectBatchOnFunctionError      #BOOL. If true (def: false) and function fails, split the batch in two and retry
EVENT_SOURCE.MaximumRetryAttempts #Like EVENT_INVOKE.* but for receiving the batch
                                  #Def -1 (infinite), max 1e4
EVENT_SOURCE                      #Like EVENT_INVOKE.* but for receiving the batch
 .MaximumRecordAgeInSeconds       #Def: -1 (noop), min 1 minute, max 1 week

                                  ┌────────────────────────┐
                                  │   BATCH KINESIS AUTH   │
                                  └────────────────────────┘

PACTION kinesis:GetRecords
 |DescribeStream[Summary|Consumer]
 |ListStreams|GetShardIterator    #Required for Kinesis EVENT_SOURCE
 |ListShards|SubscribeToShard     #Also kms:*, if needed

AWSLambdaKinesisExecutionRole     #AWS managed POLICYs for FUNC_VERSION.Role

                                  ┌───────────────────────┐
                                  │   BATCH KINESIS IAC   │
                                  └───────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: FunctionResponseTypes, TumblingWindowInSeconds,
                                  #ParallelizationFactor, BisectBatchOnFunctionError, MaximumRetryAttempts,
                                  #MaximumRecordAgeInSeconds

new KinesisEventSource
 (KINESIS_ISTREAM, OPTS)          #CCEVENT_SOURCE
OPTS.*                            #Like CEVENT_SOURCE_OPTS.* except:
                                  #  - no target
                                  #  - eventSourceArn -> KINESIS_ISTREAM

CEVENT_SOURCE_OPTS
 .reportBatchItemFailures         #Same as SQS

CEVENT_SOURCE_OPTS.tumblingWindow #DURATION. EVENT_SOURCE.TumblingWindowInSeconds
CEVENT_SOURCE_OPTS
 .parallelizationFactor           #EVENT_SOURCE.*

CEVENT_SOURCE_OPTS
 .bisectBatchOnError              #NUM. EVENT_SOURCE.BisectBatchOnFunctionError
CEVENT_SOURCE_OPTS.retryAttempts  #NUM. EVENT_SOURCE.MaximumRetryAttempts
CEVENT_SOURCE_OPTS.maxRecordAge   #DURATION. EVENT_SOURCE.maximumRecordAgeInSeconds

                                  ┌────────────────────┐
                                  │   BATCH DYNAMODB   │
                                  └────────────────────┘

EVENT_SOURCE.EventSourceArn       #DynamoDB STREAM_ARN

EVENT_SOURCE
 .MaximumBatchingWindowInSeconds  #Same as SQS
EVENT_SOURCE.FunctionResponseTypes#Same as SQS but RECORD_ID is RECORD.dynamodb.SequenceNumber

EVENT_SOURCE
 .TumblingWindowInSeconds
 |ParallelizationFactor
 |BisectBatchOnFunctionError
 |MaximumRetryAttempts
 |MaximumRecordAgeInSeconds       #Same as Kinesis

                                  ┌─────────────────────────┐
                                  │   BATCH DYNAMODB AUTH   │
                                  └─────────────────────────┘

PACTION dynamodb:ListStreams
 |DescribeStream|GetRecords       #Required for DynamoDB EVENT_SOURCE
 |GetShardIterator                #Also kms:*, if needed

AWSLambdaDynamoDBExecutionRole    #AWS managed POLICYs for FUNC_VERSION.Role
AWSLambdaInvocation-DynamoDB      #Same but allow lambda:InvokeFunction, and do not allow logs:*

                                  ┌────────────────────────┐
                                  │   BATCH DYNAMODB IAC   │
                                  └────────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: FunctionResponseTypes, TumblingWindowInSeconds,
                                  #ParallelizationFactor, BisectBatchOnFunctionError, MaximumRetryAttempts,
                                  #MaximumRecordAgeInSeconds

new DynamoEventSource
 (ICTABLE, OPTS)                  #CCEVENT_SOURCE
OPTS.*                            #Like CEVENT_SOURCE_OPTS.*, except:
                                  #  - no target
                                  #  - eventSourceArn -> ICTABLE

CEVENT_SOURCE_OPTS
 .reportBatchItemFailures
 |tumblingWindow
 |parallelizationFactor
 |bisectBatchOnError
 |retryAttempts
 |maxRecordAge                    #Like Kinesis behavior above

                                  ┌──────────────────────┐
                                  │   BATCH DOCUMENTDB   │
                                  └──────────────────────┘

EVENT_SOURCE.EventSourceArn       #DocumentDB: CHANGE_STREAM_ARN

EVENT_SOURCE
 .DocumentDBEventSourceConfig     #DOCUMENTDB_SOURCE
DOCUMENTDB_SOURCE.DatabaseName    #DocumentDB 'DATABASE' (def: all)
DOCUMENTDB_SOURCE.CollectionName  #DocumentDB 'COLLECTION' (def: all)
DOCUMENTDB_SOURCE.FullDocument    #Whether to send changes as:
                                  #  - 'Default': partial DOCUMENT
                                  #  - 'UpdateLookup': full DOCUMENT + delta

SOURCE_ACCESS.Type                #'BASIC_AUTH'

                                  ┌──────────────────────────┐
                                  │   BATCH DOCUMENTDB IAC   │
                                  └──────────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: DocumentDBEventSourceConfig

                                  ┌───────────────────────┐
                                  │   BATCH DESTINATION   │
                                  └───────────────────────┘

EVENT_SOURCE.DestinationConfig    #ARN receiving response (INVOKE_PAYLOAD) on final success|error
 .onSuccess|onFailure.destination #Only with Kinesis|DynamoDB|Kafka
                                  #Can be:
                                  #  - SQS QUEUE (not FIFO)
                                  #  - SNS TOPIC (not FIFO)
                                  #  - S3 BUCKET
                                  #     - only with Kafka

INVOKE_PAYLOAD                    #Same as EVENT_INVOKE.DestinationConfig

                                  ┌────────────────────────────┐
                                  │   BATCH DESTINATION AUTH   │
                                  └────────────────────────────┘

PACTION sqs:SendMessage           #Required with FUNC_VERSION.Role for EVENT_SOURCE.DestinationConfig with SQS
PACTION sns:Publish               #Required with FUNC_VERSION.Role for EVENT_SOURCE.DestinationConfig with SNS
PACTION s3:PutObject|ListBuckets  #Required with FUNC_VERSION.Role for EVENT_SOURCE.DestinationConfig with S3

                                  ┌───────────────────────────┐
                                  │   BATCH DESTINATION IAC   │
                                  └───────────────────────────┘

AWS::Lambda::EventSourceMapping   #Includes RESPROPs: DestinationConfig (only onFailure)

CEVENT_SOURCE_OPTS.onFailure      #EVENT_SOURCE.DestinationConfig.onFailure. Can be:
                                  #  - new SqsDlq(ICQUEUE)
                                  #  - new SnsDlq(ICTOPIC)
                                  #  - new S3OnFailureDestination(ICBUCKET)
                                  #Automatically grants right permissions

                                  ┌───────────────────────────────┐
                                  │   BATCH DESTINATION METRICS   │
                                  └───────────────────────────────┘

AWS/Lambda/
 DestinationDeliveryFailures      #Same as EVENT_INVOKE.DestinationConfig

                                  ┌────────────────────────────┐
                                  │   BATCH DESTINATION LINT   │
                                  └────────────────────────────┘

cfn-lint-serverless
 aws_lambda_event_source_mapping
 _failure_destination
 (ES1001)                         #EVENT_SOURCE.DestinationConfig.OnFailure.Destination ARN must be set

                                  ┌──────────────────────┐
                                  │   CONCURRENCY MAIN   │
                                  └──────────────────────┘

MAX INVOCATIONS PER FUNC_INSTANCE #Depending on InvocationType:
 ==>                              #  - 'RequestResponse|DryRun': 10 per second
                                  #  - 'Event': unlimited
                                  #But, if no FUNC_INSTANCE available, new FUNC_INSTANCEs are spawned to handle the load

CONCURRENCY ==>                   #Amount of FUNC_INSTANCEs at once

ACCOUNT_LIMIT.ConcurrentExecutions#NUM. Max concurrency for all FUNCTIONs at any given time, per REGION
                                  #Value is 1e3 (flexible to a few 1e4)
                                  #The increase rate of that value is also limited ("burst concurrency"):
                                  #  - to 1e3 per 10s
                                  #  - but not when value is:
                                  #     - <3e3 (us-east-1, us-west-2, eu-west-1)
                                  #     - <1e3 (us-east-2, eu-central-1, ap-northeast-1)
                                  #     - <500 (otherwise)
ACCOUNT_LIMIT                     #NUM. Like ACCOUNT_LIMIT.ConcurrentExecutions, but minus each FUNCTION's max(CONCURRENCY, PCONCURRENCY)
 .UnreservedConcurrentExecutions  #Must be at least 100

                                  ┌──────────────────────────────┐
                                  │   CONCURRENCY MAIN METRICS   │
                                  └──────────────────────────────┘

AWS/Lambda/ConcurrentExecutions   #NUM of FUNC_INSTANCEs that are ongoing
                                  #cdk-monitoring-constructs:
                                  #  - max: METRIC, WIDGET, MALARM ConcurrentExecutionsCount > CXALARM_OPTS.maxRunningTasks
Function
 .metricAllConcurrentExecutions
 ([CMETRIC_OPTS])->CMETRIC        #

AWS/Lambda/
 UnreservedConcurrentExecutions   #NUM of FUNC_INSTANCEs that are ongoing and use neither reserved CONCURRENCY nor PCONCURRENCY
Function.metricAllUnreserved
 ConcurrentExecutions
 ([CMETRIC_OPTS])->CMETRIC        #

AWS/Lambda/                       #NUM of FUNC_INSTANCEs that are either ongoing, or use reserved CONCURRENCY or PCONCURRENCY
 ClaimedAccountConcurrency        #To see % of FUNC_INSTANCEs over allowed limit: ClaimedAccountConcurrency / SERVICE_QUOTA(ConcurrentExecutions)

AWS/Lambda/Throttles              #NUM of failed INVOCATIONs due to concurrency
                                  #cdk-monitoring-constructs:
                                  #  - count: METRIC, WIDGET, MALARM ThrottlesCount > CXALARM_OPTS.maxErrorCount
                                  #  - rate: METRIC, WIDGET, MALARM ThrottlesRate > CXALARM_OPTS.maxErrorRate
Function.metricAllThrottles
 ([CMETRIC_OPTS])->CMETRIC        #

                                  ┌──────────────────────────┐
                                  │   CONCURRENCY RESERVED   │
                                  └──────────────────────────┘

CONCURRENCY                       #Reserved concurrency for a given FUNCTION
                                  #If not set:
                                  #  - max concurrency is ACCOUNT_LIMIT.UnreservedConcurrentExecutions
                                  #  - limit is shared by all FUNCTIONs
                                  #     - except ones with reserved concurrency
                                  #If set, specifically limit a single FUNCTION's concurrency
                                  #  - pros:
                                  #     - avoids other FUNCTIONs impacting that FUNCTION's concurrency
                                  #     - user-defined throttle, to avoid pricing spike
                                  #     - can use 0 to turn off FUNCTION
                                  #  - cons:
                                  #     - increases chance of undesired throttled
                                  #     - decreases ACCOUNT_LIMIT.UnreservedConcurrentExecutions
                                  #Not logged by CloudTrail
CONCURRENCY
 .ReservedConcurrentExecutions    #NUM of concurrent executions
FUNCTION.Concurrency
 .ReservedConcurrentExecutions    #Same

                                  ┌──────────────────────────────┐
                                  │   CONCURRENCY RESERVED API   │
                                  └──────────────────────────────┘

PUT /functions/SHORT_FUNC_ARN
 /concurrency                     #Req: empty
PutFunctionConcurrency()          #Res: CONCURRENCY
GET /functions/SHORT_FUNC_ARN
 /concurrency                     #Req: empty
GetFunctionConcurrency()          #Res: CONCURRENCY
DELETE /functions/SHORT_FUNC_ARN
 /concurrency                     #Req: empty
DeleteFunctionConcurrency()       #Res: empty

                                  ┌──────────────────────────────┐
                                  │   CONCURRENCY RESERVED IAC   │
                                  └──────────────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: ReservedConcurrentExecutions

CFUNCTION_OPTS
 .reservedConcurrentExecutions    #NUM. FUNCTION.Concurrency.ReservedConcurrentExecutions

                                  ┌───────────────────────────────┐
                                  │   CONCURRENCY RESERVED LINT   │
                                  └───────────────────────────────┘

cdk-nag LambdaConcurrency         #Validate CONCURRENCY is set

                                  ┌─────────────────────────────┐
                                  │   CONCURRENCY PROVISIONED   │
                                  └─────────────────────────────┘

PCONCURRENCY                      #Provisioned concurrency for a given FUNC_VERSION
                                  #Eliminates cold start for NUM FUNC_INSTANCEs by:
                                  #  - initializing runtime|function in advance
                                  #     - done 1-2m after allocating PCONCURRENCY
                                  #  - restarting it every few hours
                                  #     - instead of shutting it down after 5-7m idle
                                  #Separate|orthogonal from reserved CONCURRENCY
                                  #  - only related to keeping FUNC_INSTANCEs up for performance
                                  #  - not related to throttling
                                  #Must target a FUNC_VERSION, not a FUNCTION, i.e. QUALIFIER is required
                                  #Not logged by CloudTrail
PCONCURRENCY.FunctionArn          #FUNC_VERSION_ARN
PCONCURRENCY.LastModified         #'DATE'
PCONCURRENCY.Status               #STR indicating allocation process, among 'IN_PROGRESS', 'READY' and 'FAILED'
PCONCURRENCY.StatusReason         #STR. Set if PCONCURRENCY.Status 'Failed'

PCONCURRENCY.Available
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Requested
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Allocated
 ProvisionedConcurrentExecutions  #NUM

ENVVAR                            #Can be:
 AWS_LAMBDA_INITIALIZATION_TYPE   #  - 'provisioned-concurrency': if using PCONCURRENCY
                                  #  - 'snap-start': if using SNAP_START
                                  #  - 'on-demand': otherwise
                                  #Useful to run slower initialization logic (e.g. preemptive caching) only when not 'on-demand'

                                  ┌─────────────────────────────────┐
                                  │   CONCURRENCY PROVISIONED API   │
                                  └─────────────────────────────────┘

PUT /functions
 /SHORT_FUNC_VERSION_ARN          #Req: PCONCURRENCY
 /provisioned-concurrency         #  - only RequestedProvisionedConcurrentExecutions -> ProvisionedConcurrentExecutions NUM
PutProvisionedConcurrencyConfig() #Res: PCONCURRENCY
GET /functions
 /SHORT_FUNC_VERSION_ARN
 /provisioned-concurrency         #Req: empty
GetProvisionedConcurrencyConfig() #Res: PCONCURRENCY
GET /functions/SHORT_FUNC_ARN
 /provisioned-concurrency?List=ALL
ListProvisioned                   #Req: empty
 ConcurrencyConfigs()             #Res: ProvisionedConcurrencyConfigs PCONCURRENCY_ARR
DELETE /functions
 /SHORT_FUNC_VERSION_ARN
 /provisioned-concurrency
DeleteProvisioned                 #Req: empty
 ConcurrencyConfig()              #Res: empty

                                  ┌─────────────────────────────────┐
                                  │   CONCURRENCY PROVISIONED IAC   │
                                  └─────────────────────────────────┘

AWS::Lambda::Version|Alias        #Includes RESPROPs: ProvisionedConcurrencyConfig PCONCURRENCY
                                  #  - only AllocatedProvisionedConcurrentExecutions -> ProvisionedConcurrentExecutions NUM

CFUNC_VERSION_OPTS|CALIAS_OPTS
 .provisionedConcurrentExecutions #PCONCURRENCY.AllocatedProvisionedConcurrentExecutions

                                  ┌─────────────────────────────────────┐
                                  │   CONCURRENCY PROVISIONED METRICS   │
                                  └─────────────────────────────────────┘

AWS/Lambda/ProvisionedConcurrency
 Invocations                      #NUM of INVOCATIONs using PCONCURRENCY

AWS/Lambda/ProvisionedConcurrency #NUM of INVOCATIONs using normal concurrency because PCONCURRENCY is full
 SpilloverInvocations             #cdk-monitoring-constructs:
                                  #  - sum: METRIC, WIDGET, MALARM ProvisionedConcurrencySpilloverInvocationsCount > CXALARM_OPTS.maxRunningTasks
                                  #  - rate: METRIC, WIDGET, MALARM ProvisionedConcurrencySpilloverInvocationsRate > CXALARM_OPTS.maxRunningTaskRate

AWS/Lambda/
 ProvisionedConcurrentExecutions  #NUM of ongoing FUNC_INSTANCEs using PCONCURRENCY
AWS/Lambda/
 ProvisionedConcurrentUtilization #Same but divided by allocated PCONCURRENCY

                                  ┌────────────────┐
                                  │   SNAP START   │
                                  └────────────────┘

FUNC_VERSION.SnapStart            #SNAP_START. Initializes the FUNC_INSTANCE at publish-time instead of during first INVOCATION
                                  #Max initialization time is min(FUNC_VERSION.Timeout, 2m)
                                  #Cannot be used together with:
                                  #  - other Runtime than 'java11' (and later)
                                  #  - PCONCURRENCY
                                  #  - FUNC_VERSION.FileSystemConfigs
                                  #  - FUNC_VERSION.EphemeralStorage.Size, except with default value
                                  #  - AWS X-Ray
                                  #Can register in FUNCTION code some event handlers:
                                  #  - beforeCheckpoint(): end of initialization
                                  #  - afterRestore(): before first INVOCATION
                                  #     - max 2s
SNAP_START.ApplyOn                #Whether to apply: 'None' (def, i.e. no) or 'PublishedVersions' (yes)
SNAP_START.OptimizationStatus     #Whether to apply on each separate FUNC_VERSION|ALIAS: 'On' or 'Off' (def)

FUNC_VERSION.KMSKeyArn            #See above. Encrypts SNAP_START's snapshot

                                  ┌────────────────────┐
                                  │   SNAP START IAC   │
                                  └────────────────────┘

AWS::Lambda::Function             #Includes RESPROPs: SnapStart
                                  #Includes RESATTRs: ApplyOn, OptimizationStatus, SnapStartResponse

CFUNCTION_OPTS.snapStart          #Must be SnapStartConf.ON_PUBLISHED_VERSIONS. SNAP_START
CRUNTIME[_OPTS]
 .supportsSnapStart               #BOOL (def: false). Whether can use SNAP_START, i.e. whether java >=11

                                  ┌─────────────────────┐
                                  │   SNAP START LINT   │
                                  └─────────────────────┘

cfn-lint E2530                    #If FUNC_VERSION.SnapStart, must use Java
cfn-lint W2530                    #Valid FUNC_VERSION.SnapStart
cfn-lint I2530                    #If Java, must use FUNC_VERSION.SnapStart

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

FUNCTION|CODE_SIGNING|EVENT_SOURCE
 .Tags                            #Not logged by CloudTrail
FUNCTION.TagsError                #OBJ: ErrorCode 'CODE', Message STR

                                  ┌──────────────┐
                                  │   TAGS API   │
                                  └──────────────┘

POST /tags/ARN
TagResource()
GET /tags/ARN
ListTags()
DELETE /tags/ARN
UntagResource()                   #AWS TAGS, for FUNCTION|CODE_SIGNING|EVENT_SOURCE

                                  ┌──────────────┐
                                  │   TAGS IAC   │
                                  └──────────────┘

AWS::Lambda::Function
 |CodeSigningConfig
 |EventSourceMapping              #Includes RESPROPs: Tags

                                  ┌──────────┐
                                  │   NODE   │
                                  └──────────┘

LAMBDA_RUNTIME_DIR/node_modules   #Preferred location for node modules of FUNCTIONs
                                  #I.e. .zip archives can have a top-level node_modules DIR
/opt/nodejs[/nodeVERSION]
 /node_modules                    #Preferred location for node modules of LAYERs
ENVVAR NODE_PATH                  #'/opt/nodejs/nodeVERSION/node_modules/:
                                  # /opt/nodejs/node_modules:
                                  # $LAMBDA_RUNTIME_DIR/node_modules'

ENVVAR NODE_OPTIONS               #Can be used

NATIVE MODULES ==>                #Must be pre-built with Amazon Linux as target

ES MODULES ==>                    #Normal Node.js behavior, i.e. can use *.mjs|cjs or PACKAGE.type 'module|script'
                                  #Allows top-level await

AUTOMATICALLY INCLUDED ==>        #  - npm (from Node.js version)
                                  #  - aws-sdk
                                  #  - @types/aws-lambda: Handler, Context, REQ|RES for different TRIGGERs

index.[m]js                       #Default main FILE

console.LEVEL(...)                #Must be used for application logs
                                  #Automatically prepends LEVEL

HANDLER(REQ, NCONTEXT)->[>]RES    #Main FUNC.
                                  #Default name: 'handler'
                                  #Can also use a FUNC(ERROR, RES) callback instead of PROMISE

REQ                               #Same as:
                                  #  - Invoke(): INVOCATION_REQ.Payload
                                  #  - FUNC_URL: FUNC_URL_REQ
                                  #  - TRIGGER: AWS SERVICE-specific
RES                               #Same as:
                                  #  - Invoke(): INVOCATION_RES.ResponseBody
                                  #  - FUNC_URL: FUNC_URL_RES
                                  #  - TRIGGER: AWS SERVICE-specific

ERROR ==>                         #When throwing ERROR, converted to ERROR_RES
                                  #If not JSON-serializable, ERROR_RES shows serialization error instead

NCONTEXT                          #Information from INVOCATION_REQ.*

NCONTEXT.invokedFunctionArn       #'FUNC_VERSION_ARN'
NCONTEXT.functionName             #'FUNCTION'
NCONTEXT.functionVersion          #NUM
NCONTEXT.awsRequestId             #'REQ_ID'

NCONTEXT                          #BOOL. If true (def, recommended):
 .callbackWaitsForEmptyEventLoop  #  - if HANDLER is sync (no PROMISE|callback)
                                  #  - then completion waits for event loop to be empty
                                  #@middy/do-not-wait-for-empty-event-loop (see Middy doc) can be used to set to false

NCONTEXT.identity                 #CONTEXT_IDENTITY. Information about AWS Cognity
CONTEXT_IDENTITY.cognitoIdentityId#STR. User ID
CONTEXT_IDENTITY
 .cognitoIdentityPoolId           #STR. Identity pool ID

NCONTEXT.clientContext            #CLIENT_CONTEXT. Mobile app information.
CLIENT_CONTEXT.client             #CLIENT
CLIENT.installation_id            #
CLIENT.app_title                  #
CLIENT.app_version_name           #
CLIENT.app_version_code           #
CLIENT.app_package_name           #
CLIENT_CONTEXT.env                #CLIENT_ENV
CLIENT_ENV.platform_version       #
CLIENT_ENV.platform               #
CLIENT_ENV.make                   #
CLIENT_ENV.model                  #
CLIENT_ENV.locale                 #
CLIENT_CONTEXT.*                  #Custom values

                                  ┌─────────────────────┐
                                  │   NODE MIDDLEWARE   │
                                  └─────────────────────┘

MIDDY ==>                         #See Middy doc

                                  ┌──────────────────┐
                                  │   NODE TOOLKIT   │
                                  └──────────────────┘

REQ SCHEMA ==>                    #JSON schemas for SERVICE-specific REQs available under "Resources > Schemas"
                                  #Can search
                                  #Can scaffold TypeScript parsing code

                                  ┌──────────┐
                                  │   DENO   │
                                  └──────────┘

deno-lambda                       #Custom RUNTIME distributed either as:
                                  #  - a LAYER: arn:aws:serverlessrepo:us-east-1:390065572566:applications/den
                                  #  - a Docker image: denoland/deno-lambda
                                  #Version 2.0.0-rc.0 (matching Deno version)
                                  #It is not maintained anymore:
                                  #  - instead, should use aws-lambda-adapter
                                  #  - see Dockerfile at https://docs.deno.com/runtime/tutorials/aws_lambda/#step-2%3A-create-a-dockerfile

HANDLER(...)                      #Like Node

CLI FLAGS ==>                     #Only --no-check
                                  #Cannot be changed, except the following ones
ENVVAR DENO_PERMISSIONS           #Def: -A
                                  #Must have at least --allow-env|net
ENVVAR DENO_UNSTABLE              #If set, use --unstable
ENVVAR DENO_CONFIG                #'PATH' to pass to --config
ENVVAR DENO_LOCK                  #'PATH' to pass to --lock
ENVVAR DENO_IMPORTMAP             #'PATH' to pass to --importmap
ENVVAR DENO_LOCATION              #'PATH' to pass to --location

ENVVAR NO_COLOR                   #Def: true
ENVVAR DENO_NO_UPDATE_CHECK       #Def: true

ENVVAR HANDLER_EXT                #Def: 'ts'
ENVVAR DENO_DIR                   #Def: ./.deno_dir
ENVVAR DENO_PREFIX                #STR prepended to logs. Def: 'LEVEL\tRequestId: REQ_ID'

x/lambda/mod.ts                   #Same as @types/aws-lambda, but for Deno

                                  ┌──────────────┐
                                  │   DENO IAC   │
                                  └──────────────┘

new DenoFunction                  #CFUNCTION with DenoLayer
 (...CARGS, CFUNCTION_OPTS)       #Package 'cdk-lambda-deno' (version 0.0.478)

new DenoLayer(...CARGS, OPTS)     #CLAYER_VERSION with deno-lambda LAYER
                                  #Bundled using DockerImage.fromBuild() + Code.fromAsset() under-the-hood
OPTS.version                      #'X.Y.Z' (def: '1.23.3')

                                  ┌────────────┐
                                  │   PYTHON   │
                                  └────────────┘

ENVVAR PYTHON_PATH                #LAMBDA_RUNTIME_DIR

/opt/python                       #
/opt/python
 /lib/pythonVERSION/site-packages #Preferred location for LAYERs packages

                                  ┌────────────────┐
                                  │   POWERTOOLS   │
                                  └────────────────┘

@aws-lambda-powertools/*          #Various utilities for Lambda with Node.js
                                  #Version 2.10.0
                                  #Exists also in Python, Java, DotNet, but not documented yet

CLOUDFORMATION LAYER ==>          #ACCOUNT_ID 094274105915, name 'AWSLambdaPowertoolsTypeScriptV2', LAYER_VERSION_NUM 23
powertools-lambda-layer-cdk       #Alternative package, building the LAYER locally with Docker instead
                                  #I.e. does not seem very useful

                                  ┌────────────────────┐
                                  │   SERVER ADAPTER   │
                                  └────────────────────┘

aws-lambda-web-adapter            #For:
                                  #  - long-running servers
                                  #  - and/or any server framework (Express, Next.js, Flask, etc.)
                                  #Version 0.8.4

INSTALLATION ==>                  #It is an external extension
                                  #Depending on PackageType:
                                  #  - 'Zip': use LAYER: ACCOUNT_ID 753240598075, name 'LambdaAdapterLayerX86|Arm64', VERSION_NUM 14
                                  #  - 'Image': in Dockerfile:
                                  #     - COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:X.Y.Z[-ARCH] /lambda-adapter /opt/extensions/lambda-adapter

FUNC_VERSION.Environment.Variables
 .AWS_LWA_*                       #Configuration

CALLER ==>                        #Any caller works: FUNC_URL, API Gateway, TRIGGERs, etc.
                                  #Outside of Lambda, is a noop
                                  #  - this allows server to still work: locally (including with SAM), on Fargate, on EC2, etc.

WRAPPER SCRIPT ==>                #When PackageType is 'Zip', a "wrapper script" is used, which proxies normal RUNTIME call
                                  #The following must be set
ENVVAR AWS_LAMBDA_EXEC_WRAPPER    #Must be set to /opt/bootstrap
FUNC_VERSION.Handler              #Must be either a binary or a script with shebang, e.g.:
                                  #  - *.sh calling `node *.js`
                                  #  - *.js with a Node shebang
                                  #As opposed to a normal RUNTIME-specific file

ENVVAR AWS_LWA_READINESS_*        #Any FUNC_INSTANCE initialization is only marked as complete once the server is ready
                                  #I.e. the external extension allows for server startup
                                  #It does so by polling HTTP GET request every 10ms
ENVVAR
 AWS_LWA_READINESS_CHECK_PATH     #'PATH' (def: '/')
ENVVAR
 AWS_LWA_READINESS_CHECK_PORT     #PORT_NUM (def: same as AWS_LWA_PORT)
ENVVAR
 AWS_LWA_READINESS_CHECK_PROTOCOL #'http' (def) or 'tcp'
ENVVAR AWS_LWA_READINESS_CHECK
 _MIN_UNHEALTHY_STATUS            #Minimum STATUS_NUM (def: '500') to consider server not ready
ENVVAR AWS_LWA_ASYNC_INIT         #'BOOL' (def: 'false'). After 10s of readiness polling:
                                  #  - signal that the FUNC_INSTANCE initialization is complete
                                  #     - this prevents FUNC_INSTANCE to restart after 10s initialization timeout,
                                  #       which is faster and cheaper
                                  #  - but any upcoming requests are still delayed until readiness passes
                                  #Should be enabled if server takes >10s to boot

REQUEST PROXYING ==>              #The external extension proxies the request|response, translating it to a normal HTTP request|response
                                  #I.e. the function can register the server as if it was not in Lambda, with normal REQ|RES
                                  #The following HTTP headers are also set
x-amzn-lambda-context:
 OBJ_JSON [C]                     #NCONTEXT.* (see below)
x-amzn-request-context:
 OBJ_JSON [C]                     #When called through API Gateway Lambda INTEGRATION: its REQ.* (see its doc)

ENVVAR AWS_LWA_HOST               #Server host (def: '127.0.0.1')
ENVVAR AWS_LWA_PORT               #Server PORT_NUM (def: '8080')
                                  #Must not be <=1024, 3000 or 9001
ENVVAR AWS_LWA_REMOVE_BASE_PATH   #STR to strip from REQ's 'PATH'
ENVVAR AWS_LWA_PASS_THROUGH_PATH  #'/PATH' (def: '/events') when called by TRIGGERs
                                  #Used with HTTP_METHOD POST

ENVVAR AWS_LWA_INVOKE_MODE        #'buffered' (def) or 'response_stream'. FUNC_URL.InvokeMode
ENVVAR AWS_LWA_ENABLE_COMPRESSION #'BOOL' (def: false). Compress response body with gzip unless either:
                                  #  - Content-Length: <32 [S]
                                  #  - Content-Type: image* [S]
ENVVAR                            #'HEADER' (def: none) to rename to Authorization [C]
 AWS_LWA_AUTHORIZATION_SOURCE     #Meant when using FUNC_URL.AuthType 'AWS_IAM':
                                  #  - since it uses Authorization [C] itself
                                  #  - i.e. Lambda itself would use Authorization [C] for it,
                                  #    then rename 'HEADER' to Authorization [C] for the FUNCTION's code itself

TERMINATION ==>                   #When FUNC_INSTANCE is shutdown, sends SIGTERM, which can be handled (SIGKILL after 500ms)

                                  ┌───────────────┐
                                  │   DEBUG CLI   │
                                  └───────────────┘

lsh                               #CLI to run shell commands in temporary Lambda FUNCTION, for debugging purpose
                                  #Version 0.2.2 (2022-10-23)

~/.lsh                            #CONF, as JSON file
lsh config                        #Prints CONF (only some of the properties)
lsh reset                         #Re-initialize CONF

lsh install                       #Upsert a CloudFormation STACK with a Lambda FUNC
                                  #Uses Node 16, CONCURRENCY 1
                                  #Lambda FUNCTION:
                                  #  - executes REQ.command 'SHELL_COMMAND' as is
                                  #  - returns stdout|stderr|ERROR as is
                                  #  - /tmp: both initial cwd, ENVVAR HOME, and part of ENVVAR PATH
                                  #Also creates a CloudWatch LOG_GROUP '/aws/lambda/lsh' with retentionInDays 1
CONF.region                       #'REGION'
--region|-r                       #Def: 'us-east-1'
CONF.stackName                    #CloudFormation 'STACK'
                                  #Def: 'lambda-shell'
CONF.functionName                 #Lambda 'FUNCTION'
                                  #Def: 'lsh'
CONF.bucketName                   #S3 'BUCKET' to upload TEMPLATE to (using STACK.TemplateURL)
--bucket|-b                       #Created if does not exist
                                  #S3 'OBJECT' is always 'lsh.json'
                                  #Also used to upload zipped Lambda FUNCTION, as 'lambda.zip'
                                  #Def: 'lsh-RANDOM'
CONF.memorySize                   #NUM. FUNC_VERSION.MemorySize
--memory|-m                       #Def: 128
CONF.timeout                      #NUM. FUNC_VERSION.Timeout
--timeout|-t                      #Def: 60
CONF.iamRoleArn                   #ROLE_ARN. FUNC_VERSION.Role
--iamRoleArn|-i                   #Def: ROLE with:
                                  #  - PACTION lambda:InvokeFunction on any FUNC
                                  #  - PACTION logs:CreateLogStream|PutRetentionPolicy|PutLogEvents on the LOG_GROUP
                                  #  (if EFS)
                                  #  - PACTION elasticfilesystem:ClientMount|ClientRootAccess|ClientWrite|DescribeMountTargets
                                  #  - PACTION ec2:CreateNetworkInterface|DescribeNetworkInterfaces|DeleteNetworkInterface
CONF.efsAccessPointArn            #ACCESS_POINT_ARN. FUNC_EFS.Arn
--efs-ap-arn|-e                   #Def: none
CONF.efsMountPath                 #STR. FUNC_EFS.LocalMountPath
--path|-p                         #Def: none
CONF.efsFileSystemArn             #STR. EFS ARN, used by default ROLE's POLICY
--efs-fs-arn|-f                   #Def: none
CONF.securityGroupId              #STR. FUNC_VPC.SecurityGroupIds
--security-group|-s               #Def: none
CONF.subnetId                     #STR. FUNC_VPC.SubnetIds
--subnet|-n                       #Def: none

lsh uninstall                     #Delete STACK and S3 BUCKET

lsh shell                         #Interactive shell, where each command is send to Lambda FUNCTION, then printed back locally

                                  ┌──────────────────────┐
                                  │   ESBUILD MAIN IAC   │
                                  └──────────────────────┘

new NodejsFunction(...CARGS, OPTS)#CFUNCTION that bundles local Node.js files with esbuild
                                  #Creates a HFASSET, i.e. uploads to S3 and copies to ASSEMBLY_DIR
                                  #Use HFOPTS.deployTime true, i.e. deleted from S3 after `cdk deploy`
                                  #Adds TEMPLATE.Resources.FUNCTION.Metadata 'aws:asset:property|path|is-bundled' (like Code.fromAsset())
                                  #To use esbuild in other contexts: see TypeScriptAsset in CDK docs

OPTS.*                            #Like CFUNCTION
OPTS.bundling                     #BBOPTS
OPTS.runtime                      #Def:
                                  #  - if FFLAG @aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion (recommended): 'nodejs'
                                  #  - 'nodejs16.x'
OPTS.handler                      #Def 'FILE': 'index', def 'METHOD': 'handler'

OPTS.awsSdkConnectionReuse        #BOOL. If true (def), adds ENVVAR AWS_NODEJS_CONNECTION_REUSE_ENABLED=1 (see JavaScript SDK doc)

OPTS.projectRoot                  #Root 'DIR' with all files to include
                                  #Def: OPTS.depsLockFilePath's DIR
OPTS.entry                        #'PATH' to entry file
                                  #Def: sibling file to __filename, with *.EXT -> *.CFUNCTION.EXT
BBOPTS.mainFields                 #STR_ARR. `esbuild --main-fields`
                                  #`package.json` main field, among 'main', 'module' or 'browser'
                                  #Def: ['main', 'module']

OPTS.code                         #CFUNCTION_OPTS.code
                                  #When specified, do not use esbuild nor create a HFASSET
                                  #  - i.e. ignores OPTS.bundling|projectRoot|entry
                                  #  - i.e. not very useful over a normal CFUNCTION

BBOPTS.assetHash                  #'ASSET_HASH' (see CDK doc)
                                  #Def: computed from bundling output

BBOPTS.commandHooks.EVENT         #To run during EVENT:
 ('DIR', 'DIR2')                  #  - beforeBundling: before tsc, esbuild and npm|yarn|pnpm
 ->'SHELL_COMMAND'_ARR            #  - beforeInstall: after tsc, esbuild, before npm|yarn|pnpm
                                  #  - afterBundling: after tsc, esbuild, npm|yarn|pnpm
                                  #'DIR' is input, 'DIR2' output:
                                  #  - with DOCKER_IMAGE: always '/asset-input' and '/asset-output'
                                  #  - with local build (BBOPTS.forceDockerBundling): OPTS.projectRoot and 'BDIR' (see CDK doc)

                                  ┌────────────────────────┐
                                  │   ESBUILD DOCKER IAC   │
                                  └────────────────────────┘

BBOPTS.dockerImage                #DOCKER_IMAGE that runs tsc, npm|yarn|pnpm, esbuild and commandHooks
                                  #Def: automatically provided
                                  #  - Dockerfile installs global dependencies: typescript, npm|yarn|pnpm, esbuild
RUNTIME_OPTS.bundlingDockerImage  #ECR 'REPO' used as default BBOPTS.dockerImage's `FROM`
                                  #Def: 'public.ecr.aws/sam/build-nodejs18.x', i.e. Amazon Linux Node 18 image with SAM
OPTS.architecture                 #CARCH (def: X86_64). `docker build --platform`
BBOPTS.buildArgs                  #OBJ. `docker build --build-arg VAR=VAL`
                                  #Only useful when using a custom BBOPTS.dockerImage
BBOPTS.bundlingFileAccess
 |entrypoint|securityOpt|network
 |user|volumes[From]|environment  #Like BOPTS.* (see CDK doc)
BBOPTS.workingDirectory           #Like BOPTS.*, but def '/'
BBOPTS.command                    #Like BOPTS.*
                                  #Def: runs esbuild, npm|yarn|pnpm and tsc
                                  #  - i.e. overriding it removes all that behavior

BBOPTS.forceDockerBundling        #If false, run tsc, npm|yarn|pnpm, esbuild and commandHooks locally without using BBOPTS.dockerImage
                                  #Def: false if esbuild is locally|globally installed
                                  #esbuild|tsc|npm|yarn|pnpm must be locally|globally installed (if used)
                                  #Current OS can be Unix|Windows
                                  #BBOPTS.bundlingFileAccess|entrypoint|securityOpt|network|user|volumes[From]|workingDirectory|command not used
                                  #BBOPTS.environment can be used
                                  #Should not be used when BBOPTS.nodeModules include Node native modules
                                  #  - since those should be built with Amazon Linux, i.e. in the DOCKER_IMAGE

                                  ┌────────────────────────────┐
                                  │   ESBUILD TYPESCRIPT IAC   │
                                  └────────────────────────────┘

BBOPTS.tsconfig                   #'PATH' to tsconfig, used by:
                                  #  - `esbuild --tsconfig`
                                  #  - BBOPTS.preCompilation
                                  #Def: tsconfig.json sibling to OPTS.entry or in .[/...]

BBOPTS.preCompilation             #BOOL (def: false). Runs `tsc` on OPTS.entry
                                  #Usually not needed, because esbuild does it by default

                                  ┌─────────────────────────┐
                                  │   ESBUILD MODULES IAC   │
                                  └─────────────────────────┘

BBOPTS.externalModules            #'PATH|MODULE'_ARR to exclude from output. `esbuild --external`
                                  #E.g. meant for global dependencies already available in Amazon Linux
                                  #Can include *, e.g. '*.EXT' or 'DIR/*'
                                  #Def depends on runtime:
                                  #  - Node latest: []
                                  #  - Node 14|16: ['aws-sdk'] (v2)
                                  #  - otherwise: ['@aws-sdk/*'] (v3)
                                  #     - if FFLAG @aws-cdk/aws-lambda-nodejs:sdkV3ExcludeSmithyPackages true (recommended, def: false),
                                  #       also '@smithy/*'
BBOPTS.bundleAwsSDK               #BOOL (def: false). Same as BBOPTS.externalModules ['@aws-sdk/*']

BBOPTS.nodeModules                #'MODULE'_ARR (def: []) to install instead of bundling
                                  #I.e. instead of inlining their code, create in output:
                                  #  - `node_modules` DIR with those MODULEs, installed through:
                                  #     - npm ci
                                  #     - yarn install --no-immutable
                                  #     - pnpm install --config.node-linker=hoisted --config.package-import-method=clone-or-copy --no-prefer-frozen-lockfile
                                  #  - package.json: with only those MODULEs as `dependencies`
                                  #MODULEs must be present in package.json `[dev|peer]dependencies`
                                  #If pnpm, also:
                                  #  - create empty pnpm-workspace.yaml
                                  #  - delete node_modules/.modules.yaml because it includes timestamp, i.e. would always change 'ASSET_HASH'
                                  #E.g. meant for Node native modules

OPTS.depsLockFilePath             #'PATH' to package-lock.json, yarn.lock or pnpm-lock.yaml, to keep in bundle
                                  #Also decide whether to use npm|yarn|pnpm
                                  #Def: look for it in .[/...]

                                  ┌────────────────────────┐
                                  │   ESBUILD CONFIG IAC   │
                                  └────────────────────────┘

BBOPTS.esbuildArgs                #{ '--ARG': 'VAL', ... } (def: {}). `esbuild` additional arguments
BBOPTS.esbuildVersion             #'NUM' (def: '0.21'), when using default BBOPTS.dockerImage

BBOPTS.target                     #STR. `esbuild --target`
                                  #Def: 'nodeX.Y' guessed from OPTS.runtime
BBOPTS.format                     #'cjs' (def), 'esm' or 'iife'. `esbuild --format`
                                  #Output format

BBOPTS.minify                     #BOOL (def: false). `esbuild --minify`
BBOPTS.keepNames                  #BOOL (def: false). `esbuild --keep-names`
                                  #Keep FUNC names during `--minify`

BBOPTS.sourceMapMode              #STR. `esbuild --sourcemap`. One of:
                                  #  - 'default': *.js.map + //# sourceMappingURL
                                  #  - 'external': *.js.map only
                                  #  - 'inline': inline source map
                                  #  - 'both': external + inline
                                  #Def: no source maps
BBOPTS.sourceMap                  #BOOL (def: false). True if like BBOPTS.sourceMapMode 'default'
BBOPTS.sourcesContent             #BOOL (def: true). `esbuild --sources-content`
                                  #Whether to generate SOURCE_MAP.sourcesContent

BBOPTS.banner|footer              #STR. `esbuild --banner|footer`
                                  #Inject STR at beginning|end of each file
BBOPTS.define.VAR                 #'VAL'. `esbuild --define`
                                  #Macros, using literal values
BBOPTS.inject                     #'PATH'_ARR. `esbuild --inject`
                                  #Macros|shims, using import|export
                                  #'PATH' must export VARR = VAL, which replaces any VARR by VAL

BBOPTS.loader.EXT                 #'MODULE'. `esbuild --loader`
                                  #MODULE pre-processing *.EXT files

BBOPTS.logLevel                   #'silent', 'error', 'warning' (def), 'info', 'debug', 'verbose'. `esbuild --log-level`
                                  #Also used by npm|yarn|pnpm
BBOPTS.metafile                   #'PATH'. `esbuild --metafile`
                                  #Creates file with bundling stats
