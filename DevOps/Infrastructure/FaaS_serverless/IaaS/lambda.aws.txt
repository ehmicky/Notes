
          
   LAMBDA  
          



TO DOCUMENT:
  - CloudWatch logs
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
  - Permissions (https://docs.aws.amazon.com/lambda/latest/dg/lambda-permissions.html)
  - VPC:
     - https://docs.aws.amazon.com/lambda/latest/dg/foundation-networking.html
     - https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html
     - https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc-endpoints.html
  - RDS proxy: https://docs.aws.amazon.com/lambda/latest/dg/configuration-database.html
  - AWS signer: https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html
  - AWS resource management: https://docs.aws.amazon.com/lambda/latest/dg/configuration-tags.html

VERSION ==>                       #2023-03-01


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PAGINATION ==>                    #  - request variable: Marker STR, MaxItems STR (max: 1e4)
                                  #  - response body: NextMarker STR

LIMITS ==>                        #Max 15 requests per second, except:
                                  #  - GetFunction(): 100 requests per second
                                  #  - Invoke(): no limits

PRICING ==>                       #Summary:
                                  #  - most of the price is proportional to:
                                  #     - total duration of INVOCATIONs, especially if INVOCATION duration >15ms
                                  #     - number of INVOCATIONs, especially if INVOCATION duration <15ms
                                  #     - MemorySize
                                  #  - free: 1 INVOCATION per 3s, with 400ms INVOCATION duration, MemorySize 1GB
                                  #  - provisioned CONCURRENCY:
                                  #     - cheap for FUNC_INSTANCEs run >60% of the time
                                  #     - otherwise, quite expensive
                                  #  - /tmp is cheap
                                  #  - use ARM because cheaper
                                  #INVOCATION:
                                  #  - 1$ per 5e6 INVOCATIONs
                                  #  - free: first 1e6 INVOCATIONs, per month (~1 per 3s)
                                  #Duration:
                                  #  - amount of time spent running FUNCTION|extensions initialization, INVOCATIONs and shutdown
                                  #  - does not include time frozen, i.e. between INVOCATIONs
                                  #  - each INVOCATION's duration is rounded up to 1ms
                                  #  - 1$ per 7.5e3 seconds (~21h) with MemorySize 1GB
                                  #  - price is proportional to duration + MemorySize
                                  #  - free: 4e5 seconds (~4.5 days) with MemorySize 1GB, per month
                                  #  - i.e. same price as INVOCATION cost if:
                                  #     - 400ms per INVOCATION, with 1GB (in free tier)
                                  #     - 15ms per INVOCATION, with 1GB (out of free tier)
                                  #  - 25% more expensive with x86_64
                                  #  - high duration discount:
                                  #     - 10% cheaper over 7.5e9 seconds, with MemorySize 1GB, per month (~3000 FUNC_INSTANCEs fulltime)
                                  #     - 20% cheaper over 11.25e9 seconds, with MemorySize 1GB, per month (~7000 FUNC_INSTANCEs fulltime)
                                  #Provisioned CONCURRENCY:
                                  #  - 9$ per month, per provisioned CONCURRENCY, with MemorySize 1GB
                                  #  - price is proportional to:
                                  #     - MemorySize
                                  #     - provisioned CONCURRENCY
                                  #     - percentage of time it was enabled
                                  #        - but not proportional to INVOCATIONs duration
                                  #  - impacts INVOCATIONs duration price:
                                  #     - 40% cheaper
                                  #     - no free tier, nor high duration discount
                                  #  - free: none
                                  #  - provisioning the CONCURRENCY of a FUNC_INSTANCE can be less|more expensive,
                                  #    depending on how much it runs:
                                  #     (excuding free tier)
                                  #     - 100% of the time: 15% cheaper
                                  #     - 60% of the time: same price
                                  #     - 30% of the time: 40% more expensive
                                  #     - 10% of the time: 2x more expensive
                                  #     - 1% of the time: 25x more expensive
                                  #  - i.e. possible scenarios for a given FUNC_INSTANCE
                                  #     - high-utilization: cheaper
                                  #     - low-utilization: high fixed cost, in exchange for high latency
                                  #/tmp cost:
                                  #  - 1$ per 3e7 seconds (~1 year) with EphemeralStorage.Size 1GB
                                  #  - i.e. when MemorySize === EphemeralStorage.Size, /tmp is 4000 times cheaper than RAM
                                  #  - free: none
                                  #Data transfer: same as EC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       ACCOUNT SETTINGS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetAccountSettings()              #Request parameters: empty
                                  #Response body: ACCOUNT_SETTINGS

ACCOUNT_SETTINGS                  #AWS account settings for Lambda
ACCOUNT_SETTINGS.AccountLimit     #ACCOUNT_LIMIT. Maximum limits
ACCOUNT_SETTINGS.AccountUsage     #ACCOUNT_USAGE. Current usage
ACCOUNT_USAGE.FunctionCount       #NUM. Number of FUNCTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateFunction()                  #Request parameters: NEW_FUNC_VERSION
                                  #  - no RevisionId
                                  #Response body: FUNC_VERSION
UpdateFunctionConfiguration()     #Request parameters: NEW_FUNC_VERSION
                                  #  - no Architectures, PackageType, Tags, CodeSigningConfigArn, Publish, Code
                                  #Response body: FUNC_VERSION
UpdateFunctionCode()              #Request parameters: NEW_FUNC_CODE
                                  #  - also RevisionId|Architectures: like FUNC_VERSION
                                  #  - also Publish: like NEW_FUNC_VERSION.*
                                  #  - DryRun BOOL (def: false)
                                  #Response body: FUNC_VERSION
GetFunctionConfiguration()        #Request parameters: FUNC_VERSION
                                  #  - only FunctionName, Qualifier
                                  #Response body: FUNC_VERSION
GetFunction()                     #Request parameters: FUNC_VERSION
                                  #  - only FunctionName, Qualifier
                                  #Response body: FUNCTION
ListFunctions()                   #Request parameters:
                                  #  - FunctionVersion 'ALL': all FUNC_VERSIONs instead of only latest
                                  #  - MasterRegion STR: AWS region of FUNC_VERSION.MasterArn
                                  #Response body: Functions FUNC_VERSION_ARR
ListVersionsByFunction()          #Request parameters: FUNC_VERSION
                                  #  - only FunctionName
                                  #Response body: Versions FUNC_VERSION_ARR
DeleteFunction()                  #Request parameters: FUNC_VERSION
                                  #  - only FunctionName, Qualifier
                                  #Response body: empty

FUNCTION                          #AWS Lambda function
FUNCTION.Configuration            #FUNC_VERSION
FUNC_VERSION                      #FUNCTION's specific version
NEW_FUNC_VERSION                  #Like FUNC_VERSION, but when being created.
                                  #  - no FunctionArn, MasterArn, CodeSha256, Version
                                  #  - no CodeSize, LastModified, LastUpdateStatus*, State*, *.Error
                                  #  - no RuntimVersionConfig, Signing*, SnapStart.OptimizationStatus, VpcConfig.VpcId
                                  #  - Layers LAYER_VERSION_SUMMARY_ARR -> 'LAYER_VERSION_ARN'_ARR
                                  #Also some additional fields, documented here

FUNC_VERSION.LastModified         #'DATETIME'
FUNC_VERSION.Description          #STR

FUNC_VERSION.State                #STR, among 'Pending', 'Failed', 'Active', 'Inactive'
FUNC_VERSION.StateReason          #STR
FUNC_VERSION.StateReasonCode      #STR

FUNC_VERSION.LastUpdateStatus     #STR, among 'InProgress', 'Successful', 'Failed'
FUNC_VERSION
 .LastUpdateStatusReason          #STR
FUNC_VERSION
 .LastUpdateStatusReasonCode      #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IDENTIFIERS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.FunctionArn          #'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION'
FUNC_VERSION.MasterArn            #Main FUNC_ARN. Only for Lambda@Edge
FUNC_VERSION.FunctionName         #'FUNCTION'
ENVVAR AWS_LAMBDA_FUNCTION_NAME   #'FUNCTION'

REVISION_ID                       #Changes each time a specific model is updated.
                                  #Meant to pass current one to an update call so it fails if there is a concurrent update
FUNC_VERSION.RevisionId           #'REVISION_ID'
FUNC_VERSION.CodeSha256           #STR. SHA256 checksum
                                  #Can be used as a REVISION_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION_NUM                       #NUM or '$LATEST'
QUALIFIER                         #Either:
                                  #  - 'VERSION_NUM': similar to git commit hash
                                  #  - 'ALIAS': similar to git tag
FUNC_VERSION.Version              #FUNCTION VERSION_NUM
FUNC_ARN                          #One of:
                                  #  - function full ARN
                                  #  - 'ACCOUNT_ID:function:FUNCTION[:QUALIFIER]'
                                  #  - 'FUNCTION[:QUALIFIER]'
                                  #"Qualified|unqualified ARN": whether QUALIFIER is used
ENVVAR AWS_LAMBDA_FUNCTION_VERSION#'NUM'

CreateAlias()                     #Request parameters: ALIAS
                                  #  - AliasArn -> FunctionName FUNC_ARN
                                  #  - no RevisionId
                                  #Response body: ALIAS
UpdateAlias()                     #Request parameters: ALIAS
                                  #  - AliasArn -> FunctionName FUNC_ARN
                                  #Response body: ALIAS
GetAlias()                        #Request parameters: ALIAS
                                  #  - only Name
                                  #  - also AliasArn -> FunctionName FUNC_ARN
                                  #Response body: ALIAS
ListAliases()                     #Request parameters: ALIAS
                                  #  - only FunctionVersion
                                  #  - also AliasArn -> FunctionName FUNC_ARN
                                  #Response body: Aliases ALIAS_ARR:
DeleteAlias()                     #Request parameters: ALIAS
                                  #  - only Name
                                  #  - also AliasArn -> FunctionName FUNC_ARN
                                  #Response body: empty

ALIAS                             #'ALIAS' of a given FUNC_VERSION
ALIAS.AliasArn                    #ALIAS_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION:ALIAS'
ALIAS.Name                        #'ALIAS'
ALIAS.RevisionId                  #'REVISION_ID'
ALIAS.FunctionVersion             #'FUNC_VERSION'
ALIAS.Description                 #STR

ALIAS.RoutingConfig               #Route some traffic to different FUNC_VERSIONs
 .AdditionalVersionWeights        #  - otherwise, route the rest of the traffic to current ALIAS
                                  #  - max 2 FUNC_VERSIONs
                                  #OBJ:
                                  #  - key is 'FUNC_VERSION'
                                  #  - value is NUM from 0 to 1 (percentage)
                                  #FUNC_VERSIONs must:
                                  #  - have same Role|DeadLetterConfig as ALIAS
                                  #  - be published
                                  #  - not be '$LATEST'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.PackageType          #How code is uploaded:
                                  #  - 'Zip': .zip file passed either directly or with S3 URL
                                  #  - 'Image': container image
                                  #Also called "deployment package"
FUNCTION.Code                     #FUNC_CODE. Where .zip archive or container image is located
NEW_FUNC_VERSION.Code             #NEW_FUNC_CODE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CODE ZIP            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NEW_FUNC_CODE.ZipFile             #Zip archive content, base64-encoded

NEW_FUNC_CODE.S3Bucket            #STR. S3 'BUCKET' storing the .zip code
                                  #Either:
                                  #  - no ZipFile, i.e. must specify S3 location
                                  #  - ZipFile, i.e. S3 location automatically allocated
NEW_FUNC_CODE.S3Key               #STR. S3 object path
NEW_FUNC_CODE
 .S3ObjectVersion                 #STR. S3 VERSION_ID

FUNC_CODE.RepositoryType          #STR hosting the file
FUNC_CODE.Location                #S3 'URI' to .zip archive
                                  #Only valid 10 minutes

FUNC_VERSION.CodeSize             #NUM (in bytes). Size of the zip archive
ACCOUNT_LIMIT.TotalCodeSize       #NUM (in bytes). Max size of all FUNC_VERSION|LAYER_VERSIONs .zip files on S3, per REGION.
                                  #Max 75GB but can be increased to a few TBs through support
                                  #I.e. should cleanup FUNC_VERSION|LAYER_VERSIONs.
ACCOUNT_USAGE.TotalCodeSize       #NUM (in bytes). Current usage of ACCOUNT_LIMIT.TotalCodeSize
ACCOUNT_LIMIT.CodeSizeZipped      #NUM (in bytes). Max size when uploading a single FUNCTION|LAYER's .zip archive (without S3)
                                  #i.e. of NEW_FUNC_CODE|LAYER_VERSION_INPUT.ZipFile
                                  #Max 50MB
ACCOUNT_LIMIT.CodeSizeUnzipped    #NUM (in bytes). Max size when extracting a single FUNCTION|LAYER's .zip archive (with|without S3)
                                  #Max 250MB

BLUEPRINT ==>                     #Sample NEW_FUNC_CODE.ZipFile for a given Runtime.
                                  #Only available through the UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CODE IMAGE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTAINER IMAGE ==>               #Must follow OCI 1.0.0 specification
                                  #Must follow Docker image manifest v2, schema 2
                                  #Must be Linux-based
                                  #Max 10GB uncompressed
                                  #Must use the custom runtime API
                                  #Must not write on the filesystem, except for /tmp

FUNC_CODE.ResolvedImageUri        #'URI' to the container image
[NEW_]FUNC_CODE.ImageUri          #'URI' to the container image in AWS ECR

FUNC_VERSION.ImageConfigResponse  #IMAGE. Container image's configuration.
 .ImageConfig                     #Max 16KB
IMAGE.EntryPoint                  #STR_ARR. Like Docker ENTRYPOINT
IMAGE.Command                     #STR_ARR. Like Docker CMD, i.e. arguments to EntryPoint
IMAGE.WorkingDirectory            #STR. Like Docker WORKDIR
ENV ==>                           #Automatically filled by FUNC_VERSION.Environment

public.ecr.aws/lambda/            #Recommended base images
 RUNTIME[-ARCH]                   #Follow every constraint, including implementing the custom runtime API
                                  #Exposes following ENVVARs: LAMBDA_TASK_ROOT, LAMBDA_RUNTIME_DIR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LAYER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListLayers()                      #Request parameters: LAYER_VERSION
                                  #  - only CompatibleRuntime, CompatibleArchitecture
                                  #Response body: Layers LAYER_ARR
                                  #  - no LatestMatchingVersion.Content

LAYER                             #Lambda layer, as output
                                  #.zip archive with files shared between multiple FUNCTIONs
                                  #E.g. libraries, custom runtime or data|config files
                                  #Mounted at /opt
                                  #  - directories|files are merged, with last LAYER having priority
                                  #Only if PackageType 'Zip'
                                  #Max 5 per FUNCTION
LAYER.LayerArn                    #'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME'
LAYER.LayerName                   #'LAYER_NAME'
LAYER.LatestMatchingVersion       #Most recent LAYER_VERSION

PublishLayerVersion()             #Request parameters: LAYER_VERSION
                                  #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - no CreatedDate, Version
                                  #Response body: LAYER_VERSION
GetLayerVersion()                 #Request parameters: LAYER_VERSION
                                  #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - only Version -> VersionNumber
                                  #Response body: LAYER_VERSION
GetLayerVersionByArn()            #Request parameters: LAYER_VERSION
                                  #  - LayerVersionArn -> Arn
                                  #  - only Version -> find
                                  #Response body: LAYER_VERSION
ListLayerVersions()               #Request parameters: LAYER_VERSION
                                  #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - only CompatibleRuntimes, CompatibleArchitectures
                                  #Response body: LayerVersions LAYER_VERSION_ARR
                                  #  - no Content
DeleteLayerVersion()              #Request parameters: LAYER_VERSION
                                  #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - only Version -> VersionNumber
                                  #Response body: empty

LAYER_VERSION                     #Specific version of a LAYER
LAYER_VERSION.LayerVersionArn     #'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME:NUM'
LAYER_VERSION.Version             #NUM
LAYER_VERSION.CreatedDate         #'DATETIME'
LAYER_VERSION.Description         #STR
LAYER_VERSION.LicenseInfo         #STR. Open-source license identifier

LAYER_VERSION.Content             #In input: LAYER_CONTENT_INPUT
                                  #In output: LAYER_CONTENT_OUTPUT
LAYER_VERSION_INPUT.ZipFile|S3*   #Like NEW_FUNC_CODE.*
LAYER_VERSION_OUTPUT.CodeSha256|
 CodeSize|SigningJobArn|
 SigningProfileVersionArn         #Like FUNC_VERSION.*
LAYER_VERSION_OUTPUT.Location     #Like FUNC_CODE.*

FUNC_VERSION.Layers               #LAYER_VERSION_SUMMARY_ARR. Layers to associate to a FUNC_VERSION
LAYER_VERSION_SUMMARY             #Like LAYER_VERSION, but fewer fields
LAYER_VERSION_SUMMARY.Arn         #LAYER_VERSION_ARN
LAYER_VERSION_SUMMARY
 .CodeSize|SigningJobArn|
 SigningProfileVersionArn         #Like LAYER_VERSION_OUTPUT.*

/bin
/lib                              #Preferred location for LAYERs shared binaries|libraries


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXTENSION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


/opt/extensions/FILE              #"External extensions", i.e. executable run separately from the runner
                                  #  - different process than the FUNC_INSTANCE's
                                  #  - initialized|shutdown at the same time as the runner
                                  #Either:
                                  #  - shared as LAYER, for PackageType 'Zip'
                                  #  - added manually by Dockerfile, if PackageType 'image'
                                  #Max 10 per FUNCTION
                                  #Only partially documented

EAPI                              #http://AWS_LAMBDA_RUNTIME_API/2020-01-01/extension
POST EAPI/register                #Initializes
POST EAPI/init/error              #Initialization error
GET EAPI/event/next               #Receives next INVOCATION or Shutdown event
POST EAPI/exit/error              #Exit error

TELEMETRY API ==>                 #Allows extensions to retrieve logs, metrics and traces related to:
                                  #  - the execution environment lifecycle|logs
                                  #  - the INVOCATIONs logs
                                  #  - the extension itself logs
                                  #Done via HTTP|TCP webhooks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PUBLISH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PublishVersion()                  #Publish a FUNC_VERSION
                                  #Request parameters: FUNC_VERSION
                                  #  - only FunctionName, RevisionId, CodeSha256, Description
                                  #Response body: FUNC_VERSION
NEW_FUNC_VERSION.Publish          #BOOL (def: false)
                                  #Whether is is live
                                  #Makes it read-only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Runtime              #STR. Runtime, among:
                                  #  - 'nodejs[VERSION]' with VERSION: 14.x, 16.x, 18.x
                                  #  - 'goVERSION' with VERSION: 1.x
                                  #  - 'pythonVERSION' with VERSION: 3.7, 3.8, 3.9
                                  #  - 'javaVERSION' with VERSION: 8.al2, 11
                                  #  - 'rubyVERSION' with VERSION: 2.7
                                  #  - 'dotnetcoreVERSION' with VERSION: 5.0, 6
                                  #  - 'provided[VERSION]' with VERSION: .al2
                                  #OS:
                                  #  - Amazon Linux 1: go*, python3.7, provided (not provided.al2)
                                  #  - Amazon Linux 2: all others
                                  #Not if PackageType 'Image'
LAYER_VERSION.CompatibleRuntimes  #STR_ARR among same values as FUNC_VERSION.Runtime
ENVVAR AWS_EXECUTION_ENV          #'AWS_Lambda_RUNTIME'

FUNC_VERSION.Handler              #STR. Code's entry point function name
                                  #Not if PackageType 'Image'

ENVVAR LAMBDA_RUNTIME_DIR         #Path to Runtime files, e.g. /var/runtime

ENVVAR NODE_OPTIONS               #Can be used with Runtime 'nodejs*'

ENVVAR AWS_LAMBDA_EXEC_WRAPPER    #'PATH' to an executable script.
                                  #"Wrapper script", executed instead of FUNC_VERSION.Runtime
                                  #Script arguments are same as original Runtime
                                  #  - including argv[0], i.e. runtime binary itself
                                  #Only with Runtime using Amazon Linux 2, except 'provided.al2'
INTERNAL EXTENSION ==>            #Logic that runs inside the FUNC_INSTANCE's process
                                  #Achieved by using ENVVAR AWS_LAMBDA_EXEC_WRAPPER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR NODE_PATH                  #'/opt/nodejs/nodeVERSION/node_modules/:/opt/nodejs/node_modules:$LAMBDA_RUNTIME_DIR/node_modules'
LAMBDA_RUNTIME_DIR/node_modules   #Preferred locattion for node modules of FUNCTIONs
/opt/nodejs[/nodeVERSION]
 /node_modules                    #Preferred location for node modules of LAYERs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PYTHON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR PYTHON_PATH                #LAMBDA_RUNTIME_DIR

/opt/python                       #
/opt/python/lib/pythonVERSION
 /site-packages                   #Preferred location for LAYERs packages


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CUSTOM RUNTIME         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CUSTOM RUNTIME ==>                #When FUNC_VERSION.Runtime 'provided*'
                                  #FUNC_CODE|LAYER must include an executable script at '/bootstrap', which is run
                                  #Only partially documented here

ENVVAR LAMBDA_TASK_ROOT           #FUNC_CODE's 'DIR', e.g. /var/task
                                  #Should change cwd to it during initialization

ENVVAR _HANDLER                   #'FILE.METHOD' of the main file, with METHOD being FUNC_VERSION.Handler

ENVVAR AWS_LAMBDA_RUNTIME_API     #'HOST:PORT' of custom runtime API
RAPI                              #http://AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime

POST RAPI/init/error              #Report error during initialization
GET RAPI/invocation/next          #Get next INVOCATION_REQ
                                  #Request body: empty
                                  #Response body: INVOCATION_REQ.Payload
POST RAPI/invocation/REQ_ID/      #Set INVOCATION_RES
 response                         #Request body: INVOCATION_RES.ResponseBody
                                  #Response body: empty
POST RAPI/invocation/REQ_ID/error #Report error during INVOCATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RUNTIME VERSION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNTIME_VERSION                   #Minor|patch version of a specific FUNC_VERSION.Runtime

PutRuntimeManagementConfig()      #Request parameters: RUNTIME_MGMT
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - RuntimeVersionArn: only if UpdateRuntimeOn 'Manual'
                                  #Response body: RUNTIME_MGMT
GetRuntimeManagementConfig()      #Request parameters:
                                  #  - only FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: RUNTIME_MGMT

RUNTIME_MGMT                      #How RUNTIMEs are upgraded to new RUNTIME_VERSIONs
RUNTIME_MGMT.FunctionArn          #FUNC_ARN
RUNTIME_MGMT.UpdateRuntimeOn      #STR. How RUNTIME upgrade happens, among:
                                  #  - 'Auto' (def):
                                  #     - in a first phase, only on newly created|updated FUNCTIONs
                                  #     - in a second phase, on all FUNCTIONs
                                  #  - 'FunctionUpdate': only on newly created|updated FUNCTIONs
                                  #  - 'Manual': pinned to RUNTIME_MGMT.RuntimeVersionArn
RUNTIME_MGMT
 .RuntimeVersionArn
FUNC_VERSION.RuntimeVersionConfig #RUNTIME_VERSION_ARN. Runtime specific version
 .RuntimeVersionArn               #'arn:aws:lambda:REGION::runtime:RUNTIME_VERSION'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     EXECUTION ENVIRONMENT     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Architectures        #STR_ARR. CPU architecture. Single item, among:
                                  #  - 'x86_64' (def)
                                  #  - 'arm64'
                                  #     - cheaper for equivalent performance
                                  #     - must:
                                  #        - use a Runtime with Amazon Linux 2
                                  #        - make sure FUNC_VERSION|LAYER_VERSION's code supports ARM
                                  #Not if PackageType 'Image'
LAYER_VERSION
 .CompatibleArchitectures         #STR_ARR among same values as FUNC_VERSION.Architectures

FUNC_VERSION.MemorySize           #NUM (in MB). Amount of memory
                                  #Min: 128, max: 10GB
                                  #Also allocates 1 vCPU for each 1769MB
ENVVAR
 AWS_LAMBDA_FUNCTION_MEMORY_SIZE  #'NUM'

MAX PROCESSES ==>                 #1e3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ENVIRONMENT VARIABLES     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Environment          #'VAL'. Environment variable.
 .Variables.VAR                   #Not logged by CloudTrail
                                  #Max 4KB for all environment variables per FUNC_VERSION

FUNC_VERSION.KMSKeyArn            #AWS KMS key ARN. Encrypt environment variables
                                  #Also encrypts SNAP_START's snapshot, if any
                                  #Def: automatically created
ENCRYPTION IN TRANSIT ==>         #Can encrypt each environment variable not only when persisted, but also its value runtime
                                  #Must be done through UI

ENVVAR AWS_REGION
ENVVAR AWS_ACCESS_KEY
ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
ENVVAR AWS_SESSION_TOKEN          #

ENVVAR LANG                       #'en_US.UTF-8'
ENVVAR TZ                         #'UTC'
ENVVAR PATH                       #'/usr/local/bin:/usr/bin/:/bin:/opt/bin'
ENVVAR LD_LIBRARY_PATH            #'/lib64:/usr/lib64:$LAMBDA_RUNTIME_DIR:$LAMBDA_RUNTIME_DIR/lib:$LAMBDA_TASK_ROOT:$LAMBDA_TASK_ROOT/lib:/opt/lib'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FILESYSTEM           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.EphemeralStorage.Size#NUM (in MB) to allocate for /tmp
                                  #Def|min: 512, max: 10GB
                                  #Kept for a given FUNC_INSTANCE

FUNC_VERSION.FileSystemConfigs    #FUNC_EFS_ARR. Mount an AWS EFS
                                  #Required permissions:
                                  #  - 'elasticfilesystem:ClientMount'
                                  #  - 'elasticfilesystem:ClientWrite' (unless readonly)
FUNC_EFS.Arn                      #EFS ACCESS_POINT ARN
FUNC_EFS.LocalMountPath           #'/mnt/DIR'

MAX FILE DESCRIPTORS ==>          #1e3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          NETWORKING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.VpcConfig            #FUNC_VPC. VPC of a FUNCTION
                                  #By default, uses a VPC that cannot access other VPCs|resources of current account
FUNC_VPC.VpcId                    #STR
FUNC_VPC.SubnetIds                #STR_ARR
FUNC_VPC.SecurityGroupIds         #STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              URL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateFunctionUrlConfig()         #Request parameters: FUNC_URL
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no FunctionUrl, CreationTime, LastModifiedTime
                                  #Response body: FUNC_URL
UpdateFunctionUrlConfig()         #Request parameters: FUNC_URL
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no FunctionUrl, CreationTime, LastModifiedTime
                                  #Response body: FUNC_URL
GetFunctionUrlConfig()            #Request parameters: FUNC_URL
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: FUNC_URL
ListFunctionUrlConfigs()          #Request parameters: FUNC_URL
                                  #  - FunctionArn -> FunctionName FUNC_ARN
                                  #Response body: FunctionUrlConfigs FUNC_URL_ARR
DeleteFunctionUrlConfig()         #Request parameters: FUNC_URL
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: empty

FUNC_URL                          #URL of a FUNCTION to invoke directly
FUNC_URL.FunctionArn              #FUNC_ARN
FUNC_URL.CreationTime             #'DATETIME'
FUNC_URL.LastModifiedTime         #'DATETIME'

FUNC_URL.FunctionUrl              #HTTP 'URL'
FUNC_URL.AuthType                 #Authentication to access the URL, among:
                                  #  - 'NONE' (def)
                                  #  - 'AWS_IAM': only IAM-authenticated users

FUNC_URL.Cors                     #CORS headers
CORS.AllowOrigins                 #'URI'_ARR
CORS.AllowMethods                 #'METHOD'_ARR
CORS.AllowHeaders                 #'HEADER'_ARR
CORS.AllowCredentials             #BOOL (def: false)
CORS.MaxAge                       #NUM (in secs). Max: 1 day
CORS.ExposeHeaders                #'HEADER'_ARR



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Role                 #IAM's ROLE ARN, assumed by the FUNCTION

AddPermission()                   #Request parameters: PERMISSION
                                  #  - no Statement
                                  #Response body: PERMISSION
                                  #  - only Statement
GetPolicy()                       #Request parameters:
                                  #  - FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body:
                                  #  - Policy 'POLICY'
                                  #  - RevisionId STR: of the POLICY
RemovePermission()                #Request parameters: PERMISSION
                                  #  - only FunctionName|Qualifier|RevisionId|StatementId
                                  #Response body: empty

PERMISSION                        #Authorization to run a FUNC|FUNC_VERSION|ALIAS
                                  #Max 'POLICY' size: 20KB
PERMISSION.FunctionName           #FUNC_ARN
PERMISSION.Qualifier              #'QUALIFIER'
PERMISSION.RevisionId             #'REVISION_ID'

PERMISSION.StatementId            #POLICY's STATEMENT.Id
PERMISSION.Statement              #POLICY's STATEMENT as STR
PERMISSION.Action                 #'lambda:...' or 'lambda:*' or '*'
PERMISSION.PrincipalOrgID         #STR. Authorize all AWS accounts of that AWS organization ID.
PERMISSION.Principal              #STR. Authorize either:
                                  #  - AWS account ID
                                  #  - AWS service 'DOMAIN': e.g. 's3|sns.amazonaws.com' or '*'
PERMISSION.SourceArn              #'ARN' of the AWS service being authorized.
                                  #Meant as additional protection over PERMISSION.Principal
PERMISSION.SourceAccount          #STR. AWS organization ID of the AWS service being authorized
                                  #Meant as additional protection over PERMISSION.SourceArn
PERMISSION.EventSourceToken       #STR. Alexa Smart Home function token

AddLayerVersionPermission()       #Request parameters: LAYER_PERMISSION
                                  #  - no Statement
                                  #Response body: LAYER_PERMISSION
                                  #  - only RevisionId, Statement
GetLayerVersionPolicy()           #Request parameters:
                                  #  - LayerName 'LAYER_NAME'
                                  #  - VersionNumber NUM
                                  #Response body:
                                  #  - Policy 'POLICY'
                                  #  - RevisionId STR: of the POLICY
RemoveLayerVersionPermission()    #Request parameters: LAYER_PERMISSION
                                  #  - only LayerName|VersionNumber|RevisionId|StatementId
                                  #Response body: empty

LAYER_PERMISSION                  #Authorization to run a LAYER_VERSION
LAYER_PERMISSION.LayerName        #'LAYER'
LAYER_PERMISSION.VersionNumber    #NUM
LAYER_PERMISSION.RevisionId       #'REVISION_ID'

LAYER_PERMISSION.StatementId      #POLICY's STATEMENT.Id
LAYER_PERMISSION.Statement        #POLICY's STATEMENT as STR
LAYER_PERMISSION.Action           #'lambda:...' or 'lambda:*' or '*'
LAYER_PERMISSION.Principal        #STR. Authorize an AWS account ID, or '*'
LAYER_PERMISSION.OrganizationId   #STR. With LAYER_PERMISSION.Principal '*', only authorize AWS accounts of that AWS organization ID.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              TAG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagResource()                     #Request parameters: FUNC_TAGS
                                  #Response body: empty
ListTags()                        #Request parameters: FUNC_TAGS
                                  #  - only ARN
                                  #Response body: FUNC_TAGS
                                  #  - no ARN
UntagResource()                   #Request parameters: FUNC_TAGS
                                  #  - Tags -> TagKeys STR_ARR
                                  #Response body: empty

FUNC_TAGS                         #Arbitrary metadata on a FUNCTION
                                  #Can be used for authorization
FUNC_TAGS.ARN                     #FUNC_ARN
FUNC_TAGS|FUNCTION|
 NEW_FUNC_VERSION.Tags            #OBJ with keys and STR values


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CODE SIGNING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutFunctionCodeSigningConfig()    #Request parameters: FUNC_CODE_SIGNING
                                  #Response body: FUNC_CODE_SIGNING
GetFunctionCodeSigningConfig()    #Request parameters: FUNC_CODE_SIGNING
                                  #  - no CodeSigningConfigArn
                                  #Response body: FUNC_CODE_SIGNING
ListFunctionsByCodeSigningConfig()#Request parameters: FUNC_CODE_SIGNING
                                  #  - no FunctionName
                                  #Response body: FunctionArns FUNC_ARN_ARR
DeleteFunctionCodeSigningConfig() #Request parameters: FUNC_CODE_SIGNING
                                  #  - no CodeSigningConfigArn
                                  #Response body: empty

FUNC_CODE_SIGNING                 #Associate a FUNCTION with a CODE_SIGNING
                                  #Only if PackageType 'Zip'
FUNC_CODE_SIGNING
 .FunctionName                    #FUNC_ARN
FUNC_CODE_SIGNING|
 NEW_FUNC_VERSION
 .CodeSigningConfigArn            #CODE_SIGNING_ARN

FUNC_VERSION
 .SigningProfileVersionArn        #AWS Signer's SIGNING_PROFILE_ARN
FUNC_VERSION.SigningJobArn        #AWS Signer's SIGNING_JOB_ARN

CreateCodeSigningConfig()         #Request parameters: CODE_SIGNING
                                  #  - no CodeSigningConfigArn|Id, LastModified
                                  #Response body: CODE_SIGNING
UpdateCodeSigningConfig()         #Request parameters: CODE_SIGNING
                                  #  - no CodeSigningConfigId, LastModified
                                  #Response body: CODE_SIGNING
GetCodeSigningConfig()            #Request parameters: CODE_SIGNING
                                  #  - only CodeSigningConfigArn
                                  #Response body: CODE_SIGNING
ListCodeSigningConfigs()          #Request parameters: empty
                                  #Response body: CodeSigningConfigs CODE_SIGNING_ARR
DeleteCodeSigningConfig()         #Request parameters: CODE_SIGNING
                                  #  - only CodeSigningConfigArn
                                  #Response body: empty

CODE_SIGNING                      #Require signing a code package to publish it
                                  #Uses AWS Signer
CODE_SIGNING.Description          #STR
CODE_SIGNING.LastModified         #'DATE_TIME'

CODE_SIGNING                      #CODE_SIGNING_ARN
 .CodeSigningConfigArn            #'arn:aws:lambda:REGION:ACCOUNT_ID:code-signing-config:CODE_SIGNING'
CODE_SIGNING                      #'CODE_SIGNING'.
 .CodeSigningConfigId             #'csc-' followed by [:alnum:]_-.
CODE_SIGNING.AllowedPublishers
 .SigningProfileVersionArns       #SIGNING_PROFILE_ARN_ARR allowed to sign a code package
CODE_SIGNING                      #What to do when code package not properly signed. Either
 .CodeSigningPolicies             #  - 'Warn' (def): CloudWatch log
 .UntrustedArtifactOnDeployment   #  - 'Enforce': publish fails


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LIFECYCLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INVOCATION                        #Single run of a FUNC_VERSION.
                                  #Can be done by FUNC_URL, Invoke() or TRIGGER

FUNC_INSTANCE                     #When a FUNC_VERSION is first invoked, a FUNC_INSTANCE boots ("cold start"):
                                  #  - runtime is initialized
                                  #     - for most runtimes, ~200-500ms
                                  #     - with PackageType 'Image', ~750-1250ms
                                  #  - function is initialized
                                  #     - e.g. top-level scope is read with Node.js
                                  #  - max 10s
                                  #After each INVOCATION:
                                  #  - the FUNC_INSTANCE stays up to be re-used by the next INVOCATION
                                  #  - the environment is frozen
                                  #  - any background process still running will resume in next INVOCATION
                                  #After each INVOCATION that crashes process or times out:
                                  #  - the runtime|function is shutdown
                                  #  - FUNC_INSTANCE stays up, but the runtime|function is re-initialized in next INVOCATION
                                  #After 5m-7m idle, the runtime and FUNC_INSTANCE are shutdown
                                  #  - max 2s, otherwise SIGKILL

FUNC_VERSION.SnapStart            #SNAP_START. Initializes the FUNC_INSTANCE at publish-time instead of during first INVOCATION
                                  #Max initialization time is min(FUNC_VERSION.Timeout, 2m)
                                  #Only with Runtime 'java*'
                                  #Cannot be used together with PCONCURRENCY
                                  #Can register in FUNCTION code some event handlers:
                                  #  - beforeCheckpoint(): end of initialization
                                  #  - afterRestore(): before first INVOCATION
                                  #     - max 2s
SNAP_START.ApplyOn                #Whether to apply: 'None' (def, i.e. no) or 'PublishedVersions' (yes)
SNAP_START.OptimizationStatus     #Whether to apply on each separate FUNC_VERSION|ALIAS: 'On' or 'Off' (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INVOKE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Invoke()                          #Request parameters: INVOCATION_REQ
                                  #  - URI path: FunctionName
                                  #  - Query variable: Qualifier
                                  #  - X-Amz-* [C] header: InvocationType|ClientContext|LogType
                                  #  - Request payload: Payload
                                  #Response: INVOCATION_RES
                                  #  - status code: StatusCode
                                  #  - X-Amz-* [S] headers: ExecutedVersion|LogResult|FunctionError
                                  #  - body: ResponseBody

INVOCATION_REQ                    #Request of an INVOCATION
INVOCATION_REQ.FunctionName       #FUNC_ARN
INVOCATION_REQ.Qualifier          #'QUALIFIER'

INVOCATION_REQ.InvocationType     #STR. One of:
                                  #  - 'RequestResponse' (def): sync call
                                  #  - 'Event':
                                  #     - async call
                                  #     - client's request is placed in a queue
                                  #        - empty response returned to client
                                  #     - queue sends requests to FUNCTION
                                  #        - FUNCTION's response is ignored
                                  #  - 'DryRun': only validate parameters and permissions
INVOCATION_REQ.Payload            #'JSON'. Request payload
                                  #Sometimes also called "event"
                                  #Max size depends on InvocationType:
                                  #  - RequestResponse|DryRun: 6MB
                                  #  - Event: 256KB
INVOCATION_REQ.ClientContext      #STR. Base64-encoded context 'JSON' to pass to FUNCTION
INVOCATION_REQ.LogType            #Either:
                                  #  - 'None' (def)
                                  #  - 'Tail':
                                  #     - include X-Amz-Log-Result [S]
                                  #     - only if InvocationType 'RequestResponse'

INVOCATION_RES                    #Response of an INVOCATION
INVOCATION_RES.StatusCode         #NUM.
                                  #On success or function error, depends on InvocationType:
                                  #  - RequestResponse: 200
                                  #  - Event: 202
                                  #  - DryRun: 204
                                  #On invocation error: 4**|5**
INVOCATION_RES.FunctionError      #'MESSAGE' on function error
INVOCATION_RES.ResponseBody       #STR, as sent by FUNCTION
                                  #Or error OBJ on function error
                                  #Empty if InvocationType 'Event|DryRun'
                                  #Max size: 6MB
INVOCATION_RES.ExecutedVersion    #VERSION_NUM
INVOCATION_RES.LogResult          #FUNCTION stdout|stderr
                                  #Last 4KB only
                                  #Base64 encoded


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ERROR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INVOCATION ERROR ==>              #Error unrelated to the FUNCTION's code: permissions, limits
FUNCTION ERROR ==>                #Error related to the FUNCTION's code:
                                  #  - Runtime: process exit, timeout, invalid payload
                                  #  - Function: error response, exception
FINAL SUCCESS|ERROR ==>           #State after all retries, for both invocation|function error

FUNC_VERSION.Timeout              #NUM (in secs). Times out for each INVOCATION
                                  #Excludes initialization, but includes extensions
                                  #Def: 3s, max: 15m

FUNC_VERSION.Environment|
 ImageConfigResponse|
 RuntimeVersionConfig.Error       #FUNC_VERSION_ERROR. Error when Environment|ImageConfig|Runtime cannot be applied
FUNC_VERSION_ERROR.Message        #STR
FUNC_VERSION_ERROR.ErrorCode      #STR

FUNC_VERSION.TracingConfig        #TRACING. AWS X-Ray configuration.
TRACING.Mode                      #Either 'Active' or 'PassThrough'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENT INVOKE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutFunctionEventInvokeConfig()    #Request parameters: EVENT_INVOKE
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no LastModified
                                  #Response body: EVENT_INVOKE
UpdateFunctionEventInvokeConfig() #Request parameters: EVENT_INVOKE
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no LastModified
                                  #Response body: EVENT_INVOKE
GetFunctionEventInvokeConfig()    #Request parameters: EVENT_INVOKE
                                  #  - only FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: EVENT_INVOKE
ListFunctionEventInvokeConfigs()  #Request parameters: EVENT_INVOKE
                                  #  - only FunctionArn -> FunctionName FUNC_ARN
                                  #Response body: FunctionEventInvokeConfigs EVENT_INVOKE_ARR
DeleteFunctionEventInvokeConfig() #Request parameters: EVENT_INVOKE
                                  #  - only FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: empty

EVENT_INVOKE                      #INVOCATION configuration: retries, and persisting INVOCATION_REQ
                                  #Only if InvocationType 'Event'
                                  #  - For InvocationType 'RequestResponse|DryRun', no such feature,
                                  #    i.e. it is the responsability of the client
EVENT_INVOKE.FunctionArn          #FUNC_ARN
EVENT_INVOKE.LastModified         #DATETIME_NUM

EVENT_INVOKE                      #Max NUM (in secs) of time to keep retrying on invocation error
 .MaximumEventAgeInSeconds        #Min: 1m, def|max: 6h
                                  #Retries uses exponential backoff from 1s to 5m
EVENT_INVOKE.MaximumRetryAttempts #NUM of retries on function error
                                  #Max: 2
                                  #The first retry is after 1m, the second after another 2m

EVENT_INVOKE.DestinationConfig    #DESTINATION. On final success|error, send INVOCATION to:
                                  #  - SNS|SQS (not FIFO)
                                  #  - another FUNCTION
                                  #  - EventBridge event bus
DESTINATION.OnSuccess|OnFailure
 .Destination                     #ARN

FUNC_VERSION.DeadLetterConfig     #SQS|SNS_ARN (not FIFO) where to send INVOCATION_REQ on final error
 .TargetArn                       #Unlike EVENT_INVOKE.DestinationConfig.OnFailure.Destination
                                  #  - FUNC_VERSION-specific
                                  #  - INVOCATION_REQ is payload, i.e. SQS|SNS can be used as EVENT_SOURCE
                                  #    to retry the event later
                                  #Only if InvocationType 'Event'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TRIGGER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRIGGER ==>                       #Other AWS resource invoking a FUNCTION

SYNC TRIGGER ==>                  #TRIGGER with InvocationType 'RequestResponse'
                                  #One of: Alexa, API Gateway, CloudFront (Lambda@Edge), Cognito, Connect,
                                  #ELB, Kinesis Data Firehose, Lex, S3 Batch, Secrets Manager

ASYNC TRIGGER ==>                 #TRIGGER with InvocationType 'Event'
                                  #One of: CloudFormation, EventBridge (CloudWatch Events), CloudWatch Logs,
                                  #CodeCommit, CodePipeline, Config, IoT [Events], SES, SNS, S3

EVENT_SOURCE                      #TRIGGER with InvocationType 'RequestResponse', that polls for batches of events
                                  #One of: MSK, self-managed Kafka, MQ, self-managed RabbitMQ, Kinesis, DynamoDB, SQS

SPECIAL TRIGGER ==>               #AWS EFS and X-Ray


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENT SOURCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateEventSourceMapping()        #Request parameters: EVENT_SOURCE
                                  #  - FunctionArn -> FunctionName FUNC_ARN
                                  #  - no UUID, LastModified, LastProcessingResult, StateTransitionReason
                                  #  - State -> Enabled BOOL
                                  #Response body: EVENT_SOURCE
UpdateEventSourceMapping()        #Request parameters: EVENT_SOURCE
                                  #  - FunctionArn -> FunctionName FUNC_ARN
                                  #  - no UUID, LastModified, LastProcessingResult, StateTransitionReason
                                  #  - no EventSourceArn, StartPosition*, Amazon|SelfManagedKafkaEventSourceConfig,
                                  #    SelfManagedEventSource, Queues, Topics
                                  #  - State -> Enabled BOOL
                                  #Response body: EVENT_SOURCE
GetEventSourceMapping()           #Request parameters: EVENT_SOURCE
                                  #  - only UUID
                                  #Response body: EVENT_SOURCE
ListEventSourceMappings()         #Request parameters: EVENT_SOURCE
                                  #  - only EventSourceArn
                                  #  - also FunctionArn -> FunctionName FUNC_ARN
                                  #Response body: EventSourceMappings EVENT_SOURCE_ARR
DeleteEventSourceMapping()        #Request parameters: EVENT_SOURCE
                                  #  - only UUID
                                  #Response body: EVENT_SOURCE

EVENT_SOURCE                      #Make a FUNCTION poll for events from an AWS resource
EVENT_SOURCE.UUID                 #'UUID'
EVENT_SOURCE.EventSourceArn       #EVENT_SOURCE_ARN
EVENT_SOURCE.FunctionArn          #FUNC_ARN
EVENT_SOURCE.LastModified         #DATETIME_NUM

EVENT_SOURCE.State                #STR among:
                                  #  - 'Creating'
                                  #  - 'Enabling|Disabling', 'Enabled|Disabled'
                                  #  - 'Updating'
                                  #  - 'Deleting'
EVENT_SOURCE.StateTransitionReason#STR. Whether current EVENT_SOURCE.State is due to user or to system
EVENT_SOURCE
 .FilterCriteria.Filters          #OBJ_ARR: Pattern 'OBJ'_JSON
EVENT_SOURCE.LastProcessingResult #STR. Result of last INVOCATION

EVENT_SOURCE.BatchSize            #Batch each NUM records from the source together, to pass to the function's payload, up to payload size limit (6MB)
                                  #Def: 100
                                  #  - exception: 10 for SQS
                                  #Max: 1e4
                                  #  - exception: 10 for SQS FIFO
EVENT_SOURCE                      #NUM (in secs). Maximum duration to gather records for each batch
 .MaximumBatchingWindowInSeconds  #Def: 0
                                  #  - exception: 500ms for MSK, self-managed Kafka, MQ
                                  #Min: 0
                                  #  - exception: 1 if EVENT_SOURCE.BatchSize >10 with SQS|Kinesis|DynamoDB
                                  #Max: 300

EVENT_SOURCE.ScalingConfig        #NUM
 .MaximumConcurrency              #Min: 2
                                  #Max: 1e4
                                  #Only with SQS
EVENT_SOURCE                      #STR_ARR, among:
 .FunctionResponseTypes           #  - 'ReportBatchItemFailures'
                                  #Only with SQS

EVENT_SOURCE.StartingPosition     #STR. Position where to start reading stream source, among:
                                  #  - 'LATEST': at most recent time
                                  #  - 'AT_TIMESTAMP' (only with Kinesis): at specific time
                                  #  - 'TRIM_HORIZON'
                                  #Only with MSK|Kinesis|DynamoDB
EVENT_SOURCE
 .StartingPositionTimestamp       #DATETIME_NUM when EVENT_SOURCE 'AT_TIMESTAMP'

EVENT_SOURCE                      #NUM (in secs). Processing window duration.
 .TumblingWindowInSeconds         #Max: 900
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE.ParallelizationFactor#NUM of batches to process concurrently.
                                  #Def: 1
                                  #Max: 10
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE                      #BOOL. If true (def: false) and function fails, split the batch in two and retry
 .BisectBatchOnFunctionError      #Only with Kinesis|DynamoDB
EVENT_SOURCE.MaximumRetryAttempts #NUM of times to try to gather records.
                                  #Def: -1, i.e. infinite
                                  #Max: 1e4
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE                      #NUM (in secs). Ignore older records.
 .MaximumRecordAgeInSeconds       #Def: -1, i.e. not used.
                                  #Max: 1 week
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE.DestinationConfig    #DESTINATION. Amazon SQS|SNS destination config
                                  #Only with Kinesis|DynamoDB

EVENT_SOURCE                      #SOURCE_ACCESS_ARR
 .SourceAccessConfigurations      #Only authorize specific source
SOURCE_ACCESS.Type                #STR among:
                                  #  (Amazon MQ)
                                  #  - 'BASIC_AUTH'
                                  #  (Self-managed RabbitMQ)
                                  #  - 'VIRTUAL_HOST'
                                  #  (Amazon MSK + self-managed Kafka)
                                  #  - 'SASL_SCRAM_512_AUTH'
                                  #  - 'CLIENT_CERTIFICATE_TLS_AUTH'
                                  #  (Self-managed Kafka)
                                  #  - 'BASIC_AUTH'
                                  #  - 'VPC_SUBNET'
                                  #  - 'VPC_SECURITY_GROUP'
                                  #  - 'SASL_SCRAM_256'
                                  #  - 'SERVER_ROOT_CA_CERTIFICATE'
SOURCE_ACCESS.URI                 #'URI'|'ARN'. Value based on SOURCE_ACCESS.Type

EVENT_SOURCE.Queues               #STR_ARR. Names of the Amazon MQ broker sources

EVENT_SOURCE.Topics               #STR_ARR. Names of Kafka topics
EVENT_SOURCE.Amazon
 ManagedKafkaEventSourceConfig    #MSK_SOURCE. Amazon MSK's source config
EVENT_SOURCE.Self
 ManagedKafkaEventSourceConfig    #SMSK_SOURCE. Self-managed Kafka source config
[S]MSK_SOURCE.ConsumerGroupId     #STR. Kafka consumer group id
EVENT_SOURCE
 .SelfManagedEventSource
 .Endpoints
 .KAFKA_BOOTSTRAP_SERVERS         #Self-managed Kafka source 'HOST:PORT'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CONCURRENCY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MAX INVOCATIONS PER FUNC_INSTANCE #Depending on InvocationType:
 ==>                              #  - 'RequestResponse|DryRun': 10 per second
                                  #  - 'Event': unlimited
                                  #But, if no FUNC_INSTANCE available, new FUNC_INSTANCEs are spawned to handle the load

CONCURRENCY ==>                   #Amount of FUNC_INSTANCEs at once

ACCOUNT_LIMIT.ConcurrentExecutions#NUM. Max concurrency for all FUNCTIONs at any given time, per REGION
                                  #Value is 1e3, but can be increased to a few 1e4 through support.
                                  #The increase rate of that value is also limited ("burst concurrency"):
                                  #  - to 500 per minute
                                  #  - but only when value is >3e3
ACCOUNT_LIMIT                     #NUM. Like ACCOUNT_LIMIT.ConcurrentExecutions, but minus
 .UnreservedConcurrentExecutions  #each FUNCTION's max(CONCURRENCY, PCONCURRENCY)
                                  #Must be at least 100

PutFunctionConcurrency()          #Request parameters: CONCURRENCY
                                  #  - also FunctionName FUNC_URL
                                  #Response body: CONCURRENCY
GetFunctionConcurrency()          #Request parameters: CONCURRENCY
                                  #  - also|only FunctionName FUNC_URL
                                  #Response body: CONCURRENCY
DeleteFunctionConcurrency()       #Request parameters: CONCURRENCY
                                  #  - also|only FunctionName FUNC_URL
                                  #Response body: empty

CONCURRENCY                       #Reserved concurrency for a given FUNCTION.
                                  #If not set:
                                  #  - max concurrency is ACCOUNT_LIMIT.UnreservedConcurrentExecutions
                                  #  - limit is shared by all FUNCTIONs
                                  #     - except ones with reserved concurrency
                                  #If set, specifically limit a single FUNCTION's concurrency
                                  #  - pros:
                                  #     - avoids other FUNCTIONs impacting that FUNCTION's concurrency
                                  #     - user-defined throttle, to avoid pricing spike
                                  #  - cons:
                                  #     - increases chance of undesired throttled
                                  #     - decreases ACCOUNT_LIMIT.UnreservedConcurrentExecutions
CONCURRENCY
 .ReservedConcurrentExecutions    #NUM of concurrent executions
FUNCTION.Concurrency
 .ReservedConcurrentExecutions    #Same

PutProvisionedConcurrencyConfig() #Request parameters: PCONCURRENCY
                                  #  - FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - only RequestedProvisionedConcurrentExecutions -> ProvisionedConcurrentExecutions NUM
                                  #Response body: PCONCURRENCY
GetProvisionedConcurrencyConfig() #Request parameters:
                                  #  - only FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: PCONCURRENCY
ListProvisioned                   #Request parameters:
 ConcurrencyConfigs()             #  - only FunctionArn -> FunctionName FUNC_ARN
                                  #Response body: ProvisionedConcurrencyConfigs PCONCURRENCY_ARR
DeleteProvisioned                 #Request parameters:
 ConcurrencyConfig()              #  - only FunctionArn -> FunctionName FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Response body: empty

PCONCURRENCY                      #Provisioned concurrency for a given FUNCTION.
                                  #Eliminates cold start for NUM FUNC_INSTANCEs by:
                                  #  - initializing runtime|function in advance
                                  #     - done 1-2m after allocating PCONCURRENCY
                                  #  - restarting it every few hours
                                  #     - instead of shutting it down after 5-7m idle
                                  #Separate|orthogonal from reserved CONCURRENCY
                                  #  - only related to keeping FUNC_INSTANCEs up for performance
                                  #  - not related to throttling
PCONCURRENCY.FunctionArn          #FUNC_ARN
PCONCURRENCY.LastModified         #'DATETIME'
PCONCURRENCY.Status               #STR indicating allocation process, among 'IN_PROGRESS', 'READY' and 'FAILED'
PCONCURRENCY.StatusReason         #STR. Set if PCONCURRENCY.Status 'Failed'

PCONCURRENCY.Available
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Requested
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Allocated
 ProvisionedConcurrentExecutions  #NUM

ENVVAR                            #Can be:
 AWS_LAMBDA_INITIALIZATION_TYPE   #  - 'provisioned-concurrency': if part of PCONCURRENCY
                                  #  - 'snap-start': if part of SNAP_START
                                  #  - 'on-demand': otherwise
                                  #Useful to run slower initialization logic (e.g. preemptive caching) only when not 'on-demand'
