
          
   LAMBDA  
          



VERSION ==>                       #2023-10-12

SUMMARY ==>                       #Functions: versions|aliases, alias routing
                                  #Main code: zip (upload|S3) or container, sign, publish
                                  #Additional code: layer, internal|external extension
                                  #Runtimes: versions|upgrades, custom, options, Node|Go|Python|Java|Ruby|DotNet, Custom|Deno
                                  #Environment: CPU, memory, envvar, /tmp, EFS, VPC, logging, insights
                                  #Invoke: instance, sync|async, dry, streaming, URL, destination
                                  #Event source: batch size|duration, filters, concurrency
                                  #Errors: timeout, retries, dead letter, tracing
                                  #Concurrency: total, reserved, provisioned


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS_DOMAIN                        #'amazonaws.com' or 'api.aws'

FORMAT ==>                        #Request: REST methods|routes, JSON
                                  #Response: JSON
                                  #Paths all start with ACTION-specific version /YYYY-MM-DD

REQ_ID                            #x-amzn-request-id [S]

PAGINATION ==>                    #Req: Marker STR, MaxItems STR (def|max: 1e4)
                                  #Res: NextMarker STR

THROTTLING ==>                    #Max 15 requests per second, except:
                                  #  - GetFunction(): 100 requests per second
                                  #  - Invoke(): no limits

Lambda_FullAccess                 #AWS managed POLICY. Grants all Lambda PACTIONs
Lambda_ReadOnlyAccess             #Same but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRICING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUMMARY ==>                       #Most of the price is proportional to:
                                  #  - total duration of INVOCATIONs, especially if INVOCATION duration >15ms
                                  #  - number of INVOCATIONs, especially if INVOCATION duration <15ms
                                  #  - MemorySize
                                  #Free: 1 INVOCATION per 3s, with 400ms INVOCATION duration, MemorySize 1GB
                                  #Provisioned CONCURRENCY:
                                  #  - cheap for FUNC_INSTANCEs run >60% of the time
                                  #  - otherwise, quite expensive
                                  #/tmp is cheap
                                  #Use ARM because cheaper

INVOCATIONS ==>                   #1$ per 5e6 INVOCATIONs
                                  #Free: first 1e6 INVOCATIONs, per month (~1 per 3s)

DURATION ==>                      #Amount of time spent running FUNCTION|extensions
                                  #  - includes initialization, INVOCATIONs and shutdown
                                  #  - does not include time frozen, i.e. between INVOCATIONs
                                  #  - each INVOCATION's duration is rounded up to 1ms
                                  #1$ per 7.5e3 seconds (~21h) with MemorySize 1GB
                                  #  - price is proportional to duration + MemorySize
                                  #Free: 4e5 seconds (~4.5 days) with MemorySize 1GB, per month
                                  #I.e. same price as INVOCATION cost if:
                                  #  - 400ms per INVOCATION, with 1GB (in free tier)
                                  #  - 15ms per INVOCATION, with 1GB (out of free tier)
                                  #25% more expensive with x86_64
                                  #High duration discount:
                                  #  - 10% cheaper over 7.5e9 seconds, with MemorySize 1GB, per month (~3000 FUNC_INSTANCEs fulltime)
                                  #  - 20% cheaper over 11.25e9 seconds, with MemorySize 1GB, per month (~7000 FUNC_INSTANCEs fulltime)

PROVISIONED CONCURRENCY ==>       #9$ per month, per provisioned CONCURRENCY, with MemorySize 1GB
                                  #Price is proportional to:
                                  #  - MemorySize
                                  #  - provisioned CONCURRENCY
                                  #  - percentage of time it was enabled
                                  #     - but not proportional to INVOCATIONs duration
                                  #Impacts INVOCATIONs duration price:
                                  #  - 40% cheaper
                                  #  - no free tier, nor high duration discount
                                  #Free: none
                                  #Provisioning the CONCURRENCY of a FUNC_INSTANCE can be less|more expensive,
                                  #depending on how much it runs (excuding free tier):
                                  #  - 100% of the time: 15% cheaper
                                  #  - 60% of the time: same price
                                  #  - 30% of the time: 40% more expensive
                                  #  - 10% of the time: 2x more expensive
                                  #  - 1% of the time: 25x more expensive
                                  #I.e. possible scenarios for a given FUNC_INSTANCE
                                  #  - high-utilization: cheaper
                                  #  - low-utilization: high fixed cost, in exchange for high latency

/TMP ==>                          #1$ per 3e7 seconds (~1 year) with EphemeralStorage.Size 1GB
                                  #I.e. when MemorySize === EphemeralStorage.Size, /tmp is 4000 times cheaper than RAM
                                  #Free: none

STREAMING DATA TRANSFER ==>       #1$/125GB. Free: 6MB

OTHER DATA TRANSFER ==>           #Same as EC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       ACCOUNT SETTINGS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /account-settings             #Req: empty
GetAccountSettings()              #Res: ACCOUNT_SETTINGS

ACCOUNT_SETTINGS                  #AWS account settings for Lambda
                                  #Not logged by CloudTrail
ACCOUNT_SETTINGS.AccountLimit     #ACCOUNT_LIMIT. Maximum limits
ACCOUNT_SETTINGS.AccountUsage     #ACCOUNT_USAGE. Current usage
ACCOUNT_USAGE.FunctionCount       #NUM. Number of FUNCTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions                   #Req: NEW_FUNC_VERSION
CreateFunction()                  #  - no RevisionId
                                  #Res: FUNC_VERSION
                                  #CLI wizard "new-function"
PUT /functions/SHORT_FUNC_ARN     #Req: NEW_FUNC_VERSION
 /configuration                   #  - no Architectures, PackageType, Tags, CodeSigningConfigArn, Publish, Code
UpdateFunctionConfiguration()     #Res: FUNC_VERSION
PUT /functions/SHORT_FUNC_ARN     #Req: NEW_FUNC_CODE
 /code                            #  - also RevisionId|Architectures: like FUNC_VERSION
UpdateFunctionCode()              #  - also Publish: like NEW_FUNC_VERSION.*
                                  #  - DryRun BOOL (def: false)
                                  #Res: FUNC_VERSION
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_VERSION
 /configuration                   #  - only FunctionName, Qualifier
GetFunctionConfiguration()        #Res: FUNC_VERSION
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_VERSION
GetFunction()                     #  - only FunctionName, Qualifier
                                  #Res: FUNCTION
GET /functions                    #Req:
ListFunctions()                   #  - FunctionVersion 'ALL': all FUNC_VERSIONs instead of only latest
                                  #  - MasterRegion STR: AWS region of FUNC_VERSION.MasterArn
                                  #Res: Functions FUNC_VERSION_ARR
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_VERSION
 /versions                        #  - only FunctionName
ListVersionsByFunction()          #Res: Versions FUNC_VERSION_ARR
DELETE /functions/SHORT_FUNC_ARN
DeleteFunction()                  #Req: FUNC_VERSION
                                  #  - only FunctionName, Qualifier
                                  #Res: empty

FUNCTION                          #AWS Lambda function
FUNCTION.Configuration            #FUNC_VERSION
FUNC_VERSION                      #FUNCTION's specific version
                                  #WAIT (GetFunction()) FunctionExists: when it exists
NEW_FUNC_VERSION                  #Like FUNC_VERSION, but when being created.
                                  #  - no FunctionArn, MasterArn, CodeSha256, Version
                                  #  - no CodeSize, LastModified, LastUpdateStatus*, State*, *.Error
                                  #  - no RuntimVersionConfig, Signing*, SnapStart.OptimizationStatus, VpcConfig.VpcId
                                  #  - Layers LAYER_VERSION_SUMMARY_ARR -> 'LAYER_VERSION_ARN'_ARR
                                  #Also some additional fields, documented here
                                 ##With Pulumi:
                                 ##  - FUNCTION|[NEW_]FUNC_VERSION are merged
                                 ##  - can use skipDestroy

FUNC_VERSION.LastModified         #'DATE'
FUNC_VERSION.Description          #STR

FUNC_VERSION.State                #STR, among:
                                  #  - 'Pending': just created, initializing VPC|EFS|...
                                  #  - 'Failed': creation failed
                                  #  - 'Active'
                                  #  - 'Inactive':
                                  #     - idle for a few weeks
                                  #     - next INVOCATION fails, but sets State to 'Pending'
                                  #WAIT (GetFunction()) FunctionActiveV2: when 'Active'
FUNC_VERSION.StateReason          #STR
FUNC_VERSION.StateReasonCode      #STR

FUNC_VERSION.LastUpdateStatus     #STR, among:
                                  #  - 'InProgress': just updated
                                  #  - 'Successful': last update succeeded
                                  #  - 'Failed': last update failed
                                  #WAIT (GetFunction()) FunctionUpdatedV2: when 'Successful'
FUNC_VERSION
 .LastUpdateStatusReason          #STR
FUNC_VERSION
 .LastUpdateStatusReasonCode      #STR

POST /tags/ARN
TagResource()
GET /tags/ARN
ListTags()
DELETE /tags/ARN                  #AWS TAGS
UntagResource()                   #RESOURCE_NAME: ARN FUNC_VERSION_ARN
FUNCTION|FUNC_VERSION.Tags        #Not logged by CloudTrail


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IDENTIFIERS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.FunctionArn          #FUNC_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION'
SHORT_FUNC_ARN                    #'[[arn:aws:lambda:REGION:]ACCOUNT_ID:function:]FUNCTION'
FUNC_VERSION.MasterArn            #Main FUNC_VERSION_ARN. Only for Lambda@Edge
FUNC_VERSION.FunctionName         #'FUNCTION'
ENVVAR AWS_LAMBDA_FUNCTION_NAME   #'FUNCTION'

REVISION_ID                       #Changes each time a specific model is updated.
                                  #Meant to pass current one to an update call so it fails if there is a concurrent update
FUNC_VERSION.RevisionId           #'REVISION_ID'
FUNC_VERSION.CodeSha256           #STR. SHA256 checksum
                                  #Can be used as a REVISION_ID

CLOUDWATCH METRICS ==>            #All have following DVARs:
                                  #  - Resource 'FUNCTION:QUALIFIER'
                                  #  - FunctionName 'FUNCTION'
                                  #  - ExecutedVersion VERSION_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION_NUM                       #NUM or '$LATEST'
QUALIFIER                         #Either:
                                  #  - 'VERSION_NUM': similar to git commit hash
                                  #  - 'ALIAS': similar to git tag
FUNC_VERSION.Version              #FUNCTION VERSION_NUM
[SHORT_]FUNC_VERSION_ARN          #'[SHORT_]FUNC_ARN[:QUALIFIER]'
                                  #"Qualified|unqualified ARN": whether QUALIFIER is used
ENVVAR AWS_LAMBDA_FUNCTION_VERSION#'NUM'

POST /functions/SHORT_FUNC_ARN    #Req: ALIAS
 /aliases                         #  - AliasArn -> FunctionName SHORT_FUNC_ARN
CreateAlias()                     #  - no RevisionId
                                  #Res: ALIAS
PUT /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases/ALIAS                   #  - AliasArn -> FunctionName SHORT_FUNC_ARN
UpdateAlias()                     #Res: ALIAS
GET /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases/ALIAS                   #  - only Name
GetAlias()                        #  - also AliasArn -> FunctionName SHORT_FUNC_ARN
                                  #Res: ALIAS
GET /functions/SHORT_FUNC_ARN     #Req: ALIAS
 /aliases                         #  - only FunctionVersion
ListAliases()                     #  - also AliasArn -> FunctionName SHORT_FUNC_ARN
                                  #Res: Aliases ALIAS_ARR:
DELETE /functions/SHORT_FUNC_ARN  #Req: ALIAS
 /aliases/ALIAS                   #  - only Name
DeleteAlias()                     #  - also AliasArn -> FunctionName SHORT_FUNC_ARN
                                  #Res: empty

ALIAS                             #'ALIAS' of a given FUNC_VERSION
                                  #Not logged by CloudTrail
ALIAS.AliasArn                    #ALIAS_ARN. 'arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION:ALIAS'
ALIAS.Name                        #'ALIAS'
ALIAS.RevisionId                  #'REVISION_ID'
ALIAS.FunctionVersion             #'FUNC_VERSION'
ALIAS.Description                 #STR

ALIAS.RoutingConfig               #Route some traffic to different FUNC_VERSIONs
 .AdditionalVersionWeights        #  - otherwise, route the rest of the traffic to current ALIAS
                                  #  - max 2 FUNC_VERSIONs
                                  #OBJ:
                                  #  - key is 'FUNC_VERSION'
                                  #  - value is NUM from 0 to 1 (percentage)
                                  #FUNC_VERSIONs must:
                                  #  - have same Role|DeadLetterConfig as ALIAS
                                  #  - be published
                                  #  - not be '$LATEST'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.PackageType          #How code is uploaded:
                                  #  - 'Zip': .zip file passed either directly or with S3 URL
                                  #  - 'Image': container image
                                  #Also called "deployment package"
FUNCTION.Code                     #FUNC_CODE. Where .zip archive or container image is located
NEW_FUNC_VERSION.Code             #NEW_FUNC_CODE
                                 ##With Pulumi:
                                 ##  - this is an ARCHIVE, and NEW_FUNC_CODE.S3* -> FUNCTION.S3*
                                 ##  - sourceCodeHash 'HASH' can be used as TRIGGER

CW.lambda.CallbackFunction       ##Like Pulumi FUNCTION|[NEW_]FUNC_VERSION except for the following.
                                 ##Code is generated from a FUNC value instead of an ARCHIVE file:
                                 ##  - RPROPS.code -> RPROPS.callback FUNC(...): same signature as in Node runtime
                                 ##     - using NR.serializeFunction()
                                 ##     - can use RPROPS.callbackFactory()->RPROPS.callback also instead
                                 ##  - generated ARCHIVE includes Node modules dependencies
                                 ##     - using NR.computeCodePathsWorker(OPTS)
                                 ##     - can pass RPROPS.codePathOptions OPTS
                                 ##  - RPROPS.handler: always '__index.handler'
                                 ##  - def RPROPS.runtime: Node 16
                                 ##  - if FUNC body contains a }VAL{ marked as secret, OUTPUTS.code is too
                                 ##Also, a default RPROPS.role is created:
                                 ##  - available at OUTPUTS.roleInstance ROLE
                                 ##  - trust policy: sts:AssumeRole for Principal.Service 'lambda.amazonaws.com'
                                 ##  - attached policies: RPROPS.policies POLICY_ARN
                                 ##     - def: AWS managed POLICYs Lambda|CloudWatch[Events]|AmazonS3FullAccess,
                                 ##       AmazonDynamoDB|AmazonSQS|AmazonKinesisFullAccess, AmazonCognitoPowerUser, AWSXrayWriteOnlyAccess
EFUNC                            ##Either:
                                 ##  - inline FUNC: will be handled by CallbackFunction, i.e. easiest
                                 ##  - CALLBACK_FUNCTION: allow passing [Callback]Function RPROPS
                                 ##  - Lambda FUNCTION: allow full customization
CW.lambda.isEventHandler(VAL)
 ->BOOL                          ##True if EFUNC
CW.lambda
 .createFunctionFromEventHandler
 ('FUNCTION', EFUNC, NCROPTS)    ##If EFUNC already FUNCTION, noop.
 ->FUNCTION                      ##Otherwise, like new CallbackFunction(...) using RPROPS.callback EFUNC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CODE ZIP            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NEW_FUNC_CODE.ZipFile             #Zip archive content, base64-encoded
                                  #Not logged to CloudTrail
                                  #In CLI: FILE, in SDK: INPUT_BLOB

NEW_FUNC_CODE.S3Bucket            #STR. S3 'BUCKET' storing the .zip code
                                  #Either:
                                  #  - no ZipFile, i.e. must specify S3 location
                                  #  - ZipFile, i.e. S3 location automatically allocated
                                  #Can use `aws cloudformation package`
NEW_FUNC_CODE.S3Key               #STR. S3 'OBJECT'
NEW_FUNC_CODE
 .S3ObjectVersion                 #STR. S3 VERSION_ID

FUNC_CODE.RepositoryType          #STR hosting the file
FUNC_CODE.Location                #S3 'URI' to .zip archive
                                  #Only valid 10 minutes

FUNC_VERSION.CodeSize             #NUM (in bytes). Size of the zip archive
ACCOUNT_LIMIT.TotalCodeSize       #NUM (in bytes). Max size of all FUNC_VERSION|LAYER_VERSIONs .zip files on S3, per REGION.
                                  #Max 75GB (flexible to a few TBs)
                                  #I.e. should cleanup FUNC_VERSION|LAYER_VERSIONs.
ACCOUNT_USAGE.TotalCodeSize       #NUM (in bytes). Current usage of ACCOUNT_LIMIT.TotalCodeSize
ACCOUNT_LIMIT.CodeSizeZipped      #NUM (in bytes). Max size when uploading a single FUNCTION|LAYER's .zip archive (without S3)
                                  #i.e. of NEW_FUNC_CODE|LAYER_VERSION_INPUT.ZipFile
                                  #Max 50MB (non-UI), 3MB (UI)
ACCOUNT_LIMIT.CodeSizeUnzipped    #NUM (in bytes). Max size when extracting a single FUNCTION|LAYER's .zip archive (with|without S3)
                                  #Max 250MB

BLUEPRINT ==>                     #Sample NEW_FUNC_CODE.ZipFile for a given Runtime.
                                  #Only available through the UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CODE IMAGE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTAINER IMAGE ==>               #Must follow OCI 1.0.0 specification
                                  #Must follow Docker image manifest v2, schema 2
                                  #Must be Linux-based
                                  #Max 10GB uncompressed
                                  #Must use the custom runtime API
                                  #Must not write on the filesystem, except for /tmp

FUNC_CODE.ResolvedImageUri        #'URI' to the container image
[NEW_]FUNC_CODE.ImageUri          #'URI' to the container image in AWS ECR

FUNC_VERSION.ImageConfigResponse  #IMAGE. Container image's configuration.
 .ImageConfig                     #Max 16KB
IMAGE.EntryPoint                  #STR_ARR. Like Docker ENTRYPOINT
IMAGE.Command                     #STR_ARR. Like Docker CMD, i.e. arguments to EntryPoint
IMAGE.WorkingDirectory            #STR. Like Docker WORKDIR
ENV ==>                           #Automatically filled by FUNC_VERSION.Environment

public.ecr.aws/lambda/            #Recommended base images
 RUNTIME[-ARCH]                   #Follow every constraint, including implementing the custom runtime API
                                  #Exposes following ENVVARs: LAMBDA_TASK_ROOT, LAMBDA_RUNTIME_DIR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LAYER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /layers                       #Req: LAYER_VERSION
ListLayers()                      #  - only CompatibleRuntime, CompatibleArchitecture
                                  #Res: Layers LAYER_ARR
                                  #  - no LatestMatchingVersion.Content

LAYER                             #Lambda layer, as output
                                  #.zip archive with files shared between multiple FUNCTIONs
                                  #E.g. libraries, custom runtime or data|config files
                                  #Mounted at /opt
                                  #  - directories|files are merged, with last LAYER having priority
                                  #Only if PackageType 'Zip'
                                  #Not logged by CloudTrail
                                  #Max 5 per FUNCTION
LAYER.LayerArn                    #'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME'
LAYER.LayerName                   #'LAYER_NAME'
LAYER.LatestMatchingVersion       #Most recent LAYER_VERSION

POST /layers/LAYER/versions       #Req: LAYER_VERSION
PublishLayerVersion()             #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - no CreatedDate, Version
                                  #Res: LAYER_VERSION
GET /layers/LAYER                 #Req: LAYER_VERSION
 /versions/VERSION_NUM            #  - LayerVersionArn -> LayerName 'LAYER_NAME'
GetLayerVersion()                 #  - only Version -> VersionNumber
                                  #Res: LAYER_VERSION
GET /layers                       #Req: LAYER_VERSION
GetLayerVersionByArn()            #  - LayerVersionArn -> Arn
                                  #  - only Version -> find
                                  #Res: LAYER_VERSION
GET /layers/LAYER/versions        #Req: LAYER_VERSION
ListLayerVersions()               #  - LayerVersionArn -> LayerName 'LAYER_NAME'
                                  #  - only CompatibleRuntimes, CompatibleArchitectures
                                  #Res: LayerVersions LAYER_VERSION_ARR
                                  #  - no Content
DELETE /layers/LAYER              #Req: LAYER_VERSION
 /versions/VERSION_NUM            #  - LayerVersionArn -> LayerName 'LAYER_NAME'
DeleteLayerVersion()              #  - only Version -> VersionNumber
                                  #Res: empty

LAYER_VERSION                     #Specific version of a LAYER
                                  #Only PublishLayerVersion() is logged by CloudTrail
                                 ##With Pulumi, can use skipDestroy
LAYER_VERSION.LayerVersionArn     #'arn:aws:lambda:REGION:ACCOUNT_ID:layer:LAYER_NAME:NUM'
LAYER_VERSION.Version             #NUM
LAYER_VERSION.CreatedDate         #'DATE'
LAYER_VERSION.Description         #STR
LAYER_VERSION.LicenseInfo         #STR. Open-source license identifier

LAYER_VERSION.Content             #In input: LAYER_CONTENT_INPUT
                                  #In output: LAYER_CONTENT_OUTPUT
LAYER_VERSION_INPUT.ZipFile|S3*   #Like NEW_FUNC_CODE.*
                                  #Can use `aws cloudformation package`
LAYER_VERSION_OUTPUT.CodeSha256|
 CodeSize|SigningJobArn|
 SigningProfileVersionArn         #Like FUNC_VERSION.*
LAYER_VERSION_OUTPUT.Location     #Like FUNC_CODE.*

FUNC_VERSION.Layers               #LAYER_VERSION_SUMMARY_ARR. Layers to associate to a FUNC_VERSION
LAYER_VERSION_SUMMARY             #Like LAYER_VERSION, but fewer fields
LAYER_VERSION_SUMMARY.Arn         #LAYER_VERSION_ARN
LAYER_VERSION_SUMMARY
 .CodeSize|SigningJobArn|
 SigningProfileVersionArn         #Like LAYER_VERSION_OUTPUT.*
COND_KEY lambda:Layer             #LAYER_VERSION_ARN_ARR. Only with CreateFunction|UpdateFunctionConfiguration()

/bin
/lib                              #Preferred location for LAYERs shared binaries|libraries


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXTENSION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


/opt/extensions/FILE              #"External extensions", i.e. executable run separately from the runner
                                  #  - different process than the FUNC_INSTANCE's
                                  #  - initialized|shutdown at the same time as the runner
                                  #Either:
                                  #  - shared as LAYER, for PackageType 'Zip'
                                  #  - added manually by Dockerfile, if PackageType 'image'
                                  #Max 10 per FUNCTION
                                  #Only partially documented

EAPI                              #http://AWS_LAMBDA_RUNTIME_API/2020-01-01/extension
POST EAPI/register                #Initializes
POST EAPI/init/error              #Initialization error
GET EAPI/event/next               #Receives next INVOCATION or Shutdown event
POST EAPI/exit/error              #Exit error

TELEMETRY API ==>                 #Allows extensions to retrieve logs, metrics and traces related to:
                                  #  - the execution environment lifecycle|logs
                                  #  - the INVOCATIONs logs
                                  #  - the extension itself logs
                                  #Done via HTTP|TCP webhooks

AWS/Lambda/
 PostRuntimeExtensionDuration     #CloudWatch METRIC with NUM of ms spent in external extension after request ended


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PUBLISH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions/SHORT_FUNC_ARN    #Req: FUNC_VERSION
 /versions                        #  - only FunctionName, RevisionId, CodeSha256, Description
PublishVersion()                  #Res: FUNC_VERSION
                                  #Publish a FUNC_VERSION
                                  #Not logged by CloudTrail

NEW_FUNC_VERSION.Publish          #BOOL (def: false)
                                  #Whether is is live
                                  #Makes it read-only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Runtime              #STR. Runtime, among:
                                  #  - 'nodejs[VERSION]' with VERSION: 14.x, 16.x, 18.x
                                  #  - 'goVERSION' with VERSION: 1.x
                                  #  - 'pythonVERSION' with VERSION: 3.7, 3.8, 3.9, 3.10, 3.11
                                  #  - 'javaVERSION' with VERSION: 8.al2, 11, 17
                                  #  - 'rubyVERSION' with VERSION: 2.7, 3.2
                                  #  - 'dotnetcoreVERSION' with VERSION: 5.0, 6
                                  #  - 'provided[VERSION]' with VERSION: .al2
                                  #OS:
                                  #  - Amazon Linux 1: go*, python3.7, provided (not provided.al2)
                                  #  - Amazon Linux 2: all others
                                  #Not if PackageType 'Image'
                                 ##With Pulumi can use CW.lambda.Runtime.NodeJS10dX|... 'nodejs10.x|...'
LAYER_VERSION.CompatibleRuntimes  #STR_ARR among same values as FUNC_VERSION.Runtime
ENVVAR AWS_EXECUTION_ENV          #'AWS_Lambda_RUNTIME'

FUNC_VERSION.Handler              #'FILE.METHOD'. Code's entry point function name
                                  #FILE does not include '.EXT'
                                  #Not if PackageType 'Image'

ENVVAR LAMBDA_RUNTIME_DIR         #Path to Runtime files, e.g. /var/runtime

ENVVAR AWS_LAMBDA_EXEC_WRAPPER    #'PATH' to an executable script.
                                  #"Wrapper script", executed instead of FUNC_VERSION.Runtime
                                  #Script arguments are same as original Runtime
                                  #  - including argv[0], i.e. runtime binary itself
                                  #Only with Runtime using Amazon Linux 2, except 'provided.al2'
INTERNAL EXTENSION ==>            #Logic that runs inside the FUNC_INSTANCE's process
                                  #Achieved by using ENVVAR AWS_LAMBDA_EXEC_WRAPPER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CUSTOM RUNTIME         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CUSTOM RUNTIME ==>                #When FUNC_VERSION.Runtime 'provided*'
                                  #FUNC_CODE|LAYER must include an executable script at '/bootstrap', which is run
                                  #Only partially documented here

ENVVAR LAMBDA_TASK_ROOT           #FUNC_CODE's 'DIR', e.g. /var/task
                                  #Used as cwd, i.e. should change cwd to it during initialization

ENVVAR _HANDLER                   #FUNC_VERSION.Handler

ENVVAR AWS_LAMBDA_RUNTIME_API     #'HOST:PORT' of custom runtime API
RAPI                              #http://AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime

POST RAPI/init/error              #Report error during initialization
GET RAPI/invocation/next          #Get next INVOCATION_REQ
                                  #Request body: empty
                                  #Res: INVOCATION_REQ.Payload
POST RAPI/invocation/REQ_ID/      #Set INVOCATION_RES
 response                         #Request body: INVOCATION_RES.ResponseBody
                                  #Res: empty
POST RAPI/invocation/REQ_ID/error #Report error during INVOCATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RUNTIME VERSION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNTIME_VERSION                   #Minor|patch version of a specific FUNC_VERSION.Runtime

PUT /functions/SHORT_FUNC_ARN     #Req: RUNTIME_MGMT
 /runtime-management-config       #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
PutRuntimeManagementConfig()      #  - RuntimeVersionArn: only if UpdateRuntimeOn 'Manual'
                                  #Res: RUNTIME_MGMT
GET /functions/SHORT_FUNC_ARN     #Req:
 /runtime-management-config       #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
GetRuntimeManagementConfig()      #Res: RUNTIME_MGMT

RUNTIME_MGMT                      #How RUNTIMEs are upgraded to new RUNTIME_VERSIONs
                                  #Not logged by CloudTrail
RUNTIME_MGMT.FunctionArn          #FUNC_VERSION_ARN
RUNTIME_MGMT.UpdateRuntimeOn      #STR. How RUNTIME upgrade happens, among:
                                  #  - 'Auto' (def):
                                  #     - in a first phase, only on newly created|updated FUNCTIONs
                                  #     - in a second phase, on all FUNCTIONs
                                  #  - 'FunctionUpdate': only on newly created|updated FUNCTIONs
                                  #  - 'Manual': pinned to RUNTIME_MGMT.RuntimeVersionArn
RUNTIME_MGMT
 .RuntimeVersionArn
FUNC_VERSION.RuntimeVersionConfig #RUNTIME_VERSION_ARN. Runtime specific version
 .RuntimeVersionArn               #'arn:aws:lambda:REGION::runtime:RUNTIME_VERSION'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     EXECUTION ENVIRONMENT     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Architectures        #STR_ARR. CPU architecture. Single item, among:
                                  #  - 'x86_64' (def)
                                  #  - 'arm64'
                                  #     - cheaper for equivalent performance
                                  #     - must:
                                  #        - use a Runtime with Amazon Linux 2
                                  #        - make sure FUNC_VERSION|LAYER_VERSION's code supports ARM
                                  #Not if PackageType 'Image'
LAYER_VERSION
 .CompatibleArchitectures         #STR_ARR among same values as FUNC_VERSION.Architectures

FUNC_VERSION.MemorySize           #NUM (in MB). Amount of memory
                                  #Min: 128, max: 10GB
                                  #Also allocates 1 vCPU for each 1769MB
                                  #aws-lambda-power-tuning is a project to guess best value
ENVVAR
 AWS_LAMBDA_FUNCTION_MEMORY_SIZE  #'NUM'

MAX PROCESSES ==>                 #1e3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ENVIRONMENT VARIABLES     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Environment          #'VAL'. Environment variable.
 .Variables.VAR                   #Not logged by CloudTrail
                                  #Max 4KB for all environment variables per FUNC_VERSION

FUNC_VERSION.KMSKeyArn            #AWS KMS key ARN. Encrypt environment variables
                                  #Also encrypts SNAP_START's snapshot, if any
                                  #Def: automatically created, named 'aws/lambda'
ENCRYPTION IN TRANSIT ==>         #Can encrypt each environment variable not only when persisted, but also its value runtime
                                  #Must be done through UI

ENVVAR AWS_REGION
ENVVAR AWS_ACCESS_KEY
ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
ENVVAR AWS_SESSION_TOKEN          #

ENVVAR LANG                       #'en_US.UTF-8'
ENVVAR TZ                         #'UTC'
ENVVAR PATH                       #'/usr/local/bin:/usr/bin/:/bin:/opt/bin'
ENVVAR LD_LIBRARY_PATH            #'/lib64:/usr/lib64:$LAMBDA_RUNTIME_DIR:$LAMBDA_RUNTIME_DIR/lib:$LAMBDA_TASK_ROOT:$LAMBDA_TASK_ROOT/lib:/opt/lib'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FILESYSTEM           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.EphemeralStorage.Size#NUM (in MB) to allocate for /tmp
                                  #Def|min: 512MB, max: 10GB
                                  #Kept for a given FUNC_INSTANCE

FUNC_VERSION.FileSystemConfigs    #FUNC_EFS_ARR. Mount an AWS EFS
                                  #Requires PACTIONs:
                                  #  - elasticfilesystem:ClientMount
                                  #  - elasticfilesystem:ClientWrite (unless readonly)
FUNC_EFS.Arn                      #EFS ACCESS_POINT_ARN
FUNC_EFS.LocalMountPath           #'/mnt/DIR'

MAX FILE DESCRIPTORS ==>          #1e3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          NETWORKING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.VpcConfig            #FUNC_VPC. VPC of a FUNCTION
                                  #By default, uses a VPC that cannot access other VPCs|resources of current account
                                  #Max 250 NETWORK_INTERFACEs
FUNC_VPC.VpcId                    #STR
FUNC_VPC.SubnetIds                #STR_ARR
FUNC_VPC.SecurityGroupIds         #STR_ARR
FUNC_VPC.Ipv6AllowedForDualStack  #BOOL (def: false)

COND_KEY lambda:VpcIds            #FUNC_VPC.VpcId. Only with CreateFunction|UpdateFunctionConfiguration()
COND_KEY lambda:SubnetIds         #FUNC_VPC.SubnetIds. Only with CreateFunction|UpdateFunctionConfiguration()
COND_KEY lambda:SecurityGroupIds  #FUNC_VPC.SecurityGroupIds. Only with CreateFunction|UpdateFunctionConfiguration()

AWSLambdaVPCAccessExecutionRole   #AWS managed POLICY allowing a FUNCTION to use ec2:*NetworkInterface|PrivateIpAddresses*
                                  #and logs:PutLogEvents|CreateLogGroup|CreateLogStream
AWSLambdaENIManagementAccess      #AWS managed POLICY allowing a FUNCTION to use ec2:*NetworkInterface*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INVOCATION_REQ.LogType            #Whether to include INVOCATION_RES.LogResult: 'None' (no, def) or 'Tail' (yes)
                                  #Only if InvocationType 'RequestResponse'
INVOCATION_RES[_END].LogResult    #FUNCTION stdout|stderr
                                  #Last 4KB only
                                  #Base64 encoded

LOGGING ==>                       #CloudWatch logs LOG_GROUP receiving all stdout|stderr
                                  #Automatically timestamped
                                  #Can take up to 10m
ENVVAR AWS_LAMBDA_LOG_GROUP_NAME
NCONTEXT.logGroupName             #'LOG_GROUP', i.e. /aws/lambda/FUNCTION
ENVVAR AWS_LAMBDA_LOG_STREAM_NAME
NCONTEXT.logStreamName            #'LOG_STREAM', i.e. YYYY/MM/DD/[VERSION_NUM]FUNC_INSTANCE_ID

console.LEVEL(...)                #Automatically prepends LEVEL

PERMISSIONS ==>                   #FUNC_VERSION.Role must be allowed PACTIONs:
                                  #  - logs:CreateLogGroup
                                  #  - logs:CreateLogStream|PutLogEvents on LOG_GROUP

RLOG                              #Each request automatically logs some information, documented here as RLOG.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INSIGHTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LAMBDA INSIGHTS ==>               #Send additional CloudWatch custom METRICs related to Memory, CPU, Network
                                  #Uses embedded METRICs (~1KB payload)
                                  #Sent to LOG_GROUP '/aws/lambda-insights'
                                  #Can take up to 20m
                                  #Has dedicated automated DASHBOARD in CloudWatch

INSIGHTS LAYER ==>                #External extension, shared as a LAYER
                                  #'arn:aws:lambda:REGION:HARDCODED_ACCOUNT_ID:layer:LambdaInsightsExtension[-Arm64]:VERSION' (see list online)
                                  #Can also be installed from the UI
                                  #See online doc on how to install on container images

CloudWatchLambdaInsights          #AWS managed POLICY to attach to FUNC_VERSION.Role
 ExecutionRolePolicy              #Allows PACTIONs:
                                  #  - logs:CreateLogGroup
                                  #  - logs:CreateLogStream|PutLogEvents on LOG_GROUP '/aws/lambda-insights'

ENVVAR LAMBDA_INSIGHTS_LOG_LEVEL  #If 'info', verbose logging for debugging

METRICS ==>                       #All namespaced with AWS/LambdaInsights
                                  #DVARs: function_name 'FUNCTION', version VERSION_NUM
ROOT                              #Embedded METRICs root (see CloudWatch metrics doc)
                                  #The following are top-level properties, i.e. available in logs, but not as METRICs
ROOT.METRIC                       #Same as METRICs above
@FIELD                            #CloudWatch Logs QUERY can use additional @FIELDs with Lambda, documented below

ROOT|RLOG.function_name           #'FUNCTION'
ROOT|RLOG.version                 #VERSION_NUM
@type
ROOT.event_type                   #STR

@requestId
ROOT|RLOG.request_id              #'REQ_ID'
@xrayTraceId
ROOT|RLOG.trace_id                #X-Ray TRACE_ID
@xraySegmentId
RLOG.segment_id                   #X-Ray SEGMENT_ID
RLOG.sampled                      #BOOL, for X-Ray

@duration
ROOT|RLOG.duration                #NUM of ms handling request (including cold start, if ROOT.cold_start true)
@billedDuration
ROOT|RLOG.billed_duration         #Same but rounded
ROOT|RLOG.cold_start              #BOOL
ROOT.timeout                      #BOOL
ROOT.shutdown_reason              #STR, among 'Failure', 'Timeout', 'Spindown'

@maxMemoryUsed
METRIC|RLOG used_memory_max       #Max memory used (in MB)
METRIC memory_utilization         #Max memory used (in % of total_memory)
@memorySize
METRIC|RLOG total_memory          #FUNC_VERSION.MemorySize (in MB)
ROOT.billed_mb_ms                 #total_memory * billed_duration

ROOT.cpu_user_time                #CPU time spent (in ms) (user)
ROOT.cpu_system_time              #CPU time spent (in ms) (system)
METRIC cpu_total_time             #cpu_user_time + cpu_system_time
METRIC init_duration              #Time spent (in ms) in cold start

ROOT.fd_use                       #NUM of file descriptors used
ROOT.fd_max                       #Max NUM of file descriptors
ROOT.tmp_used                     #NUM of bytes used in /tmp
ROOT.tmp_max                      #Max size of /tmp

ROOT.threads_max                  #Max NUM of threads

METRIC rx_bytes                   #Network bytes received
METRIC tx_bytes                   #Network bytes sent
METRIC total_network              #rx_bytes + tx_bytes

ROOT.agent_version                #'X.Y.Z.A'. CloudWatch agent version
ROOT.agent_memory_avg|max         #NUM of MB taken by CloudWatch agent in average|max


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      IDENTITY PERMISSION      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.Role                 #IAM ROLE ARN
                                  #"Execution role"
                                  #Permissions of FUNC_VERSION towards other resources
                                  #ROLE's trust policy must authorize Principal 'lambda.amazonaws.com'

AWSLambdaBasicExecutionRole       #AWS managed ROLE meant for FUNC_VERSION.Role minimum permissions
                                  #Allows logs:CreateLogGroup|CreateLogStream|PutLogEvents
AWSLambdaExecute                  #AWS managed ROLE allowing a FUNCTION to do logs:* or s3:GetObject|PutObject

COND_KEY lambda:SourceFunctionArn #FUNC_VERSION_ARN. For any PACTION, when PRINCIPAL is 'lambda.amazonaws.com'
                                  #Not available in resource-based POLICYs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      RESOURCE PERMISSION      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions/SHORT_FUNC_ARN    #Req: PERMISSION
 /policy                          #  - no Statement
AddPermission()                   #Res: PERMISSION
                                  #  - only Statement
GET /functions/SHORT_FUNC_ARN     #Req:
 /policy                          #  - FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
GetPolicy()                       #Res:
                                  #  - Policy POLICY_DOC
                                  #  - RevisionId STR: of the POLICY
DELETE /functions/SHORT_FUNC_ARN  #Req: PERMISSION
 /policy/STATEMENT_ID             #  - only FunctionName|Qualifier|RevisionId|StatementId
RemovePermission()                #Res: empty

PERMISSION                        #Resource-based single-STATEMENT POLICY for a FUNC|FUNC_VERSION|ALIAS
                                  #Permissions of other resources towards FUNC|FUNC_VERSION|ALIAS
                                  #Max POLICY_DOC size: 20KB
PERMISSION.FunctionName           #SHORT_FUNC_ARN
PERMISSION.Qualifier              #'QUALIFIER'
PERMISSION.RevisionId             #'REVISION_ID'

PERMISSION.Statement              #'STATEMENT'
                                  #Aggregation of the following fields
                                  #Automatically adds STATEMENT.Resource FUNC|FUNC_VERSION|ALIAS_ARN

PERMISSION.StatementId            #STATEMENT.Id
PERMISSION.Action                 #'lambda:SERVICE_ACTION|lambda:*|*'. STATEMENT.Action
                                  #SERVICE_ACTION can only be Invoke, *Function|Alias|FunctionConcurrency|Tag*, PublishVersion, GetPolicy
PERMISSION.Principal              #'ACCOUNT_ID|ROOT_ARN|SERVICE_DOMAIN|*'. STATEMENT.Principal.AWS|Service
PERMISSION.SourceArn              #'ARN'. STATEMENT.Condition.StringEquals.aws:SourceArn
PERMISSION.SourceAccount          #STR. STATEMENT.Condition.StringEquals.aws:SourceAccount
PERMISSION.PrincipalOrgID         #STR. STATEMENT.Condition.StringEquals.aws:PrincipalOrgId
PERMISSION.EventSourceToken       #STR. Alexa Smart Home function token

COND_KEY lambda:Principal         #PERMISSION.Principal. Only with *Permission*()

POST /layers/LAYER                #Req: LAYER_PERMISSION
 /versions/VERSION_NUM/policy     #  - no Statement
AddLayerVersionPermission()       #Res: LAYER_PERMISSION
                                  #  - only RevisionId, Statement
GET /layers/LAYER                 #Req:
 /versions/VERSION_NUM/policy     #  - LayerName 'LAYER_NAME'
GetLayerVersionPolicy()           #  - VersionNumber NUM
                                  #Res:
                                  #  - Policy POLICY_DOC
                                  #  - RevisionId STR: of the POLICY
DELETE /layers/LAYER
 /versions/VERSION_NUM            #Req: LAYER_PERMISSION
 /policy/STATEMENT_ID             #  - only LayerName|VersionNumber|RevisionId|StatementId
RemoveLayerVersionPermission()    #Res: empty

LAYER_PERMISSION                  #Authorization to run a LAYER_VERSION
LAYER_PERMISSION.LayerName        #'LAYER'
LAYER_PERMISSION.VersionNumber    #NUM
LAYER_PERMISSION.RevisionId       #'REVISION_ID'

LAYER_PERMISSION.Statement
LAYER_PERMISSION.StatementId
LAYER_PERMISSION.Action           #Like PERMISSION.*
LAYER_PERMISSION.Principal        #STR. STATEMENT.Principal. 'ACCOUNT_ID|ROOT_ARN|*'.
LAYER_PERMISSION.OrganizationId   #STR. With LAYER_PERMISSION.Principal '*', only authorize AWS accounts of that AWS organization ID.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CODE SIGNING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /functions/SHORT_FUNC_ARN
 /code-signing-config             #Req: FUNC_CODE_SIGNING
PutFunctionCodeSigningConfig()    #Res: FUNC_CODE_SIGNING
GET /functions/SHORT_FUNC_ARN     #Req: FUNC_CODE_SIGNING
 /code-signing-config             #  - no CodeSigningConfigArn
GetFunctionCodeSigningConfig()    #Res: FUNC_CODE_SIGNING
GET /code-signing-configs         #Req: FUNC_CODE_SIGNING
 /CODE_SIGNING_ARN/functions      #  - no FunctionName
ListFunctionsByCodeSigningConfig()#Res: FunctionArns FUNC_VERSION_ARN_ARR
DELETE /functions/SHORT_FUNC_ARN  #Req: FUNC_CODE_SIGNING
 /code-signing-config             #  - no CodeSigningConfigArn
DeleteFunctionCodeSigningConfig() #Res: empty

FUNC_CODE_SIGNING                 #Associate a FUNCTION with a CODE_SIGNING
                                  #Only if PackageType 'Zip'
                                  #Not logged with CloudTrail
FUNC_CODE_SIGNING
 .FunctionName                    #FUNC_VERSION_ARN
FUNC_CODE_SIGNING|NEW_FUNC_VERSION
 .CodeSigningConfigArn            #CODE_SIGNING_ARN
COND_KEY                          #FUNC_CODE_SIGNING|NEW_FUNC_VERSION.CodeSigningConfigArn
 lambda:CodeSigningConfigArn      #Only with PutFunctionCodeSigningConfig|CreateFunction()

FUNC_VERSION
 .SigningProfileVersionArn        #AWS Signer's SIGNING_PROFILE_ARN
FUNC_VERSION.SigningJobArn        #AWS Signer's SIGNING_JOB_ARN

POST /code-signing-configs        #Req: CODE_SIGNING
CreateCodeSigningConfig()         #  - no CodeSigningConfigArn|Id, LastModified
                                  #Res: CODE_SIGNING
PUT /code-signing-configs         #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - no CodeSigningConfigId, LastModified
UpdateCodeSigningConfig()         #Res: CODE_SIGNING
GET /code-signing-configs         #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - only CodeSigningConfigArn
GetCodeSigningConfig()            #Res: CODE_SIGNING
GET /code-signing-configs         #Req: empty
ListCodeSigningConfigs()          #Res: CodeSigningConfigs CODE_SIGNING_ARR
DELETE /code-signing-configs      #Req: CODE_SIGNING
 /CODE_SIGNING_ARN                #  - only CodeSigningConfigArn
DeleteCodeSigningConfig()         #Res: empty

CODE_SIGNING                      #Require signing a code package to publish it
                                  #Uses AWS Signer
CODE_SIGNING.Description          #STR
CODE_SIGNING.LastModified         #'DATE'

CODE_SIGNING                      #CODE_SIGNING_ARN
 .CodeSigningConfigArn            #'arn:aws:lambda:REGION:ACCOUNT_ID:code-signing-config:CODE_SIGNING'
CODE_SIGNING                      #'CODE_SIGNING'.
 .CodeSigningConfigId             #'csc-' followed by [:alnum:]_-.
CODE_SIGNING.AllowedPublishers
 .SigningProfileVersionArns       #SIGNING_PROFILE_ARN_ARR allowed to sign a code package
CODE_SIGNING                      #What to do when code package not properly signed. Either
 .CodeSigningPolicies             #  - 'Warn' (def): CloudWatch log (LLEVENT) + METRIC
 .UntrustedArtifactOnDeployment   #  - 'Enforce': publish fails


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LIFECYCLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INVOCATION                        #Single run of a FUNC_VERSION.
                                  #Can be done by Invoke(), FUNC_URL, or TRIGGER

FUNC_INSTANCE                     #When a FUNC_VERSION is first invoked, a FUNC_INSTANCE boots ("cold start"/"init"):
                                  #  - code is downloaded
                                  #  - runtime is initialized
                                  #     - for most runtimes, ~200-500ms
                                  #     - with PackageType 'Image', ~750-1250ms
                                  #  - function is initialized
                                  #     - e.g. top-level scope is read with Node.js
                                  #  - max 10s
                                  #After each INVOCATION:
                                  #  - the FUNC_INSTANCE stays up to be re-used by the next INVOCATION
                                  #  - the environment is frozen
                                  #  - any background process still running will resume in next INVOCATION
                                  #After each INVOCATION that crashes process or times out:
                                  #  - the runtime|function is shutdown
                                  #  - FUNC_INSTANCE stays up, but the runtime|function is re-initialized in next INVOCATION
                                  #     - but the code is not re-downloaded
                                  #After 5m-7m idle, the runtime and FUNC_INSTANCE are shutdown
                                  #  - max 2s, otherwise SIGKILL
                                  #"Proactive initialization":
                                  #  - cold start happening pre-emptively, before INVOCATION
                                  #     - similar to how PCONCURRENCY behaves
                                  #  - when:
                                  #     - a new FUNC_VERSION is created for a FUNCTION that usually has a many concurrent FUNC_INSTANCEs
                                  #        - done as many times as that usual concurrency
                                  #     - "eager assignment":
                                  #        - a FUNC_INSTANCE started but was not used because another FUNC_INSTANCE2
                                  #          became available while it was copd starting
                                  #        - FUNC_INSTANCE remains then available for other INVOCATIONs
                                  #  - not guaranteed: this happens only sometimes

AWS/Lambda/Invocations            #CloudWatch METRIC with NUM of INVOCATIONs, excluding invocation errors
AWS/Lambda/Duration               #CloudWatch METRIC with NUM of ms spent handling request


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INVOKE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions/SHORT_FUNC_ARN    #Req: INVOCATION_REQ
 /invocations                     #  - URI path: FunctionName
Invoke()                          #  - Query variable: Qualifier
                                  #  - X-Amz-* [C] header: InvocationType|ClientContext|LogType
                                  #  - Request payload: Payload
                                  #Response: INVOCATION_RES
                                  #  - status code: StatusCode
                                  #  - X-Amz-* [S] headers: ExecutedVersion|LogResult|FunctionError
                                  #  - body: ResponseBody
                                  #PACTION named 'InvokeFunction' instead
                                  #Is a CloudTrail DATA_ACTION
AWSLambdaRole                     #AWS managed POLICY to allow InvokeFunction

INVOCATION_REQ                    #Request of an INVOCATION
                                 ##With Pulumi, can use triggers as TRIGGER_OBJ
INVOCATION_REQ.FunctionName       #SHORT_FUNC_ARN
INVOCATION_REQ.Qualifier          #'QUALIFIER'

INVOCATION_REQ.InvocationType     #STR. One of:
                                  #  - 'RequestResponse' (def): sync call
                                  #  - 'Event':
                                  #     - async call
                                  #     - client's request is placed in a queue
                                  #        - empty response returned to client
                                  #     - queue sends requests to FUNCTION
                                  #        - FUNCTION's response is ignored
                                  #  - 'DryRun': only validate parameters and permissions
INVOCATION_REQ.Payload            #'JSON'. Request payload
                                  #Sometimes also called "event"
                                  #Max size depends on InvocationType:
                                  #  - RequestResponse|DryRun: 6MB
                                  #  - Event: 256KB
                                  #In CLI: FILE, in SDK: INPUT_BLOB
INVOCATION_REQ.ClientContext      #STR. Base64-encoded context 'JSON' to pass to FUNCTION

INVOCATION_RES                    #Response of an INVOCATION
                                  #In CLI: FILE
                                  #In SDK: OUTPUT_BLOB
INVOCATION_RES.StatusCode         #NUM.
                                  #On success or function error, depends on InvocationType:
                                  #  - RequestResponse: 200
                                  #  - Event: 202
                                  #  - DryRun: 204
                                  #On invocation error: 4**|5**
INVOCATION_RES.FunctionError      #'MESSAGE' on function error
INVOCATION_RES.ResponseBody       #STR, as sent by FUNCTION
                                  #Or ERROR_RES on function error
                                  #Empty if InvocationType 'Event|DryRun'
                                  #Max size: 6MB
INVOCATION_RES.ExecutedVersion    #VERSION_NUM

ERROR_RES                         #JSON response sent on function errors
ERROR_RES.errorType               #STR. ERROR.name
ERROR_RES.errorMessage            #STR. ERROR.message
ERROR_RES.stackTrace              #STR_ARR. ERROR.stack
ERROR_RES.cause                   #ERROR_RES. ERROR.cause

CLOUDTRAIL_SMETADATA
 ESMDisableReason                 #'ERROR' when could not start Invoke() due to wrong FUNCTION, REGION, authorization, etc.

TEST EVENTS ==>                   #INVOCATION_REQs saved for test purpose
                                  #Only available through the UI
                                  #Can be either:
                                  #  - private: user-specific
                                  #     - max: 10
                                  #  - shared: AWS account-specific
                                  #     - saved as SCHEMAs in an EventBridge SCHEMA_REGISTRY named 'lambda-testevent-schemas'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STREAMING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions/SHORT_FUNC_ARN    #Req: INVOCATION_REQ
 /response-streaming-invocations  #  - InvocationType cannot be 'Event'
InvokeWithResponseStream()        #Res: INVOCATION_RES
                                  #  - ResponseBody -> EventStream
                                  #  - FunctionError|LogResult -> INVOCATION_RES_END.*
                                  #No own PACTION: use 'InvokeFunction' instead

INVOCATION_RES.EventStream        #Like INVOCATION_RES.ResponseBody but streamed:
                                  #  - each payload is a INVOCATION_RES_CHUNK
                                  #  - one INVOCATION_RES_END sent at end
                                  #Uses HTTP 1.1 chunked transfer encoding
                                  #Only with Node runtime
                                  #Total max size: 20MB
                                  #Max bandwidth: 2MB/s
                                  #With JavaScript SDK, this is an ASYNC_ITERABLE of INVOCATION_RES_EVENT

INVOCATION_RES_EVENT.PayloadChunk #INVOCATION_RES_CHUNK
INVOCATION_RES_CHUNK.Payload      #'BASE64'
INVOCATION_RES
 .ResponseStreamContentType       #'MIME' of each INVOCATION_RES_CHUNK

INVOCATION_RES_EVENT
 .InvokeComplete                  #INVOCATION_RES_END
INVOCATION_RES_END.ErrorCode      #STR
INVOCATION_RES_END.ErrorDetails   #STR

FUNC_URL.InvokeMode               #Either:
                                  #  - 'BUFFERED' (def): use Invoke()
                                  #  - 'RESPONSE_STREAM': use InvokeWithResponseStream()

awslambda.streamifyResponse       #Must use this Node.js HANDLER
 (FUNC(REQ, OSTREAM, NCONTEXT)->>)#Must write STR chunks to OSTREAM, then call OSTREAM.end()
OSTREAM.setContentType('MIME')    #Sets INVOCATION_RES.ResponseStreamContentType


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              URL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /functions/SHORT_FUNC_ARN/url#Req: FUNC_URL
CreateFunctionUrlConfig()         #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no FunctionUrl, CreationTime, LastModifiedTime
                                  #Res: FUNC_URL
PUT /functions/SHORT_FUNC_ARN/url #Req: FUNC_URL
UpdateFunctionUrlConfig()         #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
                                  #  - no FunctionUrl, CreationTime, LastModifiedTime
                                  #Res: FUNC_URL
GET /functions/SHORT_FUNC_ARN/url #Req: FUNC_URL
GetFunctionUrlConfig()            #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
                                  #Res: FUNC_URL
GET /functions/SHORT_FUNC_ARN/urls#Req: FUNC_URL
ListFunctionUrlConfigs()          #  - FunctionArn -> FunctionName SHORT_FUNC_ARN
                                  #Res: FunctionUrlConfigs FUNC_URL_ARR
DELETE /functions/SHORT_FUNC_ARN  #Req: FUNC_URL
 /url                             #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
DeleteFunctionUrlConfig()         #Res: empty

FUNC_URL                          #HTTP[S] URL to invoke a FUNCTION directly
                                  #Public by default
                                  #IPv4|6
FUNC_URL.FunctionArn              #SHORT_FUNC_ARN
FUNC_URL.CreationTime             #'DATE'
FUNC_URL.LastModifiedTime         #'DATE'

FUNC_URL.FunctionUrl              #'https://URL_ID.lambda-url.REGION.on.aws'
PACTION lambda:InvokeFunctionUrl  #Allow accessing the URL

FUNC_URL.AuthType                 #Authentication to access the URL, among:
                                  #  - 'NONE' (def)
                                  #  - 'AWS_IAM': only IAM-authenticated users
COND_KEY
 lambda:FunctionUrlAuthType       #FUNC_URL.AuthType. Only with *FunctionUrl[Config]|Permissions*()

FUNC_URL.Cors                     #CORS headers
CORS.AllowOrigins                 #'URI'_ARR
CORS.AllowMethods                 #'METHOD'_ARR
CORS.AllowHeaders                 #'HEADER'_ARR
CORS.AllowCredentials             #BOOL (def: false)
CORS.MaxAge                       #NUM (in secs). Def: 5s. Max: 1 day
CORS.ExposeHeaders                #'HEADER'_ARR

AWS/Lambda/UrlRequestCount        #CloudWatch METRIC with NUM of requests through FUNC_URLs
AWS/Lambda/Url4xx|5xxError        #Same but only for requests with 4**|5** response
AWS/Lambda/UrlRequestLatency      #CloudWatch METRIC with NUM of ms FUNC_URLs spent handling requests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        URL INVOCATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_URL_REQ                      #Request made over a FUNC_URL
FUNC_URL_REQ.requestContext       #FUNC_URL_REQ_CONTEXT
FUNC_URL_REQ_CONTEXT.http         #FUNC_URL_REQ_CONTEXT_HTTP

FUNC_URL_REQ.version              #'2.0'. 'FUNC_URL_REQ's format

FUNC_URL_REQ_CONTEXT_HTTP.protocol#'HTTP/NUM'
FUNC_URL_REQ_CONTEXT_HTTP.method  #STR, e.g. 'POST'
FUNC_URL_REQ_CONTEXT.apiId        #'FUNC_URL_ID'
FUNC_URL_REQ_CONTEXT.domainPrefix #'URL_ID'
FUNC_URL_REQ_CONTEXT.domainName   #'URL_ID.lambda-url.REGION.on.aws'
FUNC_URL_REQ.rawPath
FUNC_URL_REQ_CONTEXT_HTTP.path    #'/PATH'

FUNC_URL_REQ.rawQueryString       #Query string as 'VAR=VAL&...'
FUNC_URL_REQ.queryStringParameters#Query string as OBJ, after percent-decoding
                                  #Duplicate keys have their value ,-joined
FUNC_URL_REQ.headers              #OBJ
                                  #Duplicate keys have their value ,-joined
FUNC_URL_REQ.cookies              #'VAR=VAL[;...]'_ARR
FUNC_URL_REQ.body                 #STR
                                  #If body is:
                                  #  - JSON: serialized
                                  #  - binary: base64-encoded
FUNC_URL_REQ.isBase64Encoded      #BOOL

FUNC_URL_REQ_CONTEXT.requestId    #'REQ_ID'. Request UUID
FUNC_URL_REQ_CONTEXT.time         #'DATE'
FUNC_URL_REQ_CONTEXT.timeEpoch    #DATE_NUM
FUNC_URL_REQ_CONTEXT_HTTP.sourceIp#'IPv4|v6'
FUNC_URL_REQ_CONTEXT_HTTP
 .userAgent                       #STR

FUNC_URL_REQ_CONTEXT.accountId    #ACCOUNT_ID of FUNCTION
FUNC_URL_REQ_CONTEXT              #FUNC_URL_REQ_IAM. Caller's IAM identity
 .authorizer.iam                  #null if none
FUNC_URL_REQ_IAM.principalOrgId   #STR|null
FUNC_URL_REQ_IAM.accountId        #ACCOUNT_ID of caller
FUNC_URL_REQ_IAM.userArn          #USER_ARN
FUNC_URL_REQ_IAM.userId           #'USER'
FUNC_URL_REQ_IAM.cognitoIdentity  #STR|null
FUNC_URL_REQ_IAM.callerId         #STR
FUNC_URL_REQ_IAM.accessKey        #STR

FUNC_URL_RES                      #Response made over a FUNC_URL
FUNC_URL_RES.statusCode           #NUM
                                  #Def: 200
FUNC_URL_RES.headers              #OBJ
                                  #Def Content-Type: 'application/json' [S]
FUNC_URL_RES.cookies              #'VAR=VAL[;...]'_ARR
                                  #Def: []
                                  #Prefer using it instead of setting Cookies [S] with FUNC_URL_RES.headers
FUNC_URL_RES.body                 #STR
FUNC_URL_RES.isBase64Encoded      #BOOL
                                  #Def: false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TRIGGER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRIGGER ==>                       #Other AWS resource invoking a FUNCTION

SYNC TRIGGER ==>                  #TRIGGER with InvocationType 'RequestResponse'
                                  #One of: Alexa, API Gateway, CloudFront (Lambda@Edge), Cognito, Connect,
                                  #ELB, Kinesis Data Firehose, Lex, S3 Batch, Secrets Manager

ASYNC TRIGGER ==>                 #TRIGGER with InvocationType 'Event'
                                  #One of: CloudFormation, EventBridge (CloudWatch Events), CloudWatch Logs,
                                  #CodeCommit, CodePipeline, Config, IoT [Events], SES, SNS, S3

EVENT_SOURCE                      #TRIGGER with InvocationType 'RequestResponse', that polls for batches of events
                                  #One of: MSK, self-managed Kafka, MQ, self-managed RabbitMQ, Kinesis, DynamoDB, DocumentDB, SQS

SPECIAL TRIGGER ==>               #AWS EFS and X-Ray

CW.lambda.EventSubscription      ##Pulumi KREZ representing a TRIGGER FUNCTION
                                 ##  - can be an EFUNC
                                 ##  - automatically setup, including PERMISSION
                                 ##Base class inherited by specific SERVICEs, either:
                                 ##  - PARENT_REZ.onEVENT|onEvent('FUNCTION', EFUNC, SUBSCRIPTION_REZ_RPROPS, KROPTS)->SUBSCRIPTION
                                 ##  - new PARENT_REZEventSubscription('FUNCTION', PARENT_REZ, EFUNC, SUBSCRIPTION_REZ_RPROPS, KROPTS)
NEVENT_SUBSCRIPTION.func         ##FUNCTION
NEVENT_SUBSCRIPTION.permission   ##PERMISSION. Usually:
                                 ##  - allow lambda:invokeFunction
                                 ##  - on FUNCTION
                                 ##  - from Principal.Service 'SERVICE_DOMAIN'
                                 ##  - with COND_KEY aws:sourceArn PARENT_REZ_ARN
NEVENT_SUBSCRIPTION.PARENT_CLASS ##PARENT_REZ. REZ making the request, e.g. SNS TOPIC.
                                 ##Also passed to ROPTS.parent
NEVENT_SUBSCRIPTION.subscription ##SUBSCRIPTION_REZ. REZ registering the subscription, e.g. SNS TOPIC_SUBSCRIPTION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENT SOURCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /event-source-mappings       #Req: EVENT_SOURCE
CreateEventSourceMapping()        #  - FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
                                  #  - no UUID, LastModified, LastProcessingResult, StateTransitionReason
                                  #  - State -> Enabled BOOL
                                  #Res: EVENT_SOURCE
PUT /event-source-mappings        #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
UpdateEventSourceMapping()        #  - no UUID, LastModified, LastProcessingResult, StateTransitionReason
                                  #  - no EventSourceArn, StartPosition*, Amazon|SelfManagedKafkaEventSourceConfig,
                                  #    SelfManagedEventSource, Queues, Topics
                                  #  - State -> Enabled BOOL
                                  #Res: EVENT_SOURCE
GET /event-source-mappings        #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - only UUID
GetEventSourceMapping()           #Res: EVENT_SOURCE
GET /event-source-mappings        #Req: EVENT_SOURCE
ListEventSourceMappings()         #  - only EventSourceArn
                                  #  - also FunctionArn -> FunctionName SHORT_FUNC_VERSION_ARN
                                  #Res: EventSourceMappings EVENT_SOURCE_ARR
DELETE /event-source-mappings     #Req: EVENT_SOURCE
 /EVENT_SOURCE_MID                #  - only UUID
DeleteEventSourceMapping()        #Res: EVENT_SOURCE

EVENT_SOURCE                      #Make a FUNCTION poll for events from an AWS resource
EVENT_SOURCE.UUID                 #EVENT_SOURCE_MID
EVENT_SOURCE.EventSourceArn       #EVENT_SOURCE_ARN
EVENT_SOURCE.FunctionArn          #FUNC_VERSION_ARN
EVENT_SOURCE.LastModified         #DATE_NUM

EVENT_SOURCE.State                #STR among:
                                  #  - 'Creating'
                                  #  - 'Enabling|Disabling', 'Enabled|Disabled'
                                  #  - 'Updating'
                                  #  - 'Deleting'
EVENT_SOURCE.StateTransitionReason#STR. Whether current EVENT_SOURCE.State is due to user or to system
EVENT_SOURCE.LastProcessingResult #STR. Result of last INVOCATION

EVENT_SOURCE.BatchSize            #Batch each NUM records from the source together, to pass to the function's payload,
                                  #up to payload size limit (6MB)
                                  #Def: 100
                                  #  - exception: 10 for SQS
                                  #Max: 1e4
                                  #  - exception: 10 for SQS FIFO
EVENT_SOURCE                      #NUM (in secs). Maximum duration to gather records for each batch
 .MaximumBatchingWindowInSeconds  #Def:
                                  #  - 0 with SQS|Kinesis|DynamoDB: as soon as possible
                                  #  - 500ms with MSK|Kafka|MQ|DocumentDB
                                  #Min: 0
                                  #  - exception: 1 with SQS|Kinesis|DynamoDB, unless EVENT_SOURCE.BatchSize <=10
                                  #Max: 300

EVENT_SOURCE                      #OBJ_ARR: Pattern 'PATTERN_JSON'
 .FilterCriteria.Filters          #Ignores events that do not match one of the patterns
                                  #OBJ_ARR are or'd, and PATTERN fields are and'd
                                  #PATTERN is OBJ:
                                  #  - VARR key replicates event's structure
                                  #  - value is matching operator, among:
                                  #     - VAL_ARR: includes()
                                  #     - { anything-but: VAR_ARR }: !includes()
                                  #     - { equals-ignore-case: STR }
                                  #     - { numeric: ['=|>|>=|<|<=', NUM, ...] }
                                  #     - { exists: BOOL }: !== undefined
                                  #     - { prefix|suffix: STR }: startsWith|endsWith()
                                  #     - { $or: ARR }: ||
                                  #Max OBJ_ARR length: 5

EVENT_SOURCE.ScalingConfig        #NUM. Max CONCURRENCY
 .MaximumConcurrency              #Min: 2
                                  #Max: 1e4
                                  #Only with SQS

EVENT_SOURCE.StartingPosition     #STR. Position where to start reading stream source, among:
                                  #  - 'LATEST': at most recent time
                                  #  - 'AT_TIMESTAMP': at specific time
                                  #     - not with DynamoDB
                                  #  - 'TRIM_HORIZON'
                                  #Only with MSK|Kinesis|DynamoDB|DocumentDB
EVENT_SOURCE
 .StartingPositionTimestamp       #DATE_NUM when EVENT_SOURCE 'AT_TIMESTAMP'
AWS/Lambda/IteratorAge            #CloudWatch METRIC with NUM of ms for stream records to be read.
                                  #I.e. average age of starting position record

EVENT_SOURCE                      #NUM (in secs). Processing window duration.
 .TumblingWindowInSeconds         #Max: 900
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE.ParallelizationFactor#NUM of batches to process concurrently.
                                  #Def: 1
                                  #Max: 10
                                  #Only with Kinesis|DynamoDB

EVENT_SOURCE                      #SOURCE_ACCESS_ARR
 .SourceAccessConfigurations      #Only authorize specific source
SOURCE_ACCESS.Type                #STR among:
                                  #  (DocumentDB)
                                  #  - 'BASIC_AUTH'
                                  #  (Amazon MQ)
                                  #  - 'BASIC_AUTH'
                                  #  (Self-managed RabbitMQ)
                                  #  - 'VIRTUAL_HOST'
                                  #  (Amazon MSK + self-managed Kafka)
                                  #  - 'SASL_SCRAM_512_AUTH'
                                  #  - 'CLIENT_CERTIFICATE_TLS_AUTH'
                                  #  (Self-managed Kafka)
                                  #  - 'BASIC_AUTH'
                                  #  - 'VPC_SUBNET'
                                  #  - 'VPC_SECURITY_GROUP'
                                  #  - 'SASL_SCRAM_256'
                                  #  - 'SERVER_ROOT_CA_CERTIFICATE'
SOURCE_ACCESS.URI                 #'URI'|'ARN'. Value based on SOURCE_ACCESS.Type

EVENT_SOURCE.Queues               #STR_ARR. Names of the Amazon MQ broker sources

EVENT_SOURCE
 .DocumentDBEventSourceConfig     #DOCUMENTDB_SOURCE. DocumentDB's source config
DOCUMENTDB_SOURCE.DatabaseName    #DocumentDB 'DATABASE' (def: all)
DOCUMENTDB_SOURCE.CollectionName  #DocumentDB 'COLLECTION' (def: all)
DOCUMENTDB_SOURCE.FullDocument    #Whether to send changes as:
                                  #  - 'Default': partial DOCUMENT
                                  #  - 'UpdateLookup': full DOCUMENT + delta

EVENT_SOURCE.Topics               #STR_ARR. Names of Kafka topics
EVENT_SOURCE.Amazon
 ManagedKafkaEventSourceConfig    #MSK_SOURCE. Amazon MSK's source config
EVENT_SOURCE.Self
 ManagedKafkaEventSourceConfig    #SMSK_SOURCE. Self-managed Kafka source config
[S]MSK_SOURCE.ConsumerGroupId     #STR. Kafka consumer group id
EVENT_SOURCE
 .SelfManagedEventSource
 .Endpoints
 .KAFKA_BOOTSTRAP_SERVERS         #Self-managed Kafka source 'HOST:PORT'_ARR
AWS/Lambda/OffsetLag              #CloudWatch METRIC with NUM of ms for Kafka records to be picked up
                                  #I.e. duration between last record write to a topic, and last record read

AWSLambdaMSKExecutionRole
AWSLambdaKinesisExecutionRole
AWSLambdaDynamoDBExecutionRole
AWSLambdaSQSQueueExecutionRole    #AWS managed POLICYs for FUNC_VERSION.Role when using specific types of EVENT_SOURCE
AWSLambdaInvocation-DynamoDB      #Similar to AWSLambdaDynamoDBExecutionRole, but allow lambda:InvokeFunction, and do not allow logs:*

COND_KEY lambda:FunctionArn       #FUNC_VERSION_ARN. Only with *EventSourceMapping|FunctionUrl[Config]()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ERROR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INVOCATION ERROR ==>              #Error unrelated to the FUNCTION's code:
                                  #  - permissions
                                  #  - quotas, throttling, concurrency
                                  #  - max EVENT_INVOKE retries
FUNCTION ERROR ==>                #Error related to the FUNCTION's code:
                                  #  - Runtime: process exit, timeout, invalid payload
                                  #  - Function: error response, exception
FINAL SUCCESS|ERROR ==>           #State after all retries, for both invocation|function error

FUNC_VERSION.Timeout              #NUM (in secs). Times out for each INVOCATION
                                  #Excludes initialization, but includes extensions
                                  #Def: 3s, max: 15m

FUNC_VERSION.Environment|
 ImageConfigResponse|
 RuntimeVersionConfig.Error       #FUNC_VERSION_ERROR. Error when Environment|ImageConfig|Runtime cannot be applied
FUNC_VERSION_ERROR.Message        #STR
FUNC_VERSION_ERROR.ErrorCode      #STR

FUNC_VERSION.TracingConfig        #TRACING. AWS X-Ray configuration.
                                  #Requires FUNC_VERSION.Role to have xray:* permissions
                                  #  - e.g. using AWSXRayDaemonWriteAccess AWS managed POLICY
TRACING.Mode                      #'Disabled' (def), 'Active' or 'PassThrough'

AWS/Lambda/Errors                 #CloudWatch METRIC with NUM of INVOCATIONs with a FUNCTION error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENT INVOKE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /functions/SHORT_FUNC_ARN     #Req: EVENT_INVOKE
 /event-invoke-config             #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
PutFunctionEventInvokeConfig()    #  - no LastModified
                                  #Res: EVENT_INVOKE
POST /functions/SHORT_FUNC_ARN    #Req: EVENT_INVOKE
 /event-invoke-config             #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
UpdateFunctionEventInvokeConfig() #  - no LastModified
                                  #Res: EVENT_INVOKE
GET /functions/SHORT_FUNC_ARN     #Req: EVENT_INVOKE
 /event-invoke-config             #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
GetFunctionEventInvokeConfig()    #Res: EVENT_INVOKE
GET /functions/SHORT_FUNC_ARN     #Req: EVENT_INVOKE
 /event-invoke-config/list        #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN
ListFunctionEventInvokeConfigs()  #Res: FunctionEventInvokeConfigs EVENT_INVOKE_ARR
DELETE /functions/SHORT_FUNC_ARN  #Req: EVENT_INVOKE
 /event-invoke-config             #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
DeleteFunctionEventInvokeConfig() #Res: empty

EVENT_INVOKE                      #INVOCATION configuration: retries, and persisting INVOCATION_REQ
                                  #Only if InvocationType 'Event'
                                  #  - For InvocationType 'RequestResponse|DryRun':
                                  #    no such feature, i.e. it is the responsability of the client
                                  #  - For EVENT_SOURCE: it depends on the source type
                                  #Not logged by CloudTrail
EVENT_INVOKE.FunctionArn          #FUNC_VERSION_ARN
EVENT_INVOKE.LastModified         #DATE_NUM

EVENT_INVOKE                      #Max NUM (in secs) of time to keep retrying on invocation error
 .MaximumEventAgeInSeconds        #Min: 1m, def|max: 6h
                                  #Retries uses exponential backoff from 1s to 5m
EVENT_INVOKE.MaximumRetryAttempts #NUM of retries on function error
                                  #Max: 2
                                  #The first retry is after 1m, the second after another 2m

EVENT_INVOKE.DestinationConfig    #DESTINATION. On final success|error, send INVOCATION to:
                                  #  - SNS|SQS (not FIFO)
                                  #  - another FUNCTION
                                  #  - EventBridge event bus
DESTINATION.OnSuccess|OnFailure
 .Destination                     #ARN
AWS/Lambda/
 DestinationDeliveryErrors        #CloudWatch METRIC with NUM of DestinationConfig that failed to send

FUNC_VERSION.DeadLetterConfig     #SQS|SNS_ARN (not FIFO) where to send INVOCATION_REQ on final error
 .TargetArn                       #Unlike EVENT_INVOKE.DestinationConfig.OnFailure.Destination
                                  #  - FUNC_VERSION-specific
                                  #  - INVOCATION_REQ is payload, i.e. SQS|SNS can be used as EVENT_SOURCE
                                  #    to retry the event later
                                  #Only if InvocationType 'Event'
AWS/Lambda/DeadLetterErrors       #CloudWatch METRIC with NUM of DeadLetterConfig that failed to send

AWS/Lambda/AsyncEventsReceived    #CloudWatch METRIC with NUM of started INVOCATIONs that are async,
                                  #i.e. either InvocationType 'Event', or EVENT_SOURCE
AWS/Lambda/AsyncEventsDropped     #CloudWatch METRIC with NUM of async INVOCATIONs that failed due to final error
AWS/Lambda/AsyncEventAge          #CloudWatch METRIC with NUM of secs to process async INVOCATIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EVENT SOURCE RETRY       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_SOURCE                      #STR_ARR, among:
 .FunctionResponseTypes           #  - 'ReportBatchItemFailures'
                                  #Only with SQS

EVENT_SOURCE                      #BOOL. If true (def: false) and function fails, split the batch in two and retry
 .BisectBatchOnFunctionError      #Only with Kinesis|DynamoDB
EVENT_SOURCE.MaximumRetryAttempts #Like EVENT_INVOKE.* but for receiving the batch
                                  #Def: -1, i.e. infinite
                                  #Max: 1e4
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE                      #Like EVENT_INVOKE.* but for receiving the batch
 .MaximumRecordAgeInSeconds       #Def: -1, i.e. not used.
                                  #Max: 1 week
                                  #Only with Kinesis|DynamoDB
EVENT_SOURCE.DestinationConfig    #Like EVENT_INVOKE.* but for receiving the batch
                                  #Can only send to SQS|SNS
                                  #Only with Kinesis|DynamoDB

MQ|KAFKA RETRIES ==>              #Infinite retries


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CONCURRENCY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MAX INVOCATIONS PER FUNC_INSTANCE #Depending on InvocationType:
 ==>                              #  - 'RequestResponse|DryRun': 10 per second
                                  #  - 'Event': unlimited
                                  #But, if no FUNC_INSTANCE available, new FUNC_INSTANCEs are spawned to handle the load

CONCURRENCY ==>                   #Amount of FUNC_INSTANCEs at once

ACCOUNT_LIMIT.ConcurrentExecutions#NUM. Max concurrency for all FUNCTIONs at any given time, per REGION
                                  #Value is 1e3 (flexible to a few 1e4)
                                  #The increase rate of that value is also limited ("burst concurrency"):
                                  #  - to 500 per minute
                                  #  - but not when value is:
                                  #     - <3e3 (us-east-1, us-west-2, eu-west-1)
                                  #     - <1e3 (us-east-2, eu-central-1, ap-northeast-1)
                                  #     - <500 (otherwise)
ACCOUNT_LIMIT                     #NUM. Like ACCOUNT_LIMIT.ConcurrentExecutions, but minus
 .UnreservedConcurrentExecutions  #each FUNCTION's max(CONCURRENCY, PCONCURRENCY)
                                  #Must be at least 100

AWS/Lambda/ConcurrentExecutions   #CloudWatch METRIC with NUM of ongoing FUNC_INSTANCEs
AWS/Lambda/
 UnreservedConcurrentExecutions   #CloudWatch METRIC with NUM of ongoing FUNC_INSTANCEs using neither reserved CONCURRENCY nor PCONCURRENCY
AWS/Lambda/Throttles              #CloudWatch METRIC with NUM of failed INVOCATIONs due to concurrency

PUT /functions/SHORT_FUNC_ARN     #Req: CONCURRENCY
 /concurrency                     #  - also FunctionName FUNC_URL
PutFunctionConcurrency()          #Res: CONCURRENCY
GET /functions/SHORT_FUNC_ARN     #Req: CONCURRENCY
 /concurrency                     #  - also|only FunctionName FUNC_URL
GetFunctionConcurrency()          #Res: CONCURRENCY
DELETE /functions/SHORT_FUNC_ARN  #Req: CONCURRENCY
 /concurrency                     #  - also|only FunctionName FUNC_URL
DeleteFunctionConcurrency()       #Res: empty

CONCURRENCY                       #Reserved concurrency for a given FUNCTION.
                                  #If not set:
                                  #  - max concurrency is ACCOUNT_LIMIT.UnreservedConcurrentExecutions
                                  #  - limit is shared by all FUNCTIONs
                                  #     - except ones with reserved concurrency
                                  #If set, specifically limit a single FUNCTION's concurrency
                                  #  - pros:
                                  #     - avoids other FUNCTIONs impacting that FUNCTION's concurrency
                                  #     - user-defined throttle, to avoid pricing spike
                                  #     - can use 0 to turn off FUNCTION
                                  #  - cons:
                                  #     - increases chance of undesired throttled
                                  #     - decreases ACCOUNT_LIMIT.UnreservedConcurrentExecutions
                                  #Not logged by CloudTrail
CONCURRENCY
 .ReservedConcurrentExecutions    #NUM of concurrent executions
FUNCTION.Concurrency
 .ReservedConcurrentExecutions    #Same

PUT /functions/SHORT_FUNC_ARN     #Req: PCONCURRENCY
 /provisioned-concurrency         #  - FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
PutProvisionedConcurrencyConfig() #  - only RequestedProvisionedConcurrentExecutions -> ProvisionedConcurrentExecutions NUM
                                  #Res: PCONCURRENCY
GET /functions/SHORT_FUNC_ARN     #Req:
 /provisioned-concurrency         #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
GetProvisionedConcurrencyConfig() #Res: PCONCURRENCY
GET /functions/SHORT_FUNC_ARN
 /provisioned-concurrency?List=ALL#Req:
ListProvisioned                   #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN
 ConcurrencyConfigs()             #Res: ProvisionedConcurrencyConfigs PCONCURRENCY_ARR
DELETE /functions/SHORT_FUNC_ARN
 /provisioned-concurrency         #Req:
DeleteProvisioned                 #  - only FunctionArn -> FunctionName SHORT_FUNC_ARN + Qualifier 'QUALIFIER'
 ConcurrencyConfig()              #Res: empty

PCONCURRENCY                      #Provisioned concurrency for a given FUNCTION.
                                  #Eliminates cold start for NUM FUNC_INSTANCEs by:
                                  #  - initializing runtime|function in advance
                                  #     - done 1-2m after allocating PCONCURRENCY
                                  #  - restarting it every few hours
                                  #     - instead of shutting it down after 5-7m idle
                                  #Separate|orthogonal from reserved CONCURRENCY
                                  #  - only related to keeping FUNC_INSTANCEs up for performance
                                  #  - not related to throttling
                                  #Not logged by CloudTrail
PCONCURRENCY.FunctionArn          #FUNC_VERSION_ARN
PCONCURRENCY.LastModified         #'DATE'
PCONCURRENCY.Status               #STR indicating allocation process, among 'IN_PROGRESS', 'READY' and 'FAILED'
PCONCURRENCY.StatusReason         #STR. Set if PCONCURRENCY.Status 'Failed'

PCONCURRENCY.Available
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Requested
 ProvisionedConcurrentExecutions  #NUM
PCONCURRENCY.Allocated
 ProvisionedConcurrentExecutions  #NUM

ENVVAR                            #Can be:
 AWS_LAMBDA_INITIALIZATION_TYPE   #  - 'provisioned-concurrency': if using PCONCURRENCY
                                  #  - 'snap-start': if using SNAP_START
                                  #  - 'on-demand': otherwise
                                  #Useful to run slower initialization logic (e.g. preemptive caching) only when not 'on-demand'
AWS/Lambda/ProvisionedConcurrency
 Invocations                      #CloudWatch METRIC with NUM of INVOCATIONs using PCONCURRENCY
AWS/Lambda/ProvisionedConcurrency
 SpilloverInvocations             #CloudWatch METRIC with NUM of INVOCATIONs using normal concurrency because PCONCURRENCY is full
AWS/Lambda/
 ProvisionedConcurrentExecutions  #CloudWatch METRIC with NUM of ongoing FUNC_INSTANCEs using PCONCURRENCY
AWS/Lambda/
 ProvisionedConcurrentUtilization #Like AWS/Lambda/ProvisionedConcurrentExecutions, but divided by allocated PCONCURRENCY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SNAP_START           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC_VERSION.SnapStart            #SNAP_START. Initializes the FUNC_INSTANCE at publish-time instead of during first INVOCATION
                                  #Max initialization time is min(FUNC_VERSION.Timeout, 2m)
                                  #Cannot be used together with:
                                  #  - other Runtime than 'java11' (and later)
                                  #  - PCONCURRENCY
                                  #  - ARM
                                  #  - FUNC_VERSION.FileSystemConfigs
                                  #  - FUNC_VERSION.EphemeralStorage.Size, except with default value
                                  #  - AWS X-Ray
                                  #Can register in FUNCTION code some event handlers:
                                  #  - beforeCheckpoint(): end of initialization
                                  #  - afterRestore(): before first INVOCATION
                                  #     - max 2s
SNAP_START.ApplyOn                #Whether to apply: 'None' (def, i.e. no) or 'PublishedVersions' (yes)
SNAP_START.OptimizationStatus     #Whether to apply on each separate FUNC_VERSION|ALIAS: 'On' or 'Off' (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR NODE_PATH                  #'/opt/nodejs/nodeVERSION/node_modules/:
                                  # /opt/nodejs/node_modules:
                                  # $LAMBDA_RUNTIME_DIR/node_modules'
LAMBDA_RUNTIME_DIR/node_modules   #Preferred location for node modules of FUNCTIONs
                                  #I.e. .zip archives can have a top-level node_modules DIR
/opt/nodejs[/nodeVERSION]
 /node_modules                    #Preferred location for node modules of LAYERs

ENVVAR NODE_OPTIONS               #Can be used

NATIVE MODULES ==>                #Must be pre-built with Amazon Linux as target

ES MODULES ==>                    #Normal Node.js behavior, i.e. can use *.mjs|cjs or PACKAGE.type 'module|script'
                                  #Allows top-level await

AUTOMATICALLY INCLUDED ==>        #  - npm (from Node.js version)
                                  #  - aws-sdk
                                  #  - @types/aws-lambda: Handler, Context, REQ|RES for different TRIGGERs

index.[m]js                       #Default main FILE

HANDLER(REQ, NCONTEXT)->[>]RES    #Main FUNC.
                                  #Default name: 'handler'
                                  #Can also use a FUNC(ERROR, RES) callback instead of PROMISE

REQ                               #Same as:
                                  #  - Invoke(): INVOCATION_REQ.Payload
                                  #  - FUNC_URL: FUNC_URL_REQ
                                  #  - TRIGGER: AWS SERVICE-specific
RES                               #Same as:
                                  #  - Invoke(): INVOCATION_RES.ResponseBody
                                  #  - FUNC_URL: FUNC_URL_RES
                                  #  - TRIGGER: AWS SERVICE-specific

ERROR ==>                         #When throwing ERROR, converted to ERROR_RES
                                  #If not JSON-serializable, ERROR_RES shows serialization error instead

NCONTEXT                          #Information from INVOCATION_REQ.*

NCONTEXT.invokedFunctionArn       #'FUNC_VERSION_ARN'
NCONTEXT.functionName             #'FUNCTION'
NCONTEXT.functionVersion          #NUM
NCONTEXT.awsRequestId             #'REQ_ID'

NCONTEXT
 .getRemainingTimeInMillis()->NUM #NUM of ms before timeout
NCONTEXT.memoryLimitInMB          #NUM (in MB). FUNC_VERSION.MemorySize

NCONTEXT                          #BOOL
 .callbackWaitsForEmptyEventLoop  #If true (def) and HANDLER is sync (no PROMISE|callback),
                                  #completion waits for event loop to be empty.

NCONTEXT.identity                 #CONTEXT_IDENTITY. Information about AWS Cognity
CONTEXT_IDENTITY.cognitoIdentityId#STR. User ID
CONTEXT_IDENTITY
 .cognitoIdentityPoolId           #STR. Identity pool ID

NCONTEXT.clientContext            #CLIENT_CONTEXT. Mobile app information.
CLIENT_CONTEXT.client             #CLIENT
CLIENT.installation_id            #
CLIENT.app_title                  #
CLIENT.app_version_name           #
CLIENT.app_version_code           #
CLIENT.app_package_name           #
CLIENT_CONTEXT.env                #CLIENT_ENV
CLIENT_ENV.platform_version       #
CLIENT_ENV.platform               #
CLIENT_ENV.make                   #
CLIENT_ENV.model                  #
CLIENT_ENV.locale                 #
CLIENT_CONTEXT.*                  #Custom values


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DENO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno-lambda                       #Custom RUNTIME distributed either as:
                                  #  - a LAYER: arn:aws:serverlessrepo:us-east-1:390065572566:applications/den
                                  #  - a Docker image: hayd/deno-lambda
                                  #Version 1.32.5 (matching Deno version)

HANDLER(...)                      #Like Node

CLI FLAGS ==>                     #Only --no-check
                                  #Cannot be changed, except the following ones
ENVVAR DENO_PERMISSIONS           #Def: -A
                                  #Must have at least --allow-env|net
ENVVAR DENO_UNSTABLE              #If set, use --unstable
ENVVAR DENO_CONFIG                #'PATH' to pass to --config
ENVVAR DENO_LOCK                  #'PATH' to pass to --lock
ENVVAR DENO_IMPORTMAP             #'PATH' to pass to --importmap
ENVVAR DENO_LOCATION              #'PATH' to pass to --location

ENVVAR NO_COLOR                   #Def: true
ENVVAR DENO_NO_UPDATE_CHECK       #Def: true

ENVVAR HANDLER_EXT                #Def: 'ts'
ENVVAR DENO_DIR                   #Def: ./.deno_dir
ENVVAR DENO_PREFIX                #STR prepended to logs. Def: 'LEVEL\tRequestId: REQ_ID'

x/lambda/mod.ts                   #Same as @types/aws-lambda, but for Deno


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PYTHON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR PYTHON_PATH                #LAMBDA_RUNTIME_DIR

/opt/python                       #
/opt/python/lib/pythonVERSION
 /site-packages                   #Preferred location for LAYERs packages


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              LSH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


lsh                              ##CLI to run shell commands in temporary Lambda FUNC, for debugging purpose
                                 ##Version 0.2.2 (2022-10-23)

~/.lsh                           ##CONF, as JSON file
lsh config                       ##Prints CONF (only some of the properties)
lsh reset                        ##Re-initialize CONF

lsh install                      ##Upsert a CloudFormation STACK with a Lambda FUNC
                                 ##Uses Node 16, CONCURRENCY 1
                                 ##Lambda FUNC:
                                 ##  - executes REQ.command 'SHELL_COMMAND' as is
                                 ##  - returns stdout|stderr|ERROR as is
                                 ##  - /tmp: both initial cwd, ENVVAR HOME, and part of ENVVAR PATH
                                 ##Also creates a CloudWatch LOG_GROUP '/aws/lambda/lsh' with retentionInDays 1
CONF.region                      ##'REGION'
--region|-r                      ##Def: 'us-east-1'
CONF.stackName                   ##CloudFormation 'STACK'
                                 ##Def: 'lambda-shell'
CONF.functionName                ##Lambda 'FUNC'
                                 ##Def: 'lsh'
CONF.bucketName                  ##S3 'BUCKET' to upload TEMPLATE to (using STACK.TemplateURL)
--bucket|-b                      ##Created if does not exist
                                 ##S3 'OBJECT' is always 'lsh.json'
                                 ##Also used to upload zipped Lambda FUNC, as 'lambda.zip'
                                 ##Def: 'lsh-RANDOM'
CONF.memorySize                  ##NUM. FUNC_VERSION.MemorySize
--memory|-m                      ##Def: 128
CONF.timeout                     ##NUM. FUNC_VERSION.Timeout
--timeout|-t                     ##Def: 60
CONF.iamRoleArn                  ##ROLE_ARN. FUNC_VERSION.Role
--iamRoleArn|-i                  ##Def: ROLE with:
                                 ##  - PACTION lambda:InvokeFunction on any FUNC
                                 ##  - PACTION logs:CreateLogStream|PutRetentionPolicy|PutLogEvents on the LOG_GROUP
                                 ##  (if EFS)
                                 ##  - PACTION elasticfilesystem:ClientMount|ClientRootAccess|ClientWrite|DescribeMountTargets
                                 ##  - PACTION ec2:CreateNetworkInterface|DescribeNetworkInterfaces|DeleteNetworkInterface
CONF.efsAccessPointArn           ##ACCESS_POINT_ARN. FUNC_EFS.Arn
--efs-ap-arn|-e                  ##Def: none
CONF.efsMountPath                ##STR. FUNC_EFS.LocalMountPath
--path|-p                        ##Def: none
CONF.efsFileSystemArn            ##STR. EFS ARN, used by default ROLE's POLICY
--efs-fs-arn|-f                  ##Def: none
CONF.securityGroupId             ##STR. FUNC_VPC.SecurityGroupIds
--security-group|-s              ##Def: none
CONF.subnetId                    ##STR. FUNC_VPC.SubnetIds
--subnet|-n                      ##Def: none

lsh uninstall                    ##Delete STACK and S3 BUCKET

lsh shell                        ##Interactive shell, where each command is send to Lambda FUNC, then printed back locally
