
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   AWS_CONFIG   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

GOAL ==>                          #Common config for all AWS clients, except REST API

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

CONFIGURATION ==>                 #Can be (in priority):
                                  #  - CLIENT-specific flags (CLI flags, programmatic options, etc.)
                                  #  - ENVVAR
                                  #  - CONFIG
                                  #  - CREDS
                                  #  - ENVVAR AWS_CONFIG_FILE|AWS_SHARED_CREDENTIALS_FILE 'PATH'

CONFIG                            #~/.aws/config INI file
                                  #Top-level keys: 'default' or 'profile PROFILE'
                                  #Values: OBJ
[VAR1]
VAR2 =
  ...                             #Nesting in INI file

CONFIG.profile                    #Pick top-level key in CONFIG|CREDS
ENVVAR AWS_PROFILE                #Similar purpose as ROLEs, i.e. different credentials|configs
ENVVAR AWS_DEFAULT_PROFILE        #Default value for CONFIG.profile
                                  #Def: 'default'

                                  ┌──────────────┐
                                  │   DEFAULTS   │
                                  └──────────────┘

CONFIG.defaults_mode              #Meant to set multiple default values for CONFIG.*
ENVVAR AWS_DEFAULTS_MODE          #Can be:
                                  #  - 'legacy' (def)
                                  #  - 'standard': recommended if sometimes single REGION, sometimes multiple
                                  #  - 'in-region': recommended if single REGION
                                  #  - 'cross-region': recommended if multiple REGIONs
                                  #  - 'mobile': recommended if mobile app
                                  #  - 'auto':
                                  #     - guesses best value among above
                                  #     - that guess can be slow
                                  #Which CONFIG.* default is changed is documented separately

                                  ┌──────────┐
                                  │   KEYS   │
                                  └──────────┘

CREDS                             #~/.aws/credentials
                                  #Same format as ~/.aws/config
                                  #But with config keys meant to be confidential
                                  #Top-level keys: 'default' or 'PROFILE'

CONFIG|CREDS.aws_access_key_id
ENVVAR AWS_ACCESS_KEY_ID          #ACCESS_KEY_ID
CONFIG|CREDS.aws_secret_access_key
ENVVAR AWS_SECRET_ACCESS_KEY      #SECRET_ACCESS_KEY
CONFIG|CREDS.aws_session_token
ENVVAR AWS_SESSION_TOKEN          #SESSION_TOKEN
CONFIG|CREDS.aws_credential_scope
ENVVAR AWS_CREDENTIAL_SCOPE       #See TEMP_CREDS.CredentialScope in STS doc
CONFIG|CREDS.aws_account_id
ENVVAR AWS_ACCOUNT_ID             #'ACCOUNT_ID'

                                  ┌──────────┐
                                  │   ROLE   │
                                  └──────────┘

CONFIG.role_arn
ENVVAR AWS_ROLE_ARN               #'ROLE'. Use STS AssumeRole()

CONFIG.source_profile             #'PROFILE' for a CONFIG to load, when using CONFIG.role_arn
CONFIG.credential_source          #PROFILE for a CREDS to load, when using CONFIG.role_arn
                                  #Can be:
                                  #  - 'Environment': use ENVVAR AWS_*
                                  #  - 'Ec2InstanceMetadata':
                                  #      - inside an EC2 container, use instance metadata
                                  #      - only needed when switching to another ROLE than EC2 container's one
                                  #  - 'EcsContainer': same for ECS

CONFIG.role_session_name
ENVVAR AWS_ROLE_SESSION_NAME
CONFIG.duration_seconds
CONFIG.external_id                #Like STS ASSUME_ROLE_REQ.*
CONFIG.mfa_serial                 #Like STS ASSUME_ROLE_REQ.SerialNumber

CONFIG.web_identity_token_file    #'PATH' to WEB_ID_ROLE_REQ.WebIdentityToken.
ENVVAR AWS_WEB_IDENTITY_TOKEN_FILE#Use STS AssumeRoleWithWebIdentity() instead.

                                  ┌─────────┐
                                  │   SSO   │
                                  └─────────┘

CONFIG.sso_*                      #IAM identity center config
CONFIG.sso_account_id             #ACCOUNT_ID
CONFIG.sso_role_name              #'ROLE'

CONFIG.sso_session                #'SSO_PROFILE'
[sso-session SSO_PROFILE]         #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region             #"REGION"
SSO_CONFIG.sso_start_url          #URL
SSO_CONFIG.sso_registration_scopes#"sso:account:..."

                                  ┌────────────────────────┐
                                  │   CREDENTIAL PROCESS   │
                                  └────────────────────────┘

CONFIG.credential_process         #'PROGRAM [--FLAGS...]' to get credentials from.
                                  #Must print on stdout a CREDENTIALS_OBJ as JSON

CREDENTIALS_OBJ                   #
CREDENTIALS_OBJ.Version           #'1'
CREDENTIALS_OBJ.AccessKeyId       #STR
CREDENTIALS_OBJ.SecretAccessKey   #STR
CREDENTIALS_OBJ.SessionToken      #STR
CREDENTIALS_OBJ.CredentialScope   #STR
CREDENTIALS_OBJ.Expiration        #'DATE' (def: none)
CREDENTIALS_OBJ.AccountId         #STR

                                  ┌────────────┐
                                  │   OTHERS   │
                                  └────────────┘

CONFIG.tcp_keepalive              #BOOL (def: false).
