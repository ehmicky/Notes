
              
   AWS_CONFIG  
              



GOAL ==>                      #Common config for all AWS clients, except REST API


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIGURATION ==>             #Can be (in priority):
                              #  - CLIENT-specific flags (CLI flags, programmatic options, etc.)
                              #  - ENVVAR
                              #  - CONFIG
                              #  - CREDS
                              #  - ENVVAR AWS_CONFIG_FILE|AWS_SHARED_CREDENTIALS_FILE 'PATH'

CONFIG                        #~/.aws/config INI file
                              #Top-level keys: 'default' or 'profile PROFILE'
                              #Values: OBJ
[VAR1]
VAR2 =
  ...                         #Nesting in INI file

CONFIG.profile                #Pick top-level key in CONFIG|CREDS
ENVVAR AWS_PROFILE            #Similar purpose as ROLEs, i.e. different credentials|configs
ENVVAR AWS_DEFAULT_PROFILE    #Default value for CONFIG.profile
                              #Def: 'default'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             KEYS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CREDS                         #~/.aws/credentials
                              #Same format as ~/.aws/config
                              #But with config keys meant to be confidential
                              #Top-level keys: 'default' or 'PROFILE'

CONFIG|CREDS.aws_access_key_id
ENVVAR AWS_ACCESS_KEY_ID      #ACCESS_KEY_ID
CONFIG|CREDS
 .aws_secret_access_key
ENVVAR AWS_SECRET_ACCESS_KEY  #SECRET_ACCESS_KEY
CONFIG|CREDS.aws_session_token
ENVVAR AWS_SESSION_TOKEN      #SESSION_TOKEN
CONFIG|CREDS
 .aws_credential_scope
ENVVAR AWS_CREDENTIAL_SCOPE   #See TEMP_CREDS.CredentialScope in STS doc
CONFIG|CREDS.aws_account_id
ENVVAR AWS_ACCOUNT_ID         #'ACCOUNT_ID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ROLE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.role_arn
ENVVAR AWS_ROLE_ARN           #'ROLE'. Use STS AssumeRole()

CONFIG.source_profile         #'PROFILE' for a CONFIG to load, when using CONFIG.role_arn
CONFIG.credential_source      #PROFILE for a CREDS to load, when using CONFIG.role_arn
                              #Can be:
                              #  - 'Environment': use ENVVAR AWS_*
                              #  - 'Ec2InstanceMetadata':
                              #      - inside an EC2 container, use instance metadata
                              #      - only needed when switching to another ROLE than EC2 container's one
                              #  - 'EcsContainer': same for ECS

CONFIG.role_session_name
ENVVAR AWS_ROLE_SESSION_NAME
CONFIG.duration_seconds
CONFIG.external_id            #Like STS ASSUME_ROLE_REQ.*
CONFIG.mfa_serial             #Like STS ASSUME_ROLE_REQ.SerialNumber

CONFIG.web_identity_token_file
ENVVAR                        #'PATH' to WEB_ID_ROLE_REQ.WebIdentityToken.
 AWS_WEB_IDENTITY_TOKEN_FILE  #Use STS AssumeRoleWithWebIdentity() instead.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SSO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.sso_*                  #IAM identity center config
CONFIG.sso_account_id         #ACCOUNT_ID
CONFIG.sso_role_name          #'ROLE'

CONFIG.sso_session            #'SSO_PROFILE'
[sso-session SSO_PROFILE]     #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region         #"REGION"
SSO_CONFIG.sso_start_url      #URL
SSO_CONFIG
 .sso_registration_scopes     #"sso:account:..."


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      CREDENTIAL PROCESS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.credential_process     #'PROGRAM [--FLAGS...]' to get credentials from.
                              #Must print on stdout a CREDENTIALS_OBJ as JSON

CREDENTIALS_OBJ               #
CREDENTIALS_OBJ.Version       #'1'
CREDENTIALS_OBJ.AccessKeyId   #STR
CREDENTIALS_OBJ
 .SecretAccessKey             #STR
CREDENTIALS_OBJ.SessionToken  #STR
CREDENTIALS_OBJ
 .CredentialScope             #STR
CREDENTIALS_OBJ.Expiration    #'DATE' (def: none)
CREDENTIALS_OBJ.AccountId     #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ENDPOINT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.region
ENVVAR AWS_DEFAULT_REGION     #'REGION|aws_global'

CONFIG.use_fips_endpoint
ENVVAR AWS_USE_FIPS_ENDPOINT  #BOOL (def: false)

CONFIG.use_dualstack_endpoint
ENVVAR
 AWS_USE_DUALSTACK_ENDPOINT   #BOOL (def: false)

CONFIG.
 endpoint_discovery_enabled
ENVVAR                        #BOOL. Uses some intermediary ACTION (like "DescribeEndpoints") to find the SERVICE main enpoint.
 AWS_ENABLE_ENDPOINT_DISCOVERY#Def: depends on SERVICE.

CONFIG.api_versions.SERVICE   #'SVERSION' (def: last)

CONFIG.endpoint_url
ENVVAR AWS_ENDPOINT_URL       #'URL', to override it
CONFIG.services               #'SERVICE'
CONFIG.services.SERVICE
 .endpoint_url
ENVVAR
 AWS_ENDPOINT_URL_{SERVICE}   #'URL', to override it
CONFIG                        #Whether to use ACCOUNT_ID in endpoint_url:
 .account_id_endpoint_mode    #  - 'preferred' (def): if there is an ACCOUNT_ID, and endpoint_url allows it
                              #  - 'disabled': do not use ACCOUNT_ID, even if endpoint_url allows it
                              #  - 'required': fails if endpoint_url allows it but there is no ACCOUNT_ID

CONFIG
 .sigv4a_signing_region_set
ENVVAR
 AWS_SIGV4A_SIGNING_REGION_SET#'REGION'_ARR (def: current) for signature v4a


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RETRY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENTUAL CONSISTENCY ==>      #After change, should test existence, with exponential retry delays up to a limit (e.g. 5 mins)
                              #Can be slow, i.e. avoid in critical paths
WAIT ==>                      #Most clients (but not REST API) implement wait methods.
                              #It calls an ACTION repeatedly until a specific condition fulfills.
                              #Using an exponential backoff, multiplying by 2 each time.
                              #Documented with the ACTION it repeats
                              #Client parameters:
                              #  - same as ACTION
                              #  - client-specific backoff|cancellation

RETRIES ==>                   #Should retry on 5**, with exponential backoff
amz-sdk-request [C]           #'attempt=NUM; max=NUM' of retries
                              #Optional. Set by multiple SDKs
amz-sdk-invocation-id [C]     #'UUID' not changed when doing retries
                              #Optional. Set by multiple SDKs

CONFIG.retry_mode             #Either:
ENVVAR AWS_RETRY_MODE         #  - 'legacy'
                              #      - retry on socket errors and throttling
                              #      - exponential backoff multiplying by 2
                              #  - 'standard' (def): same but also:
                              #      - retry on quotas and timeouts
                              #      - exponential backoff max 20s
                              #  - 'adaptive': same but also:
                              #      - backoff is error-specific
CONFIG.max_attempts
ENVVAR AWS_MAX_ATTEMPTS       #NUM of retries (def: 5 with retry_mode 'legacy', 3 otherwise)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.parameter_validation   #BOOL (def: true). Validate request parameters
                              #Can disable for performance.

CONFIG.tcp_keepalive          #BOOL (def: false).

CONFIG.ca_bundle
ENVVAR AWS_CA_BUNDLE          #STR (PEM format). Override CA certificate bundle
