
           
   AWS CLI  
           



VERSION ==>                   #2.11.10
                              #Written in Python

SEE ALSO ==>                  #Main AWS doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INSTALL ==>                   #Download and run install script
                              #Does not automatically update

DOCKER IMAGE ==>              #Available on Docker Hub or ECS

SERVICES ==>                  #Most are available, except some within last 6 months
                              #Some SERVICEs have CLI-only commands


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG
CREDS
ENVVARs                       #See AWS config doc
--profile
--region
--ca-bundle                   #Like CONFIG.*

aws configure ...             #Get|set CONFIG|CREDS
aws configure                 #Create CONFIG|CREDS interactively
aws configure list            #
aws configure get
 [PROFILE.]VAR                #
aws configure set
 [PROFILE.]VAR VAL            #

aws configure sso             #Same but for CONFIG.sso_*
--no-browser                  #Do not open browser automatically

aws configure sso-session     #Same but for SSO_CONFIG.*

aws configure import          #Set multiple PROFILEs using a CSV file with columns: 'PROFILE', ACCESS_KEY_ID, SECRET_ACCESS_KEY
                              #That CSV file can be downloaded from UI
--csv                         #'PATH'
--profile-prefix              #STR to prepend to all 'PROFILE'
--skip-invalid                #BOOL (def: false). Do not fail if invalid

aws configure list-profiles   #Print all PROFILEs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws configure
 export-credentials           #Print current CREDENTIALS_OBJ
--format                      #Can be:
                              #  - 'process' (def): JSON
                              #  - 'env': `export AWS_...=...`
                              #  - 'env-no-export': `AWS_...=...`
                              #  - 'powershell': `$Env:AWS_...="..."`
                              #  - 'windows-cmd': `set AWS_...=...`

--no-sign-request             #Do not add authorization parameters

~/.aws/cli/cache              #Cache for authentication


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REQUEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws SERVICE ACTION            #Performs an action
                              #ACTION|REQ_VAR: lowercase dasherized

aws SERVICE WAIT-complete
aws SERVICE wait WAIT         #Wait until WAIT complete
--REQ_VAR                     #Underlying COMMAND parameters and HTTP headers
                              #If x-amz-HEADER, stripped to just --HEADER
                              #Sometimes the name is slightly different from the API
                              #When request is raw, usually OBJ.Body, with OBJ.* being the headers

--REQ_VAR VAL                 #
--[no-]REQ_BOOL               #
--REQ_DATE STR                #'YYYY-MM-DD[THH:MM:SS.sssZ]' or DATE_NUM
--REQ_ARR VAL VAL2 ...        #
--REQ_OBJ
 KEY=VAL,KEY2=VAL2,...        #
--REQ_ARR_OBJ
 KEY=VAL,...,KEY2=VAL2,...    #
--REQ_OBJ_ARR
 KEY=VAL,... KEY2=VAL2,...    #

NESTED VAL ==>                #Can be {VAR=VAL,...}

--REQ_VAR file://PATH.json    #Use JSON file content ("blob")
                              #PATH can be relative
--REQ_VAR fileb://PATH        #Use raw binary file content
--REQ_VAR file://PATH         #Use binary file content, depending on --cli-binary-format:
--cli-binary-format           #  - 'base64' (def)
                              #  - 'raw-in-base64-out': raw
                              #Binary values are always base64 in output
--REQ_VAR PATH                #Use OBJ_ARR file content ("streaming blob")
                              #Only for specific ACTIONs

--cli-input-json
 file://PATH.json             #Specifies all --REQ_VAR as JSON
--cli-input-yaml
 file://PATH.yml              #Specifies all --REQ_VAR as YAML

--generate-cli-skeleton       #Generate sample '[yaml-]input' (def) or 'output'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTOCOMPLETE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


complete -C aws_completer aws #Adds autocompletion
                              #Binary installed alongside `aws`

CONFIG.cli_auto_prompt        #Can be:
ENVVAR AWS_CLI_AUTO_PROMPT    #  - 'on'
                              #  - 'on-partial':
                              #      - only on incomplete|erroneous commands
                              #      - e.g. when only `aws` entered
                              #  - 'off' (def)
                              #Interactive TUI with:
                              #  - autocomplete
                              #     - makes API calls to guess values too
                              #  - output preview
                              #  - show description and full docs
                              #  - docs
                              #  - history (CTRL-R)
                              #Previously named aws-shell and was a separate binary, now deprecated
--[no-]cli-auto-prompt        #BOOL (def: false)

saws                         ##Project adding autocompletion and syntax highlighting, but not maintained

aws SERVICE wizard ACTION     #Like AWS SERVICE ACTION but interactively with a TUI
                              #Only for specific ACTIONs, and name is often different


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


~/.aws/cli/alias              #Like shell aliases, but AWS CLI specific
                              #INI file
                              #Top-level key: [toplevel] or [command SERVICE]
                              #Nested key: 'ALIAS'
                              #Value:
                              #  - '[SERVICE] ACTION [--FLAG...]'
                              #  - '!SHELL_COMMAND'
                              #     - can use $1, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HISTORY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.cli_history            #"disabled" (def) or "enabled"

aws history list              #Show previous commands, including ids, date, args, return code

aws history show ID           #Show previous command in full
--include|exclude             #'EVENT,...'
--format                      #Always "detailed"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PAGINATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--no-paginate                 #BOOL. If false (def), automatically paginates, returning whole ARR

--page-size                   #NUM from 'MaxItems' pagination when paginating automatically
                              #Def: SERVICE-specific
--starting-token              #STR from 'NextToken' pagination

--max-items                   #Only print first NUM ARR items in output
                              #Regardless of whether received through pagination
                              #Def: none


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            FILTER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--debug                       #BOOL (def: false). Debug logging

--query                       #Filter with FILTER
                              #If --output is text|table, applied on each pagination response, instead of on whole ARR
JMESPATH ==>                  #Format of FILTER.
                              #Partial documentation:
                              #  - OBJ.VAR
                              #  - ARR[NUM]
                              #  - ARR[*]: all ARR members
                              #  - ARR[[NUM]:[NUM2]:[STEP]]:
                              #     - slice
                              #     - def: start, end, 1
                              #     - can be negative NUM (from end)
                              #  - ARR[*].ARR[]: like ARR[*].ARR[*], but flattened
                              #  - OBJ_ARR[?VAR==VAL]
                              #     - filter
                              #     - == can also be != <= < > >=
                              #     - VAL is `...` (STR) or `NUM`
                              #  - OBJ[_ARR].{NEW:OLD,...}:
                              #     - like OBJ.OLD, but rename to OBJ.NEW
                              #     - OLD can be FILTER
                              #  - OBJ[_ARR].[VAR,...]:
                              #     - each OBJ.VAR, as ARR
                              #     - VAR can be FILTER
                              #  - FILTER | FILTER2: pipe
                              #  - built-in FUNCs:
                              #     - abs|ceil|floor(NUM)->NUM
                              #     - avg|sum|min|max(NUM_ARR)->NUM
                              #     - contains(ARR|STR, STR2)->BOOL
                              #     - starts|ends_with(STR, STR2)->BOOL
                              #     - join(STR, ARR)->STR2
                              #     - keys(OBJ)->STR_ARR
                              #     - values(OBJ)->ARR
                              #     - length(OBJ|ARR|STR)->NUM
                              #     - reverse(ARR)->ARR2
                              #     - sort(ARR)->ARR2
                              #     - sort_by(ARR, FILTER)->ARR2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OUTPUT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.output
--output
ENVVAR AWS_DEFAULT_OUTPUT     #'json' (def), 'yaml[-stream]', 'text' (TSV), 'table'

CONFIG.cli_timestamp_format   #How timestamp are output:
                              #  - 'iso8601' (def)
                              #  - 'wire': as received from the API

--color                       #'auto' (def) or 'on|off'

CONFIG.cli_pager
--no-cli-pager                #BOOL (def: true). Whether to use `less`
ENVVAR AWS_PAGER              #'PROGRAM [--FLAG...]'

ENVVAR LC_ALL                 #Used
ENVVAR AWS_CLI_FILE_ENCODING  #Def: 'UTF-8'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--endpoint-url                #'SERVICE_FULL_DOMAIN' (def: guessed)

--cli-connect-timeout         #NUM (secs, def: 60). Timeout for connection
--cli-read-timeout            #NUM (secs, def: 60). Timeout, excluding connection

--no-verify-ssl               #BOOL (def: false)

ENVVAR HTTP[S]_PROXY
ENVVAR NO_PROXY               #Can be used
