
                  
   AWS JAVASCRIPT  
                  



VERSION ==>                   #3.376.0
                              #For browsers/Node.js

SEE ALSO ==>                  #Main AWS doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG
CREDS
ENVVARs                       #See AWS config doc

CLIENT.config                 #Normalized config OBJ. Not documented here

COPTS.*                       #Most VAL can also be a FUNC()->[>]VAL
                              #Also applies to credentials OPTS.*

COPTS.region
COPTS.useDualstackEndpoint
COPTS.useFipsEndpoint
COPTS.endpointDiscoveryEnabled
COPTS.apiVersion
COPTS.retryMode
COPTS.maxAttempts             #Like CONFIG.*

COPTS.logger                  #LOGGER
                              #Def: console
LOGGER.LEVEL(VAL,...)         #Like console.LEVEL(VAL...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLIENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@aws-sdk/client-SERVICE       #Main package for a given SERVICE

new SERVICEClient([COPTS])    #CLIENT
new ACTIONCommand(PARAMS)     #COMMAND
CLIENT.send(COMMAND[, SOPTS])
 ->>RESP                      #Perform an ACTION

new SERVICE([COPTS])          #OLD_CLIENT
                              #Inherits from CLIENT, i.e. can be used anywhere CLIENT can
OLD_CLIENT.ACTION             #Perform an ACTION
 (PARAMS[, SOPTS])->>RESP     #Unlike CLIENT, cannot treeshake

CLIENT.destroy()              #Stops any underlying sockets

PARAMS|RESP.*                 #Request|response parameters, including headers
                              #camelCase'd, with x-amz* stripped
                              #Sometimes the name is slightly different from the API
                              #When request|response is raw, usually OBJ.Body, with OBJ.* being the headers


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PAGINATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


paginateList*(POPTS[, PARAMS])
 ->ASYNC_ITERATOR             #Like List*() but returns an ASYNC_ITERATOR

POPTS.client                  #CLIENT

POPTS.pageSize                #NUM from 'MaxItems' pagination
                              #Def: SERVICE-specific
POPTS.startingToken           #STR from 'NextToken' pagination

POPTS.stopOnSameToken         #BOOL (def: false). If NextToken does not change, stop.
                              #This happens for some SERVICEs with infinite collections, like CloudWatchLogs events


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             WAIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


waitUntilWAITComplete
 (WAIT_OPTS, COMMAND_OPTS)    #Wait until WAIT complete
 ->>OBJ                       #COMMAND_OPTS are of the underlying COMMAND
OBJ.state                     #STR among:
                              #  - 'SUCCESS'
                              #  - 'FAILURE': condition failed
                              #  - 'TIMEOUT': WAIT_OPTS.maxWaitTime
                              #  - 'ABORTED': WAIT_OPTS.abortSignal
                              #  - 'RETRY': too many attempts (NUM is COMMAND-specific)
OBJ.reason                    #STR

WAIT_OPTS.client              #CLIENT

WAIT_OPTS.minDelay            #NUM (in secs, def: 30) start of exponential backoff
WAIT_OPTS.maxDelay            #NUM (in secs, def: 120) end of exponential backoff
WAIT_OPTS.maxWaitTime         #Max NUM secs total (def: none)

WAIT_OPTS.abortSignal         #ABORT_SIGNAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COPTS.credentials             #CREDS_OBJ
                              #Def:
                              #  - Node.js: fromNodeProviderChain()
                              #  - browsers: none
CREDS_OBJ.accessKeyId
CREDS_OBJ.secretAccessKey
CREDS_OBJ.sessionToken        #Like CONFIG.aws_*
CREDS_OBJ.expiration          #DATE

@aws-sdk/credential-providers #Package for following methods
@aws-sdk                      #Individual package used by @aws-sdk/credential-providers
 /credential-provider-*       #Not documented yet.
                              #Better treeshaking and smaller package size

from*(...)->FUNC()->>CREDS_OBJ#I.e. their return value can be passed to COPTS.credentials

fromNodeProviderChain([OPTS]) #Tries in order: fromEnv(), fromSSO(), fromIni(), fromProcess(),
                              #fromTokenFile(), fromContainerMetadata(), fromInstanceMetadata()

fromEnv()                     #Uses ENVVARs

fromIni([OPTS])               #Uses CONFIG|CREDS file
OPTS.clientConfig             #COPTS for STSClient
OPTS.clientPlugins            #PLUGIN_ARR for STSClient
OPTS.profile                  #'PROFILE'
OPTS.configFilepath           #CONFIG 'PATH'
OPTS.filepath                 #CREDS 'PATH'
OPTS.mfaCodeProvider          #FUNC(MFA_DEVICE_MID)->STR. TokenCode
OPTS.ignoreCache              #BOOL (def: false)

fromProcess([OPTS])           #Uses CONFIG.credential_process
OPTS.profile
OPTS.configFilepath
OPTS.filepath
OPTS.ignoreCache              #Like fromIni()

fromTemporaryCredentials
 ([OPTS])                     #Uses STS AssumeRole()
OPTS.params                   #PARAMS for AssumeRole()
OPTS.masterCredentials        #CREDS_OBJ for AssumeRole()
OPTS.clientConfig
OPTS.clientPlugins
OPTS.mfaCodeProvider          #Like fromIni()

fromWebToken([OPTS])          #Uses STS AssumeRoleWithWebIdentity()
OPTS.clientConfig             #COPTS for STSClient
OPTS.roleArn
OPTS.roleSessionName
OPTS.durationSeconds
OPTS.policy
OPTS.policyArns
OPTS.providerId
OPTS.webIdentityToken         #WEB_ID_ROLE_REQ.*

fromTokenFile([OPTS])         #Like fromWebToken() but passing webIdentityToken as a 'PATH' instead of as a STR
OPTS.*                        #Like fromWebToken()
OPTS.webIdentityTokenFile     #'PATH'

fromSSO([OPTS])               #Uses Identity Center
OPTS.client                   #SSOClient
OPTS.clientConfig             #COPTS for SSOClient
OPTS.ssoAccountId
OPTS.ssoRoleName
OPTS.ssoSession
OPTS.ssoRegion
OPTS.ssoStartUrl              #Like [SSO_]CONFIG.sso_*

fromContainerMetadata([OPTS]) #Uses EC2 instance metadata
OPTS.timeout                  #NUM (in ms, def: 1000) for connection timeout
OPTS.maxRetries               #NUM (def: 0)
OPTS.logger                   #LOGGER

fromInstanceMetadata([OPTS])  #Uses ECS instance metadata
OPTS.timeout
OPTS.maxRetries
OPTS.logger                   #Like fromContainerMetadata()

fromCognitoIdentity([OPTS])   #Uses Cognito Identity
OPTS.client                   #CognitoIdentityClient
OPTS.clientConfig             #COPTS for OPTS.client
OPTS.identityId               #IDENTIY_ID
OPTS.customRoleArn            #ROLE_ARN
OPTS.logins.WEB_ID_DOMAIN     #'TOKEN'

fromCognitoIdentityPool
 ([OPTS])                     #Uses Cognito Identity pools
OPTS.client
OPTS.clientConfig
OPTS.customRoleArn
OPTS.logins                   #Like fromCognitoIdentity()
OPTS.identityPoolId           #IDENTITY_POOL_ID
OPTS.accountId                #ACCOUNT_ID
OPTS.userIdentifier           #STR. User ID used to cache
OPTS.cache                    #OBJ:
                              #  - getItem('KEY')->[>]'VAL'|null
                              #  - setItem('KEY', 'VAL')[->>]
                              #  - removeItem('KEY')[->>]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COPTS.endpoint                #'URL'|ENDPOINT
                              #Def: guessed
ENDPOINT.url                  #URL
ENDPOINT.headers              #OBJ
ENDPOINT.properties           #OBJ

ENDPOINT[.properties]
 .authSchemes                 #AUTH_SCHEME_ARR
AUTH_SCHEME                   #Authorization signature
AUTH_SCHEME.name              #'sigv4[a]'
AUTH_SCHEME.signingName       #'SERVICE'
AUTH_SCHEME.signingRegion     #'REGION'
AUTH_SCHEME.signingRegionSet  #'REGION'_ARR

COPTS.customUserAgent         #STR|USER_AGENTS. User-Agent [C]
USER_AGENTS                   #['NAME'[, VERSION]]_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         HTTP REQUEST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COPTS.requestHandler          #REQ_HANDLER. How HTTP requests are done.
                              #Def: node-http-handler in Node.js, fetch in browsers

@aws-sdk/node-http-handler    #Use Node HTTP
new NodeHttpHandler([NHOPTS]) #REQ_HANDLER
NHOPTS.http[s]Agent           #AGENT

@aws-sdk/node-http2-handler   #Use Node HTTP2
new NodeHttp2Handler
 ([N2HOPTS])                  #REQ_HANDLER
N2HOPTS.sessionTimeout        #Node HTTP2_SESSION.setTimeout()
N2HOPTS.maxConcurrentStreams  #Like Node HTTP2 maxConcurrentStreams
N2HOPTS
 .disableConcurrentStreams    #BOOL (def: false)

@aws-sdk/fetch-http-handler   #Use fetch()
new FetchHttpHandler([FHOPTS])#REQ_HANDLER

@aws-sdk/xhr-http-handler     #Use XHR
new XhrHttpHandler([XHOPTS])  #REQ_HANDLER

*HOPTS|SOPTS.requestTimeout   #NUM (in ms) to timeout HTTP connection
SOPTS.abortSignal             #ABORT_SIGNAL

RESP_STREAM                   #Some ACTIONs return that type (e.g. S3 GetObject()), depending on REQ_HANDLER:
                              #  - node-http: Node HTTP RES
                              #  - node-http2: ISTREAM
                              #  - fetch-http: RSTREAM
                              #  - xhr-http: BLOB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESP.$metadata                #METADATA

METADATA.httpStatusCode       #NUM
METADATA.requestId            #'REQ_ID'
METADATA.extendedRequestId    #Secondary 'REQ_ID'
METADATA.attempts             #NUM of retries
METADATA.totalRetryDelay      #NUM of retry delay


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAMS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STREAMS ==>                   #Can be either:
                              #  - Node.js: ISTREAM|OSTREAM
                              #  - browser: RSTREAM|WSTREAM|BLOB
                              #In both cases, the following methods can be used
*STREAM.transformToString
 ('ENCODING')->>STR           #'ENCODING' can be 'base64', 'hex', 'utf8' (def), or any supported by TextDecoder()
*STREAM.transformToByteArray()
 ->>UINT8ARR
*STREAM.transformToWebStream()
 ->RSTREAM|WSTREAM            #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MIDDLEWARE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLUGIN                        #Plugin manipulating MSTACK, e.g. adding MFUNCs
MSTACK                        #Series of MFUNCs
MFUNC                         #FUNC(NEXT, MCONTEXT)->FUNC2(NEXT)
                              #Perform FUNC2 before any ACTION
NEXT                          #FUNC(MINPUT)->>MOUTPUT
                              #Must be called within FUNC2
@aws-sdk/middleware-*         #Most features of the SDK are implemented as MFUNCs enabled by default

MSTACK.use(PLUGIN)            #Add PLUGIN
PLUGIN.applyToStack(MSTACK)   #Main function, calling MSTACK.*

CLIENT.middlewareStack        #MSTACK
MSTACK.add(MFUNC[, MOPTS])    #Add MFUNC with position based on MOPTS.step
MSTACK.addRelativeTo
 (MFUNC, MROPTS)              #Add MFUNC with position based on another MFUNC2
MSTACK.remove(MFUNC|'MNAME')
 ->BOOL                       #
MSTACK.removeByTag('MTAG')
 ->BOOL                       #

MSTACK.identify()->'MNAME'_ARR#

MSTACK.concat(MSTACK2)
 ->MSTACK3                    #
MSTACK.clone()->MSTACK2       #
MSTACK.resolve                #Returns MSTACK as a single MFUNC2 of step 'initialize'
 (MFUNC, MCONTEXT)->MFUNC2    #Must pass an additional MFUNC of step 'deserialize'
                              #MCONTEXT is used in MFUNCs

MINPUT.input                  #PARAMS. With step 'initialize'
MINPUT.request                #MREQ. With step 'serialize|finalizeRequest'
MREQ.headers                  #OBJ. HTTP headers
MREQ.*                        #Other fields not documented yet

MOUTPUT.response              #MRES. With step 'deserialize'
MRES.*                        #Other fields not documented yet
MOUTPUT.output                #RESP. With step 'initialize|deserialize'

MOPTS.step                    #STR among:
                              #  - 'initialize' (def): transforming PARAMS
                              #  - 'serialize': validating PARAMS and serializing into HTTP request
                              #  - 'build': transform HTTP request
                              #  - 'finalizeRequest': final transformation of HTTP request that does not change semantics (e.g. signing)
                              #  - 'deserialize': deserialize HTTP response into RESP
MOPTS.priority                #'high', 'normal' (def) or 'low'. Priority with other MFUNCs of same MOPTS.step

MROPTS.relation               #'before|after'
MROPTS.toMiddleware           #'MNAME'

M[R]OPTS.name                 #'MNAME'. MFUNC name
M[R]OPTS.tags                 #'MTAG'_ARR. Arbitary description of MFUNC
M[R]OPTS.override             #BOOL (def: false). Override existing MFUNC if already exists

MCONTEXT.*                    #Any custom property can be set
MCONTEXT.logger               #LOGGER
MCONTEXT.userAgent            #USER_AGENTS
MCONTEXT.endpointV2           #ENDPOINT

MCONTEXT.currentAuthConfig    #AUTH_CONFIG
AUTH_CONFIG.in                #'header|query'. Where authorization is located
AUTH_CONFIG.name              #STR. Header|query variable name
AUTH_CONFIG.scheme            #STR
