
                                  ┏━━━━━━━━━━━━━━━━━┓
                                  ┃   AWS ACTIONS   ┃
                                  ┗━━━━━━━━━━━━━━━━━┛

SEE ALSO ==>                      #Doc for AWS general (and related)

                                  ┌─────────────────────┐
                                  │   SERVICE VERSION   │
                                  └─────────────────────┘

MAJOR RELEASE ==>                 #Most SERVICEs are at v1
                                  #Some are at v2, which is specified in SERVICE_FULL_DOMAIN (see AWS endpoint doc)

SVERSION                          #'YYYY-MM-DD'. Minor|patch release number of SERVICE
                                  #Specified in API requests

                                  ┌─────────────────────────┐
                                  │   SERVICE VERSION API   │
                                  └─────────────────────────┘

API ==>                           #One of the following, depending on SERVICE
REQ.Version 'SVERSION'            #
X-Amz-Target:
 SERVICE[_VERSION].ACTION [C]     #
X-Amz-SERVICE-Version: VERSION [C]#
/VERSION/RESOURCE                 #In URL path, when using REST

                                  ┌────────────────────────────┐
                                  │   SERVICE VERSION CONFIG   │
                                  └────────────────────────────┘

CONFIG.api_versions.SERVICE       #'SVERSION' (def: latest)

                                  ┌─────────────────────────┐
                                  │   SERVICE VERSION SDK   │
                                  └─────────────────────────┘

COPTS.apiVersion.SERVICE          #Like CONFIG.api_versions.SERVICE

                                  ┌────────────┐
                                  │   ACTION   │
                                  └────────────┘

SERVICE_ACTION                    #Method name for a given SERVICE. Capitalized.
                                  #Also called "operation"

ACTION                            #'SERVICE:SERVICE_ACTION'
                                  #Can sometimes use wildcard *

PACTION                           #See IAM doc

                                  ┌────────────────┐
                                  │   ACTION API   │
                                  └────────────────┘

API ==>                           #One of the following, depending on SERVICE
REQ.Action                        #'ACTION'
REQ.Operation                     #'ACTION'
X-Amz-Target:
 SERVICE[_VERSION].ACTION [C]     #ACTION is CamelCase

                                  ┌────────────────┐
                                  │   ACTION SDK   │
                                  └────────────────┘

@aws-sdk/client-SERVICE           #
new SERVICEClient([COPTS])        #CLIENT
new ACTIONCommand([PARAMS])       #COMMAND
CLIENT.send(COMMAND[, SOPTS])
 ->>RESP                          #Perform an ACTION

new SERVICE([COPTS])              #OLD_CLIENT
                                  #Inherits from CLIENT, i.e. can be used anywhere CLIENT can
OLD_CLIENT.ACTION                 #Perform an ACTION
 ([PARAMS[, SOPTS]])->>RESP       #Unlike CLIENT, cannot treeshake

SOPTS.abortSignal                 #ABORT_SIGNAL, stopping a single ACTION's underlying HTTP request
CLIENT.destroy()                  #Stops any underlying sockets

                                  ┌────────────────┐
                                  │   ACTION CLI   │
                                  └────────────────┘

aws SERVICE ACTION                #Performs an action
                                  #SERVICE|ACTION: lowercase dasherized

                                  ┌─────────────────┐
                                  │   REQUEST API   │
                                  └─────────────────┘

PROTOCOL ==>                      #HTTPS
                                  #HTTP allowed for some SERVICEs

RPC ==>                           #Depending on SERVICE:
                                  #  - RPC: POST|GET /
                                  #  - REST: POST|PUT|GET|DELETE /RESOURCE

REQ                               #Request parameters
                                  #Depending on SERVICE:
                                  #  - query variables VARR
                                  #     - ARR: VAR.NUM or VAR.members.NUM (1-based)
                                  #  - JSON
                                  #  - XML
                                  #     - ARR: <KEYs|KEYSet|KEYList><VAR></VAR>...</KEYs|KEYSet|KEYList>

HEADERS ==>                       #Sometimes used for REQ|RES
Content-Type [C|S]                #
Content-Length [C|S]              #
X-Amz[n]-* [C|S]                  #Non-standard headers

                                  ┌─────────────────┐
                                  │   REQUEST SDK   │
                                  └─────────────────┘

PARAMS.*                          #Request parameters, including headers
                                  #camelCase'd, with x-amz[n]-* stripped
                                  #Sometimes the name is slightly different from the API
                                  #When request is raw, usually OBJ.Body, with OBJ.* being the headers

                                  ┌─────────────────┐
                                  │   REQUEST CLI   │
                                  └─────────────────┘

--PARAM                           #Like SDK, except lowercase dasherized

--PARAM VAL                       #VAL
--[no-]PARAM                      #BOOL
--PARAM YYYY-MM-DD[THH:MM:SS.sssZ]
--PARAM DATE_NUM                  #DATE

--PARAM VAL VAL2 ...              #ARR
--PARAM KEY=VAL,KEY2=VAL2,...     #OBJ
--PARAM KEY=VAL,... KEY2=VAL2,... #OBJ_ARR
--PARAM KEY=VAL,...,KEY2=VAL2,... #ARR_OBJ
--PARAM JSON                      #ARR|OBJ|OBJ_ARR|ARR_OBJ

--PARAM {VAR=VAL,...}             #Nested VAL

--PARAM file://PATH.json          #Use JSON file content
                                  #PATH can be relative
--PARAM fileb://PATH              #Use raw binary file content ("blob")
--PARAM file://PATH               #Use binary file content, depending on --cli-binary-format:
--cli-binary-format               #  - 'base64' (def)
                                  #  - 'raw-in-base64-out': raw
                                  #Binary values are always base64 in output
--PARAM PATH                      #Use file content ("streaming blob")
                                  #Only for specific ACTIONs PARAMs which always expect a file

--cli-input-json file://PATH.json #Specifies all --PARAM as JSON
--cli-input-yaml file://PATH.yml  #Specifies all --PARAM as YAML
--generate-cli-skeleton           #Generate sample:
                                  #  - '[yaml-]input' (def): for --cli-input-*
                                  #  - 'output': RES, but after validating REQ (not sending it)

                                  ┌──────────────────┐
                                  │   RESPONSE API   │
                                  └──────────────────┘

Connection [S]                    #
Date [S]                          #

RES                               #Response body
                                  #Either JSON or XML, depending on SERVICE

                                  ┌──────────────────┐
                                  │   RESPONSE SDK   │
                                  └──────────────────┘

RESP.*                            #Same comments as PARAMS.* (see above)

RESP.$metadata                    #METADATA
METADATA.httpStatusCode           #NUM

                                  ┌──────────────────┐
                                  │   RESPONSE CLI   │
                                  └──────────────────┘

--query                           #Filter with FILTER in JMESPath (see its doc)
                                  #If --output is text|table, applied on ARR[*] instead of ARR

                                  ┌─────────────────────────┐
                                  │   RESPONSE STREAM SDK   │
                                  └─────────────────────────┘

RESP_STREAM                       #Some ACTIONs return that type (e.g. S3 GetObject()), depending on REQ_HANDLER:
                                  #  - node-http: Node HTTP RES
                                  #  - node-http2: ISTREAM|OSTREAM
                                  #  - fetch-http: RSTREAM|WSTREAM
                                  #  - xhr-http: BLOB

INPUT_BLOB                        #ISTREAM|RSTREAM, BLOB|BUFFER|ARRBUFFER[VIEW]|UINT8ARR or STR
OUTPUT_BLOB                       #UINT8ARR

STREAMS ==>                       #The following can be used on ISTREAM|OSTREAM|RSTREAM|WSTREAM|BLOB
*STREAM.transformToString
 (['ENCODING'])->>STR             #'ENCODING' can be 'base64', 'hex', 'utf8' (def), or any supported by TextDecoder()
*STREAM.transformToByteArray()
 ->>UINT8ARR
*STREAM.transformToWebStream()
 ->RSTREAM|WSTREAM                #

                                  ┌────────────────┐
                                  │   ERRORS API   │
                                  └────────────────┘

RES.Errors                        #ERROR_OBJ_ARR
RES                               #ERROR_OBJ. Alternative to RES.Errors for some SERVICEs
                                  #Uses HTTP status code too

ERROR_OBJ.Code                    #'CODE'
                                  #Can see in online doc for each ACTION
ERROR_OBJ.Message                 #'MESSAGE'
ERROR_OBJ.Resource                #STR
ERROR_OBJ.RequestId               #'REQ_ID'
ERROR_OBJ.Type                    #'Client|Server|Unknown'
                                  #Sometimes 'Sender|Server|Unknown'

ERROR_OBJ.errorCode
ERROR_OBJ.message                 #Alternative shape for some SERVICEs

                                  ┌────────────────┐
                                  │   ERRORS SDK   │
                                  └────────────────┘

ERROR                             #Exception on 4**|5**
ERROR.name                        #'CODEException'
CODEException                     #ERROR class, exported by @aws-sdk/client-SERVICE
ERROR.message                     #ERROR_OBJ.Message
ERROR.Error                       #ERROR_OBJ
ERROR.$metadata                   #METADATA

                                  ┌────────────────┐
                                  │   ERRORS CLI   │
                                  └────────────────┘

ERRORS ==>                        #Prints ERROR_OBJ.Code|Message

                                  ┌────────────────┐
                                  │   REQUEST ID   │
                                  └────────────────┘

REQ_ID                            #'UUID'. Depending on SERVICE, one of the following
RES.requestId
RES.ResponseMetadata.RequestId
x-amz[n]-request[-]id [S]         #

x-amz-id-2 [S]                    #EXTENDED_REQ_ID. Sub-REQ_ID
                                  #Machine host
                                  #Only with some SERVICEs

                                  ┌────────────────────┐
                                  │   REQUEST ID SDK   │
                                  └────────────────────┘

METADATA.requestId                #'REQ_ID'
ERROR.RequestId                   #ERROR_OBJ.RequestId
METADATA.extendedRequestId        #'EXTENDED_REQ_ID'

                                  ┌────────────────────┐
                                  │   REQUEST ID CLI   │
                                  └────────────────────┘

--debug                           #Prints REQ_ID and EXTENDED_REQ_ID

                                  ┌────────────────┐
                                  │   PAGINATION   │
                                  └────────────────┘

PAGINATION ==>                    #SERVICE-specific, documented in each SERVICE

                                  ┌────────────────────┐
                                  │   PAGINATION SDK   │
                                  └────────────────────┘

paginateList*(POPTS[, PARAMS])
 ->ASYNC_ITERATOR                 #Like List*() but returns an ASYNC_ITERATOR

POPTS.client                      #CLIENT

POPTS.pageSize                    #NUM from 'MaxItems' pagination
                                  #Def: SERVICE-specific
POPTS.startingToken               #STR from 'NextToken' pagination

POPTS.stopOnSameToken             #BOOL (def: false). If NextToken does not change, stop.
                                  #This happens for some SERVICEs with infinite collections, like CloudWatchLogs events

                                  ┌────────────────────┐
                                  │   PAGINATION CLI   │
                                  └────────────────────┘

--no-paginate                     #BOOL. If false (def), automatically paginates, returning whole ARR

--page-size                       #NUM from 'MaxItems' pagination when paginating automatically
                                  #Def: SERVICE-specific
--starting-token                  #STR from 'NextToken' pagination

--max-items                       #Only print first NUM ARR items in output
                                  #Regardless of whether received through pagination
                                  #Def: none

--debug                           #Prints pagination info

                                  ┌───────────────┐
                                  │   DEBUG SDK   │
                                  └───────────────┘

COPTS.logger                      #LOGGER
                                  #Def: console
LOGGER.LEVEL(VAL,...)             #Like console.LEVEL(VAL...)

                                  ┌───────────────┐
                                  │   DEBUG CLI   │
                                  └───────────────┘

--debug                           #BOOL (def: false). Debug logging
                                  #Among other things, prints full REQ|RES, including headers

aws history show [ID]             #Shows full REQ|RES even better (see CLI doc)
