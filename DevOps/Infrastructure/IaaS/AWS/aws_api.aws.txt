
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   AWS API   ┃
                                  ┗━━━━━━━━━━━━━┛

VERSION ==>                       #2024-07-16

SEE ALSO ==>                      #Doc for AWS general (and related)

                                  ┌─────────────────────┐
                                  │   SERVICE VERSION   │
                                  └─────────────────────┘

MAJOR RELEASE ==>                 #Most SERVICEs are at v1
                                  #Some are at v2, which is specified in SERVICE_FULL_DOMAIN (see AWS endpoint doc)

SVERSION                          #'YYYY-MM-DD'. Minor|patch release number of SERVICE
                                  #Specified in API requests

                                  ┌─────────────────────────┐
                                  │   SERVICE VERSION API   │
                                  └─────────────────────────┘

API ==>                           #One of the following, depending on SERVICE
REQ.Version 'SVERSION'            #
X-Amz-Target:
 SERVICE[_VERSION].ACTION [C]     #
X-Amz-SERVICE-Version: VERSION [C]#
/VERSION/RESOURCE                 #In URL path, when using REST

                                  ┌────────────────────────────┐
                                  │   SERVICE VERSION CONFIG   │
                                  └────────────────────────────┘

CONFIG.api_versions.SERVICE       #'SVERSION' (def: latest)

                                  ┌─────────────────────────┐
                                  │   SERVICE VERSION SDK   │
                                  └─────────────────────────┘

COPTS.apiVersion.SERVICE          #Like CONFIG.api_versions.SERVICE

                                  ┌────────────┐
                                  │   ACTION   │
                                  └────────────┘

SERVICE_ACTION                    #REST method name for a given SERVICE. Capitalized.
                                  #Also called "operation"

ACTION                            #'SERVICE:SERVICE_ACTION'
                                  #Can sometimes use wildcard *

PACTION                           #See IAM doc

                                  ┌────────────────┐
                                  │   ACTION API   │
                                  └────────────────┘

API ==>                           #One of the following, depending on SERVICE
REQ.Action                        #'ACTION'
REQ.Operation                     #'ACTION'
X-Amz-Target:
 SERVICE[_VERSION].ACTION [C]     #ACTION is CamelCase

                                  ┌────────────────┐
                                  │   ACTION SDK   │
                                  └────────────────┘

@aws-sdk/client-SERVICE           #
new SERVICEClient([COPTS])        #CLIENT
new ACTIONCommand([PARAMS])       #COMMAND
CLIENT.send(COMMAND[, SOPTS])
 ->>RESP                          #Perform an ACTION

new SERVICE([COPTS])              #OLD_CLIENT
                                  #Inherits from CLIENT, i.e. can be used anywhere CLIENT can
OLD_CLIENT.ACTION                 #Perform an ACTION
 ([PARAMS[, SOPTS]])->>RESP       #Unlike CLIENT, cannot treeshake

SOPTS.abortSignal                 #ABORT_SIGNAL, stopping a single ACTION's underlying HTTP request
CLIENT.destroy()                  #Stops any underlying sockets

                                  ┌────────────────┐
                                  │   ACTION CLI   │
                                  └────────────────┘

aws SERVICE ACTION                #Performs an action
                                  #SERVICE|ACTION: lowercase dasherized

                                  ┌─────────────┐
                                  │   REQUEST   │
                                  └─────────────┘

PROTOCOL ==>                      #HTTPS
                                  #HTTP allowed for some SERVICEs

RPC ==>                           #Depending on SERVICE:
                                  #  - RPC: POST|GET /
                                  #  - REST: POST|PUT|GET|DELETE /RESOURCE

REQ                               #Request parameters
                                  #Depending on SERVICE:
                                  #  - query variables VARR
                                  #     - ARR: VAR.NUM or VAR.members.NUM (1-based)
                                  #  - JSON
                                  #  - XML
                                  #     - ARR: <KEYSet|KEYList><VAR></VAR>...</KEYSet|KEYList>

HEADERS ==>                       #Sometimes used for REQ|RES
Content-Type [C|S]                #
Content-Length [C|S]              #
X-Amz[n]-* [C|S]                  #Non-standard headers

                                  ┌─────────────────┐
                                  │   REQUEST SDK   │
                                  └─────────────────┘

PARAMS.*                          #Request parameters, including headers
                                  #camelCase'd, with x-amz[n]-* stripped
                                  #Sometimes the name is slightly different from the API
                                  #When request is raw, usually OBJ.Body, with OBJ.* being the headers

                                  ┌─────────────────┐
                                  │   REQUEST CLI   │
                                  └─────────────────┘

--PARAM                           #Like SDK, except lowercase dasherized

--PARAM VAL                       #VAL
--[no-]PARAM                      #BOOL
--PARAM YYYY-MM-DD[THH:MM:SS.sssZ]
--PARAM DATE_NUM                  #DATE

--PARAM VAL VAL2 ...              #ARR
--PARAM KEY=VAL,KEY2=VAL2,...     #OBJ
--PARAM KEY=VAL,... KEY2=VAL2,... #OBJ_ARR
--PARAM KEY=VAL,...,KEY2=VAL2,... #ARR_OBJ
--PARAM JSON                      #ARR|OBJ|OBJ_ARR|ARR_OBJ

--PARAM {VAR=VAL,...}             #Nested VAL

--PARAM file://PATH.json          #Use JSON file content
                                  #PATH can be relative
--PARAM fileb://PATH              #Use raw binary file content ("blob")
--PARAM file://PATH               #Use binary file content, depending on --cli-binary-format:
--cli-binary-format               #  - 'base64' (def)
                                  #  - 'raw-in-base64-out': raw
                                  #Binary values are always base64 in output
--PARAM PATH                      #Use file content ("streaming blob")
                                  #Only for specific ACTIONs PARAMs which always expect a file

--cli-input-json file://PATH.json #Specifies all --PARAM as JSON
--cli-input-yaml file://PATH.yml  #Specifies all --PARAM as YAML
--generate-cli-skeleton           #Generate sample:
                                  #  - '[yaml-]input' (def): for --cli-input-*
                                  #  - 'output': RES, but after validating REQ (not sending it)

                                  ┌──────────────┐
                                  │   RESPONSE   │
                                  └──────────────┘

Connection [S]                    #
Date [S]                          #

RES                               #Response body
                                  #Either JSON or XML, depending on SERVICE

RES.Errors                        #OBJ_ARR:
                                  #  - Code 'CODE'
                                  #     - can see in online doc for each ACTION
                                  #  - Message STR
                                  #  (sometimes)
                                  #  - Resource STR
                                  #  - RequestId STR

ERROR_RES                         #Alternative to RES.Errors for some SERVICEs
                                  #OBJ:
                                  #  - code 'CODE'
                                  #  - message STR
                                  #  - type 'Client|Server|Unknown'
                                  #Uses HTTP status code too

                                  ┌──────────────────┐
                                  │   RESPONSE SDK   │
                                  └──────────────────┘

RESP.*                            #Same comments as PARAMS.* (see above)

RESP.$metadata                    #METADATA
METADATA.httpStatusCode           #NUM

                                  ┌──────────────────┐
                                  │   RESPONSE CLI   │
                                  └──────────────────┘

--query                           #Filter with FILTER in JMESPath (see its doc)
                                  #If --output is text|table, applied on ARR[*] instead of ARR

                                  ┌─────────────────────────┐
                                  │   RESPONSE STREAM SDK   │
                                  └─────────────────────────┘

RESP_STREAM                       #Some ACTIONs return that type (e.g. S3 GetObject()), depending on REQ_HANDLER:
                                  #  - node-http: Node HTTP RES
                                  #  - node-http2: ISTREAM|OSTREAM
                                  #  - fetch-http: RSTREAM|WSTREAM
                                  #  - xhr-http: BLOB

INPUT_BLOB                        #ISTREAM|RSTREAM, BLOB|BUFFER|ARRBUFFER[VIEW]|UINT8ARR or STR
OUTPUT_BLOB                       #UINT8ARR

STREAMS ==>                       #The following can be used on ISTREAM|OSTREAM|RSTREAM|WSTREAM|BLOB
*STREAM.transformToString
 (['ENCODING'])->>STR             #'ENCODING' can be 'base64', 'hex', 'utf8' (def), or any supported by TextDecoder()
*STREAM.transformToByteArray()
 ->>UINT8ARR
*STREAM.transformToWebStream()
 ->RSTREAM|WSTREAM                #

                                  ┌───────────────┐
                                  │   DEBUG SDK   │
                                  └───────────────┘

COPTS.logger                      #LOGGER
                                  #Def: console
LOGGER.LEVEL(VAL,...)             #Like console.LEVEL(VAL...)

                                  ┌───────────────┐
                                  │   DEBUG CLI   │
                                  └───────────────┘

--debug                           #BOOL (def: false). Debug logging
                                  #Among other things, prints full REQ|RES, including headers

aws history show [ID]             #Shows full REQ|RES even better (see CLI doc)

                                  ┌────────────────┐
                                  │   REQUEST ID   │
                                  └────────────────┘

REQ_ID                            #'UUID'. Depending on SERVICE, one of the following
RES.requestId
RES.ResponseMetadata.RequestId
x-amz[n]-request[-]id [S]         #

x-amz-id-2 [S]                    #EXTENDED_REQ_ID. Sub-REQ_ID
                                  #Machine host
                                  #Only with some SERVICEs

                                  ┌────────────────────┐
                                  │   REQUEST ID SDK   │
                                  └────────────────────┘

METADATA.requestId                #'REQ_ID'
METADATA.extendedRequestId        #'EXTENDED_REQ_ID'

                                  ┌────────────────────┐
                                  │   REQUEST ID CLI   │
                                  └────────────────────┘

--debug                           #Prints REQ_ID and EXTENDED_REQ_ID

                                  ┌────────────────┐
                                  │   PAGINATION   │
                                  └────────────────┘

PAGINATION ==>                    #SERVICE-specific

                                  ┌────────────────────┐
                                  │   PAGINATION SDK   │
                                  └────────────────────┘

paginateList*(POPTS[, PARAMS])
 ->ASYNC_ITERATOR                 #Like List*() but returns an ASYNC_ITERATOR

POPTS.client                      #CLIENT

POPTS.pageSize                    #NUM from 'MaxItems' pagination
                                  #Def: SERVICE-specific
POPTS.startingToken               #STR from 'NextToken' pagination

POPTS.stopOnSameToken             #BOOL (def: false). If NextToken does not change, stop.
                                  #This happens for some SERVICEs with infinite collections, like CloudWatchLogs events

                                  ┌────────────────────┐
                                  │   PAGINATION CLI   │
                                  └────────────────────┘

--no-paginate                     #BOOL. If false (def), automatically paginates, returning whole ARR

--page-size                       #NUM from 'MaxItems' pagination when paginating automatically
                                  #Def: SERVICE-specific
--starting-token                  #STR from 'NextToken' pagination

--max-items                       #Only print first NUM ARR items in output
                                  #Regardless of whether received through pagination
                                  #Def: none

--debug                           #Prints pagination info

                                  ┌─────────────────┐
                                  │   IDEMPOTENCY   │
                                  └─────────────────┘

REQ.ClientToken                   #STR. Do not perform if already performed with same STR.
                                  #Meant for idempotence.
                                  #Only for some SERVICEs (EC2, VPC, some of S3)
                                  #Sometimes called ClientRequestToken

DELETING RESOURCES ==>            #Must delete other resources that use it first

                                  ┌──────────────────────────┐
                                  │   EVENTUAL CONSISTENCY   │
                                  └──────────────────────────┘

EVENTUAL CONSISTENCY ==>          #Many endpoints use eventual consistency:
                                  #  - action happens async, after response
                                  #  - effects takes time to propagate, i.e. different clients might return different results
                                  #After change:
                                  #  - should test existence
                                  #  - with exponential retry delays up to a limit (e.g. 5 mins)
                                  #  - can be slow, i.e. avoid in critical paths

WAIT ==>                          #Most clients (but not REST API) implement wait methods.
                                  #It calls an ACTION repeatedly until a specific condition fulfills.
                                  #Using an exponential backoff, multiplying by 2 each time.
                                  #Documented with the ACTION it repeats
                                  #Client parameters:
                                  #  - same as ACTION
                                  #  - client-specific backoff|cancellation

                                  ┌──────────────────────────────┐
                                  │   EVENTUAL CONSISTENCY SDK   │
                                  └──────────────────────────────┘

waitUntilWAITComplete
 (WAIT_OPTS, COMMAND_OPTS)        #Wait until WAIT complete
 ->>OBJ                           #COMMAND_OPTS are of the underlying COMMAND
OBJ.state                         #STR among:
                                  #  - 'SUCCESS'
                                  #  - 'FAILURE': condition failed
                                  #  - 'TIMEOUT': WAIT_OPTS.maxWaitTime
                                  #  - 'ABORTED': WAIT_OPTS.abortSignal
                                  #  - 'RETRY': too many attempts (NUM is COMMAND-specific)
OBJ.reason                        #STR

WAIT_OPTS.client                  #CLIENT

WAIT_OPTS.minDelay                #NUM (in secs, def: 30) start of exponential backoff
WAIT_OPTS.maxDelay                #NUM (in secs, def: 120) end of exponential backoff
WAIT_OPTS.maxWaitTime             #Max NUM secs total (def: none)

WAIT_OPTS.abortSignal             #ABORT_SIGNAL

                                  ┌──────────────────────────────┐
                                  │   EVENTUAL CONSISTENCY CLI   │
                                  └──────────────────────────────┘

aws SERVICE WAIT-complete
aws SERVICE wait WAIT             #Wait until WAIT complete

                                  ┌───────────┐
                                  │   RETRY   │
                                  └───────────┘

SERVER ERROR RETRIES ==>          #Should retry on 5**, with exponential backoff
                                  #Different from retries which wait for eventual consistency

                                  ┌──────────────────┐
                                  │   RETRY CONFIG   │
                                  └──────────────────┘

CONFIG.retry_mode                 #One of:
ENVVAR AWS_RETRY_MODE             #  - 'legacy'
                                  #      - retry on socket errors and throttling
                                  #      - exponential backoff multiplying by 2
                                  #  - 'standard' (def): same but also:
                                  #      - retry on quotas and timeouts
                                  #      - exponential backoff max 20s
                                  #  - 'adaptive': same but also:
                                  #      - backoff is error-specific

CONFIG.max_attempts
ENVVAR AWS_MAX_ATTEMPTS           #NUM of retries (def: 5 with retry_mode 'legacy', 3 otherwise)

                                  ┌───────────────┐
                                  │   RETRY SDK   │
                                  └───────────────┘

COPTS.retryMode|maxAttempts       #Like CONFIG.*

amz-sdk-request [C]               #'attempt=NUM; max=NUM' of retries
                                  #Optional. Set by multiple SDKs

amz-sdk-invocation-id [C]         #'UUID' not changed when doing retries
                                  #Optional. Set by multiple SDKs

METADATA.attempts                 #NUM of retries
METADATA.totalRetryDelay          #NUM of retry delay

                                  ┌───────────────┐
                                  │   RETRY CLI   │
                                  └───────────────┘

--debug                           #Prints retries

                                  ┌────────────────────┐
                                  │   TIMEOUT CONFIG   │
                                  └────────────────────┘

CONNECTION TIMEOUT ==>            #Timeout on TCP|TLS connection start
                                  #Depends on CONFIG.defaults_mode:
                                  #  - 'in-region': 1s
                                  #  - else: 3s
                                  #  - 'mobile': 30s

                                  ┌─────────────────┐
                                  │   TIMEOUT CLI   │
                                  └─────────────────┘

--cli-connect-timeout             #NUM (secs, def: 60). Timeout for connection
--cli-read-timeout                #NUM (secs, def: 60). Timeout, excluding connection

                                  ┌─────────────────┐
                                  │   TIMEOUT SDK   │
                                  └─────────────────┘

*HOPTS|SOPTS.requestTimeout       #NUM (in ms) to timeout HTTP connection
                                  #See AWS JavaScript doc for *HOPTS|SOPTS

                                  ┌────────────────────────┐
                                  │   PERFORMANCE CONFIG   │
                                  └────────────────────────┘

CONFIG.tcp_keepalive              #BOOL (def: false)

                                  ┌─────────────────────┐
                                  │   PERFORMANCE SDK   │
                                  └─────────────────────┘

ENVVAR AWS_NODEJS_CONNECTION
 _REUSE_ENABLED                   #If '1' (def), use a pool of TCP connections

COPTS.requestHandler              #REQ_HANDLER. How HTTP requests are done.
                                  #Def:
                                  #  - Node.js: node-http-handler
                                  #  - browsers: fetch-http-handler
                                  #Can also directly pass *HOPTS instead of REQ_HANDLER:
                                  #  - most SERVICEs use NHOPTS in Node, FHOPTS in browser
                                  #  - some SERVICEs use N2HOPTS in Node, FHOPTS in browser
                                  #     - Kinesis, Lex Runtime v2, QBusiness, TranscribeStreaming
                                  #Cached, i.e. if multiple CLIENTs, should:
                                  #  - pass same REQ_HANDLER instance as COPTS.requestHandler
                                  #  - not use *HOPTS shortcut syntax

@aws-sdk/node-http-handler        #Use Node HTTP
new NodeHttpHandler([NHOPTS])     #REQ_HANDLER
NHOPTS.http[s]Agent               #AGENT|AGENT_OPTS
                                  #E.g. can set AGENT_OPTS.maxSockets NUM to parallelize HTTP requests

@aws-sdk/node-http2-handler       #Use Node HTTP2
new NodeHttp2Handler
 ([N2HOPTS])                      #REQ_HANDLER
N2HOPTS.sessionTimeout            #Node HTTP2_SESSION.setTimeout()
N2HOPTS.maxConcurrentStreams      #Like Node HTTP2 maxConcurrentStreams
N2HOPTS
 .disableConcurrentStreams        #BOOL (def: false)

@aws-sdk/fetch-http-handler       #Use fetch()
new FetchHttpHandler([FHOPTS])    #REQ_HANDLER

@aws-sdk/xhr-http-handler         #Use XHR
new XhrHttpHandler([XHOPTS])      #REQ_HANDLER

                                  ┌────────────────┐
                                  │   SSL CONFIG   │
                                  └────────────────┘

CONFIG.ca_bundle
ENVVAR AWS_CA_BUNDLE              #'PATH.pem'. Override CA certificate bundle

                                  ┌─────────────┐
                                  │   SSL CLI   │
                                  └─────────────┘

--no-verify-ssl                   #BOOL (def: false)

--ca-bundle                       #Like CONFIG.ca_bundle

--debug                           #Prints SSL info

                                  ┌────────────────────┐
                                  │   USER AGENT API   │
                                  └────────────────────┘

x-amz-user-agent [C]              #Optional. Set by multiple SDKs

                                  ┌────────────────────┐
                                  │   USER AGENT SDK   │
                                  └────────────────────┘

COPTS.customUserAgent             #STR|USER_AGENTS. x-amz-user-agent [C]
USER_AGENTS                       #['NAME'[, VERSION]]_ARR

                                  ┌────────────────────┐
                                  │   USER AGENT CLI   │
                                  └────────────────────┘

--debug                           #Prints user agent

                                  ┌───────────────────────┐
                                  │   VALIDATION CONFIG   │
                                  └───────────────────────┘

CONFIG.parameter_validation       #BOOL (def: true). Validate request parameters
                                  #Can disable for performance.

                                  ┌────────────┐
                                  │   QUOTAS   │
                                  └────────────┘

QUOTAS ==>                        #Also named "limits"
                                  #"Flexible": when can increase through support request
                                  #Usually per REGION
