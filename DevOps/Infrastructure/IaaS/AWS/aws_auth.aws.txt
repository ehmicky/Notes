
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   AWS_AUTH   ┃
                                  ┗━━━━━━━━━━━━━━┛

                                  ┌─────────────────┐
                                  │   CREDENTIALS   │
                                  └─────────────────┘

CREDENTIALS ==>                   #Authenticate API requests
                                  #Including through SDK, CLI, UI, SERVICEs, etc.
                                  #Done through signature HTTP headers (see AWS signature doc)

LONG-TERM CREDENTIALS ==>         #IAM ACCESS_KEY (see its doc)
                                  #Per IAM USER (have none by default)
                                  #Avoid with root (prefer IAM LOGIN_PROFILE)
                                  #Prefer short-term credentials instead
                                  #  - avoid USERs
                                  #  - if USERs, prefer SSO
                                  #Should be rotated:
                                  #  - keep old one while updating consumers to use new one
                                  #  - wait a few days and check for LastUsedDate to ensure not used anymore
                                  #  - put as Status 'Inactive' for a few days before deleting
                                  #Should be deleted when not used anymore

SHORT-TERM CREDENTIALS ==>        #STS TEMP_CREDS (see its doc)
                                  #Per session
                                  #Created by all STS methods: AssumeRole*(), GetSessionToken(), GetFederationToken(),
                                  #INSTANCE_PROFILE, SERVICE_ROLE, BEARER_TOKEN, DEPENDENT_ACTION, SERVICE_ASYNC_ACTION
                                  #Created also under-the-hood by any other authentication methods, including IAM:
                                  #LOGIN_PROFILE (in UI), SIGNING_CERTIFICATE, SERVICE_CREDENTIAL, SSH_PUBLIC_KEY
                                  #Allows (see STS doc):
                                  #  - expiration
                                  #  - not revealing access key secret
                                  #  - session policy, i.e. further restrictions than current user
                                  #Does not work with very few SERVICE|ACTIONs

                                  ┌────────────────────────────┐
                                  │   CREDENTIALS ATTRIBUTES   │
                                  └────────────────────────────┘

CREDS                             #Abstract representation of credentials

CREDS.AccessKeyId                 #'ACCESS_KEY_ID'
                                  #Public part of the key, i.e. similar to a username
                                  #Permanent if long-term credentials, but not short-term
                                  #20 chars
                                  #Start with:
                                  #  - AKIA: for IAM ACCESS_KEY
                                  #  - ASIA: for STS TEMP_CREDS
                                  #  - ABIA: for STS BEARER_TOKEN

CREDS.SecretAccessKey             #'SECRET_ACCESS_KEY'
                                  #Private part of the key, i.e. similar to a password
                                  #Not stored by AWS
                                  #Permanent if long-term credentials, but not short-term
                                  #40 chars

CREDS.SessionToken                #'SESSION_TOKEN'
                                  #Temporary session token
                                  #Only with short-term credentials, not long-term
                                  #~700 chars

CREDS.CredentialScope             #'YYYYMMDD/REGION/SERVICE/aws4_request'
                                  #Def: current ones
                                  #Can override it to restrict REGION|SERVICE

CREDS.AccountId                   #'ACCOUNT_ID'
                                  #Def: current one

CREDS.Expiration                  #DATE. If not set: valid only once
                                  #When <5 min of DATE, automatically try to refresh

                                  ┌────────────────┐
                                  │   OBJECT SDK   │
                                  └────────────────┘

CREDS_OBJ.accessKeyId
CREDS_OBJ.secretAccessKey
CREDS_OBJ.sessionToken
CREDS_OBJ.credentialScope
CREDS_OBJ.accountId
CREDS_OBJ.expiration              #Like CREDS.*

                                  ┌────────────────┐
                                  │   OBJECT CLI   │
                                  └────────────────┘

CREDS_JSON.Version                #1
CREDS_JSON.AccessKeyId
CREDS_JSON.SecretAccessKey
CREDS_JSON.SessionToken
CREDS_JSON.CredentialScope
CREDS_JSON.AccountId              #Like CREDS_OBJ.*
CREDS_JSON.Expiration             #'DATE'. Automatically refresh when expired

                                  ┌──────────────┐
                                  │   AUTH SDK   │
                                  └──────────────┘

COPTS.credentials                 #CREDS_OBJ[_FUNC]
                                  #Cached, i.e. if multiple CLIENTs, should pass same CREDS_OBJ instance as COPTS.credentials
CREDS_OBJ_FUNC                    #FUNC()->>CREDS_OBJ

@aws-sdk/credential-provider-*
from*(...)->CREDS_OBJ_FUNC        #I.e. their return value can be passed to COPTS.credentials
OPTS.logger                       #LOGGER (see AWS JavaScript doc)

@aws-sdk/credential-providers
createCredentialChain             #Combines multiple FUNC()->>CREDS_OBJ
 (FUNC,...)->FUNC2                #Can be any of the from*() below, or a custom FUNC()->>CREDS_OBJ
createCredentialChain(...)
 .expireAfter(NUM)->FUNC2         #Same but with CREDS_OBJ.expiration Date.now() + NUM (in ms, min 5m)

@aws-sdk/credential-provider-node
fromNodeProviderChain([OPTS])     #Tries in order: fromEnv(), fromSSO(), fromIni(), fromProcess(),
 ->CREDS_OBJ_FUNC                 #fromTokenFile(), fromHttp(), fromContainerMetadata(), fromInstanceMetadata()
                                  #Def COPTS.credentials in Node.js

BROWSERS ==>                      #No def COPTS.credentials in browsers
                                  #Can only use: fromTemporaryCredentials(), fromHttp(), fromWebToken(), fromCognitoIdentity[Pool]()

                                  ┌──────────────┐
                                  │   AUTH CLI   │
                                  └──────────────┘

aws configure [list|get|set]      #Can be used for INI_CREDS, like CONFIG (see its doc)

aws configure export-credentials  #Print current CREDS_JSON
--format                          #Can be:
                                  #  - 'process' (def): JSON
                                  #  - 'env': `export AWS_...=...`
                                  #  - 'env-no-export': `AWS_...=...`
                                  #  - 'powershell': `$Env:AWS_...="..."`
                                  #  - 'windows-cmd': `set AWS_...=...`

--no-sign-request                 #Do not add AWS signature
                                  #Meant to prevent sending credentials if request is anonymous (e.g. with S3 GetObject())

                                  ┌────────────────┐
                                  │   INI CONFIG   │
                                  └────────────────┘

~/.aws/credentials
ENVVAR AWS_SHARED_CREDENTIALS_FILE#INI_CREDS. Same format as ~/.aws/config (see its doc), but with confidential credentials

CONFIG.profile
ENVVAR AWS[_DEFAULT]_PROFILE      #PROFILE is used with INI_CREDS, like CONFIG (see its doc)

INI_CREDS.aws_access_key_id
INI_CREDS.aws_secret_access_key
INI_CREDS.aws_session_token
INI_CREDS.aws_credential_scope
INI_CREDS.aws_account_id          #Like CREDS_OBJ.*

CONFIG.aws_*                      #Same as INI_CREDS.aws_*
                                  #Prefer INI_CREDS as it separates private|public information

aws-vault                         #CLI tool to encrypt INI_CREDS using an encrypted file, OS-specific keychain, pass, Yubikey
                                  #Login through temporary created ROLEs
                                  #Can also manage multiple profiles, or rotate INI_CREDS
                                  #Not documented yet

                                  ┌─────────────┐
                                  │   INI SDK   │
                                  └─────────────┘

@aws-sdk/credential-provider-ini
fromIni([OPTS])->CREDS_OBJ_FUNC   #If INI_CREDS|CONFIG.aws_access_key_id|aws_secret_access_key set: use INI_CREDS|CONFIG.aws_*
                                  #Else, uses CONFIG.* and guesses|calls the correct from*(...) (see below)
                                  #In both cases, can use following OPTS

OPTS.filepath                     #INI_CREDS 'PATH' (def: see above)
OPTS.configFilepath               #CONFIG 'PATH' (def: see config doc)
OPTS.ignoreCache                  #BOOL. If false (def), memoize contents of INI_CREDS|CONFIG
OPTS.profile                      #'PROFILE' (def: see config doc)
OPTS.*                            #When using another from*(...) under-the-hood, can use its OPTS too (unless documented otherwise)

                                  ┌─────────────┐
                                  │   INI CLI   │
                                  └─────────────┘

INI_CREDS|CONFIG.aws_*            #Used by CLI if set

                                  ┌───────────────────────────┐
                                  │   ENVIRONMENT VARIABLES   │
                                  └───────────────────────────┘

ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
ENVVAR AWS_SESSION_TOKEN
ENVVAR AWS_CREDENTIAL_SCOPE
ENVVAR AWS_ACCOUNT_ID
ENVVAR AWS_CREDENTIAL_EXPIRATION  #Like CREDS_OBJ.*

                                  ┌───────────────────────────────┐
                                  │   ENVIRONMENT VARIABLES SDK   │
                                  └───────────────────────────────┘

@aws-sdk/credential-provider-env
fromEnv([OPTS])->CREDS_OBJ_FUNC   #Uses ENVVAR AWS_* if set
                                  #Does not use INI_CREDS|CONFIG

                                  ┌───────────────────────────────┐
                                  │   ENVIRONMENT VARIABLES CLI   │
                                  └───────────────────────────────┘

ENVVAR AWS_*                      #Used by CLI if set

                                  ┌────────────────────┐
                                  │   PROCESS CONFIG   │
                                  └────────────────────┘

CONFIG.credential_process         #'SHELL_COMMAND' to get credentials from.
                                  #Must print CREDS_JSON on stdout
                                  #cwd is current one, not CONFIG's DIR

                                  ┌─────────────────┐
                                  │   PROCESS SDK   │
                                  └─────────────────┘

@aws-sdk/credential-provider-ini
fromIni([OPTS])->CREDS_OBJ_FUNC   #If CONFIG.credential_process set, uses fromProcess()
                                  #Uses CONFIG.profile for OPTS.profile
                                  #Cannot pass other fromProcess() OPTS

@aws-sdk/
 credential-provider-process
fromProcess([OPTS])
 ->CREDS_OBJ_FUNC                 #Uses CONFIG.credential_process
OPTS.configFilepath|ignoreCache
 |profile                         #Like fromIni(). Used to load CONFIG.credential_process

                                  ┌─────────────────┐
                                  │   PROCESS CLI   │
                                  └─────────────────┘

CONFIG.credential_process         #If set, automatically used by CLI

                                  ┌─────────────────┐
                                  │   ROLE CONFIG   │
                                  └─────────────────┘

CONFIG.role_arn                   #'ROLE'. Authenticate using STS AssumeRole()

CONFIG.source_profile             #'PROFILE' with CONFIG.aws_* credentials, when using AssumeRole()
                                  #For the request itself, not the role being requested
                                  #Requires CONFIG.role_arn
CONFIG.credential_source          #Same but for INI_CREDS
                                  #Can also be:
                                  #  - 'Environment': like fromEnv() (see AWS auth doc)
                                  #  - 'Ec2InstanceMetadata': like fromInstanceMetadata() (see EC2 doc)
                                  #      - only needed when switching to another ROLE than EC2 container's one
                                  #  - 'EcsContainer': like fromContainerMetadata() (see ECS doc)

CONFIG.role_session_name
CONFIG.duration_seconds
CONFIG.external_id                #Like STS ASSUME_ROLE_REQ.*
CONFIG.mfa_serial                 #Like STS ASSUME_ROLE_REQ.SerialNumber

                                  ┌──────────────┐
                                  │   ROLE SDK   │
                                  └──────────────┘

@aws-sdk/credential-provider-ini
fromIni([OPTS])->CREDS_OBJ_FUNC   #If CONFIG.role_arn + CONFIG.source_profile|credential_source set, uses fromTemporaryCredentials()
                                  #Uses:
                                  #  - CONFIG.role_arn|role_session_name|duration_seconds|external_id|mfa_serial for OPTS.params.*
                                  #  - CONFIG.source_profile|credential_source for OPTS.masterCredentials

@aws-sdk/credential-providers
fromTemporaryCredentials([OPTS])  #Uses STS AssumeRole()
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG (unless fromIni())

OPTS.params                       #ASSUME_ROLE_REQ for AssumeRole()
                                  #Def ASSUME_ROLE_REQ.RoleSessionName: 'aws-sdk-js-NOW'
OPTS.mfaCodeProvider              #FUNC(MFA_DEVICE_MID)->STR (def: none). ASSUMED_ROLE_REQ.TokenCode

OPTS.masterCredentials            #CREDS_OBJ for AssumeRole() (def: current one)
                                  #For the request itself, not the role being requested
                                  #Used instead of CONFIG.source_profile|credential_source

OPTS.clientConfig                 #COPTS for STSClient
OPTS.clientPlugins                #PLUGIN_ARR for STSClient

                                  ┌──────────────┐
                                  │   ROLE CLI   │
                                  └──────────────┘

CONFIG.role_arn
CONFIG
 .source_profile|credential_source#If set, CLI automatically calls AssumeRole() (like above)

~/.aws/cli/cache/HASH.json        #STS_CACHE. AssumeRole() response's local cache
                                  #Used until the credentials expire
                                  #Set whether AssumeRole() called:
                                  #  - manually with `aws sts assume-role`
                                  #  - automatically due to CONFIG.role_arn
STS_CACHE.Credentials             #CREDS_JSON
STS_CACHE.AssumedRoleUser         #ASSUMED_ROLE.AssumedRoleUser
STS_CACHE.ResponseMetadata        #RequestId, HTTPStatusCode, HTTPHeaders, RetryAttempts

                                  ┌──────────────────┐
                                  │   WEB IDENTITY   │
                                  └──────────────────┘

CONFIG.web_identity_token_file    #'PATH' to WEB_ID_ROLE_REQ.WebIdentityToken
                                  #Authenticate with STS AssumeRoleWithWebIdentity()

CONFIG.source_profile
 |credential_source|role_arn
 |role_session_name
 |duration_seconds                #Same as above

ENVVAR AWS_ROLE_ARN
ENVVAR AWS_ROLE_SESSION_NAME
ENVVAR AWS_WEB_IDENTITY_TOKEN_FILE#Can also be used

                                  ┌──────────────────────┐
                                  │   WEB IDENTITY SDK   │
                                  └──────────────────────┘

@aws-sdk/credential-provider-ini
fromIni([OPTS])->CREDS_OBJ_FUNC   #If CONFIG.role_arn + CONFIG.web_identity_token_file set, uses fromTokenFile()
                                  #Uses CONFIG.role_arn|web_identity_token_file|role_session_name for OPTS.roleArn|webIdentityTokenFile|roleSessionName
                                  #Can only set following OPTS of fromTokenFile(): roleAssumerWithWebIdentity

@aws-sdk/
 credential-provider-web-identity
fromWebToken([OPTS])              #Uses STS AssumeRoleWithWebIdentity()
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG|ENVVARs
OPTS.clientConfig|clientPlugins   #Same as fromTemporaryCredentials()
OPTS.roleArn
OPTS.durationSeconds
OPTS.policy
OPTS.policyArns
OPTS.providerId
OPTS.webIdentityToken             #WEB_ID_ROLE_REQ.*
OPTS.roleSessionName              #WEB_ID_ROLE_REQ.RoleSessionName. Def: 'aws-sdk-js-session-NOW'
OPTS.roleAssumerWithWebIdentity   #With value getDefaultRoleAssumerWithWebIdentity(WEB_ID_ROLE_REQ_OBJ), to set specific WEB_ID_ROLE_REQ.* not available as OPTS.*

fromTokenFile([OPTS])             #Like fromWebToken() but passing webIdentityToken as a 'PATH' instead of as a STR
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG (unless fromIni()) but uses ENVVARs
OPTS.webIdentityTokenFile         #'PATH'
OPTS.*                            #Like fromWebToken()

                                  ┌──────────────────────┐
                                  │   WEB IDENTITY CLI   │
                                  └──────────────────────┘

CONFIG.role_arn
CONFIG.web_identity_token_file    #If set, CLI automatically calls AssumeRoleWithIdentity()

~/.aws/cli/cache/HASH.json        #Caches AssumeRoleWithIdentity() too (see above)
                                  #STS_CACHE.AssumedRoleUser is WEB_ID_ROLE.AssumedRoleUser

                                  ┌────────────────┐
                                  │   SSO CONFIG   │
                                  └────────────────┘

CONFIG.sso_*                      #IAM identity center config
CONFIG.sso_account_id             #'ACCOUNT_ID'
CONFIG.sso_role_name              #'ROLE'

CONFIG.sso_session                #'SSO_PROFILE'
[sso-session SSO_PROFILE]         #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region             #'REGION'
SSO_CONFIG.sso_start_url          #'URL'
SSO_CONFIG.sso_registration_scopes#'sso:account:...'

                                  ┌─────────────┐
                                  │   SSO SDK   │
                                  └─────────────┘

@aws-sdk/credential-provider-ini
fromIni([OPTS])->CREDS_OBJ_FUNC   #If any CONFIG.sso_* set, uses fromSSO()
                                  #Uses CONFIG.profile for OPTS.profile
                                  #Cannot pass any fromSSO() OPTS

@aws-sdk/credential-provider-sso
fromSSO([OPTS])->CREDS_OBJ_FUNC   #Uses Identity Center

OPTS.ssoAccountId
OPTS.ssoRoleName
OPTS.ssoSession                   #Like CONFIG.sso_*
OPTS.ssoRegion
OPTS.ssoStartUrl                  #Like SSO_CONFIG.sso_*

OPTS.configFilepath|ignoreCache   #Like fromIni()
 |profile                         #Used to load CONFIG.sso_* which are used as default for OPTS.sso*
                                  #CONFIG.sso_region|sso_start_url cannot differ from OPTS.sso*

OPTS.client                       #SSOClient
OPTS.clientConfig                 #COPTS for SSOClient

                                  ┌─────────────┐
                                  │   SSO CLI   │
                                  └─────────────┘

aws configure sso                 #Like `aws configure ...` but for CONFIG.sso_*
--no-browser                      #Do not open browser automatically

aws configure sso-session         #Like `aws configure ...` but for SSO_CONFIG.*

                                  ┌──────────────┐
                                  │   HTTP SDK   │
                                  └──────────────┘

@aws-sdk/credential-provider-http
fromHttp([OPTS])->CREDS_OBJ_FUNC  #Uses HTTPS request, which should respond with OBJ:
                                  #  - AccessKeyId|SecretAccessKey|Token STR (required)
                                  #  - Expiration 'DATE' (optional)
                                  #On failure, should respond with:
                                  #  - status code 4**
                                  #  - OBJ: Code STR, Message STR
                                  #Does not use INI_CREDS|CONFIG

OPTS.credentialsFullUri           #Absolute 'URL', in browsers
OPTS.awsContainerCredentials
 FullUri
ENVVAR AWS_CONTAINER_CREDENTIALS
 _FULL_URI                        #Absolute 'URL', in Node.js
OPTS.awsContainerCredentials
 RelativeUri
ENVVAR AWS_CONTAINER_CREDENTIALS
 _RELATIVE_URI                    #Relative 'URL', in Node.js, only in ECS (relative to https://169.254.170.2)

OPTS.authorizationToken           #STR. Authorization: STR [C], in browsers
OPTS.awsContainerAuthorization
 Token
ENVVAR AWS_CONTAINER_AUTHORIZATION
 _TOKEN                           #Same but in Node.js
OPTS.awsContainerAuthorization
 TokenFile
ENVVAR AWS_CONTAINER_AUTHORIZATION
 _TOKEN_FILE                      #Same but as 'PATH'

OPTS.timeout
OPTS.maxRetries                   #Like fromInstanceMetadata()

                                  ┌─────────────┐
                                  │   EC2 SDK   │
                                  └─────────────┘

@aws-sdk/credential-providers
fromInstanceMetadata([OPTS])      #Uses EC2 instance metadata
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG
OPTS.timeout                      #NUM (in ms, def: 1000) for connection timeout
OPTS.maxRetries                   #NUM (def: 3)

                                  ┌─────────────┐
                                  │   ECS SDK   │
                                  └─────────────┘

@aws-sdk/credential-providers
fromContainerMetadata([OPTS])     #Uses ECS instance metadata
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG
OPTS.timeout
OPTS.maxRetries                   #Like fromInstanceMetadata()

                                  ┌─────────────────┐
                                  │   COGNITO SDK   │
                                  └─────────────────┘

@aws-sdk/credential-provider
 -cognito-identity
fromCognitoIdentity([OPTS])       #Uses Cognito Identity
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG
OPTS.client                       #CognitoIdentityClient
OPTS.clientConfig                 #COPTS for OPTS.client
OPTS.identityId                   #IDENTIY_ID
OPTS.customRoleArn                #ROLE_ARN
OPTS.logins.WEB_ID_DOMAIN         #'TOKEN'

fromCognitoIdentityPool([OPTS])   #Uses Cognito Identity pools
 ->CREDS_OBJ_FUNC                 #Does not use INI_CREDS|CONFIG
OPTS.*                            #Like fromCognitoIdentity(), except no OPTS.identityId
OPTS.identityPoolId               #IDENTITY_POOL_ID
OPTS.accountId                    #ACCOUNT_ID
OPTS.userIdentifier               #STR. User ID used to cache

OPTS.cache                        #CACHE
CACHE.getItem                     #FUNC('KEY')->[>]'VAL'|null
CACHE.setItem                     #FUNC('KEY', 'VAL')[->>]
CACHE.removeItem                  #FUNC('KEY')[->>]
