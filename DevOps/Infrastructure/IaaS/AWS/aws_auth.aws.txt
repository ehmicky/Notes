
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   AWS_AUTH   ┃
                                  ┗━━━━━━━━━━━━━━┛

SIGNATURE ==>                     #See its doc

                                  ┌────────────────────────┐
                                  │   CREDENTIALS CONFIG   │
                                  └────────────────────────┘

CREDS                             #~/.aws/credentials
                                  #Same format as ~/.aws/config
                                  #But with config keys meant to be confidential
                                  #Top-level keys: 'default' or 'PROFILE'

CONFIG|CREDS.aws_access_key_id
ENVVAR AWS_ACCESS_KEY_ID          #ACCESS_KEY_ID
CONFIG|CREDS.aws_secret_access_key
ENVVAR AWS_SECRET_ACCESS_KEY      #SECRET_ACCESS_KEY
CONFIG|CREDS.aws_session_token
ENVVAR AWS_SESSION_TOKEN          #SESSION_TOKEN
CONFIG|CREDS.aws_credential_scope
ENVVAR AWS_CREDENTIAL_SCOPE       #See TEMP_CREDS.CredentialScope in STS doc
CONFIG|CREDS.aws_account_id
ENVVAR AWS_ACCOUNT_ID             #'ACCOUNT_ID'

aws-vault                         #CLI tool to encrypt CREDS using an encrypted file, OS-specific keychain, pass, Yubikey
                                  #Login through temporary created ROLEs
                                  #Can also manage multiple profiles, or rotate CREDS
                                  #Not documented yet

                                  ┌─────────────────────┐
                                  │   CREDENTIALS CLI   │
                                  └─────────────────────┘

--no-sign-request                 #Do not add authorization parameters

~/.aws/cli/cache                  #Cache for authentication

aws configure export-credentials  #Print current CREDENTIALS_OBJ
--format                          #Can be:
                                  #  - 'process' (def): JSON
                                  #  - 'env': `export AWS_...=...`
                                  #  - 'env-no-export': `AWS_...=...`
                                  #  - 'powershell': `$Env:AWS_...="..."`
                                  #  - 'windows-cmd': `set AWS_...=...`

CREDENTIALS_OBJ                   #
CREDENTIALS_OBJ.Version           #'1'
CREDENTIALS_OBJ.AccessKeyId       #STR
CREDENTIALS_OBJ.SecretAccessKey   #STR
CREDENTIALS_OBJ.SessionToken      #STR
CREDENTIALS_OBJ.CredentialScope   #STR
CREDENTIALS_OBJ.AccountId         #STR
CREDENTIALS_OBJ.Expiration        #'DATE' (def: none)

                                  ┌─────────────────────┐
                                  │   CREDENTIALS SDK   │
                                  └─────────────────────┘

COPTS.credentials                 #CREDS_OBJ
                                  #Def:
                                  #  - Node.js: fromNodeProviderChain()
                                  #  - browsers: none
                                  #Cached, i.e. if multiple CLIENTs, should pass same CREDS_OBJ instance as COPTS.credentials
CREDS_OBJ.accessKeyId
CREDS_OBJ.secretAccessKey
CREDS_OBJ.sessionToken
CREDS_OBJ.credentialScope
CREDS_OBJ.accountId               #Like CONFIG.aws_*
CREDS_OBJ.expiration              #DATE. If not set: valid only once
                                  #When <5 min of DATE, automatically try to refresh

@aws-sdk/credential-providers     #Package for from*(...) methods
@aws-sdk                          #Individual package used by @aws-sdk/credential-providers
 /credential-provider-*           #Not documented yet.
                                  #Better treeshaking and smaller package size

from*(...)->FUNC()->>CREDS_OBJ    #I.e. their return value can be passed to COPTS.credentials
OPTS.logger                       #LOGGER (see AWS JavaScript doc)

createCredentialChain             #Combines multiple FUNC()->>CREDS_OBJ
 (FUNC,...)->FUNC2                #Can be any of the from*() below, or a custom FUNC()->>CREDS_OBJ
createCredentialChain(...)
 .expireAfter(NUM)->FUNC2         #Same but with CREDS_OBJ.expiration Date.now() + NUM (in ms, min 5m)
fromNodeProviderChain([OPTS])     #Tries in order: fromEnv(), fromSSO(), fromIni(), fromProcess(),
                                  #fromTokenFile(), fromHttp(), fromContainerMetadata(), fromInstanceMetadata()

fromEnv()                         #Uses ENVVARs

fromIni([OPTS])                   #Uses CONFIG|CREDS file
OPTS.clientConfig                 #COPTS for STSClient
OPTS.clientPlugins                #PLUGIN_ARR for STSClient
OPTS.profile                      #'PROFILE'
OPTS.configFilepath               #CONFIG 'PATH'
OPTS.filepath                     #CREDS 'PATH'
OPTS.mfaCodeProvider              #FUNC(MFA_DEVICE_MID)->STR. TokenCode
OPTS.ignoreCache                  #BOOL (def: false)

                                  ┌─────────────────┐
                                  │   ROLE CONFIG   │
                                  └─────────────────┘

CONFIG.role_arn
ENVVAR AWS_ROLE_ARN               #'ROLE'. Use STS AssumeRole()

CONFIG.source_profile             #'PROFILE' for a CONFIG to load, when using CONFIG.role_arn
CONFIG.credential_source          #PROFILE for a CREDS to load, when using CONFIG.role_arn
                                  #Can be:
                                  #  - 'Environment': use ENVVAR AWS_*
                                  #  - 'Ec2InstanceMetadata':
                                  #      - inside an EC2 container, use instance metadata
                                  #      - only needed when switching to another ROLE than EC2 container's one
                                  #  - 'EcsContainer': same for ECS

CONFIG.role_session_name
ENVVAR AWS_ROLE_SESSION_NAME
CONFIG.duration_seconds
CONFIG.external_id                #Like STS ASSUME_ROLE_REQ.*
CONFIG.mfa_serial                 #Like STS ASSUME_ROLE_REQ.SerialNumber

CONFIG.web_identity_token_file    #'PATH' to WEB_ID_ROLE_REQ.WebIdentityToken.
ENVVAR AWS_WEB_IDENTITY_TOKEN_FILE#Use STS AssumeRoleWithWebIdentity() instead.

                                  ┌──────────────┐
                                  │   ROLE SDK   │
                                  └──────────────┘

fromTemporaryCredentials
 ([OPTS])                         #Uses STS AssumeRole()
OPTS.params                       #PARAMS for AssumeRole()
OPTS.masterCredentials            #CREDS_OBJ for AssumeRole()
OPTS.clientConfig
OPTS.clientPlugins
OPTS.profile
OPTS.mfaCodeProvider              #Like fromIni()

                                  ┌──────────────────────┐
                                  │   WEB IDENTITY SDK   │
                                  └──────────────────────┘

fromWebToken([OPTS])              #Uses STS AssumeRoleWithWebIdentity()
OPTS.clientConfig                 #COPTS for STSClient
OPTS.roleArn
OPTS.roleSessionName
OPTS.durationSeconds
OPTS.policy
OPTS.policyArns
OPTS.providerId
OPTS.webIdentityToken             #WEB_ID_ROLE_REQ.*
OPTS.assumeRoleWithWebIdentity    #FUNC(WEB_ID_ROLE_REQ)->>WEB_ID_ROLE.Credentials (def: just calls AssumeRoleWithWebIdentity())
                                  #Can use getDefaultRoleAssumerWithWebIdentity(OBJ) to set specific WEB_ID_ROLE_REQ.* not available as OPTS.*

fromTokenFile([OPTS])             #Like fromWebToken() but passing webIdentityToken as a 'PATH' instead of as a STR
OPTS.*                            #Like fromWebToken()
OPTS.webIdentityTokenFile         #'PATH'

                                  ┌────────────────┐
                                  │   SSO CONFIG   │
                                  └────────────────┘

CONFIG.sso_*                      #IAM identity center config
CONFIG.sso_account_id             #ACCOUNT_ID
CONFIG.sso_role_name              #'ROLE'

CONFIG.sso_session                #'SSO_PROFILE'
[sso-session SSO_PROFILE]         #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region             #"REGION"
SSO_CONFIG.sso_start_url          #URL
SSO_CONFIG.sso_registration_scopes#"sso:account:..."

                                  ┌─────────────┐
                                  │   SSO CLI   │
                                  └─────────────┘

aws configure sso                 #Like `aws configure ...` but for CONFIG.sso_*
--no-browser                      #Do not open browser automatically

aws configure sso-session         #Like `aws configure ...` but for SSO_CONFIG.*

                                  ┌─────────────┐
                                  │   SSO SDK   │
                                  └─────────────┘

fromSSO([OPTS])                   #Uses Identity Center
OPTS.client                       #SSOClient
OPTS.clientConfig                 #COPTS for SSOClient
OPTS.configFilePath|filepath      #Like fromIni()
OPTS.ssoAccountId
OPTS.ssoRoleName
OPTS.ssoSession
OPTS.ssoRegion
OPTS.ssoStartUrl                  #Like [SSO_]CONFIG.sso_*

                                  ┌────────────────────┐
                                  │   PROCESS CONFIG   │
                                  └────────────────────┘

CONFIG.credential_process         #'PROGRAM [--FLAGS...]' to get credentials from.
                                  #Must print on stdout a CREDENTIALS_OBJ (see above) as JSON

                                  ┌─────────────────┐
                                  │   PROCESS SDK   │
                                  └─────────────────┘

fromProcess([OPTS])               #Uses CONFIG.credential_process
OPTS.configFilepath
OPTS.filepath
OPTS.ignoreCache                  #Like fromIni()

                                  ┌──────────────┐
                                  │   HTTP SDK   │
                                  └──────────────┘

fromHttp([OPTS])                  #Uses HTTPS request, which should respond with CREDS_OBJ
                                  #  - CamelCase'd
                                  #  - with also CREDS_OBJ.AccountId 'ACCOUNT_ID' (optional)
OPTS.credentialsFullUri           #'URL', in browsers (absolute)
OPTS.awsContainer
 CredentialsFull|RelativeUri
ENVVAR AWS_CONTAINER_
 CREDENTIALS_FULL|RELATIVE_URI    #'URL', in Node.js (absolute|relative)
OPTS.authorizationToken           #STR, set as Authorization: STR [C], in browsers
OPTS.awsContainer
 AuthorizationToken
ENVVAR AWS_CONTAINER_
 AUTHORIZATION_TOKEN              #Same but in Node.js
OPTS.awsContainer
 AuthorizationTokenFile
ENVVAR AWS_CONTAINER_
 AUTHORIZATION_TOKEN_FILE         #Same but as 'PATH'
OPTS.timeout
OPTS.maxRetries                   #Like fromContainerMetadata()

                                  ┌─────────────────┐
                                  │   COGNITO SDK   │
                                  └─────────────────┘

fromCognitoIdentity([OPTS])       #Uses Cognito Identity
OPTS.client                       #CognitoIdentityClient
OPTS.clientConfig                 #COPTS for OPTS.client
OPTS.identityId                   #IDENTIY_ID
OPTS.customRoleArn                #ROLE_ARN
OPTS.logins.WEB_ID_DOMAIN         #'TOKEN'

fromCognitoIdentityPool
 ([OPTS])                         #Uses Cognito Identity pools
OPTS.client
OPTS.clientConfig
OPTS.customRoleArn
OPTS.logins                       #Like fromCognitoIdentity()
OPTS.identityPoolId               #IDENTITY_POOL_ID
OPTS.accountId                    #ACCOUNT_ID
OPTS.userIdentifier               #STR. User ID used to cache
OPTS.cache                        #OBJ:
                                  #  - getItem('KEY')->[>]'VAL'|null
                                  #  - setItem('KEY', 'VAL')[->>]
                                  #  - removeItem('KEY')[->>]

                                  ┌──────────────────────┐
                                  │   EC2 METADATA SDK   │
                                  └──────────────────────┘

fromContainerMetadata([OPTS])     #Uses EC2 instance metadata
OPTS.timeout                      #NUM (in ms, def: 1000) for connection timeout
OPTS.maxRetries                   #NUM (def: 0)

fromInstanceMetadata([OPTS])      #Uses ECS instance metadata
OPTS.timeout
OPTS.maxRetries                   #Like fromContainerMetadata()
