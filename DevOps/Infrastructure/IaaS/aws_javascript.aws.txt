
                  
   AWS JAVASCRIPT  
                  



TODO ==>
  - https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/welcome.html

VERSION ==>                   #3.309.0
                              #For browsers/Node.js

SEE ALSO ==>                  #Main AWS doc

CONFIG
CREDS
ENVVARs                       #See AWS config doc

ENVVAR AWS_SDK_LOAD_CONFIG    #If 'true', loads CONFIG file

@aws-sdk/client-SERVICE       #Main packages

new SERVICEClient([COPTS])    #CLIENT
new ACTIONCommand([PARAMS])   #COMMAND
CLIENT.send(COMMAND[, SOPTS])
 ->PROMISE_RESP               #Perform an ACTION

new SERVICE([COPTS])          #OLD_CLIENT
                              #Inherits from CLIENT, i.e. can be used anywhere CLIENT can
OLD_CLIENT.ACTION
 ([PARAMS[, SOPTS]])          #Perform an ACTION
 ->PROMISE_RESP               #Unlike CLIENT, cannot treeshake

CLIENT.destroy()              #Stops any underlying sockets

CLIENT.config                 #Normalized CONFIG|CREDS OBJ

COPTS.*                       #Most VAL can also be a FUNC()->[PROMISE_]VAL

COPTS.region
COPTS.useDualstackEndpoint
COPTS.useFipsEndpoint
COPTS.retryMode
COPTS.maxAttempts             #Like CONFIG.*

COPTS.credentials             #CREDS_OBJ
                              #Def:
                              #  - Node.js: fromEnv() and fromIni()
                              #  - browsers: none
CREDS_OBJ.accessKeyId
CREDS_OBJ.secretAccessKey
CREDS_OBJ.sessionToken        #Like CONFIG.aws_*
CREDS_OBJ.expiration          #DATE

@aws-sdk/credential-providers #Package for following methods
@aws-sdk                      #Individual package used by @aws-sdk/credential-providers
 /credential-provider-*       #Not documented yet.
                              #Better treeshaking and smaller package size

fromEnv()->CREDS_OBJ          #Uses ENVVARs

fromIni([OPTS])->CREDS_OBJ    #Uses CONFIG|CREDS file
OPTS.clientConfig             #COPTS for STSClient
OPTS.clientPlugins            #PLUGIN_ARR for STSClient
OPTS.profile                  #'PROFILE'
OPTS.configFilepath           #CONFIG 'PATH'
OPTS.filepath                 #CREDS 'PATH'
OPTS.mfaCodeProvider          #FUNC(MFA_DEVICE_MID)->STR. TokenCode
OPTS.ignoreCache              #BOOL (def: false)

fromProcess([OPTS])->CREDS_OBJ#Uses CONFIG.credential_process
OPTS.profile
OPTS.configFilepath
OPTS.filepath
OPTS.ignoreCache              #Like fromIni()

fromTemporaryCredentials
 ([OPTS])->CREDS_OBJ          #Uses STS AssumeRole()
OPTS.params                   #PARAMS for AssumeRole()
OPTS.masterCredentials        #CREDS_OBJ for AssumeRole()
OPTS.clientConfig
OPTS.clientPlugins
OPTS.mfaCodeProvider          #Like fromIni()

fromWebToken([OPTS])
 ->CREDS_OBJ                  #Uses STS AssumeRoleWithWebIdentity()
OPTS.clientConfig             #COPTS for STSClient
OPTS.roleArn
OPTS.roleSessionName
OPTS.durationSeconds
OPTS.policy
OPTS.policyArns
OPTS.providerId
OPTS.webIdentityToken         #WEB_ID_ROLE_REQ.*

fromTokenFile([OPTS])
 ->CREDS_OBJ                  #Like fromWebToken() but passing webIdentityToken as a 'PATH' instead of as a STR
OPTS.*                        #Like fromWebToken()
OPTS.webIdentityTokenFile     #'PATH'

fromSSO([OPTS])->CREDS_OBJ    #Using Identity Center
OPTS.client                   #SSOClient
OPTS.clientConfig             #COPTS for SSOClient
OPTS.ssoAccountId
OPTS.ssoRoleName
OPTS.ssoSession
OPTS.ssoRegion
OPTS.ssoStartUrl              #Like [SSO_]CONFIG.sso_*

fromContainerMetadata([OPTS])
 ->CREDS_OBJ                  #Uses EC2 instance metadata
OPTS.timeout                  #NUM (in ms, def: 1000) for connection timeout
OPTS.maxRetries               #NUM (def: 0)
OPTS.logger                   #LOGGER

fromInstanceMetadata([OPTS])
 ->CREDS_OBJ                  #Uses ECS instance metadata
OPTS.timeout
OPTS.maxRetries
OPTS.logger                   #Like fromContainerMetadata()

fromCognitoIdentity([OPTS])
 ->CREDS_OBJ                  #Uses Cognito Identity
OPTS.client                   #CognitoIdentityClient
OPTS.clientConfig             #COPTS for OPTS.client
OPTS.identityId               #IDENTIY_ID
OPTS.customRoleArn            #ROLE_ARN
OPTS.logins.WEB_ID_DOMAIN     #'TOKEN'

fromCognitoIdentityPool
 ([OPTS])->CREDS_OBJ          #Uses Cognito Identity pools
OPTS.client
OPTS.clientConfig
OPTS.customRoleArn
OPTS.logins                   #Like fromCognitoIdentity()
OPTS.identityPoolId           #IDENTITY_POOL_ID
OPTS.accountId                #ACCOUNT_ID
OPTS.userIdentifier           #STR. User ID used to cache
OPTS.cache                    #OBJ:
                              #  - getItem('KEY')->[PROMISE_]'VAL'|null
                              #  - setItem('KEY', 'VAL')[->PROMISE]
                              #  - removeItem('KEY')[->PROMISE]

COPTS.customUserAgent         #STR|USER_AGENTS. User-Agent [C]
USER_AGENTS                   #['NAME'[, VERSION]]_ARR

COPTS.endpoint                #'URL'|ENDPOINT
ENDPOINT.url                  #URL
ENDPOINT.headers              #OBJ
ENDPOINT.properties           #OBJ
ENDPOINT[.properties]
 .authSchemes                 #AUTH_SCHEME_ARR

COPTS.logger                  #LOGGER
LOGGER.LEVEL(VAL,...)         #Like console.LEVEL(VAL...)

COPTS.requestHandler          #REQ_HANDLER. How HTTP requests are done.

@aws-sdk/node-http-handler    #Use Node HTTP
new NodeHttpHandler([NHOPTS]) #REQ_HANDLER
NHOPTS.http[s]Agent           #AGENT

@aws-sdk/node-http2-handler   #Use Node HTTP2
new NodeHttp2Handler
 ([N2HOPTS])                  #REQ_HANDLER
N2HOPTS.sessionTimeout        #Node HTTP2_SESSION.setTimeout()
N2HOPTS.maxConcurrentStreams  #Like Node HTTP2 maxConcurrentStreams
N2HOPTS
 .disableConcurrentStreams    #BOOL (def: false)

@aws-sdk/fetch-http-handler   #Use fetch()
new FetchHttpHandler([FHOPTS])#REQ_HANDLER

@aws-sdk/xhr-http-handler     #Use XHR
new XhrHttpHandler([XHOPTS])  #REQ_HANDLER

*HOPTS|SOPTS.requestTimeout   #NUM (in ms) to timeout HTTP connection
SOPTS.abortSignal             #ABORT_SIGNAL

RESP.$metadata                #OBJ

paginateList*(POPTS[, PARAMS])
 ->ASYNC_ITERATOR             #Like List*() but return ASYNC_ITERATOR

POPTS.client                  #CLIENT
POPTS.pageSize                #NUM from 'MaxItems' pagination
                              #Def: SERVICE-specific
POPTS.startingToken           #STR from 'NextToken' pagination
POPTS.stopOnSameToken         #BOOL (def: false). If NextToken does not change, stop.
                              #This happens for some SERVICEs with infinite collections, like CloudWatchLogs events

waitUntilWAITComplete         #Wait until WAIT complete
 (WAIT_OPTS, COMMAND_OPTS)    #COMMAND_OPTS are of the underlying COMMAND
 ->PROMISE_OBJ                #Returns OBJ:
                              #  - state STR among:
                              #     - 'SUCCESS'
                              #     - 'FAILURE': condition failed
                              #     - 'TIMEOUT': WAIT_OPTS.maxWaitTime
                              #     - 'ABORTED': WAIT_OPTS.abortSignal
                              #     - 'RETRY': too many attempts (NUM is COMMAND-specific)
                              #  - reason STR
WAIT_OPTS                     #
WAIT_OPTS.client              #CLIENT
WAIT_OPTS.minDelay            #NUM (in secs, def: 30) start of exponential backoff
WAIT_OPTS.maxDelay            #NUM (in secs, def: 120) end of exponential backoff
WAIT_OPTS.maxWaitTime         #Max NUM secs total (def: none)
WAIT_OPTS.abortSignal         #ABORT_SIGNAL

MFUNC                         #(FUNC(MINPUT)->PROMISE_MOUTPUT, MCONTEXT)->FUNC2(MINPUT)->PROMISE_MOUTPUT
                              #Perform FUNC2 before any ACTION
                              #FUNC2 is created by FUNC right away

MINPUT.input                  #PARAMS. With step 'initialize'
MINPUT.request                #MREQ. With step 'serialize|finalizeRequest'
MREQ.headers                  #OBJ. HTTP headers

MOUTPUT.response              #MRES. With step 'deserialize'
MOUTPUT.output                #RESP. With step 'initialize|deserialize'

CLIENT.middlewareStack        #MSTACK
MSTACK.add(MFUNC[, MOPTS])    #Add with position based on MOPTS.step
MSTACK.addRelativeTo
 (MFUNC, MROPTS)              #Add with position based on another MFUNC2
MSTACK.remove(MFUNC|'MNAME')
 ->BOOL                       #
MSTACK.removeByTag('MTAG')
 ->BOOL                       #
MSTACK.concat(MSTACK2)
 ->MSTACK3                    #
MSTACK.clone()->MSTACK2       #
MSTACK.identify()->'MNAME'_ARR#
MSTACK.resolve                #Returns MSTACK as a single MFUNC2 of step 'initialize'
 (MFUNC, MCONTEXT)->MFUNC2    #Must pass an additional MFUNC of step 'deserialize'
                              #MCONTEXT is used in MFUNCs

MSTACK.use(PLUGIN)            #Add PLUGIN
PLUGIN.applyToStack(MSTACK)   #Main function, calling MSTACK.*

MOPTS.step                    #STR among:
                              #  - 'initialize' (def): transforming PARAMS
                              #  - 'serialize': validating PARAMS and serializing into HTTP request
                              #  - 'build': transform HTTP request
                              #  - 'finalizeRequest': final transformation of HTTP request that does not change semantics (e.g. signing)
                              #  - 'deserialize': deserialize HTTP response into RESP
MOPTS.priority                #'high', 'normal' (def) or 'low'. Priority with other MFUNCs of same MOPTS.step

MROPTS.relation               #'before|after'
MROPTS.toMiddleware           #'MNAME'

M[R]OPTS.name                 #'MNAME'. MFUNC name
M[R]OPTS.tags                 #'MTAG'_ARR. Arbitary description of MFUNC
M[R]OPTS.override             #BOOL (def: false). Override existing MFUNC if already exists

MCONTEXT.*                    #Any custom property can be set
MCONTEXT.logger               #LOGGER
MCONTEXT.userAgent            #USER_AGENTS
MCONTEXT.endpointV2           #ENDPOINT
AUTH_SCHEME                   #Authorization signature
AUTH_SCHEME.name              #'sigv4[a]'
AUTH_SCHEME.signingName       #'SERVICE'
AUTH_SCHEME.signingRegion     #'REGION'
AUTH_SCHEME.signingRegionSet  #'REGION'_ARR
MCONTEXT.currentAuthConfig    #AUTH_CONFIG
AUTH_CONFIG.in                #'header|query'. Where authorization is located
AUTH_CONFIG.name              #STR. Header|query variable name
AUTH_CONFIG.scheme            #STR

-------------------------------------

No more AWS.config

AWS                           #Main import

AWSCONFIG                     #See CLI doc
                              #Can be:
                              #  - ~/.aws/credentials: like CLI
                              #     - can also get AWSCONFIG.credentials with AWS.SharedIniFileCredentials({ profile: PROFIL })
                              #  - ENVVARs: like CLI
                              #  - AWS.config
                              #  - AWS.config.loadFromPath(AWSCONFIG_JSON_FILE)
                              #  - AWS.config.update(AWSCONFIG)

new AWS.SERVICE([AWSCONFIG])  #Returns SERVICE
                              #AWSCONFIG can take:
                              #  - params OBJ: used as default REQ_OBJ (if acceptable arguments)
                              #  - apiVersion VERSION_STR
SERVICE.config                #AWSCONFIG

--ssl-enabled                 #BOOL (def: true)
--max-retries                 #UINT (def: undefined)
--max-redirects               #UINT (def: 10)
--logger                      #OBJ, any OBJ with either .write() or log() (e.g. process.stdout or console)
--api-versions                #OBJ:
                              #  - SERVICE: VERSION_STR (or "latest" (def))
--httpOptions                 #OBJ:
                              #  - proxy URL
                              #  - agent AGENT (def: HTTP.globalAgent)
                              #  - timeout UINT
                              #  - xhrWithCredentials BOOL (def: false, browser only)
--computeChecksums            #If true (def), client computes Content-MD5 [C]

AWSCONFIG.credentials         #CREDENTIAL_OBJ:
                              #  - instantiated by:
                              #     - new AWS.Credential(ACCESS_KEY_ID, SECRET_ACCESS_KEY[, SESSION_TOKEN])
                              #     - new AWS.Credential(AWSCONFIG)
                              #  - accessKeyId|secretAccessKey|sessionToken
                              #  - expired BOOL
                              #  - expireTime DATE
                              #  - expiryWindow UINT (e.g. 15, in mins)
                              #  - needsRefresh()->BOOL
                              #  - refresh(FUNC(ERROR))
                              #  - get(FUNC(ERROR)): same but only refresh() if needsRefresh()
                              #  - Should not need it:
                              #     - automatically created from other AWSCONFIG members
                              #     - automatically refreshed
                              #Non usual credentials (e.g. different types of roles) have extra members, must do
                              #credentials = new AWS.*Credentials(...):
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:getSessionToken(OBJ) (if not OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:assumeRole(OBJ) (if OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.SAMLCredentials(OBJ) -> sts:assumeRoleWithSAML(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #   - new AWS.WebIdentityCredentials(OBJ) -> sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #   - new AWS.CognitoIdentityCredentials(OBJ) -> cognito:getOpenIdToken(OBJ) then
                              #     sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #      - CREDENTIAL_OBJ.identityId STR, CREDENTIAL_OBJ.getId(FUNC(STR))
                              #   - new AWS.EnvironmentCredentials(STR) -> uses ENVVAR STR_* (e.g. "AWS")
                              #      - CREDENTIAL_OBJ.envPrefix STR
                              #   - new AWS.FilesystemCredentials(FILE) -> uses JSON config file
                              #      - CREDENTIAL_OBJ.filename STR
                              #   - new AWS.SharedIniFileCredentials(OBJ) -> uses INI config file, with OBJ.profile and
                              #     OBJ.filename (def: "~/.aws/credentials")
                              #   - new AWS.CredentialProviderChain(ARR): uses several AWS.*Credentials as a chain
                              #   - new AWS.EC2MetadataCredentials(OBJ)

SERVICE.ACTION([REQ_OBJ]      #  - if no FUNC, returns AWSREQ:
[, FUNC(ERROR, RES_OBJ)])     #     - must use AWSREQ.send()
                              #     - event handlers:
                              #        - success FUNC(ALL_OBJ), where ALL_OBJ:
                              #           - data RES_OBJ
                              #           - error ERROR
                              #           - request.params REQ_OBJ
                              #           - requestId STR
                              #           - redirectCount NUM
                              #           - retryCount NUM: automatically done by SDK
                              #           - hasNextPage() BOOL and nextPage(FUNC(ERROR, RES_OBJ)): pagination
                              #           - httpResponse:
                              #              - body STR
                              #              - headers OBJ
                              #              - statusCode NUM
                              #              - stream ISTREAM
                              #        - error FUNC(ERROR, ALL_OBJ)
                              #        - complete FUNC(ALL_OBJ): either success or error
                              #        - httpData FUNC(CHUNK, ALL_OBJ): for streaming big answers
                              #     - createReadStream() -> ISTREAM, in order to ISTREAM.pipe(OSTREAM)
                              #     - abort()
                              #     - httpRequest OBJ:
                              #        - body STR
                              #        - headers OBJ
                              #        - method STR
                              #        - path STR
                              #        - endpoint OBJ: host, hostname, href, port, protocol
                              #  - ACTION is same case except first letter is lowercase
                              #  - REQ_OBJ:
                              #     - any query variable, request body OBJ.VAR or request header (without potential x-amz-)
                              #     - Body BUFFER|TYPEDARRAY|BLOB|STR|ISTREAM for request body that is not OBJ
                              #       (body for Glacier)
                              #     - DryRun BOOL (def: false): always available
                              #  - REQ_OBJ|RES_OBJ:
                              #     - VAL_ARR -> ARR:
                              #        - VAR.NUM. -> VAR_ARR (with extra s)
                              #        - <KEYSet|List><VAR></VAR>...</KEYSet|List> -> KEY_ARR (without VAR level)
                              #  - RES_OBJ:
                              #     - as opposed to request body, strip:
                              #        - first level of response (englobbing XML tag), often { KEYResponse: OBJ } -> OBJ
                              #        - second level sometimes, often { KEYResponse: { KEYResult: OBJ } } -> OBJ
                              #     - otherwise as is (but JSON not XML)
SERVICE.apiVersions           #STR_ARR
SERVICE.endpoint              #URL
SERVICE.waitFor('STATE',      #  - Only fires FUNC() once a condition happened
REQ_OBJ, FUNC(ERROR, RES_OBJ))#  - STATE depends on SERVICE
                              #  - polls by calling an underlying SERVICE.ACTION(REQ_OBJ) every NUM secs (depends on SERVICE),
                              #    and checks results according to STATE

JAVASCRIPT BROWSER SDK ==>    #Like Node.js but:
                              #  - Script aws-sdk-VERSION.min.js -> window.AWS
                              #  - only has SERVICE: S3, SNS, STS, SQS, Kinesis, CloudWatch, DynamoDB
                              #  - to create own SDK, must git clone, then node dist-tools/browser-builder SERVICE,...,
                              #    optionally with ENVVAR MINIMY=1

