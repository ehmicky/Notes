
              
   AWS_CONFIG  
              



GOAL ==>                      #Common config for all AWS clients, except REST API

CONFIGURATION ==>             #Can be (in priority):
                              #  - CLIENT-specific flags (CLI flags, programmatic options, etc.)
                              #  - ENVVAR
                              #  - CONFIG
                              #  - CREDS
                              #  - ENVVAR AWS_CONFIG_FILE|AWS_SHARED_CREDENTIALS_FILE 'PATH'
[VAR1]
VAR2 =
  ...                         #Nesting in INI file

CONFIG                        #~/.aws/config INI_FILE
                              #Top-level keys: 'default' or 'profile PROFILE'
                              #Values: OBJ

CONFIG.profile                #Pick top-level key in CONFIG|CREDS
ENVVAR AWS_PROFILE            #Def: ENVVAR AWS_DEFAULT_PROFILE, or "default"
                              #Similar purpose as ROLEs, i.e. different credentials|configs

CREDS                         #~/.aws/credentials INI_FILE
                              #Same format as ~/.aws/config
                              #But with config keys meant to be confidential
                              #Top-level keys: 'default' or 'PROFILE'
CONFIG|CREDS.aws_access_key_id
ENVVAR AWS_ACCESS_KEY_ID      #ACCESS_KEY_ID
CONFIG|CREDS
 .aws_secret_access_key
ENVVAR AWS_SECRET_ACCESS_KEY  #SECRET_ACCESS_KEY
CONFIG|CREDS.aws_session_token
ENVVAR AWS_SESSION_TOKEN      #SESSION_TOKEN

CONFIG.role_arn
ENVVAR AWS_ROLE_ARN           #'ROLE'. Use STS AssumeRole()
CONFIG.source_profile         #'PROFILE' for a CONFIG to load, when using CONFIG.role_arn
CONFIG.credential_source      #PROFILE for a CREDS to load, when using CONFIG.role_arn. Can be:
                              #  - 'Environment': use ENVVAR AWS_*
                              #  - 'Ec2InstanceMetadata':
                              #      - inside an EC2 container, use instance metadata
                              #      - only needed when switching to another ROLE than EC2 container's one
                              #  - 'EcsContainer': same for ECS
CONFIG.role_session_name
ENVVAR AWS_ROLE_SESSION_NAME  #'ASSUMED_ROLE'
CONFIG.mfa_serial             #MFA_DEVICE_MID
CONFIG.duration_seconds       #NUM (def: 1h)
CONFIG.external_id            #STR. Like STS externalId
CONFIG.web_identity_token_file
ENVVAR
 AWS_WEB_IDENTITY_TOKEN_FILE  #'PATH' to WebIdentityToken. Use STS AssumeRoleWithWebIdentity() instead.

CONFIG.sso_*                  #IAM identity center config
CONFIG.sso_account_id         #ACCOUNT_ID
CONFIG.sso_role_name          #"ROLE"

CONFIG.sso_session            #"SSO_PROFILE"
[sso-session SSO_PROFILE]     #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region         #"REGION"
SSO_CONFIG.sso_start_url      #URL
SSO_CONFIG
 .sso_registration_scopes     #"sso:account:..."

CREDENTIALS_OBJ               #
CREDENTIALS_OBJ.Version       #'1'
CREDENTIALS_OBJ.AccessKeyId   #STR
CREDENTIALS_OBJ
 .SecretAccessKey             #STR
CREDENTIALS_OBJ.SessionToken  #STR
CREDENTIALS_OBJ.Expiration    #'DATE' (def: none)

CONFIG.credential_process     #'PROGRAM [--FLAGS...]' to get credentials from.
                              #Must print on stdout a CREDENTIALS_OBJ as JSON

CONFIG.parameter_validation   #BOOL (def: true). Validate request parameters
                              #Can disable for performance.

CONFIG.region
ENVVAR AWS_DEFAULT_REGION     #'REGION|aws_global'
CONFIG.use_fips_endpoint
ENVVAR AWS_USE_FIPS_ENDPOINT  #BOOL (def: false)
CONFIG.use_dualstack_endpoint
ENVVAR
 AWS_USE_DUALSTACK_ENDPOINT   #BOOL (def: false)
CONFIG.
 endpoint_discovery_enabled
ENVVAR
 AWS_ENABLE_ENDPOINT_DISCOVERY#BOOL (def: false). Automatically find the right endpoint URL
CONFIG.api_versions.SERVICE   #'SVERSION' (def: last)

CONFIG.retry_mode             #Either:
ENVVAR AWS_RETRY_MODE         #  - 'legacy'
                              #      - retry on socket errors and throttling
                              #      - exponential backoff multiplying by 2
                              #  - 'standard' (def): same but also:
                              #      - retry on quotas and timeouts
                              #      - exponential backoff max 20s
                              #  - 'adaptive': same but also:
                              #      - backoff is error-specific
CONFIG.max_attempts
ENVVAR AWS_MAX_ATTEMPTS       #NUM of retries (def: 5 with retry_mode 'legacy', 3 otherwise)

CONFIG.tcp_keepalive          #BOOL (def: false).

CONFIG.ca_bundle
ENVVAR AWS_CA_BUNDLE          #STR (PEM format). Override CA certificate bundle
