
           
   AWS CLI  
           



TODO ==>
  - https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html
  - https://docs.aws.amazon.com/sdkref/latest/guide/overview.html
  - https://jmespath.org/tutorial.html
  - aws-shell

VERSION ==>                   #2.11.10
                              #Written in Python

SEE ALSO ==>                  #Main AWS doc

INSTALL ==>                   #Download and run install script
                              #Does not automatically update

DOCKER IMAGE ==>              #Available on Docker Hub or ECS

SERVICES ==>                  #Most are available, except some within last 6 months
                              #Some SERVICEs have CLI-only commands

complete -C aws_completer aws #Adds autocompletion
                              #Binary installed alongside `aws`

CONFIGURATION ==>             #Can be (in priority):
                              #  - CLI flags
                              #  - ENVVAR
                              #  - CONFIG:
                              #     - ~/.aws/config INI_FILE
                              #     - top-level keys: 'default' or 'profile PROFILE'
                              #     - value: OBJ
                              #  - CREDS
                              #     - ~/.aws/credentials INI_FILE
                              #     - same format as ~/.aws/config
                              #     - but with config keys meant to be confidential
                              #     - top-level keys: 'default' or 'PROFILE'
                              #  - ENVVAR AWS_CONFIG_FILE|AWS_SHARED_CREDENTIALS_FILE 'PATH'
[VAR1]
VAR2 =
  ...                         #Nesting in INI file

aws configure ...             #Only for CONFIG|CREDS
aws configure                 #Create CONFIG|CREDS interactively
aws configure list            #
aws configure get
 [PROFILE.]VAR                #
aws configure set
 [PROFILE.]VAR VAL            #

CONFIG.profile                #Pick top-level key in CONFIG|CREDS
--profile PROFILE             #Def: ENVVAR AWS_DEFAULT_PROFILE, or "default"
ENVVAR AWS_PROFILE            #Similar purpose as ROLEs, i.e. different credentials|configs
aws configure list-profiles   #Print all PROFILEs

aws configure import          #Set multiple PROFILEs using a CSV file with columns: 'PROFILE', ACCESS_KEY_ID, SECRET_ACCESS_KEY
                              #That CSV file can be downloaded from UI
--csv                         #'PATH'
--profile-prefix              #STR to prepend to all 'PROFILE'
--skip-invalid                #BOOL (def: false). Do not fail if invalid

CONFIG|CREDS.aws_access_key_id
ENVVAR AWS_ACCESS_KEY_ID      #ACCESS_KEY_ID
CONFIG|CREDS
 .aws_secret_access_key
ENVVAR AWS_SECRET_ACCESS_KEY  #SECRET_ACCESS_KEY
CONFIG|CREDS.aws_session_token
ENVVAR AWS_SESSION_TOKEN      #SESSION_TOKEN
--no-sign-request             #Do not add authorization parameters

CONFIG.role_arn
ENVVAR AWS_ROLE_ARN           #'ROLE'. Use STS AssumeRole()
CONFIG.source_profile         #'PROFILE' for a CONFIG to load, when using CONFIG.role_arn
CONFIG.credential_source      #PROFILE for a CREDS to load, when using CONFIG.role_arn. Can be:
                              #  - 'Environment': use ENVVAR AWS_*
                              #  - 'Ec2InstanceMetadata':
                              #      - inside an EC2 container, use instance metadata
                              #      - only needed when switching to another ROLE than EC2 container's one
                              #  - 'EcsContainer': same for ECS
CONFIG.role_session_name
ENVVAR AWS_ROLE_SESSION_NAME  #'ASSUMED_ROLE'
CONFIG.mfa_serial             #MFA_DEVICE_MID
CONFIG.duration_seconds       #NUM (def: 1h)
CONFIG.external_id            #STR. Like STS externalId
CONFIG.web_identity_token_file
ENVVAR
 AWS_WEB_IDENTITY_TOKEN_FILE  #'PATH' to WebIdentityToken. Use STS AssumeRoleWithWebIdentity() instead.

aws configure sso             #Like `aws configure` but for CONFIG.sso_*
--no-browser                  #Do not open browser automatically

aws configure sso-session     #Like `aws configure` but for SSO_CONFIG.*

CONFIG.sso_*                  #IAM identity center config
CONFIG.sso_account_id         #ACCOUNT_ID
CONFIG.sso_role_name          #"ROLE"

CONFIG.sso_session            #"SSO_PROFILE"
[sso-session SSO_PROFILE]     #Top-level key: like PROFILE but for SSO_CONFIG
SSO_CONFIG.sso_region         #"REGION"
SSO_CONFIG.sso_start_url      #URL
SSO_CONFIG
 .sso_registration_scopes     #"sso:account:..."

CREDENTIALS_OBJ               #
CREDENTIALS_OBJ.Version       #'1'
CREDENTIALS_OBJ.AccessKeyId   #STR
CREDENTIALS_OBJ
 .SecretAccessKey             #STR
CREDENTIALS_OBJ.SessionToken  #STR
CREDENTIALS_OBJ.Expiration    #'DATE' (def: none)

CONFIG.credential_process     #'PROGRAM [--FLAGS...]' to get credentials from.
                              #Must print on stdout a CREDENTIALS_OBJ as JSON
aws configure
 export-credentials           #Print current CREDENTIALS_OBJ
--format                      #Can be:
                              #  - 'process' (def): JSON
                              #  - 'env': `export AWS_...=...`
                              #  - 'env-no-export': `AWS_...=...`
                              #  - 'powershell': `$Env:AWS_...="..."`
                              #  - 'windows-cmd': `set AWS_...=...`

aws SERVICE ACTION            #Performs an action
                              #ACTION|REQ_VAR: lowercase dashes instead of camelcase

--REQ_VAR VAL                 #
--REQ_OBJ_VAR
 KEY=VAL,KEY2=VAL2,...        #
--REQ_OBJ_ARR_VAR
 KEY=VAL,...,KEY2=VAL2,...    #
--REQ_ARR_VAR VAL VAL2 ...    #
--[no-]REQ_BOOL_VAR           #
--REQ_VAR file[b]://PATH      #Use file content
                              #PATH can be relative
                              #When binary:
                              #  - file://PATH: uses --cli-binary-format value
                              #  - fileb://PATH: uses raw input
NESTED VAL ==>                #Can be {VAR=VAL,...}
--cli-input-json
--REQ_VAR JSON                #
--cli-input-yaml
--REQ_VAR YAML                #
--generate-cli-skeleton       #Generate sample 'input' (def) or 'output'

CONFIG.parameter_validation   #BOOL (def: true). Validate request parameters
                              #Can disable for performance.
CONFIG.cli_auto_prompt        #Interactive prompt for input|params
ENVVAR AWS_CLI_AUTO_PROMPT    #Can be 'on' or 'on-partial' (only on incomplete|erroneous commands)
--[no-]cli-auto-prompt        #BOOL (def: false)

CONFIG.cli_history            #"disabled" (def) or "enabled"
aws history list              #Show previous commands, including ids, date, args, return code
aws history show ID           #Show previous command in full
--include|exclude             #'EVENT,...'
--format                      #Always "detailed"

CONFIG.region
--region
ENVVAR AWS_DEFAULT_REGION     #'REGION|aws_global'
CONFIG.use_fips_endpoint
ENVVAR AWS_USE_FIPS_ENDPOINT  #BOOL (def: false)
--endpoint-url                #'SERVICE_FULL_DOMAIN' (def: guessed)

--no-paginate                 #BOOL (def: false). Only return first page.
--query                       #Filter with FILTER (JMESPath):
                              #  - VAR.VAR2
                              #  - VAR[NUM]
                              #  - VAR[*]: all ARR members
                              #  - VAR.{NEWVAR:OLDVAR,...}:
                              #     - like VAR.OLDVAR, but rename to VAR.NEWVAR
                              #     - OLDVAR can be FILTER
                              #  - VAR.[VAR2...]: same but as ARR (no key names)
--debug                       #BOOL (def: false). Debug logging

CONFIG.retry_mode             #Either:
ENVVAR AWS_RETRY_MODE         #  - 'legacy'
                              #      - retry on socket errors and throttling
                              #      - exponential backoff multiplying by 2
                              #  - 'standard' (def): same but also:
                              #      - retry on quotas and timeouts
                              #      - exponential backoff max 20s
                              #  - 'adaptive': same but also:
                              #      - backoff is error-specific
CONFIG.max_attempts
ENVVAR AWS_MAX_ATTEMPTS       #NUM of retries (def: 5 with retry_mode 'legacy', 3 otherwise)

CONFIG.output
--output
ENVVAR AWS_DEFAULT_OUTPUT     #'json' (def), 'yaml[-stream]', 'text', 'table'
CONFIG.cli_timestamp_format   #How timestamp are output:
                              #  - 'iso8601' (def)
                              #  - 'wire': as received from the API
--cli-binary-format           #How binary values are input|output:
                              #  - 'base64': base64 input|output
                              #  - 'raw-in-base64-out': raw input, base64 output
--color                       #'auto' (def) or 'on|off'
CONFIG.cli_pager
--no-cli-pager                #BOOL (def: true). Whether to use `less`
ENVVAR AWS_PAGER              #'PROGRAM [--FLAG...]'

CONFIG.tcp_keepalive          #BOOL (def: false).
--cli-connect-timeout         #NUM (secs, def: 60). Timeout for connection
--cli-read-timeout            #NUM (secs, def: 60). Timeout, excluding connection

--no-verify-ssl               #BOOL (def: false)
CONFIG.ca_bundle
--ca-bundle
ENVVAR AWS_CA_BUNDLE          #STR (PEM format). Override CA certificate bundle

ENVVAR LC_ALL                 #Used
ENVVAR AWS_CLI_FILE_ENCODING  #Def: 'UTF-8'

ENVVAR HTTP[S]_PROXY
ENVVAR NO_PROXY               #Can be used

~/.aws/cli/cache              #Cache for authentication
