
       
   EC2  
       



TO DOCUMENT ==>
  - aws:Ec2InstanceSourceVpc, aws:Ec2InstanceSourcePrivateIPv4 CONDITION_KEYs
  - VPC:
     - STS: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_sts_vpce.html
     - Lambda:
        - https://docs.aws.amazon.com/lambda/latest/dg/foundation-networking.html
        - https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html
        - https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc-endpoints.html
     - CloudWatch: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-and-interface-VPC.html
  - REQ.DryRun BOOL. Checks authorization without doing anything. Returns DryRunOperation if no problem, UnauthorizedOperation otherwise.
  - CloudWatch:
     - CloudWatch agent:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metrics-Explorer.html
  - AWS CLI:
     - CREDS.metadata_service_timeout + ENVVAR AWS_METADATA_SERVICE_TIMEOUT
     - CREDS.metadata_service_num_attempts + ENVVAR AWS_METADATA_SERVICE_NUM_ATTEMPTS
     - ENVVAR AWS_EC2_METADATA_DISABLED
     - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-metadata.html
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-imds-credentials.html
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-ec2-instance-metadata.html
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-imds-client.html
  - Pulumi:
     - AZ:
        - https://www.pulumi.com/registry/packages/aws-native/api-docs/getazs/
        - https://www.pulumi.com/registry/packages/aws/api-docs/getavailabilityzone/
        - https://www.pulumi.com/registry/packages/aws/api-docs/getavailabilityzones/
     - IP ranges:
        - https://www.pulumi.com/registry/packages/aws/api-docs/getipranges/
        - https://www.pulumi.com/registry/packages/aws-native/api-docs/cidr/
     - security groups:
        - https://www.pulumi.com/registry/packages/aws/api-docs/lambda/function: replaceSecurityGroupsOnDestroy, replacementSecurityGroupIds

VERSION ==>                   #2014/07/30

GOAL ==>                      #Remote virtual machines.
                              #Concepts:
                              #  - Image/AMI: instance memory state including OS (like a Virtual machine image), e.g.
                              #    boot partition (usually /dev/sda1)
                              #  - Instance type: hardware configuration (CPU, memory, storage, network capacity)
                              #  - Instance: running image copy, with a specific instance type
                              #     - Dedicated instance: instance that run on a computer only dedicated to it (for security)
                              #     - PlacementGroup: for faster connection between related instances
                              #  - Volume: virtual hard drive.
                              #     - Can be persistent (EBS) or not (instance stores).
                              #     - Can do snapshots.
                              #     - Can import/export from Xen, Hyper-V or VMWare
                              #Networking:
                              #  - VPC (Virtual Private Cloud): EC2 networking layer (also applied on ELB, RDS, EMR, etc.),
                              #    below in this doc
                              #  - Enhanced networking: higher packet per second, lower network latency
                              #Marketplace:
                              #  - can buy reserved instances AMIs from 1 month to 36 months (instead of normal AMIs)
                              #Connection:
                              #  - Automatically launch sshd, with ~/.ssh/authorized_keys with the created public keys
                              #  - Username depends on OS: ec2-user (Amazon Linux, Fedora Red Hat), root (Red Hat, Suse),
                              #    ubuntu, fedora. Can sudo without password
                              #  - Must connect to Public IP/DNS
                              #  - Must allow SSH (SecurityGroup)

INSTANCE TYPES ==>            #Differences:
                              #  - Price
                              #  - CPU, RAM, Storage, Network performance
                              #  - CPU:
                              #     - Power is calculated in ECU.
                              #     - vCPU is number of CPUs (ECU is vCPU-independent)
                              #     - Intel Xeon, with features:
                              #        - AVX: for floating point extensions
                              #        - Boost technology: faster CPU
                              #Instance size:
                              #  - Each type has sizes, which doubles memory, vCPU, ECU, instance storage, for about twice the
                              #    price: "micro", "small", "medium", "large", "[2|4|8]xlarge"
                              #      - EBS-optimized only on *xlarge
                              #      - instance storage sometimes double number of instance storage, sometimes double GB of
                              #        instance storages
                              #      - max total MB/s for all volumes depends on size, 30MB/s for large, doubles for every size
                              #      - max total MB/s for any single volume is 128MB/s
                              #Types
                              #  - Compare here pseudo-"large" instances, but types have different size ranges which might
                              #    not include "large"
                              #  - t2.large:
                              #     - General purpose / low-traffic with some bursts
                              #     - no instance storage, 3 ECU (burst), 8GB RAM, very low network
                              #        - Burstable CPU: gets 48 CPU credits/hours (half for each lower size)
                              #        - 1 CPU credit == 3.5 ECU for one minute
                              #        - max 1150 credits (24 hours) (half for each lower size)
                              #     - micro to medium
                              #     - only on-demand
                              #  - c3.large:
                              #     - CPU optimized
                              #     - same price as t2.large
                              #     - 32GB instance storage, 7 ECU, 3.75GB RAM, low network (enhanced networking supported)
                              #        - 2x16GB large, 2x*GB after
                              #     - large to 8xlarge
                              #  - m3.large:
                              #     - Memory optimized
                              #     - 25% more expensive
                              #     - 32GB instance storage, 6.5 ECU, 7.5GB RAM, average network
                              #        - 1x32GB large, 2x40 xlarge, 2x80 2xlarge
                              #     - medium to 2xlarge
                              #  - g2.large:
                              #     - GPU optimized (3D, video, game)
                              #        - must install the NVIDIA driver manually
                              #     - 60% more expensive
                              #     - 15GB instance storage, 6.5 ECU, 3.2GB RAM, average network
                              #        - 1x60GB 2xlarge
                              #     - 2xlarge
                              #     - no Intel AVX, Boost technology, but good GPU
                              #  - r3.large:
                              #     - High memory optimized
                              #     - 60% more expensive
                              #     - 32GB instance storage, 6.5 ECU, 15.25GB RAM, low network (enhanced networking)
                              #        - 1x32GB large, 1x80-320GB xlarge-4xlarge, 2x320GB 8xlarge
                              #     - large to 8xlarge
                              #     - not light utilization
                              #  - hs1.large:
                              #     - High-storage and sequential I/O optimized (big databases)
                              #     - 2.75 times more expensive
                              #     - 3000GB (not SSD), 3.2 ECU, 7.5GB RAM, high network
                              #        - 24x2000GB
                              #     - only reserved
                              #     - 8xlarge
                              #  - i2.large:
                              #     - Storage and random I/O optimized optimized (big databases)
                              #     - 4 times more expensive
                              #     - 400GB instance storage, 7 ECU, 15.25GB RAM, high network (enhanced networking)
                              #        - NUMx800GB
                              #     - xlarge to 8xlarge

AMAZON LINUX ==>              #Amazon Linux OS with:
                              #  - some info in /etc/, e.g. /etc/image-id
                              #  - AWS CLI included

OS CONSIDERATION ==>          #Put same time on all instances:
                              #  - ln -sf /usr/share/zoneinfo/Europe/Stockholm /etc/localtime, then reboot

PRICING ==>                   #Instances:
                              #  - t2.large: 100$/month on-demand full-time. For others types, check difference above.
                              #    For different sizes, divide|multiply by 2.
                              #  - OS:
                              #     - Debian is cheapest
                              #     - A bit more expensive for Red Hat or Suze
                              #     - Much more for Windows, especially with SQL Server Web or SQL Server Standard
                              #  - Region of the instance (US cheapest, Asia more expensive)
                              #  - EBS optimized:
                              #     - only on xlarge or more.
                              #     - 15$/month (if run fully during that month) (double for each size)
                              #  - Detailed monitoring: 3.5$/instance/month
                              #Instance consumption:
                              #  - on-demand:
                              #     - pay full hour when run during that hour
                              #     - instant reboot cost twice the full hour
                              #  - reserved:
                              #     - book instance for different period of time (light|medium|heavy utilization)
                              #     - can change instance type size (multiply/divide number of instances), but not instance
                              #       type (only Linux)
                              #     - NUM% (NUM2%):
                              #        - NUM is percentage of on-demand price (e.g. 20% means 5 times cheaper)
                              #        - Price is if instance is run all month. NUM2 is percentage of price that was not paid
                              #          upfront, e.g. paid on-demand. E.g. if 75%, 37.5% of price would be saved if half-run.
                              #        - First number is on one year, second on three years
                              #     - light: 83% (94%), 65% (88%)
                              #     - medium: 35% (80%), 28% (66%)
                              #     - heavy: 24% (0%), 20% (0%)
                              #  - spot: use instance as long as nobody pays more (7-10 times cheaper than on-demand)
                              #Data transfer:
                              #  - Internet: in free, out 1$/8GB/month (first 1GB free)
                              #  - another AWS region: in free, out 1$/50GB/month (6 times cheaper than above)
                              #  - same region:
                              #     - EC2, RDS, Redshift or ElastiCache and (different AvailabilityZone or using publicIP):
                              #       in|out 1$/100GB/month (12 times cheaper than above)
                              #     - otherwise: in|out free
                              #EBS:
                              #  - About 3 times more expensive than S3 (storage price, data transfer price is about same)
                              #  - IOPS:
                              #     - NUM IOPS means will on average read|write (exclusive) NUM*16KB/sec by chunks of 16KB
                              #     - max MB/s for all volumes depend on instance size
                              #  - Types:
                              #     - General purpose (SSD):
                              #        - fixed 3 IOPS/GB, with unused IOPS saved as "credit"
                              #        - max 3000 IOPS/GB when using credit,
                              #        - max credit 5400000 IOPS (30 minutes at 3000 IOPS/GB)
                              #     - Provisioned IOPS (SSD):
                              #        - IOPS 6.5 times more expensive than General purpose, Storage twice more expensive
                              #        - Can choose any IOPS/GB (at least 1GB for 30 IOPS)
                              #        - Good when need IOPS/GB much higher than 3 IOPS/GB (e.g. fast databases)
                              #          (actually always more expensive than General purpose?)
                              #        - Min 10GB. Max 4000 IOPS
                              #     - Magnetic:
                              #        - IOPS 13 times more expensive than General purpose, Storage one third cheaper.
                              #        - Can choose any IOPS/GB. Good when need IOPS/GB much lower than 3 IOPS/GB
                              #        - Not SSD. Sequential read, not random access.
                              #  - Snapshots:
                              #     - same price as general purpose EBS
                              #     - only deltas (changed blocks) are saved, not full snapshot (so less expensive)
                              #        - can still delete previous snapshots in a safe way


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EC2 ==>                       #In REST, all response starts with lowercase, but uppercase in JavaScript and CLI.
                              #COBJ_ARR: [ { name VAR, value VAL } ... ], but written as VAR: VAL in this doc.
                              #TYPE_OBJ:
                              #  - means { Value TYPE }
                              #  - If variable ends by "Id", it is only present in CLI and JavaScript, not in REST API
                              #OBJ_FILTER:
                              #  - Where OBJ is { VAR: VAL }
                              #  - OBJ_FILTER is [ { Name: VAR, Values: VAL_ARR } ... ]
                              #  - VAL_ARR can include globbing
                              #  - But VAR:
                              #     - camelcase -> lowercase, dashed
                              #     - If VAR is VAR.VAR2 -> "VAR.VAR2", except:
                              #        - Tags.Key|Value -> tag-key VAR, tag-value VAL or tag:VAR VAL
                              #        - ProductCode.ProductCode -> product-code
                              #        - VAR.Code|Message -> VAR-code|message
                              #        - DhcpConfigurations.VAR -> VAR
                              #        - SystemStatus|InstanceStatus.Details.Status -> system|instance-status.reachability
                              #        - VARs -> VAR

PAGINATION ==>                #  - Returns NextToken STR
                              #  - Request parameters: NextToken STR and MaxResults NUM (def|max: 1000)

LIMITS ==>                    #  - 20 non-spot running instances (might be lower for some big sizes) and 5 spot running instances
                              #  - number of instances (running or not): twice number of running
                              #  - 5 ConversionTask at same time
                              #     - max 1TB disk image when importing
                              #  - 10 tags per resource

DescribeAccountAttributes()   #Show limits
                              #Request parameters: AttributeNames STR_ARR among "supported-platforms", "default-vpc"
                              #Response body: AccountAttributes OBJ_ARR:
                              #  - AttributeName STR
                              #  - AttributeValues OBJ_ARR:
                              #     - AttributeValue STR

ARN ==>                       #arn:aws:ec2:REGION:ACCOUNT_ID:TYPE/RESOURCE_ID (if no ID, name)
                              #TYPE can be:
                              #  - customer-gateway
                              #  - dhcp-options
                              #  - image
                              #  - instance
                              #  - instance-profile
                              #  - internet-gateway
                              #  - key-pair
                              #  - network-acl
                              #  - network-interface
                              #  - placement-group
                              #  - route-table
                              #  - security-group
                              #  - snapshot
                              #  - subnet
                              #  - volume
                              #  - vpc
                              #  - vpc-peering-connection

CONDITION_KEYs ==>            #  - ec2:Vpc ARN
                              #  - ec2:Subnet ARN
                              #  - ec2:Accepter|RequesterVpc ARN (VpcPeeringConnection)
                              #  - ec2:Region REGION
                              #  - ec2:AvailabilityZone ZONE
                              #  - ec2:ImageType "ami|aki|ari"
                              #  - ec2:VolumeIops NUM
                              #  - ec2:VolumeSize NUM (in GiB)
                              #  - ec2:VolumeType "gp2|io1|standard"
                              #  - ec2:EbsOptimized BOOL
                              #  - ec2:InstanceType STR
                              #  - ec2:RootDeviceType "ebs|instance-store"
                              #  - ec2:InstanceProfile ARN
                              #  - ec2:Tenancy "default|dedicated"
                              #  - ec2:Public BOOL
                              #  - ec2:ParentSnapshot ARN
                              #  - ec2:ParentVolume ARN
                              #  - ec2:PlacementGroup ARN
                              #  - ec2:PlacementGroupStrategy "cluster"
                              #  - ec2:ResourceTag/VAR VAL
                              #  - ec2:Owner ACCOUNT_ID (or "amazon")



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMAGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateImage()                 #Creates an AMI from an instance.
                              #Request parameters:
                              #  - InstanceId STR
                              #  - Name NAME
                              #  - Description STR
                              #  - NoReboot BOOL: if false (def), shuts down instance if running, then later on restart it.
                              #    Only put true on safe filesystems like xfs after freezing.
                              #  - BlockDeviceMappings BLOCK_DEVICE_MAPPING_OBJ_ARR
                              #Response body: ImageId STR
CopyImage()                   #Creates an AMI from another AMI
                              #Request parameters:
                              #  - SourceRegion REGION
                              #  - SourceImageId STR
                              #  - Name STR
                              #  - Description STR
                              #  - ClientToken STR: for idempotency
                              #Response body: ImageId STR
RegisterImage()               #Put an AMI on S3, so it can be used by RunInstances()
                              #Request parameters REGISTERED_IMAGE_OBJ:
                              #  - ImageLocation BUCKET/OBJECT
                              #     - backed by instance store: must point to an XML manifest file on S3
                              #     - backed by EBS: must point to snapshot on S3
                              #  - Name STR
                              #  - Description STR
                              #  - BlockDeviceMapping BLOCK_DEVICE_MAPPING_OBJ
                              #  - RootDeviceName PATH
                              #  - Architecture "i386|x86_64" (optional description)
                              #  - VirtualizationType "paravirtual|hvm" (optional description)
                              #  - KernelId STR
                              #  - RamdiskId STR
                              #  - SriovNetSupport "simple":
                              #     - enable enhanced networking, meaning it will increase network speed (which might be
                              #       5 times more)
                              #     - only if "hvm", and on some instance types
                              #     - ethtool -i eth0 should show it is working ("driver: ixgbevf")
                              #     - Linux kernel min. 2.6.32, with module ixgbevf (min. version 2.14.2)
                              #        - can verify with modinfo ixgbevf
                              #        - to install (if not already there):
                              #           - apt-get install dkms
                              #           - http://sourceforge.net/projects/e1000/files/ixgbevf stable/VERSION/
                              #             ixgbevf-VERSION.tar.gz
                              #           - untar
                              #           - mv it to /usr/src/
                              #           - create /usr/src/ixgbevf-VERSION/dkms.conf:
                              #               PACKAGE_NAME="ixgbevf"
                              #               PACKAGE_VERSION="VERSION"
                              #               CLEAN="cd src/; make clean"
                              #               MAKE="cd src/; make BUILD_KERNEL=${kernelver}"
                              #               BUILT_MODULE_LOCATION[0]="src/"
                              #               BUILT_MODULE_NAME[0]="ixgbevf"
                              #               DEST_MODULE_LOCATION[0]="/updates"
                              #               DEST_MODULE_NAME[0]="ixgbevf"
                              #               AUTOINSTALL="yes"
                              #           - sudo dkms add -m ixgbevf -v VERSION
                              #           - sudo dkms build -m ixgbevf -v VERSION
                              #           - sudo dkms install -m ixgbevf -v VERSION
                              #           - sudo update-initramfs -c -k all
                              #           - create /etc/modprobe.d/ixgbevf.conf:
                              #               options ixgbevf InterruptThrottleRate=1,1,1,1,1,1,1,1
                              #           - check if installed, then restart
                              #Response body: ImageId STR
DeregisterImage()             #Request parameters: ImageId STR
                              #Response body: Return BOOL
DescribeImages()              #Request parameters:
                              #  - ExecutableUsers STR_ARR, among "all", "self" and ACCOUNT_ID. Id ExecutableBy in REST API.
                              #    "all" means it is public.
                              #  - ImageIds STR_ARR
                              #  - Owners STR_ARR, among "all", "self", ACCOUNT_ID, "aws-marketplace", "amazon"
                              #     - Marketplace: sold by others, pay extra per hour
                              #  - Filters IMAGES_OBJ_FILTER
                              #Response body: Images IMAGES_OBJ_ARR:
                              #  - Same members as REGISTERED_IMAGE_OBJ
                              #  - ImageId STR
                              #  - State "available|pending|failed"
                              #  - OwnerId ACCOUNT_ID
                              #  - IsPublic BOOL:
                              #     - true: anyone can launch it
                              #     - false: only by ACCOUNT_ID, unless shared
                              #  - ProductCodes PRODUCT_CODE_OBJ_ARR
                              #     - ProductCode STR
                              #     - Type "devpay|marketplace"
                              #     - when "aws-marketplace" or DevPay, used to identify customer ID
                              #        - can use ConfirmProductInstance() to checks if an InstanceId has a ProductCode:
                              #           - Request parameters: ProductCode STR, InstanceId STR
                              #           - Response body: Return BOOL, OwnerId ACCOUNT_ID
                              #  - ImageType "machine|kernel|ramdisk"
                              #  - Platform "Windows" (optional)
                              #  - StateReason: code STR, message STR
                              #  - ImageOwnerAlias STR
                              #  - RootDeviceType "ebs|instance-store"
                              #  - Tags TAGS
                              #  - Hypervisor "ovm|xen"
DescribeImageAttribute()      #Request parameters:
                              #  - ImageId STR
                              #  - Attribute "description|blockDeviceMapping|launchPermission|productCodes|kernel|ramdisk|
                              #    sriovNetSupport"
                              #     - launchPermissions is OBJ_ARR: Group "all", UserId ACCOUNT_ID
                              #Response body:
                              #  - ImageId STR
                              #  - requested attribute, camelcase (and with "Id" in the end for kernel, ramdisk)
ModifyImageAttribute()        #Uses to share an AMI publicly ("all") or to specific user (ACCOUNT_ID)
                              #If public, can distribute under URL
                              #https://console.aws.amazon.com/ec2/v2/home?regioREGION#LaunchInstanceWizard:ami=AMI_ID
                              #Request parameters:
                              #  - ImageId STR
                              #  - Description: STR_OBJ
                              #  - LaunchPermissions OBJ_ARR:
                              #     - Add|Remove:
                              #        - Group "all"
                              #        - UserId ACCOUNT_ID
                              #  - ProductCodes STR_ARR
                              #Response body: Return BOOL
ResetImageAttribute()         #Request parameters:
                              #  - ImageId STR
                              #  - Attribute "launchPermission"
                              #Response body: Return BOOL



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INSTANCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RunInstances()                #Creates an instance.
                              #Request parameters:
                              #  - Members of LAUNCH_SPECIFICATION_OBJ:
                              #     - ImageId STR
                              #     - KeyName KEYPAIR_STR
                              #     - SecurityGroup[Id]s SGROUP_NAME|ID_ARR
                              #     - InstanceType STR (e.g. "t2.micro")
                              #     - Placement:
                              #        - AvailabilityZone ZONE
                              #        - GroupName STR
                              #        - Tenancy "default|dedicated": dedicated server or not
                              #     - KernelId STR
                              #     - RamdiskId STR
                              #     - BlockDeviceMappings BLOCK_DEVICE_MAPPING_OBJ_ARR
                              #     - Monitoring: Enabled BOOL
                              #     - NetworkInterfaces NETWORK_INTERFACE_OBJ_ARR
                              #     - IamInstanceProfile:
                              #        - Arn INSTANCE_PROFILE_ARN or Name INSTANCE_PROFILE_NAME
                              #        - Make instance sts:AssumeRole when launched
                              #        - User doing ec2:runInstances must have iam:PassRole permission on ROLE_ARN
                              #     - EbsOptimized BOOL
                              #     - UserData STR:
                              #        - custom data executed at first boot as root (see Cloud-init)
                              #           - can be at every start by changing config (see Cloud-init)
                              #        - can be accessed inside the instance at http://169.254.169.254/latest/user-data/
                              #        - can also be accessed in /var/lib/cloud/
                              #  - Min|MaxCount NUM
                              #  - DisableApiTermination BOOL
                              #  - InstanceInitiatedShutdownBehavior BOOL
                              #  - PrivateIpAddress STR
                              #     - SubnetId STR
                              #  - ClientToken STR: unique string to avoid doing twice same request
                              #Response body:
                              #  - ReservationId STR
                              #  - OwnerId ACCOUNT_ID
                              #  - Groups SGROUP_OBJ_ARR: GroupId SGROUP_ID, GroupName STR
                              #  - RequesterId STR: when instance was launched by another entity (AutoScaling, etc.)
                              #  - Instances RUNNING_INSTANCE_OBJ_ARR:
                              #     - All members of LAUNCH_SPECIFICATION_OBJ but:
                              #        - Monitoring: State "disabled|enabled|pending"
                              #     - InstanceId STR
                              #     - InstanceState INSTANCE_STATE:
                              #        - Code NUM: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated),
                              #             64 (stopping), 80 (stopped)
                              #        - Name "pending|running|shutting-down|terminated|stopping|stopped"
                              #     - Reason STR: debug info for how current InstanceState happened
                              #     - StateTransitionReason: Code STR, Message STR (if State changed)
                              #     - Public|PrivateDnsName STR
                              #     - PublicIpAddress STR
                              #     - VpcId STR
                              #     - ProductCodes PRODUCT_CODE_OBJ_ARR
                              #     - LaunchTime DATE
                              #     - SourceDeskCheck BOOL (def: true)
                              #     - Hypervisor "ovm|xen": Virtualization technology: Oracle VM vs Xen
                              #     - VirtualizationType "paravirtual|hvm": Xen mode:
                              #        - "paravirtual"
                              #        - "hvm" (def): better, because can support enhanced networking and better GPU processing
                              #     - Architecture "i386|x86_64"
                              #     - RootDeviceType "ebs|instance-store"
                              #     - RootDeviceName STR (e.g. "/dev/xvda")
                              #     - AmiLaunchIndex NUM: when launching multiple instances, index from 0
                              #     - Platform "Windows" (optional)
                              #     - InstanceLifecycle "spot" (if spot instance)
                              #     - SpotInstanceRequestId STR
                              #     - SriovNetSupport "simple" (optional)
                              #     - Tags TAGS
RebootInstances()             #Prefer instead of rebooting from within the instance itself.
                              #As opposed to stop|start, keep same config (e.g. PublicDnsName, instance store).
                              #Also it has no impact of billing.
                              #Request parameters: InstanceIds STR_ARR
                              #Response body: Return BOOL
Start|Stop|TerminateInstances #Difference:
                              #  - Stop:
                              #     - Contrary of StartInstances
                              #     - Shutdowns the computer
                              #     - new IP/DNS (including Elastic IP) are assigned (unless VPC)
                              #     - Only for EBS-backed instances
                              #  - Terminate:
                              #     - Contrary of RunInstances
                              #     - Erases the instance (will still appear for some time on the DescribeInstances() output)
                              #     - Erase EBS unless DeleteOnTermination false
                              #     - Can be disabled with DisableApiTermination true (must change attribute to be able to
                              #       terminate it)
                              #     - InstanceInitiatedShutdownBehavior: whether user shutdown is stop or termination
                              #       (def "stop" if EBS, "terminate" if no EBS)
                              #Request parameters:
                              #  - InstanceIds STR_ARR
                              #  - Force BOOL (Only with Stop)
                              #Response body: [Starting|Stopping|Terminating]Instances INSTANCE_STATE_ALL_OBJ_ARR:
                              #  - InstanceId STR
                              #  - CurrentState|PreviousState INSTANCE_STATE
DescribeInstances()           #Request parameters:
                              #  - InstanceIds STR_ARR
                              #  - Filters RUNNING_INSTANCE_OBJ_FILTER
                              #Response body: Reservations OBJ_ARR:
                              #  - ReservationId STR
                              #  - RequesterId STR
                              #  - OwnerId ACCOUNT_ID
                              #  - Groups SGROUP_OBJ_ARR
                              #  - Instances RUNNING_INSTANCE_OBJ_ARR
                              #Paginates
                              #Can use waitFor "instanceRunning|Stopped|Terminated"
DescribeInstanceAttribute()   #Request parameters:
                              #  - InstanceId STR
                              #  - Attribute "blockDeviceMapping|disableApiTermination|ebsOptimized|groupSet|
                              #    instanceInitiatedShutdownBehavior|instanceType|kernel|productCodes|ramdisk|rootDeviceName|
                              #    sourceDestCheck|sriovNetSupport|userData"
                              #Response body:
                              #  - InstanceId STR
                              #  - requested attribute, camelcase (and with "Id" in the end for kernel, ramdisk)
ModifyInstanceAttribute()     #Request parameters: same as DescribeInstanceAttribute() except:
                              #  - Groups SGROUP_OBJ_ARR -> Groups SGROUP_ID_ARR
                              #  - no RootDeviceName
                              #Response body: Return BOOL
                              #Instance must be in "stopped" state.
ResetInstanceAttribute()      #Request parameters:
                              #  - InstanceId STR
                              #  - Attribute "kernel|ramdisk|sourceDestCheck"
                              #Response body: Return BOOL

DescribeInstanceStatus()      #When run, perform some checks first:
                              #  - system status check (doesn't require intervention), e.g. system power outage
                              #  - instance status check (requires intervention), e.g. corrupter filesystem, kernel pb
                              #Then perform every 5 mins.
                              #Request parameters:
                              #  - InstanceId STR
                              #  - IncludeAllInstances BOOL (def: false)
                              #  - Filters INSTANCE_STATUS_OBJ_FILTER
                              #Events are Amazon-initiated interruptions, warned beforehand:
                              #  - types:
                              #     - instance-retirement: underlying machine is gonna be deleted
                              #     - instance-stop: migration to new hardware
                              #     - instance-reboot: can be initiated yourself
                              #  - can:
                              #     - system-reboot|system-maintenance: just wait for it
                              #     - instance-reboot: initiate it yourself
                              #     - instance-retirement|stop: stop then start again
                              #Response body: InstanceStatuses INSTANCE_STATUS_OBJ_ARR:
                              #  - InstanceId STR
                              #  - InstanceState INSTANCE_STATE
                              #  - AvailabilityZone ZONE
                              #  - Events OBJ_ARR:
                              #     - Code "instance-reboot|system-reboot|system-maintenance|instance-retirement|instance-stop"
                              #     - Description STR
                              #     - NotBefore|After DATE_NUM
                              #  - SystemStatus|InstanceStatus:
                              #     - Status "ok|impaired|insufficient-data|not-applicable"
                              #     - Details:
                              #        - Name "reachability"
                              #        - Status "passed|failed|insufficient-data"
                              #        - ImpairedSince DATE_NUM
                              #Paginates
ReportInstanceStatus()        #Tells Amazon there is a problem. They will only intervene if many people report.
                              #Request parameters:
                              #  - InstanceIds STR_ARR
                              #  - Status "ok|impaired"
                              #  - StartTime|EndTime DATE
                              #  - ReasonCodes "instance-stuck-in-state|unresponsive|not-accepting-credentials|
                              #    password-not-available|performance-network|performance-instance-store|
                              #    performance-ebs-volume|performance-other|other"
                              #  - Description STR
                              #Response body: Return BOOL

GetConsoleOutput()            #Prints info printed on boot.
                              #Request parameters: InstanceId STR
                              #Response body:
                              #  - InstanceId STR
                              #  - Timestamp DATE
                              #  - Output STR
GetPasswordData()             #Get Windows admin password (must wait 15 mins after boot time). Is encrypted with KeyPair.
                              #Request parameters: InstanceId STR
                              #Response body:
                              #  - InstanceId STR
                              #  - Timestamp DATE
                              #  - PasswordData STR

http://169.254.169.254/       #When connected to an instance, directory with several info about the AMI (hostname, etc.)
latest/meta-data/             #Can also be accessed at /var/lib/cloud/

CreatePlacementGroup()        #Groups of instances optimized to communicate fast with each other: high bandwidth, low latency.
                              #Only on c3.*, r3.*, hi1.*, i2.*
                              #Must be in same AvailabilityZone
                              #Specified by using RunInstances() for several instance (should be same instance type) with
                              #Placement argument.
                              #Request parameters:
                              #  - GroupName STR
                              #  - Strategy "cluster"
                              #Response body: Return BOOL
DeletePlacementGroup()        #Request parameters: GroupName STR
                              #Response body: Return BOOL
DescribePlacementGroups()     #Request parameters:
                              #  - GroupNames STR_ARR
                              #  - Filters PLACEMENT_GROUP_OBJ_ARR
                              #Response body: PlacementGroups PLACEMENT_GROUP_OBJ_ARR:
                              #  - GroupName STR
                              #  - Strategy "cluster"
                              #  - State "pending|available|deleting|deleted"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      RESERVED INSTANCES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PurchaseReserved              #Request parameters:
InstancesOffering()           #  - ReservedInstancesOfferingId STR
                              #  - InstanceCount NUM
                              #  - LimitPrice:
                              #     - Amount DOUBLE
                              #     - CurrencyCode "USD"
                              #Response body:
                              #  - ReservedInstancesId STR
DescribeReserved              #Request parameters:
InstancesOfferings()          #  - ReservedInstancesOfferingIds STR_ARR
                              #  - Filters RESERVED_INSTACE_OFFERING_OBJ_FILTER, except those ones available directly as
                              #    request parameters: InstanceType, AvailabilityZone, ProductDescription, InstanceTenancy,
                              #    OfferingType, IncludeMarkerplace, Min|MaxDuration, MaxInstanceCount
                              #Response body: ReservedInstancesOfferings RESERVED_INSTACE_OFFERING_OBJ_ARR:
                              #  - ReservedInstancesOfferingId STR
                              #  - InstanceType STR
                              #  - AvailabilityZone STR
                              #  - Duration NUM
                              #  - FixedPrice DOUBLE: paid at beginning
                              #  - UsagePrice DOUBLE: paid on demand, when used
                              #  - RecurringCharges OBJ_ARR: paid on demand, when used or not (heavy utilization)
                              #     - Frequency "Hourly"
                              #     - Amount DOUBLE
                              #  - ProductDescription "Linux/UNIX|Linux/UNIX(AmazonVPC)|Windows|Windows(AmazonVPC)"
                              #  - InstanceTenancy "default|dedicated"
                              #  - CurrencyCode "USD"
                              #  - OfferingType "Heavy|Medium|Light Utilization"
                              #  - Marketplace BOOL
                              #  - PricingDetails OBJ_ARR:
                              #     - Price NUM
                              #     - Count NUM
                              #Paginates

DescribeReservedInstances()   #Request parameters:
                              #  - ReservedInstancesIds STR_ARR
                              #  - OfferingType "Heavy|Medium|Light Utilization"
                              #  - Filters RESERVED_INSTANCE_OBJ_FILTER
                              #Response body: ReservedInstances RESERVED_INSTANCE_OBJ_ARR:
                              #  - Same as RESERVED_INSTACE_OFFERING_OBJ, except ReservedInstancesOfferingId, Marketplace and
                              #    PricingDetails
                              #  - ReservedInstancesId STR
                              #  - Start|End DATE_NUM
                              #  - InstanceCount NUM
                              #  - State "payment-pending|active|payment-failed|retired"
                              #  - Tags TAGS
ModifyReservedInstances()     #There are limitations to how to change reserved instances.
                              #For example, cannot change instance type except size, and even then, multiply/divide number of
                              #instances.
                              #Request parameters:
                              #  - ReservedInstancesID STR_ARR
                              #  - ClientToken STR
                              #  - TargetConfiguration RESERVED_INSTANCE_MOD_OBJ
                              #Response body: ReservedInstancesModificationId STR
DescribeReserved              #Request parameters:
InstancesModifications()      #  - ReservedInstancesModificationIds STR_ARR
                              #  - Filters RESERVED_INSTANCE_MOD_OBJ_FILTER
                              #Response body: ReservedInstancesModifications RESERVED_INSTANCE_MOD_OBJ_ARR:
                              #  - ReservedInstancesModificationId STR
                              #  - ClientToken STR
                              #  - ReservedInstancesId STR
                              #  - ModificationResults:
                              #     - AvailabilityZone STR
                              #     - Platform "EC2-Classic|VPC"
                              #     - InstanceCount NUM
                              #     - InstanceType STR
                              #     - Create|Update|EffectiveDate DATE_STR
                              #     - Status "processing|fulfilled|failed"
                              #     - StatusMessage STR
                              #  - TargetConfiguration RESERVED_INSTANCE_MOD_OBJ
                              #Paginates

CreateReservedInstancesListing#Used to resell a reserved instance on the marketplace (12% fee). Must:
                              #  - have reserved instance for more than a month
                              #  - register as a reseller (bank with US address)
                              #Request parameters:
                              #  - ReserverInstancesId STR
                              #  - InstanceCount NUM
                              #  - PriceSchedules PRICE_SCHEDULE_OBJ_ARR:
                              #     - Term NUM
                              #     - Price DOUBLE
                              #     - CurrencyCode "USD"
                              #  - ClientToken STR
                              #Response body: ReservedInstanceListings RESERVED_INSTANCE_LISTING_ARR:
                              #  - ReservedInstancesListingId STR
                              #  - ReservedInstancesId STR
                              #  - CreateDate DATE_NUM
                              #  - UpdateDate DATE_NUM
                              #  - Status "pending|active|cancelled|closed"
                              #  - StatusMessage STR
                              #  - InstanceCounts OBJ_ARR:
                              #     - State "available|sold|cancelled|pending"
                              #     - InstanceCount NUM
                              #  - PriceSchedules PRICE_SCHEDULE_OBJ_ARR, plus:
                              #     - Active BOOL
                              #  - Tags TAGS
                              #  - ClientToken STR
CancelReservedInstancesListing#Request parameters: reservedInstancesListingId STR
                              #Response body: ReservedInstancesListings RESERVED_INSTANCE_LISTING_ARR
DescribeReserved              #Request parameters:
InstancesListings()           #  - ReservedInstancesIds STR_ARR
                              #  - ReservedInstancesListingIds STR_ARR
                              #  - Filters RESERVED_INSTANCE_LISTING_FILTER
                              #Response body: ReservedInstanceListings RESERVED_INSTANCE_LISTING_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SPOT INSTANCES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPOT PRICE ==>                #  - To get a spot instance, make a max bid (price) higher than current spot price
                              #     - Pays current spot price, not max bid
                              #  - When spot price is higher than bid, instance terminates
                              #  - Spot price fluctuates according to supply and demand
                              #Since it can terminate anytime, should think of the possibility of termination
                              #(exit, backups/restoration)
                              #  - good for task-oriented instance that don't have bad impact if terminated (e.g. web crawler)
                              #  - can split between some instances non-spot for long-running jobs and others spot for
                              #    short-running spots
                              #  - If using EBS, set DeleteOnTermination to false
                              #Also instance cannot be stopped (only terminated).

DescribeSpotPriceHistory()    #Request parameters:
                              #  - Filters SPOT_PRICE_HIST_OBJ_FILTER
                              #  - AvailabilityZone, InstanceTypes STR_ARR, StartTime|EndTime
                              #Response body: SpotPriceHistories SPOT_PRICE_HIST_OBJ_ARR:
                              #  - InstanceType STR
                              #  - ProductDescription "Linux/UNIX|SUSE Linux|Windows|Linux/UNIX (Amazon VPC)|
                              #    SUSE Linux (Amazon VPC)|Windows (Amazon VPC)"
                              #  - SpotPrice STR
                              #  - Timestamp DATE
                              #  - AvailabilityZone STR
                              #Paginates

RequestSpotInstances()        #Request parameters:
                              #  - SpotPrice STR
                              #  - InstanceCount NUM (number of request to make)
                              #  - Type "one-time|persistent": if "persistent", run the request again when all spot instances
                              #    are terminated
                              #  - ValidFrom|ValidUntil DATE: how long request (not instance) is opened
                              #  - LaunchGroup STR: requests will same STR will be fulfilled only if all can be
                              #  - AvailabilityZoneGroup STR: requests with same STR will be in same ZONE
                              #  - LaunchSpecification LAUNCH_SPECIFICATION_OBJ
                              #Response body: SpotInstanceRequests SPOT_INSTANCE_REQUEST_OBJ_ARR
CancelSpotInstanceRequests()  #Request parameters: SpotInstanceRequestIds STR_ARR
                              #Response body: CancelledSpotInstanceRequests OBJ_ARR:
                              #  - SpotInstanceRequestId STR
                              #  - State "active|open|closed|cancelled|failed"
DescribeSpotInstanceRequests()#Request parameters:
                              #  - SpotInstanceRequestIds STR_ARR
                              #  - Filters SPOT_INSTANCE_REQUEST_OBJ_FILTER:
                              #     - NetworkInterfaces available as network-interface.*
                              #     - LaunchSpecification -> launch.*
                              #Response body:
                              #  - NetworkInterfaces OBJ_ARR:
                              #     - NetworkInterfaceId STR
                              #     - DeviceIndex STR
                              #     - SubnetId STR
                              #     - PrivateIpAddress STR
                              #     - PrivateIpAddresses OBJ_ARR:
                              #        - PrivateIpAddress STR
                              #        - Primary STR
                              #     - SecondaryPrivateIpAddressCount NUM
                              #     - Description STR
                              #     - DeleteOnTermination BOOL
                              #  - SpotInstanceRequests SPOT_INSTANCE_REQUEST_OBJ_ARR:
                              #     - Same members as RequestSpotInstances() except InstanceCount
                              #     - SpotInstanceRequestId STR
                              #     - State "open|active|closed|cancelled|failed"
                              #        - "open" is when request is not fulfilled, "active" when it is fulfilled
                              #     - InstanceId STR: when "active"
                              #     - LaunchedAvailabilityZone ZONE
                              #     - CreateTime DATE_NUM
                              #     - ProductDescription STR
                              #     - Tags TAGS
                              #     - Fault: Code STR, Message STR
                              #     - Status: Code STR, Message STR, UpdateTime DATE_NUM

CreateSpotDatafeedSubscription#Stores logs in BUCKET/[PREFIX/]ACCOUNT_ID.YYYY-MM-DD-HH.NUM.RANDOM.gz:
                              #  - usually once an hour, unless no spot instance running
                              #  - Fields:
                              #     - Timestamp
                              #     - UsageType: instance type
                              #     - Operation
                              #     - InstanceID
                              #     - MyBidID
                              #     - MyMaxPrice
                              #     - MarketPrice
                              #     - Charge
                              #     - Version
                              #Request parameters:
                              #  - Bucket BUCKET
                              #  - Prefix PREFIX
                              #Response body: SpotDatafeedSubscription SPOT_DATAFEED_OBJ:
                              #  - OwnerId STR
                              #  - Bucket BUCKET
                              #  - Prefix PREFIX
                              #  - State "Active|Inactive"
                              #  - Fault:
                              #     - Code STR
                              #     - Message STR
DeleteSpotDatafeedSubscription#Response body: Return BOOL
DescribeSpot
DatafeedSubscription()        #Response body: SpotDatafeedSubscription SPOT_DATAFEED_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VOLUMES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STORAGE ==>                   #Can be:
                              #  - Instance store volumes:
                              #     - temp block device (SSD)
                              #     - could achieve persistence by using several AZ and doing backups
                              #     - can be also be used for swap space:
                              #        - mkswap /dev/PARTITION
                              #        - swapon /dev/PARTITION (to do at every start, edit fstab:
                              #            /dev/PARTITION none swap sw 0 0)
                              #        - check with swapon -s
                              #  - EBS volume: persistent block device (including boot partition):
                              #     - use replication on the backend
                              #     - can also do snapshot to S3 (can be restored)
                              #     - can be:
                              #        - General purpose (SSD)
                              #        - Provisioned IOPS (SSD): more expensive, lower latency, for I/O intensive
                              #          (guaranted IOPS). Min 10GB
                              #        - Magnetic: cheaper, less performance
                              #     - Instance can be EBS-optimized for lower latency between instance and EBS, and better
                              #       respect of the provisioned IOPS
                              #     - can provision EBS IOPS
                              #Boot partition can be based on ("backed by"):
                              #  - Instance store:
                              #     - created from an image.manifest.xml and image.part.NUM (instance bundle)
                              #        - require installation of command line AMI tools (see online doc)
                              #     - 5 minutes boot time
                              #     - max 10GB
                              #  - EBS:
                              #     - created from a snapshot
                              #     - 1 minute boot time
                              #     - max 1000GB
                              #     - Can stop instance, so can change instance type, user data, etc.
                              #Block device mappings:
                              #  - BLOCK_DEVICE_MAPPING_OBJ:
                              #     - DeviceName PATH (e.g. "/dev/xvda")
                              #     - Ebs VOLUME (EBS only)
                              #     - VirtualName "ephemeralNUM" (starting from 0) (instance store only)
                              #     - NoDevice true: prevents device from attaching at boot
                              #  - assign instance storage and EBS to /dev/PARTITION
                              #     - PARTITION must be:
                              #        - if "hvm", sdb-z or xvdb-c[a-z] (Windows: sdb-e)
                              #        - if "paravirtual", sdb-z[1-15] or hda-z
                              #     - Usually root is /dev/sda1 or /dev/xvda
                              #     - Should use Instance stores: *b-e, EBS: *f-p
                              #     - Sometimes remap to different name, e.g. /dev/sda -> /dev/xvda
                              #  - OS sometimes mount automatically (boot partition, /dev/shm) but must also mount volumes
                              #    manually (or edit fstab)
                              #Snapshots:
                              #  - AMI copy of a volume (e.g. boot partition)
                              #     - Partition must be unmounted (if boot partition, instance stopped)
                              #  - Allow copying|restoring volumes (creating volumes from snapshots)
                              #     - To change size of a partition, must stop instance, copy volume with new size, attach
                              #       new volume, erase old volume, run instance, change partition size in instance OS
                              #  - Stored in S3, but can't access it using S3 (only through EC2)

CreateVolume()                #Create an EBS volume.
                              #Request parameters VOLUME:
                              #  - AvailabilityZone ZONE
                              #  - VolumeSize NUM (GB)
                              #  - VolumeType "gp2" (general purpose), "io1" (provisioned) or "standard" (magnetic, def)
                              #  - Iops NUM (100-4000): only if "io1"
                              #  - Encrypted BOOL (def: false): if true:
                              #     - uses AES-256: encrypts on write, decrypts on read
                              #     - does not affect IOPS nor latency
                              #     - not supported on t2.* instance types
                              #  - SnapshotId STR (restore from snapshot)
                              #Response body SMALL_VOLUME_OBJ:
                              #  - Same as request parameters
                              #  - VolumeId STR
                              #  - State "creating|available|in-use|deleting|deleted|error"
                              #  - CreateTime DATE_STR
DeleteVolume()                #Request parameters: VolumeId STR
                              #Response body: Return BOOL
Attach|DetachVolume()         #Attach an EBS volume to an instance partition (even if running).
                              #Must manually format new volumes (e.g. with mkfs)
                              #Request parameters:
                              #  - VolumeId STR
                              #  - InstanceId STR
                              #  - Device PATH (e.g. /dev/xvdb)
                              #  - Force BOOL (only for Detach)
                              #Response body ATTACHMENT_OBJ:
                              #  - RequestId STR
                              #  - VolumeId STR
                              #  - InstanceId STR
                              #  - Device STR
                              #  - Status "attaching|attached|detaching|detached"
                              #  - AttachTime DATE_NUM
DescribeVolumes()             #Request parameters:
                              #  - VolumeIds STR_ARR
                              #  - Filter VOLUME_OBJ_FILTER
                              #Response body: Volumes VOLUME_OBJ_ARR:
                              #  - Same members as SMALL_VOLUME_OBJ
                              #  - Attachments ATTACHMENT_OBJ_ARR, with also:
                              #     - DeleteOnTermination BOOL
                              #  - Tags TAGS
                              #Can use waitFor "volumeAvailable|InUse|Deleted"
DescribeVolumeAttribute()     #Request parameters:
                              #  - VolumeId STR
                              #  - Attribute "autoEnableIO|productCodes"
                              #Response body:
                              #  - VolumeId STR
                              #  - AutoEnableIO BOOL: see below
                              #  - ProductCodes PRODUCT_CODE_OBJ_ARR
ModifyVolumeAttribute()       #Request parameters:
                              #  - VolumeId STR
                              #  - AutoEnableIO BOOL_OBJ
                              #Response body: Return BOOL
DescribeVolumeStatus()        #Automatic checks at attach time.
                              #If problem ("impaired"), disable IO unless AutoEnableIO true (can reenable with EnableVolumeIO)
                              #so can use fsck, etc.
                              #Request parameters:
                              #  - VolumeIds STR_ARR
                              #  - Filters VOLUME_STATUS_OBJ_FILTER
                              #Response body: VolumeStatuses VOLUME_STATUS_OBJ_ARR:
                              #  - VolumeId STR
                              #  - AvailabilityZone STR
                              #  - VolumeStatus OBJ_ARR:
                              #     - Status "ok|warning|impaired|insufficient-data" ("insufficient-data": in-progress)
                              #     - Details:
                              #        - Name "io-enabled|io-performance"
                              #        - Status "passed|failed" for "io-enabled" or "normal|degraded|severely-degraded|stalled"
                              #          for "io-performance"
                              #  - Events OBJ_ARR:
                              #     - EventType STR
                              #     - EventId STR
                              #     - Description STR
                              #     - NotBefore|After DATE
                              #  - Actions OBJ_ARR:
                              #     - Code STR
                              #     - EventType STR
                              #     - EventId STR
                              #     - Description STR
                              #Paginates
EnableVolumeIO()              #Request parameters: VolumeId STR
                              #Response body: Return BOOL

CreateSnapshot()              #Request parameters:
                              #  - VolumeId STR
                              #  - Description STR
                              #Response body SNAPSHOT_OBJ:
                              #  - SnapshotId STR
                              #  - VolumeId STR
                              #  - Status "pending|completed|error"
                              #  - StartTime DATE_NUM
                              #  - Progress STR
                              #  - OwnerId ACCOUNT_ID
                              #  - VolumeSize STR
                              #  - Description STR
                              #  - Tags TAGS
                              #  - Encrypted BOOL: if true:
                              #     - encrypts snapshot, and when restored will be an encrypted EBS
                              #     - Cannot be shared (see DescribeSnapshotAttribute())
CopySnapshot()                #Request parameters:
                              #  - SourceRegion REGION
                              #  - DestinationRegion REGION
                              #  - SourceSnapshotId STR
                              #  - Description STR
                              #  - PresignedUrl STR
                              #Response body: SnapshotId STR
DeleteSnapshot()              #Request parameters: SnapshotId STR
                              #Response body: Return BOOL
DescribeSnapshots()           #Request parameters:
                              #  - SnapshotIds STR_ARR
                              #  - Owner STR, among "self", "amazon" or ACCOUNT_ID
                              #  - RestorableByUserIds ACCOUNT_ID_ARR ("RestorableBy" in REST API)
                              #  - Filters SNAPSHOT_OBJ_FILTER
                              #Response body: Snapshots SNAPSHOT_OBJ_ARR
                              #Can use waitFor "snapshotCompleted"
DescribeSnapshotAttribute()   #To share snapshots (like DescribeImageAttribute())
                              #Request parameters:
                              #  - SnapshotId STR
                              #  - Attribute "createVolumePermission|productCodes"
                              #Response body:
                              #  - SnapshotId STR
                              #  - CreateVolumePermission OBJ_ARR:
                              #     - UserId STR
                              #     - Group "all"
                              #  - ProductCodes PRODUCT_CODE_OBJ_ARR
ModifySnapshotAttribute()     #Request parameters:
                              #  - SnapshotId STR
                              #  - CreateVolumePermission OBJ_ARR:
                              #     - Add|Remove:
                              #        - UserId STR
                              #        - Group "all"
                              #Response body: Return BOOL
ResetSnapshotAttribute()      #Request parameters:
                              #  - SnapshotId STR
                              #  - Attribute "createVolumePermission"
                              #Response body: Return BOOL

BundleInstance()              #Request parameters:
                              #  - InstanceId
                              #  - Storage STORAGE_OBJ
                              #Response body: BundleInstanceTask BUNDLE_INSTANCE_OBJ:
                              #  - InstanceId STR
                              #  - BundleId STR
                              #  - State "pending|waiting-for-shutdown|bundling|storing|cancelling|complete|failed"
                              #  - StartTime DATE_NUM
                              #  - UpdateTime DATE_NUM
                              #  - Storage STORAGE_OBJ:
                              #     - S3:
                              #        - Bucket BUCKET
                              #        - Prefix STR
                              #        - AWSAccessKeyId ACCESS_KEY_ID
                              #        - UploadPolicy BASE64_OBJ_STR:
                              #           - expiration
                              #           - conditions
                              #           - bucket BUCKET
                              #           - acl "ec2-bundle-read"
                              #        - UploadPolicySignature STR
                              #  - Progress STR
                              #  - Error: Code STR, Message STR
CancelBundleTask()            #Request parameters: BundleId STR
                              #Response body: BundleInstanceTask BUNDLE_INSTANCE_OBJ
DescribeBundleTasks()         #Request parameters:
                              #  - BundleIds STR_ARR
                              #  - Filters BUNDLE_INSTANCE_OBJ_FILTER
                              #Response body: BundleInstanceTasks BUNDLE_INSTANCE_OBJ_ARR
                              #Can use waitFor "bundleTaskComplete"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         IMPORT/EXPORT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ImportInstance()              #Import a Xen, Hyper-V (VHD) or VMWare (VMDK), or raw image (dd if=/dev) image into EC2.
                              #ImportInstance() is for the boot partition, ImportVolume() for the others.
                              #Request parameters:
                              #  - Description STR
                              #  - LaunchSpecification:
                              #     - Architecture "i386|x86_64"
                              #     - GroupNames STR_ARR
                              #     - UserData STR
                              #     - InstanceType STR
                              #     - Placement:
                              #        - AvailabilityZone STR
                              #     - Monitoring:
                              #        - Enabled BOOL
                              #     - SubnetId STR
                              #     - InstanceInitiatedShutdownBehavior STR
                              #     - PrivateIpAddress STR
                              #  - DiskImages DISK_IMAGES_OBJ_ARR:
                              #     - Image:
                              #        - Format "VMDK|RAW|VHD"
                              #        - Bytes NUM
                              #        - ImportManifestUrl STR
                              #        - Description STR
                              #     - Volume:
                              #        - Size NUM
                              #  - Platform "Windows|Linux"
                              #Response body: ConversionTask CONVERSION_TASK_OBJ:
                              #  - ConversionTaskId STR
                              #  - ExpirationTime STR
                              #  - ImportVolume IMPORT_VOLUME_OBJ:
                              #     - BytesConverted NUM
                              #     - AvailabilityZone STR
                              #     - Description STR
                              #     - Image:
                              #        - Format STR
                              #        - Size NUM
                              #        - ImportantManifestUrl STR
                              #        - Checksum STR
                              #     - Volume:
                              #        - Size NUM
                              #        - Id STR
                              #  - ImportInstance:
                              #     - Volumes IMPORT_VOLUME_OBJ_ARR
                              #     - InstanceId STR
                              #     - Platform "Windows" (optional)
                              #     - Description STR
                              #  - State "active|cancelling|cancelled|completed"
                              #  - StatusMessage STR
ImportVolume()                #Request parameters:
                              #  - AvailabilityZone STR
                              #  - Same members as DISK_IMAGES_OBJ
                              #Response body: ConversionTask CONVERSION_TASK_OBJ
CancelConversionTask()        #Request parameters: ConversionTaskId STR
                              #Response body: Return BOOL
DescribeConversionTasks()     #Request parameters: ConvertsionTaskIds STR_ARR
                              #Response body: ConversionTasks CONVERSION_TASK_OBJ_ARR:
                              #Can use waitFor "conversionTaskCompleted|Cancelled|Deleted"

CreateInstanceExportTask()    #Export an instance to a Virtual machine (inverse of ImportInstance()).
                              #Does not work if EBS, several volumes, several NetworkInterfaces, and if instance was not
                              #originally created via ImportInstance().
                              #Request parameters:
                              #  - Description STR
                              #  - InstanceId STR
                              #  - TargetEnvironment "vmware|citrix|microsoft"
                              #  - ExportToS3 EXPORT_S3_OBJ:
                              #     - DiskImageFormat "vmdk|vhd"
                              #     - ContainerFormat "ova" (optional)
                              #     - S3Bucket BUCKET
                              #     - S3Prefix STR
                              #Response body: ExportTask EXPORT_TASK_OBJ:
                              #  - ExportTaskId STR
                              #  - Description STR
                              #  - State "active|cancelling|cancelled|completed"
                              #  - StatusMessage STR
                              #  - InstanceExport OBJ:
                              #     - InstanceId STR
                              #     - TargetEnvironment "vmware|citrix|microsoft"
                              #  - ExportToS3 EXPORT_S3_OBJ
CancelExportTask()            #Request parameters: ExportTaskId STR
                              #Response body: Return BOOL
DescribeExportTasks()         #Request parameters: ExportTaskIds STR_ARR
                              #Response body: ExportTasks EXPORT_TASK_OBJ_ARR
                              #Can use waitFor "exportTaskCompleted|Cancelled"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      AVAILABILITY ZONES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AVAILABILITY ==>              #AvailabilityZones:
                              #  - different geographical locations, so that if failure in one, other are not affected.
                              #  - Apart from this, nothing else (e.g. no replication, etc.). Just good to separate cluster
                              #    into several AZ.
                              #  - Called REGIONa|b|c|d
                              #     - 2 in most REGION (so 2 AZ dispo), but 3 in eu-west-1, us-west-2, us-east-1
                              #  - Can check if AZ online ("health")
                              #  - If several AZ, should get default one for first, then assigned to different AZ for next
                              #Region vs AvailabilityZone:
                              #  - AvailabilityZone-specific: instances, EBS volumes
                              #  - Region-specific (not AZ-specific): everything else, including Snapshots, security groups,
                              #    Elastic IP addresses, AMIs

DescribeRegions()             #Request parameters:
                              #  - RegionNames REGION_ARR
                              #  - Filters REGION_OBJ_FILTER
                              #Response body: Regions REGION_OBJ_ARR:
                              #  - RegionName REGION
                              #  - Endpoint URL (usually ec2.REGION.amazonaws.com)
DescribeAvailabilityZones()   #Request parameters:
                              #  - ZoneNames ZONE_ARR
                              #  - Filters AZ_INFO_OBJ_FILTER
                              #Response body: AvailabilityZoneInfo AZ_INFO_OBJ_ARR:
                              #  - RegionName REGION
                              #  - ZoneName ZONE
                              #  - State "available|impaired|unavailable"
                              #  - Messages STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            KEYPAIR            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateKeyPair()               #Use a private key to connect to an instance (AWS knows the public key).
                              #Must specify the KeyName beforehand at RunInstances()
                              #To get the public key:
                              #  - ssh-keygen -y, then pick private key
                              #  - or when connected to instance, do GET
                              #    http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key
                              #Request parameters: KeyName STR
                              #Response body:
                              #  - KeyName KEYPAIR_STR
                              #  - KeyMaterial PRIVATE_RSA_KEY_STR (should be FILE.pem with permission 0400)
                              #  - KeyFingerprint STR
                              #Communicates to AWS the PUBLIC_RSA_KEY
ImportKeyPair()               #Communicates to AWS the PUBLIC_RSA_KEY of a PRIVATE_RSA_KEY_STR created locally.
                              #So like CreateKeyPair() but don't let AWS create the key pair.
                              #Request parameters:
                              #  - KeyName KEYPAIR_STR
                              #  - PublicKeyMaterial PUBLIC_RSA_KEY_STR
                              #Response body KEYS_OBJ:
                              #  - KeyName KEYPAIR_STR
                              #  - KeyFingerprint STR
DeleteKeyPair()               #Request parameters: KeyName STR
                              #Response body: Return BOOL
DescribeKeyPairs()            #Request parameters:
                              #  - KeyNames KEYPAIR_STR_ARR
                              #  - Filters KEYS_OBJ_FILTER
                              #Response body: Keys KEYS_OBJ_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              TAG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS ==>                      #Arbitrary metadata (shown in the AWS console)
                              #Tags assigned on public resources are not shared publicly.

Create|DeleteTags()           #Request parameters:
                              #  - ResourceIds STR_ARR (e.g. ImageId, InstanceId, etc.)
                              #  - Tags TAGS (COBJ_ARR with any VAR)
                              #Response body: Return BOOL
DescribeTags()                #Request parameters: Filters OBJ_FILTER, with OBJ:
                              #  - key|value STR (max 127 chars, 255 chars)
                              #  - resource-id STR
                              #  - resource-type "customer-gateway|dhcp-options|image|instance|internet-gateway|network-acl|
                              #    network-interface|reserved-instances|route-table|security-group|snapshot|
                              #    spot-instances-request|subnet|volume|vpc|vpn-connection|vpn-gateway"
                              #Response body: Tags TAGS
                              #Paginates



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MONITORING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLOUDWATCH METRICS ==>        #EBS volumes (Dimensions: VolumeId):
                              #  - VolumeRead|WriteBytes (bytes)
                              #  - VolumeRead|WriteOps (count): number of operations
                              #  - VolumeConsumedReadWriteOps (count): same but normalized so can be thought in terms of IOPS
                              #    (use a period of 60 to see IOPS) (provisioned IOPS only)
                              #  - VolumeRead|WriteTime (seconds): length of operations * number of operations (might be
                              #    longer than period since several operations can run in parallel)
                              #  - VolumeIdleTime (seconds): how long no read or write
                              #  - VolumeQueueLength (count): how many read|write operations queued
                              #  - VolumeThroughputPercentage (percent): percentage of the provisionned IOPS (provisioned IOPS
                              #    EBS only)
                              #Also the EC2 AWS console shows derived statistics:
                              #  - Avg Read|Write Size (KiB/op): Avg(VolumeRead|WriteBytes) / 1024
                              #  - Read|Write Bandwidth (KiB/s): Sum(VolumeRead|WriteBytes) / Period / 1024
                              #  - Read|Write Throughput (Ops/s) Sum(VolumeRead|WriteOps) / Period
                              #  - Avg Read|Write Latency (ms/op) Avg(VolumeTotalRead|WriteTime) * 1000
                              #  - Avg Queue Length (ops): Avg(VolumeQueueLength)
                              #  - % Time Spent Idle: Sum(VolumeIdleTime) / Period * 100
                              #EC2 instances (Dimensions: InstanceId, InstanceType, ImageId, AutoScalingGroupName):
                              #  - DiskRead|WriteBytes (bytes): like for EBS, but for instance stores
                              #  - DiskRead|WriteOps (count): like for EBS, but for instance stores
                              #  - NetworkIn|Out (bytes): ingoing|outgoing network traffic
                              #  - StatusCheckFailed[_Instance|System] (count): number of check problems
                              #    (see DescribeInstanceStatus())
                              #  - CPUCreditUsage (count): CPU credits used (only t2.*)
                              #  - CPUCreditAccumulated (count): CPU credits left (only t2.*)
                              #  - CPUUtilization (percent): percentage CPUCreditUsage/average credit gain (only t2.*)
                              #Sent every 5 minutes, unless detailed monitoring activated (not free): every minute.
                              #Custom metrics available thanks to Perl daemon mon-put-instance-data.pl:
                              #  - Metrics:
                              #     - MemoryUtilization (percent), MemoryUsed|Available (megabytes)
                              #     - SwapUtilization (percent), SwapUsed (megabytes)
                              #     - DiskSpaceUtilization (percent), DiskSpaceUsed|Available (gigabytes)
                              #  - Options:
                              #     --mem|swap|disk-space-util|used|avail: select the custom metrics
                              #     --disk-path=PATH: select disk (mount point)
                              #     --memory|disk-space-units="[kilo|mega|giga]bytes"
                              #     --aws-credential-file=FILE or --aws-access-key-id=VAL and --aws-secret-key=VAL
                              #     --verify --verbose: test
                              #     --from-cron: stdout > /dev/null and stderr > system log. To use when used as cron job:
                              #        */5 * * * * ./mon-put-instance-data.pl ... --from-cron
                              #  - Can also use mon-get-instance-stats.pl to query from CloudWatch last stats:
                              #     --recent-hours=NUM
                              #     --aws-credential-file=FILE or --aws-access-key-id=VAL and --aws-secret-key=VAL
                              #     --verify --verbose: test
                              #  - Dependencies: unzip, libwww-perl, libcrypt-ssleay-perl, libswitch-perl

[Un]MonitorInstances()        #Turn on detailed monitoring.
                              #Request parameters:
                              #  - InstanceIds STR_ARR
                              #Response body: Instances OBJ_ARR:
                              #  - InstanceId STR
                              #  - Monitoring: State "disabled|enabled|pending"



           
   NETWORK  
           



INSTANCE-LIKE SERVICES ==>    #This part is in EC2 but applies for all instance-like services:
                              #  - EC2, ELB, RDS, ElastiCache, EMR, etc.
                              #  - but not S3, CloudFront, etc.

IP RANGES ==>                 #VPC: private IPs CIDR (mask 28 to 16).
                              #  - All network resources and instance-like are VPC-wise and cannot move between VPCs
                              #Subnet: subrange of private IPs CIDR inside a VPC, for specific RouteTable and AvailabilityZone
                              #  - First four and last one are "Amazon-reserved"
                              #NetworkInterface: sets of private IPs on an instance (and their associated public/elastic IPs)
                              #  - "secondary" (additional) privateIPs/NetworkInterfaces on same instance goals:
                              #     - can be attached|detached from the instance and moved to another instance ("remapping"),
                              #       carrying the associated public/elastic IPs with them
                              #        - prefer remapping NetworkInterfaces than only ElasticIP since it also keep Subnet and
                              #          Subnet-level resources (RouteTable, NetworkAcl, etc.).
                              #     - secondary private IPs: hosting several websites on same instance.
                              #     - secondary NetworkInterfaces:
                              #         - several Subnets (so RouteTable, NetworkAcl too) on same instance, e.g. one
                              #           communicating with the internet, and one communicating with the back-end
                              #         - must configure underlying OS (unless specified at RunInstances()-time).
                              #           Can use ec2-net-utils to do so.
                              #  - by def., 1 networkInterface eth0 with 1 primary private IP
                              #  - has a MAC address
                              #  - sourceDestCheck: if true (def), checks that networkInterface is original source of traffic
                              #    sent and final destination of traffic received. Disable it for proxies (e.g. NAT instances).

COMMUNICATION ==>             #Out-traffic uses RouteTable: subnet-level sets of routes, e.g. how to route ("target")
                              #according to "destination" IP (using a CIDR):
                              #  - target can be:
                              #     - "local": towards the same VPC (private IPs)
                              #     - InternetGateway: towards the internet (public IPs)
                              #     - VpnGateway:
                              #        - towards a private network using IPsec (VPN)
                              #        - targets a CustomerGateway
                              #        - EnableVgwPropagation: update RouteTable when creating|updating VpnGateway
                              #     - VpcPeeringConnection: towards another VPC (private IPs), one-way
                              #        - Can targets full CIDR of peered VPC, or only specific subnets
                              #        - CIDR must not overlap
                              #        - peered VPC must accept the request
                              #        - cannot resolve private DNS of peered VPC: must use private IPs instead
                              #     - Instance|NetworkInterface: sends to another Instance|NetworkInterface instead, usually a
                              #       proxy:
                              #        - NAT instance:
                              #           - proxy that interfaces private instances and the internet
                              #             Allows traffic out but not traffic in.
                              #           - Can find AMI configured to run as NAT instance with Name "amzn-ami-vpc-nat*"
                              #  - if two destination CIDR match, choose the one with highest mask
                              #  - there is always a default RouteTable (if none specified for a subnet), with only one
                              #    Route with "destination" VPC_CIDR and "target" "local"
                              #In-traffic:
                              #  - must have a public IP either:
                              #     - automatically assigned
                              #     - Elastic IP (don't work in VPN)
                              #  - often assigned on a LoadBalancer, then use private DNS hostnames to communicate inside the
                              #    VPC

IPS ==>                       #Private: in-traffic from the same VPC but not the internet
                              #  - automatically assigns one from current subnet if none specified
                              #Public: in-traffic from the internet
                              #  - Associated with a private IP (using NAT)
                              #  - Can be assigned:
                              #     - automatically:
                              #        - Subnet option MapPublicIpOnLaunch BOOL
                              #          (def: true if default VPC, false if non-default VPC)
                              #        - use DHCP, at each instance start|run or when an ElasticIP is disassociated
                              #        - associated to primary private IP of primary networkInterface
                              #     - with an ElasticIP (must request then associate it at each start|run), which allows
                              #       static IPs
                              #        - Can be remapped to another one (if instance fails)

DNS HOSTNAMES ==>             #  - public|private DNS hostnames automatically assigned (when IP is changed) if
                              #    EnableDnsHostnames true (VPC attributes) (def: true for default VPC, false for non-default)
                              #    DNS lookup works if EnableDnsSupport true (def: always true)
                              #  - Can modify DHCPOptions to use custom DNS server
                              #  - can use custom hostnames too

SECURITY ==>                  #Can control in|out traffic at:
                              #  - Instance-level (SecurityGroup)
                              #  - Subnet-level (NetworkAcl)

DEFAULT VPC ==>               #  - If no VPC specified, sets up:
                              #     - CIDR 172.31.0.0/16
                              #     - one subnet for each AvailabilityZone, with MapPublicIpOnLaunch true and mask /20
                              #     - one InternetGateway
                              #     - route 172.31.0.0/16 to "local" and 0.0.0.0/0 to InternetGateway
                              #     - VPC attributes: EnableDnsSupport and EnableDnsHostnames true
                              #  - "EC2-Classic" is previous version of EC2 (now it is "EC2-VPC"), available if old account
                              #    (before 2013). Different from default VPC.
                              #  - t2.* instances always use a non-default VPC

LIMITS ==>                    #  - 5 VPCs
                              #  - 200 subnets/VPC
                              #  - 1 InternetGateway/VPC, 1 VpnGateway/VPC
                              #  - 50 CustomerGateway/VPC, 10 VpnConnection/VpnGateway
                              #  - 200 RouteTable/VPC
                              #  - 50 Routes/RouteTable
                              #  - 5 Elastic IPs
                              #  - 100 SecurityGroup/VPC, 50 rules/SecurityGroup, 5 SecurityGroup/NetworkInterface
                              #  - 200 NetworkAcl/VPC, 40 rules/NetworkAcl
                              #  - 100 BgpAsn
                              #  - 50 VpcPeeringConnection

PRICING ==>                   #  - Elastic IP:
                              #     - 4$/month/ElasticIP (first free, only if associated)
                              #     - remaps: 1$/month for 10 AllocateAddress() (first 100/month free)
                              #  - 37$/VpnConnection/month (if full-time used, hourly based)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



CreateVpc()                   #Request parameters:
                              #  - CidrBlock STR
                              #  - InstanceTenancy "default|dedicated" (def: "default"): whether instances in the VPC are
                              #    "default|dedicated"
                              #Response body Vpc VPC_OBJ:
                              #  - VpcId STR
                              #  - State "pending|available"
                              #  - CidrBlock STR
                              #  - DhcpOptionsId STR
                              #  - Tags TAGS
                              #  - InstanceTenancy "default|dedicated"
                              #  - IsDefault BOOL
DeleteVpc()                   #Request parameters: VpcId STR
                              #Response body: Return BOOL
DescribeVpcs()                #Request parameters:
                              #  - VpcIds STR_ARR
                              #  - Filter VPC_OBJ_FILTER
                              #Response body: Vpcs VPC_OBJ_ARR
                              #Can use waitFor "vpcAvailable"
ModifyVpcAttribute()          #Request parameters:
                              #  - VpcId STR
                              #  - EnableDnsSupport BOOL
                              #  - EnableDnsHostnames BOOL
                              #Response body: Return BOOL
DescribeVpcAttribute()        #Request parameters:
                              #  - VpcId STR
                              #  - Attribute "enableDnsSupport|Hostnames"
                              #Response body:
                              #  - EnableDnsSupport BOOL
                              #  - EnableDnsHostnames BOOL

aws:SourceVpc                 #STR CONDITION_KEY. VPC_MID of the PRINCIPAL
aws:SourceVpce                #Same for VPC endpoints
aws:VpcSourceIp               #STR CONDITION_KEY. Like aws:sourceIp, except it is undefined unless going through a VPC endpoint

CreateSubnet()                #Request parameters:
                              #  - VpcId STR
                              #  - CidrBlock STR
                              #  - AvailabilityZone STR (def: Amazon selects one)
                              #Response body: Subnet SUBNET_OBJ:
                              #  - SubnetId STR
                              #  - State "pending|available"
                              #  - VpcId STR
                              #  - CidrBlock STR
                              #  - AvailableIpAddressCount NUM
                              #  - AvailabilityZone STR
                              #  - DefaultForAz BOOL: if true (def: false), becomes default Subnet for this AvailabilityZone
                              #  - MapPublicIpOnLaunch BOOL
                              #  - Tags TAGS
DeleteSubnet()                #Request parameters: SubnetId STR
                              #Response body: Return BOOL
DescribeSubnets()             #Request parameters:
                              #  - SubnetIds STR_ARR
                              #  - Filters SUBNET_OBJ_FILTER
                              #Response body: Subnets SUBNET_OBJ_ARR
                              #Can use waitFor "subnetAvailable"
ModifySubnetAttribute()       #Request parameters:
                              #  - SubnetId STR
                              #  - MapPublicIpOnLaunch BOOL_OBJ
                              #Response body: Return BOOL

CreateNetworkInterface()      #Request parameters:
                              #  - SubnetId STR
                              #  - PrivateIpAddresses OBJ_ARR (for all private IPs)
                              #     - PrivateIpAddress STR
                              #     - Primary STR
                              #  - SecondaryPrivateIpAddressCount NUM
                              #  - PrivateIpAddress STR (for primary private IP only)
                              #  - Description STR
                              #  - SecurityGroupId OBJ_ARR: GroupId STR
                              #Response body: NetworkInterfaces NETWORK_INTERFACE_OBJ_ARR
                              #  - all members of NETWORK_INTERFACE_ATTRIBUTE_OBJ
                              #  - SubnetId STR
                              #  - VpcId STR
                              #  - AvailabilityZone STR
                              #  - OwnerId ACCOUNT_ID
                              #  - RequesterManaged BOOL: if managed by an AWS service (e.g. AutoScaling)
                              #  - RequesterId STR
                              #  - Status "available|attaching|in-use|detaching"
                              #  - MacAddress STR
                              #  - Tags TAGS
                              #  - PrivateIpAddresses (for all private IPs)
                              #     - PrivateIpAddress STR
                              #     - PrivateDnsName STR
                              #     - Primary BOOL
                              #     - Association ASSOCIATION_OBJ:
                              #        - PublicIp STR
                              #        - AllocationId STR
                              #        - PublicDnsName STR
                              #        - IpOwnerId STR
                              #        - AssociationId STR
                              #  - PrivateIpAddress STR (for primary private IP only)
                              #  - PrivateDnsName STR (for primary private IP only)
                              #  - Association ASSOCIATION_OBJ (for primary private IP only)
DeleteNetworkInterface()      #Request parameters: NetworkInterfaceId STR
                              #Response body: Return BOOL
AttachNetworkInterface()      #Request parameters:
                              #  - NetworkInterfaceId STR
                              #  - InstanceId STR
                              #  - DeviceIndex NUM
                              #Response body: AttachmentId STR
DetachNetworkInterface()      #Request parameters:
                              #  - AttachmentId STR
                              #  - Force BOOL
                              #Response body: Return BOOL
AssignPrivateIpAddresses()    #Adds private IPs
                              #Request parameters:
                              #  - NetworkInterfaceId STR
                              #  - PrivateIpAddresses STR_ARR
                              #  - SecondaryPrivateIpAddressCount NUM (optional)
                              #  - AllowReassignment BOOL (def: false): can reassign private IP to another networkInterface
                              #Response body: Return BOOL
UnassignPrivateIpAddresses()  #Request parameters:
                              #  - NetworkInterfaceId STR
                              #  - PrivateIpAddresses OBJ_ARR:
                              #     - PrivateIpAddress STR
                              #Response body: Return BOOL
DescribeNetworkInterfaces()   #Request parameters:
                              #  - NetworkInterfaceIds STR_ARR
                              #  - Filters NETWORK_INTERFACE_OBJ_FILTER
                              #Response body: NetworkInterfaces NETWORK_INTERFACE_OBJ_ARR
DescribeNetwork               #Request parameters:
InterfaceAttribute()          #  - NetworkInterfaceId STR
                              #  - Attribute "description|groupSet|sourceDestCheck|attachment"
                              #Response body NETWORK_INTERFACE_ATTRIBUTE_OBJ:
                              #  - NetworkInterfaceId STR
                              #  - Description STR
                              #  - SourceDestCheck BOOL
                              #  - Groups SGROUP_OBJ_ARR
                              #  - Attachment:
                              #     - AttachmentId STR
                              #     - InstanceId STR
                              #     - InstanceOwnerId STR
                              #     - DeviceIndex NUM
                              #     - Status "attaching|attached|detaching|detached"
                              #     - AttachTime DATE_NUM
                              #     - DeleteOnTermination BOOL (def: true if AWS console, false if CLI)
ModifyNetwork                 #Request parameters:
InterfaceAttribute()          #  - NetworkInterfaceId STR
                              #  - Description STR_OBJ
                              #  - SecurityGroupIds STR_ARR
                              #  - SourceDestCheck STR_OBJ
                              #  - Attachment:
                              #     - AttachmentId STR
                              #     - DeleteOnTermination BOOL
                              #Response body: Return BOOL
ResetNetworkInterfaceAttribute#Request parameters:
                              #  - NetworkInterfaceId STR
                              #  - Attribute "SourceDeskCheck"
                              #Response body: Return BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ROUTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateInternetGateway()       #Response body: InternetGateway INTERNET_GATEWAY_OBJ:
                              #  - InternetGatewayId STR
                              #  - Attachments VPN_GATEWAY_OBJ_ARR
                              #  - Tags TAGS
DeleteInternetGateway()       #Request parameters: InternetGatewayId STR
                              #Response body: Return BOOL
DescribeInternetGateways()    #Request parameters:
                              #  - InternetGatewayIds STR_ARR
                              #  - Filters INTERNET_GATEWAY_OBJ_FILTER
                              #Response body: InternetGateways INTERNET_GATEWAY_OBJ_ARR
Attach|DetachInternetGateway()#Request parameters:
                              #  - InternetGatewayId STR
                              #  - VpcId STR
                              #Response body: Return BOOL

Create|ReplaceRoute()         #Request parameters ROUTE_OBJ:
                              #  - RouteTableId STR
                              #  - DestinationCidrBlock STR
                              #  - GatewayId STR: VpnGatewayId, InternetGatewayId or "local"
                              #  - VpcPeeringConnectionId STR
                              #  - InstanceId|NetworkInterfaceId STR
                              #Response body: Return BOOL
DeleteRoute()                 #Request parameters:
                              #  - RouteTableId STR
                              #  - DestinationCidrBlock STR
                              #Response body: Return BOOL
CreateRouteTable()            #Request parameters: VpcId STR
                              #Response body: RouteTable ROUTE_TABLE_OBJ:
                              #  - RouteTableId STR
                              #  - VpcId STR
                              #  - Routes OBJ_ARR:
                              #     - same as ROUTE_OBJ without RouteTableId
                              #     - InstanceOwnerId STR
                              #     - State "active|blackhole"
                              #     - Origin "CreateRouteTable|CreateRoute|EnableVgwPropagation"
                              #  - Associations OBJ_ARR:
                              #     - RouteTableAssociationId STR
                              #     - RouteTableId STR
                              #     - SubnetId STR
                              #     - Main BOOL
                              #  - PropagatingVgws OBJ_ARR:
                              #     - GatewayId STR
                              #  - Tags TAGS
DeleteRouteTable()            #Request parameters: RouteTableId  STR
                              #Response body: Return BOOL
DescribeRouteTables()         #Request parameters:
                              #  - RouteTableIds STR_ARR
                              #  - Filters ROUTE_TABLE_OBJ_FILTER
                              #Response body: RouteTables ROUTE_TABLE_OBJ_ARR
AssociateRouteTable()         #Request parameters:
                              #  - RouteTableId STR
                              #  - SubnetId STR
                              #Response body: AssociationId STR
DisassociateRouteTable()      #Request parameters:
                              #  - AssociationId STR
                              #Response body: Return BOOL
ReplaceRouteTableAssociation()#Request parameters:
                              #  - AssociationId STR
                              #  - RouteTableId STR
                              #Response body: NewAssociationId STR
Enable|                       #Request parameters:
DisableVgwRoutePropagation()  #  - RouteTableId STR
                              #  - GatewayId STR
                              #Response body: Return BOOL

CreateVpcPeeringConnection()  #Request parameters:
                              #  - VpcId STR
                              #  - PeerVpcId STR
                              #  - PeerOwnerId ACCOUNT_ID
                              #Response body: VpcPeeringConnection VPC_CONNECTION_OBJ:
                              #  - VpcPeeringConnectionId STR
                              #  - Requester|AccepterVpcInfo:
                              #     - vpcId STR
                              #     - ownerId STR
                              #     - cidrBlock STR
                              #  - Status:
                              #     - code "initiating-request|pending-acceptance|failed|expired|provisioning|active|deleted|
                              #       rejected"
                              #     - message STR
                              #  - ExpirationTime DATE_NUM
                              #  - Tags TAGS
DeleteVpcPeeringConnection()  #Request parameters: VpcPeeringConnectionId STR
                              #Response body: Return BOOL
AcceptVpcPeeringConnection()  #Request parameters: VpcPeeringConnectionId STR
                              #Response body: VpcPeeringConnection VPC_CONNECTION_OBJ
RejectVpcPeeringConnection()  #Request parameters: VpcPeeringConnectionId STR
                              #Response body: Return BOOL
DescribeVpcPeeringConnections #Request parameters:
                              #  - VpsPeeringConnectionIds STR_ARR
                              #  - Filter VPC_CONNECTION_OBJ_FILTER
                              #Response body: VpcPeeringConnections VPC_CONNECTION_OBJ_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ADDRESSES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateDhcpOptions()           #VPCs get a default DhcpOptions with domain-name-servers "AmazonProvidedDNS" and domain-name
                              #"REGION.compute.internal" or "ec2.internal"
                              #Request parameters: DhcpConfigurations DHCP_COBJ_ARR
                              #Response body: DhcpOptions DHCP_OPT_OBJ:
                              #  - DhcpOptionsId STR
                              #  - DhcpConfigurations DHCP_COBJ_ARR:
                              #     - domain-name-servers "IP[,...]": max 4. Can be "AmazonProvidedDNS" for Amazon default.
                              #       AmazonProvidedDNS server is actually at VPC third address.
                              #     - domain-name "DOMAIN [...]":
                              #        - domain name used for private DNS (which are subdomains)
                              #        - DOMAIN can be REGION.compute.internal for Amazon default, except for REGION
                              #          "us-east-1" where it is "ec2.internal"
                              #     - ntp-servers IP_ARR (max 4)
                              #     - netbios-name-servers IP_ARR (max 4)
                              #     - netbios-node-type 1|2|4|8: should use 2 (broadcast and multicast not supported)
                              #  - Tags TAGS
AssociateDhcpOptions()        #Request parameters:
                              #  - DhcpOptionsId STR
                              #  - VpcId STR
                              #Response body: Return BOOL
DescribeDhcpOptions()         #Request parameters:
                              #  - DhcpOptionsIds STR_ARR
                              #  - Filters DHCP_OPT_OBJ_FILTER
                              #Response body: DhcpOptions DHCP_OPT_OBJ
DeleteDhcpOptions()           #Request parameters: DhcpOptionsId STR
                              #Response body: Return BOOL

AllocateAddress()             #Ask for a new Elastic IP.
                              #Response body:
                              #  - PublicIp STR
                              #  - AllocationId STR
                              #  - Domain "vpc"
ReleaseAddress()              #Ask to remove from Elastic IP list.
                              #Request parameters: AllocationId STR
                              #Response body: Return BOOL
AssociateAddress()            #Associate an Elastic IP with an instance's private IP
                              #Request parameters:
                              #  - PublicIp|AllocationId STR
                              #  - InstanceId|NetworkInterfaceId STR (must use NetworkInterfaceId if several NetworkInterface)
                              #  - PrivateIpAddress STR (def: primary private IP)
                              #  - AllowReassociation BOOL (def: false): allows doing AssociateAddress() with same
                              #    Instance|NetworkInterface and same ElasticIP
                              #Response body:
                              #  - AssociationId STR
                              #  - Return BOOL
DisassociateAddress()         #Request parameters: PublicIp|AllocationId STR
                              #Response body: Return BOOL
DescribeAddresses()           #Request parameters:
                              #  - PublicIp STR_ARR
                              #  - AllocationId STR_ARR
                              #  - Filters ADDRESS_OBJ_FILTER
                              #Response body: Addresses ADDRESS_OBJ_ARR:
                              #  - Domain "standard|vpc"
                              #  - InstanceId STR
                              #  - PublicIp STR
                              #  - AllocationId STR
                              #  - AssociationId STR
                              #  - NetworkInterfaceId STR
                              #  - NetworkInterfaceOwnerId STR
                              #  - PrivateIpAddress STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SECURITY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECURITY ==>                  #SecurityGroup:
                              #  - Instance-level or NetworkInterface-level
                              #     - for one or several instance/NetworkInterface (each can have one/several security groups)
                              #  - allow (or'd)
                              #     - if no ingress rules, forbids all. If no egress rules, allows all.
                              #  - response not checked if request allowed
                              #  - default one (assigned to instance-like if none specified):
                              #     - allows any source with same security group (default one)
                              #     - allows any destination
                              #  - checks securityGroup, IP ranges, protocol, port
                              #     - using securityGroup instead of IP ranges is more flexible
                              #NetworkAcl:
                              #  - Subnet-level
                              #  - allow|deny (or'd), in rule number order
                              #     - if no ingress|egress rules, forbids all.
                              #     - there is a special rule with number "*" (same as 32767), non-modifiable, which denies
                              #       access if all other rules didn't pass
                              #  - response checked even if request allowed
                              #  - default one (can be replaced) (assigned to subnet if none specified):
                              #     - allows any source|destination
                              #  - checks IP ranges, protocol, port
                              #Both:
                              #  - for in|out traffic (ingress|egress)

CreateSecurityGroup()         #Request parameters:
                              #  - GroupName SGROUP_NAME
                              #  - Description STR
                              #  - VpcId STR (def: default VPC)
                              #Response body:
                              #  - Return BOOL
                              #  - GroupId SGROUP_ID
AuthorizeSecurity             #IpPermissions is for the destination, other are for the source.
GroupEgress|Ingress()         #Request parameters:
                              #  - GroupId SGROUP_ID
                              #  - IpProtocol PROTOCOL
                              #  - FromPort|ToPort NUM
                              #  - CidrIp STR
                              #  - SourceSecurityGroupName|GroupOwnerId SGROUP_NAME|ID:
                              #     - allow instances using those security groups as source
                              #     - use Name for non-VPC, Id for VPC
                              #     - if VPC, must be in same VPC
                              #     - if not VPC and different region and ACCOUNT_ID, must use ACCOUNT_ID/SGROUP_NAME
                              #  - IpPermissions IP_PERMISSION_OBJ_ARR:
                              #     - IpProtocol PROTOCOL "tcp|udp|icmp" or protocol NUM (-1 for all)
                              #        - only VPC can protocol other than "tcp|udp|icmp"
                              #     - FromPort|ToPort NUM: port range for TCP|UDP, type number for ICMP (-1 for all)
                              #     - IpRanges OBJ_ARR:
                              #        - CidrIp STR (not if SourceSecurityGroup*) (e.g. "203.0.113.1/32")
                              #     - UserIdGroupPairs OBJ_ARR: same as SourceSecurityGroup* but for destination
                              #        - UserId USER_ID
                              #        - GroupId SGROUP_ID
                              #        - GroupName STR
                              #Response body: Return BOOL
RevokeSecurity                #Request parameters:
GroupEgress|Ingress()         #  - GroupId SGROUP_ID
                              #  - IpPermissions IP_PERMISSION_OBJ_ARR
                              #Response body: Return BOOL
DeleteSecurityGroup()         #Request parameters:
                              #  - GroupName SGROUP_NAME
                              #  - GroupId SGROUP_ID
                              #Response body: Return BOOL
DescribeSecurityGroups()      #Request parameters:
                              #  - GroupName|GroupId STR_ARR
                              #  - Filters SECURITY_GROUP_OBJ_FILTER
                              #Response body: SecurityGroupInfos SECURITY_GROUP_OBJ_ARR:
                              #  - GroupId SGROUP_ID
                              #  - GroupName SGROUP_NAME
                              #  - GroupDescription STR
                              #  - VpcId STR
                              #  - OwnerId ACCOUNT_ID
                              #  - IpPermissions[Egress] IP_PERMISSION_OBJ_ARR (but UserIdGroupPairs->Groups)

CreateNetworkAcl()            #Request parameters: VpcId STR (def: default VPC)
                              #Response body: NetworkAcl NETWORK_ACL_OBJ:
                              #  - NetworkAclId STR
                              #  - VpcId STR
                              #  - Default BOOL: for subnets that don't have any NetworkAcl assigned
                              #  - Entries NETWORK_ACL_ENTRY_OBJ_ARR:
                              #     - RuleNumber 1-32766 (should let rooms for addition, e.g. using multiple of 100)
                              #     - Egress BOOL
                              #     - RuleAction "allow|deny"
                              #     - Protocol NUM (-1 for all)
                              #     - CidrBlock STR
                              #     - PortRange: From|To NUM
                              #     - IcmpTypeCode:
                              #        - Code NUM
                              #        - Type NUM
                              #  - Associations OBJ_ARR:
                              #     - SubnetId STR
                              #     - NetworkAclId STR
                              #     - NetworkAclAssociationId STR
                              #  - Tags TAGS
Create|ReplaceNetworkAclEntry #Request parameters NETWORK_ACL_ENTRY_OBJ, with also:
                              #  - NetworkAclId STR
                              #Response body: Return BOOL
ReplaceNetworkAclAssociation()#Request parameters:
                              #  - AssociationId STR
                              #  - NetworkAclId STR
                              #Response body: NewAssociationId STR
DeleteNetworkAclEntry()       #Request parameters:
                              #  - NetworkAclId STR
                              #  - RuleNumber NUM
                              #  - Egress BOOL
                              #Response body: Return BOOL
DeleteNetworkAcl()            #Request parameters: NetworkAclId STR
                              #Response body: Return BOOL
DescribeNetworkAcls()         #Request parameters:
                              #  - NetworkAclIds STR_ARR
                              #  - Filters NETWORK_ACL_OBJ_FILTER
                              #Response body: NetworkAcls NETWORK_ACL_OBJ_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              VPN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateVpnGateway()            #Is not free (see above).
                              #Request parameters:
                              #  - Type "ipsec.1"
                              #  - AvailabilityZone ZONE
                              #Response body: VpnGateway VPN_GATEWAY_OBJ:
                              #  - Type "ipsec.1"
                              #  - AvailabilityZone ZONE
                              #  - VpnGatewayId STR
                              #  - State "pending|available|deleting|deleted"
                              #  - Attachments VPC_ATTACHMENT:
                              #     - VpcId STR
                              #     - State "attaching|attached|detaching|detached"
                              #  - Tags TAG_OBJ_ARR
DeleteVpnGateway()            #Request parameters: VpnGatewayId STR
                              #Response body: Return BOOL
AttachVpnGateway()            #Request parameters:
                              #  - VpnGatewayId STR
                              #  - VpcId STR
                              #Response body: Attachment VPC_ATTACHMENT
DetachVpnGateway()            #Request parameters:
                              #  - VpnGatewayId STR
                              #  - VpcId STR
                              #Response body: Return BOOL
DescribeVpnGateways()         #Request parameters:
                              #  - VpnGatewayIds STR_ARR
                              #  - Filters VPN_GATEWAY_OBJ_FILTER
                              #Response body: VpnGateways VPN_GATEWAY_OBJ_ARR

CreateCustomerGateway()       #Request parameters:
                              #  - Type "ipsec.1"
                              #  - IpAddress STR
                              #  - BgpAsn NUM (for BGP-enabled devices)
                              #Response body: CustomerGateway CUSTOMER_GATEWAY_OBJ:
                              #  - Type "ipsec.1"
                              #  - CustomerGatewayId STR
                              #  - State "pending|available|deleting|deleted"
                              #  - IpAddress STR
                              #  - BgpAsn NUM
                              #  - Tags TAGS
DeleteCustomerGateway()       #Request parameters: CustomerGatewayId STR
                              #Response body: Return BOOL
DescribeCustomerGateways()    #Request parameters:
                              #  - CustomerGatewayIds STR_ARR
                              #  - Filters CUSTOMER_GATEWAY_OBJ_FILTER
                              #Response body: customerGatewaySet CUSTOMER_GATEWAY_OBJ
                              #Can use waitFor "customerGatewayAvailable"

CreateVpnConnection()         #Request parameters:
                              #  - Type "ipsec.1"
                              #  - CustomerGatewayId STR
                              #  - VpnGatewayId STR
                              #  - Options: StaticRoutesOnly BOOL (true if no BGP)
                              #Response body: VpnConnection VPN_CONNECTION_OBJ:
                              #  - VpnConnectionId STR
                              #  - State "pending|available|deleting|deleted"
                              #  - CustomerGatewayConfiguration STR
                              #  - Type "ipsec.1"
                              #  - CustomerGatewayId STR
                              #  - VpnGatewayId STR
                              #  - Tags TAGS
                              #  - VgwTelemetries OBJ_ARR:
                              #     - OutsideIpAddress STR
                              #     - Status "UP|DOWN"
                              #     - LastStatusChange DATE_NUM
                              #     - StatusMessage STR
                              #     - AcceptedRouteCount NUM
                              #  - Options: StaticRoutesOnly BOOL
                              #  - Routes:
                              #     - DestinationCidrBlock STR
                              #     - Source "static" or undefined
                              #     - State "pending|available|deleting|deleted"
DeleteVpnConnection()         #Request parameters: VpnConnectionId STR
                              #Response body: Return BOOL
DescribeVpnConnections()      #Request parameters:
                              #  - VpnConnectionIds STR_ARR
                              #  - Filters VPN_CONNECTION_OBJ_FILTER
                              #Response body: VpnConnections VPN_CONNECTION_OBJ_ARR
                              #Can use waitFor "vpnConnectionAvailable|Deleted"
Create|                       #Request parameters:
DeleteVpnConnectionRoute()    #  - DestinationCidrBlock STR
                              #  - VpnConnectionId STR
                              #Response body: Return BOOL
