
       
   AWS  
       


TODO ==>
  - see https://docs.aws.amazon.com/general/latest/gr
  - AWS organizations
     - fix IAM doc mentioning ORG|organization
  - AWS Certificate Manager

REGIONS ==>                   #For:
                              #  - Regions: us-east-1 (N.Virginia), us-west-1 (San Francisco), us-west-2 (Oregon),
                              #    eu-west-1 (Ireland), ap-southeast-1 (Singapore), ap-southeast-2 (Sydney),
                              #    ap-northeast-1 (Tokyo), sa-east-1 (Sao Paulo)
                              #  - goal: regulation and faster|cheaper access
                              #  - resources are only stored in one specific region (but can be accessed anywhere)
                              #  - Exceptions:
                              #     - no REGION: Cloudfront, DevPay, Mechanical Turk, Route53, IAM, OpsWork, Import/Export, STS, Support
                              #     - only us-east-1: Cognito, Mobile analytics
                              #     - only us-east-1, us-west-2, eu-west-1: SES
                              #     - no ap-southeast-2, sa-east-1: ElasticTranscoder, Glacier, Kinesis, Redshift
                              #     - no ap-southeast-1, sa-east-1, us-west-1: DataPipeline
                              #  - Special REGION us-gov-west-1, with extra regulatory things
                              #  - REST API endpoints must be PROTOCOL://SERVICE.REGION.amazonaws.com:
                              #     - https://SERVICE-REGION.amazonaws.com for S3
                              #  - PROTOCOL:
                              #     - HTTPS for most
                              #     - HTTP[S] for CloudWatch, DynamoDB, EC2, EMR, Glacier, SimpleDB, SNS, SQS, S3, AutoScaling, ELB
                              #  - Communication between REGION is accross the internet, so should use HTTPS
                              #Cost varies per region
                              #  - this documentation shows the cheapest, i.e. US

PARTITION                     #Group of REGIONs:
                              #  - 'aws-cn': China
                              #  - 'aws-us-gov'
                              #  - 'aws': everything else

ARN                           #Resource identifier
                              #"Amazon Resource Name" URI scheme
                              #'arn:PARTITION:SERVICE:[REGION]:[ACCOUNT_ID]:[RESOURCE_TYPE:][ARN_PATH/]NAME'
                              #Parts can sometimes use wildcard *
NAME                          #Resource name.
                              #Must be [[:alnum:]+=,.@-/]
                              #Must be unique even without path.
                              #Max 64 chars, 512 for path.
ARN_PATH                      #'[/...]/'. Namespaces a NAME.
                              #Def: '/'
                              #ASCII only
                              #Only for specific SERVICEs
                              #Some List*() actions have a PathPrefix STR parameter, to search from start
MID                           #Resource ID generated by AWS when creating some resources
                              #21 chars, [A-Z0-9]
                              #Unlike ARN:
                              #  - does not change on NAME update
                              #  - not human-friendly

SERVICE                       #AWS service. Lowercase.
SERVICE_ACTION                #REST method name for a given SERVICE. Capitalized.
AWS_ACTION                    #'SERVICE:SERVICE_ACTION'
                              #Can use wildcard *
SERVICE_DOMAIN                #'SERVICE.amazonaws.com'

ACCOUNT_ID                    #AWS account short ID
CANONICAL_ACCOUNT_ID          #AWS account long ID longer version
                              #Used in very specific cases

AWS ACCOUNTS ==>              #Using different accounts for dev and production is good to avoid hitting limits.

AWS CLIENTS ==>               #  - REST API
                              #  - Web app (AWS console)
                              #  - CLI
                              #  - JavaScript (Node module / web script)
                              #  - Other languages

'DATE'                        #'YYYY-MM-DDTHH:MM:SS.SSSZ'
DATE_NUM                      #Epoch in ms

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SERVICES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUMMARY ==>
                              #  - Security:
                              #     - IAM/STS: permissions/credentials
                              #     - CognitoIdentity: cross-device identification
                              #  - Monitoring:
                              #     - CloudTrail: logs AWS API calls
                              #     - CloudWatch: logs metrics
                              #  - Automating:
                              #     - AutoScaling: launch|terminate EC2 instances
                              #     - SWF: task coordination
                              #     - Beanstalk: fast manage of stack of AWS resources
                              #     - CloudFormation: good but harder manage of stack of AWS resources
                              #  - Networking:
                              #     - VPC: general (including security, VPN)
                              #     - Route53: DNS server
                              #     - ELB: load balancing
                              #  - Virtual servers:
                              #     - EC2: long-running
                              #     - Lambda: on-demand
                              #     - ElastiCache: Redis/Memcached
                              #     - RDS: SQL Database
                              #  - Storage:
                              #     - EBS: virtual internal hard drive
                              #     - S3: virtual external hard drive
                              #     - CloudFront: CDN on top of S3 (lower latency)
                              #     - Glacier: cheap archiving
                              #     - CognitoSync
                              #  - Message passing:
                              #     - SQS: Inter-process
                              #     - SNS: towards emails|sms|push notification|HTTP[S]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SUPPORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING ==>                   #  - basic: free
                              #  - developer: 49$/month
                              #  - business: 10% of AWS usage (or min. 100$/month)
                              #  - enterprise: 10% of AWS usage (or min. 15000$/month)

BASIC FEATURES ==>            #  - Account/billing questions
                              #  - Limits increase requests
                              #  - Trusted Advisor limited: close to service limit, SecurityGroups, IAM, MFA, 1 check/week
                              #  - Forums

DEVELOPER FEATURES ==>        #  - Technical support (web, business hours, 12 hours response time)
                              #     - Service healthchecks fails have higher priority
                              #     - Client-side diagnostic tools, to help technical support
                              #  - General advice consulting

BUSINESS FEATURES ==>         #  - Specific case consulting
                              #  - Technical support (web, phone, live chat, 24/7, 1 hour response time), with more experienced
                              #  - support::* IAM actions
                              #  - Trusted Advisor: automatic saving money, security, performance, reliability audit, 1 check/day
                              #  - REST API for AWS Support (creating Technical support case, and using Trusted Advisor)
                              #  - Support on third-party tools (e.g. OS used on EC2 instances)

ENTERPRISE FEATURES ==>       #  - Architecture specific case consulting
                              #  - Technical support even more experienced (15 mins response time, direct personal access)
                              #  - Connected to solution architects
                              #  - Event hand-to-hand help (one to three months)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BILLING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS CONSOLE ==>               #Must be used
                              #Bill details, invoices, including history and payment methods.

USAGE REPORTS ==>             #  - CSV for each service
                              #  - Detailed reports must be enabled and saved daily on a S3 BUCKET.
                              #    Without detailed, monthly report without tag is available on the console.
                              #  - Can be monthly or hourly
                              #  - Can have tags associated to resources, and resource IDs or not.
                              #  - "Blended rate" is normal cost, "Unblended rate" is average cost for other customers for
                              #    this type of resource.

COST EXPLORER ==>             #  - timeline of costs.
                              #  - Can be by service, ACCOUNT_ID, tags

IAM ==>                       #  - Can give access to some page to some IAM users (otherwise only root):
                              #     - Resource "*"
                              #     - Action "aws-portal:View|ModifyPAGE",
                              #       where PAGE is "Usage|PaymentMethods|Account" (single tab) or "Billing" (all others)
                              #        - also "ec2-reports:ViewInstanceUsageReport" and
                              #          "ec2-reports:ViewReservedInstanceUtilizationReport"

CLOUDWATCH ==>                #METRIC EstimatedCharges:
                              #  - Estimated monthly cost, sent by each SERVICE
                              #  - Dimensions: Currency "USD", ServiceName SERVICE, LinkedAccount ACCOUNT_ID
                              #  - Must enable it in AWS console.
                              #  - Caught from all REGION, but displayed in us-east-1

PAYMENT OFFERS ==>            #  - AWS Free Tier: Makes medium usage free for first year. Must sign up for it.
                              #  - Consolidated billing: one bill for several accounts in a single AWS organization


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          API REQUEST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOMAIN ==>                    #https://SERVICE[.REGION].amazonaws.com/

HTTP METHOD ==>               #Either GET|POST, for any ACTION

Content-Type [C|S]            #Depending on SERVICE:
                              #  - application/x-www-form-urlencoded
                              #  - XML
                              #VAL_ARR:
                              #  - query variable: VAR.NUM. (1-based)
                              #  - JSON: ARR
                              #  - XML: <KEYSet|KEYList><VAR></VAR>...</KEYSet|KEYList>
Content-Length [C|S]          #
Content-MD5 [C]               #Only for S3

REQ                           #Request parameters
                              #Instead of request body, can also use query variables

REQ.Action                    #AWS_ACTION
REQ.Version                   #'YYYY-MM-DD'. Service API version

REQ.DryRun                    #BOOL. Checks authorization without doing anything.
                              #Returns DryRunOperation if no problem, UnauthorizedOperation otherwise.

REQ.ClientToken               #STR. Do not perform if already performed with same STR. Meant for idempotence.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         API RESPONSE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Connection [S]                #
Date [S]                      #
Server [S]                    #'AmazonS3'
ETag [S]                      #MD5. Of content, not metadata.

RES                           #Response body

RES.Errors                    #OBJ_ARR: Code STR, Message STR

REQ_ID                        #Depending on SERVICE:
                              #  - RES.requestId
                              #  - Request-Id [S]

EVENTUAL CONSISTENCY ==>      #After change, should test existence, with exponential retry delays up to a limit (e.g. 5 mins)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         TRUE REST API         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRUE REST API ==>             #Some SERVICEs use different API conventions, closer to true REST

HTTP METHOD ==>               #Any

PATH ==>                      #Represents the AWS_ACTION
                              #Present in my documentation
REQ.Action                    #Not used

X-Amz-HEADER [C|S]            #Use HEADER [C|S] instead

RES.Errors                    #OBJ_ARR: Code STR, Message STR, Resource STR, RequestId STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTHORIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION 4 SIGNATURE A ==>     #
REQ.X-Amz-Algorithm           #'AWS4-HMAC-SHA256'
REQ.X-Amz-Credential          #'RANDOM/DATE/REGION/SERVICE/aws4_request'
REQ.X-Amz-SignedHeaders       #'HEADER'_ARR
REQ.X-Amz-Signature           #HASH
REQ.X-Amz-Content-SHA256      #
REQ.[X-Amz-]Date              #'DATE'

VERSION 4 SIGNATURE B ==>     #Alternative
Authorization:
 AWS4-HMAC-SHA256 [C]         #Of AUTH_VAR=VAL,...
AUTH_VAR Credential           #'RANDOM/DATE/REGION/SERVICE/aws4_request'
AUTH_VAR SignedHeaders        #'HEADER,...'
AUTH_VAR Signature            #HASH
X-Amz-Date [C]                #'DATE'

VERSION 2 SIGNATURE ==>       #Only for SimpleDB
REQ.AWSAccessKeyId            #ACCESS_KEY_ID
REQ.SignatureVersion          #2
REQ.SignatureMethod           #'HmacSHA256'
REQ.Signature                 #HMAC_SHA256() of:
                              #  - HTTP method
                              #  - URI
                              #  - Host [C]
                              #  - all request parameters
                              #     - including AWSAccessKkeyId, Action, SignatureMethod, SignatureVersion, Timestamp
                              #Signed with SECRET_ACCESS_KEY.
REQ.Timestamp                 #'DATE'

REQ.X-Amz-SecurityToken       #STS 'SESSION_TOKEN' or DevPay token


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          JAVASCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NODE.JS SDK ==>               #Usually AWS = require("aws-sdk")
                              #Version 2.0.15

AWSCONFIG                     #Can be:
                              #  - AWS.config
                              #  - ~/.aws/credentials:
                              #     - INI file, with underscore and aws_*, e.g. aws_access_key_id
                              #     - { "profile PROFILE": AWSCONFIG ... }:
                              #     - can also get AWSCONFIG.credentials with AWS.SharedIniFileCredentials({ profile: PROFIL })
                              #  - ENVVAR, e.g. AWS_[DEFAULT_]ACCESS_KEY_ID
                              #  - AWS.config.loadFromPath(AWSCONFIG_JSON_FILE)
                              #  - AWS.config.update(AWSCONFIG)

AWSCONFIG.accessKeyId         #
AWSCONFIG.secretAccessKey     #
AWSCONFIG.sessionToken        #
AWSCONFIG.credentials         #CREDENTIAL_OBJ:
                              #  - instantiated by:
                              #     - new AWS.Credential(ACCESS_KEY_ID, SECRET_ACCESS_KEY[, SESSION_TOKEN])
                              #     - new AWS.Credential(AWSCONFIG)
                              #  - accessKeyId|secretAccessKey|sessionToken
                              #  - expired BOOL
                              #  - expireTime DATE
                              #  - expiryWindow UINT (e.g. 15, in mins)
                              #  - needsRefresh()->BOOL
                              #  - refresh(FUNC(ERROR))
                              #  - get(FUNC(ERROR)): same but only refresh() if needsRefresh()
                              #  - Should not need it:
                              #     - automatically created from other AWSCONFIG members
                              #     - automatically refreshed
                              #Non usual credentials (e.g. different types of roles) have extra members, must do
                              #credentials = new AWS.*Credentials(...):
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:getSessionToken(OBJ) (if not OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:assumeRole(OBJ) (if OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.SAMLCredentials(OBJ) -> sts:assumeRoleWithSAML(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #   - new AWS.WebIdentityCredentials(OBJ) -> sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #   - new AWS.CognitoIdentityCredentials(OBJ) -> cognito:getOpenIdToken(OBJ) then
                              #     sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #      - CREDENTIAL_OBJ.identityId STR, CREDENTIAL_OBJ.getId(FUNC(STR))
                              #   - new AWS.EnvironmentCredentials(STR) -> uses ENVVAR STR_* (e.g. "AWS")
                              #      - CREDENTIAL_OBJ.envPrefix STR
                              #   - new AWS.FilesystemCredentials(FILE) -> uses JSON config file
                              #      - CREDENTIAL_OBJ.filename STR
                              #   - new AWS.SharedIniFileCredentials(OBJ) -> uses INI config file, with OBJ.profile and
                              #     OBJ.filename (def: "~/.aws/credentials")
                              #   - new AWS.CredentialProviderChain(ARR): uses several AWS.*Credentials as a chain
                              #   - new AWS.EC2MetadataCredentials(OBJ)
AWSCONFIG.region              #STR
AWSCONFIG.sslEnabled          #BOOL (def: true)
AWSCONFIG.maxRetries          #UINT (def: undefined)
AWSCONFIG.maxRedirects        #UINT (def: 10)
AWSCONFIG.logger              #OBJ, any OBJ with either .write() or log() (e.g. process.stdout or console)
AWSCONFIG.apiVersions         #OBJ:
                              #  - SERVICE: VERSION_STR (or "latest" (def))
AWSCONFIG.httpOptions         #OBJ:
                              #  - proxy URL
                              #  - agent AGENT (def: HTTP.globalAgent)
                              #  - timeout UINT
                              #  - xhrWithCredentials BOOL (def: false, browser only)
AWSCONFIG.endpoint            #URL (automatically configured)
AWSCONFIG.computeChecksums    #If true (def), client computes Content-MD5 [C]
AWSCONFIG.profile             #PROFILE (def: "default", or ENVVAR AWS_DEFAULT_PROFILE)

new AWS.SERVICE([AWSCONFIG])  #Returns SERVICE
                              #AWSCONFIG can take:
                              #  - params OBJ: used as default REQ_OBJ (if acceptable arguments)
                              #  - apiVersion VERSION_STR
SERVICE.config                #AWSCONFIG

SERVICE.ACTION([REQ_OBJ]      #  - if no FUNC, returns AWSREQ:
[, FUNC(ERROR, RES_OBJ)])     #     - must use AWSREQ.send()
                              #     - event handlers:
                              #        - success FUNC(ALL_OBJ), where ALL_OBJ:
                              #           - data RES_OBJ
                              #           - error ERROR
                              #           - request.params REQ_OBJ
                              #           - requestId STR
                              #           - redirectCount NUM
                              #           - retryCount NUM: automatically done by SDK
                              #           - hasNextPage() BOOL and nextPage(FUNC(ERROR, RES_OBJ)): pagination
                              #           - httpResponse:
                              #              - body STR
                              #              - headers OBJ
                              #              - statusCode NUM
                              #              - stream ISTREAM
                              #        - error FUNC(ERROR, ALL_OBJ)
                              #        - complete FUNC(ALL_OBJ): either success or error
                              #        - httpData FUNC(CHUNK, ALL_OBJ): for streaming big answers
                              #     - createReadStream() -> ISTREAM, in order to ISTREAM.pipe(OSTREAM)
                              #     - abort()
                              #     - httpRequest OBJ:
                              #        - body STR
                              #        - headers OBJ
                              #        - method STR
                              #        - path STR
                              #        - endpoint OBJ: host, hostname, href, port, protocol
                              #  - ACTION is same case except first letter is lowercase
                              #  - REQ_OBJ:
                              #     - any query variable, request body OBJ.VAR or request header (without potential x-amz-)
                              #     - Body BUFFER|TYPEDARRAY|BLOB|STR|ISTREAM for request body that is not OBJ
                              #       (body for Glacier)
                              #     - DryRun BOOL (def: false): always available
                              #  - REQ_OBJ|RES_OBJ:
                              #     - VAL_ARR -> ARR:
                              #        - VAR.NUM. -> VAR_ARR (with extra s)
                              #        - <KEYSet|List><VAR></VAR>...</KEYSet|List> -> KEY_ARR (without VAR level)
                              #  - RES_OBJ:
                              #     - as opposed to request body, strip:
                              #        - first level of response (englobbing XML tag), often { KEYResponse: OBJ } -> OBJ
                              #        - second level sometimes, often { KEYResponse: { KEYResult: OBJ } } -> OBJ
                              #     - otherwise as is (but JSON not XML)
SERVICE.apiVersions           #STR_ARR
SERVICE.endpoint              #URL
SERVICE.waitFor('STATE',      #  - Only fires FUNC() once a condition happened
REQ_OBJ, FUNC(ERROR, RES_OBJ))#  - STATE depends on SERVICE
                              #  - polls by calling an underlying SERVICE.ACTION(REQ_OBJ) every NUM secs (depends on SERVICE),
                              #    and checks results according to STATE

JAVASCRIPT BROWSER SDK ==>    #Like Node.js but:
                              #  - Script aws-sdk-VERSION.min.js -> window.AWS
                              #  - only has SERVICE: S3, SNS, STS, SQS, Kinesis, CloudWatch, DynamoDB
                              #  - to create own SDK, must git clone, then node dist-tools/browser-builder SERVICE,...,
                              #    optionally with ENVVAR MINIMY=1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI ==>                       #  - Python, not Node.js, so must use pip to install|upgrade
                              #  - AWSCONFIG:
                              #     - cannot use AWS.* but can use the rest
                              #     - also ~/.aws/config, like ~/.aws/credentials (or ENVVAR AWS_CONFIG_FILE) but CLI-specific
                              #       and use [profile PROFILE] instead of [PROFILE], and should not store credentials
                              #     - also interactive with aws configure [--profile PROFILE] or:
                              #        - aws configure list [--profile PROFILE]
                              #        - aws configure get [PROFILE.]VAR [--profile PROFILE]
                              #        - aws configure set [PROFILE.]VAR VAL [--profile PROFILE]
                              #     - use aws ... --VAR VAL
                              #     - extra members:
                              #        - output: json (def), text, table
                              #  - SERVICE not supported yet: Glacier, CloudHSM, AppStream, Mobile Analytics
                              #  - SERVICE required to put AWSCONFIG.SERVICE (lowercased) true in PROFILE "preview": cloudfront
                              #  - SERVICE with normal + higher-level API:
                              #     - S3: s3api (normal), s3 (higher-level)
                              #     - route53: route53 (unusual REST API), route53domains (usual REST API)
                              #     - cloudsearch: cloudsearch (usual REST API), cloudsearchdomains (unusual REST API)
                              #  - autocompletion: complete -C /usr/local/bin/aws_completer aws
aws [[SERVICE] ACTION] help   #
aws SERVICE ACTION            #  - ACTION|REQ_VAR: lowercase dashes instead of camelcase
[--REQ_VAR VAL... ...]        #  - REQ_VAR:
                              #     - if VAL is OBJ:
                              #        - must use JSON_FILE|URL|STR
                              #        - if not OBJ|ARR_OBJ, can use shortcut syntax:
                              #           - if VAL is OBJ -> "VAR2=VAL2[_ARR],...", where VAL2_ARR is VAL2,...
                              #              - e.g. "Numbers=One,Two,Letter=B"
                              #           - if VAL is ARR -> --REQ_VAR VAL VAL2 ...
                              #     - if VAL is BOOL: --[no-]REQ_VAR
                              #     - --body uses FILE
--query VAR                   #Only gets a submember of the response. VAR can be:
                              #  - VAR.VAR2
                              #  - VAR[NUM]
                              #  - VAR[*]: all members (for array)
                              #  - VAR.{NEWVAR2:OLDVAR2,...}:
                              #     - only gets VAR.OLDVAR2..., but modifies output key names
                              #     - OLDVAR2 can be VAR2.VAR3, VAR2[NUM], etc.
                              #  - VAR.[VAR2...]: same but as ARR (no key names)
--debug                       #
--endpoint-url STR            #
--no-paginate                 #
--no-verify-ssl               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagRESOURCE()                 #Request parameters: RESOURCE_TAGS
                              #Response body: empty
ListRESOURCETags()            #Request parameters: RESOURCE_TAGS
                              #  - only RESOURCE_NAME
                              #Response body: Tags TAGS
UntagRESOURCE()               #Request parameters: RESOURCE_TAGS
                              #  - Tags -> TagKeys STR_ARR
                              #Response body: empty
TAG ACTION NAME ==>           #Action name includes "RESOURCE" either:
                              #  - explicitly:
                              #     - e.g. TagUser(), ListUserTags(), UntagUser()
                              #  - implicitly:
                              #     - e.g. TagResource(), ListTags(), UntagResource()
                              #     - only for AWS services where only one resource uses tags

RESOURCE_TAGS                 #TAGS on a RESOURCE
RESOURCE_TAGS.RESOURCE_NAME   #'NAME'
                              #RESOURCE_NAME is RESOURCE-specific
RESOURCE_TAGS.Tags            #TAGS

RESOURCE                      #Many AWS services resources use tags.
                              #Specified in their own doc.
RESOURCE.Tags                 #TAGS

TAGS                          #Arbitrary metadata
                              #Can be used for:
                              #  - searches
                              #  - cost allocation
                              #  - authorization, as POLICYVAR
                              #Max 50 per resource
TAGS.TAG                      #STR
                              #Key max 128 bytes, value max 256 bytes
