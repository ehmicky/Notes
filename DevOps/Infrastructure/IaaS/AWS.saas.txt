
       
   AWS  
       


TODO ==>
  - IAM:
     - https://docs.aws.amazon.com/signin/latest/userguide/what-is-sign-in.html
  - General:
     - https://docs.aws.amazon.com/general/latest/gr
     - fix this doc, including JavaScript/CLI clients, and summary
  - resources:
     - Resource Groups
     - Resource Groups tagging
     - Resource manager
     - Resource explorer
     - Tag editor
  - Pricing:
     - https://aws.amazon.com/pricing
     - Billing
     - Cost explorer
     - Budgets
     - Cost and Usage Reports
  - IAM:
     - IAM access analyzer
     - IAM roles anywhere
     - AWS organizations
        - fix IAM doc mentioning ORG|organization
        - document aws:Resource|PrincipalOrgID|Paths, iam:OrganizationsPolicyId
     - AWS Certificate Manager
     - IAM identity center
  - Events:
     - CloudWatch
     - CloudTrail
     - EventBridge
  - Regions:
     - https://aws.amazon.com/about-aws/global-infrastructure/

VERSION ==>                   #2023-03-25

SUMMARY ==>                   #???

NEW SERVICE DOCUMENTATION ==> #When documenting a new SERVICE, should check:
                              #  - full documentation, including user guide
                              #  - pricing
                              #  - add summary on top
                              #  - last version
                              #     - add changelog to RSS feed
                              #  - API:
                              #     - how requests are made, including pagination
                              #     - whether region-specific
                              #  - IAM:
                              #     - https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html
                              #     - https://docs.aws.amazon.com/aws-managed-policy/latest/reference/policy-list.html
                              #     - https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SERVICES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION                        #'SERVICE:SERVICE_ACTION'
                              #Can sometimes use wildcard *
SERVICE                       #AWS service. Lowercase.
SERVICE_ACTION                #REST method name for a given SERVICE. Capitalized.
                              #Also called "operation"
PACTION                       #Either ACTION or "Permission-only action":
                              #  - Like ACTION, but can only be used in IAM POLICYs
                              #  - Does not refer to an actual REST method

SERVICE_DOMAIN                #'SERVICE.amazonaws.com'
                              #Used to identity a SERVICE sometimes.

VERSIONING ==>                #Minor|patch releases:
                              #  - 'YYYY-MM-DD'
                              #  - specified in API requests
                              #Major releases:
                              #  - most are at v1
                              #  - some are at v2, which is specified in API request domain


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SERVICES LIST         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECURITY ==>                  #  - IAM: authentication|authorization
                              #  - STS: temporary autentication|authorization
                              #  - CognitoIdentity: cross-device identification

MONITORING ==>                #  - CloudTrail: logs AWS API calls
                              #  - CloudWatch: logs metrics

AUTOMATING ==>                #  - AutoScaling: launch|terminate EC2 instances
                              #  - SWF: task coordination
                              #  - CloudFormation: Infrastructure as Code
                              #  - Beanstalk: fast manage of stack of AWS resources

NETWORKING ==>                #  - VPC: general (including security, VPN)
                              #  - Route53: DNS server
                              #  - ELB: load balancing

COMPUTE ==>                   #  - EC2: long-running
                              #  - Lambda: on-demand
                              #  - ElastiCache: Redis/Memcached
                              #  - RDS: SQL Database

STORAGE ==>                   #  - EBS: virtual internal hard drive
                              #  - S3: virtual external hard drive
                              #  - CloudFront: CDN
                              #  - Glacier: cheap archiving
                              #  - CognitoSync

MESSAGE PASSING ==>           #  - SQS: pull-based, single consumer
                              #  - SNS: push-based, multiple consumers, emails|sms|push notification|HTTP[S]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           NOTATIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'DATE'                        #'YYYY-MM-DDTHH:MM:SS.SSSZ'
DATE_NUM                      #Epoch in ms


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOAL ==>                      #Where resources are physically stored for:
                              #  - Regulation
                              #  - Lower latency
                              #Can still be accessed from any other region
                              #  - done over the internet, i.e. slower
                              #Group of AZs, LZs, edge locations and WZs.

AVAILABILITY ZONE ==>         #Also called AZ.
                              #Data center meant for redundancy
                              #  - for AWS: if one fails, can redirect to another
                              #  - for users: can explicitely repeat resources across AZs
                              #Precise location not advertised.
                              #Unless mentioned in list below, 3 per REGION

LOCAL ZONE ==>                #Also called LZ.
                              #Data center meant for low latency, close to users
                              #Only for:
                              #  - EC2/VPC-related SERVICEs
                              #  - RDS, Elasticache
                              #  - a few other SERVICEs
                              #Opt-in, about 25% more expensive.
                              #Named "REGION-XXX-1a"

EDGE LOCATION ==>             #Data center meant for low latency, close to users
                              #Only for:
                              #  - AWS CloudFront
                              #  - Route 53
                              #  - Firewall manager, Shield, WAF
                              #Not named, automatically picked by AWS
                              #Every REGION is also an edge location, i.e. not documented in list below

WAVELENGTH ZONE ==>           #Also called WZ.
                              #Data center for AWS WaveLength only
                              #Stays in internet provider 5G network, i.e. very low latency for 5G users
                              #Named "REGION-wl1-XXX-wlz-1"

PRICING ==>                   #Different pricing per REGION
                              #This documentation only shows cheapest (US)

EXCEPTIONS ==>                #Some SERVICEs:
                              #  - are global, not REGION-specific
                              #  - are only in a few REGIONs
                              #  - are not in some REGIONs

ENABLING ==>                  #Some REGIONs must be manually enabled
                              #Marked with + in the list below

LIST ==>                      #  - us-east-1: USA, Washington DC
                              #     - 6 AZs
                              #     - LZs + WZs + edge locations: Atlanta (atl), Boston (bos), Chicago (chi), Dallas (dfw), Houston (iah), Miami (mia), Minneapolis (msp), New Jersey (nyc)
                              #     - LZs + edge locations: Philadelphia (phl), Mexico (Querétaro) (qro)
                              #     - LZs: Kansas city (mci)
                              #     - WZs + edge locations: Detroit (dtw), Nashville (bna)
                              #     - WZs: Charlotte (clt), Tampa (tpa), Washington DC (was)
                              #  - us-east-2: USA, Cincinnati
                              #  - us-west-1: USA, San Francisco
                              #  - us-west-2: USA, Portland
                              #     - 4 AZs
                              #     - LZs + WZs + edge locations: Denver (den), Los Angeles (lax), Phoenix (phx)
                              #     - LZs + WZs: Las Vegas (las)
                              #     - WZs + edge locations: Seattle (sea)
                              #     - WZs: San Francisco (sfo)
                              #     - edge locations: Salt Lake City
                              #  - ca-central-1: Canada (Toronto)
                              #     - WZs: Toronto (yto)
                              #     - edge locations: Montréal, Vancouver
                              #  - eu-west-1: Ireland (Dublin)
                              #  - eu-west-2: UK (London)
                              #     - WZs + edge locations: UK (Manchester (man))
                              #     - WZs: UK (London (lon))
                              #  - eu-west-3: France (Paris)
                              #     - edge locations: France (Marseille), Belgium (Brussels)
                              #  - eu-central-1: Germany (Frankfurt)
                              #     - LZs + edge locations: Germany (Hamburg (ham)), Poland (Warsaw (waw))
                              #     - WZs + edge locations: Germany (Berlin (ber), Munich (muc))
                              #     - WZs: Germany (Dortmund (dtm))
                              #     - edge locations: Germany (Düsseldorf), Netherlands (Amsterdam)
                              #  - eu-north-1: Sweden (Stockholm)
                              #     - LZs + edge locations: Denmark (Copenhagen (cph)), Finland (Helsinki (hel))
                              #     - edge locations: Norway (Oslo)
                              #  + eu-central-2: Switzerland (Zurich)
                              #     - edge locations: Austria (Vienna), Bulgaria (Sofia), Czechia (Prague), Greece (Athens), Hungary (Budabest), Romania (Bucarest)
                              #  - eu-south-1: Italy (Milano)
                              #     - edge locations: Italy (Palermo, Roma), Croatia (Zagreb)
                              #  - eu-south-2: Spain (Madrid)
                              #     - edge locations: Portugal (Lisbon)
                              #  - ap-southeast-1: Singapore
                              #     - LZs + edge locations: Thailand (Bangkok (bkk))
                              #     - edge locations: Malaysia (Kuala Lumpur), Philippines (Manila), Vietnam (Hanoi, Ho Chi Minh)
                              #  - ap-southeast-2: Australia (Sydney)
                              #     - edge locations: New Zealand (Auckland)
                              #  + ap-southeast-3: Indonesia (Jakarta)
                              #  + ap-southeast-4: Australia (Melbourne)
                              #     - LZs + edge locations: Australia (Perth (per) (actually ap-southeast-1))
                              #  - ap-northeast-1: Japan (Tokyo)
                              #     - 4 AZs
                              #     - LZs + edge locations: Taiwan (Taipei (tpe))
                              #     - WZs: Japan (Tokyo (nrt))
                              #  - ap-northeast-2: South Korea (Seoul)
                              #     - 4 AZs
                              #     - WZs: South Korea (Daejeon (cjj), Seoul (sel))
                              #  - ap-northeast-3: Japan (Osaka)
                              #     - WZs: Japan (Osaka (klx) (actually ap-northeast-1))
                              #  + ap-east-1: Hong Kong
                              #  - ap-south-1: India (Mumbai)
                              #     - LZs + edge locations: India (Delhi (del), Kolkata (ccu))
                              #  - ap-south-2: India (Hyderabad)
                              #     - edge locations: India (Bangalore, Chennai)
                              #  - sa-east-1: Brazil (São Paulo)
                              #     - edge locations: Brazil (Rio de Janeiro), Colombia (Bogota)
                              #     - LZs + edge locations: Argentina (Buenos Aires (bue)), Peru (Lima (lim)), Chile (Santiago (scl)) (actually us-east-1)
                              #  + me-south-1: Bahrain
                              #     - LZs: Oman (Muscat (mct))
                              #     - edge locations: Israel (Tel aviv)
                              #  + me-central-1: UAE (Dubai)
                              #     - edge locations: UAE (Fujairah)
                              #  + af-south-1: South Africa (Cape Town)
                              #     - LZs: Nigeria (Lagos (los))
                              #     - edge locations: Kenya (Nairobi), South Africa (Johannesburg)
                              #Special REGIONs:
                              #  - us-gov-west-1
                              #  - us-gov-east-1

PARTITION                     #Group of REGIONs:
                              #  - 'aws-us-gov'
                              #  - 'aws-cn': China (Shanghai)
                              #     - edge locations: Beijing, Shenzhen, Zhongwei
                              #  - 'aws': everything else
                              #Cannot access each other resources


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IDENTIFIER           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARN                           #Resource identifier
                              #"Amazon Resource Name" URI scheme
                              #'arn:PARTITION:SERVICE:[REGION]:[ACCOUNT_ID]:[RESOURCE_TYPE:][ARN_PATH/]NAME'
                              #Parts can sometimes use wildcard *

NAME                          #Resource name.
                              #Must be [[:alnum:]+=,.@-/]
                              #Must be unique even without path.
                              #Max 64 chars, 512 for path.

ARN_PATH                      #'[/...]/'. Namespaces a NAME.
                              #Def: '/'
                              #ASCII only
                              #Only for specific SERVICEs
                              #Some List*() actions have a PathPrefix STR parameter, to search from start

MID                           #Resource ID generated by AWS when creating some resources
                              #21 chars, [A-Z0-9]
                              #Unlike ARN:
                              #  - does not change on NAME update
                              #  - not human-friendly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETING RESOURCES ==>        #Must delete resources that use it first

RENAMING RESOURCES ==>        #Sometimes renamed in resources that use it, sometimes not


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ACCOUNT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCOUNT_ID                    #AWS account short ID
CANONICAL_ACCOUNT_ID          #AWS account long ID longer version
                              #Used in very specific cases

DEV ACCOUNTS ==>              #Using different accounts for dev and production is good to avoid hitting limits.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          API REQUEST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROTOCOL ==>                  #HTTPS
                              #HTTP allowed for some SERVICEs

DOMAIN ==>                    #In general, SERVICE[.REGION].amazonaws.com
                              #Sometimes slightly different.

HTTP METHOD ==>               #Either GET|POST, for any ACTION

Content-Type [C|S]            #Depending on SERVICE:
                              #  - none: query variables (REQ only)
                              #  - application/x-www-form-urlencoded
                              #  - XML
                              #VAL_ARR:
                              #  - query variable: VAR.NUM. (1-based)
                              #  - urlencoded: VAR.NUM. (1-based)
                              #  - XML: <KEYSet|KEYList><VAR></VAR>...</KEYSet|KEYList>
Content-Length [C|S]          #

REQ                           #Request parameters

REQ.Action                    #ACTION
REQ.Version                   #'YYYY-MM-DD'. Service API version

REQ.DryRun                    #BOOL. Checks authorization without doing anything.
                              #Returns DryRunOperation if no problem, UnauthorizedOperation otherwise.

REQ.ClientToken               #STR. Do not perform if already performed with same STR. Meant for idempotence.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         API RESPONSE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Connection [S]                #
Date [S]                      #
Server [S]                    #'AmazonS3'
ETag [S]                      #MD5. Of content, not metadata.

RES                           #Response body

RES.Errors                    #OBJ_ARR: Code STR, Message STR

REQ_ID                        #Depending on SERVICE:
                              #  - RES.requestId
                              #  - Request-Id [S]

EVENTUAL CONSISTENCY ==>      #After change, should test existence, with exponential retry delays up to a limit (e.g. 5 mins)
                              #Can be slow, i.e. avoid in critical paths


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         TRUE REST API         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRUE REST API ==>             #Some SERVICEs use different API conventions, closer to true REST

HTTP METHOD ==>               #Any

PATH ==>                      #Represents the ACTION
                              #Present in my documentation
REQ.Action                    #Not used

X-Amz-HEADER [C|S]            #Use HEADER [C|S] instead

RES.Errors                    #OBJ_ARR: Code STR, Message STR, Resource STR, RequestId STR

ONLY FOR S3 ==>               #
Content-MD5 [C]               #
REQ.X-Amz-Content-SHA256      #'SHA256' hash of request body


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTHORIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTHORIZATION ==>             #Only when using ACCESS_KEY (not LOGIN_PROFILE, or other credentials)
                              #Signed checksum include: ACTION, request parameters, date, REGION

VERSION 4 SIGNATURE A ==>     #
REQ.X-Amz-Algorithm           #'AWS4-HMAC-SHA256'
REQ.X-Amz-Credential          #'ACCESS_KEY_ID/YYYYMMDD/REGION/SERVICE/aws4_request'
REQ.X-Amz-SignedHeaders       #'HEADER'_ARR among: Host|X-Amz-Date|Range
REQ.X-Amz-Signature           #'HMAC_SHA256':
                              #  - of:
                              #     - 'AWS4-HMAC-SHA256'
                              #     - 'DATE'
                              #     - 'YYYYMMDD/REGION/SERVICE/aws4_request'
                              #     - 'SHA256' of:
                              #        - HTTP method
                              #        - URI path
                              #           - URI encoded unless S3
                              #        - query string
                              #        - all headers, sorted, name + values
                              #        - only signed headers, sorted, only names
                              #        - 'SHA256' of request body
                              #  - signed with 'HMAC_SHA256'
                              #     - of:
                              #        - 'YYYYMMDD'
                              #        - 'REGION'
                              #        - 'SERVICE'
                              #        - 'aws4_request'
                              #     - signed with 'AWS4' + SECRET_ACCESS_KEY
REQ.X-Amz-SecurityToken       #STS 'SESSION_TOKEN'
REQ.X-Amz-Date                #'DATE'

VERSION 4 SIGNATURE B ==>     #Alternative
Authorization:
 AWS4-HMAC-SHA256
 AUTH_VAR=VAL,... [C]         #
AUTH_VAR Credential
AUTH_VAR SignedHeaders
AUTH_VAR Signature
AUTH_VAR SecurityToken
X-Amz-Date [C]                #Same as above

VERSION 2 SIGNATURE ==>       #Only for SimpleDB
REQ.AWSAccessKeyId            #ACCESS_KEY_ID
REQ.SignatureVersion          #2
REQ.SignatureMethod           #'HmacSHA256'
REQ.Signature                 #'HMAC_SHA256':
                              #  - of:
                              #     - HTTP method
                              #     - 'SERVICE_DOMAIN'
                              #     - URI path
                              #     - all request parameters, sorted
                              #        - including AWSAccessKkeyId, Action, SignatureMethod, SignatureVersion, Timestamp
                              #  - signed with SECRET_ACCESS_KEY
REQ.SecurityToken             #STS 'SESSION_TOKEN'
REQ.Timestamp                 #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AWS CONSOLE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



AWS CONSOLE ==>               #Web UI client


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI ==>                       #  - Python, not Node.js, so must use pip to install|upgrade
                              #  - AWSCONFIG:
                              #     - cannot use AWS.* but can use the rest
                              #     - also ~/.aws/config, like ~/.aws/credentials (or ENVVAR AWS_CONFIG_FILE) but CLI-specific
                              #       and use [profile PROFILE] instead of [PROFILE], and should not store credentials
                              #     - also interactive with aws configure [--profile PROFILE] or:
                              #        - aws configure list [--profile PROFILE]
                              #        - aws configure get [PROFILE.]VAR [--profile PROFILE]
                              #        - aws configure set [PROFILE.]VAR VAL [--profile PROFILE]
                              #     - use aws ... --VAR VAL
                              #     - extra members:
                              #        - output: json (def), text, table
                              #  - SERVICE not supported yet: Glacier, CloudHSM, AppStream, Mobile Analytics
                              #  - SERVICE required to put AWSCONFIG.SERVICE (lowercased) true in PROFILE "preview": cloudfront
                              #  - SERVICE with normal + higher-level API:
                              #     - S3: s3api (normal), s3 (higher-level)
                              #     - route53: route53 (unusual REST API), route53domains (usual REST API)
                              #     - cloudsearch: cloudsearch (usual REST API), cloudsearchdomains (unusual REST API)
                              #  - autocompletion: complete -C /usr/local/bin/aws_completer aws
aws [[SERVICE] ACTION] help   #
aws SERVICE ACTION            #  - ACTION|REQ_VAR: lowercase dashes instead of camelcase
[--REQ_VAR VAL... ...]        #  - REQ_VAR:
                              #     - if VAL is OBJ:
                              #        - must use JSON_FILE|URL|STR
                              #        - if not OBJ|ARR_OBJ, can use shortcut syntax:
                              #           - if VAL is OBJ -> "VAR2=VAL2[_ARR],...", where VAL2_ARR is VAL2,...
                              #              - e.g. "Numbers=One,Two,Letter=B"
                              #           - if VAL is ARR -> --REQ_VAR VAL VAL2 ...
                              #     - if VAL is BOOL: --[no-]REQ_VAR
                              #     - --body uses FILE
--query VAR                   #Only gets a submember of the response. VAR can be:
                              #  - VAR.VAR2
                              #  - VAR[NUM]
                              #  - VAR[*]: all members (for array)
                              #  - VAR.{NEWVAR2:OLDVAR2,...}:
                              #     - only gets VAR.OLDVAR2..., but modifies output key names
                              #     - OLDVAR2 can be VAR2.VAR3, VAR2[NUM], etc.
                              #  - VAR.[VAR2...]: same but as ARR (no key names)
--debug                       #
--endpoint-url STR            #
--no-paginate                 #
--no-verify-ssl               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                   #2.0.15
                              #Node.js client

AWS                           #Main import

AWSCONFIG                     #Can be:
                              #  - AWS.config
                              #  - ~/.aws/credentials:
                              #     - INI file, with underscore and aws_*, e.g. aws_access_key_id
                              #     - { "profile PROFILE": AWSCONFIG ... }:
                              #     - can also get AWSCONFIG.credentials with AWS.SharedIniFileCredentials({ profile: PROFIL })
                              #  - ENVVAR, e.g. AWS_[DEFAULT_]ACCESS_KEY_ID
                              #  - AWS.config.loadFromPath(AWSCONFIG_JSON_FILE)
                              #  - AWS.config.update(AWSCONFIG)

AWSCONFIG.accessKeyId         #
AWSCONFIG.secretAccessKey     #
AWSCONFIG.sessionToken        #
AWSCONFIG.credentials         #CREDENTIAL_OBJ:
                              #  - instantiated by:
                              #     - new AWS.Credential(ACCESS_KEY_ID, SECRET_ACCESS_KEY[, SESSION_TOKEN])
                              #     - new AWS.Credential(AWSCONFIG)
                              #  - accessKeyId|secretAccessKey|sessionToken
                              #  - expired BOOL
                              #  - expireTime DATE
                              #  - expiryWindow UINT (e.g. 15, in mins)
                              #  - needsRefresh()->BOOL
                              #  - refresh(FUNC(ERROR))
                              #  - get(FUNC(ERROR)): same but only refresh() if needsRefresh()
                              #  - Should not need it:
                              #     - automatically created from other AWSCONFIG members
                              #     - automatically refreshed
                              #Non usual credentials (e.g. different types of roles) have extra members, must do
                              #credentials = new AWS.*Credentials(...):
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:getSessionToken(OBJ) (if not OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.TemporaryCredentials(OBJ) -> sts:assumeRole(OBJ) (if OBJ.Arn)
                              #      - CREDENTIAL_OBJ.masterCredentials CREDENTIAL_OBJ2 (original one)
                              #   - new AWS.SAMLCredentials(OBJ) -> sts:assumeRoleWithSAML(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #   - new AWS.WebIdentityCredentials(OBJ) -> sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #   - new AWS.CognitoIdentityCredentials(OBJ) -> cognito:getOpenIdToken(OBJ) then
                              #     sts:assumeRoleWithWebIdentity(OBJ)
                              #      - CREDENTIAL_OBJ.params OBJ
                              #      - CREDENTIAL_OBJ.data OBJ2 (response)
                              #      - CREDENTIAL_OBJ.identityId STR, CREDENTIAL_OBJ.getId(FUNC(STR))
                              #   - new AWS.EnvironmentCredentials(STR) -> uses ENVVAR STR_* (e.g. "AWS")
                              #      - CREDENTIAL_OBJ.envPrefix STR
                              #   - new AWS.FilesystemCredentials(FILE) -> uses JSON config file
                              #      - CREDENTIAL_OBJ.filename STR
                              #   - new AWS.SharedIniFileCredentials(OBJ) -> uses INI config file, with OBJ.profile and
                              #     OBJ.filename (def: "~/.aws/credentials")
                              #   - new AWS.CredentialProviderChain(ARR): uses several AWS.*Credentials as a chain
                              #   - new AWS.EC2MetadataCredentials(OBJ)
AWSCONFIG.region              #STR
AWSCONFIG.sslEnabled          #BOOL (def: true)
AWSCONFIG.maxRetries          #UINT (def: undefined)
AWSCONFIG.maxRedirects        #UINT (def: 10)
AWSCONFIG.logger              #OBJ, any OBJ with either .write() or log() (e.g. process.stdout or console)
AWSCONFIG.apiVersions         #OBJ:
                              #  - SERVICE: VERSION_STR (or "latest" (def))
AWSCONFIG.httpOptions         #OBJ:
                              #  - proxy URL
                              #  - agent AGENT (def: HTTP.globalAgent)
                              #  - timeout UINT
                              #  - xhrWithCredentials BOOL (def: false, browser only)
AWSCONFIG.endpoint            #URL (automatically configured)
AWSCONFIG.computeChecksums    #If true (def), client computes Content-MD5 [C]
AWSCONFIG.profile             #PROFILE (def: "default", or ENVVAR AWS_DEFAULT_PROFILE)

new AWS.SERVICE([AWSCONFIG])  #Returns SERVICE
                              #AWSCONFIG can take:
                              #  - params OBJ: used as default REQ_OBJ (if acceptable arguments)
                              #  - apiVersion VERSION_STR
SERVICE.config                #AWSCONFIG

SERVICE.ACTION([REQ_OBJ]      #  - if no FUNC, returns AWSREQ:
[, FUNC(ERROR, RES_OBJ)])     #     - must use AWSREQ.send()
                              #     - event handlers:
                              #        - success FUNC(ALL_OBJ), where ALL_OBJ:
                              #           - data RES_OBJ
                              #           - error ERROR
                              #           - request.params REQ_OBJ
                              #           - requestId STR
                              #           - redirectCount NUM
                              #           - retryCount NUM: automatically done by SDK
                              #           - hasNextPage() BOOL and nextPage(FUNC(ERROR, RES_OBJ)): pagination
                              #           - httpResponse:
                              #              - body STR
                              #              - headers OBJ
                              #              - statusCode NUM
                              #              - stream ISTREAM
                              #        - error FUNC(ERROR, ALL_OBJ)
                              #        - complete FUNC(ALL_OBJ): either success or error
                              #        - httpData FUNC(CHUNK, ALL_OBJ): for streaming big answers
                              #     - createReadStream() -> ISTREAM, in order to ISTREAM.pipe(OSTREAM)
                              #     - abort()
                              #     - httpRequest OBJ:
                              #        - body STR
                              #        - headers OBJ
                              #        - method STR
                              #        - path STR
                              #        - endpoint OBJ: host, hostname, href, port, protocol
                              #  - ACTION is same case except first letter is lowercase
                              #  - REQ_OBJ:
                              #     - any query variable, request body OBJ.VAR or request header (without potential x-amz-)
                              #     - Body BUFFER|TYPEDARRAY|BLOB|STR|ISTREAM for request body that is not OBJ
                              #       (body for Glacier)
                              #     - DryRun BOOL (def: false): always available
                              #  - REQ_OBJ|RES_OBJ:
                              #     - VAL_ARR -> ARR:
                              #        - VAR.NUM. -> VAR_ARR (with extra s)
                              #        - <KEYSet|List><VAR></VAR>...</KEYSet|List> -> KEY_ARR (without VAR level)
                              #  - RES_OBJ:
                              #     - as opposed to request body, strip:
                              #        - first level of response (englobbing XML tag), often { KEYResponse: OBJ } -> OBJ
                              #        - second level sometimes, often { KEYResponse: { KEYResult: OBJ } } -> OBJ
                              #     - otherwise as is (but JSON not XML)
SERVICE.apiVersions           #STR_ARR
SERVICE.endpoint              #URL
SERVICE.waitFor('STATE',      #  - Only fires FUNC() once a condition happened
REQ_OBJ, FUNC(ERROR, RES_OBJ))#  - STATE depends on SERVICE
                              #  - polls by calling an underlying SERVICE.ACTION(REQ_OBJ) every NUM secs (depends on SERVICE),
                              #    and checks results according to STATE

JAVASCRIPT BROWSER SDK ==>    #Like Node.js but:
                              #  - Script aws-sdk-VERSION.min.js -> window.AWS
                              #  - only has SERVICE: S3, SNS, STS, SQS, Kinesis, CloudWatch, DynamoDB
                              #  - to create own SDK, must git clone, then node dist-tools/browser-builder SERVICE,...,
                              #    optionally with ENVVAR MINIMY=1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagRESOURCE()                 #Request parameters: RESOURCE_TAGS
                              #Response body: empty
ListRESOURCETags()            #Request parameters: RESOURCE_TAGS
                              #  - only RESOURCE_NAME
                              #Response body: Tags TAGS
UntagRESOURCE()               #Request parameters: RESOURCE_TAGS
                              #  - Tags -> TagKeys STR_ARR
                              #Response body: empty
TAG ACTION NAME ==>           #Action name includes "RESOURCE" either:
                              #  - explicitly:
                              #     - e.g. TagUser(), ListUserTags(), UntagUser()
                              #  - implicitly:
                              #     - e.g. TagResource(), ListTags(), UntagResource()
                              #     - only for AWS services where only one resource uses tags

RESOURCE_TAGS                 #TAGS on a RESOURCE
RESOURCE_TAGS.RESOURCE_NAME   #'NAME'
                              #RESOURCE_NAME is RESOURCE-specific
RESOURCE_TAGS.Tags            #TAGS

RESOURCE                      #Many AWS services resources use tags.
                              #Specified in their own doc.
RESOURCE.Tags                 #TAGS

TAGS                          #Arbitrary metadata
                              #Used by SERVICEs that can operate on any resource, like:
                              #  - Resource groups, Resource Groups tagging, Resource explorer, Resource Access Manager, Tag editor
                              #  - Cost explorer
                              #  - IAM POLICYs (ABAC)
                              #Max 50 per resource
                              #  - except for aws:*, which are unlimited
TAGS.TAG                      #STR
                              #Key:
                              #  - max 128 bytes
                              #  - naming convention: dasherized, lowercase, prefixed with "NAMESPACE:"
                              #Value max 256 bytes
                              #Key|value should not include PII (Personally Identifiable Information)

ABAC ==>                      #"Attribute-Based Access Control"
                              #Using the following CONDITION_KEYs
                              #Some SERVICEs do not support it on all|some of their resources
                              #  - usually because no resources, or do not have tags
aws:PrincipalTag/TAG          #STR. Value of TAG attached to the PRINCIPAL
aws:ResourceTag/TAG           #STR. Value of TAG attached to the resource
aws:RequestTag/TAG            #STR. Value of a TAG part of the request payload, e.g. as part of TagRESOURCE()
aws:TagKeys                   #'TAG'_ARR part the request payload, e.g. as part of TagRESOURCE()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SUPPORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING ==>                   #  - basic: free
                              #  - developer: 49$/month
                              #  - business: 10% of AWS usage (or min. 100$/month)
                              #  - enterprise: 10% of AWS usage (or min. 15000$/month)

BASIC FEATURES ==>            #  - Account/billing questions
                              #  - Limits increase requests
                              #  - Trusted Advisor limited: close to service limit, SecurityGroups, IAM, MFA, 1 check/week
                              #  - Forums

DEVELOPER FEATURES ==>        #  - Technical support (web, business hours, 12 hours response time)
                              #     - Service healthchecks fails have higher priority
                              #     - Client-side diagnostic tools, to help technical support
                              #  - General advice consulting

BUSINESS FEATURES ==>         #  - Specific case consulting
                              #  - Technical support (web, phone, live chat, 24/7, 1 hour response time), with more experienced
                              #  - support::* IAM actions
                              #  - Trusted Advisor: automatic saving money, security, performance, reliability audit, 1 check/day
                              #  - REST API for AWS Support (creating Technical support case, and using Trusted Advisor)
                              #  - Support on third-party tools (e.g. OS used on EC2 instances)

ENTERPRISE FEATURES ==>       #  - Architecture specific case consulting
                              #  - Technical support even more experienced (15 mins response time, direct personal access)
                              #  - Connected to solution architects
                              #  - Event hand-to-hand help (one to three months)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BILLING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS CONSOLE ==>               #Must be used
                              #Bill details, invoices, including history and payment methods.

USAGE REPORTS ==>             #  - CSV for each service
                              #  - Detailed reports must be enabled and saved daily on a S3 BUCKET.
                              #    Without detailed, monthly report without tag is available on the console.
                              #  - Can be monthly or hourly
                              #  - Can have tags associated to resources, and resource IDs or not.
                              #  - "Blended rate" is normal cost, "Unblended rate" is average cost for other customers for
                              #    this type of resource.

COST EXPLORER ==>             #  - timeline of costs.
                              #  - Can be by service, ACCOUNT_ID, tags

IAM ==>                       #  - Can give access to some page to some IAM users (otherwise only root):
                              #     - Resource "*"
                              #     - Action "aws-portal:View|ModifyPAGE",
                              #       where PAGE is "Usage|PaymentMethods|Account" (single tab) or "Billing" (all others)
                              #        - also "ec2-reports:ViewInstanceUsageReport" and
                              #          "ec2-reports:ViewReservedInstanceUtilizationReport"

CLOUDWATCH ==>                #METRIC EstimatedCharges:
                              #  - Estimated monthly cost, sent by each SERVICE
                              #  - Dimensions: Currency "USD", ServiceName SERVICE, LinkedAccount ACCOUNT_ID
                              #  - Must enable it in AWS console.
                              #  - Caught from all REGION, but displayed in us-east-1

PAYMENT OFFERS ==>            #  - AWS Free Tier: Makes medium usage free for first year. Must sign up for it.
                              #  - Consolidated billing: one bill for several accounts in a single AWS organization
