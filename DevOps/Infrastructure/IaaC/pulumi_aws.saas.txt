
              
   PULUMI_AWS  
              



TODO:
  - IAM + STS:
     - https://www.pulumi.com/registry/packages/aws-iam/
     - https://www.pulumi.com/docs/guides/crosswalk/aws/iam/
  - Lambda
     - https://www.pulumi.com/docs/guides/crosswalk/aws/lambda/
     - CallbackFunction, isEventHandler, createFunctionFromEventHandler
     - EventSubscription
  - CloudWatch
     - https://github.com/pulumi/pulumi-awsx/blob/master/awsx-classic/lambda/metrics.ts
     - https://www.pulumi.com/docs/guides/crosswalk/aws/cloudwatch/

@pulumi/aws                       #CW. "AWS classic". Component PACKAGE
                                  #PACKAGE 'aws'
                                  #Version 53.7.0

@pulumi/aws-native                #NW. Native PACKAGE, using AWS Cloud Control
                                  #PACKAGE 'aws-native'
                                  #Pro:
                                  #  - more up-to-date with recent AWS releases
                                  #  - closer to AWS API shape
                                  #Cons:
                                  #  - fewer PROV_RPROPS|REZs
                                  #  - sometimes less dev-friendly
                                  #Prefer CW most of the time, unless it is a missing a given SERVICE|REZ
                                  #Version 0.59.0

@pulumi/awsx                      #XW. "Pulumi CrossWalk for AWS".
                                  #PACKAGE 'awsx'
                                  #KREZs on top of @pulumi/aws
                                  #Only for a few SERVICEs
                                  #Version 1.0.2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CW|NW.config                      #C|NPROV_RPROPS

ENVVAR AWS_*
ENVVAR HTTP[S]_PROXY
~/.aws/config                     #Can be used

C|NPROV_RPROPS                    #PROV_RPROPS of CW|NW
CPROV_RPROPS.sharedConfigFiles
CPROV_RPROPS
 .sharedCredentialsFiles
NPROV_RPROPS
 .sharedCredentialsFile
C|NPROV_RPROPS.profile
C|NPROV_RPROPS.accessKey
C|NPROV_RPROPS.secretKey
C|NPROV_RPROPS.token
C|NPROV_RPROPS.region
C|NPROV_RPROPS.maxRetries
CPROV_RPROPS.useFipsEndpoint
CPROV_RPROPS.useDualstackEndpoint
CPROV_RPROPS.customCaBundle
CPROV_RPROPS.s3UsePathStyle
CPROV_RPROPS
 .ec2MetadataServiceEndpoint[Mode]#Like AWS CONFIG.*
CPROV_RPROPS.insecure
CPROV_RPROPS.httpProxy            #Like AWS CLI --*

CPROV_RPROPS
 .assumeRoleWithWebIdentity.*     #Only with CW
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .roleArn|sessionName
C|NPROV_RPROPS.assumeRole
 .externalId
CPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .duration
NPROV_RPROPS.assumeRole
 .durationSeconds
CPROV_RPROPS
 .assumeRoleWithWebIdentity
 .webIdentityToken[File]          #Like AWS CONFIG.*
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .policy                          #'POLICY_DOC' to attach to the ROLE
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .policyArns                      #Same as POLICY_ARN_ARR
CPROV_RPROPS.assumeRole
 .sourceIdentity                  #ASSUMED_ROLE_REQ.SourceIdentity
C|NPROV_RPROPS.assumeRole
 .tags|transitiveTagKeys          #ASSUMED_ROLE_REQ.Tags|TransitiveTagKeys

NPROV_RPROPS.roleArn              #ROLE_ARN used to list SERVICEs with Cloud Control
                                  #Not used for the actual operations
                                  #Def: same as main ROLE
CPROV_RPROPS
 .skipMetadataApiCheck            #BOOL. If true (def), cannot authenticate using EC2 instance metadata.

C|NPROV_RPROPS
 .allowed|forbiddenAccountIds     #'ACCOUNT_ID'_ARR that can [not] be used (def: all|none)
CPROV_RPROPS.stsRegion            #'REGION'
CPROV_RPROPS.endpoints.SERVICE    #'SERVICE_FULL_DOMAIN' (def: auto)

CPROV_RPROPS                      #BOOL (def: false). Still attempt request even without STS credentials.
 .skipCredentialsValidation       #Mostly useful for specific edge cases, e.g. using LocalStack
CPROV_RPROPS
 .skipRegionValidation            #BOOL (def: false). Allow unknown 'REGION'. Only for edge cases
CPROV_RPROPS
 .skipRequestingAccountId         #BOOL (def: false). Do not retrieve the 'ACCOUNT_ID'. Only for edge cases


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NW.getAccountId()->>OBJ2          #OBJ2: accountId 'ACCOUNT_ID'

CW.getArn('ARN')->>OBJ            #Parse ARN into OBJ:
                                  #  - arn 'ARN'
                                  #  - partition 'PARTITION'
                                  #  - service 'SERVICE'
                                  #  - region 'REGION'|undefined
                                  #  - account 'ACCOUNT_ID'|undefined
                                  #  - resource '[RESOURCE_TYPE:][ARN_PATH/]NAME'

CW|NW.getPartition()->>OBJ2       #Get current PARTITION. OBJ2:
                                  #  - partition 'PARTITION'
                                  #  - dnsSuffix 'amazonaws.com[.cn]'
                                  #  - reverseDnsPrefix '[cn.]com.amazonaws' (only CW)
NW.getURLSuffix()->>OBJ2          #OBJ2: urlSuffix 'amazonaws.com[.cn]'

CW|NW.Region.USEast1|...          #'REGION', e.g. 'us-east-1'
NW.getRegion()->>OBJ2             #OBJ2: name 'REGION'
CW.getRegion([OBJ])->>OBJ2        #OBJ[2]:
                                  #  - name 'REGION' (def: current)
                                  #  - endpoint 'SERVICE_DOMAIN'
                                  #OBJ2:
                                  #  - description STR
CW.getRegions([OBJ])->>OBJ2       #OBJ:
                                  #  - allRegions BOOL (def: false): include disabled ones
                                  #  - filters OBJ_ARR
                                  #     - name 'endpoint|opt-in-status|region-name'
                                  #     - values STR_ARR
                                  #OBJ2:
                                  #  - names 'REGION'_ARR
                                  #Uses EC2 DescribeRegions()

CW.getService([OBJ])->>OBJ2       #OBJ[2]:
                                  #  - serviceId 'SERVICE'
                                  #  - dnsName 'SERVICE.REGION.amazonaws.com'
                                  #  - reverseDnsName 'com.amazonaws.REGION.SERVICE'
                                  #  - reverseDnsPrefix '[cn.]com.amazonaws'
                                  #  - region 'REGION'
                                  #OBJ2:
                                  #  - partition 'PARTITION'
                                  #  - supported BOOL: in the REGION + PARTITION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE                            #Name of the SERVICE
                                  #Sometimes differ between CW and NW
                                  #Some SERVICEs are present only in either CW or NW

REZ                               #NW has fewer

REZ.id                            #'ARN'|NAME|MID|other
ARN ==>                           #Sometimes, if a RPROP value is 'ARN', it also accepts REZ directly
RPROPS.*Prefix                    #Sometimes used. Like RPROPS.* but appends random suffix

RPROPS|OUTPUTS                    #Some are sometimes missing
                                  #CW is sometimes less close to AWS API to be more dev-friendly:
                                  #  - more convenient type, e.g. ASSET|ARCHIVE
                                  #  - additional ones
'RPROP|OUTPUT'                    #Same name, but camelCase
                                  #Sometimes CW name slightly different from AWS
TRIGGER ==>                       #When no update ACTION for that RPROP
                                  #CW also adds REZ.triggers sometimes

REZ_CLASS.get(...)                #Only with CW
MODULE.getREZ(RPROPS)->>}OBJ{     #Similar to REZ_CLASS.get(...)
                                  #Has fewer RPROPS: usually only ones for REZ.id
                                  #For most REZ, but not all

REZ.skipDestroy                   #BOOL (def: false) on some REZ
                                  #Does retainOnDelete.
                                  #Useful for REZs purposely versioned, e.g. Lambda LAYER_VERSION
                                  #Only with CW


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CPROV_RPROPS.defaultTags          #TAGS applied to all REZs
CPROV_RPROPS.ignoreTags.keys      #'TAG'_ARR to ignore on all REZs, for both req|res
                                  #Should add those to ROPTS.ignoreChanges too, to avoid perpetual diff
C|NPROV_RPROPS
 .ignoreTags.keyPrefixes          #Same with STR_ARR prefixes

CW.getDefaultTags([OBJ])->>OBJ2   #OBJ[2]: tags TAGS

REZ.tags[All]                     #With CW: OBJ
                                  #With NW: OBJ_ARR: name|value
REZ.tagsAll                       #Like REZ.tags, but includes defaultTags


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           AWSGUARD            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/awsguard                  #Version 0.4.0

new AwsGuard                      #Adds new PolicyPack() with predefined POLICYs for AWS
 (['POLICY_PACK', ][OPTS])        #Def 'POLICY_PACK': 'pulumi-awsguard'
                                  #OPTS.POLICY: PPCONF
                                  #Can set enforcementLevel STR:
                                  #  - on OPTS.enforcementLevel: all POLICYs
                                  #  - or OPTS.POLICY.enforcementLevel: specific POLICY
                                  #     - OPTS.POLICY STR: shortcut when no PPCONF
                                  #  - def: 'advisory'
                                  #     - can set to 'disabled' to opt-in instead of opt-out
                                  #POLICY and their PPCONF
                                  #  - only for a few SERVICEs
                                  #  - multiple per SERVICE
                                  #  - documented in their respective SERVICE
                                  #OPTS.POLICY is camelCase, namespaced by SERVICE
                                  #  - but 'POLICY' is dasherize-lowercase, without SERVICE namespace
