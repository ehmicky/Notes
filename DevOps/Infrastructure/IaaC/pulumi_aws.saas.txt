
              
   PULUMI_AWS  
              



@pulumi/aws                       #CW. "AWS classic". Component PACKAGE
                                  #PACKAGE 'aws'
                                  #Version 53.7.0

@pulumi/aws-native                #NW. Native PACKAGE, using AWS Cloud Control
                                  #PACKAGE 'aws-native'
                                  #Pro: more up-to-date with recent AWS releases
                                  #Con: fewer PROV_RPROPS|SERVICEs
                                  #Version 0.59.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR AWS_*
ENVVAR HTTP[S]_PROXY
~/.aws/config                     #Can be used

C|NPROV_RPROPS                    #PROV_RPROPS of CW|NW
CPROV_RPROPS.sharedConfigFiles
CPROV_RPROPS
 .sharedCredentialsFiles
NPROV_RPROPS
 .sharedCredentialsFile
C|NPROV_RPROPS.profile
C|NPROV_RPROPS.accessKey
C|NPROV_RPROPS.secretKey
C|NPROV_RPROPS.token
C|NPROV_RPROPS.region
C|NPROV_RPROPS.maxRetries
CPROV_RPROPS.useFipsEndpoint
CPROV_RPROPS.useDualstackEndpoint
CPROV_RPROPS.customCaBundle
CPROV_RPROPS.s3UsePathStyle
CPROV_RPROPS
 .ec2MetadataServiceEndpoint[Mode]#Like AWS CONFIG.*
CPROV_RPROPS.insecure
CPROV_RPROPS.httpProxy            #Like AWS CLI --*

CPROV_RPROPS
 .assumeRoleWithWebIdentity.*     #Only with CW
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .roleArn|sessionName
C|NPROV_RPROPS.assumeRole
 .externalId
CPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .duration
NPROV_RPROPS.assumeRole
 .durationSeconds
CPROV_RPROPS
 .assumeRoleWithWebIdentity
 .webIdentityToken[File]          #Like AWS CONFIG.*
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .policy                          #'POLICY_DOC' to attach to the ROLE
C|NPROV_RPROPS
 .assumeRole[WithWebIdentity]
 .policyArns                      #Same as POLICY_ARN_ARR
CPROV_RPROPS.assumeRole
 .sourceIdentity                  #ASSUMED_ROLE_REQ.SourceIdentity
C|NPROV_RPROPS.assumeRole
 .tags|transitiveTagKeys          #ASSUMED_ROLE_REQ.Tags|TransitiveTagKeys

NPROV_RPROPS.roleArn              #ROLE_ARN used to list SERVICEs with Cloud Control
                                  #Not used for the actual operations
                                  #Def: same as main ROLE
CPROV_RPROPS
 .skipMetadataApiCheck            #BOOL. If true (def), cannot authenticate using EC2 instance metadata.

CPROV_RPROPS.defaultTags          #TAGS applied to all REZs
CPROV_RPROPS.ignoreTags.keys      #'TAG'_ARR to ignore on all REZs, for both req|res
                                  #Should add those to ROPTS.ignoreChanges too, to avoid perpetual diff
C|NPROV_RPROPS
 .ignoreTags.keyPrefixes          #Same with STR_ARR prefixes

C|NPROV_RPROPS
 .allowed|forbiddenAccountIds     #'ACCOUNT_ID'_ARR that can [not] be used (def: all|none)
CPROV_RPROPS.stsRegion            #'REGION'
CPROV_RPROPS.endpoints.SERVICE    #'SERVICE_FULL_DOMAIN' (def: auto)

CPROV_RPROPS                      #BOOL (def: false). Still attempt request even without STS credentials.
 .skipCredentialsValidation       #Mostly useful for specific edge cases, e.g. using LocalStack
CPROV_RPROPS
 .skipRegionValidation            #BOOL (def: false). Allow unknown 'REGION'. Only for edge cases
CPROV_RPROPS
 .skipRequestingAccountId         #BOOL (def: false). Do not retrieve the 'ACCOUNT_ID'. Only for edge cases



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PFUNCS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NC.getArn('ARN')->>OBJ            #Parse ARN into OBJ:
                                  #  - arn 'ARN'
                                  #  - partition 'PARTITION'
                                  #  - service 'SERVICE'
                                  #  - region 'REGION'|undefined
                                  #  - account 'ACCOUNT_ID'|undefined
                                  #  - resource '[RESOURCE_TYPE:][ARN_PATH/]NAME'

NC.getPartition()->>OBJ           #Get current PARTITION. OBJ:
                                  #  - partition 'PARTITION'
                                  #  - dnsSuffix 'amazonaws.com[.cn]'
                                  #  - reverseDnsPrefix '[cn.]com.amazonaws'
NC.getRegion(OBJ)->>OBJ2          #OBJ:
                                  #  - name 'REGION' (def: current)
