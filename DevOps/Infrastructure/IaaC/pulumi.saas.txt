
          
   PULUMI  
          



ALTERNATIVES ==>                  #Terraform:
                                  #  - declarative approach (HCL)
                                  #  - most high-profile
                                  #  - more providers
                                  #  - more programming languages
                                  #  - easier to setup alternative backends
                                  #Pulumi (preferred):
                                  #  - imperative approach
                                  #  - same-day provider updates with main cloud providers
                                  #  - richer REST API
                                  #  - better secrets encryption
                                  #CloudFormation:
                                  #  - declarative (YAML) + imperative approach (CDK)
                                  #  - AWS-specific
                                  #  - free
                                  #  - fewer features

SUMMARY ==>                       #Clients: REST API, CLI, Docker, UI
                                  #Runtime: binary|programmatic, YAML|Node|Go|Python|DotNet|Java
                                  #Inputs|outputs: dependencies, assets|archives
                                  #Inputs|outputs YAML: ${VARR}, fn::*, variables
                                  #Inputs|outputs Node: promise, deep, utilities
                                  #Program outputs: stack reference
                                  #Config: project|stack, provider|library|custom, type
                                  #Secrets: config|outputs, cloud|local|AWS|GCP|Azure|Hashivault
                                  #Function serialization
                                  #Deployment local: home|cwd|mainDir, envVars, custom CLI args|commands
                                  #Deployment cloud: git settings, cloud credentials, envVars, deps, custom CLI commands, logs, GitHub app, PR comments
                                  #Deployment CI: GitHub action, PR comments
                                  #Project: Pulumi.yaml, metadata, templates, program file|inline
                                  #Stack: select, Pulumi.STACK.yaml, tags, state, export|import
                                  #Resources: type|name|id|urn, aliases, init, transforms, custom|component, RPROPS|ROPTS, timeouts, ignoreChanges, parent
                                  #External: get(), import, converters
                                  #Update: preview, up, cancel, watch, refresh, pending
                                  #Delete: destroy, state delete, retainOnDelete, protect, deletedWith
                                  #Automation: targets, expectNoChanges, parallel REZ|UPDATE, diff, plan, history, events
                                  #Replace: update|replace, deleteBeforeReplace, replaceOnChanges
                                  #Webhooks: preview|update|stackCreate|stackDelete, email
                                  #Provider: PROV_RPROPS, version, PFUNC, dynamic|plugin, CRUD|check|diff|construct|PFUNC
                                  #Package: resource plugin, generated provider SDK, PSCHEMA, registry, native|bridged|component, module, boilerplate
                                  #Organization: team, permissions, roles, member|user, access token
                                  #Backend: cloud|local|S3|GCP|Azure, self-managed, self-hosted
                                  #Policies: pack, template, PulumiPolicy.yaml, program, enforcementLevel, before|after REZ init, config, CrossGuard, group
                                  #Logs: verbose|debug, trace, profile, REZ, audit
                                  #Insights: search, aggregate, count
                                  #Mocks: init, PFUNC, config
                                  #Providers: string, random, time, http, shell


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.67.0

INSTALL|UPGRADE ==>               #Download archive from website
                                  #  - they are at https://get.pulumi.com/releases/sdk/pulumi-vVERSION-OS-ARCH.tar.gz
                                  #Extract to a directory that's in the PATH
                                  #  - prefered: ~/.pulumi/bin/
                                  #https://get.pulumi.com is a Bash script automating the above
                                  #  - it adds `export PATH=$PATH:$HOME/.pulumi/bin` to .bashrc|.bash_profile

N.version
NMANIFEST|XMANIFEST.version
GH_INPUTS.pulumi-version
NWORKSPACE.pulumiVersion          #'vX.Y.Z'

pulumi version                    #Print Pulumi version

ENVVAR PULUMI_SKIP_UPDATE_CHECK   #If 'true', do not abort when version of Pulumi is not latest

pulumi about                      #Print:
                                  #  - OS info
                                  #  - pulumi version
                                  #  - PLUGINs, RUNTIMEs
                                  #  - 'PROJECT|STACK|BACKEND'
                                  #  - REZs, STAKE_STATE
                                  #  - BACKEND
                                  #  - runtime dependencies (e.g. Node modules)
--transitive|-t                   #Include transitive dependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRICING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING OF PULUMI CLOUD ==>       #Plans:
                                  #  - free
                                  #  - team:
                                  #     - 1$ for 3 REZs
                                  #     - first 200 REZs free
                                  #  - enterprise: custom price
                                  #  - business critical: custom price
                                  #Billed REZ:
                                  #  - when REZ is in current STATE, even if no update happening
                                  #  - includes rootStackResource and KREZs
                                  #Pulumi Deployments:
                                  #  - currently free because in preview
                                  #  - not for free plan
                                  #  - billed per compute-minute

SUPPORT ==>                       #12h*5d with enterprise plan
                                  #24h*7d with business critical


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


X*                                #REST API request|response

API_URL                           #https://api.pulumi.com/api

CLI ==>                           #Must be available in PATH to use the REST API

Accept: application/vnd.pulumi+8
 [C]                              #
Content-Type: application/json [C]#

REQUEST ==>                       #With POST|PUT|PATCH, JSON request body
                                  #With GET|DELETE, query variables

PAGINATION ==>                    #Some endpoints are always paginated:
                                  #  - Request OBJ: continuationToken=STR
                                  #  - Response OBJ: continuationToken STR
                                  #Others too but with a different way:
                                  #  - Request OBJ: continue STR, size NUM, page NUM
                                  #  - Response OBJ: total NUM, pagination.previous|next|continue STR
                                  #Or:
                                  #  - Request OBJ: nextToken=STR
                                  #  - Response OBJ: nextToken STR
                                  #Or:
                                  #  - Request OBJ: count NUM, offset NUM, step NUM
                                  #  - Response OBJ: nextOffset NUM
                                  #Others are only paginated on-demand:
                                  #  - Request OBJ: pageSize NUM, page NUM
                                  #  - Response OBJ: itemsPerPage NUM, total NUM

@pulumi/pulumiservice             #PROV for the Pulumi REST API itself
                                  #REZs: PROV, TAGS, ACCESS_TOKEN, TEAM, WEBHOOK, XDSETTINGS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI ==>                           #Uses the REST API under the hood

MAIN FLOW ==>                     #  - CLI starts Deployment engine (local gRPC server)
                                  #  - CLI executes resource PLUGINs binaries
                                  #     - they start their server to communicate with Deployment engine
                                  #  - CLI executes language executor binary
                                  #     - which itself executes PROGRAMs
                                  #     - PROGRAMs declare REZs using the language SDKs
                                  #        - which themselves use the language RUNTIMEs
                                  #     - REZs are communicated to Deployment engine
                                  #  - Deployment engine computes actions to perform
                                  #  - Actions are sent to resource PLUGIN, which performs them

pulumi --BOOL_VAR                 #If type not documented, means BOOL with default false

pulumi ...  --non-interactive     #
pulumi cancel|destroy|import|new
 |plugin rm|policy rm|refresh
 |stack rm|state|up
--yes|-y
ENVVAR PULUMI_SKIP_CONFIRMATIONS  #If 'true', no confirmations

pulumi ... --color
GH_INPUTS.color
SOPTS.color                       #'auto' (def), 'always', 'never' or 'raw'
ENVVAR NO_COLOR                   #

pulumi about|config|destroy|logs
 |plugin ls|policy [group] ls
 |preview|refresh|stack ls
 |stack output|stack tag ls|up
 |whoami
--json|-j                         #JSON output

pulumi ... --emoji|-e             #Allow emojis in the CLI output

pulumi gen-completion             #Print CLI completion script


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DOCKER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi/pulumi-base                #Debian image with pulumi CLI
                                  #Best when want to customize RUNTIME version
                                  #~150MB

pulumi/pulumi-RUNTIME             #Same but install a specific RUNTIME globally, e.g. Node.js
                                  #For Node, use node:lts-bullseye-slim, i.e. Node.js latest
                                  #Best most of the times
                                  #~160MB

pulumi/pulumi                     #Combine all pulumi/pulumi-RUNTIMEs
                                  #Best when want to use on PROGRAMs written using any|multiple RUNTIME
                                  #~1350MB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UI               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PULUMI CLOUD UI ==>               #Similar features as CLI

LOGIN ==>                         #Can use GitHub|GitLab|BitBucket
                                  #Not fully documented yet
SAML/SSO ==>                      #Only with enterprise plan
                                  #Not fully documented yet
SCIM ==>                          #Only with business critical plan
                                  #Not fully documented yet

readme                            #POUTPUT with value 'MARKDOWN'
                                  #Shown in UI for a given STACK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LANGUAGE HOST ==>                 #Language executor + runtime
LANGUAGE EXECUTOR ==>             #Binary file used to execute the [N]PROGRAM in a specific programming language
                                  #PLUGIN pulumi-language-RUNTIME
LANGUAGE RUNTIME ==>              #Programmatic library used inside [N]PROGRAM to declare REZs
                                  #E.g. @pulumi/pulumi for Node.js

[N]PROJECT.runtime                #Either [N]RUNTIME or [N]RUNTIME.name
[N]RUNTIME                        #Language executor and runtime
pulumi:runtime
[N]RUNTIME.name                   #'RUNTIME', i.e. 'nodejs|go|python|dotnet|java|yaml'
[N]RUNTIME.options                #[N]RUNTIME_OPTS

[N]RUNTIME_OPTS.buildTarget       #'DIR' where to run 'go build'
                                  #Def: temp DIR
                                  #Only with 'go'
[N]RUNTIME_OPTS.binary            #'PATH' to binary
                                  #Only with 'go|dotnet|java'

[N]RUNTIME_OPTS.virtualenv        #'DIR' where python binary is
ENVVAR PULUMI_PYTHON_CMD          #Only with 'python'

pulumi convert                    #Convert a PROGRAM from one RUNTIME to another
--from                            #'RUNTIME' (def: 'yaml') source
--language                        #'RUNTIME' destination
--out                             #'DIR' (def: '.')
--generate-only                   #Do not install dependencies
--mappings                        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             YAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]RUNTIME_OPTS.compiler          #'PROGRAM' to preprocess YAML (e.g. cue)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/pulumi                    #Node.js client

N*                                #Node.js types
N.VAR                             #Named export VAR
N.automation                      #NA
                                  #Actually executes the CLI under the hood
N.runtime                         #NR
                                  #Not fully documented, since mostly internal

>VAL                              #Means PROMISE_VAL
[>]VAL                            #Means [PROMISE_]VAL
->>[VAL]                          #Means ->PROMISE[_VAL]

CLASS.isInstance(VAL)->BOOL       #Like VAL instanceof CLASS, but cross-realm
                                  #Available with most CLASSes

[N]RUNTIME_OPTS.typescript        #BOOL (def: true). Whether to use TypeScript, through ts-node
[N]RUNTIME_OPTS.nodeargs          #'--FLAG ...' passed to node


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPUTS ==>                       #Async|dynamic value, similar to a PROMISE, as a return value
                                  #Resolved when provisioning a STACK
                                  #Related to specific REZs
STABLE OUTPUTS ==>                #OUTPUTs are not resolved during a preview, i.e. they are "unknown".
                                  #Unless they are marked as "stable", i.e. their value is both:
                                  #  - already available, e.g. RPROPs of an already existing REZ
                                  #  - readonly after creation
UNWRAPPING ==>                    #Resolving }VAL{ to VAL
LIFTING ==>                       #Turning VAL to }VAL}

INPUTS ==>                        #Async|dynamic value, similar to a PROMISE, as a function argument
                                  #Resolved when provisioning a STACK

}TYPE{                            #Notation for a [N]OUTPUT of TYPE
{TYPE}                            #Notation for a [N]INPUT of TYPE
}{TYPE}{                          #Notation for {TYPE} + }TYPE{

}}TYPE{{
{{TYPE}}                          #Like above, but top-level OBJ|ARR is normal (not dynamic)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS YAML      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INPUT                             #Can use:
                                  #  - VAL as is
                                  #  - ${VARR}
                                  #  - { fn::FUNC }
                                  #Also called "expression"

${VARR}                           #Insert a value in a {VAL} in YAML
                                  #Can be:
                                  #  - 'REZ[.OUTPUT_VARR]'
                                  #  - 'SCONFIG_VARR'
                                  #  - 'VARR' from:
                                  #     - PROGRAM.variables.*
                                  #     - GLOBALS.*
                                  #VARR:
                                  #  - VAR.VAR2
                                  #  - VAR["VAR2"]
                                  #     - same as VAR.VAR2 but escapes
                                  #     - must \-escape "
                                  #  - VAR[NUM]
                                  #Can be part of a STR if value is a STR itself.
$${...}                           #Escape ${...}

PROGRAM.variables.KEY             #{VAL} available in ${VARR}
GLOBALS                           #Values available in ${VARR}

{ fn::FUNC: {ARG[_ARR]} }         #Insert a function's return value in a {VAL} in YAML
                                  #"Built-in function"

fn::select(NUM, ARR)->VAL         #ARR[NUM] (0-based)

fn::join('DELIM', ARR)->STR       #Like ARR.join('DELIM')
fn::split('DELIM', STR)->ARR      #Like STR.split('DELIM')

fn::toBase64(STR)->STR            #
fn::fromBase64(STR)->STR          #

fn::toJSON(VAL)->'JSON'           #

fn::readFile('PATH')->'CONTENT'   #'PATH' can start with ../


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS NODE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NINPUT                            #Can use:
                                  #  - VAL as is
                                  #  - PROMISE_VAL
                                  #  - }VAL{
                                  #Can be done deeply, including any OBJ|ARR deeply

REZ.OUTPUT                        #NOUTPUT
NOUTPUT                           #Wraps a VAL, including any OBJ|ARR deeply
                                  #  - can traverse deeply without needing ?.

NDREZ|XDREZ.inputs.INPUT          #VAL
NDREZ|XDREZ.outputs.OUTPUT        #VAL

output({VAL})->}VAL{
Output.create({VAL})->}VAL{       #Create a new }VAL{

}VAL{.get()->VAL                  #Retrieve the value of a }VAL{

}VAL{.apply
 (FUNC(VAL)->>VAL2|}VAL2{)
 ->}VAL2{                         #Map the value of a }VAL{

all({}VAL{}_ARR)->}ARR{           #Concatenate values into an }ARR{
concat({VAL}_ARR)->}STR{          #Concatenate values into a }STR{
interpolate`...${{VAL}}...`       #Same as concat() but as a `...`

N.iterable.groupBy({OBJ_ARR},     #Group OBJ_ARR into an OBJ with:
 FUNC(VAL)->{['KEY', VAL]})       #  - key 'KEY'
 ->}OBJ{                          #  - value VAL_ARR
N.iterable.toObject(...)          #Same args as groupBy(), except value is VAL (last item of VAL_ARR)

jsonParse(...)
jsonStringify(...)                #Like JSON.parse|stringify(...) but allowing {VAL} (deeply) and returning }VAL{ (deeply)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROGRAM OUTPUTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POUTPUTS ==>                      #Unlike regular OUTPUTs:
                                  #  - related to a REZ
                                  #  - used inside a PROGRAM
                                  #POUTPUTs are:
                                  #  - related to a PROGRAM, instanced by a STACK
                                  #  - used by other STACKs, PROGRAMs or processes
                                  #Also called "stack outputs"

PROGRAM.outputs.POUTPUT           #{VAL}
export const VAR = {VAL}          #In Node.js, each exported variable is a POUTPUT
export default FUNC()
 [->>POUTPUTS_OBJ]                #Alternative

N[R]STACK.outputs()->>NPOUTPUTS   #
NPOUTPUTS.POUTPUT                 #NPOUTPUT
NPOUTPUT.value                    #VAL|'ENCRYPTED_VAL'

pulumi stack output [NPOUTPUT]    #Print an NPOUTPUT value
                                  #Def NPOUTPUT: all
--shell                           #Print as shell script instead

pulumi preview|up|refresh|destroy
 |import
--suppress-outputs                #Unless defined, POUTPUTs are printed

pulumi up
--show-full-output                #BOOL. If true (def), show POUTPUTs in full


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STACK REFERENCE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ.type
 'pulumi:pulumi:StackReference'   #[N]SREZ. Child of [N]CREZ
new N.StackReference              #Reference to another STACK in the same PROJECT
 (...NSREZ_ARGS)                  #Meant to get its POUTPUTs
RPROPS.name
NSREZ.ARGS[1].name                #{'OOSTACK'}
[N]SREZ.name                      #}'OOSTACK'{

[N]SREZ.outputs                   #}OBJ{
NSREZ.getOutput
 ({'POUTPUT'})[->}VAL{]           #
NSREZ.getOutputValue
 ('POUTPUT')[->>VAL]              #
NSREZ.require*(...)               #Same as NSREZ.get*(...) but throw instead of returning undefined
NSREZ.getOutputDetails
 ('POUTPUT')->>OBJ                #OBJ: value VAL, secretValue VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROJECT CONFIG         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT.config                    #PCONFIG
                                  #Configuration values (similar goal as ENVVARs)
PCONFIG_VAR                       #'[PCONFIG_NS:]PCONFIG_KEY'
                                  #Def PCONFIG_NS: current 'PROJECT'
PROJECT:PCONFIG_KEY               #PCONFIG_VAR for a PROJECT
LIBRARY:PCONFIG_KEY               #PCONFIG_VAR for a library
PACKAGE:PROV_RPROP                #PCONFIG_VAR for [N]PROV_RPROPs of default PROV

PCONFIG.PCONFIG_VAR               #Either VAL or { value: PCONFIG_VAL }
PCONFIG_VAL.type                  #'string|boolean|integer|array'
                                  #If YAML runtime: '[List<]String|Number[>]'
PCONFIG_VAL.default               #Default VAL|'ENCRYPTED_VAL' when undefined
PCONFIG_VAL.description           #STR. Not with YAML runtime
PCONFIG_VAL.items                 #PCONFIG_VAL_ARR. Not with YAML runtime

new Config(['PCONFIG_NS'])        #NPCONFIG for current PROJECT and PCONFIG_NS. Loads it.
NPROJECT.config
NPCONFIG.name                     #'PCONFIG_NS'. Def: 'PROJECT'

NPCONFIG.get
 ('PCONFIG_KEY'[, OPTS])
 [->PCONFIG_VAL]                  #Returns undefined if missing or not matching OPTS.*
OPTS.allowedValues                #ARR
OPTS.min|maxLength                #NUM
OPTS.pattern                      #REGEXP|'REGEXP'

NPCONFIG.getObject
 ('PCONFIG_KEY')[->OBJ]           #
NPCONFIG.getBoolean
 ('PCONFIG_KEY')[->BOOL]          #
NPCONFIG.getNumber
 ('PCONFIG_KEY'[, OPTS])[->NUM]   #
OPTS.min|max                      #NUM

NPCONFIG.require*(...)->VAL       #Same as NPCONFIG.get*(...) but throw instead of returning undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STACK CONFIG          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCONFIG                           #Like PCONFIG but:
                                  #  - for a STACK
                                  #  - cannot specify type
                                  #Inherits PCONFIG values

[N]STACK_SETTINGS.config          #[N]SCONFIG
[N]SCONFIG.SCONFIG_VAR            #'SCONFIG_VAL'|NCONFIG_SECRET_VAL

NUPDATE.config
GH_INPUTS.config-map              #NSCONFIG_MAP
NSCONFIG_MAP.SCONFIG_VAR          #NSCONFIG_ENTRY
NSCONFIG_ENTRY.value              #SCONFIG_VAL|'ENCRYPTED_VAL'

pulumi new|preview|up|watch
--config-path
pulumi config --path              #Allow using VARR with SCONFIG_VAR

pulumi new|preview|up|watch
--config|-c                       #'SCONFIG_VAR=SCONFIG_VAL'_ARR
NSTACK.setAllConfig
 (NSCONFIG_MAP)->>                #Set all SCONFIG_VARs

pulumi config set-all
--plaintext|secret
 SCONFIG_VAR=SCONFIG_VAL          #Set multiple SCONFIG_VARs

pulumi config set SCONFIG_VAR
 [SCONFIG_VAL]                    #Def SCONFIG_VAL: stdin
NSTACK.setConfig('SCONFIG_VAR',
 NSCONFIG_ENTRY)->>               #

pulumi config rm-all
 SCONFIG_VAR...
NSTACK.removeAllConfig
 ('SCONFIG_VAR'_ARR)->>           #

pulumi config rm SCONFIG_VAR
NSTACK.removeConfig
 ('SCONFIG_VAR')->>               #

pulumi preview|up|destroy|watch
--show-config
pulumi config
NSTACK.getAllConfig()
 ->>NSCONFIG_MAP                  #

pulumi config get SCONFIG_VAR
NSTACK.getConfig('SCONFIG_VAR')
 ->>NSCONFIG_ENTRY                #

pulumi config refresh
NSTACK.refreshConfig()
 ->>NSCONFIG_MAP                  #Sync local SCONFIG with BACKEND's one
--force|-f                        #Do not abort if config file exists

pulumi config cp SCONFIG_VAR      #
--dest|-d                         #'STACK'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SECRETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECRETS ==>                       #Encrypt PCONFIG|SCONFIG|TCONFIG|OUTPUT|POUTPUT values when stored|serialized
                                  #Never encrypted runtime:
                                  #  - automatically decrypted
                                  #  - only marked as secret

SECRETS_PROV                      #Where secret key is located
                                  #One of:
                                  #  - 'default' (def if BACKEND Pulumi Cloud): Pulumi Cloud
                                  #  - 'passphrase' (def otherwise): locally
                                  #  - 'awskms://...?region=REGION'
                                  #  - 'gcpkms://...'
                                  #  - 'azurekeyvault://...'
                                  #  - 'hashivault://...'
                                  #Not fully documented yet

pulumi:secrets_provider
NWOPTS|NWORKSPACE|NSTACK_SETTINGS
 .secretsProvider
GH_INPUTS.secrets-provider
pulumi new|stack init
 |stack select|up|watch
--secrets-provider                #'SECRETS_PROV'

pulumi stack
 change-secrets-provider
 SECRETS_PROV                     #

XDEPLOYMENT.secrets_providers     #XSECRETS_PROV
XSECRETS_PROV.type                #'SECRETS_PROV'
XSECRETS_PROV.state               #XSECRETS_PROV_STATE
XSECRETS_PROV_STATE.project       #'PROJECT'
XSECRETS_PROV_STATE.stack         #'STACK'
XSECRETS_PROV_STATE.url           #'URL'
XSECRETS_PROV_STATE.owner         #STR

pulumi config set|set-all
--plaintext|secret                #Whether to encrypt or not

fn::secret(VAL)->VAL
secret({VAL})->}VAL{              #Mark as secret
unsecret(}VAL{)->}VAL{            #Mark as not secret
isSecret(}VAL{)->>BOOL            #

NPCONFIG.get|requireSecret*
 (...)[->}VAL{]                   #Same as NPCONFIG.get|require*(...) but mark as secret
PCONFIG_VAL|NSCONFIG_ENTRY
 |[N]TCONFIG_ENTRY|NPOUTPUT.secret#BOOL
SCONFIG_SECRET_VAL.secure         #'ENCRYPTED_VAL'

[NC]ROPTS.additionalSecretOutputs #'OUTPUT'_ARR to mark as secret
NSREZ.secretOutputNames           #}'OUTPUT'_ARR{ that are marked as secret

pulumi stack
pulumi config
 [history|output|export]
--show-secrets
HARGS[2]
SOPTS.showSecrets                 #BOOL. If false (def), secrets are not printed

NSTACK_SETTINGS.encryptedKey
ENVVAR PULUMI_CONFIG_PASSPHRASE   #'SECRET', with SECRETS_PROV 'passphrase'
ENVVAR
 PULUMI_CONFIG_PASSPHRASE_FILE    #Like PULUMI_CONFIG_PASSPHRASE but as 'PATH'
NSTACK_SETTINGS.encryptionSalt    #STR, with SECRETS_PROV 'passphrase'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSETS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.asset                           #NS
ASSET                             #File

fn::stringAsset('CONTENT')
new NS.StringAsset([>]'CONTENT')  #[N]STRING_ASSET. Child of ASSET
NSTRING_ASSET.text                #>'CONTENT'

fn::fileAsset('PATH')
new NS.FileAsset([>]'PATH')       #[N]FILE_ASSET. Child of ASSET
NFILE_ASSET.path                  #>'PATH'

fn::remoteAsset('URI')            #[N]REMOTE_ASSET. Child of ASSET
new NS.RemoteAsset([>]'URI')      #Can use HTTP[S] or file:
NREMOTE_ASSET.uri                 #>'URI'

ARCHIVE                           #Collection of ASSETs|ARCHIVEs

fn::assetArchive(ASSETS)
new NS.AssetArchive([>]NASSETS)   #[N]ASSET_ARCHIVE. Child of ARCHIVE
NARCHIVE.assets                   #>NASSETS
[N]ASSETS.ARCHIVE_ITEM            #[N]ASSET|[N]ARCHIVE

fn::fileArchive('PATH')           #[N]FILE_ARCHIVE. Child of ARCHIVE
new NS.FileArchive([>]'PATH')     #Either 'DIR' or PATH to *.tar|tgz|tar.gz|zip|jar
NFILE_ARCHIVE.path                #>'PATH'

fn::remoteArchive('URI')          #[N]REMOTE_ARCHIVE. Child of ARCHIVE
new NS.RemoteArchive([>]'URI')    #Must be *.tar|tgz|tar.gz|zip|jar
NREMOTE_ARCHIVE.uri               #>'URI'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    FUNCTION SERIALIZATION     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NR.serializeFunction              #Serialize FUNC.
 (FUNC[, OPTS])->>OBJ             #Goal is to allow passing FUNCs to REZs arguments, that are called later
                                  #  - e.g. AWS Lambda, or NVPROV.*
                                  #OBJ:
                                  #  - text 'CODE'
                                  #  - exportName 'VAR'
                                  #  - containsSecrets BOOL
                                  #Serializes recursively any:
                                  #  - FUNC calls
                                  #  - FUNC closure
                                  #  - imports
                                  #     - ESM imports of Node core|external modules are turned into CommonJS imports and not recursed
                                  #  - stack lines, for debugging
                                  #Serialized values use their current value, i.e. inlined
                                  #Serialize:
                                  #  - FUNCs with toString()
                                  #  - PROMISE resolved value, i.e. awaits them
                                  #  - REZs
                                  #  - any other JavaScript type
                                  #Does not work with:
                                  #  - native FUNCs (e.g. FUNC.bind(...)) declared in closure scope
                                  #  - dynamic OBJ[STR] declared in closure scope, with STR unknown at compile-time
                                  #Uses 'v8' and 'inspector' Node core modules under the hood
OPTS.exportName                   #'VAR' (def: 'handler') of the named export in 'CODE'
OPTS.isFactoryFunction            #BOOL (def: false). If true, serialize FUNC(), not FUNC
OPTS.serialize                    #FUNC(VAL)->BOOL. Called on each VAL recursively. If false, do not serialize.
                                  #Meant to remove cycles
OPTS.allowSecrets                 #BOOL. If false (def), do not serialize secrets
OPTS.logResource                  #REZ passed to any thrown new ResourceError()

NR.computeCodePaths(OPTS)         #Compute list of files from package.json `dependencies`, recursively.
 ->>ASSET|ARCHIVE_MAP             #Does not inspect files except for package.json, i.e. might be adding too much|little.
                                  #package.json:
                                  #  - can contain `runtimeDependencies`: used instead of `dependencies`
                                  #  - is excluded if Pulumi core package (name @pulumi/*) or PROV (`package.json` `pulumi`)
                                  #Meant for serverless Functions packaging.
OPTS.extraInclude|ExcludePackages #STR_ARR. Node modules to include|exclude, additionally.
OPTS.extraIncludePaths            #'PATH'_ARR to include, additionally.
OPTS.logResource                  #Like NR.serializeFunction()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DEPLOYMENT LOCAL        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOCAL WORKSPACE ==>               #Run UPDATE locally

PHOME_DIR/workspaces/PROJECT-
 WORKSPACE_ID-workspace.json      #Local WORKSPACE_SETTINGS

NA.LocalWorkspace
 .create([NWOPTS])->>NWORKSPACE   #

NSTACK.workspace                  #NWORKSPACE

NWOPTS|NWORKSPACE.pulumiHome      #'PHOME_DIR' where to store binaries, PLUGINs, WORKSPACEs, TEMPLATEs, ACCESS_TOKENs.
ENVVAR PULUMI_HOME                #Def: ~/.pulumi

pulumi ... --cwd|-C
GLOBALS.pulumi.cwd                #'CWD_DIR' (def: '.') used for:
NWOPTS|NWORKSPACE.workDir         #  - main files like Pulumi[.STACK].yaml|json, index.js|ts, etc.
GH_INPUTS.work-dir                #  - all local paths
NQOPTS.workDir                    #Same. Not with NQOPTS.projectName|program

[N]PROJECT.main                   #'DIR' of PROGRAM
                                  #Def: 'CWD_DIR'

NWOPTS|NWORKSPACE.envVars         #OBJ of ENVVARs passed to PROGRAMs

NWORKSPACE.serializeArgsForOp     #FUNC('STACK')->>STR_ARR
                                  #Pass additional CLI args to every command (including under the hood)
NWORKSPACE.postCommandCallback    #FUNC('STACK')->>
                                  #Run after every CLI command (including under the hood)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DEPLOYMENT CREATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PULUMI DEPLOYMENT ==>             #Run UPDATE on Pulumi Cloud

DEPLOYMENTS_URL                   #API_URL/preview/ORG/PROJECT/STACK/deployments

POST DEPLOYMENTS_URL              #Req: XDEPLOYMENT_REQ
                                  #Res: empty
                                  #Can be done from a "Click to deploy" UI button
NA.RemoteWorkspace.create|select
 |createOrSelectStack
 (NQROPTS[, RQCOPTS])->>NRSTACK   #

XDEPLOYMENT_REQ                   #Run on Pulumi Cloud:
                                  #  - fetch git repo
                                  #  - install dependencies
                                  #  - set cloud credentials
                                  #  - find PROGRAM
                                  #  - run UPDATE
XDEPLOYMENT_REQ.*                 #Like XDSETTINGS
XDEPLOYMENT_REQ.inheritSettings   #BOOL (def: false). Inherit STACK's XDSETTINGS
XDEPLOYMENT_REQ.operation         #'preview|up|refresh|destroy'

NQROPTS.stackName                 #'STACK'
NRSTACK                           #SOPTS has only: onEvent|onOutput()

POST DEPLOYMENTS_URL/UUID/cancel  #Req: empty
                                  #Res: empty
                                  #Cancal a XDEPLOYMENT_REQ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      DEPLOYMENT SETTINGS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SETTINGS_URL                      #DEPLOYMENTS_URL/settings

GET SETTINGS_URL                  #Req: empty
                                  #Res: XDSETTINGS
POST SETTINGS_URL                 #Req: XDSETTINGS
                                  #Res: XDSETTINGS
DELETE SETTINGS_URL               #Req: empty
                                  #Res: empty

XDSETTINGS                        #Settings for all XDEPLOYMENT_REQ of a given STACK

XDSETTINGS.sourceContext          #XDSOURCE. Locates the PROGRAM to fetch.
NQROPTS.url
XDSOURCE.repoURL                  #'URL' to repository
NQROPTS.projectPath
XDSOURCE.repoDir                  #'DIR' (def: root)
NQROPTS|XDSOURCE.branch           #Git 'BRANCH'
NQROPTS.commitHash
XDSOURCE.commit                   #Git 'COMMIT_HASH'

NQROPTS.auth
XDSOURCE.gitAuth                  #NDGIT|XDGIT. Git credentials, only for private repos
NDGIT|XDGIT.personalAccessToken   #STR
NDGIT.sshPrivateKey
XDGIT.sshAuth.sshPrivateKey       #XSECRET
NDGIT.sshPrivateKeyPath           #'PATH'
NDGIT.password
XDGIT.sshAuth.password            #XSECRET
NDGIT.username
XDGIT.basicAuth.userName          #STR
XDGIT.basicAuth.password          #XSECRET

XDSETTINGS                        #STR. Pulumi CLI Docker image
 .executorContext.executorImage   #See above for available ones. Def: 'pulumi/pulumi'
XDSETTINGS.operationContext       #XDOP
NQCOPS|XDOP.preRunCommands        #'SHELL_COMMAND'_ARR to run before Pulumi command
NQCOPTS.envVars.ENVVAR
XDOP.environmentVariables.ENVVAR  #'VAL'|XSECRET
NQCOPTS.skipInstallDependencies
XDOP.options
 .skipInstallDependencies         #BOOL (def: false). Do not automaticaly install dependencies

XDOP.oidc                         #XDOID
                                  #Credentials to cloud provider
XDOID.azure|gcp                   #Not fully documented yet
XDOID.aws                         #XDAWS. STS credentials, using WEB_ID_ROLE.
                                  #Should create an OPENID_PROVIDER:
                                  #  - WEB_ID_DOMAIN 'https://api.pulumi.com/oidc'
                                  #  - CLIENT_ID 'ORG'
                                  #Trust POLICY should check CONDITION_KEYs:
                                  #  - WEB_ID_DOMAIN:aud 'ORG'
                                  #  - WEB_ID_DOMAIN:sub 'pulumi:deploy:org:ORG:project:Core:*'
XDAWS.roleArn                     #ROLE_ARN
XDAWS.sessionName                 #'ASSUMED_ROLE'
XDAWS.policyArns                  #POLICY_ARN_ARR
XDAWS.duration                    #NUM

XSECRET.secret                    #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEPLOYMENT INFO        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET DEPLOYMENTS_URL/UUID          #Req: empty
GET DEPLOYMENTS_URL/version/NUM   #Res: XDEPLOYMENT
GET DEPLOYMENTS_URL               #Req: empty
                                  #Res: XDEPLOYMENT_ARR

XDEPLOYMENT                       #Result of XDEPLOYMENT_REQ
NUPDATE.Deployment                #'JSON' of XDEPLOYMENT

XDEPLOYMENT.id                    #'UUID'
XDEPLOYMENT.created|modified      #'DATE'
XDEPLOYMENT.version
XDEPLOYMENT.latestVersion
XDEPLOYMENT.requestedBy           #Like XUPDATE.*

XDEPLOYMENT.jobs                  #XDJOB_ARR
                                  #CI jobs performed
XDJOB.steps                       #XDSTEP_ARR
                                  #CI steps performed
XDEPLOYMENT|XDJOB|XDSTEP.status   #'running|succeeded'
XDJOB|XDSTEP.started|lastUpdated  #'DATE'
XDSTEP.name                       #STR

XDEPLOYMENT.configuration         #XDCONF
XDCONF.source                     #XDSOURCE

XDCONF.environmentVariables       #XDENVVAR_ARR
XDENVVAR.name                     #'ENVVAR'
XDENVVAR.value                    #'VAL'
XDENVVAR.secret                   #BOOL

XUPDATE.githubCommitInfo          #XGITINFO
XGITINFO.slug                     #'USER/REPO'
XGITINFO.sha                      #'COMMIT_HASH'
XGITINFO.url                      #'URL' to commit
XGITINFO.author                   #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEPLOYMENT LOGS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET DEPLOYMENTS_URL/UUID/logs     #Req: OBJ
                                  #Res: lines XLINE_ARR
                                  #Can paginate either by nextToken or by step|offset|count

XLINE                             #Stdout|stderr line of XDEPLOYMENT
XLINE.line                        #STR
XLINE.header                      #STR. Like XLINE.line, but defined for main section lines.
XLINE.timestamp                   #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     DEPLOYMENT GITHUB APP     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB APP ==>                    #Perform XDEPLOYMENT through REST API
                                  #  - `preview` on PRs
                                  #  - `up` on new commit of main branch ("push to deploy")
                                  #Also add PR comment when done: like pulumi/actions, but better ones
                                  #Cannot be used together XDSOURCE.repoURL

XDSETTINGS.github                 #XDGITHUB. GitHub app settings.
                                  #Can also be set through the UI.
XDGITHUB.repository               #'URL' to repository with PROGRAM.
XDGITHUB.previewPullRequests      #BOOL. If true (def), run `preview` on PRs
XDGITHUB.deployCommits            #BOOL. If true (def), run `up` on new commit of main branch specified by XDSOURCE
                                  #Cannot run on multiple branches (e.g. staging)
XDGITHUB.paths                    #'PATH'_ARR. Only run preview|up if specified files are modified.
                                  #Can included *|**|!


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DEPLOYMENT CI         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPLOYMENT CI ALTERNATIVE ==>     #Using GitHub|GitLab|BitBucket CI (e.g. GitHub actions)
                                  #Alternative to deploying either locally or in Pulumi Cloud.
                                  #E.g., on new commits:
                                  #  - `preview` on PR
                                  #  - `up` with staging|prod STACK on staging|main branch
                                  #Pulumi CLI detects ENVVARs for popular CIs and populate UPDATE history with them
                                  #  - sets ENVVARs PULUMI_CI_BUILD_URL|ID|NUMBER and PULUMI_CI_SYSTEM
                                  #Only with team plan

pulumi/actions                    #GitHub action:
                                  #  - run pulumi CLI
                                  #  - add PR comment when done
                                  #Version 4.2.1
GH_INPUTS.github-token            #'TOKEN' (def: '${{github.token}}')
GH_INPUTS.command                 #'preview|up|refresh|destroy'
GH_INPUTS.comment-on-pr           #BOOL (def: false): add comment on PR with result of action
GH_INPUTS.comment-on-pr-number    #NUM. add comment to a specific PR
GH_INPUTS.edit-pr-comment         #BOOL. if true (def), edit PR comment instead of adding new ones
GH_INPUTS.*                       #Others documented in this doc
GH_OUTPUTS.POUTPUT                #VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROJECT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT                           #Sets of REZs to provision, and related settings
                                  #Set in CWD_DIR/Pulumi.yaml|json
                                  #Used with any runtime, not only YAML

pulumi-ai                         #CLI using ChatGPT to create a PROJECT file based on natural language
                                  #There is also a UI version

NWOPTS.projectSettings            #NPROJECT
NWORKSPACE.saveProjectSettings
 (NPROJECT)->>                    #
NWORKSPACE.projectSettings()
 ->>NPROJECT                      #

pulumi new                        #Create a new PROJECT
--generate-only|-g                #Unless specified, also create a STACK, STACK_SETTINGS and install language RUNTIME
--dir                             #'DIR' where to generate (def: '.')
--force|-f                        #Override existing files

DEPENDENCIES INSTALL ==>          #Automatically installs:
                                  #  - language RUNTIME, e.g. @pulumi/pulumi
                                  #  - PROV dependency, e.g. @pulumi/aws
ENVVAR PULUMI_PREFER_YARN         #If 'true', use yarn instead of npm

getProject()->'PROJECT'
GLOBALS.pulumi.project            #'PROJECT'

pulumi:project
XREZ.project
[N]PROJECT.name                   #'PROJECT'
pulumi new --name|-n              #'PROJECT' (def: prompted)

pulumi:description
[N]PROJECT.description            #STR
pulumi new --description|-d       #PROJECT.description (def: prompted)

[N]PROJECT.author                 #STR
[N]PROJECT.license                #STR
[N]PROJECT.website                #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEMPLATE                          #Template PROJECT|POLICY_PACK, to reuse

OFFICIAL TEMPLATES                #At https://github.com/pulumi/templates and https://github.com/pulumi/templates-policy
                                  #Can submit a PR

pulumi new|up|policy new TEMPLATE #Def TEMPLATE: interactive choice
                                  #TEMPLATE can also be a:
                                  #  - PATH
                                  #  - URL to GitHub|GitLab|BitBucket repository|branch|subdirectory
GET https://app.pulumi.com/new    #Same but done in Pulumi Cloud UI.
 ?template=TEMPLATE               #A "deploy with Pulumi button" Markdown is also available.

pulumi new --list-templates|-l    #List TEMPLATEs then exit

pulumi [policy] new ...
--offline|-o                      #Only use locally cached TEMPLATEs
PHOME_DIR/templates/              #Local cache for TEMPLATEs

AUTHORING TEMPLATE ==>            #Create files to scaffold as is
                                  #Must have a Pulumi.yaml|json
                                  #  - should use ${PROJECT|DESCRIPTION} for PROJECT.name|description

[N]PROJECT.template               #[N]TEMPLATE
                                  #Settings when authoring a TEMPLATE
[N]TEMPLATE.description           #STR. Description of the TEMPLATE itself, not the created PROJECT
NTEMPLATE.quickstart              #STR. Shown on template creation
NTEMPLATE.important               #BOOL (def: false). List TEMPLATE by default

[N]TEMPLATE.config                #[N]TCONFIG. PCONFIG created by the TEMPLATE
                                  #Prompted on creation
[N]TCONFIG.TCONFIG_VAR            #[N]TCONFIG_ENTRY
[N]TCONFIG_ENTRY.default          #VAL|'ENCRYPTED_VAL'
[N]TCONFIG_ENTRY.description      #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAM MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAMS ==>                      #File declaring [N]REZs. One per PROJECT

PROGRAM                           #YAML runtime uses same file as PROJECT (CWD_DIR/Pulumi.yaml|json) as PROGRAM
PACKAGE.JSON MAIN FILE ==>        #NPROGRAM
                                  #Can be *.ts when using TypeScript

NWOPTS|NWORKSPACE|NQOPTS.program  #FUNC()[->>POUTPUTS_OBJ].
                                  #"Inline program": use a FUNC instead of a regular PROGRAM file
SOPTS.program                     #Same. Only with preview|up()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAM ERROR         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new ResourceError                 #NRERROR. Child of ERROR
 ('MESSAGE'[, NREZ][, BOOL])      #To throw to abort execution, when related to a specific REZ
NRERROR.resource                  #NREZ
NRERROR.hideStack                 #BOOL (def: false)

new RunError('MESSAGE')           #ERROR to throw to abort execution
                                  #Prefer ResourceError


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK SET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK                             #Instantiation of a PROGRAM with specific STATE and STACK_SETTINGs
                                  #E.g. prod vs staging vs dev, or Git branch
OSTACK                            #[ORG/[PROJ/]]STACK
                                  #Def ORG|PROJ: current one
OOSTACK                           #ORG/PROJ/STACK
NA.fullyQualifiedStackName
 ('ORG', 'PROJECT', 'STACK')
 ->'OOSTACK'                      #

pulumi stack init OSTACK          #Create an empty STACK
                                  #Def ORG: current one
                                  #Does not create STACK_SETTINGS unless needed
--copy-config-from                #'STACK2'. Copy its SCONFIG
--no-select                       #Do not select the STACK

NA.LocalWorkspace.create|select
 |createOrSelectStack
 (NQOPTS[, NWOPTS])->>NSTACK      #NQOPTS: stackName 'STACK', projectName 'PROJECT'
NA.Stack
 .create|select|createOrSelect
 ('STACK', NWORKSPACE)->>NSTACK2  #
NWORKSPACE
 .create|selectStack('STACK')->>  #
pulumi stack select [OSTACK]      #Select the OSTACK, i.e. make it the current one
                                  #Def OSTACK: interactive prompt
--create|-c                       #Upserts
GH_INPUTS.upsert                  #BOOL (def: false)

WORKSPACE_SETTINGS.stack          #Selected 'STACK'

pulumi stack unselect             #No more selected STACK

pulumi about|cancel|config ...
 |console|destroy|import|logs
 |new|preview|refresh|stack ...
 |state|up|watch
GH_INPUTS.stack-name
--stack|-s                        #'STACK' instead of selected one

pulumi stack rename STACK         #Rename a STACK

DELETE STACK_URL                  #Req: OBJ
                                  #  - force BOOL
                                  #Res: empty
NWORKSPACE.removeStack('STACK')->>
pulumi stack rm [STACK]           #Remove an empty STACK and its STACK_SETTINGS and UPDATEs
--preserve-config                 #Do not delete the STACK_SETTINGS
--force|-f                        #Delete even if STACK has REZs

NWORKSPACE
 .export*|import*|*Config*|*Tag*
 ('STACK', ...)                   #Same as NSTACK.exportStack|...(...)
NWORKSPACE.stackOutputs('STACK')  #Same as NSTACK.outputs()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK GET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACKS_URL                        #API_URL/stacks
USER_STACKS_URL                   #API_URL/user/stacks
STACK_URL                         #STACKS_URL/ORG/PROJECT/STACK

GET USER_STACKS_URL               #Req: empty
                                  #Res: OBJ: stacks XSTACK_SHORT_ARR
NWORKSPACE.listStacks()
 ->>NSTACK_SUMMARY_ARR
pulumi stack ls                   #All STACKs of current PROJECT
--all|-a                          #Print for all PROJECTs
--organization|-o                 #'ORG'
--project|-p                      #'PROJECT'

getStack()->'STACK'               #
GLOBALS.pulumi.stack              #'STACK'

pulumi stack                      #Print current STACK and its REZs
--show-name                       #Print only 'STACK'
--show-ids|-i                     #Show REZ_IDs
--show-urns|-u                    #Show URNs

GET STACK_URL                     #Req: empty
                                  #Res: XSTACK
NWORKSPACE.stack()
 [->>NSTACK_SUMMARY]              #

XSTACK[_SHORT].orgName            #'ORG'
XSTACK[_SHORT].projectName        #'PROJECT'
XREZ.stack
XSTACK[_SHORT].stackName
NSTACK[_SUMMARY].name             #'STACK'

XSTACK_SHORT|NSTACK_SUMMARY
 .resourceCount                   #NUM of REZs
NSTACK_SUMMARY.current            #BOOL
XSTACK.activeUpdate               #'UUID'
NSTACK_SUMMARY.updateInProgress   #BOOL
XSTACK_SHORT|NSTACK_SUMMARY
 .lastUpdate                      #DATE_NUM
NSTACK_SUMMARY.url                #'URL'
XSTACK.version                    #NUM

XSTACK.currentOperation           #XCUR_OP
XCUR_OP.kind                      #'RES_UPDATE_KIND'
XCUR_OP.author                    #STR
XCUR_OP.started                   #DATE_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STACK SETTINGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_SETTINGS                    #STACK-specific settings
                                  #Persisted at STACK_CONFIG_DIR/Pulumi.STACK.yaml|json
PROJECT.stackConfigDir            #'STACK_CONFIG_DIR' (def: where Pulumi.yaml|json is)
pulumi config ...|destroy|import
 |logs|preview|refresh|up|watch
--config-file                     #'PATH' instead of 'CWD_DIR/Pulumi.STACK.yaml|json'

NWOPTS.stackSettings              #NSTACK_SETTINGS
NWORKSPACE.saveStackSettings
 ('STACK', NSTACK_SETTINGS)->>    #
NWORKSPACE.stackSettings()
 ->>NSTACK_SETTINGS               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STACK TAGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS                              #Custom metadata on a STACK
                                  #Not with self-managed BACKEND
'TAG'                             #TAG name, usually 'NAMESPACE:NAME', camelCase
pulumi|gitHub|vcs:*               #Built-in TAGs

TAGS_URL                          #STACK_URL/tags

POST TAGS_URL                     #Req: XTAGS: name 'TAG', value 'VAL'
                                  #Res: empty
NSTACK.setTag('TAG', 'VAL')->>    #
pulumi stack tag set TAG VAL      #

XSTACK.tags.TAG                   #'VAL'
NSTACK.listTags()->>OBJ           #
pulumi stack tag ls               #

NSTACK.getTag('TAG')->>'VAL'      #
pulumi stack tag get TAG          #

DELETE TAGS_URL/TAG               #Req: empty
                                  #Res: empty
NSTACK.removeTag('TAG')->>        #
pulumi stack tag rm TAG           #

pulumi stack ls --tag|-t          #'TAG=VAL' filter


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STACK STATE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET STACK_URL/export              #Req: empty
                                  #Res: XSTACK_STATE
N[R]STACK.exportStack()
 ->>NSTACK_STATE                  #
pulumi stack export               #Print STACK_STATE

N[R]STACK.importStack
 (NSTACK_STATE)->>
pulumi stack import               #Re-add STACK_STATE
--force|-f                        #Allow apparent errors

pulumi stack export|import        #
--file                            #'PATH' of serialized STACK_STATE (def: stdout)

STACK_STATE                       #Also named "checkpoint"
                                  #Stored in BACKEND

pulumi stack export --version     #NUM (def: latest)
N|XSTACK_STATE.version            #Always 3
                                  #Version of STACK_STATE format.

N|XSTACK_STATE.deployment         #N|XDEPLOYMENT
N|XDEPLOYMENT.resources           #NDREZ|XDREZ_ARR
N|XDEPLOYMENT.manifest            #N|XMANIFEST
N|XMANIFEST.time                  #'DATE'

N|XMANIFEST.magic                 #'HASH' checksum. Meant for integrity only
pulumi ...
--disable-integrity-checking      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESOURCE MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ                               #Specific infrastructure resource, e.g. S3 Bucket
REZ_CLASS                         #Class of a REZ

RTYPE                             #REZ type
                                  #'PACKAGE:MODULE[/TYPE]:TYPE'
                                  #The repetion of /TYPE is only for specific REZs
                                  #  - e.g. 'aws:s3/bucket:Bucket'
NDREZ|XDREZ|XREZ|NPREZ|REZ.type
NVREZ_ARGS[5]
N[C|K]REZ_ARGS[0]                 #'RTYPE'

'REZ'                             #REZ identifier within Pulumi
                                  #Must be unique per STACK + RTYPE
                                  #Also called "logical name"
XREZ|NPREZ.name
NSREZ_ARGS[0]
N[C|D|K]REZ_ARGS[1]               #'REZ'

'REZ_ID'                          #REZ identifier within provisioned infrastructure (e.g. on AWS)
                                  #E.g. AWS ARN
                                  #Also called "physical name"
                                  #Def: 'REZ-RANDOMID' ("auto-naming")
                                  #  - RANDOMID: 7 hex chars, i.e. 56 bits entropy, i.e. collision likely after ~1e4 items
                                  #Most REZ have a RPROP to explicitely set it
                                  #  - REZ-specific
                                  #  - often called `name`, but not always
                                  #  - when set:
                                  #     - should include PROJECT and STACK in name, to avoid collision with other PROJECT|STACKs
                                  #     - ROPTS.deleteBeforeReplace must be true
NDREZ|XDREZ|ZREZ.id               #'REZ_ID'
NCREZ.id                          #}'REZ_ID'{

'URN'                             #REZ identifier for a given STACK
                                  #'urn:pulumi:STACK:PROJECT:[[...$]PARENT_RTYPE$]RTYPE:REZ'
NDREZ|XDREZ|XREZ|NPREZ.urn        #'URN'
NREZ.urn                          #}'URN'{
createUrn({'REZ'}, {'RTYPE'},
 {'PARENT_URN'}|PARENT_NREZ,
 'PROJECT', 'STACK')->}'URN'{     #
pulumi state rename URN REZ       #Rename a REZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESOURCE INIT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM.resources.REZ             #REZ
new N.Resource(...NREZ_ARGS)      #Declare a REZ to provision ("resource registration")
                                  #Provisioning is done by PROV PLUGIN, in a separate process
                                  #  - i.e. done in background, and returns right away
                                  #Base class: usually a child is used.

new N.CustomResource              #NCREZ. Child of NREZ
 (...NCREZ_ARGS)                  #Regular, individual NREZ
NREZ_ARGS[2]                      #BOOL (def: false). If true, custom REZ, like NCREZ
NDREZ|XDREZ|XREZ.custom           #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE OPTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]RPROPS                         #RTYPE-specific options
                                  #Can be used as OUTPUTs
REZ.properties.RPROP
NCREZ_ARGS|NVREZ_ARGS|NKREZ_ARGS
 |NPROV_ARGS[2].RPROP
NREZ_ARGS[3].RPROP                #{VAL}

NPREZ.opts
REZ.options
NPROV_ARGS[3]
NREZ_ARGS[4]                      #[N]ROPTS. RTYPE-agnostic options
NSREZ_ARGS[2]
NCREZ_ARGS|NVREZ_ARGS[3]          #NCROPTS. Child of NROPTS
NKREZ_ARGS[3]                     #NKROPTS. Child of NROPTS

[NC]ROPTS.customTimeouts.METHOD   #'NUMns|us|ms|s|m|h|d' timeout (def: none) when performing a METHOD on the REZ.
                                  #METHOD can be create|update|delete

[NC]ROPTS.ignoreChanges           #'[N]RPROP'_ARR that are read-only if previously set.
                                  #After being set once, next `up` will keep using current value, even if its declaration has changed.
                                  #Meant to change a RPROP value for new instances of a REZ without changing current ones.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TRANSFORMATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NROPTS.transformations            #NTRANSFORM_ARR
NTRANSFORM                        #FUNC(NTARGS)[->NTRESULT]
                                  #Maps NROPTS|NRPROPS during REZ initialization
                                  #Inherited by child REZs
                                  #  - i.e. useful to set in a NKREZ

NTARGS|NTRESULT.opts              #NROPTS
NTARGS|NTRESULT.props             #NRPROPS
NTARGS.type                       #'RTYPE'
NTARGS.name                       #'REZ'
NTARGS.resource                   #NREZ

NR.registerStackTransformation
 (NTRANSFORM)                     #Add a NTRANSFORM to the rootStackResource, i.e. inherited by all REZs

mergeOptions(N*ROPTS, N*ROPTS2)
 ->N*ROPTS3                       #Deep. ARRs are concatenated


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ROPTS.aliases                     #'URN'_ARR
NROPTS.aliases                    #{'URN'|NALIAS}_ARR

[N]ALIAS                          #Alternative URN for the REZ
                                  #Meant to allow renaming REZ without losing former references to it
                                  #  - e.g. without forcing a "replace"
NALIAS.type                       #{'RTYPE'}
NALIAS.project                    #{'PROJECT'}
NALIAS.stack                      #{'STACK'}
NALIAS.name                       #{'REZ'}
NALIAS.parent                     #NREZ|{'URN'}

allAliases({'URN'|NALIAS}_ARR,
 'REZ', 'RTYPE', PARENT_NREZ,     #Turn NALIAS_ARR into 'URN'_ARR
 'PARENT_REZ')->}'URN'{_ARR       #If PARENT has NALIASes too, use cartesian product, since PARENT is part of child's URN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DEPENDENCIES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDENCIES ==>                  #A REZ depending on another REZ2 wait for it to be provisioned first.

INPUT DEPENDENCIES ==>            #A REZ with an INPUT using another REZ2's OUTPUT creates a dependency.
NDREZ|XDREZ
 .propertyDependencies            #{ 'RPROP': 'URN'_ARR, ... } of input dependencies
NZREZ.propertyDependencies.RPROP  #NZREZ_ARR

[N]ROPTS.dependsOn                #{[N]REZ[_ARR]}. Explicitly add a dependency to another REZ.

XREZ.dependencies                 #'URN'_ARR
NZREZ.dependencies                #NZREZ_ARR

GH_INPUTS.target-dependents
SOPTS.targetDependents
pulumi preview|up|destroy
 |state delete
--target-dependents               #Also operate on dependent REZs

pulumi stack graph [PATH]         #Visualize STACK dependencies|parents as a DOT graph
                                  #Def PATH: stdout
--short-node-name                 #Label each node with its 'REZ'
--ignore-dependency|parent-edges  #Skip edges related to dependencies|parents
--dependency|parent-edge-color    #'#COLOR' (def: '#246C60|#AA6639')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]ROPTS.parent                   #{REZ}|NREZ
                                  #Parent REZ
                                  #Cannot delete parent without deleting children
                                  #Inherits some of parent [N]ROPTS, including PROV, protect, retainOnDelete, TRANSFORM
                                  #Semantic goal too
                                  #  - e.g. child/parent graphs shown with CLI
                                  #Mostly mean for CREZs

XDREZ.parent
XREZ.parent.urn                   #'URN'
NZREZ.parent                      #NZREZ

rootStackResource                 #NREZ of the current STACK
                                  #Root NREZ
                                  #Def parent NREZ when not specified
NR.rootPulumiStackTypeName        #'pulumi:pulumi:Stack'. RTYPE of rootStackResource


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMPONENT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new N.ComponentResource           #NKREZ. Child of NREZ
 (...NKREZ_ARGS)                  #Group of NREZs, often:
                                  #  - initialized in constructor
                                  #  - passing itself as [N]ROPTS.parent
                                  #  - namespacing name with parent 'REZ' to prevent collisions
                                  #Can also be a single child NREZ, but with specific options|methods|etc.

COMPONENT PROTECTED METHODS ==>   #Following methods are `protected`, i.e. meant to be used during class declaration
NKREZ.registerOutputs             #Set OUTPUTs. To do once in end of constructor.
 ([}VAL{|[>]VAL])                 #VAL is {{OBJ}}

NKREZ.initialize({{OBJ}})->>OBJ   #Set custom data
NKREZ.getData()->>OBJ             #Get custom data


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXTERNAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CREZ_CLASS                        #Return NREZ already provisioned elsewhere.
 .get('REZ', 'REZ_ID'[, OUTPUTS]  #Pulumi does not try to manage it.
  [, NCROPTS])                    #NREZ.* OUTPUTs are available.
 ->NREZ                           #If OUTPUTS argument ("state input|argument"), must match too.
                                  #NCPROPS must match the values provisioned elsewhere.
                                  #  - i.e. must usually use RPROPS.name (or similar) to set the REZ_ID as well
REZ.get                           #Same in YAML
REZ.get.id                        #'REZ_ID'
REZ.get.state                     #{{NCROPTS}}

pulumi up --show-reads            #Show REZs being read as external or import

new N.DependencyResource('URN')   #Child of NCREZ
                                  #Represent an external REZ
new N.DependencyProviderResource
 ('URN::REZ_ID')                  #Child of NPROV
                                  #Represent an external REZ that is a PROV

NREZ_ARGS[6]                      #BOOL (def: false)
NCREZ_ARGS[4]                     #Set by REZs like Dependency[Provider]Resource to mark them as external, for dependency tracking.
NPROV_ARGS[4]                     #Mostly internal


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NROPTS.id                         #{'REZ_ID'}
[NC]ROPTS.import                  #'REZ_ID'
                                  #Like CustomResource.get()
                                  #  - including that the other RPROPS must match
                                  #However, add the REZ to the STACK_STATE
                                  #  - REZ is not created, but is now managed by Pulumi
                                  #  - i.e. after an `up`, should remove `import`
NROPTS.urn                        #Same with 'URN'

pulumi import RTYPE REZ REZ_ID    #Same action as ROPS.import
                                  #Instead of REZ_ID, 'RPROP,...' can also often be used

--generate-code                   #BOOL. If true (def), print source code to add for that REZ
--out|-o                          #'DIR'

--protect                         #BOOL. If true (def), make REZs protected.
                                  #Reason: prevent deletion if forgot to add the source code from --generate-code

--provider
--parent                          #NAME='URN' of PROV|parent, mapping variable name
--properties                      #'RPROP,...' to include

-f                                #'PATH.json' to import multiple resources.
                                  #OBJ:
                                  #  - nameTable.NAME 'URN': like --provider|parent
                                  #  - resources IMPORT_REZ_ARR
IMPORT_REZ.type                   #'RTYPE'
IMPORT_REZ.name                   #'REZ'
IMPORT_REZ.id                     #'REZ_ID'
IMPORT_REZ.provider               #'PROV'
IMPORT_REZ.parent                 #'REZ'
IMPORT_REZ.version                #STR
IMPORT_REZ.properties             #'RPROP'_ARR

CLOUD IMPORT ==>                  #CLI like `pulumi import` but for all REZs on a Cloud provider, Terraform, etc.

CONVERTERS ==>                    #CLI binaries converting PROGRAMs from another provider to Pulumi.
                                  #Unlike `pulumi import`, targets source files, not provisioned REZ.
                                  #For: Terraform, CloudFormation, Azure ARM, Kubernetes
                                  #Not fully documented yet
pulumi import --from              #Use a converter plugin

@pulumi/terraform                 #Like STACK_REFERENCE, but referring to a Terraform remote state instead
                                  #Not fully documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CREATE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



N[R]STACK.preview([SOPTS])
 ->>NURESULT                      #Show a preview of `pulumi up`
pulumi preview                    #Recommended to run before `up`

pulumi destroy|import|refresh|up
--skip-preview|-f                 #Do not compute a preview first

NR.isDryRun()->BOOL               #true if currently in a `preview`

N[R]STACK.up([SOPTS])->>NURESULT  #Create|update REZs in a STACK
pulumi up                         #Only make minimum necessary updates.

N[R]STACK.cancel()->>             #Cancel current update
pulumi cancel [STACK]             #Does not rollback
                                  #Should be done when an update was aborted, followed by `pulumi refresh`

pulumi watch                      #Update REZs in watch mode
--path                            #'DIR|FILE'_ARR to watch (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REFRESH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DRIFT ==>                         #When IaaC declarations do not match real infrastructure
                                  #Reason: manual changes, low coverage, etc.

N[R]STACK.refresh([SOPTS])        #Fetch actual|physical state of REZ from PROVs, then compares with Pulumi STACK_STATE
 ->>NDRESULT                      #and fix STACK_STATE accordingly.
pulumi refresh                    #Meant to fix drift.

PROJECT.options.refresh           #If 'always' (def: undefined), call refresh() before UPDATE
pulumi preview|up|destroy|watch
--refresh|-r
SOPTS|GB_INPUTS.refresh           #If 'true', call refresh() first

pulumi refresh
--clear-pending-creates           #Remove all pending creates from the state.
                                  #Those are REZs that were being created while an `up` aborted.
--import-pending-creates          #'PROV_URN'_ARR of pending creates to add (through `pulumi import`), instead of removing.
--skip-pending-creates            #Never remove nor add pending creates.
                                  #Def in non-interactive mode

XREZ.pending                      #'creating|deleting|updating|reading|importing'
                                  #Pending action due to an abort


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DELETE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N[R]STACK.destroy([SOPTS])
 ->>NDRESULT
pulumi destroy                    #Destroy all REZs in a STACK

GH_INPUTS.remove
pulumi destroy --remove           #Also destroy STACK itself and its STACK_SETTINGs

pulumi state delete URN           #Delete a REZ from the STACK_STATE, but does not destroy it in PROV

[NC]ROPTS.retainOnDelete          #BOOL (def: false). If true, when REZ is deleted from the STACK, it is removed from
                                  #Pulumi STATE, but not actually unprovisioned by the PROV.
                                  #This includes deletion due to `replace`.

[N]ROPTS.protect                  #BOOL (def: false). If true, prevent deleting REZ
XREZ.protected                    #BOOL
SOPTS.excludeProtected
pulumi destroy --exclude-protected#BOOL (def: false). Keep protected REZs
pulumi state delete ... --force   #Also delete protected REZs
pulumi state unprotect URN        #Make a REZ not protected anymore
--all                             #Apply to all REZs

NROPTS.deletedWith                #NREZ2 which, when deleted, also deletes the current NREZ.
                                  #I.e. when deleting both NREZ and NREZ2, the PROV will skip manually deleting NREZ,
                                  #since deleting NREZ2 is enough.

XREZ.delete                       #BOOL. Whether marked for deletion in next update


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTOMATION MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NDRESULT|NURESULT.stdout|stderr   #STR

SOPTS|GH_INPUTS.target            #'URN'_ARR
pulumi preview|up|refresh|destroy
--target|-t                       #'URN'. Only operate on specific REZs, including children REZs
                                  #Can use wildcards *|**

SOPTS.expectNoChanges
GH_INPUTS.expect-no-changes
pulumi preview|up|refresh ...
--expect-no-changes               #Fail if there are any changes

SOPTS|GH_INPUTS.parallel
pulumi preview|up|refresh|destroy
 |watch|import
--parallel|-p                     #NUM (def: unlim). Operates on NUM REZs in parallel, in a single update

PARALLEL UPDATES ==>              #Serial if free plan
                                  #Max 5 parallel unless enterprise plan

pulumi ... --exec-agent
SOPTS.userAgent                   #STR (def: 'pulumi-cli/1 (VERSION, OS)')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      AUTOMATION REPLACE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATE VS REPLACE ==>             #Modification of a REZ without|by re-creating it
                                  #Tries to update when possible

SOPTS|GH_INPUTS.replace           #STR_ARR
pulumi preview|up ...
--replace                         #Force replacing specific REZs. Same syntax as --target.
                                  #Must still call --target on the REZs.
--target-replace                  #Combine --target + --replace

[NC]ROPTS.deleteBeforeReplace     #BOOL. When replacing a REZ, whether to delete old REZ before|after creating the new one.
                                  #False (def): allow atomic replaces and easier rollbacks
                                  #True: necessary when REZ_ID is hard-coded

[NC]ROPTS.replaceOnChanges        #'RPROPS_VARR|*'_ARR
                                  #When any RPROP_VARR (or a child property) is changed, always do a replace, not an update.
                                  #Only for edge cases, the PROV usually do the right guess.
                                  #VARR can use *
NOTATION ==>                     !#Means a RPROP uses replaceOnChanges true
TRIGGER                           #Common pattern: RPROP with replaceOnChanges true, and no other purpose than that.
                                  #I.e. replace the REZ when the TRIGGER value changes.
                                  #Often an ARR|OBJ, to track multiple values.
                                  #Sometimes called "keeper"

pulumi preview|up|refresh|destroy
 |watch
--show-replacement-steps          #Show `replace` as two steps (creation then deletion) instead of one


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AUTOMATION REPORT       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS|GH_INPUTS.diff
pulumi preview|up|refresh|destroy
 |import
--diff                            #Show changes as diff

pulumi preview|up|refresh|destroy
 |watch
--show-sames                      #Show REZs that didn't change


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTOMATION PLAN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLAN                              #"Update plan". JSON file with a planned UPDATE
                                  #Can be re-used, to redo exact same RES_UPDATEs
                                  #Requires ENVVAR PULUMI_EXPERIMENTAL=true
pulumi preview --save-plan
SOPTS.plan                        #'PLAN' to save
pulumi up --plan
SOPTS.plan                        #'PLAN' to use


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        UPDATE HISTORY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATE                            #preview|up|refresh|destroy|rename|import
                                  #Ambiguously also called "update" which can also mean:
                                  #  - `up` operation
                                  #  - update of a REZ, by opposition to a replace
[N]UPDATE                         #Not with self-managed BACKEND
UPDATE_KIND                       #'preview|update|refresh|destroy|rename|import'

RES_UPDATE                        #Operation on a REZ in a STACK
RES_UPDATE_KIND                   #'create[-replacement]', 'update', 'replace', 'read[-replacement]', 'delete[-replacement]',
                                  #'discard[-replaced]', 'same', 'refresh', 'remove-pending-replace', 'import[-replacement]'

UPDATES_URL                       #STACK_URL/updates

GET UPDATES_URL                   #Req: OBJ
                                  #  - output-type 'service' or 'cli' (def)
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/latest/previews   #Req: empty
                                  #Res: updates XUPDATE_ARR
                                  #Same but only previews since last UPDATE
N[R]STACK.history(...HARGS)
 ->>NUPDATE_ARR
pulumi stack history              #Print STACK previous UPDATEs
HARGS[0]
--page-size                       #NUM (def: 10), for pagination
HARGS[1]
--page                            #NUM2 (def: 1), for pagination
--full-dates                      #Show absolute dates, not relative ones

NSTACK.info([BOOL])[->>NUPDATE]   #

XUPDATE.updateID                  #'UPDATE_ID'
XUPDATE.info                      #XINFO

NDRESULT.summary                  #NUPDATE
XINFO|NUPDATE.kind                #'UPDATE_KIND'
XINFO.start|endTime               #DATE_NUM
NUPDATE.startTime|endTime         #DATE
XINFO|NUPDATE.result              #'not-started|in-progress|succeeded|failed'
XINFO|NUPDATE.environment.ENVVAR  #'VAL'

XUPDATE.version
XINFO|NUPDATE.version             #NUM
XUPDATE.latestVersion             #NUM

SOPTS|GH_INPUTS.message
pulumi preview|up|refresh|destroy
 |import|watch
--message|-m                      #'MESSAGE' describing the operation
XINFO|NUPDATE.message             #'MESSAGE'

XINFO|NUPDATE
 .resourceChanges.RES_UPDATE_KIND
NURESULT
 .changeSummary.RES_UPDATE_KIND   #NUM

XINFO.config                      #SCONFIG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         UPDATE EVENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET UPDATES_URL/UPDATE_ID         #Req: empty
                                  #Res: OBJ:
                                  #  - status STR
                                  #  - events XEVENT_ARR
GET UPDATES_URL/UPDATE_ID/events  #Req: empty
                                  #Res: events XEVENT_ARR

SOPTS.onEvent                     #FUNC(NEVENT)

N|XEVENT                          #General event: STACK|REZ up, cancel, logs, POLICY_PACK violation
N|XEVENT.timestamp                #DATE_NUM
N|XEVENT.sequence                 #Sequential NUM

N|XEVENT.type                     #'EVENT_TYPE' among:
                                  #  - preludeEvent: start of `up`
                                  #  - summaryEvent: end of `up`
                                  #  - cancelEvent: `cancel`
                                  #  - resourcePreEvent: start of REZ modification
                                  #  - resOutputsEvent: end of successful REZ modification
                                  #  - resOpFailedEvent: end of failed REZ modification
                                  #  - stdoutEngineEvent: logs from CLI itself
                                  #  - diagnosticEvent: logs from PROV
                                  #  - policyEvent: POLICY_PACK violation
N|XEVENT.EVENT_TYPE               #OBJ
                                  #Not fully documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOK                           #Send HTTP request on specific events
                                  #Not with free plan
                                  #Including for Slack
WEBHOOK_KIND                      #Among:
                                  #  - 'stack_preview|update'
                                  #  - 'stack': STACK creation|deletion within an ORG

EMAIL NOTIFICATIONS ==>           #On 'stack_update'. Done from UI

WEBHOOKS_URL                      #ORG_URL/hooks

POST WEBHOOKS_URL                 #Req: XWEBHOOK
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL/WEBHOOK          #Req: empty
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL                  #Req: empty
                                  #Res: XWEBHOOK_ARR

XWEBHOOK.name                     #'WEBHOOK'
XWEBHOOK.displayName              #STR
XWEBHOOK.organizationName         #'ORG'
XWEBHOOK.payloadUrl               #'URL' to send to
XWEBHOOK.active                   #BOOL (def: true). Allow disabling
XWEBHOOK.secret                   #'SECRET' used to compute Pulumi-Webhook-Signature [C]
                                  #with value HMAC_SHA256(PAYLOAD, 'SECRET')
                                  #Should be checked in response, to authenticate

GET WEBHOOKS_URL/WEBHOK/deliveries#Req: empty
                                  #Res: XWEBHOOK_RES_ARR
POST WEBHOOKS_URL/WEBHOOK/ping    #Req: empty
                                  #Res: XWEBHOOK_RES

XWEBHOOK_RES.id                   #'UUID'
XWEBHOOK_RES.kind                 #'WEBHOO_KIND'
XWEBHOOK_RES.payload              #'JSON_OBJ'
                                  #Not fully documented yet
XWEBHOOK_RES.requestHeaders       #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseCode         #NUM
XWEBHOOK_RES.responseHeaders      #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseBody         #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROVIDER MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ.type
 'pulumi:providers:PACKAGE'       #[N]PROV. Child of [N]CREZ
new N.ProviderResource            #"Resource provider". PLUGIN-based REZ which allows instantiating specific REZs,
 (...NPROV_ARGS)                  #usually around a given platform|library.
                                  #Usually, PROVs expose it as a variable named Provider.
RPROPS.package
NPROV_ARGS[0]                     #'PACKAGE'
RPROPS.name
NPROV_ARGS[1]                     #'PROV'
[N]PROV_RPROPS                    #[N]RPROPS of [N]PROV.
                                  #Set with:
                                  #  - NPROV_ARGS[2].RPROP
                                  #  - REZ.properties.RPROP
                                  #  - PCONFIG['PACKAGE:RPROP'] (only default PROV)

N.ProviderResource.register
 ([NPROV])[->>STR]                #

[N]ROPTS.provider                 #{PROV}|NPROV
                                  #Def: same as parent
                                  #  - if none: default PROV
                                  #Most REZs are descendant of a PACKAGE's top-level PROV
                                  #  - i.e. only needed when overwriting PROV_CONFIG_VARs for specific REZs
[NK]ROPTS.providers               #Same but as {PROV}_ARR or { PACKAGE: {PROV}, ... }, i.e. multiple PROVs
                                  #When using an OBJ, children only inherits PROV for their respective PACKAGE
                                  #  - must intersect with it
                                  #Meant for parent REZs, especially NKREZs

NREZ.getProvider('PACKAGE')->NPROV#
NDREZ|XDREZ.provider
XREZ.provider.urn                 #'PROV_URN'
NPREZ.provider                    #NPROV

[N]PROV.defaultProvider           #BOOL (def: false). Use as default PROV
PROV_CONFIG_VAR pulumi:
 disable-default-providers[NUM]   #'PROV|*' to disable as default PROV

PROV_VERSION                      #'PVERSION' of the PROV
[N]ROPTS.version                  #'PROV_VERSION' override for a specific REZ
                                  #Only needed for edge cases


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROVIDER FUNCTION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PFUNC                             #Static FUNC attached to a MODULE
                                  #As opposed to REZ instance|static methods
                                  #Goal either:
                                  #  - logic not related to a specific REZ
                                  #  - allowing logic in YAML PROGRAM
                                  #In both cases, run on every UPDATE, i.e. no individual create|update|delete lifecycle like REZs

MODULE.PFUNC(NPARGS, NIOPTS)->>VAL
MODULE.PFUNCOutput                #Call a PFUNC
 ({{NPARGS}}, NIOPTS)->}VAL{      #When documented, only documents MODULE.PFUNC(), and omit NIOPTS
fn::invoke(OPTS)->VAL             #Same in YAML. OPTS:
                                  #  - function 'PFUNC'
                                  #  - arguments NPARGS|{{NPARGS}}
                                  #  - options IOPTS

PARGS                             #Any OBJ

[N]IOPTS.provider                 #{PROV}|NPROV (def: guessed)
[N]IOPTS.version                  #'PROV_VERSION' (def: guessed)
[N]IOPTS.parent                   #{REZ}|NREZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROVIDER DYNAMIC        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new N.dynamic.Resource            #NVREZ. Child of NCREZ
 (...NVREZ_ARGS)                  #"Dynamic resource provider".
                                  #Like PROV, but run inside PROGRAM, instead of inside a separate resource PLUGIN process.
                                  #Pros:
                                  #  - easier to setup
                                  #  - can depend on PROGRAM logic
                                  #Cons:
                                  #  - uses NR.SerializeFunction()
                                  #  - cannot add PFUNCs nor `new REZ()` logic
                                  #  - only available with RUNTIME nodejs|python
                                  #I.e. not meant to be shared
NVREZ_ARGS[0]                     #NVPROV
NVREZ_ARGS[4]                     #'MODULE'

pulumi-resource-pulumi-RUNTIME    #Resource PLUGIN used under the hood by NVREZs
NVPROV.*                          #Use NR.SerializeFunction() to communicate methods to pulumi-resource-pulumi-RUNTIME process

IOBJ                              #NRPROPS
OOBJ                              #NRPROPS + OUTPUTs

NVPROV.check                      #FUNC(OLD_IOBJ, NEW_IOBJ)->>OBJ:
                                  #  - inputs NEW_IOBJ
                                  #  - failures NFAILURE_ARR
                                  #Validates|transforms IOBJ passed to diff|create|update
NFAILURE.property                 #'RPROP'
NFAILURE.reason                   #'MESSAGE'

NVPROV.diff                       #FUNC('REZ_ID', OLD_OOBJ, NEW_IOBJ)->>OBJ:
                                  #  - changes BOOL: false if nothing changed, i.e. no need for update|replace
                                  #  - replaces 'NRPROP'_ARR:
                                  #     - that changed and require a `replace`, i.e. cannot be updated in-place
                                  #     - if empty, an update is done instead
                                  #  - stables 'NRPROP'_ARR: that are "stable", i.e. always readonly after creation and cannot be updated
                                  #  - deleteBeforeReplace BOOL: override NCROPTS.deleteBeforeReplace
                                  #Computes diff on NRPROPS during update|replace

NVPROV.create                     #FUNC(IOBJ)->>OBJ:
                                  #  - id 'REZ_ID'
                                  #  - outs OOBJ
                                  #Called on REZ creation.
                                  #If fails, must not have been provisioned, i.e. must potentially rollback
NVPROV.read                       #FUNC('REZ_ID', [, OOBJ])->>OBJ:
                                  #  - id 'REZ_ID'
                                  #  - props OOBJ
                                  #Called on REZ read.
                                  #OOBJ in argument can be partial, but must be full in return value
NVPROV.update                     #FUNC('REZ_ID', OLD_OOBJ, NEW_IOBJ)->>OBJ:
                                  #  - outs OOBJ
                                  #Called on REZ update (not replace).
NVPROV.delete                     #FUNC('REZ_ID', OOBJ)->>
                                  #Called on REZ delete


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROVIDER PLUGIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NVDPROV                           #Implementation of a PROV, executed in a PLUGIN process.
                                  #Same methods as NVPROV except:
                                  #  - for multiple REZ_TYPEs, not just one
                                  #     - additional 'URN' argument after 'REZ_ID' (if none, at beginning)
                                  #  - has additional members

N.provider.main                   #To perform in main file.
 (NVDPROV, STR_ARR)->>            #STR_ARR are process.argv.slice(2), to forward
                                  #  - they only contain the gRPC address passed by the Deployment engine

NVDPROV.version                   #'X.Y.Z' version of PACKAGE
NVDPROV.schema                    #'JSON' to PSCHEMA contents

NVDPROV.construct                 #FUNC('REZ', 'RTYPE', {{IOBJ}}, NKROPTS)->>OBJ:
                                  #  - urn {'URN'}
                                  #  - state {{OOBJ}}
                                  #Called on new REZ(...)
NKREZ_ARGS[4]                     #BOOL (def: false). Set to true when REZ is built through NVPROV.construct()
NREZ_ARGS[5]                      #Mostly internal only

NVDPROV.invoke                    #FUNC('PFUNC', NPARGS)->>OBJ:
                                  #  - outputs VAL
                                  #  - failures NFAILURE_ARR
                                  #Called on MODULE.PFUNC(...)
NVDPROV.call                      #FUNC('PFUNC', {{NPARGS}})->>OBJ:
                                  #  - outputs }VAL{
                                  #  - failures NFAILURE_ARR
                                  #Called on MODULE.PFUNCOutput(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGIN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLUGIN                            #Binary for a PACKAGE or a RUNTIME
                                  #Installed in same directory as main binary

PHOME_DIR/plugins/                #Installation directory of PLUGINs

PTYPE                             #One of:
                                  #  - 'language':
                                  #     - language executor binary for a given RUNTIME
                                  #     - called pulumi-language-RUNTIME
                                  #     - in default install: nodejs|go|python|dotnet|java|yaml
                                  #  - 'resource':
                                  #     - PACKAGE for a given PROV
                                  #     - called pulumi-resource-PACKAGE
                                  #  - 'analyzer':
                                  #     - RUNTIME for PPROGRAMs
                                  #     - called pulumi-analyzer-policy[-RUNTIME]
PVERSION                          #Plugin version, as 'X.Y.Z'
PVERSIONR                         #Plugin version range

NWORKSPACE.installPlugin
 ('PLUGIN', 'PVERSION',
 'PTYPE')->>
pulumi plugin install             #Install a PLUGIN
 [PTYPE PLUGIN [PVERSION]]        #Def PTYPE|PLUGIN: guessed for current PROJECT
--exact                           #Pin PVERSION, instead of allowing any later one
--reinstall                       #Re-install existing PLUGIN

NWORKSPACE.listPlugins()
 ->NPLUGIN_INFO_ARR
pulumi plugin ls                  #List plugins
--project|-p                      #'PROJECT' (def: current one)

NWORKSPACE.removePlugin
 ('PLUGIN', 'PVERSIONR',
 'PTYPE')->>
pulumi plugin rm                  #Uninstall a PLUGIN
 [PTYPE PLUGIN [PVERSION[R]]]     #Def PTYPE|PLUGIN: cache only
                                  #Def PVERSION[R]: all
--all|-a                          #Remove all PLUGINs

PROJECT.plugins.PTYPE             #PLUGIN_INFO
PLUGIN_INFO.kind                  #'PTYPE'
[N]PLUGIN_INFO.name               #'PLUGIN'
[N]PLUGIN_INFO.version            #'PVERSION'
[N]PLUGIN_INFO.path               #'DIR'
NPLUGIN_INFO.size                 #NUM
NPLUGIN_INFO.installTime          #DATE
NPLUGIN_INFO.lastUsedTime         #DATE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PACKAGE MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                           #Resource PLUGIN + resource provider SDK + PSCHEMA
                                  #Also called "provider package" or "resource provider"
                                  #'pulumi' is the default one

RESOURCE PLUGIN ==>               #Implements the main logic for a PACKAGE (CRUD, PFUNC, etc.)
                                  #E.g. pulumi-resource-aws
                                  #The Deployment engine runs those commands
                                  #  - first, it executes the resource PLUGIN and passes its gRPC address as argument
                                  #  - the resource PLUGIN starts a gRPC server to listen to those
                                  #  - for Node.js, this is done by N.provider.main()
                                  #Written in a specific language, then compiled to an executable file so it:
                                  #  - becomes language-agnostic
                                  #  - bundles all dependencies

RESOURCE PROVIDER SDK ==>         #Library using the language RUNTIME, used by user to declare REZs for a given PACKAGE.
                                  #This only declares REZs to provision, does not implement it:
                                  #  - 'REZ', 'RTYPE', 'URN'
                                  #  - shape of RPROPs and OUTPUTs
                                  #  - other information from PSCHEMA
                                  #So it can be automatically generated from PSCHEMA
                                  #  - separately from resource PLUGIN
                                  #  - in many RUNTIMEs
                                  #The Deployment engine executes the language executor binary to run PROGRAM
                                  #  - REZs declaration are collection
                                  #  - then sent back to Deployment engine through gRPC
NR.*                              #Library used under the hood by resource provider SDK
                                  #Mostly internal

NATIVE PROVIDER PACKAGE ==>       #PACKAGE which PLUGIN is generated daily by calling an external API.
                                  #listing a platform's resources (e.g. an OpenAPI file, or AWS Cloud Control).
                                  #E.g. AWS, GCP, Azure, Kubernetes
BRIDGED PROVIDER PACKAGE ==>      #PACKAGE which PLUGIN was converted from another platform.
                                  #Most registry PAGKAGEs are currenly bridged from Terraform
COMPONENT PACKAGE ==>             #Normal PACKAGE, i.e. not native nor bridged

STANDARD RESOURCE PROVIDER ==>    #PROV maintained by Pulumi

XREZ.package                      #'PACKAGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PACKAGE MODULE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE                            #Namespace inside a PACKAGE
                                  #Usually corresponding to a specific sets of REZs
                                  #  - e.g. S3 inside AWS PACKAGE
                                  #Correlates to how REZs within that MODULE are imported within that PACKAGE
                                  #  - e.g. kubernetes:apps/v1:Deployment is import('@pulumi/kubernetes').apps.v1.Deployment
                                  #'pulumi' is default one
                                  #'index' means there is only a single top-level MODULE

XREZ.module                       #'MODULE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PACKAGE DEV          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                          #pulumi-PLATFORM-NAME
                                  #  - NAME is "native" if native provider PACKAGE
DESCRIPTION ==>                   #"Pulumi provider for PROVIDER-NAME"
HOW-TO-GUIDES ==>                 #Must be added to https://github.com/pulumi/examples

PULUMI REGISTRY ==>               #Web app listing PROV PACKAGEs
                                  #To publish, PR on https://github.com/pulumi/registry/blob/master/community-packages/package-list.json

BOILERPLATE ==>                   #Are available for native|bridged|component PACKAGE in TypeScript|Go|Python

pulumictl                         #Go binary used for PACKAGE development
                                  #Not fully documented yet
pulumi-go-provider                #Library to help writing PROVs in Go
                                  #Not fully documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PACKAGE PLUGIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE PLUGIN SOURCE ==>         #Source file, in a given language, declaring REZs managed by the PROV.
                                  #In Node.js, calls N.provider.main() and define NVDPROV.

PACKAGE PLUGIN BINARY ==>         #PACKAGE PLUGIN source built to a single executable file for a given OS and CPU architecture
                                  #  - archived as *.tar.gz
                                  #  - in Node.js, can use `pkg`

PACKAGE PLUGIN BINARY ARCHIVE     #PACKAGE PLUGIN binary archive must be available on a public URL,
 ==>                              #at 'PLUGIN_SERVER_URL/PACKAGE-vPVERSION-OS-ARCH.tar.gz'
                                  #PLUGIN_SERVER_URL can also be github://github.com/USER[/REPO] (def REPO: 'PACKAGE')
plugin install --server
NPLUGIN_INFO.serverURL
[N]ROPTS|[N]IOPTS                 #'PLUGIN_SERVER_URL'.
 .pluginDownloadURL               #Prefer specifying in PSCHEMA.pluginDownloadURL, so that CLI automatically installs it without `plugin install PLUGIN`
NWORKSPACE.installPluginFromServer
 ('PLUGIN', 'PVERSION',
 'PLUGIN_SERVER_URL')->>          #Like NWORKSPACE.installPlugin(...) but with a 'PLUGIN_SERVER_URL'

plugin install
--file|-f                         #'PATH' to PACKAGE PLUGIN binary archive, instead of downloading it
--checksum                        #'SHA2526' of PACKAGE PLUGIN binary archive


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PACKAGE SDK          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi package gen-sdk STR        #Generate a resource PROV SDK from its PSCHEMA
                                  #STR is usually PATH to PSCHEMA but can also be:
                                  #  - PATH to resource PLUGIN source
                                  #  - 'PACKAGE' (for already published one)
--out|-o                          #'DIR' (def: './sdk')
--language                        #'RUNTIME' or 'all' (def)

github.com/pulumi/pulumi/pkg      #Go library underlying `pulumi package gen-sdk`

PUBLISH ==>                       #Must publish generated SDKs for all RUNTIMEs, i.e.:
                                  #  - have them locally installed
                                  #  - build and|or install dependencies
                                  #  - publish to npm, PyPI, NuGet, Go
                                  #When publishing to npm, package.json should have `pulumi` OBJ:
                                  #  - resource BOOL
                                  #  - name 'PROV'
                                  #  - version 'PVERSION'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PACKAGE SCHEMA         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


schema.yml|json                   #PSCHEMA
                                  #Declaration file for a PACKAGE

pulumi schema check               #Validate a PSCHEMA

pulumi package get-schema PACKAGE #Print a PSCHEMA
                                  #PACKAGE can be 'PACKAGE' or PATH to PLUGIN binary

PSCHEMA.name                      #'PACKAGE'
PSCHEMA.displayName               #STR shown in UI
PSCHEMA.version                   #'PVERSION'

PSCHEMA.pluginDownloadURL         #'PLUGIN_SERVER_URL'
PSCHEMA.meta.moduleFormat         #Must be specified when MODULE is not /-delimited

PSCHEMA.description               #STR
PSCHEMA.logoURL                   #'URL' to a SVG image of logo
PSCHEMA.publisher                 #STR. Personal|company name of author
PSCHEMA.license                   #STR
PSCHEMA.attribution               #STR. License attribution of derived work
PSCHEMA.homepage                  #'URL'
PSCHEMA.repository                #'URL'
PSCHEMA.keywords                  #STR_ARR, to search in Pulumi Registry
                                  #Including:
                                  #  - 'kind/native|component'
                                  #  - 'category/cloud|database|infrastructure|monitoring|network|utility|versioncontrol'

PSCHEMA.types.NAME                #PSTYPE. Meant to be target of $ref JSON references
                                  #Can be '/PACKAGE/vPVERSION/schema.json#...' to reference another PACKAGE's schema.json
                                  #Either PSOBJ, or PSTYPE.enum defined

PSCHEMA.config                    #PSCONFIG. Declare PROV_RPROPS
PSCONFIG.variables.PROP_RPROP     #PSPROP
PSCONFIG.required                 #'PROV_RPROP'_ARR

PSCHEMA.provider                  #PSREZ of PROV itself
PSCHEMA.resources
 .PACKAGE:MODULE:TYPE             #PSREZ

PSREZ                             #Declare a REZ
PSREZ.*                           #Inherits from PSOBJ
PSREZ.deprecationMessage          #Like PSPROP.*
PSREZ.isComponent                 #BOOL (def: false). True if KREZ

PSREZ.inputProperties.RPROP       #PSPROP. REZ's RPROP
PSREZ.requiredInputs              #'PRPOP'_ARR (def: none)
PSREZ.properties.OUTPUT           #PSPROP. REZ's OUTPUT
PSREZ.required                    #'OUTPUT'_ARR (def: none)
PSREZ.stateInputs                 #PSPROP|OUTPUT can be used with NVDPROV.get() third argument. Def: none

PSPROP                            #Represents a RPROP|OUTPUT
PSPROP.*                          #Inherits from PSTYPE
PSPROP.description
PSPROP.default
PSPROP.const                      #Like JSON schema
PSPROP.deprecationMessage         #'MESSAGE' of deprecation
PSPROP.defaultInfo.environment    #'ENVVAR'_ARR. Only apply PSPROP.default if those are defined
PSPROP.secret                     #BOOL (def: false)
PSPROP.replaceOnChanges           #BOOL (def: false). Default value of ROPTS.replaceOnChanges, i.e. replace, never update.
PSPROP.willReplaceOnChanges       #BOOL (def: false). Same but only for documentation

PSREZ.aliases.ALIAS               #PSALIAS. REZ's ALIAS
PSALIAS.type                      #'RTYPE'
PSALIAS.project                   #'PROJECT'
PSALIAS.name                      #'REZ'

PSREZ.methods.NAME                #'PACKAGE:MODULE:TYPE/PFUNC'. Map variable FUNC name to PFUNC
PSCHEMA.functions
 .PACKAGE:MODULE:TYPE/PFUNC       #PSFUNC
PSFUNC.description
PSFUNC.deprecationMessage         #Like PSPROP.*
PSFUNC.inputs                     #PSOBJ. PFUNC's PARGS
PSFUNC.output                     #PSOBJ. PFUNC's return value

PSTYPE                            #JSON value
PSTYPE.type                       #STR. Like JSON schema, except no 'null'
PSTYPE.additionalProperties
PSTYPE.items
PSTYPE.oneOf
PSTYPE.$ref                       #Like JSON schema
PSTYPE.description
PSTYPE.properties                 #Like JSON schema
PSTYPE.required                   #Only with type 'object'
PSTYPE.discriminator              #Like OpenAPI 3
PSTYPE.plain                      #BOOL (def: false). If true, does not allow INPUTs

PSOBJ                             #PSTYPE of type 'object'

PSTYPE.enum                       #PSENUM_ARR
                                  #Only within PSCHEMA.types.*
PSENUM                            #Enum
PSENUM.value                      #VAL
PSENUM.name                       #STR, for documentation. Def: PSENUM.value
PSENUM.description
PSENUM.deprecationMessage         #Like PSPROP.*

PSCHEMA.language.RUNTIME          #[NODE|DOTNET|GO|PYTHON|JAVA_]PSRUNTIME

PSRUNTIME.respectSchemaVersion    #BOOL (def: false). Use package.json 'version' field
PSRUNTIME                         #BOOL (def: false). Turn PFUNC() return VAL into }VAL{ instead
 .liftSingleValueMethodReturns    #Recommended.

NODE_PSRUNTIME
 .[dev|peer]dependencies.PKG
NODE_PSRUNTIME.resolutions.PKG
PYTHON_PSRUNTIME.requires.PKG
DOTNET_PSRUNTIME                  #'VERSION'. Dependencies.
 .packageReferences.PKG           #Only needed for language RUNTIME and typing, since SDK is separate from the resource PLUGIN,
JAVA_PSRUNTIME.dependencies.PKG   #which contains all logic and bundles its dependencies.
NODE|GO_PSRUNTIME
 .moduleToPackage.MODULE
PYTHON_PSRUNTIME
 .moduleNameOverrides.MODULE
JAVA_RUNTIME.packages.MODULE      #'PKG'. Rename dependencies

NODE|PYTHON_PSRUNTIME.readme      #'CONTENTS'
NODE|PYTHON|DOTNET_PSRUNTIME
 .compatibility                   #STR. Meant for bridged PACKAGEs

NODE_PSRUNTIME.packageName
NODE_PSRUNTIME.packageDescription #package.json 'name|description'
NODE_PSRUNTIME.pluginName
NODE_PSRUNTIME.pluginVersion      #Like PSCHEMA.name|version, but only for Node.js

NODE_PSRUNTIME.typescriptVersion  #STR
NODE_PSRUNTIME
 .disableUnionOutputTypes         #BOOL (def: false). No UTYPEs for POUTPUT types
NODE_PSRUNTIME.containsEnums      #BOOL (def: false). Should be true if there are TypeScript enums

GO_PSRUNTIME.importBasePath       #'PATH'
GO_PSRUNTIME.rootPackageName      #STR. Def: importBasePath
GO_PSRUNTIME
 .packageImportAliases.NAME       #STR. Maps package name to package alias
GO_PSRUNTIME
 .generateResourceContainerTypes  #BOOL (def: false). Generate ARR|MAP|... types.
GO_PSRUNTIME
 .generateExtraInputTypes         #BOOL

PYTHON_PSRUNTIME.packageName      #STR. Python package name
PYTHON_PSRUNTIME.usesIOClasses    #BOOL

DOTNET_PSRUNTIME.rootNamespace    #STR (def: 'Pulumi')
DOTNET_PSRUNTIME.namespaces.KEY   #STR
DOTNET_PSRUNTIME
 .dictionaryConstructors          #BOOL

JAVA_PSRUNTIME.basePackage        #STR (def: 'com.pulumi')
JAVA_PSRUNTIME.buildFiles         #Always 'gradle'
JAVA_PSRUNTIME
 .gradleNexusPublishPluginVersion #'X.Y.Z'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORG                               #Set of TEAMs and PROJECTs
                                  #For self-managed BACKEND, always 'organization'
                                  #Not with free plan
                                  #Only 1 unless enterprise plan
gitHub:owner                      #'ORG' TAG

ORG_URL                           #API_URL/orgs/ORG

pulumi org set-default ORG        #Set current ORG
pulumi login --default-org        #'ORG'

pulumi org get-default
getOrganization()->'ORG'          #

pulumi org                        #Print current ORG and BACKEND

POST STACK_URL/transfer           #Req: 'ORG'
                                  #Res: empty
                                  #Change a STACK's ORG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEAM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEAM                              #Sets of MEMBERs
                                  #Not for free plan
                                  #Max 10 MEMBERs and 1 TEAM unless enterprise plan

TEAMS_URL                         #ORG_URL/teams

GET TEAMS_URL                     #Req: empty
                                  #Res: teams XTEAM_ARR
POST TEAMS_URL/TEAM_KIND          #Req: XTEAM
                                  #  - not kind|userRole
                                  #Res: XTEAM
PATCH TEAMS_URL/TEAM              #Req: OBJ
                                  #  - memberAction 'add|remove'
                                  #  - member 'MEMBER'
                                  #Res: empty
PATCH TEAMS_URL/TEAM              #Req: OBJ:
                                  #  - addStackPermission OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #     - permission 101 (read), 102 (edit) or 103 (admin) ("RBAC")
                                  #  - removeStack OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #Res: empty
DELETE TEAMS_URL/TEAM             #Req: empty
                                  #Res: empty

XTEAM.kind                        #TEAM_KIND. Either 'pulumi' or 'github'
XTEAM.name                        #'TEAM'
XTEAM.displayName                 #STR
XTEAM.description                 #STR
XTEAM.userRole                    #STR
XTEAM.members                     #XUSER_ARR

pulumi stack init --teams         #'TEAM'_ARR with read|write permissions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MEMBER                            #End user

MEMBERS_URL                       #ORG_URL/members

GET MEMBERS_URL                   #Req: OBJ
                                  #  - type 'backend'
                                  #Res: members XMEMBER_ARR
POST MEMBERS_URL/MEMBER           #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
PATCH MEMBERS_URL/MEMBER          #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
DELETE MEMBERS_URL/MEMBER         #Req: empty
                                  #Res: empty

XMEMBER.role                      #Either:
                                  #  - 'member': read|write STACKs they have permissions on
                                  #  - 'admin': also read|write ORG|TEAM|MEMBER|POLICY_PACK
                                  #  - 'billingManager'
                                  #Only if team plan
                                  #Only 1 admin|billingManager unless enterprise plan
XMEMBER.virtualAdmin              #BOOL
XMEMBER.knownToPulumi             #BOOL

XMEMBER.user                      #XUSER
XUSER.name                        #'USER'
vcs:owner                         #'GITHUB_USER'
XUSER.githubLogin                 #'GITHUB_USER'
XUSER.avatarUrl                   #'URL'
XUSER.email                       #'EMAIL'
vcs|gitHub:repo                   #'REPO'
vcs:kind                          #STR

pulumi whoami                     #Prints current 'USER'
--verbose|-v                      #Also prints BACKEND
NWORKSPACE.whoAmI()->>NWHO        #
NWHO.organizations                #'ORG'_ARR
NWHO.url                          #'URL'
NWHO.user                         #'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCESS TOKEN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCESS_TOKEN                      #Token used for authorization

TEAM|ORGANIZATION ACCESS TOKEN ==>#ACCESS_TOKEN shared between all MEMBERs of a TEAM|ORG
                                  #Only with enterprise plan

TOKENS_URL                        #API_URL/user/tokens

GET TOKENS_URL                    #Req: empty
                                  #Res: tokens XTOKEN_ARR
POST TOKENS_URL                   #Req: XTOKEN
                                  #  - only description
                                  #Res: XTOKEN
DELETE TOKENS_URL/TOKEN_ID        #Req: empty
                                  #Res: empty

XTOKEN.id                         #'TOKEN_ID'
XTOKEN.tokenValue                 #'ACCESS_TOKEN'
XTOKEN.description                #STR
XTOKEN.lastUsed                   #DATE_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization:
 token ACCESS_TOKEN [C]           #
ENVVAR PULUMI_ACCESS_TOKEN        #'ACCESS_TOKEN'

pulumi login [BACKEND]            #Login
                                  #Prompt for ACCESS_TOKEN if no ENVVAR PULUMI_ACCESS_TOKEN
--insecure                        #No SSL

PHOME_DIR/credentials.json        #Local cache for ACCESS_TOKENs
PHOME_DIR/config.json             #Local cache for BACKEND settings

pulumi login|logout
--cloud-url                       #'BACKEND'
--local                           #Same as using BACKEND file://~

pulumi logout [BACKEND]           #Logout
                                  #Def BACKEND: current one
--all                             #Logout of all backends


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BACKEND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BACKEND                           #API persisting STATE, UPDATEs and POLICY_PACKs
                                  #Also include ORG|TEAM|MEMBER and login|auth
                                  #Unlike PROVs, does not iteractive with cloud platform|libraries

DEPLOYMENT ENGINE ==>             #Computes the provisioning based on the STATE and PROVs
                                  #Is a gRPC server started by each CLI command.
                                  #I.e. separate process from: BACKEND, resource PLUGINs, PROGRAMs

[N]PROJECT.backend.url            #'BACKEND' among:
ENVVAR PULUMI_BACKEND_URL         #  - default: Pulumi Cloud
GH_ACTIONS.cloud-url              #  - 'file://PATH' (local)
                                  #  - 's3://BUCKET' (AWS S3)
                                  #  - 'gs://BUCKET' (GCP GCS)
                                  #  - 'azblob://BUCKET' (Azure Blob)
                                  #  - URL (self-hosted)
                                  #Not fully documented here yet

pulumi preview|up|refresh|destroy
 |import
--suppress-permalink              #BOOL (def: false). Do no show link to STACK_STATE.
                                  #Mostly useful when using S3 BACKEND with pre-signed URL, since it contains secret.

SELF-MANAGED BACKEND ==>          #When not using Pulumi Cloud. Does not have:
                                  #  - auth
                                  #  - encryption in transit and at rest
                                  #  - UPDATE history
                                  #  - STACK TAGs
                                  #  - POLICY_PACKs
                                  #  - lock so any given STACK is not updated twice at same time
                                  #  - rollback|recovery in case of crash

SELF-HOSTED BACKEND ==>           #When hosting Pulumi Cloud ourselves
                                  #Only with business critical plan
                                  #Not fully documented yet
pulumi state upgrade              #Migrate to latest version of current self-hosted BACKEND

pulumi console                    #Open web page to Pulumi Console


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          POLICY PACK          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY                            #"Policy-as-Code"
                                  #Validates REZs during preview|up
POLICY_PACK                       #Set of POLICYs

POLICY_PACK_DIR                   #'DIR' of PulumiPolicy.yaml|json.
                                  #Usually also 'DIR' of PPROGRAM

PulumiPolicy.yaml|json            #PMETA. Metadata about the POLICY_PACK
PMETA.runtime
PMETA.description
PMETA.author
PMETA.license
PMETA.website                     #Like PROJECT.* but for POLICY_PACK

pulumi policy new                 #Scaffold new POLICY_PACK
--dir
--force|-f
--generate-only|-g                #Like pulumi new ...

SOPTS.policyPacks
GH_INPUTS.policy-pack
pulumi preview|up|watch ...
--policy-pack                     #'POLICY_PACK_DIR'_ARR to enforce

XUPDATE.policyPacks               #XPOLICY_PACK_ARR
XPOLICY_PACK.name                 #'POLICY_PACK'
XPOLICY_PACK.displayName          #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY PROGRAM         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PPROGRAM                          #Like a PROGRAM, but declarating POLICY_PACKs instead
PMETA.main                        #Like PROJECT.main, but for PPROGRAM

RUNTIME ==>                       #Only with node|python
                                  #Also supports opa ("Open Policy Agent"):
                                  #  - declarative format unrelated to Pulumi
                                  #  - requires plugin pulumi-analyzer-policy-opa
                                  #  - not fully documented yet

@pulumi/policy                    #NPP

new NPP.PolicyPack
 ('POLICY_PACK', NPOPTS)          #NPOLICY_PACK. Declares it.

NPOPTS|NPOLICY|PPCONF             #What to do on validation error ("violation"). One of:
 .enforcementLevel                #  - 'mandatory': error
                                  #  - 'advisory' (def): warn
                                  #  - 'disabled'

NPOPTS.policies                   #NPOLICY_ARR
NPOLICY.name                      #'POLICY'
NPOLICY.description               #STR

NRPOLICY                          #Inherits from NPOLICY
                                  #Validates REZs before being created
NRPOLICY.validateResource         #[ARR of] FUNC(NPREZ, FUNC2('MESSAGE'))[->>]
                                  #Called on each REZ
                                  #Must report validation errors by calling FUNC2
                                  #  - can be called multiple times
NPP.validateResourceOfType
 (REZ_CLASS, FUNC(NPREZ,...)[->>])#Returns a FUNC2(...) which can be used as NRPOLICY.validateResource(...)
 ->FUNC2                          #but is a noop unless NPREZ.isType(REZ_CLASS)

NPREZ.props                       #RPROPS
NPREZ.isType(REZ_CLASS)->BOOL     #Whether REZ not instanceof REZ_CLASS
NPREZ.asType(REZ_CLASS)[->REZ]    #Return undefined unless isType()

NZPOLICY                          #Inherits from NPOLICY
                                  #Validates REZs after being created
                                  #  - pro: access to OUTPUTs
                                  #  - con: does not prevent `up` provisioning
NZPOLICY.validateStack            #[ARR of] FUNC(NZSTACK, FUNC2('MESSAGE'[, 'URN']))[->>]
                                  #Like validateResource() but called on new STACK instantiation
NPP.validateStackResourcesOfType
 (REZ_CLASS, FUNC(NZREZ,...)[->>])
 ->FUNC2                          #Same as NPP.validateResourceOfType() but for NZPOLICY.validateStack()

NZSTACK.resources                 #NZREZ_ARR
NZREZ                             #Inherits from NPREZ
NZREZ.props                       #RPROPS + OUTPUTS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POLICY CONFIG SET       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PPCONFS                           #JSON file. Configuration of POLICYs

pulumi policy enable --config     #'PPCONFS_PATH' of a POLICY_PACK
XPOLICY_PACK.config               #PPCONFS

pulumi preview|up|watch ...
--policy-pack-config              #'PPCONFS_PATH'. Same but only during the duration of an UPDATE
SOPTS.policyPackConfigs
GH_INPUTS.policy-pack-config      #Same as 'PPCONFS_PATH'_ARR

PPCONFS.all|POLICY                #PPCONF. Configuration of a POLICY
                                  #Can also be STR: same as { enforcementLevel: STR }

PPCONF.*                          #Custom configuration passed to a POLICY
NPREZ|NZSTACK.getConfig()->PPCONF #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     POLICY CONFIG SCHEMA      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new NPP.PolicyPack
 (..., NJSON_SCHEMA)
NPOLICY.configSchema              #NJSON_SCHEMA
                                  #Define PPCONF shape, i.e. validate its values
NJSON_SCHEMA                      #JSON schema v6, but no:
                                  #  - $schema|$id|$ref|$defs
                                  #  - not|allOf|anyOf|oneOf
                                  #  - title|examples

pulumi policy validate-config
 OPOLICY_PACK POLICY_PACKV        #Validate a POLICY_PACK's PPCONFS
--config                          #'PPCONFS_PATH'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         POLICY CLOUD          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVER-SIDE ENFORCEMENT ==>       #Pulumi Cloud enforces published POLICY_PACKs on UPDATEs
                                  #Only with business critical plan
                                  #Not with self-managed BACKEND
                                  #Also called "CrossGuard"
pulumi policy ...                 #All need CrossGuard
                                  #  - except pulumi policy new

'OPOLICY_PACK'                    #'ORG/POLICY_PACK'
'POLICY_PACKV'                    #POLICY_PACK version NUM, 'all' or 'latest'

pulumi policy publish [ORG]       #Publish new version of POLICY_PACK
                                  #Current directory must be POLICY_PACK_DIR
                                  #Def ORG: current one
PMETA|XPOLICY_PACK.version        #NUM (def: package.json 'version')
XPOLICY_PACK.versionTag           #'X.Y.YYYYMMDD-NUM'

pulumi policy ls                  #List all POLICY_PACKs

pulumi policy rm OPOLICY_PACK
 POLICY_PACKV                     #Remove a POLICY_PACK

pulumi policy enable OPOLICY_PACK #Enable a POLICY_PACK. By default, it is disabled.
 POLICY_PACKV                     #Also sets the POLICY_GROUP and PPCONFS
                                  #Only for current STACK

pulumi policy disable OPOLICY_PACK#Disable a POLICY_PACK
--version                         #'POLICY_PACKV'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         POLICY GROUP          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY_GROUP                      #Set of POLICY_PACKs applied to a given sets of STACKs
default-policy-group              #Default POLICY_GROUP

pulumi policy enable|disable
--policy-group                    #POLICY_GROUP

pulumi policy group ls            #List all POLICY_GROUPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOGS ACTIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS.logToStdErr
pulumi ... --logtostderr          #BOOL (def: false). Log to stderr instead of to /tmp

SOPTS.logVerbosity
pulumi ... --verbose|-v           #NUM. Verbose logging

SOPTS.logFlow
pulumi ... --logflow              #BOOL (def: false). Make --verbose|logtostderr apply to PROV logs too

SOPTS.debug
pulumi preview|up|refresh|destroy
 |import|watch
--debug|-d                        #Debug logging

SOPTS.tracing
pulumi ... --tracing              #'URI' (including file: URI) where to send traces
pulumi view-trace PATH            #View trace files

pulumi ... --profiling            #STR. Write profiling files to FILENAME.PID.cpu|mem|trace

SOPTS.onOutput                    #FUNC('STR') with any stdout


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LOGS RESOURCES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi logs                       #Show RTYPE-specific logs for a REZ
--resource|-r                     #'[RTYPE::]REZ'|'URN' (def: all)
--follow|-f                       #Print in realtime
--since                           #'NUMs|m|h' (def: '1h')

N.log.LEVEL('MESSAGE'             #Like console.LEVEL(...) but shown with pulumi ..., pulumi logs and Pulumi Cloud
 [, NREZ][, NUM][, BOOL])->>      #LEVEL can be debug|info|warn|error
                                  #NUM is stream ID, to group logs
                                  #If BOOL true, ephemeral logs, i.e. not persisted
N.log.hasErrors()->BOOL           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          LOGS AUDIT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUDIT_LOGS_URL                    #ORG_URL/auditlogs

GET AUDIT_LOGS_URL                #Req: OBJ
                                  #  - startTime DATE_NUM
                                  #  - userFilter 'USER'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR
                                  #Only with enterprise plan
GET AUDIT_LOGS_URL/export         #Req: OBJ:
                                  #  - startTime|userFilter: like above
                                  #  - format 'csv' (def) or 'cef' ("common event format")
                                  #Res: auditLogEvents XAUDIT_LOG_ARR, but as CSV|CEF
                                  #Can automate sending it to S3
                                  #Only with business critical plan

XAUDIT_LOG.timestamp              #DATE_TIME
XAUDIT_LOG.sourceIP               #'IP'
XAUDIT_LOG.event                  #'MESSAGE'
XAUDIT_LOG.description            #STR
XAUDIT_LOG.user                   #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSIGHTS SEARCH        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH_REZ_URL                    #ORG_URL/search/resources


GET SEARCH_REZ_URL                #Req: XSEARCH_REZ_REQ
                                  #Res: XREZ_INFO
GET SEARCH_REZ_URL/export         #Req: XSEARCH_REZ_REQ
                                  #  - no facet
                                  #Res: XREZ_ARR, as CSV
                                  #Only with enterprise plan

XSEARCH_REZ_REQ.query             #'TERM ...'
                                  #TERM is [TYPE:][OP][-]["]STR["]
                                  #  - partial match unless "
                                  #  - TYPE: any XREZ.TYPE
                                  #  - OP: >=|>|<|<=
                                  #     - or [START TO END] as STR
                                  #  - - is not
                                  #Can use OR AND ( )
AI ASSIST ==>                     #Use natural language query to return the right XSEARCH_REQ_REQ.query
                                  #Only in UI
XSEARCH_REZ_REQ.sort              #'VARR'_ARR
XSEARCH_REZ_REQ.asc               #BOOL

XREZ_INFO.resources               #XREZ_ARR
                                  #Max 2e3 length unless enterprise plan

XSEARCH_REZ_REQ.facet             #'VARR'_ARR
                                  #Group by 'VARR'
XREZ_INFO.aggregations            #XAGGR
XAGGR.results                     #XAGGR_RESULT_ARR. Only top 5 with highest count
XAGGR_RESULT.name                 #STR. Value of VARR
XAGGR_RESULT.count                #NUM of REZs
XAGGR.others                      #NUM of REZs not in top 5

XREZ.created                      #'DATE'
XREZ.modified                     #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSIGHTS COUNT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ_URL                           #ORG_URL/resources

GET REZ_URL/summary               #Req: OBJ
                                  #  - granularity 'hourly|daily|weekly|monthly|yearly'
                                  #  - lookbackDays NUM
                                  #Res: summary REZ_COUNT_ARR

REZ_COUNT                         #Count NUM of REZs, e.g. for billing purpose
REZ_COUNT.resources               #NUM
REZ_COUNT.year|month|weekNumber
 |day|hour                        #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NR.setMocks(NMOCKS[, 'PROJECT']   #Mock REZ instantiation and|or PFUNCs
 [, 'STACK'][, BOOL][, 'ORG'])    #BOOL (def: false): whether to fake being in a `preview`

NMOCKS.newResource                #FUNC(NM_RARGS)->OBJ
                                  #OBJ: id 'REZ_ID', state OOBJ
                                  #Mocks new REZ(...)
NM_RARGS.inputs                   #IOBJ
NM_RARGS.type                     #'RTYPE'
NM_RARGS.provider                 #'PROV'
NM_RARGS.id                       #'REZ_ID'
NM_RARGS.name                     #'REZ'
NM_RARGS.custom                   #BOOL

NMOCKS.call                       #FUNC(NM_ARGS)->OBJ
                                  #Mocks a PFUNC
NM_ARGS.inputs                    #NPARGS
NM_ARGS.token                     #'PACKAGE:MODULE:PFUNC'
NM_ARGS.provider                  #'PROV'

ENVVAR PULUMI_CONFIG              #'JSON_OBJ' of SCONFIG, to mock it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/str                       #PROV with PFUNCs doing STR manipulation
                                  #Version 1.0.0

str:replace                       #PFUNC like STR.replaceAll(old, new)
RPROPS.string                     #STR
RPROPS.old                        #STR
RPROPS.new                        #STR
OUTPUTS.result                    #STR

str:regexp:replace                #Same but using REGEXP (Go syntax)
RPROPS.string                     #STR
RPROPS.old                        #'REGEXP'
RPROPS.new                        #STR. Can use $1, etc.
OUTPUTS.result                    #STR

str:regexp:match                  #PFUNC like STR.match(REGEXP)
RPROPS.string                     #STR
RPROPS.pattern                    #'REGEXP'
OUTPUTS.result                    #BOOL

str:regexp:split                  #PFUNC like STR.split(REGEXP)
RPROPS.string                     #STR
RPROPS.on                         #'REGEXP'
RPROPS.count                      #NUM of items to return (def: all)
OUTPUTS.result                    #STR_ARR

str:trimPrefix                    #PFUNC removing start of STR, if it starts with a given prefix
RPROPS.string                     #STR
RPROPS.prefix                     #STR to trim
OUTPUTS.result                    #STR

str:trimSuffix
RPROPS.string
RPROPS.suffix
OUTPUTS.result                    #Same for suffix


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RANDOM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/random                    #PROV with REZs representing random values
                                  #Version 4.13.0

random:index/randomInteger
 :RandomInteger                   #
RPROPS.keepers.KEY                #TRIGGER_STR
RPROPS.min|max                    #NUM
RPROPS.seed                       #STR (def: auto)
OUTPUTS.result                    #NUM

random:index/randomId:RandomId    #
RPROPS.keepers.KEY                #TRIGGER_STR
RPROPS.byteLength                 #NUM
RPROPS.prefix                     #STR prefixed to result
OUTPUTS.hex                       #STR. Random ID as hex base
OUTPUTS.dec                       #STR. Random ID as decimal base
OUTPUTS.b64Std                    #STR. Random ID as base64
OUTPUTS.b64Url                    #STR. Random ID as base64Url

random:index/randomUuid:RandomUuid#
RPROPS.keepers.KEY                #TRIGGER_STR
OUTPUTS.result                    #'UUIDv4'

random:index/randomPassword
 :RandomPassword                  #
RPROPS.keepers.KEY                #TRIGGER_STR
RPROPS.length                     #NUM of characters
RPROPS.minLower|Upper|Numeric
 |Special                         #NUM of lowercase|uppercase|digit|punctuation characters
RPROPS.lower|upper|numeric|special#BOOL (def: true).
                                  #If false, exclude lowercase|uppercase|digit|punctuation characters from output
RPROPS.overrideSpecial            #STR (def: '!@#$%&*()-_=+[]{}<>:?'). Punctuation characters
OUTPUTS.result                    #'PASSWORD' in clear
OUTPUTS.bcryptHash                #'PASSWORD' hashed with bcrypt

random:index/randomPet:RandomPet  #
RPROPS.keepers.KEY
RPROPS.prefix                     #Like RandomId
RPROPS.length                     #NUM (def: 2) of words
RPROPS.separator                  #STR (def: '-')
OUTPUTS.id                        #STR

random:index/randomShuffle
 :RandomShuffle                   #
RPROPS.keepers.KEY
RPROPS.seed                       #Like RandomInteger
RPROPS.inputs                     #STR_ARR, to shuffle
RPROPS.resultCount                #NUM (def: inputs.length) of result.
                                  #If shorter, truncates. If longer, repeats.
OUTPUTS.results                   #STR_ARR, shuffled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TIME              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumiverse/time                 #PROV with REZs representing DATEs
                                  #Version 0.0.13

time:index/static:Static          #Generate a 'DATE'
RPROPS.rfc3339                   !#'YYYY-MM-DDTHH:MM:SSZ' (def: now)
RPROPS.triggers                  !#TRIGGER_OBJ
OUTPUTS.year|month|day|hour
 |minute|second                   #NUM
OUTPUTS.unix                      #DATE_NUM, in secs

time:index/offset:Offset          #Generate a 'DATE' based on a duration
RPROPS.triggers                  !#TRIGGER_OBJ
RPROPS.baseRfc3339               !#'YYYY-MM-DDTHH:MM:SSZ' (def: now)
RPROPS.offsetYears|Months|Days
 |Hours|Minutes|Seconds           #NUM
OUTPUTS.year|month|day|hour
 |minute|second
OUTPUTS.unix                      #Like Static

time:index/offset:Rotating        #Generate a 'DATE' incremented periodically
RPROPS.triggers
RPROPS.baseRfc3339               !#Like Offset
RPROPS.rotationYears|Months|Days
 |Hours|Minutes|Seconds           #NUM
OUTPUTS.year|month|day|hour
 |minute|second
OUTPUTS.unix                      #Like Static


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTTP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumiverse/purrl                #PROV with REZs representing HTTP requests
                                  #Version 0.3.1

purrl:index:Purrl                 #HTTP request
RPROPS.name                       #STR, prefixing 'REZ_ID'
RPROPS.method                     #'METHOD'
RPROPS.url                        #'URL'
RPROPS.headers                    #OBJ
RPROPS.body                       #STR
RPROPS.insecureSkipTLSVerify      #BOOL (def: false). No TLS
RPROPS.key                        #STR. TLS key
RPROPS.caCert                     #STR. Server certificate
RPROPS.cert                       #STR. Client certificate
RPROPS.responseCodes              #NUM_ARR. Expected status codes
RPROPS.delete*                    #Like RPROPS.*, but on REZ delete
OUTPUTS.response                  #STR
OUTPUTS.deleteResponse            #Like response, but on REZ delete


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SHELL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/command                   #PROV with REZs representing a shell command execution
                                  #Version 0.7.2

command:local:Command             #Command run locally
                                  #Fails if non-0 exit code
RPROPS.interpreter                #STR_ARR. Def on Windows: ['cmd', '/C'], otherwise: ['/bin/sh', '-c']
RPROPS.create|update|delete       #'SHELL_COMMAND' to run on create|update|delete
RPROPS.environment                #Additional ENVVARS OBJ
RPROPS.stdin                      #STR passed to stdin
RPROPS.dir                        #'DIR' (def: '.'). Current directory
RPROPS.triggers                  !#TRIGGER_ARR
OUTPUTS.stdout|stderr             #STR

RPROPS.assetPaths                 #'GLOB'_ARR of files to read
                                  #Can use ! **
OUTPUTS.assets.PATH               #ASSET|ARCHIVE
RPROPS.archivePaths               #Same but returned as an ARCHIVE
OUTPUTS.archive                   #ARCHIVE

command:local:run                 #Like Command, but as PFUNC
RPROPS.command                    #'SHELL_COMMAND'
RPROPS|OUTPUTS.*                  #Same as Command, except no RPROPS.triggers

command:remote:Command            #Like Command, but using SSH
RPROPS|OUTPUTS.*                  #Same as Command, except no RPROPS.interpreter|dir|assetPaths|archivePaths
RPROPS.connection                 #CONN. SSH parameters
CONN.host                         #'HOST'
CONN.port                         #NUM
CONN.user                         #'USER'
CONN.password                     #'PASSWORD'
CONN.privateKey                   #STR
CONN.privateKeyPassword           #STR, if private key encrypted
CONN.agentSocketPath              #'PATH' to agent socket. Def: ENVVAR SSH_AUTH_SOCK
CONN.dialErrorLimit               #NUM (def: 10) (-1 for unlim). Max NUM of dial attempts

command:remote:CopyFile           #Like remote:Command, but command is copying files
RPROPS.connection|triggers        #Like remote:Command
RPROPS.localPath                  #'PATH' of source
RPROPS.remotePath                 #'PATH' of destination
