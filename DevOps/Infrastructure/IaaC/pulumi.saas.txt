
          
   PULUMI  
          



TODO:
  - https://www.pulumi.com/docs/intro/deployments/
  - go back through reference again
  - https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/runtime
  - https://www.pulumi.com/registry/packages/aws/api-docs/
  - https://www.pulumi.com/registry/
  - POLICY_PACKs
     - https://www.pulumi.com/docs/guides/crossguard/
     - including pricing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.64.0

INSTALL|UPGRADE ==>               #Download archive from website
                                  #  - they are at https://get.pulumi.com/releases/sdk/pulumi-vVERSION-OS-ARCH.tar.gz
                                  #Extract to a directory that's in the PATH
                                  #  - prefered: ~/.pulumi/bin/
                                  #https://get.pulumi.com is a Bash script automating the above
                                  #  - it adds `export PATH=$PATH:$HOME/.pulumi/bin` to .bashrc|.bash_profile

N.version
N|XMANIFEST.version
NWORKSPACE.pulumiVersion          #'vX.Y.Z'

pulumi version                    #Print Pulumi version

ENVVAR PULUMI_SKIP_UPDATE_CHECK   #If 'true', do not abort when version of Pulumi is not latest

pulumi about                      #Print:
                                  #  - current OS
                                  #  - pulumi version
                                  #  - current 'PROJECT|STACK|BACKEND'
--transitive|-t                   #Include transitive dependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRICING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING OF PULUMI CLOUD ==>       #Plans:
                                  #  - free
                                  #  - team:
                                  #     - 1$ for 3 REZs
                                  #     - first 200 REZs free
                                  #  - enterprise: custom price
                                  #  - business critical: custom price
                                  #Billed REZ
                                  #  - when REZ is in current STATE, even if no update happening
                                  #  - REZ includes rootStackResource and KREZs

SUPPORT ==>                       #12h*5d with enterprise plan
                                  #24h*7d with business critical


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


X*                                #REST API request|response

API_URL                           #https://api.pulumi.com/api

Accept: application/vnd.pulumi+8
 [C]                              #
Content-Type: application/json [C]#

REQUEST ==>                       #With POST|PUT|PATCH, JSON request body
                                  #With GET|DELETE, query variables

PAGINATION ==>                    #Some endpoints are always paginated:
                                  #  - Request OBJ: continuationToken=STR
                                  #  - Response OBJ: continuationToken STR
                                  #Others too but with a different way:
                                  #  - Request OBJ: continue STR, size NUM, page NUM
                                  #  - Response OBJ: total NUM, pagination.previous|next|continue STR
                                  #Others are only paginated on-demand:
                                  #  - Request OBJ: pageSize NUM, page NUM
                                  #  - Response OBJ: itemsPerPage NUM, total NUM

@pulumi/pulumiservice             #PROV for the Pulumi REST API itself
                                  #REZs: PROV, TAGS, ACCESS_TOKEN, TEAM, WEBHOOK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI ==>                           #Uses the REST API under the hood

pulumi --BOOL_VAR                 #If type not documented, means BOOL with default false

pulumi ...  --non-interactive     #
pulumi cancel|destroy|import|new
 |plugin rm|policy rm|refresh
 |stack rm|state|up
--yes|-y
ENVVAR PULUMI_SKIP_CONFIRMATIONS  #If 'true', no confirmations

pulumi ... --color
SOPTS.color                       #'auto' (def), 'always', 'never' or 'raw'
ENVVAR NO_COLOR                   #

pulumi about|config|destroy|logs
 |plugin ls|policy [group] ls
 |preview|refresh|stack ls
 |stack output|stack tag ls|up
 |whoami
--json|-j                         #JSON output

pulumi ... --emoji|-e             #Allow emojis in the CLI output

pulumi gen-completion             #Print CLI completion script

pulumi ...
--disable-integrity-checking      #

pulumi ... --profiling            #STR. Write profiling files to FILENAME.PID.cpu|mem|trace


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UI               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PULUMI CLOUD UI ==>               #Similar features as CLI

LOGIN ==>                         #Can use GitHub|GitLab|BitBucket
SAML/SSO ==>                      #Only with enterprise plan
SCIM ==>                          #Only with business critical plan

readme                            #OUTPUT with value 'MARKDOWN'
                                  #Shown in UI for a given STACK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CI/CD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CI ==>                            #With GitHub|GitLab|BitBucket
                                  #Call Pulumi CLI on git push, e.g.
                                  #  - `preview` on PR
                                  #  - `up` on main branch
                                  #Only with team plan

GITHUB APP ==>                    #Add comments to issues|PRs changing Pulumi files

CONTINUOUS DELIVERY ==>           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LANGUAGE EXECUTOR ==>             #Programming language used to execute the [N]PROGRAM
                                  #PLUGIN binary pulumi-language-RUNTIME
LANGUAGE RUNTIME ==>              #Programmatic library to use inside [N]PROGRAM to declare REZs
                                  #E.g. @pulumi/pulumi for Node.js
LANGUAGE HOST ==>                 #Language executor + runtime

[N]PROJECT.runtime                #Either [N]RUNTIME or [N]RUNTIME.name
[N]RUNTIME                        #Language executor and runtime
pulumi:runtime
[N]RUNTIME.name                   #'RUNTIME', i.e. 'nodejs|go|python|dotnet|java|yaml'
[N]RUNTIME.options                #[N]RUNTIME_OPTS

[N]RUNTIME_OPTS.buildTarget       #'DIR' where to run 'go build'
                                  #Def: temp DIR
                                  #Only with 'go'
[N]RUNTIME_OPTS.binary            #'PATH' to binary
                                  #Only with 'go|dotnet|java'

[N]RUNTIME_OPTS.virtualenv        #'DIR' where python binary is
ENVVAR PULUMI_PYTHON_CMD          #Only with 'python'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             YAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]RUNTIME_OPTS.compiler          #'PROGRAM' to preprocess YAML (e.g. cue)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/pulumi                    #Node.js client

N*                                #Node.js types
N.VAR                             #Named export VAR
N.automation                      #NA
N.runtime                         #NR

>VAL                              #Means PROMISE_VAL
[>]VAL                            #Means [PROMISE_]VAL
->>[VAL]                          #Means ->PROMISE[_VAL]

CLASS.isInstance(VAL)->BOOL       #Like VAL instanceof CLASS, but cross-realm
                                  #Available with most CLASSes

[N]RUNTIME_OPTS.typescript        #BOOL (def: true). Whether to use TypeScript, through ts-node
[N]RUNTIME_OPTS.nodeargs          #'--FLAG ...' passed to node


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPUTS ==>                       #Async|dynamic value, similar to a PROMISE, as a return value
                                  #Resolved when provisioning a STACK
                                  #Related to specific REZs
STABLE OUTPUTS ==>                #OUTPUTs are not resolved during a preview.
                                  #Unless they are marked as "stable", i.e. their value is both:
                                  #  - already available, e.g. RPROPs of an already existing REZ
                                  #  - readonly after creation
INPUTS ==>                        #Async|dynamic value, similar to a PROMISE, as a function argument
                                  #Resolved when provisioning a STACK

}TYPE{                            #Notation for a [N]OUTPUT of TYPE
{TYPE}                            #Notation for a [N]INPUT of TYPE
}{TYPE}{                          #Notation for {TYPE} + }TYPE{

}}TYPE{{
{{TYPE}}                          #Like above, but top-level OBJ|ARR is normal (not dynamic)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS YAML      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INPUT                             #Can use:
                                  #  - VAL as is
                                  #  - ${VARR}
                                  #  - { fn::FUNC }
                                  #Also called "expression"

${VARR}                           #Insert a value in a {VAL} in YAML
                                  #Can be:
                                  #  - 'REZ[.OUTPUT_VARR]'
                                  #  - 'SCONFIG_VARR'
                                  #  - 'VARR' from:
                                  #     - PROGRAM.variables.*
                                  #     - GLOBALS.*
                                  #VARR:
                                  #  - VAR.VAR2
                                  #  - VAR["VAR2"]
                                  #     - same as VAR.VAR2 but escapes
                                  #     - must \-escape "
                                  #  - VAR[NUM]
                                  #Can be part of a STR if value is a STR itself.
$${...}                           #Escape ${...}

PROGRAM.variables.KEY             #{VAL} available in ${VARR}
GLOBALS                           #Values available in ${VARR}

{ fn::FUNC: {ARG[_ARR]} }         #Insert a function's return value in a {VAL} in YAML
                                  #"Built-in function"

fn::select(NUM, ARR)->VAL         #ARR[NUM] (0-based)

fn::join('DELIM', ARR)->STR       #Like ARR.join('DELIM')
fn::split('DELIM', STR)->ARR      #Like STR.split('DELIM')

fn::toBase64(STR)->STR            #
fn::fromBase64(STR)->STR          #

fn::toJSON(VAL)->'JSON'           #

fn::readFile('PATH')->'CONTENT'   #'PATH' can start with ../


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS NODE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NINPUT                            #Can use:
                                  #  - VAL as is
                                  #  - PROMISE_VAL
                                  #  - }VAL{
                                  #Can be done deeply, including any OBJ|ARR deeply

REZ.OUTPUT                        #NOUTPUT
NOUTPUT                           #Wraps a VAL, including any OBJ|ARR deeply
                                  #  - can traverse deeply without needing ?.

N|XDREZ.inputs.INPUT              #VAL
N|XDREZ.outputs.OUTPUT            #VAL

output({VAL})->}VAL{
Output.create({VAL})->}VAL{       #Create a new }VAL{

}VAL{.get()->VAL                  #Retrieve the value of a }VAL{

}VAL{.apply
 (FUNC(VAL)->>VAL2|}VAL2{)
 ->}VAL2{                         #Map the value of a }VAL{

all({}VAL{}_ARR)->}ARR{           #Concatenate values into an }ARR{
concat({VAL}_ARR)->}STR{          #Concatenate values into a }STR{
interpolate`...${{VAL}}...`       #Same as concat() but as a `...`

jsonParse(...)
jsonStringify(...)                #Like JSON.parse|stringify(...) but allowing {VAL} (deeply) and returning }VAL{ (deeply)

N.iterable.groupBy({ARR},
 FUNC(VAL)->{[, STR, VAL]})
 ->}OBJ{                          #OBJ values are ARR

N.iterable.toObject(...)          #Same args as groupBy()
                                  #OBJ values are not ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROGRAM OUTPUTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POUTPUTS ==>                      #Unlike regular OUTPUTs:
                                  #  - related to a REZ
                                  #  - used inside a PROGRAM
                                  #POUTPUTs are:
                                  #  - related to a PROGRAM, instanced by a STACK
                                  #  - used by other STACKs, PROGRAMs or processes
                                  #Also called "stack outputs"

PROGRAM.outputs.POUTPUT           #{VAL}
export const VAR = {VAL}          #In Node.js, each exported variable is a POUTPUT

export default FUNC()
 [->>POUTPUTS_OBJ]                #Alternative
NWOPTS|NWORKSPACE|NQOPTS.program  #FUNC()[->>POUTPUTS_OBJ]
SOPTS.program                     #Only with preview|up()

NSTACK.outputs()->>NPOUTPUTS      #
NPOUTPUTS.POUTPUT                 #NPOUTPUT
NPOUTPUT.value                    #VAL|'ENCRYPTED_VAL'

pulumi stack output [NPOUTPUT]    #Print an NPOUTPUT value
                                  #Def NPOUTPUT: all
--shell                           #Print as shell script instead

pulumi destroy|import|preview
 |refresh|up
--suppress-outputs                #Unless defined, POUTPUTs are printed

pulumi up
--show-full-output                #BOOL. If true (def), show POUTPUTs in full

SOPTS.onOutput                    #FUNC('POUTPUT')

REZ.type
 'pulumi:pulumi:StackReference'   #[N]SREZ. Child of [N]CREZ
new N.StackReference              #Reference to another STACK in the same PROJECT
 (...NSREZ_ARGS)                  #Meant to get its POUTPUTs
RPROPS.name
NSREZ.ARGS[1].name                #{'OOSTACK'}
[N]SREZ.name                      #}'OOSTACK'{

[N]SREZ.outputs                   #}OBJ{
NSREZ.getOutput
 ({'POUTPUT'})[->}VAL{]           #
NSREZ.getOutputValue
 ('POUTPUT')[->>VAL]              #
NSREZ.require*(...)               #Same as NSREZ.get*(...) but throw instead of returning undefined
NSREZ.getOutputDetails
 ('POUTPUT')->>OBJ                #OBJ: value VAL, secretValue VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROJECT CONFIG         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT.config                    #PCONFIG
                                  #Configuration values (similar goal as ENVVARs)
PCONFIG_VAR                       #'[PCONFIG_NS:]PCONFIG_KEY'
                                  #Def PCONFIG_NS: current 'PROJECT'
PROJECT:PCONFIG_KEY               #PCONFIG_VAR for a PROJECT
LIBRARY:PCONFIG_KEY               #PCONFIG_VAR for a library
PACKAGE:PROV_RPROP                #PCONFIG_VAR for [N]PROV_RPROPs of default PROV

PCONFIG.PCONFIG_VAR               #Either VAL or { value: PCONFIG_VAL }
PCONFIG_VAL.type                  #'string|boolean|integer|array'
                                  #If YAML runtime: '[List<]String|Number[>]'
PCONFIG_VAL.default               #Default VAL|'ENCRYPTED_VAL' when undefined
PCONFIG_VAL.description           #STR. Not with YAML runtime
PCONFIG_VAL.items                 #PCONFIG_VAL_ARR. Not with YAML runtime

new Config(['PCONFIG_NS'])        #NPCONFIG for current PROJECT and PCONFIG_NS. Loads it.
NPROJECT.config
NPCONFIG.name                     #'PCONFIG_NS'. Def: 'PROJECT'

NPCONFIG.get
 ('PCONFIG_KEY'[, OPTS])
 [->PCONFIG_VAL]                  #Returns undefined if missing or not matching OPTS.*
OPTS.allowedValues                #ARR
OPTS.min|maxLength                #NUM
OPTS.pattern                      #REGEXP|'REGEXP'

NPCONFIG.getObject
 ('PCONFIG_KEY')[->OBJ]           #
NPCONFIG.getBoolean
 ('PCONFIG_KEY')[->BOOL]          #
NPCONFIG.getNumber
 ('PCONFIG_KEY'[, OPTS])[->NUM]   #
OPTS.min|max                      #NUM

NPCONFIG.require*(...)->VAL       #Same as NPCONFIG.get*(...) but throw instead of returning undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STACK CONFIG          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCONFIG                           #Like PCONFIG, but for a STACK
                                  #Inherits PCONFIG values

[N]STACK_SETTINGS.config          #[N]SCONFIG
[N]SCONFIG.SCONFIG_VAR            #'SCONFIG_VAL'|NCONFIG_SECRET_VAL

NUPDATE.config                    #NSCONFIG_MAP
NSCONFIG_MAP.SCONFIG_VAR          #NSCONFIG_ENTRY
NSCONFIG_ENTRY.value              #SCONFIG_VAL|'ENCRYPTED_VAL'

pulumi new|preview|up|watch
--config-path
pulumi config --path              #Allow using VARR with SCONFIG_VAR

pulumi new|preview|up|watch
--config|-c                       #'SCONFIG_VAR=SCONFIG_VAL'_ARR
NSTACK.setAllConfig
 (NSCONFIG_MAP)->>                #Set all SCONFIG_VARs

pulumi config set-all
--plaintext|secret
 SCONFIG_VAR=SCONFIG_VAL          #Set multiple SCONFIG_VARs

pulumi config set SCONFIG_VAR
 [SCONFIG_VAL]                    #Def SCONFIG_VAL: stdin
NSTACK.setConfig('SCONFIG_VAR',
 NSCONFIG_ENTRY)->>               #

pulumi config rm-all
 SCONFIG_VAR...
NSTACK.removeAllConfig
 ('SCONFIG_VAR'_ARR)->>           #

pulumi config rm SCONFIG_VAR
NSTACK.removeConfig
 ('SCONFIG_VAR')->>               #

pulumi destroy|preview|up|watch
--show-config
pulumi config
NSTACK.getAllConfig()
 ->>NSCONFIG_MAP                  #

pulumi config get SCONFIG_VAR
NSTACK.getConfig('SCONFIG_VAR')
 ->>NSCONFIG_ENTRY                #

pulumi config refresh
NSTACK.refreshConfig()
 ->>NSCONFIG_MAP                  #
--force|-f                        #Do not abort if config file exists

pulumi config cp SCONFIG_VAR      #
--dest|-d                         #'STACK'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SECRETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECRETS ==>                       #Encrypt PCONFIG|SCONFIG|TCONFIG|OUTPUT|POUTPUT values when stored|serialized
                                  #Never encrypted runtime:
                                  #  - automatically decrypted
                                  #  - only marked as secret

SECRETS_PROV                      #Where secret key is located
                                  #One of:
                                  #  - 'default' (def if BACKEND Pulumi Cloud): Pulumi Cloud
                                  #  - 'passphrase' (def otherwise): locally
                                  #  - 'awskms://...?region=REGION'
                                  #  - 'gcpkms://...'
                                  #  - 'azurekeyvault://...'
                                  #  - 'hashivault://...'
                                  #Not fully documented yet

pulumi:secrets_provider
NWOPTS|NWORKSPACE|NSTACK_SETTINGS
 .secretsProvider
pulumi new|stack init
 |stack select|up|watch
--secrets-provider                #'SECRETS_PROV'

pulumi stack
 change-secrets-provider
 SECRETS_PROV                     #

XDEPLOYMENT.secrets_providers     #XSECRETS_PROV
XSECRETS_PROV.type                #'SECRETS_PROV'
XSECRETS_PROV.state               #XSECRETS_PROV_STATE
XSECRETS_PROV_STATE.project       #'PROJECT'
XSECRETS_PROV_STATE.stack         #'STACK'
XSECRETS_PROV_STATE.url           #'URL'
XSECRETS_PROV_STATE.owner         #STR

pulumi config set|set-all
--plaintext|secret                #Whether to encrypt or not

fn::secret(VAL)->VAL
secret({VAL})->}VAL{              #Mark as secret
unsecret(}VAL{)->}VAL{            #Mark as not secret
isSecret(}VAL{)->>BOOL            #

NPCONFIG.get|requireSecret*
 (...)[->}VAL{]                   #Same as NPCONFIG.get|require*(...) but mark as secret
PCONFIG_VAL|NSCONFIG_ENTRY
 |[N]TCONFIG_ENTRY|NPOUTPUT.secret#BOOL
SCONFIG_SECRET_VAL.secure         #'ENCRYPTED_VAL'

[NC]ROPTS.additionalSecretOutputs #'OUTPUT'_ARR to mark as secret
NSREZ.secretOutputNames           #}'OUTPUT'_ARR{ that are marked as secret

pulumi stack
pulumi config
 [history|output|export]
--show-secrets
HARGS[2]
SOPTS.showSecrets                 #BOOL. If false (def), secrets are not printed

ENVVAR PULUMI_CONFIG_PASSPHRASE   #'SECRET', with SECRETS_PROV 'passphrase'
ENVVAR
 PULUMI_CONFIG_PASSPHRASE_FILE    #Like PULUMI_CONFIG_PASSPHRASE but as 'PATH'

NSTACK_SETTINGS.encryptedKey      #STR. Secret key.
NSTACK_SETTINGS.encryptionSalt    #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSETS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.asset                           #NS
ASSET                             #File

fn::stringAsset('CONTENT')
new NS.StringAsset([>]'CONTENT')  #[N]STRING_ASSET. Child of ASSET
NSTRING_ASSET.text                #>'CONTENT'

fn::fileAsset('PATH')
new NS.FileAsset([>]'PATH')       #[N]FILE_ASSET. Child of ASSET
NFILE_ASSET.path                  #>'PATH'

fn::remoteAsset('URI')            #[N]REMOTE_ASSET. Child of ASSET
new NS.RemoteAsset([>]'URI')      #Can use HTTP[S] or file:
NREMOTE_ASSET.uri                 #>'URI'

ARCHIVE                           #Collection of ASSETs|ARCHIVEs

fn::assetArchive(ASSETS)
new NS.AssetArchive([>]NASSETS)   #[N]ASSET_ARCHIVE. Child of ARCHIVE
NARCHIVE.assets                   #>NASSETS
[N]ASSETS.ARCHIVE_ITEM            #[N]ASSET|[N]ARCHIVE

fn::fileArchive('PATH')           #[N]FILE_ARCHIVE. Child of ARCHIVE
new NS.FileArchive([>]'PATH')     #Either 'DIR' or PATH to *.tar|tgz|tar.gz|zip|jar
NFILE_ARCHIVE.path                #>'PATH'

fn::remoteArchive('URI')          #[N]REMOTE_ARCHIVE. Child of ARCHIVE
new NS.RemoteArchive([>]'URI')    #Must be *.tar|tgz|tar.gz|zip|jar
NREMOTE_ARCHIVE.uri               #>'URI'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    FUNCTION SERIALIZATION     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NR.serializeFunction              #Serialize FUNC.
 (FUNC[, OPTS])->>OBJ             #Goal is to allow passing FUNCs to REZs arguments, that are called later
                                  #  - e.g. AWS Lambda, or NVPROV.*
                                  #OBJ:
                                  #  - text 'CODE'
                                  #  - exportName 'VAR'
                                  #  - containsSecrets BOOL
                                  #Serializes recursively any:
                                  #  - FUNC calls
                                  #  - FUNC closure
                                  #  - imports
                                  #     - ESM imports of Node core|external modules are turned into CommonJS imports and not recursed
                                  #  - stack lines, for debugging
                                  #Serialized values use their current value, i.e. inlined
                                  #Serialize:
                                  #  - FUNCs with toString()
                                  #  - PROMISE resolved value, i.e. awaits them
                                  #  - REZs
                                  #  - any other JavaScript type
                                  #Does not work with:
                                  #  - native FUNCs (e.g. FUNC.bind(...)) declared in closure scope
                                  #  - dynamic OBJ[STR] declared in closure scope, with STR unknown at compile-time
                                  #Uses 'v8' and 'inspector' Node core modules under the hood
OPTS.exportName                   #'VAR' (def: 'handler') of the named export in 'CODE'
OPTS.isFactoryFunction            #BOOL (def: false). If true, serialize FUNC(), not FUNC
OPTS.serialize                    #FUNC(VAL)->BOOL. Called on each VAL recursively. If false, do not serialize.
                                  #Meant to remove cycles
OPTS.allowSecrets                 #BOOL. If false (def), do not serialize secrets
OPTS.logResource                  #REZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        WORKSPACE LOCAL        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOCAL WORKSPACE ==>               #Local environment and directories where Pulumi is run

PHOME_DIR/workspaces/PROJECT-
 WORKSPACE_ID-workspace.json      #Local WORKSPACE_SETTINGS

NA.LocalWorkspace
 .create([NWOPTS])->>NWORKSPACE   #

NSTACK.workspace                  #NWORKSPACE

NWOPTS|NWORKSPACE.pulumiHome      #'PHOME_DIR' where to store binaries, PLUGINs, WORKSPACEs, TEMPLATEs, ACCESS_TOKENs.
ENVVAR PULUMI_HOME                #Def: ~/.pulumi

pulumi ... --cwd|-C               #'CWD_DIR' (def: '.') used for:
GLOBALS.pulumi.cwd                #  - main files like Pulumi[.STACK].yaml, index.js|ts, etc.
NWOPTS|NWORKSPACE.workDir         #  - all local paths
NQOPTS.workDir                    #Same. Not with NQOPTS.projectName|program

[N]PROJECT.main                   #'DIR' of PROGRAM
                                  #Def: 'CWD_DIR'

NWOPTS|NWORKSPACE.envVars         #OBJ of ENVVARs passed to PROGRAMs

NWORKSPACE.postCommandCallback    #FUNC('STACK')->>
NWORKSPACE.serializeArgsForOp     #FUNC('STACK')->>STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       WORKSPACE REMOTE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NA.RemoteWorkspace.create|select
 |createOrSelectStack
 (NQROPTS[, OPTS])->>NRSTACK      #

OPTS.envVars.ENVVAR               #STR or { secret STR }
OPTS.preRunCommands               #STR_ARR

OPTS.skipInstallDependencies      #BOOL (def: false)

NQROPTS.stackName                 #'STACK'
NQROPTS.projectPath               #STR

NQROPTS.branch                    #STR
NQROPTS.commitHash                #STR
NQROPTS.url                       #'URL'

NQROPTS.auth                      #RGIT_AUTH
NQROPTS_AUTH.username             #STR
NQROPTS_AUTH.password             #STR
NQROPTS_AUTH.personalAccessToken  #STR
NQROPTS_AUTH.sshPrivateKey        #STR
NQROPTS_AUTH.sshPrivateKeyPath    #'PATH'

NRSTACK                           #Like NSTACK except:
                                  #  - no workspace property
                                  #  - no create|select|createOrSelect()
                                  #  - no last BOOL arg in history()
                                  #  - SOPTS: only onEvent|onOutput()

NKREZ_ARGS[4]
NREZ_ARGS[5]                      #BOOL (def: false). If true, remote NKREZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROJECT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT                           #Sets of REZs to provision, and related settings
                                  #Set in CWD_DIR/Pulumi.yaml|json
                                  #Used with any runtime, not only YAML

pulumi-ai                         #CLI using ChatGPT to create a PROJECT file based on natural language
                                  #There is also a UI version

NWOPTS.projectSettings            #NPROJECT
NWORKSPACE.saveProjectSettings
 (NPROJECT)->>                    #
NWORKSPACE.projectSettings()
 ->>NPROJECT                      #

pulumi new                        #Create a new PROJECT
--generate-only|-g                #Unless specified, also create a STACK, STACK_SETTINGS and install language RUNTIME
--dir                             #'DIR' where to generate (def: '.')
--force|-f                        #Override existing files

DEPENDENCIES INSTALL ==>          #Automatically installs:
                                  #  - language RUNTIME, e.g. @pulumi/pulumi
                                  #  - PROV dependency, e.g. @pulumi/aws
ENVVAR PULUMI_PREFER_YARN         #If 'true', use yarn instead of npm

getProject()->'PROJECT'
GLOBALS.pulumi.project            #'PROJECT'

pulumi:project
XREZ.project
[N]PROJECT.name                   #'PROJECT'
pulumi new --name|-n              #'PROJECT' (def: prompted)

pulumi:description
[N]PROJECT.description            #STR
pulumi new --description|-d       #PROJECT.description (def: prompted)

NPROJECT.author                   #STR
NPROJECT.license                  #STR
NPROJECT.website                  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEMPLATE                          #Template PROJECT|POLICY_PACK, to reuse

pulumi new|up|policy new TEMPLATE #Def TEMPLATE: interactive choice
                                  #TEMPLATE can also be a:
                                  #  - PATH
                                  #  - URL to GitHub|GitLab|BitBucket repository|branch|subdirectory
GET https://app.pulumi.com/new    #Same but done in Pulumi Cloud UI.
 ?template=TEMPLATE               #A "deploy with Pulumi button" Markdown is also available.

pulumi new --list-templates|-l    #List TEMPLATEs then exit

pulumi [policy] new ...
--offline|-o                      #Only use locally cached TEMPLATEs
PHOME_DIR/templates/              #Local cache for TEMPLATEs

AUTHORING TEMPLATE ==>            #Create files to scaffold as is
                                  #Must have a Pulumi.yaml|json
                                  #Can use ${VAR} for: PROJECT|DESCRIPTION

[N]PROJECT.template               #[N]TEMPLATE
                                  #Settings when authoring a TEMPLATE
[N]TEMPLATE.description           #STR. Description of the TEMPLATE itself, not the created PROJECT
NTEMPLATE.important               #BOOL
NTEMPLATE.quickstart              #STR

[N]TEMPLATE.config                #[N]TCONFIG. PCONFIG created by the TEMPLATE
                                  #Prompted on creation
[N]TCONFIG.TCONFIG_VAR            #[N]TCONFIG_ENTRY
[N]TCONFIG_ENTRY.default          #VAL|'ENCRYPTED_VAL'
[N]TCONFIG_ENTRY.description      #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAM MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAMS ==>                      #File declaring [N]REZs. One per PROJECT

PROGRAM                           #YAML runtime uses same file as PROJECT (CWD_DIR/Pulumi.yaml|json) as PROGRAM
PACKAGE.JSON MAIN FILE ==>        #NPROGRAM
                                  #Can be *.ts when using TypeScript


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAM ERROR         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new ResourceError                 #NRERROR. Child of ERROR
 ('MESSAGE'[, NREZ][, BOOL])      #To throw to abort execution, when related to a specific REZ
NRERROR.resource                  #NREZ
NRERROR.hideStack                 #BOOL (def: false)

new RunError('MESSAGE')           #ERROR to throw to abort execution
                                  #Prefer ResourceError


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK SET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK                             #Instantiation of a PROGRAM with specific STATE and STACK_SETTINGs
                                  #E.g. prod vs staging vs dev, or Git branch
OSTACK                            #[ORG/[PROJ/]]STACK
                                  #Def ORG|PROJ: current one
OOSTACK                           #ORG/PROJ/STACK
NA.fullyQualifiedStackName
 ('ORG', 'PROJECT', 'STACK')
 ->'OOSTACK'                      #

pulumi stack init OSTACK          #Create an empty STACK
                                  #Def ORG: current one
                                  #Does not create STACK_SETTINGS unless needed
--copy-config-from                #'STACK2'. Copy its SCONFIG
--no-select                       #Do not select the STACK

NA.LocalWorkspace.create|select
 |createOrSelectStack
 (NQOPTS[, NWOPTS])->>NSTACK      #NQOPTS: stackName 'STACK', projectName 'PROJECT'
NA.Stack
 .create|select|createOrSelect
 ('STACK', NWORKSPACE)->>NSTACK2  #
NWORKSPACE
 .create|selectStack('STACK')->>  #
pulumi stack select [OSTACK]      #Select the OSTACK, i.e. make it the current one
                                  #Def OSTACK: interactive prompt
--create|-c                       #Upserts

WORKSPACE_SETTINGS.stack          #Selected 'STACK'

pulumi stack unselect             #No more selected STACK

pulumi about|cancel|config ...
 |console|destroy|import|logs
 |new|preview|refresh|stack ...
 |state|up|watch
--stack|-s                        #'STACK' instead of selected one

pulumi stack rename STACK         #Rename a STACK

DELETE STACK_URL                  #Req: OBJ
                                  #  - force BOOL
                                  #Res: empty
NWORKSPACE.removeStack('STACK')->>
pulumi stack rm [STACK]           #Remove an empty STACK and its STACK_SETTINGS and UPDATEs
--preserve-config                 #Do not delete the STACK_SETTINGS
--force|-f                        #Delete even if STACK has REZs

NWORKSPACE
 .export*|import*|*Config*|*Tag*
 ('STACK', ...)                   #Same as NSTACK.exportStack|...(...)
NWORKSPACE.stackOutputs('STACK')  #Same as NSTACK.outputs()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK GET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACKS_URL                        #API_URL/stacks
USER_STACKS_URL                   #API_URL/user/stacks
STACK_URL                         #STACKS_URL/ORG/PROJECT/STACK

GET USER_STACKS_URL               #Req: empty
                                  #Res: OBJ: stacks XSTACK_SHORT_ARR
NWORKSPACE.listStacks()
 ->>NSTACK_SUMMARY_ARR
pulumi stack ls                   #All STACKs of current PROJECT
--all|-a                          #Print for all PROJECTs
--organization|-o                 #'ORG'
--project|-p                      #'PROJECT'

getStack()->'STACK'               #
GLOBALS.pulumi.stack              #'STACK'

pulumi stack                      #Print current STACK and its REZs
--show-name                       #Print only 'STACK'
--show-ids|-i                     #Show REZ_IDs
--show-urns|-u                    #Show URNs

GET STACK_URL                     #Req: empty
                                  #Res: XSTACK
NWORKSPACE.stack()
 [->>NSTACK_SUMMARY]              #

XSTACK[_SHORT].orgName            #'ORG'
XSTACK[_SHORT].projectName        #'PROJECT'
XREZ.stack
XSTACK[_SHORT].stackName
NSTACK[_SUMMARY].name             #'STACK'

XSTACK_SHORT|NSTACK_SUMMARY
 .resourceCount                   #NUM of REZs
NSTACK_SUMMARY.current            #BOOL
XSTACK.activeUpdate               #'UUID'
NSTACK_SUMMARY.updateInProgress   #BOOL
XSTACK_SHORT|NSTACK_SUMMARY
 .lastUpdate                      #DATE_NUM
NSTACK_SUMMARY.url                #'URL'
XSTACK.version                    #NUM

XSTACK.currentOperation           #XCUR_OP
XCUR_OP.kind                      #STR
XCUR_OP.author                    #STR
XCUR_OP.started                   #DATE_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STACK SETTINGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_SETTINGS                    #STACK-specific settings
                                  #Persisted at CWD_DIR/Pulumi.STACK.yaml
PROJECT.stackConfigDir            #'DIR'
pulumi config ...|destroy|import
 |logs|preview|refresh|up|watch
--config-file                     #'PATH' instead of 'CWD_DIR/Pulumi.STACK.yaml'

NWOPTS.stackSettings              #NSTACK_SETTINGS
NWORKSPACE.saveStackSettings
 ('STACK', NSTACK_SETTINGS)->>    #
NWORKSPACE.stackSettings()
 ->>NSTACK_SETTINGS               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STACK TAGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS                              #Custom metadata on a STACK
                                  #Only with Pulumi Cloud BACKEND
'TAG'                             #TAG name, usually 'NAMESPACE:NAME', camelCase
pulumi|gitHub|vcs:*               #Built-in TAGs

TAGS_URL                          #STACK_URL/tags

POST TAGS_URL                     #Req: XTAGS: name 'TAG', value 'VAL'
                                  #Res: empty
NSTACK.setTag('TAG', 'VAL')->>    #
pulumi stack tag set TAG VAL      #

XSTACK.tags.TAG                   #'VAL'
NSTACK.listTags()->>OBJ           #
pulumi stack tag ls               #

NSTACK.getTag('TAG')->>'VAL'      #
pulumi stack tag get TAG          #

DELETE TAGS_URL/TAG               #Req: empty
                                  #Res: empty
NSTACK.removeTag('TAG')->>        #
pulumi stack tag rm TAG           #

pulumi stack ls --tag|-t          #'TAG=VAL' filter


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STACK STATE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET STACK_URL/export              #Req: empty
                                  #Res: XSTACK_STATE
NSTACK.exportStack()
 ->>NSTACK_STATE                  #
pulumi stack export               #Print STACK_STATE

NSTACK.importStack
 (NSTACK_STATE)->>
pulumi stack import               #Re-add STACK_STATE
--force|-f                        #Allow apparent errors

pulumi stack export|import        #
--file                            #'PATH' of serialized STACK_STATE (def: stdout)

STACK_STATE                       #Also named "checkpoint"

pulumi stack export --version     #NUM (def: latest)
N|XSTACK_STATE.version            #Always 3
                                  #Version of STACK_STATE format.

N|XSTACK_STATE.deployment         #N|XDEPLOYMENT
N|XDEPLOYMENT.resources           #N|XDREZ_ARR
N|XDEPLOYMENT.manifest            #N|XMANIFEST
N|XMANIFEST.time                  #'DATE'
N|XMANIFEST.magic                 #'HASH' checksum


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESOURCE MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ                               #Specific infrastructure resource, e.g. S3 Bucket

RTYPE                             #REZ type
                                  #'PACKAGE:MODULE[/TYPE]:TYPE'
                                  #The repetion of /TYPE is only for specific REZs
                                  #  - e.g. 'aws:s3/bucket:Bucket'
N|XDREZ.type
[X]REZ.type
NVREZ_ARGS[5]
N[C|K]REZ_ARGS[0]                 #'RTYPE'

'REZ'                             #REZ identifier within Pulumi
                                  #Must be unique per STACK + RTYPE
                                  #Also called "logical name"
XREZ.name
NSREZ_ARGS[0]
N[C|D|K]REZ_ARGS[1]               #'REZ'

'REZ_ID'                          #REZ identifier within provisioned infrastructure (e.g. on AWS)
                                  #E.g. AWS ARN
                                  #Also called "physical name"
                                  #Def: 'REZ-RANDOMID' ("auto-naming")
                                  #  - RANDOMID: 7 hex chars, i.e. 56 bits entropy, i.e. collision likely after ~1e4 items
                                  #Most REZ have a RPROP to explicitely set it
                                  #  - REZ-specific
                                  #  - often called `name`, but not always
                                  #  - when set:
                                  #     - should include PROJECT and STACK in name, to avoid collision with other PROJECT|STACKs
                                  #     - ROPTS.deleteBeforeReplace must be true
N|XDREZ.id
XREZ.id                           #'REZ_ID'
NCREZ.id                          #}'REZ_ID'{

'URN'                             #REZ identifier for a given STACK
                                  #'urn:pulumi:STACK:PROJECT:[[...$]PARENT_RTYPE$]RTYPE:REZ'
N|XDREZ.urn
XREZ.urn                          #'URN'
NREZ.urn                          #}'URN'{
createUrn({'REZ'}, {'RTYPE'},
 {'PARENT_URN'}|PARENT_NREZ,
 'PROJECT', 'STACK')->}'URN'{     #
pulumi state rename URN REZ       #Rename a REZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESOURCE INIT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM.resources.REZ             #REZ
new N.Resource(...NREZ_ARGS)      #Declare a REZ to provision ("resource registration")
                                  #Done in the background:
                                  #  - might be provisioned right away or later
                                  #  - returns right away
                                  #Base class: usually a child is used.

new N.CustomResource              #NCREZ. Child of NREZ
 (...NCREZ_ARGS)                  #Regular, individual NREZ
NREZ_ARGS[2]                      #BOOL (def: false). If true, custom REZ, like NCREZ
N|XDREZ.custom
XREZ.custom                       #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE OPTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]RPROPS                         #RTYPE-specific options
                                  #Can be used as }VAL{
REZ.properties.RPROP
NCREZ_ARGS|NVREZ_ARGS|NKREZ_ARGS
 |NPROV_ARGS[2].NRPROP
NREZ_ARGS[3].NRPROP               #{VAL}

REZ.options
NPROV_ARGS[3]
NREZ_ARGS[4]                      #[N]ROPTS. RTYPE-agnostic options
NSREZ_ARGS[2]
NCREZ_ARGS|NVREZ_ARGS[3]          #NCROPTS. Child of NROPTS
NKREZ_ARGS[3]                     #NKROPTS. Child of NROPTS

[NC]ROPTS.customTimeouts.METHOD   #'NUMns|us|ms|s|m|h|d' timeout (def: none) when performing a METHOD on the REZ.
                                  #METHOD can be create|update|delete

[NC]ROPTS.ignoreChanges           #'[N]RPROP'_ARR that are read-only if previously set.
                                  #After being set once, next `up` will keep using current value, even if its declaration has changed.
                                  #Meant to change a RPROP value for new instances of a REZ without changing current ones.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TRANSFORMATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NROPTS.transformations            #NTRANSFORM_ARR
NTRANSFORM                        #FUNC(NTARGS)[->NTRESULT]
                                  #Maps NROPTS|NRPROPS during REZ initialization
                                  #Inherited by child REZs
                                  #  - i.e. useful to set in a NKREZ

NTARGS|NTRESULT.opts              #NROPTS
NTARGS|NTRESULT.props             #NRPROPS
NTARGS.type                       #'RTYPE'
NTARGS.name                       #'REZ'
NTARGS.resource                   #NREZ

NR.registerStackTransformation
 (NTRANSFORM)                     #Add a NTRANSFORM to the rootStackResource, i.e. inherited by all REZs

mergeOptions(N*ROPTS, N*ROPTS2)
 ->N*ROPTS3                       #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ROPTS.aliases                     #'URN'_ARR
NROPTS.aliases                    #{'URN'|NALIAS}_ARR

[N]ALIAS                          #Alternative URN for the REZ
                                  #Meant to allow renaming REZ without losing former references to it
                                  #  - e.g. without forcing a "replace"
NALIAS.type                       #{'RTYPE'}
NALIAS.project                    #{'PROJECT'}
NALIAS.stack                      #{'STACK'}
NALIAS.name                       #{'REZ'}
NALIAS.parent                     #NREZ|{'URN'}

allAliases({'URN'|NALIAS}_ARR,
 'REZ', 'RTYPE', PARENT_NREZ,     #Turn NALIAS_ARR into 'URN'_ARR
 'PARENT_REZ')->}'URN'{_ARR       #If PARENT has NALIASes too, use cartesian product, since PARENT is part of child's URN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DEPENDENCIES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDENCIES ==>                  #A REZ depending on another REZ2 wait for it to be provisioned first.

INPUT DEPENDENCIES ==>            #A REZ with an INPUT using another REZ2's OUTPUT creates a dependency.
N|XDREZ.propertyDependencies      #{ 'NRPROP': 'NRPROP2', ... } of input dependencies

[N]ROPTS.dependsOn                #{[N]REZ[_ARR]}. Explicitly add a dependency to another REZ.

XREZ.dependencies                 #'URN'_ARR

NREZ_ARGS[6]
NCREZ_ARGS[4]
NPROV_ARGS[4]                     #BOOL (def: false). If true, synthetic REZ used internally for dependency tracking.

new N.DependencyResource('URN')   #Child of NCREZ
                                  #Manual dependency to a REZ2, specified by URN

new N.DependencyProviderResource
 (STR)                            #Child of NPROV

pulumi stack graph [PATH]         #Visualize STACK dependencies|parents as a DOT graph
                                  #Def PATH: stdout
--short-node-name                 #Label each node with its 'REZ'
--ignore-dependency|parent-edges  #Skip edges related to dependencies|parents
--dependency|parent-edge-color    #'#COLOR' (def: '#246C60|#AA6639')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]ROPTS.parent                   #{REZ}|NREZ
                                  #Parent REZ, preferably a CREZ
                                  #Cannot delete parent without deleting children
                                  #Inherits some of parent [N]ROPTS, including PROV, protect, retainOnDelete, TRANSFORM
                                  #Semantic goal too
                                  #  - e.g. child/parent graphs shown with CLI

XDREZ.parent
XREZ.parent.urn                   #'URN'

rootStackResource                 #NREZ of the current STACK
                                  #Root NREZ
                                  #Def parent NREZ when not specified
                                  #RTYPE 'pulumi:pulumi:Stack'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMPONENT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new N.ComponentResource           #NKREZ. Child of NREZ
 (...NKREZ_ARGS)                  #Group of NREZs, often:
                                  #  - initialized in constructor
                                  #  - passing itself as [N]ROPTS.parent
                                  #  - namespacing name with parent 'REZ' to prevent collisions
                                  #Can also be a single child NREZ, but with specific options|methods|etc.

COMPONENT PROTECTED METHODS ==>   #Following methods are `protected`, i.e. meant to be used during class declaration
NKREZ.initialize({{OBJ}})->>OBJ   #Set custom data
NKREZ.getData()->>OBJ             #Get custom data

NKREZ.registerOutputs             #Set OUTPUTs. To do once in end of constructor.
 ([}VAL{|[>]VAL])                 #VAL is {{OBJ}}


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXTERNAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CustomResource                    #Return NREZ already provisioned elsewhere.
 .get('REZ', 'REZ_ID'[, NCROPTS]) #Pulumi does not try to manage it.
 ->NREZ                           #Its OUTPUTs are available.
                                  #NCPROPS must match the values provisioned elsewhere.
                                  #  - i.e. must usually use RPROPS.name (or similar) to set the REZ_ID as well
                                  #CustomResource must be the specific CREZ class
REZ.get                           #Same in YAML
REZ.get.id                        #'REZ_ID'
REZ.get.state                     #{{NCROPTS}}


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NROPTS.id                         #{'REZ_ID'}
[NC]ROPTS.import                  #'REZ_ID'
                                  #Like CustomResource.get()
                                  #  - including that the other RPROPS must match
                                  #However, add the REZ to the STACK_STATE
                                  #  - REZ is not created, but is now managed by Pulumi
                                  #  - i.e. after an `up`, should remove `import`
NROPTS.urn                        #Same with 'URN'

pulumi import RTYPE REZ REZ_ID    #Same action as ROPS.import

--generate-code                   #BOOL. If true (def), print source code to add for that REZ
--out|-o                          #'DIR'

--protect                         #BOOL. If true (def), make REZs protected.
                                  #Reason: prevent deletion if forgot to add the source code from --generate-code

--provider                        #NAME='URN' of PROV
--parent                          #NAME='URN' of parent
--properties                      #'RPROP,...' to include

--from                            #STR. Converter plugin.

-f                                #'PATH.json' to import multiple resources.
                                  #OBJ:
                                  #  - nameTable.NAME 'URN': code variable name of PROV|parent
                                  #  - resources IMPORT_REZ_ARR
IMPORT_REZ.type                   #'RTYPE'
IMPORT_REZ.name                   #'REZ'
IMPORT_REZ.id                     #'REZ_ID'
IMPORT_REZ.provider               #'PROV'
IMPORT_REZ.parent                 #'REZ'
IMPORT_REZ.version                #STR
IMPORT_REZ.properties             #'RPROP'_ARR

CLOUD IMPORT ==>                  #CLI like pulumi import ... but for all REZs on a Cloud provider, Terraform, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CREATE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



NSTACK.preview([SOPTS])->>NURESULT
pulumi preview                    #Show a preview of `pulumi up`

pulumi destroy|import|refresh|up
--skip-preview|-f                 #Do not compute a preview first

NR.isDryRun()->BOOL               #true if currently in a `preview`

NSTACK.up([SOPTS])->>NURESULT     #Create|update REZs in a STACK
pulumi up                         #Only make minimum necessary updates.

NSTACK.cancel()->>                #Cancel current update
pulumi cancel [STACK]             #Does not rollback

pulumi watch                      #Update REZs in watch mode
--path                            #'DIR|FILE'_ARR to watch (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REFRESH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NSTACK.refresh([SOPTS])->>NDRESULT
pulumi refresh                    #Refresh REZs in a STACK

PROJECT.options.refresh           #If 'always' (def: undefined), call refresh() before destroy|preview|up|watch
pulumi destroy|preview|up|watch
--refresh|-r                      #If 'true', call refresh() first

pulumi refresh
--import-pending-creates          #'PROV_URN'_ARR of pending creates
--clear-pending-creates           #Remove all pending creates from the state
--skip-pending-creates            #Do not import pending creates in interactive mode

XREZ.pending                      #'creating|deleting|updating|reading|importing'
                                  #Pending action due to an abort


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DELETE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NSTACK.destroy([SOPTS])->>NDRESULT
pulumi destroy                    #Destroy all REZs in a STACK
--remove                          #Also destroy STACK itself and its STACK_SETTINGs

pulumi state delete URN           #Delete a REZ from the STACK

[NC]ROPTS.retainOnDelete          #BOOL (def: false). If true, when REZ is deleted from the STACK, it is removed from
                                  #Pulumi STATE, but not actually unprovisioned by the PROV.
                                  #This includes deletion due to `replace`.

[N]ROPTS.protect                  #BOOL (def: false). If true, prevent deleting REZ
XREZ.protected                    #BOOL
pulumi destroy --exclude-protected#Keep protected REZs
pulumi state delete ... --force   #Also delete protected REZs
pulumi state unprotect URN        #Make a REZ not protected anymore
--all                             #Apply to all REZs

NROPTS.deletedWith                #NREZ2 which, when deleted, also deletes the current NREZ
                                  #When deleting both NREZ and NREZ2, the PROV will skip manually deleting NREZ,
                                  #since deleting NREZ2 is enough

XREZ.delete                       #BOOL. Whether marked for deletion in next update


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTOMATION MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NDRESULT|NURESULT.stdout|stderr   #STR

SOPTS.expectNoChanges
pulumi preview|refresh|up ...
--expect-no-changes               #Fail if there are any changes

SOPTS.parallel
pulumi destroy|import|preview
 |refresh|up|watch
--parallel|-p                     #NUM (def: unlim). Operates on NUM REZs in parallel

PARALLEL UPDATES ==>              #Serial if free plan
                                  #Max 5 parallel unless enterprise plan

SOPTS.onEvent                     #FUNC(ENGINE_EVENT)

SOPTS.userAgent                   #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AUTOMATION TARGET       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS.target                      #'URN'_ARR
pulumi destroy|preview|refresh|up
--target|-t                       #'URN'. Only operate on specific REZs, including children REZs
                                  #Can use wildcards *|**

SOPTS.targetDependents
pulumi destroy|preview
 |state delete|up
--target-dependents               #Also operate on dependent REZs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      AUTOMATION REPLACE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATE VS REPLACE ==>             #Modification of a REZ without|by re-creating it
                                  #Tries to update when possible

SOPTS.replace                     #STR_ARR
pulumi preview|up ...
--replace                         #Like --target, but for `replace`
--target-replace                  #Combine --target + --replace

[NC]ROPTS.deleteBeforeReplace     #BOOL. When replacing a REZ, whether to delete old REZ before|after creating the new one.
                                  #False (def): allow atomic replaces and easier rollbacks
                                  #True: necessary when REZ_ID is hard-coded

[NC]ROPTS.replaceOnChanges        #'RPROPS_VARR|*'_ARR
                                  #When any RPROP_VARR (or a child property) is changed, always do a replace, not an update.
                                  #Only for edge cases, the PROV usually do the right guess.
                                  #VARR can use *

pulumi destroy|preview|refresh
 |up|watch
--show-replacement-steps          #Show `replace` as two steps (creation then deletion) instead of one


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AUTOMATION REPORT       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS.diff
pulumi destroy|import|preview
 |refresh|up
--diff                            #Show changes as diff

pulumi destroy|preview|refresh
 |up|watch
--show-sames                      #Show REZs that won't change

pulumi up
--show-reads                      #Show REZs being read, not only ones in the STACK

pulumi destroy|import|preview
 |refresh|up
--suppress-permalink              #If 'true', do no show state permalinks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTOMATION PLAN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLAN                              #"Update plan". JSON file with a planned UPDATE
                                  #Can be re-used, to redo exact same RES_UPDATEs
                                  #Requires ENVVAR PULUMI_EXPERIMENTAL=true
pulumi preview --save-plan
SOPTS.plan                        #'PLAN' to save
pulumi up --plan
SOPTS.plan                        #'PLAN' to use


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        UPDATE HISTORY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATE                            #Operation on a STACK
UPDATE_KIND                       #'preview|update|refresh|rename|destroy|import'

RES_UPDATE                        #Operation on a REZ in a STACK
RES_UPDATE_KIND                   #'create[-replacement]', 'update', 'replace', 'read[-replacement]', 'delete[-replacement]',
                                  #'discard[-replaced]', 'same', 'refresh', 'remove-pending-replace', 'import[-replacement]'

UPDATES_URL                       #STACK_URL/updates

GET UPDATES_URL                   #Req: OBJ
                                  #  - output-type 'service' or 'cli' (def)
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/latest/previews   #Req: empty
                                  #Res: updates XUPDATE_ARR
                                  #Same but only previews since last UPDATE
NSTACK.history(...HARGS)
 ->>NUPDATE_ARR
pulumi stack history              #Print STACK previous UPDATEs
HARGS[0]
--page-size                       #NUM (def: 10), for pagination
HARGS[1]
--page                            #NUM2 (def: 1), for pagination
--full-dates                      #Show absolute dates, not relative ones

NSTACK.info([BOOL])[->>NUPDATE]   #

XUPDATE.updateID                  #'UPDATE_ID'
XUPDATE.info                      #XINFO

NDRESULT.summary                  #NUPDATE
XINFO|NUPDATE.kind                #'UPDATE_KIND'
XINFO.start|endTime               #DATE_NUM
NUPDATE.startTime|endTime         #DATE
XINFO|NUPDATE.result              #'not-started|in-progress|succeeded|failed'
XINFO|NUPDATE.environment.ENVVAR  #'VAL'

NUPDATE.Deployment                #'JSON'

XUPDATE.version                   #NUM
XUPDATE.latestVersion             #NUM
XINFO|NUPDATE.version             #NUM

SOPTS.message
pulumi destroy|import|preview
 |refresh|up|watch
--message|-m                      #'MESSAGE' describing the operation
XINFO|NUPDATE.message             #'MESSAGE'

XINFO|NUPDATE
 .resourceChanges.RES_UPDATE_KIND
NURESULT
 .changeSummary.RES_UPDATE_KIND   #NUM

XINFO.config                      #SCONFIG

XUPDATE.githubCommitInfo          #XGITINFO
XGITINFO.slug                     #'USER/REPO'
XGITINFO.sha                      #'COMMIT_HASH'
XGITINFO.url                      #'URL' to commit
XGITINFO.author                   #XUSER
XUPDATE.requestedBy               #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         UPDATE EVENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET UPDATES_URL/UPDATE_ID         #Req: empty
                                  #Res: OBJ:
                                  #  - status STR
                                  #  - events XEVENT_ARR
GET UPDATES_URL/UPDATE_ID/events  #Req: empty
                                  #Res: events XEVENT_ARR

XEVENT.timestamp                  #DATE_NUM
XEVENT.type                       #'EVENT_TYPE'
XEVENT.EVENT_TYPE                 #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOK                           #Send HTTP request on specific events
                                  #Not with free plan
                                  #Including for Slack
WEBHOOK_KIND                      #Among:
                                  #  - 'stack_preview|update'
                                  #  - 'stack': STACK creation|deletion within an ORG

EMAIL NOTIFICATIONS ==>           #On 'stack_update'. Done from UI

WEBHOOKS_URL                      #ORG_URL/hooks

POST WEBHOOKS_URL                 #Req: XWEBHOOK
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL/WEBHOOK          #Req: empty
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL                  #Req: empty
                                  #Res: XWEBHOOK_ARR

XWEBHOOK.name                     #'WEBHOOK'
XWEBHOOK.displayName              #STR
XWEBHOOK.organizationName         #'ORG'
XWEBHOOK.payloadUrl               #'URL' to send to
XWEBHOOK.active                   #BOOL (def: true). Allow disabling
XWEBHOOK.secret                   #'SECRET' used to compute Pulumi-Webhook-Signature [C]
                                  #with value HMAC_SHA256(PAYLOAD, 'SECRET')
                                  #Should be checked in response, to authenticate

GET WEBHOOKS_URL/WEBHOK/deliveries#Req: empty
                                  #Res: XWEBHOOK_RES_ARR
POST WEBHOOKS_URL/WEBHOOK/ping    #Req: empty
                                  #Res: XWEBHOOK_RES

XWEBHOOK_RES.id                   #'UUID'
XWEBHOOK_RES.kind                 #'WEBHOO_KIND'
XWEBHOOK_RES.payload              #'JSON_OBJ'
                                  #Not fully documented yet
XWEBHOOK_RES.requestHeaders       #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseCode         #NUM
XWEBHOOK_RES.responseHeaders      #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseBody         #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROVIDER MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESOURCE PLUGIN ==>               #PLUGIN which adds capability for a specific platform|library to the deployment engine
                                  #Computes desired state.
                                  #E.g. pulumi-resource-aws
RESOURCE PROVIDER SDK ==>         #RUNTIME library implementing PROV
                                  #Retrieve desired state from resource PLUGIN then execute it by calling specific platform|library API
RESOURCE PROVIDER ==>             #Resource plugin + resource provider SDK

REZ.type
 'pulumi:providers:PACKAGE'
new N.ProviderResource            #[N]PROV. Child of [N]CREZ
 (...NPROV_ARGS)                  #Main NKREZ of a resource provider SDK
RPROPS.package
NPROV_ARGS[0]                     #'PACKAGE'
RPROPS.name
NPROV_ARGS[1]                     #'PROV'
[N]PROV_RPROPS                    #[N]RPROPS of [N]PROV.
                                  #Set with:
                                  #  - NPROV_ARGS[2].RPROP
                                  #  - REZ.properties.RPROP
                                  #  - PCONFIG['PACKAGE:RPROP'] (only default PROV)

N.ProviderResource.register
 ([NPROV])[->>STR]                #

[N]ROPTS.provider                 #{PROV}|NPROV
                                  #Def: same as parent
                                  #  - if none: default PROV
                                  #Most REZs are descendant of a PACKAGE's top-level PROV
                                  #  - i.e. only needed when overwriting PROV_CONFIG_VARs for specific REZs
[NK]ROPTS.providers               #Same but as {PROV}_ARR or { PACKAGE: {PROV}, ... }, i.e. multiple PROVs
                                  #When using an OBJ, children only inherits PROV for their respective PACKAGE
                                  #  - must intersect with it
                                  #Meant for parent REZs, especially NKREZs

NREZ.getProvider('PACKAGE')->NPROV#
N|XDREZ.provider
XREZ.provider.urn                 #'PROV_URN'

NPROV.defaultProvider             #BOOL (def: false). Use as default PROV
PROV_CONFIG_VAR pulumi:
 disable-default-providers[NUM]   #'PROV|*' to disable as default PROV

PROV_VERSION                      #'X.Y.Z' of the PROV
[N]ROPTS.version                  #'PROV_VERSION' override for a specific REZ
                                  #Only needed for edge cases


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROVIDER DYNAMIC        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STANDARD RESOURCE PROVIDER ==>    #PROV maintained by Pulumi

new N.dynamic.Resource            #NVREZ. Child of NCREZ
 (...NVREZ_ARGS)                  #"Dynamic resource provider". Custom PROV not meant to be shared
                                  #Only available with RUNTIME nodejs|python
NVREZ_ARGS[0]                     #NVPROV
NVREZ_ARGS[4]                     #'MODULE'

pulumi-resource-pulumi-RUNTIME    #PLUGIN used under the hood by NVREZs

IOBJ                              #NRPROPS
OOBJ                              #NRPROPS + OUTPUTs

NVPROV.*                          #Use NR.SerializeFunction() under the hood, because FUNCs are
                                  #declared in PROGRAM process, but run in pulumi-resource-pulumi-RUNTIME PLUGIN process

NVPROV.check                      #FUNC(OLD_IOBJ, NEW_IOBJ)->>OBJ:
                                  #  - inputs NEW_IOBJ
                                  #  - failures NFAILURE_ARR
                                  #Validates|transforms IOBJ passed to diff|create|update
NFAILURE.property                 #'RPROP'
NFAILURE.reason                   #'MESSAGE'

NVPROV.diff                       #FUNC('REZ_ID', OLD_OOBJ, NEW_IOBJ)->>OBJ:
                                  #  - changes BOOL: false if nothing changed, i.e. no need for update|replace
                                  #  - replaces 'NRPROP'_ARR:
                                  #     - that changed and require a `replace`, i.e. cannot be updated in-place
                                  #     - if empty, an update is done instead
                                  #  - stables 'NRPROP'_ARR: that are "stable", i.e. always readonly after creation and cannot be updated
                                  #  - deleteBeforeReplace BOOL: override NCROPTS.deleteBeforeReplace
                                  #Computes diff on NRPROPS during update|replace

NVPROV.create                     #FUNC(IOBJ)->>OBJ:
                                  #  - id 'REZ_ID'
                                  #  - outs OOBJ
                                  #Called on REZ creation.
                                  #If fails, must not have been provisioned, i.e. must potentially rollback
NVPROV.read                       #FUNC('REZ_ID', [, OOBJ])->>OBJ:
                                  #  - id 'REZ_ID'
                                  #  - props OOBJ
                                  #Called on REZ read.
                                  #OOBJ in argument can be partial, but must be full in return value
NVPROV.update                     #FUNC('REZ_ID', OLD_OOBJ, NEW_IOBJ)->>OBJ:
                                  #  - outs OOBJ
                                  #Called on REZ update (not replace).
NVPROV.delete                     #FUNC('REZ_ID', OOBJ)->>
                                  #Called on REZ delete


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROVIDER PLUGIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NVDPROV                           #"Plugin resource provider". Custom PROV meant to be shared through a PLUGIN
                                  #Same as NVPROV except:
                                  #  - some additional members
                                  #  - additional 'URN' argument after 'REZ_ID' (if none, at beginning)
N.provider.main
 (NVDPROV, STR_ARR)->>            #

NVDPROV.construct                 #FUNC('REZ', 'RTYPE', {{IOBJ}}, NKROPTS)->>OBJ:
                                  #  - urn {'URN'}
                                  #  - state {{IOBJ}}
                                  #Called on new REZ(...)
NVDPROV.invoke                    #FUNC('PFUNC', NPARGS)->>OBJ:
                                  #  - outputs VAL
                                  #  - failures NFAILURE_ARR
                                  #Called on MODULE.PFUNC(...)
NVDPROV.call                      #FUNC('PFUNC', {{NPARGS}})->>OBJ:
                                  #  - outputs }VAL{
                                  #  - failures NFAILURE_ARR
                                  #Called on MODULE.PFUNCOutput(...)

NVDPROV.schema                    #'JSON'
NVDPROV.version                   #'VERSION'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROVIDER FUNCTION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PFUNC                             #Static FUNC attached to a MODULE
                                  #As opposed to REZ instance|static methods

MODULE.PFUNC(NPARGS, NIOPTS)->>VAL
MODULE.PFUNCOutput
 ({{NPARGS}}, NIOPTS)->}VAL{      #Call a PFUNC
fn::invoke(OPTS)->VAL             #Same in YAML. OPTS:
                                  #  - function 'PFUNC'
                                  #  - arguments NPARGS|{{NPARGS}}
                                  #  - options IOPTS

PARGS                             #Any OBJ

[N]IOPTS.provider                 #{PROV}|NPROV (def: guessed)
[N]IOPTS.version                  #'PROV_VERSION' (def: guessed)
[N]IOPTS.parent                   #{REZ}|NREZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PACKAGE MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                           #Package distributing a PROV
                                  #'pulumi' is default one

XREZ.package                      #'PACKAGE'

pulumi convert                    #Convert a PROGRAM from one runtime to another
--from                            #STR (def: 'yaml'). Converter plugin.
--language                        #STR. Language plugin
--mappings                        #STR
--generate-only                   #Do not install dependencies
--out                             #'DIR' (def: '.')

pulumi package gen-schema PACKAGE #Get a PACKAGE schema.json
                                  #PACKAGE can be name|URL

pulumi package gen-sdk STR        #Generate a PACKAGE SDK
                                  #STR can be:
                                  #  - 'PACKAGE'
                                  #  - PATH to schema.json
                                  #  - PATH to plugin binary
--out|-o                          #'DIR' (def: './sdk')
--language                        #'RUNTIME' or 'all' (def)

pulumi schema check               #Validate a PACKAGE schema


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PACKAGE MODULE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE                            #Namespace inside a PACKAGE
                                  #Usually corresponding to a specific sets of REZs
                                  #  - e.g. S3 inside AWS PACKAGE
                                  #Correlates to how REZs within that MODULE are imported within that PACKAGE
                                  #  - e.g. kubernetes:apps/v1:Deployment is import('@pulumi/kubernetes').apps.v1.Deployment
                                  #'pulumi' is default one
                                  #'index' means there is only a single top-level MODULE

XREZ.module                       #'MODULE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGIN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLUGIN                            #Binary for a PACKAGE or a RUNTIME
                                  #Installed in same directory as main binary

PHOME_DIR/plugins/                #Installation directory of PLUGINs

PTYPE                             #One of:
                                  #  - 'language':
                                  #     - RUNTIME
                                  #     - called pulumi-language-RUNTIME
                                  #     - in default install: nodejs|go|python|dotnet|java|yaml
                                  #  - 'resource':
                                  #     - PROV
                                  #     - called pulumi-resource-pulumi-RUNTIME
                                  #  - 'analyzer':
                                  #     - RUNTIME for POLICY_PACKs
                                  #     - called pulumi-analyzer-policy[-RUNTIME]
PVERSION                          #Plugin version
PVERSIONR                         #Plugin version range

pulumi plugin install             #Install a PLUGIN
 [PTYPE PLUGIN [PVERSION]]        #Def PTYPE|PLUGIN: guessed for current PROJECT

--exact                           #Pin PVERSION, instead of allowing any later one
--reinstall                       #Re-install existing PLUGIN

--file|-f                         #PATH to PLUGIN FILE|DIR|ARCHIVE, instead of downloading it
--server                          #'SERVER_URL' where to download PLUGINs
--checksum                        #'SHA2526' of PLUGIN archive

NWORKSPACE.installPlugin
 ('PLUGIN', 'PVERSION',
 'PTYPE')->>                      #
NWORKSPACE.installPluginFromServer
 ('PLUGIN', 'PVERSION',
 'SERVER_URL')->>                 #

pulumi plugin ls                  #List plugins
--project|-p                      #'PROJECT' (def: current one)

NWORKSPACE.listPlugins()
 ->NPLUGIN_INFO_ARR               #

pulumi plugin rm                  #Uninstall a PLUGIN
 [PTYPE PLUGIN [PVERSION[R]]]     #Def PTYPE|PLUGIN: cache only
                                  #Def PVERSION[R]: all
--all|-a                          #Remove all PLUGINs

NWORKSPACE.removePlugin
 ('PLUGIN', 'PVERSIONR',
 'PTYPE')->>                      #

PROJECT.plugins.PTYPE             #PLUGIN_INFO
PLUGIN_INFO.kind                  #'PTYPE'
[N]PLUGIN_INFO.name               #'PLUGIN'
[N]PLUGIN_INFO.version            #'PVERSION'
[N]PLUGIN_INFO.path               #'DIR'
NPLUGIN_INFO.serverURL            #'SERVER_URL'
NPLUGIN_INFO.size                 #NUM
NPLUGIN_INFO.installTime          #DATE
NPLUGIN_INFO.lastUsedTime         #DATE

[N]ROPTS|[N]IOPTS                 #'URL' of the PROV PLUGIN
 .pluginDownloadURL               #Not necessary if PLUGIN distributed on pulumi.com


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORG                               #Set of TEAMs and PROJECTs
                                  #For self-managed BACKEND, always 'organization'
                                  #Not with free plan
                                  #Only 1 unless enterprise plan
gitHub:owner                      #'ORG' TAG

ORG_URL                           #API_URL/orgs/ORG

pulumi org set-default ORG        #Set current ORG
pulumi login --default-org        #'ORG'

pulumi org get-default
getOrganization()->'ORG'          #

pulumi org                        #Print current ORG and BACKEND

POST STACK_URL/transfer           #Req: 'ORG'
                                  #Res: empty
                                  #Change a STACK's ORG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEAM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEAM                              #Sets of MEMBERs
                                  #Not for free plan
                                  #Max 10 MEMBERs and 1 TEAM unless enterprise plan

TEAMS_URL                         #ORG_URL/teams

GET TEAMS_URL                     #Req: empty
                                  #Res: teams XTEAM_ARR
POST TEAMS_URL/TEAM_KIND          #Req: XTEAM
                                  #  - not kind|userRole
                                  #Res: XTEAM
PATCH TEAMS_URL/TEAM              #Req: OBJ
                                  #  - memberAction 'add|remove'
                                  #  - member 'MEMBER'
                                  #Res: empty
PATCH TEAMS_URL/TEAM              #Req: OBJ:
                                  #  - addStackPermission OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #     - permission 101 (read), 102 (edit) or 103 (admin) ("RBAC")
                                  #  - removeStack OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #Res: empty
DELETE TEAMS_URL/TEAM             #Req: empty
                                  #Res: empty

XTEAM.kind                        #TEAM_KIND. Either 'pulumi' or 'github'
XTEAM.name                        #'TEAM'
XTEAM.displayName                 #STR
XTEAM.description                 #STR
XTEAM.userRole                    #STR
XTEAM.members                     #XUSER_ARR

pulumi stack init --teams         #'TEAM'_ARR with read|write permissions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MEMBER                            #End user

MEMBERS_URL                       #ORG_URL/members

GET MEMBERS_URL                   #Req: OBJ
                                  #  - type 'backend'
                                  #Res: members XMEMBER_ARR
POST MEMBERS_URL/MEMBER           #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
PATCH MEMBERS_URL/MEMBER          #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
DELETE MEMBERS_URL/MEMBER         #Req: empty
                                  #Res: empty

XMEMBER.role                      #Either:
                                  #  - 'member': read|write STACKs they have permissions on
                                  #  - 'admin': also read|write ORG|TEAM|MEMBER|POLICY_PACK
                                  #  - 'billingManager'
                                  #Only if team plan
                                  #Only 1 admin|billingManager unless enterprise plan
XMEMBER.virtualAdmin              #BOOL
XMEMBER.knownToPulumi             #BOOL

XMEMBER.user                      #XUSER
XUSER.name                        #'USER'
vcs:owner                         #'GITHUB_USER'
XUSER.githubLogin                 #'GITHUB_USER'
XUSER.avatarUrl                   #'URL'
XUSER.email                       #'EMAIL'
vcs|gitHub:repo                   #'REPO'
vcs:kind                          #STR

pulumi whoami                     #Prints current 'USER'
--verbose|-v                      #Also prints BACKEND
NWORKSPACE.whoAmI()->>NWHO        #
NWHO.organizations                #'ORG'_ARR
NWHO.url                          #'URL'
NWHO.user                         #'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCESS TOKEN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCESS_TOKEN                      #Token used for authorization

TEAM|ORGANIZATION ACCESS TOKEN ==>#ACCESS_TOKEN shared between all MEMBERs of a TEAM|ORG
                                  #Only with enterprise plan

TOKENS_URL                        #API_URL/user/tokens

GET TOKENS_URL                    #Req: empty
                                  #Res: tokens XTOKEN_ARR
POST TOKENS_URL                   #Req: XTOKEN
                                  #  - only description
                                  #Res: XTOKEN
DELETE TOKENS_URL/TOKEN_ID        #Req: empty
                                  #Res: empty

XTOKEN.id                         #'TOKEN_ID'
XTOKEN.tokenValue                 #'ACCESS_TOKEN'
XTOKEN.description                #STR
XTOKEN.lastUsed                   #DATE_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization:
 token ACCESS_TOKEN [C]           #
ENVVAR PULUMI_ACCESS_TOKEN        #'ACCESS_TOKEN'

pulumi login [BACKEND]            #Login
                                  #Prompt for ACCESS_TOKEN if no ENVVAR PULUMI_ACCESS_TOKEN
--insecure                        #No SSL

PHOME_DIR/credentials.json        #Local cache for ACCESS_TOKENs
PHOME_DIR/config.json             #Local cache for BACKEND settings

pulumi login|logout
--cloud-url                       #'BACKEND'
--local                           #Same as using BACKEND file://~

pulumi logout [BACKEND]           #Logout
                                  #Def BACKEND: current one
--all                             #Logout of all backends


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BACKEND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BACKEND                           #API persisting STATE, UPDATEs and POLICY_PACKs
                                  #Also include ORG|TEAM|MEMBER and login|auth
                                  #Unlike PROVs, does not iteractive with cloud platform|libraries

DEPLOYMENT ENGINE ==>             #Computes the provisioning based on the STATE and PROVs
                                  #Part of the CLI itself

[N]PROJECT.backend.url            #'BACKEND' among:
ENVVAR PULUMI_BACKEND_URL         #  - default: Pulumi Cloud
                                  #  - 's3://BUCKET' (AWS S3)
                                  #  - 'gs://BUCKET' (GCP GCS)
                                  #  - 'azblob://BUCKET' (Azure Blob)
                                  #  - 'file://PATH' (local)
                                  #  - URL (self-hosted)
                                  #Not fully documented here yet

SELF-MANAGED BACKEND ==>          #When not using Pulumi Cloud. Does not have:
                                  #  - auth
                                  #  - encryption in transit and at rest
                                  #  - UPDATE history
                                  #  - POLICY_PACKs
                                  #  - concurrency-safe locking
                                  #  - rollback|recovery in case of crash

SELF-HOSTED BACKEND ==>           #When hosting Pulumi Cloud ourselves
                                  #Only with business critical plan
pulumi state upgrade              #Migrate to latest version of current self-hosted BACKEND

pulumi console                    #Open web page to Pulumi Console


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          POLICY PACK          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi policy new                 #Create new POLICY_PACK
--dir
--force|-f
--generate-only|-g                #Like pulumi new ...

pulumi policy rm
 ORG/POLICY_PACK                  #Remove a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'all'

pulumi policy ls                  #List all POLICY_PACKs

pulumi policy publish [ORG]       #Publish a POLICY_PACK to the BACKEND
                                  #Def ORG: current one
                                  #Must first be disabled

pulumi policy disable
 ORG/POLICY_PACK                  #Disable a POLICY_PACK
--version                         #'POLICY_PACK_VERSION' (def: all)

pulumi policy enable
 ORG/POLICY_PACK                  #Enable a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'latest'

pulumi preview|up|watch ...
SOPTS.policyPacks                 #STR_ARR
--policy-pack                     #POLICY_PACK_ARR

XUPDATE.policyPacks               #XPOLICY_PACK_ARR
XPOLICY_PACK.name                 #'POLICY_PACK'
XPOLICY_PACK.displayName          #STR
XPOLICY_PACK.version              #NUM
XPOLICY_PACK.versionTag           #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         POLICY CONFIG         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS.policyPackConfigs           #STR_ARR
pulumi policy
 enable|validate-config ...
--config
pulumi preview|up|watch ...
--policy-pack-config              #'PATH' to POLICY_PACK config

XPOLICY_PACK.config               #OBJ

pulumi policy validate-config
 ORG/POLICY_PACK
 POLICY_PACK_VERSION              #Validate a POLICY_PACK config


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         POLICY GROUP          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi policy disable|enable
--policy-group                    #POLICY_GROUP (def: default one)

pulumi policy group ls            #List all POLICY_GROUPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOGS ACTIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS.logFlow
pulumi ... --logflow              #BOOL

SOPTS.logToStdErr
pulumi ... --logtostderr          #BOOL. Log to stderr instead of to files

SOPTS.logVerbosity
pulumi ... --verbose|-v           #NUM. Verbose logging

SOPTS.debug
pulumi destroy|import|preview
 |refresh|up|watch
--debug|-d                        #Debug logging

SOPTS.tracing
pulumi ... --tracing              #'URI' (including file: URI) where to send traces


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LOGS RESOURCES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi logs                       #Show RTYPE-specific logs for a REZ
--resource|-r                     #'[RTYPE::]REZ'|'URN' (def: all)
--follow|-f                       #Print in realtime
--since                           #'NUMs|m|h' (def: '1h')

N.log.LEVEL('MESSAGE'             #Like console.LEVEL(...) but shown with pulumi ..., pulumi logs and Pulumi Cloud
 [, NREZ][, NUM][, BOOL])->>      #LEVEL can be debug|info|warn|error
                                  #NUM is stream ID, to group logs
                                  #If BOOL true, ephemeral logs, i.e. not persisted
N.log.hasErrors()->BOOL           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          LOGS AUDIT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUDIT_LOGS_URL                    #ORG_URL/auditlogs

GET AUDIT_LOGS_URL                #Req: OBJ
                                  #  - startTime DATE_NUM
                                  #  - userFilter 'USER'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR
                                  #Only with enterprise plan
GET AUDIT_LOGS_URL/export         #Req: OBJ:
                                  #  - startTime|userFilter: like above
                                  #  - format 'csv' (def) or 'cef' ("common event format")
                                  #Res: auditLogEvents XAUDIT_LOG_ARR, but as CSV|CEF
                                  #Can automate sending it to S3
                                  #Only with business critical plan

XAUDIT_LOG.timestamp              #DATE_TIME
XAUDIT_LOG.sourceIP               #'IP'
XAUDIT_LOG.event                  #'MESSAGE'
XAUDIT_LOG.description            #STR
XAUDIT_LOG.user                   #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSIGHTS SEARCH        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH_REZ_URL                    #ORG_URL/search/resources


GET SEARCH_REZ_URL                #Req: XSEARCH_REZ_REQ
                                  #Res: XREZ_INFO
GET SEARCH_REZ_URL/export         #Req: XSEARCH_REZ_REQ
                                  #  - no facet
                                  #Res: XREZ_ARR, as CSV
                                  #Only with enterprise plan

XSEARCH_REZ_REQ.query             #'TERM ...'
                                  #TERM is [TYPE:][OP][-]["]STR["]
                                  #  - partial match unless "
                                  #  - TYPE: any XREZ.TYPE
                                  #  - OP: >=|>|<|<=
                                  #     - or [START TO END] as STR
                                  #  - - is not
                                  #Can use OR AND ( )
AI ASSIST ==>                     #Use natural language query to return the right XSEARCH_REQ_REQ.query
                                  #Only in UI
XSEARCH_REZ_REQ.sort              #'VARR'_ARR
XSEARCH_REZ_REQ.asc               #BOOL

XREZ_INFO.resources               #XREZ_ARR
                                  #Max 2e3 length unless enterprise plan

XSEARCH_REZ_REQ.facet             #'VARR'_ARR
XREZ_INFO.aggregations            #XAGGR
XAGGR.results                     #XAGGR_RESULT_ARR
XAGGR_RESULT.name                 #STR
XAGGR_RESULT.count                #NUM
XAGGR.others                      #NUM

XREZ.created                      #'DATE'
XREZ.modified                     #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSIGHTS COUNT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ_URL                           #ORG_URL/resources

GET REZ_URL/summary               #Req: OBJ
                                  #  - granularity 'hourly|daily|weekly|monthly|yearly'
                                  #  - lookbackDays NUM
                                  #Res: summary REZ_COUNT_ARR

REZ_COUNT.resources               #NUM
REZ_COUNT.year|month|weekNumber
 |day|hour                        #NUM


