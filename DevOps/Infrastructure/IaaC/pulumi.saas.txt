
          
   PULUMI  
          



TODO:
  - https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/runtime
  - https://www.pulumi.com/registry/packages/aws/api-docs/

VERSION ==>                       #3.63.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             YAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM                           #YAML


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/pulumi                    #Node.js client
N.VAR                             #Named export VAR
N*                                #Node.js types

CLASS.isInstance(VAL)->BOOL       #Like VAL instanceof CLASS, but cross-realm
                                  #Available with most CLASSes

>VAL                              #Means PROMISE_VAL
[>]VAL                            #Means [PROMISE_]VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


X*                                #REST API request|response

API_URL                           #https://api.pulumi.com/api

Accept: application/vnd.pulumi+8
 [C]                              #
Content-Type: application/json [C]#

REQUEST ==>                       #With POST|PUT|PATCH, JSON request body
                                  #With GET|DELETE, query variables

PAGINATION ==>                    #Some endpoints are always paginated:
                                  #  - Request OBJ: continuationToken=STR
                                  #  - Response OBJ: continuationToken STR
                                  #Others have different way:
                                  #  - Request OBJ: continue STR, size NUM, page NUM
                                  #  - Response OBJ: total NUM, pagination.previous|next|continue STR
                                  #Others are only paginated on-demand:
                                  #  - Request OBJ: pageSize NUM, page NUM
                                  #  - Response OBJ: itemsPerPage NUM, total NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi --VAR                      #If type not documented, means BOOL with default false

pulumi ...  --non-interactive     #
pulumi cancel|destroy|import|new
 |plugin rm|policy rm|refresh
 |stack rm|state|up
--yes|-y
ENVVAR PULUMI_SKIP_CONFIRMATIONS  #If 'true', no confirmations
ENVVAR PULUMI_SKIP_UPDATE_CHECK   #If 'true', do not abort when version of Pulumi is not latest

pulumi ... --color                #'auto' (def), 'always', 'never' or 'raw'
ENVVAR NO_COLOR                   #

ENVVAR PULUMI_PREFER_YARN         #If 'true', use yarn instead of npm

pulumi ...
--disable-integrity-checking      #

pulumi ... --emoji|-e             #Allow emojis in the CLI output

pulumi ... --profiling            #STR. Write profiling files to FILENAME.PID.cpu|mem|trace

pulumi about|config|destroy|logs
 |plugin ls|policy [group] ls
 |preview|refresh|stack ls
 |stack output|stack tag ls|up
 |whoami
--json|-j                         #JSON output

pulumi destroy|import|preview
 |refresh|up
--diff                            #Show change as diff
--suppress-outputs                #Do not show OUTPUTs
--suppress-permalink              #If 'true', do no show state permalinks

pulumi destroy|import|preview
 |refresh|up|watch
--parallel|-p                     #NUM (def: unlim). Operates on NUM REZs in parallel
--message|-m                      #'MESSAGE' describing the operation
--debug|-d                        #Debug logging

pulumi destroy|import|refresh|up
--skip-preview|-f                 #Do not compute a preview first

pulumi destroy|preview|up|watch
--refresh|-r                      #If 'true', refresh STACK state first
--show-config                     #

pulumi destroy|preview
 |state delete|up
--target-dependents               #Also operate on dependent REZs

pulumi destroy|preview|refresh
 |up|watch
--show-replacement-steps          #Show replacement as two steps (creation then deletion) instead of one
--show-sames                      #Show REZs that won't change

pulumi destroy|preview|refresh|up
--target|-t                       #'URN'. Only operate specific REZa, including its child REZs
                                  #Can use wildcards *|**

pulumi new|preview|up|watch
--config|-c                       #STR_ARR
--config-path                     #STR_ARR

pulumi about|cancel|config|console
 |destroy|import|logs|new|preview
 |refresh|stack|state|up|watch
--stack|-s                        #'STACK' (def: current)

pulumi config|destroy|import|logs
 |preview|refresh|up|watch
--config-file                     #'PATH' (def: guessed)

pulumi about                      #Print:
                                  #  - current OS
                                  #  - pulumi version
                                  #  - current 'PROJECT|STACK|BACKEND'
--transitive|-t                   #Include transitive dependencies

pulumi cancel [STACK]             #Cancel current update
                                  #Does not rollback

pulumi console                    #Open web page to Pulumi Console

pulumi convert                    #Convert a PROGRAM from one runtime to another
--from                            #STR (def: 'yaml'). Converter plugin.
--language                        #STR. Language plugin
--mappings                        #STR
--generate-only                   #Do not install dependencies
--out                             #'DIR' (def: '.')

pulumi destroy                    #Destroy all REZs in a STACK
--exclude-protected               #Keep protected REZs
--remove                          #Also destroy STACK itself and its config file

pulumi gen-completion             #Print CLI completion script

pulumi import TYPE NAME ID        #Print declaration to add a REZ not currently managed by Pulumi

--generate-code                   #BOOL. If true (def), print REZ declaration
--out|-o                          #'DIR'

--protect                         #BOOL. If true (def), make REZs protected

--from                            #STR. Converter plugin.

--provider                        #NAME='URN' of PROV
--parent                          #NAME='URN' of parent
--properties                      #'PROP,...'

-f                                #'PATH.json' to import multiple resources.
                                  #OBJ:
                                  #  - nameTable.NAME 'URN': of PROV|parent
                                  #  - resources IMPORT_REZ_ARR
IMPORT_REZ.type                   #'RTYPE'
IMPORT_REZ.name                   #'REZ'
IMPORT_REZ.id                     #STR
IMPORT_REZ.parent                 #'REZ'
IMPORT_REZ.provider               #'REZ'
IMPORT_REZ.version                #STR
IMPORT_REZ.properties             #'PROP'_ARR

pulumi logs                       #Show PROV-specific logs for a REZ
--resource|-r                     #'[RTYPE::]REZ'|'URN' (def: all)
--follow|-f                       #Print in realtime
--since                           #'NUMs|m|h' (def: '1h')

pulumi new [TEMPLATE]             #Create a new PROJECT + STACK from a TEMPLATE
                                  #Def TEMPLATE: interactive choice
                                  #TEMPLATE can also be a:
                                  #  - PATH
                                  #  - URL to GitHub|GitLab|BitBucket repository|branch
--list-templates|-l               #List TEMPLATEs then exit

pulumi [policy] new ...
--offline|-o                      #Only use locally cached TEMPLATEs
--dir                             #'DIR' where to generate (def: '.')
--force|-f                        #Override existing files
--generate-only|-g                #Do not create a STACK, save config nor install dependencies

pulumi package gen-schema PACKAGE #Get a PACKAGE schema.json
                                  #PACKAGE can be name|URL

pulumi package gen-sdk STR        #Generate a PACKAGE SDK
                                  #STR can be:
                                  #  - 'PACKAGE'
                                  #  - PATH to schema.json
                                  #  - PATH to plugin binary
--out|-o                          #'DIR' (def: './sdk')
--language                        #'RUNTIME' or 'all' (def)

pulumi plugin install             #Install a PLUGIN
 [KIND NAME [VERSION]]            #Def KIND|NAME: guessed for current PROJECT

--exact                           #Pin VERSION, instead of allowing any later one
--reinstall                       #Re-install existing PLUGIN

--file|-f                         #PATH to PLUGIN FILE|DIR|ARCHIVE, instead of downloading it
--server                          #'URL' where to download PLUGINs
--checksum                        #'SHA2526' of PLUGIN archive

pulumi plugin rm                  #Uninstall a PLUGIN
 [KIND NAME [VERSION[_RANGE]]]    #Def KIND|NAME: cache only
                                  #Def VERSION: all
--all|-a                          #Remove all PLUGINs

pulumi plugin ls                  #List plugins
--project|-p                      #'PROJECT' (def: current one)

pulumi policy new [TEMPLATE]      #Create new POLICY_PACK
                                  #TEMPLATE: like pulumi new ...

pulumi policy rm
 ORG/POLICY_PACK                  #Remote a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'all'

pulumi policy ls                  #List all POLICY_PACKs
pulumi policy group ls            #List all POLICY_GROUPs

pulumi policy publish [ORG]       #Publish a POLICY_PACK to the BACKEND
                                  #Def ORG: current one
                                  #Must first be disabled

pulumi policy disable
 ORG/POLICY_PACK                  #Disable a POLICY_PACK
--version                         #'POLICY_PACK_VERSION' (def: all)

pulumi policy disable|enable
--policy-group                    #POLICY_GROUP (def: default one)

pulumi policy enable
 ORG/POLICY_PACK                  #Enable a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'latest'

pulumi policy enable
 |validate-config ...
--config                          #'PATH' to POLICY_PACK config

pulumi policy validate-config
 ORG/POLICY_PACK
 POLICY_PACK_VERSION              #Validate a POLICY_PACK config

pulumi preview                    #Show a preview of `pulumi up`

pulumi up [TEMPLATE[_URL]]        #Create|update REZs in a STACK
--show-full-output                #BOOL. If true (def), show OUTPUTs in full

pulumi preview|up ...
--replace                         #Like --target, but for replacements
--target-replace                  #Combine --target + --replace

--show-reads                      #Show REZs being read, not only ones in the STACK

pulumi preview|up|watch ...
--policy-pack                     #POLICY_PACK_ARR
--policy-pack-config              #'PATH' to POLICY_PACK config

pulumi preview|refresh|up ...
--expect-no-changes               #Fail if there are any changes

pulumi refresh                    #Refresh REZs in a STACK
--import-pending-creates          #'URN'_ARR of PROVs of pending creates
--clear-pending-creates           #Remove all pending creates from the state
--skip-pending-creates            #Do not import pending creates in interactive mode

pulumi version                    #Print Pulumi version

pulumi watch                      #Update REZs in watch mode
--path                            #'DIR|FILE'_ARR to watch (def: '.')

pulumi schema check               #Validate a PACKAGE schema

pulumi state rename URN REZ       #Rename a REZ

pulumi state unprotect URN        #Make a REZ not protected anymore
--all                             #Apply to all REZs

pulumi state delete URN           #Delete a REZ from the STACK
--force                           #Also delete protected REZs

pulumi state upgrade              #Migrate to latest version of current BACKEND

pulumi stack ...                  #
--show-name                       #Print 'STACK' then exit

--show-ids|-i                     #Show REZs IDs
--show-urns|-u                    #Show REZs URNs

pulumi stack export               #Serialize STACK
--version                         #STR (def: latest)

pulumi stack export|import        #
--file                            #'PATH' of serialized STACK (def: stdout)

pulumi stack import               #Parse STACK, adding it
--force|-f                        #Allow apparent errors

pulumi stack graph [PATH]         #Visualize STACK dependencies as a DOT graph
                                  #Def PATH: stdout
--short-node-name                 #Label each node with its 'REZ'
--ignore-dependency|parent-edges  #Skip edges related to dependencies|parents
--dependency|parent-edge-color    #'#COLOR' (def: '#246C60|#AA6639')

pulumi stack history              #Print STACK previous upates
--full-dates                      #Show absolute dates, not relative
--page                            #NUM (def: 1), for pagination
--page-size                       #NUM (def: 10), for pagination

pulumi stack tag get TAG          #

pulumi stack tag set TAG VAL      #

pulumi stack tag ls               #

pulumi stack tag rm TAG           #

pulumi stack init [ORG/]STACK     #Create an empty STACK
                                  #Def ORG: current one
--copy-config-from                #'STACK2'. Copy its config
--no-select                       #Do not select the STACK
--teams                           #'TEAM'_ARR with read|write permissions

pulumi stack ls                   #Print all STACKs of current PROJECT
--all|-a                          #Print for all PROJECTs
--organization|-o                 #'ORG'
--project|-p                      #'PROJECT'
--tag|-t                          #'TAG=VAL' filter

pulumi stack output [PROP]        #Print an OUTPUT value
                                  #If no PROP, prints all OUTPUT available
--shell                           #Print as shell script instead

pulumi stack rename STACK         #Rename a STACK

pulumi stack rm [STACK]           #Remove an empty STACK and its config
--preserve-config                 #Do not delete the STACK config
--force|-f                        #Delete even if STACK has REZs

pulumi stack select [STACK]       #Select the STACK, i.e. make it the current one
                                  #Def STACK: interactive prompt
--create|-c                       #Upserts

pulumi stack unselect             #No more current STACK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IO               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPUTS ==>                       #Async|dynamic value, similar to a PROMISE, as a return value
                                  #Resolved when provisioning a STACK

OUTPUT                            #
NOUTPUT                           #Wraps a VAL, including any OBJ|ARR deeply

INPUTS ==>                        #Async|dynamic value, similar to a PROMISE, used as function argument
                                  #In YAML, called "expression"

INPUT                             #Can use:
                                  #  - VAL as is
                                  #  - { fn::FUNC }
                                  #  - ${VARR} to insert an OUTPUT
NINPUTS                           #OBJ with NINPUT values
NINPUT                            #Can use:
                                  #  - VAL as is
                                  #  - PROMISE_VAL
                                  #  - }VAL{
                                  #Can be done deeply, including any OBJ|ARR deeply

}TYPE{                            #Notation for a [N]OUTPUT of TYPE
{TYPE}                            #Notation for a [N]INPUT of TYPE
}{TYPE}{                          #Notation for {TYPE} + }TYPE{

}}TYPE{{
{{TYPE}}                          #Like above, but top-level OBJ|ARR is normal (not dynamic)

PROGRAM.outputs.KEY               #{VAL}
                                  #Values available as OUTPUTs for other PROGRAMs
NSTACK.outputs()->>NOUTPUT_MAP    #
NOUTPUT_MAP.KEY                   #NOUTPUT_VAL
NOUTPUT_VAL.value                 #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IO YAML            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


${VARR}                           #Insert a }VAL{ in a {VAL}
                                  #Replaced by PROGRAM.config|variables|resources.VARR or GOUTPUTS.VARR
                                  #Can be part of a STR if value is a STR itself
                                  #VARR:
                                  #  - VAR.VAR2
                                  #  - VAR["VAR2"]
                                  #     - same as VAR.VAR2 but escapes
                                  #     - must \-escape "
                                  #  - VAR[NUM]
$${...}                           #Escape ${...}

GOUTPUTS                          #Values available as OUTPUTs
PROGRAM.variables.KEY             #{VAL}

{ fn::FUNC: {VAL|ARR} }           #"Built-in function"
                                  #To use in INPUT, substituted by its return value
                                  #{VAL|ARR} are arguments

fn::select(NUM, ARR)->VAL         #ARR[NUM] (0-based)

fn::join('DELIM', ARR)->STR       #Like ARR.join('DELIM')
fn::split('DELIM', STR)->ARR      #Like STR.split('DELIM')

fn::toBase64(STR)->STR            #
fn::fromBase64(STR)->STR          #

fn::toJSON(VAL)->'JSON'           #

fn::readFile('PATH')->'CONTENT'   #'PATH' can start with ../

fn::invoke(OBJ)->STR              #Call a package FUNC. OBJ:
                                  #  - function STR
                                  #  - arguments.ARG {VAL}
                                  #  - options IOPTS
[N]IOPTS.parent                   #{REZ}|NREZ
[N]IOPTS.provider                 #{PROV}|NPROV
[N]IOPTS.version                  #STR
[N]IOPTS.pluginDownloadURL        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IO NODE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


}VAL{.get()->VAL                  #
}VAL{.apply
 (FUNC(VAL)->>VAL2|}VAL2{)
 ->}VAL3{                         #

output({VAL})->}VAL{              #
Output.create({VAL})->}VAL{       #

all({VAL}_ARR)->}ARR{             #
allAliases({'URN'|ALIAS}_ARR, STR,
 'RTYPE', NREZ, STR)->}'URN'{_ARR #

concat({VAL}_ARR)->}STR{          #
interpolate`...${{VAL}}...`       #Same as concat() but as a `...`

jsonParse(...)
jsonStringify(...)                #Like JSON.parse|stringify(...) but using {VAL} and returning }VAL{

N.iterable.groupBy({ARR},
 FUNC(VAL)->{[, STR, VAL]})
 ->}OBJ{                          #OBJ values are ARR

N.iterable.toObject(...)          #Same args as groupBy()
                                  #OBJ values are not ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM.config                    #PCONFIG

PCONFIG.type                      #'String|Number' or 'List<String|Number>'
PCONFIG.default                   #VAL

new Config(['PCONFIG'])           #NPCONFIG
NPCONFIG.name                     #'PCONFIG'

NPCONFIG.get
 ('KEY'[, NCSOPTS])[->VAL]        #
NCSOPTS.allowedValues             #ARR
NCSOPTS.min|maxLength             #NUM
NCSOPTS.pattern                   #REGEXP|'REGEXP'

NPCONFIG.getNumber
 ('KEY'[, NCNOPTS])[->NUM]        #
NCNOPTS.min|max                   #NUM

NPCONFIG.getBoolean('KEY')[->BOOL]#
NPCONFIG.getObject('KEY')[->VAL]  #

NPCONFIG.require*(...)->VAL       #Same as NPCONFIG.get*(...) but throw instead of returning undefined

NUPDATE_SUMMARY.config            #NPCONFIG_MAP
NPCONFIG_MAP.KEY                  #NPCONFIG_VAL
NPCONFIG_VAL.value                #STR

NSTACK.getAllConfig()
 ->>NPCONFIG_MAP                  #
NSTACK.getConfig('KEY')
 ->>NPCONFIG_VAL                  #
NSTACK.refreshConfig()
 ->>NPCONFIG_MAP                  #
NSTACK.removeAllConfig(STR_ARR)
 ->>                              #
NSTACK.removeConfig(STR)->>       #
NSTACK.setAllConfig
 (NPCONFIG_MAP)->>                #
NSTACK.setConfig
 (STR, NPCONFIG_VAL)->>           #

pulumi config                     #
--path                            #Allow using VARR

pulumi config get VARR            #

pulumi config set VARR [VAL]      #Def VAL: stdin
--plaintext|secret                #Whether to encrypt or not

pulumi config set-all
--plaintext|secret VARR=VAL       #

pulumi config rm VARR             #

pulumi config rm-all VARR...      #

pulumi config cp VARR             #
--dest|-d                         #'STACK'

pulumi config refresh             #
--force|-f                        #Do not abort if config file exists


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSETS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.asset                           #NASSETM

ASSET                             #File

fn::stringAsset('CONTENT')
new NASSETM
 .StringAsset([>]'CONTENT')       #[N]STRING_ASSET. Child of ASSET
NSTRING_ASSET.text                #>'CONTENT'

fn::fileAsset('PATH')
new NASSETM.FileAsset([>]'PATH')  #[N]FILE_ASSET. Child of ASSET
NFILE_ASSET.path                  #>'PATH'

fn::remoteAsset('URI')
new NASSETM.RemoteAsset([>]'URI') #[N]REMOTE_ASSET. Child of ASSET
                                  #Can use HTTP[S] or file:
NREMOTE_ASSET.uri                 #>'URI'

ARCHIVE                           #Collection of ASSETs|ARCHIVEs

fn::assetArchive(ASSETS)
new NASSETM
 .AssetArchive([>]NASSETS)        #[N]ASSET_ARCHIVE. Child of ARCHIVE
[N]ASSETS                         #OBJ: KEY [N]ASSET|[N]ARCHIVE
NARCHIVE.assets                   #>NASSETS

fn::fileArchive('PATH')
new NASSETM.FileArchive([>]'PATH')#[N]FILE_ARCHIVE. Child of ARCHIVE
                                  #Either 'DIR' or PATH to *.tar|tgz|tar.gz|zip|jar
NFILE_ARCHIVE.path                #>'PATH'

fn::remoteArchive('URI')
new NASSETM                       #[N]REMOTE_ARCHIVE. Child of ARCHIVE
 .RemoteArchive([>]'URI')         #Must be *.tar|tgz|tar.gz|zip|jar
NREMOTE_ARCHIVE.uri               #>'URI'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ                               #Specific infrastructure resource, e.g. S3 Bucket
'REZ'                             #REZ name
                                  #Can be anything
RTYPE                             #REZ type
                                  #Namespaced with colons, e.g. 'pulumi:providers:aws:...'
'URN'                             #RTYPE + 'REZ' unique identifier

[N]RPROPS                         #RTYPE-specific options
[N]ROPTS                          #RTYPE-agnostic options

PROGRAM.resources.REZ             #REZ
REZ.type                          #'RTYPE'
REZ.properties.RPROP              #{VAL}
REZ.defaultProvider               #BOOL

new N.Resource('RTYPE', 'REZ',
 BOOL, {{NRPROPS}}, NROPTS, BOOL2,
 BOOL3)                           #NREZ
NREZ.urn                          #}'URN'{

new N.ComponentResource('TYPE',
 'REZ', {{NRPROPS}}, NKROPTS,
 BOOL2)                           #NKREZ. Child of NREZ
NKREZ.initialize({{OBJ}})->>OBJ   #
NKREZ.getData()->>OBJ             #
NKREZ.registerOutputs
 ([}VAL{|[>]VAL])                 #VAL is {{OBJ}}

new N.CustomResource('RTYPE',
 'REZ'[, {{NRPROPS}}], NCROPTS,
 BOOL3)                           #NCREZ. Child of NREZ
NCREZ.id                          #}STR{

new N.DependencyResource('URN')   #NDREZ. Child of NCREZ

NREZ.getProvider(STR)->NPROV      #
new N.ProviderResource('PACKAGE',
 'PROV'[, {{NRPROPS}}], NROPTS,
 BOOL3)                           #NPROV. Child of NCREZ
N.ProviderResource.register
 ([NPROV])[->>STR]                #

new N.DependencyProviderResource
 (STR)                            #NDPROV. Child of NPROV

new N.StackReference              #NSREZ. Child of NCREZ
 ('REZ'[, OBJ][, NCROPTS])        #OBJ: name {'STACK'}
NSREZ.name                        #}'STACK'{
NSREZ.outputs                     #}OBJ{
NSREZ.getOutput({'STACK'})
 ->}VAL{                          #
NSREZ.getOutputValue
 ('STACK')->>VAL                  #
NSREZ.getOutputDetails
 ('STACK')->>OBJ                  #OBJ: value VAL, secretValue VAL
NSREZ.requireOutput
 ({'STACK'})->}VAL{               #
NSREZ.requireOutputValue
 ('STACK')->>VAL                  #

rootStackResource                 #NREZ

new ResourceError
 ('MESSAGE'[, NREZ][, BOOL])      #NRERROR. Child of ERROR
NRERROR.resource                  #NREZ
NRERROR.hideStack                 #BOOL

new RunError('MESSAGE')           #ERROR

createUrn({'REZ'}, {'RTYPE'},
 {'URN'}|NREZ, 'PROJECT', 'STACK')
 ->}'URN'{                        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE OPTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ.options                       #ROPTS
NCROPTS                           #Child of NROPTS
                                  #Only for NCREZ
NKROPTS                           #Child of NROPTS
                                  #Only for NKREZ
mergeOptions(N*ROPTS, N*ROPTS2)
 ->N*ROPTS3                       #

[N]ROPTS.customTimeouts.METHOD    #'NUMs|m|d'
                                  #METHOD is create|update|delete
[NC]ROPTS.deleteBeforeReplace     #BOOL
NROPTS.deletedWith                #NREZ
[N]ROPTS.dependsOn                #{[N]REZ[_ARR]}
[N]ROPTS.ignoreChanges            #STR_ARR
[NC]ROPTS.import                  #STR
[N]ROPTS.parent                   #{REZ}|NREZ
[N]ROPTS.protect                  #BOOL
[N]ROPTS.provider                 #{PROV}|NPROV
[NK]ROPTS.providers.KEY           #{REZ}
[N]ROPTS.version                  #STR
[N]ROPTS.pluginDownloadURL        #STR
[N]ROPTS.replaceOnChanges         #STR_ARR
[N]ROPTS.retainOnDelete           #BOOL

ROPTS.aliases                     #STR_ARR
NROPTS.aliases                    #{'URN'|NALIAS}_ARR
NALIAS.name                       #{'REZ'}
NALIAS.parent                     #NREZ|{'URN'}
NALIAS.project                    #{'PROJECT'}
NALIAS.stack                      #{'STACK'}
NALIAS.type                       #{STR}

NROPTS.transformations            #NTFUNC_ARR
NTFUNC                            #FUNC(NTARGS)[->NTRESULT]
NTARGS.name                       #'REZ'
NTARGS|NTRESULT.opts              #NROPTS
NTARGS|NTRESULT.props             #NRPROPS
NTARGS.resource                   #NREZ
NTARGS.type                       #'RTYPE'

NROPTS.id                         #{STR}
NROPTS.urn                        #'URN'

REZ.get                           #GETTER
GETTER.id                         #STR
GETTER.state.KEY                  #{VAL}



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MISC              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


isGrpcError(ERROR)->BOOL          #
isUnknown(VAL)->BOOL              #
containsUnknowns(VAL)->BOOL       #

getOrganization()->'ORG'          #

getProject()->'PROJECT'           #
GOUTPUTS.pulumi.project           #'PROJECT'

getStack()->'STACK'               #
GOUTPUTS.pulumi.stack             #'STACK'

pulumi ... --cwd|-C               #
GOUTPUTS.pulumi.cwd               #'DIR' (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROVIDER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.provider.main(NPROV, STR_ARR)->>#

NPROV.check                       #FUNC('URN', IVAL, IVAL2)->>OBJ:
                                  #  - inputs IVAL3
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROV.create                      #FUNC('URN', IVAL)->>OBJ:
                                  #  - id 'ID'
                                  #  - outs OVAL
NPROV.delete                      #FUNC('ID', 'URN', OVAL)->>
NPROV.diff                        #FUNC('ID', 'URN', OVAL, IVAL)->>OBJ:
                                  #  - changes BOOL
                                  #  - deleteBeforeReplace BOOL
                                  #  - replaces STR_ARR
                                  #  - stables STR_ARR
NPROV.read                        #FUNC('ID', 'URN'[, OVAL])->>OBJ:
                                  #  - id 'ID'
                                  #  - props OVAL
NPROV.update                      #FUNC('ID', 'URN', OVAL, IVAL)->>OBJ:
                                  #  - outs OVAL

NPROV.construct                   #FUNC(STR, 'RTYPE', {{NRPROPS}}, NKROPTS)->>OBJ:
                                  #  - urn {'URN'}
                                  #  - state {{OBJ}}
NPROV.call                        #FUNC('TOKEN', {{NRPROPS}})->>OBJ:
                                  #  - outputs OVAL
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROV.invoke                      #FUNC('TOKEN', IVAL)->>OBJ (same return value as call())

NPROV.schema                      #'JSON'
NPROV.version                     #'VERSION'

new N.dynamic.Resource
 (NDPROV, 'REZ', {{NRPROPS}},
 NCROPTS, 'MODULE', 'RTYPE')      #NDREZ. Child of NCREZ

NDPROV                            #Like NPROV except:
                                  #  - only check|create|delete|diff|read|update
                                  #  - IVAL|OVAL -> {IVAL|OVAL}
                                  #  - no 'URN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              LOG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.log.LEVEL('MESSAGE'
 [, NREZ][, NUM][, BOOL])->>      #
N.log.hasErrors()->BOOL           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROJECT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PFILE                             #Pulumi.yaml

NWOPTS.projectSettings            #NPFILE
NWORKSPACE.saveProjectSettings
 (NPFILE)->>                      #
NWORKSPACE.projectSettings()
 ->>NPFILE                        #

[N]PFILE.name                     #'PROJECT'
pulumi new --name|-n              #'PROJECT' (def: prompted)
[N]PFILE.description              #STR
pulumi new --description|-d       #PROJECT.description (def: prompted)

[N]PFILE.runtime                  #Either [N]RUNTIME or [N]RUNTIME.name
[N]RUNTIME.name                   #'RUNTIME', i.e. 'nodejs|go|python|dotnet|java|yaml'
[N]RUNTIME.options                #[N]RUNTIME_OPTS
[N]RUNTIME_OPTS.typescript        #BOOL. Whether to use ts-node
                                  #Only with 'nodejs'
[N]RUNTIME_OPTS.nodeargs          #'--FLAG' passed to node
                                  #Only with 'nodejs'
[N]RUNTIME_OPTS.buildTarget       #'DIR' where to run 'go build'
                                  #Def: temp DIR
                                  #Only with 'go'
[N]RUNTIME_OPTS.binary            #'PATH' to binary
                                  #Only with 'go|dotnet|java'
[N]RUNTIME_OPTS.compiler          #Only with 'yaml'
[N]RUNTIME_OPTS.virtualenv        #'DIR' where python binary is
ENVVAR PULUMI_PYTHON_CMD          #Only with 'python'

NPFILE.config                     #STR
PFILE.config.KEY                  #VAL|SCHEMAVAL
SCHEMAVAL.type                    #'string|boolean|integer|array'
SCHEMAVAL.description             #STR
SCHEMAVAL.default                 #VAL
SCHEMAVAL.items                   #SCHEMAVAL_ARR

[N]PFILE.backend.url              #'BACKEND' among:
ENVVAR PULUMI_BACKEND_URL         #  - 's3://BUCKET' (AWS S3)
                                  #  - 'gs://BUCKET' (GCP GCS)
                                  #  - 'azblob://BUCKET' (Azure Blob)

[N]PFILE.main                     #'DIR' of PROGRAM
                                  #Def: '.'
PFILE.stackConfigDir              #'DIR'
PFILE.options.refresh             #undefined|'always'

NPFILE.author                     #STR
NPFILE.license                    #STR
NPFILE.website                    #STR

[N]PFILE.template                 #[N]PROJECT_TEMPLATE
[N]PROJECT_TEMPLATE.description   #STR
NPROJECT_TEMPLATE.important       #BOOL
NPROJECT_TEMPLATE.quickstart      #STR

[N]PROJECT_TEMPLATE.config.KEY    #[N]PROJECT_TEMPLATE_VAL
[N]PROJECT_TEMPLATE_VAL.default   #STR
[N]PROJECT_TEMPLATE_VAL
 .description                     #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGIN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NWORKSPACE.installPlugin
 ('PLUGIN', 'VERSION', 'KIND')->> #
NWORKSPACE.installPluginFromServer
 ('PLUGIN', 'VERSION',
 'SERVER')->>                     #
NWORKSPACE.listPlugins()
 ->NPLUGIN_INFO_ARR               #
NWORKSPACE.removePlugin('PLUGIN',
 'VERSION_RANGE', 'KIND')->>      #

PFILE.plugins.KINDs               #PLUGIN_INFO
                                  #KIND is NPLUGIN_INFO.kind

PLUGIN_INFO.kind                  #'analyzer|language|resource'
[N]PLUGIN_INFO.name               #'PLUGIN'
[N]PLUGIN_INFO.path               #'DIR'
[N]PLUGIN_INFO.version            #'VERSION'
NPLUGIN_INFO.serverURL            #'URL'
NPLUGIN_INFO.size                 #NUM
NPLUGIN_INFO.installTime          #DATE
NPLUGIN_INFO.lastUsedTime         #DATE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WORKSPACE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.automation                      #NAUTO

NAUTO.LocalWorkspace
 .create([NWOPTS])->>NWORKSPACE   #

NAUTO.LocalWorkspace
 .create|select|createOrSelect
 (L|IPROGRAM_ARGS[, NWOPTS])
 ->>NSTACK                        #
LPROGRAM_ARGS|IPROGRAM_ARGS
 .stackName                       #'STACK'
IPROGRAM_ARGS.projectName         #'PROJECT'

NAUTO.Stack
 .create|select|createOrSelect
 ('STACK', NWORKSPACE)->>NSTACK2  #

NWORKSPACE.createStack('STACK')->>#
NWORKSPACE.selectStack('STACK')->>#
NWORKSPACE.removeStack('STACK')->>#

NWORKSPACE
 .export*|import*|*Config*|*Tag*
 ('STACK', ...)                   #Same as NSTACK.exportStack|...(...)
NWORKSPACE.stackOutputs('STACK')  #Same as NSTACK.outputs()

NWORKSPACE.listStacks()
 ->>NSTACK_SUMMARY_ARR            #
NWORKSPACE.stack()
 [->>NSTACK_SUMMARY]              #

NSTACK_SUMMARY.current            #BOOL
NSTACK_SUMMARY.lastUpdate         #STR
NSTACK_SUMMARY.name               #'STACK'
NSTACK_SUMMARY.resourceCount      #NUM
NSTACK_SUMMARY.updateInProgress   #BOOL
NSTACK_SUMMARY.url                #'URL'

NWOPTS.stackSettings              #NSTACK_SETTINGS
NWORKSPACE.saveStackSettings
 ('STACK', NSTACK_SETTINGS)->>    #
NWORKSPACE.stackSettings()
 ->>NSTACK_SETTINGS               #

NSTACK_SETTINGS.config.KEY        #STR|NSTACK_SETTINGS_VAL
NSTACK_SETTINGS_VAL.secure        #STR

NSTACK_SETTINGS.encryptedKey      #STR
NSTACK_SETTINGS.encryptionSalt    #STR

version                           #STR
NWORKSPACE.pulumiVersion          #STR

NWOPTS|NWORKSPACE.pulumiHome      #'DIR' where to store plugins, workspaces, templates, credentials.
ENVVAR PULUMI_HOME                #Def: ~/.pulumi

LPROGRAM_ARGS|NWOPTS|NWORKSPACE
 .workDir                         #'DIR'
NWOPTS|NWORKSPACE.envVars         #OBJ
IPROGRAM_ARGS|NWOPTS|NWORKSPACE
 |SOPTS.program                   #FUNC()[->>OBJ]

NWORKSPACE.postCommandCallback    #FUNC('STACK')->>
NWORKSPACE.serializeArgsForOp     #FUNC('STACK')->>STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SECRETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECRETS_PROV                      #One of:
                                  #  - 'default': Pulumi Cloud
                                  #  - 'passphrase': local prompt
                                  #  - 'awskms://...?region=REGION'
                                  #  - 'gcpkms://...'
                                  #  - 'azurekeyvault://...'
                                  #  - 'hashivault://...'

NWOPTS|NWORKSPACE|NSTACK_SETTINGS
 .secretsProvider                 #'SECRETS_PROV'
pulumi new|stack init             #'SECRETS_PROV'
 |stack select|up|watch           #Def:
--secrets-provider                #  - 'default' if using Pulumi Cloud
                                  #  - 'passphrase' otherwise
pulumi stack
 change-secrets-provider
 SECRETS_PROV                     #

XDEPLOYMENT.secrets_providers     #XSPROVS
XSPROVS.type                      #STR
XSPROVS.state                     #XSPROVS_STATE
XSPROVS_STATE.url                 #'URL'
XSPROVS_STATE.owner               #STR
XSPROVS_STATE.project             #'PROJECT'
XSPROVS_STATE.stack               #'STACK'

ENVVAR PULUMI_CONFIG_PASSPHRASE   #STR
ENVVAR PULUMI_CONFIG_
 PASSPHRASE_FILE                  #Like PULUMI_CONFIG_PASSPHRASE but as 'PATH'

pulumi config|stack
--show-secrets
SOPTS.showSecrets                 #BOOL. Do not hide secrets

NPCONFIG.getSecret*(...)[->}VAL{] #Same as NPCONFIG.get*(...) but returns a }VAL{

isSecret(}VAL{)->>BOOL            #
secret({VAL})->}VAL{              #
unsecret(}VAL{)->}VAL2{           #

fn::secret(STR)->STR              #

[NC]ROPTS.additionalSecretOutputs #STR_ARR
NSREZ.secretOutputNames           #}STR_ARR{

PCONFIG|NPCONFIG_VAL|NOUTPUT_VAL
 |SCHEMAVAL
 |[N]PROJECT_TEMPLATE_VAL.secret  #BOOL

XWEBHOOK.secret                   #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STACK             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Pulumi.STACK.yaml                 #STACK config

NAUTO.Stack                       #NSTACK
NSTACK.name                       #'NSTACK'
NSTACK.workspace                  #NWORKSPACE

NSTACK.destroy([SOPTS])->>NDRESULT#SOPTS: no diff|expectNoChanges|plan|policyPacks|policyPackConfigs|program|replace
NSTACK.refresh([SOPTS])->>NDRESULT#SOPTS: no diff|plan|policyPacks|policyPackConfigs|program|replace|targetDependents
NSTACK.preview([SOPTS])->>NURESULT#SOPTS: no policyPacks|showSecrets
NSTACK.up([SOPTS])->>NURESULT     #SOPTS: no showSecrets
NSTACK.cancel()->>                #

NDRESULT|NURESULT.stdout|stderr   #STR

SOPTS.color                       #'always|never|raw|auto'
SOPTS.debug                       #BOOL
SOPTS.message                     #STR
SOPTS.onEvent                     #FUNC(ENGINE_EVENT)
SOPTS.onOutput                    #FUNC(STR)
SOPTS.parallel                    #NUM
SOPTS.target                      #STR_ARR
SOPTS.targetDependents            #BOOL
SOPTS.userAgent                   #STR
SOPTS.diff                        #BOOL
SOPTS.expectNoChanges             #BOOL
SOPTS.plan                        #STR
SOPTS.policyPackConfigs           #STR_ARR
SOPTS.policyPacks                 #STR_ARR
SOPTS.replace                     #STR_ARR

pulumi ... --logflow
SOPTS.logFlow                     #BOOL
pulumi ... --logtostderr
SOPTS.logToStdErr                 #BOOL. Log to stderr instead of to files
pulumi ... --verbose|-v
SOPTS.logVerbosity                #NUM. Verbose logging

pulumi ... --tracing
SOPTS.tracing                     #'URI' (including file: URI) where to send traces

NSTACK.exportStack()->>NDEPLOYMENT#
NSTACK.importStack(NDEPLOYMENT)->>#

NDEPLOYMENT.deployment            #VAL
NDEPLOYMENT.version               #NUM

NDRESULT.summary                  #NUPDATE_SUMMARY
NSTACK.history
 ([NUM[, NUM2[, BOOL]]])
 ->>NUPDATE_SUMMARY_ARR           #
NSTACK.info([BOOL])
 [->>NUPDATE_SUMMARY]             #

NUPDATE_SUMMARY.Deployment        #'JSON'
NUPDATE_SUMMARY.startTime|endTime #DATE
NUPDATE_SUMMARY.environment.ENVVAR#'VAL'
NUPDATE_SUMMARY.kind              #'update|preview|refresh|rename|destroy|import'
NUPDATE_SUMMARY.message           #STR
NUPDATE_SUMMARY.result            #'not-started|in-progress|succeeded|failed'
NUPDATE_SUMMARY.version           #NUM

NUPDATE_SUMMARY.resourceChanges   #OP_MAP
NURESULT.changeSummary            #OP_MAP
OP_MAP.OP_TYPE                    #NUM

NAUTO.fullyQualifiedStackName
 ('ORG', 'PROJECT', 'STACK')->STR #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REMOTE WORKSPACE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAUTO.RemoteWorkspace             #OPTS:
 .create|select|createOrSelect    #  - envVars.ENVVAR STR or { secret STR }
 (RGIT[, OPTS])->>NRSTACK         #  - preRunCommands STR_ARR
                                  #  - skipInstallDependencies BOOL (def: false)
RGIT.branch                       #STR
RGIT.commitHash                   #STR
RGIT.projectPath                  #STR
RGIT.stackName                    #'STACK'
RGIT.url                          #'URL'
RGIT.auth                         #RGIT_AUTH
RGIT_AUTH.username                #STR
RGIT_AUTH.password                #STR
RGIT_AUTH.personalAccessToken     #STR
RGIT_AUTH.sshPrivateKey           #STR
RGIT_AUTH.sshPrivateKeyPath       #'PATH'

NRSTACK                           #Like NSTACK except:
                                  #  - no workspace
                                  #  - no create|select|createOrSelect()
                                  #  - no last BOOL arg in history()
                                  #  - SOPTS: only onEvent|onOutput()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STACK             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACKS_URL                        #API_URL/stacks
USER_STACKS_URL                   #API_URL/user/stacks
STACK_URL                         #STACKS_URL/ORG/PROJECT/STACK

GET STACK_URL                     #Req: empty
                                  #Res: XSTACK
GET USER_STACKS_URL               #Req: empty
                                  #Res: OBJ: stacks XSTACK_SHORT_ARR
GET STACK_URL/export              #Req: empty
                                  #Res: XSTACK_STATE
POST STACK_URL/transfer           #Req: 'ORG'
                                  #Res: empty
DELETE STACK_URL                  #Req: OBJ
                                  #  - force BOOL
                                  #Res: empty

XSTACK[_SHORT].orgName            #'ORG'
XSTACK[_SHORT].projectName        #'PROJECT'
XSTACK[_SHORT].stackName          #'STACK'
XSTACK_SHORT.lastUpdate           #DATE_NUM
XSTACK.activeUpdate               #'UUID'
XSTACK_SHORT.resourceCount        #NUM
XSTACK.version                    #NUM

XSTACK.currentOperation           #XCUR_OP
XCUR_OP.kind                      #STR
XCUR_OP.author                    #STR
XCUR_OP.started                   #DATE_NUM

XSTACK_STATE.version              #NUM
XSTACK_STATE.deployment           #XDEPLOYMENT

XDEPLOYMENT.manifest              #XMANIFEST
XMANIFEST.time                    #'DATE'
XMANIFEST.magic                   #'HEX'
XMANIFEST.version                 #'xX.Y.Z'

XDEPLOYMENT.resources             #XREZ_ARR
XREZ.urn                          #'URN'
XREZ.id                           #'UUID'
XREZ.type                         #STR
XREZ.custom                       #BOOL
XREZ.inputs.KEY                   #VAL
XREZ.outputs.KEY                  #VAL
XREZ.parent                       #'URN'
XREZ.provider                     #'URN'
XREZ.propertyDependencies         #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS_URL                          #STACK_URL/tags

POST TAGS_URL                     #Req: XTAGS
                                  #Res: empty
DELETE TAGS_URL/TAG               #Req: empty
                                  #Res: empty

XTAGS.name                        #'TAG'
XTAGS.value                       #STR

XSTACK.tags.TAG                   #STR

NSTACK.getTag(STR)->>STR          #
NSTACK.setTag(STR, STR2)->>       #
NSTACK.removeTag(STR)->>          #
NSTACK.listTags()->>OBJ           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            UPDATES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATES_URL                       #STACK_URL/updates

GET UPDATES_URL/UPDATE_ID         #Req: empty
                                  #Res: OBJ:
                                  #  - status STR
                                  #  - events XEVENT_ARR
GET UPDATES_URL                   #Req: OBJ
                                  #  - output-type 'service' or 'cli' (def)
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/latest/previews   #Req: empty
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/UPDATE_ID/events  #Req: empty
                                  #Res: events XEVENT_ARR

XUPDATE.updateID                  #'UPDATE_ID'
XUPDATE.version                   #NUM
XUPDATE.latestVersion             #NUM

XUPDATE.info                      #XINFO
XINFO.kind                        #STR
XINFO.start|endTime               #DATE_NUM
XINFO.message                     #STR
XINFO.environment                 #OBJ
XINFO.config.KEY                  #OBJ
XINFO.result                      #STR
XINFO.version                     #NUM
XINFO.resourceChanges.KEY         #NUM

XUPDATE.githubCommitInfo          #XGITINFO
XGITINFO.slug                     #'USER/REPO'
XGITINFO.sha                      #'COMMIT_HASH'
XGITINFO.url                      #'URL' to commit

XGITINFO.author                   #XUSER
XUPDATE.requestedBy               #XUSER

XUPDATE.policyPacks               #XPOLICYPACK_ARR
XPOLICYPACK.name                  #STR
XPOLICYPACK.displayName           #STR
XPOLICYPACK.version               #NUM
XPOLICYPACK.versionTag            #STR
XPOLICYPACK.config                #OBJ

XEVENT.timestamp                  #DATE_NUM
XEVENT.type                       #'EVENT_TYPE'
XEVENT.EVENT_TYPE                 #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORG_URL                           #API_URL/orgs/ORG

pulumi org set-default ORG        #Set default ORG for current BACKEND
pulumi org get-default            #Print default ORG for current BACKEND


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MEMBERS_URL                       #ORG_URL/members

GET MEMBERS_URL                   #Req: OBJ
                                  #  - type 'backend'
                                  #Res: members XMEMBER_ARR
POST MEMBERS_URL/USER             #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
PATCH MEMBERS_URL/USER            #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
DELETE MEMBERS_URL/USER           #Req: empty
                                  #Res: empty

XMEMBER.role                      #'admin|member'
XMEMBER.knownToPulumi             #BOOL
XMEMBER.virtualAdmin              #BOOL

XMEMBER.user                      #XUSER
XUSER.name                        #'USER'
XUSER.githubLogin                 #STR
XUSER.avatarUrl                   #'URL'
XUSER.email                       #'EMAIL'

pulumi whoami                     #Prints current 'USER'
NWORKSPACE.whoAmI()->>NWHO        #
NWHO.organizations                #'ORG'_ARR
NWHO.url                          #'URL'
NWHO.user                         #'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEAM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEAMS_URL                         #ORG_URL/teams

GET TEAMS_URL                     #Req: empty
                                  #Res: teams XTEAM_ARR
POST TEAMS_URL/TEAM_KIND          #Req: XTEAM
                                  #  - not kind|userRole
                                  #Res: XTEAM
PATCH TEAMS_URL/TEAM              #Req: OBJ
                                  #  - memberAction 'add|remove'
                                  #  - member 'USER'
                                  #Res: empty
PATCH TEAMS_URL/TEAM              #Req: OBJ:
                                  #  - addStackPermission|removeStack OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #     - permission 101 (read), 102 (edit) or 103 (admin)
                                  #Res: empty
DELETE TEAMS_URL/TEAM             #Req: empty
                                  #Res: empty

XTEAM.kind                        #TEAM_KIND. Either 'pulumi' or 'github'
XTEAM.name                        #'TEAM'
XTEAM.displayName                 #STR
XTEAM.description                 #STR
XTEAM.userRole                    #STR
XTEAM.members                     #XUSER_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi login [URL]                #Login
                                  #Prompt for ENVVAR PULUMI_ACCESS_TOKEN if not present
                                  #Cache credentials locally
                                  #URL is for either:
                                  #  - default: Pulumi Cloud
                                  #  - self-hosted REST API
                                  #  - 'BACKEND'
                                  #  - local, using file://PATH
                                  #     - stores under PATH/.pulumi
--default-org                     #'ORG'
--insecure                        #No SSL

pulumi login|logout
--local                           #Same as using URL file://~
--cloud-url                       #'URL'

pulumi logout [URL]               #Logout
                                  #Def URL: current backend
--all                             #Logout of all backends

TOKENS_URL                        #API_URL/user/tokens

GET TOKENS_URL                    #Req: empty
                                  #Res: tokens XTOKEN_ARR
POST TOKENS_URL                   #Req: XTOKEN
                                  #  - only description
                                  #Res: XTOKEN
DELETE TOKENS_URL/TOKEN_ID        #Req: empty
                                  #Res: empty

XTOKEN.id                         #'TOKEN_ID'
XTOKEN.description                #STR
XTOKEN.lastUsed                   #DATE_NUM
XTOKEN.tokenValue                 #'ACCESS_TOKEN'

Authorization:
 token ACCESS_TOKEN [C]           #
ENVVAR PULUMI_ACCESS_TOKEN        #'ACCESS_TOKEN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOKS_URL                      #ORGS_URL/ORG/hooks

POST WEBHOOKS_URL                 #Req: XWEBHOOK
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL/WEBHOOK          #Req: empty
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL                  #Req: empty
                                  #Res: XWEBHOOK_ARR

XWEBHOOK.name                     #'WEBHOOK'
XWEBHOOK.displayName              #STR
XWEBHOOK.organizationName         #'ORG'
XWEBHOOK.payloadUrl               #'URL'
XWEBHOOK.active                   #BOOL

GET WEBHOOKS_URL/WEBHOK/deliveries#Req: empty
                                  #Res: XWEBHOOK_RES_ARR
POST WEBHOOKS_URL/WEBHOOK/ping    #Req: empty
                                  #Res: XWEBHOOK_RES

XWEBHOOK_RES.id                   #'UUID'
XWEBHOOK_RES.kind                 #STR
XWEBHOOK_RES.payload              #'JSON_OBJ'
XWEBHOOK_RES.requestHeaders       #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseCode         #NUM
XWEBHOOK_RES.responseHeaders      #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseBody         #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUDIT LOGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUDIT_LOGS_URL                    #ORG_URL/auditlogs

GET AUDIT_LOGS_URL                #Req: OBJ
                                  #  - startTime DATE_NUM
                                  #  - userFilter 'USER'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR
GET AUDIT_LOGS_URL/export         #Req: OBJ:
                                  #  - startTime|userFilter: like above
                                  #  - format 'csv' (def) or 'cef'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR, but as CSV|CEF

XAUDIT_LOG.timestamp              #DATE_TIME
XAUDIT_LOG.sourceIP               #'IP'
XAUDIT_LOG.event                  #'MESSAGE'
XAUDIT_LOG.description            #STR
XAUDIT_LOG.user                   #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SEARCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ_URL                           #ORG_URL/resources

GET REZ_URL/summary               #Req: OBJ
                                  #  - granularity 'hourly|daily|weekly|monthly|yearly'
                                  #  - lookbackDays NUM
                                  #Res: summary REZ_COUNT_ARR

REZ_COUNT.resources               #NUM
REZ_COUNT.year|month|weekNumber
 |day|hour                        #NUM

SEARCH_REZ_URL                    #ORG_URL/search/resources

GET SEARCH_REZ_URL                #Req: XSEARCH_REZ_REQ
                                  #Res: XREZ_INFO
GET SEARCH_REZ_URL/export         #Req: XSEARCH_REZ_REQ
                                  #  - no facet
                                  #Res: XREZ_ARR, as CSV

XSEARCH_REZ_REQ.query             #STR
XSEARCH_REZ_REQ.sort              #'VARR'_ARR
XSEARCH_REZ_REQ.asc               #BOOL

XREZ_INFO.resources               #XREZ_ARR

XSEARCH_REZ_REQ.facet             #'VARR'_ARR
XREZ_INFO.aggregations            #XAGGR
XAGGR.results                     #XAGGR_RESULT_ARR
XAGGR_RESULT.name                 #STR
XAGGR_RESULT.count                #NUM
XAGGR.others                      #NUM

XREZ.created                      #'DATE'
XREZ.modified                     #'DATE'
XREZ.custom                       #BOOL
XREZ.delete                       #BOOL
XREZ.dependencies                 #'URN'_ARR
XREZ.id                           #STR
XREZ.module                       #STR
XREZ.name                         #'REZ'
XREZ.package                      #'PACKAGE'
XREZ.parent.urn                   #'URN'
XREZ.pending                      #'creating|deleting|updating|reading|importing'
XREZ.project                      #'PROJECT'
XREZ.protected                    #BOOL
XREZ.provider.urn                 #'URN'
XREZ.stack                        #'STACK'
XREZ.type                         #'RTYPE'
XREZ.urn                          #'URN'
