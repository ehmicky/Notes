
          
   PULUMI  
          



VERSION ==>                       #3.63.0

@pulumi/pulumi                    #NPULUMI. Node.js client
N*                                #Node.js types

Pulumi.stack.yaml???
Pulumi.yaml???

PROGRAM                           #YAML

PROGRAM.config                    #PCONFIG
PCONFIG.type                      #'String|Number' or 'List<String|Number>'
PCONFIG.default                   #VAL
PCONFIG.secret                    #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXPRESSION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPR                              #

${VARR}                           #Replaced by PROGRAM.config|variables|resources.VARR or GLOBALS.VARR
                                  #Can be part of a STR if value is a STR itself
                                  #VARR:
                                  #  - VAR.VAR2
                                  #  - VAR["VAR2"]
                                  #     - same as VAR.VAR2 but escapes
                                  #     - must \-escape "
                                  #  - VAR[NUM]
$${...}                           #Escape ${...}

PROGRAM.variables.KEY             #EXPR

GLOBALS                           #Variables available with EXPR
GLOBALS.pulumi                    #GPULUMI
GPULUMI.cwd                       #
GPULUMI.project                   #
GPULUMI.stack                     #

{ fn::FUNC: ARG[_ARR] }           #"Built-in function". To use in EXPR, substituted by its return value
                                  #ARG usually allows EXPR
fn::toBase64(STR)->STR            #
fn::fromBase64(STR)->STR          #
fn::toJSON(VAL)->STR              #
fn::join('DELIM', ARR)->STR       #Like ARR.join('DELIM')
fn::split('DELIM', STR)->ARR      #Like STR.split('DELIM')
fn::select(NUM, ARR)->VAL         #ARR[NUM] (0-based)

fn::secret(STR)->STR              #

fn::readFile('PATH')->'CONTENT'   #'PATH' can start with ../

fn::invoke(OBJ)->STR              #Call a package FUNC. OBJ:
                                  #  - function STR
                                  #  - arguments.ARG EXPR
                                  #  - options IOPTS
IOPTS.parent                      #EXPR
IOPTS.provider                    #EXPR
IOPTS.version                     #STR
IOPTS.pluginDownloadURL           #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSETS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPULUMI.asset                     #NASSETM

ASSET                             #File
NASSETM.Asset.isInstance(VAL)
 ->BOOL                           #

fn::stringAsset('CONTENT')
new NASSETM
 .StringAsset([PROMISE_]'CONTENT')#[N]STRING_ASSET. Child of ASSET
NSTRING_ASSET.text                #PROMISE_'CONTENT'

fn::fileAsset('PATH')
new NASSETM
 .FileAsset([PROMISE_]'PATH')     #[N]FILE_ASSET. Child of ASSET
NFILE_ASSET.path                  #PROMISE_'PATH'

fn::remoteAsset('URI')
new NASSETM                       #[N]REMOTE_ASSET. Child of ASSET
 .RemoteAsset([PROMISE_]'URI')    #Can use HTTP[S] or file:
NREMOTE_ASSET.uri                 #PROMISE_'URI'

ARCHIVE                           #Collection of ASSETs|ARCHIVEs
NASSETM.Archive.isInstance(VAL)
 ->BOOL                           #

fn::assetArchive(ASSETS)
new NASSETM
 .AssetArchive([PROMISE_]NASSETS) #[N]ASSET_ARCHIVE. Child of ARCHIVE
[N]ASSETS                         #OBJ: KEY [N]ASSET|[N]ARCHIVE
NARCHIVE.assets                   #PROMISE_NASSETS

fn::fileArchive('PATH')
new NASSETM                       #[N]FILE_ARCHIVE. Child of ARCHIVE
 .FileArchive([PROMISE_]'PATH')   #Either 'DIR' or PATH to *.tar|tgz|tar.gz|zip|jar
NFILE_ARCHIVE.path                #PROMISE_'PATH'

fn::remoteArchive('URI')
new NASSETM                       #[N]REMOTE_ARCHIVE. Child of ARCHIVE
 .RemoteArchive([PROMISE_]'URI')  #Must be *.tar|tgz|tar.gz|zip|jar
NREMOTE_ARCHIVE.uri               #PROMISE_'URI'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM.resources.KEY             #RESOURCE
RESOURCE.type                     #'RTYPE'
RESOURCE.defaultProvider          #BOOL
RESOURCE.properties.KEY           #EXPR

RESOURCE.options                  #ROPTS
NCROPTS                           #Child of NROPTS
NKROPTS                           #Child of NROPTS

[NC]ROPTS.additionalSecretOutputs #STR_ARR
[N]ROPTS.customTimeouts.METHOD    #'NUMs|m|d'
                                  #METHOD is create|update|delete
[NC]ROPTS.deleteBeforeReplace     #BOOL
NROPTS.deletedWith                #NRESOURCE
ROPTS.dependsOn                   #EXPR_ARR
NROPTS.dependsOn                  #RESOURCE_INPUT[_ARR_INPUT]
[N]ROPTS.ignoreChanges            #STR_ARR
[NC]ROPTS.import                  #STR
ROPTS.parent                      #EXPR
NROPTS.parent                     #NRESOURCE
[N]ROPTS.protect                  #BOOL
ROPTS.provider                    #EXPR
NROPTS.provider                   #NPRESOURCE
[NK]ROPTS.providers.KEY           #EXPR
[N]ROPTS.version                  #STR
[N]ROPTS.pluginDownloadURL        #STR
[N]ROPTS.replaceOnChanges         #STR_ARR
[N]ROPTS.retainOnDelete           #BOOL

ROPTS.aliases                     #STR_ARR
NROPTS.aliases                    #ARR of 'URN'_INPUT|NALIAS_INPUT
NALIAS.name                       #'RESOURCE'_INPUT
NALIAS.parent                     #NRESOURCE or 'URN'_INPUT
NALIAS.project                    #'PROJECT'_INPUT
NALIAS.stack                      #'STACK'_INPUT
NALIAS.type                       #STR_INPUT

NROPTS.transformations            #NTFUNC_ARR
NTFUNC                            #FUNC(NTARGS)[->NTRESULT]
NTARGS.name                       #'RESOURCE'
NTARGS|NTRESULT.opts              #NROPTS
NTARGS|NTRESULT.props             #INPUTS
NTARGS.resource                   #NRESOURCE
NTARGS.type                       #'RTYPE'

NROPTS.id                         #STR_INPUT
NROPTS.urn                        #'URN'

RESOURCE.get                      #GETTER
GETTER.id                         #STR
GETTER.state.KEY                  #EXPR

new NPULUMI.Resource('RTYPE',
 'RESOURCE', BOOL, INPUTS,
 NROPTS, BOOL2, BOOL3)            #NRESOURCE
NPULUMI.Resource.isInstance(VAL)
 ->BOOL                           #
NRESOURCE.urn                     #'URN'_OUTPUT

new NPULUMI.CustomResource
 ('RTYPE', 'RESOURCE'[, INPUTS],
 NCROPTS, BOOL3)                  #NCRESOURCE. Child of NRESOURCE
NCRESOURCE.id                     #STR_OUTPUT

NRESOURCE.getProvider(STR)
 ->NPRESOURCE                     #
new NPULUMI.ProviderResource
 ('PACKAGE', 'RESOURCE'[, INPUTS],
 NROPTS, BOOL3)                   #NPRESOURCE. Child of NCRESOURCE
NPULUMI.ProviderResource
 .register([NPRESOURCE])
 ->PROMISE[_STR]                  #

new NPULUMI.ComponentResource
 ('TYPE', 'RESOURCE', INPUTS,
 NKROPTS, BOOL2)                  #NKRESOURCE. Child of NRESOURCE
NKRESOURCE.getData()->PROMISE_VAL #
NKRESOURCE.initialize(INPUTS)
 ->PROMISE_VAL                    #
NKRESOURCE.registerOutputs
([INPUTS_OUTPUT|[PROMISE_]INPUTS])#

new NPULUMI.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INPUTS OUTPUTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAM.outputs.KEY               #EXPR

INPUTS.KEY                        #INPUT
INPUT                             #[PROMISE_]VAL or OUTPUT_INSTANCE

OUTPUT_INSTANCE                   #Wraps a VAL
OUTPUT_INSTANCE.get()->VAL
OUTPUT_INSTANCE.apply
 (FUNC(VAL)
 ->PROMISE_[OUTPUT_INSTANCE_]VAL2)
 ->OUTPUT                         #

OUTPUT                            #Child of OUTPUT_INSTANCE, but every OBJ|ARR is an OUTPUT, deeply
                                  #Wraps a VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROVIDER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPULUMI.provider.main
 (NPROVIDER, STR_ARR)->PROMISE    #

NPROVIDER.check                   #FUNC('URN', IVAL, IVAL2)->PROMISE_OBJ:
                                  #  - inputs IVAL3
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROVIDER.create                  #FUNC('URN', IVAL)->PROMISE_OBJ:
                                  #  - id 'ID'
                                  #  - outs OVAL
NPROVIDER.delete                  #FUNC('ID', 'URN', OVAL)->PROMISE
NPROVIDER.diff                    #FUNC('ID', 'URN', OVAL, IVAL)->PROMISE_OBJ:
                                  #  - changes BOOL
                                  #  - deleteBeforeReplace BOOL
                                  #  - replaces STR_ARR
                                  #  - stables STR_ARR
NPROVIDER.read                    #FUNC('ID', 'URN'[, OVAL])->PROMISE_OBJ
                                  #  - id 'ID'
                                  #  - props OVAL
NPROVIDER.update                  #FUNC('ID', 'URN', OVAL, IVAL)->PROMISE_OBJ
                                  #  - outs OVAL

NPROVIDER.construct               #FUNC(STR, 'RTYPE', INPUTS, NKROPTS)->PROMISE_OBJ:
                                  #  - urn 'URN'_INPUT
                                  #  - state INPUTS
NPROVIDER.call                    #FUNC('TOKEN', INPUTS)->PROMISE_OBJ:
                                  #  - outputs OVAL
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROVIDER.invoke                  #FUNC('TOKEN', IVAL)->PROMISE_OBJ (same return value as call())

NPROVIDER.schema                  #'JSON'
NPROVIDER.version                 #'VERSION'

new NPULUMI.dynamic.Resource
 (NDPROVIDER, 'RESOURCE', INPUTS,
 NCROPTS, 'MODULE', 'RTYPE')      #NDRESOURCE. Child of NCRESOURCE

NDPROVIDER                        #Like NPROVIDER except:
                                  #  - only check|create|delete|diff|read|update
                                  #  - IVAL|OVAL -> INPUTS|OUTPUTS
                                  #  - no 'URN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ITERABLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPULUMI.iterable.groupBy
 (INPUT_ARR_INPUT, FUNC(VAL)
 ->[, STR_INPUT, VAL_INPUT]_INPUT)
 ->OBJ_OUTPUT                     #OBJ values are ARR

NPULUMI.iterable.toObject(...)    #Same args as groupBy()
                                  #OBJ values are not ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              LOG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPULUMI.log.LEVEL('MESSAGE'
 [, NRESOURCE][, NUM][, BOOL])
 ->PROMISE                        #
NPULUMI.log.hasErrors()->BOOL     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUTOMATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPULUMI.automation                #NAUTO

NAUTO.fullyQualifiedStackName
 ('ORG', 'PROJECT', 'STACK')->STR #

NAUTO.LocalWorkspace
 .create([NWOPTS])
 ->PROMISE_NWORKSPACE             #

NAUTO.LocalWorkspace
 .create|select|createOrSelect
 (L|IPROGRAM_ARGS[, NWOPTS])
 ->PROMISE_NSTACK                 #
LPROGRAM_ARGS|IPROGRAM_ARGS
 .stackName                       #'STACK'
IPROGRAM_ARGS.projectName         #'PROJECT'

NAUTO.Stack
 .create|select|createOrSelect
 ('STACK', NWORKSPACE)
 ->PROMISE_NSTACK2                #

NWORKSPACE.createStack('STACK')
 ->PROMISE                        #
NWORKSPACE.selectStack('STACK')
 ->PROMISE                        #
NWORKSPACE.removeStack('STACK')
 ->PROMISE                        #

NWORKSPACE
 .export*|import*|*Config*|*Tag*
 ('STACK', ...)                   #Same as NSTACK.exportStack|...(...)
NWORKSPACE.stackOutputs('STACK')  #Same as NSTACK.outputs()

NWORKSPACE.listStacks()
 ->PROMISE_NSTACK_SUMMARY_ARR     #
NWORKSPACE.stack()
 ->PROMISE[_NSTACK_SUMMARY]       #

NSTACK_SUMMARY.current            #BOOL
NSTACK_SUMMARY.lastUpdate         #STR
NSTACK_SUMMARY.name               #'STACK'
NSTACK_SUMMARY.resourceCount      #NUM
NSTACK_SUMMARY.updateInProgress   #BOOL
NSTACK_SUMMARY.url                #'URL'

NWOPTS.stackSettings              #NSTACK_SETTINGS
NWORKSPACE.saveStackSettings
 ('STACK', NSTACK_SETTINGS)
 ->PROMISE                        #
NWORKSPACE.stackSettings()
 ->PROMISE_NSTACK_SETTINGS        #

NSTACK_SETTINGS.config.KEY        #STR|NSTACK_SETTINGS_VAL
NSTACK_SETTINGS_VAL.secure        #STR

NSTACK_SETTINGS.encryptedKey      #STR
NSTACK_SETTINGS.encryptionSalt    #STR

NWORKSPACE.pulumiVersion          #STR
NWOPTS|NWORKSPACE.pulumiHome      #'DIR'
LPROGRAM_ARGS|NWOPTS|NWORKSPACE
 .workDir                         #'DIR'
NWOPTS|NWORKSPACE.envVars         #OBJ
IPROGRAM_ARGS|NWOPTS|NWORKSPACE
 |SOPTS.program                   #FUNC()->PROMISE[_OBJ]
NWOPTS|NWORKSPACE|NSTACK_SETTINGS
 .secretsProvider                 #STR

NWORKSPACE.postCommandCallback    #FUNC('STACK')->PROMISE
NWORKSPACE.serializeArgsForOp     #FUNC('STACK')->PROMISE_STR_ARR

NWOPTS.projectSettings            #NPROJECT_SETTINGS
NWORKSPACE.saveProjectSettings
 (NPROJECT_SETTINGS)->PROMISE     #
NWORKSPACE.projectSettings()
 ->PROMISE_NPROJECT_SETTINGS      #

NPROJECT_SETTINGS.author          #STR
NPROJECT_SETTINGS.backend.url     #STR
NPROJECT_SETTINGS.config          #STR
NPROJECT_SETTINGS.description     #STR
NPROJECT_SETTINGS.license         #STR
NPROJECT_SETTINGS.main            #STR
NPROJECT_SETTINGS.name            #STR
NPROJECT_SETTINGS.runtime         #Either:
                                  #  - 'nodejs|go|python|dotnet'
                                  #  - OBJ:
                                  #     - name STR
                                  #     - options OBJ
NPROJECT_SETTINGS.website         #STR

NPROJECT_SETTINGS.template        #NPROJECT_TEMPLATE
NPROJECT_TEMPLATE.description     #STR
NPROJECT_TEMPLATE.important       #BOOL
NPROJECT_TEMPLATE.quickstart      #STR

NPROJECT_TEMPLATE.config.KEY      #NPROJECT_TEMPLATE_VAL
NPROJECT_TEMPLATE_VAL.default     #STR
NPROJECT_TEMPLATE_VAL.description #STR
NPROJECT_TEMPLATE_VAL.secret      #BOOL

NWORKSPACE.whoAmI()->PROMISE_NWHO #
NWHO.organizations                #STR_ARR
NWHO.url                          #'URL'
NWHO.user                         #STR

NWORKSPACE.installPlugin
 ('PLUGIN', 'VERSION', 'KIND')
 ->PROMISE                        #
NWORKSPACE.installPluginFromServer
 ('PLUGIN', 'VERSION', 'SERVER')
 ->PROMISE                        #
NWORKSPACE.listPlugins()
 ->NPLUGIN_INFO_ARR               #
NWORKSPACE.removePlugin('PLUGIN',
 'VERSION_RANGE', 'KIND')
 ->PROMISE                        #

NPLUGIN_INFO.installTime          #DATE
NPLUGIN_INFO.lastUsedTime         #DATE
NPLUGIN_INFO.kind                 #'analyzer|language|resource'
NPLUGIN_INFO.name                 #'PLUGIN'
NPLUGIN_INFO.path                 #'PATH'
NPLUGIN_INFO.serverURL            #'URL'
NPLUGIN_INFO.size                 #NUM
NPLUGIN_INFO.version              #'VERSION'

NAUTO.Stack                       #NSTACK
NSTACK.name                       #'NSTACK'
NSTACK.workspace                  #NWORKSPACE

NSTACK.destroy([SOPTS])
 ->PROMISE_NDRESULT               #SOPTS: no diff|expectNoChanges|plan|policyPacks|policyPackConfigs|program|replace
NSTACK.refresh([SOPTS])
 ->PROMISE_NDRESULT               #SOPTS: no diff|plan|policyPacks|policyPackConfigs|program|replace|targetDependents
NSTACK.preview([SOPTS])
 ->PROMISE_NURESULT               #SOPTS: no policyPacks|showSecrets
NSTACK.up([SOPTS])
 ->PROMISE_NURESULT               #SOPTS: no showSecrets
NSTACK.cancel()->PROMISE          #

NDRESULT|NURESULT.stdout|stderr   #STR

SOPTS.color                       #'always|never|raw|auto'
SOPTS.debug                       #BOOL
SOPTS.logFlow                     #BOOL
SOPTS.logToStdErr                 #BOOL
SOPTS.logVerbosity                #NUM
SOPTS.message                     #STR
SOPTS.onEvent                     #FUNC(ENGINE_EVENT)
SOPTS.onOutput                    #FUNC(STR)
SOPTS.parallel                    #NUM
SOPTS.showSecrets                 #BOOL
SOPTS.target                      #STR_ARR
SOPTS.targetDependents            #BOOL
SOPTS.tracing                     #STR
SOPTS.userAgent                   #STR
SOPTS.diff                        #BOOL
SOPTS.expectNoChanges             #BOOL
SOPTS.plan                        #STR
SOPTS.policyPackConfigs           #STR_ARR
SOPTS.policyPacks                 #STR_ARR
SOPTS.replace                     #STR_ARR

NSTACK.exportStack()
 ->PROMISE_NDEPLOYMENT            #
NSTACK.importStack(NDEPLOYMENT)
 ->PROMISE                        #

NDEPLOYMENT.deployment            #VAL
NDEPLOYMENT.version               #NUM

NUPDATE_SUMMARY.config            #NCONFIG_MAP
NSTACK.getAllConfig()
 ->PROMISE_NCONFIG_MAP            #
NSTACK.getConfig('KEY')
 ->PROMISE_NCONFIG_VAL            #
NSTACK.refreshConfig()
 ->PROMISE_NCONFIG_MAP            #
NSTACK.removeAllConfig(STR_ARR)
 ->PROMISE                        #
NSTACK.removeConfig(STR)->PROMISE #
NSTACK.setAllConfig(NCONFIG_MAP)
 ->PROMISE                        #
NSTACK.setConfig(STR, NCONFIG_VAL)
 ->PROMISE                        #

NCONFIG_MAP.KEY                   #NCONFIG_VAL
NCONFIG_VAL.value                 #STR
NCONFIG_VAL.secret                #BOOL

NSTACK.getTag(STR)->PROMISE_STR   #
NSTACK.setTag(STR, STR2)->PROMISE #
NSTACK.removeTag(STR)->PROMISE    #
NSTACK.listTags()->PROMISE_OBJ    #

NSTACK.outputs()
 ->PROMISE_NOUTPUT_MAP            #
NOUTPUT_MAP.KEY                   #NOUTPUT_VAL
NOUTPUT_VAL.value                 #STR
NOUTPUT_VAL.secret                #BOOL

NDRESULT.summary                  #NUPDATE_SUMMARY
NSTACK.history
 ([NUM[, NUM2[, BOOL]]])
 ->PROMISE_NUPDATE_SUMMARY_ARR    #
NSTACK.info([BOOL])
 ->PROMISE[_NUPDATE_SUMMARY]      #

NUPDATE_SUMMARY.Deployment        #'JSON'
NUPDATE_SUMMARY.startTime|endTime #DATE
NUPDATE_SUMMARY.environment.ENVVAR#'VAL'
NUPDATE_SUMMARY.kind              #'update|preview|refresh|rename|destroy|import'
NUPDATE_SUMMARY.message           #STR
NUPDATE_SUMMARY.result            #'not-started|in-progress|succeeded|failed'
NUPDATE_SUMMARY.version           #NUM

NUPDATE_SUMMARY.resourceChanges   #OP_MAP
NURESULT.changeSummary            #OP_MAP
OP_MAP.OP_TYPE                    #NUM

NAUTO.RemoteWorkspace             #OPTS:
 .create|select|createOrSelect    #  - envVars.ENVVAR STR or { secret STR }
 (RGIT[, OPTS])->PROMISE_NRSTACK  #  - preRunCommands STR_ARR
                                  #  - skipInstallDependencies BOOL (def: false)
RGIT.branch                       #STR
RGIT.commitHash                   #STR
RGIT.projectPath                  #STR
RGIT.stackName                    #'STACK'
RGIT.url                          #'URL'
RGIT.auth                         #RGIT_AUTH
RGIT_AUTH.username                #STR
RGIT_AUTH.password                #STR
RGIT_AUTH.personalAccessToken     #STR
RGIT_AUTH.sshPrivateKey           #STR
RGIT_AUTH.sshPrivateKeyPath       #'PATH'

NRSTACK                           #Like NSTACK except:
                                  #  - no workspace
                                  #  - no create|select|createOrSelect()
                                  #  - no last BOOL arg in history()
                                  #  - SOPTS: only onEvent|onOutput()
