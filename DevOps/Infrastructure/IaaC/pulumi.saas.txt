
          
   PULUMI  
          



TODO:
  - https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/runtime
  - https://www.pulumi.com/registry/packages/aws/api-docs/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.63.0

N.version
NWORKSPACE.pulumiVersion          #STR

pulumi version                    #Print Pulumi version

ENVVAR PULUMI_SKIP_UPDATE_CHECK   #If 'true', do not abort when version of Pulumi is not latest

pulumi about                      #Print:
                                  #  - current OS
                                  #  - pulumi version
                                  #  - current 'PROJECT|STACK|BACKEND'
--transitive|-t                   #Include transitive dependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


X*                                #REST API request|response

API_URL                           #https://api.pulumi.com/api

Accept: application/vnd.pulumi+8
 [C]                              #
Content-Type: application/json [C]#

REQUEST ==>                       #With POST|PUT|PATCH, JSON request body
                                  #With GET|DELETE, query variables

PAGINATION ==>                    #Some endpoints are always paginated:
                                  #  - Request OBJ: continuationToken=STR
                                  #  - Response OBJ: continuationToken STR
                                  #Others too but with a different way:
                                  #  - Request OBJ: continue STR, size NUM, page NUM
                                  #  - Response OBJ: total NUM, pagination.previous|next|continue STR
                                  #Others are only paginated on-demand:
                                  #  - Request OBJ: pageSize NUM, page NUM
                                  #  - Response OBJ: itemsPerPage NUM, total NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI ==>                           #Uses the REST API under the hood

pulumi --BOOL_VAR                 #If type not documented, means BOOL with default false

pulumi ...  --non-interactive     #
pulumi cancel|destroy|import|new
 |plugin rm|policy rm|refresh
 |stack rm|state|up
--yes|-y
ENVVAR PULUMI_SKIP_CONFIRMATIONS  #If 'true', no confirmations

pulumi ... --color
SOPTS.color                       #'auto' (def), 'always', 'never' or 'raw'
ENVVAR NO_COLOR                   #

pulumi about|config|destroy|logs
 |plugin ls|policy [group] ls
 |preview|refresh|stack ls
 |stack output|stack tag ls|up
 |whoami
--json|-j                         #JSON output

pulumi ... --emoji|-e             #Allow emojis in the CLI output

pulumi gen-completion             #Print CLI completion script

pulumi ...
--disable-integrity-checking      #

pulumi ... --profiling            #STR. Write profiling files to FILENAME.PID.cpu|mem|trace


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LANGUAGE EXECUTOR ==>             #Programming language used to execute the [N]PROGRAM
                                  #Binary pulumi-language-RUNTIME, distributed alongside Pulumi main binary
LANGUAGE RUNTIME ==>              #Programmatic library to use inside [N]PROGRAM to declare REZs
                                  #E.g. @pulumi/pulumi for Node.js

[N]PROJECT.runtime                #Either [N]RUNTIME or [N]RUNTIME.name
[N]RUNTIME                        #Language executor and runtime
[N]RUNTIME.name                   #'RUNTIME', i.e. 'nodejs|go|python|dotnet|java|yaml'
[N]RUNTIME.options                #[N]RUNTIME_OPTS

[N]RUNTIME_OPTS.buildTarget       #'DIR' where to run 'go build'
                                  #Def: temp DIR
                                  #Only with 'go'
[N]RUNTIME_OPTS.binary            #'PATH' to binary
                                  #Only with 'go|dotnet|java'

[N]RUNTIME_OPTS.compiler          #Only with 'yaml'

[N]RUNTIME_OPTS.virtualenv        #'DIR' where python binary is
ENVVAR PULUMI_PYTHON_CMD          #Only with 'python'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@pulumi/pulumi                    #Node.js client

N*                                #Node.js types
N.VAR                             #Named export VAR
N.automation                      #NA

>VAL                              #Means PROMISE_VAL
[>]VAL                            #Means [PROMISE_]VAL
->>[VAL]                          #Means ->PROMISE[_VAL]

CLASS.isInstance(VAL)->BOOL       #Like VAL instanceof CLASS, but cross-realm
                                  #Available with most CLASSes

[N]RUNTIME_OPTS.typescript        #BOOL. Whether to use TypeScript, through ts-node
[N]RUNTIME_OPTS.nodeargs          #'--FLAG ...' passed to node


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INPUTS OUTPUTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPUTS ==>                       #Async|dynamic value, similar to a PROMISE, as a return value
                                  #Resolved when provisioning a STACK
                                  #Related to specific REZs
INPUTS ==>                        #Async|dynamic value, similar to a PROMISE, as a function argument
                                  #Resolved when provisioning a STACK

}TYPE{                            #Notation for a [N]OUTPUT of TYPE
{TYPE}                            #Notation for a [N]INPUT of TYPE
}{TYPE}{                          #Notation for {TYPE} + }TYPE{

}}TYPE{{
{{TYPE}}                          #Like above, but top-level OBJ|ARR is normal (not dynamic)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROGRAM OUTPUTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POUTPUTS ==>                      #Unlike regular OUTPUTs:
                                  #  - related to a REZ
                                  #  - used inside a PROGRAM
                                  #POUTPUTs are:
                                  #  - related to a PROGRAM, instanced by a STACK
                                  #  - used by other PROGRAMs or processes

PROGRAM.outputs.POUTPUT           #{VAL}
export ...                        #In Node.js, each exported variable is a POUTPUT

NSTACK.outputs()->>NPOUTPUTS      #
NPOUTPUTS.POUTPUT                 #NPOUTPUT
NPOUTPUT.value                    #'VAL'

pulumi stack output [NPOUTPUT]    #Print an NPOUTPUT value
                                  #Def NPOUTPUT: all
--shell                           #Print as shell script instead

pulumi destroy|import|preview
 |refresh|up
--suppress-outputs                #Unless defined, POUTPUTs are printed

pulumi up
--show-full-output                #BOOL. If true (def), show POUTPUTs in full

SOPTS.onOutput                    #FUNC('POUTPUT')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS YAML      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INPUT                             #Can use:
                                  #  - VAL as is
                                  #  - ${VARR}
                                  #  - { fn::FUNC }
                                  #Also called "expression"

${VARR}                           #Insert a value in a {VAL} in YAML
                                  #Replaced by one of:
                                  #  - PROGRAM.resources.RESOURCE.OUTPUT_VARR
                                  #  - PROGRAM.config.VARR
                                  #  - PROGRAM.variables.VARR
                                  #  - GLOBALS.VARR
                                  #VARR:
                                  #  - VAR.VAR2
                                  #  - VAR["VAR2"]
                                  #     - same as VAR.VAR2 but escapes
                                  #     - must \-escape "
                                  #  - VAR[NUM]
                                  #Can be part of a STR if value is a STR itself.
$${...}                           #Escape ${...}

PROGRAM.variables.KEY             #{VAL} available in ${VARR}
GLOBALS                           #Values available in ${VARR}

{ fn::FUNC: {ARG[_ARR]} }         #Insert a function's return value in a {VAL} in YAML
                                  #"Built-in function"

fn::select(NUM, ARR)->VAL         #ARR[NUM] (0-based)

fn::join('DELIM', ARR)->STR       #Like ARR.join('DELIM')
fn::split('DELIM', STR)->ARR      #Like STR.split('DELIM')

fn::toBase64(STR)->STR            #
fn::fromBase64(STR)->STR          #

fn::toJSON(VAL)->'JSON'           #

fn::readFile('PATH')->'CONTENT'   #'PATH' can start with ../


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INPUTS OUTPUTS NODE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NINPUT                            #Can use:
                                  #  - VAL as is
                                  #  - PROMISE_VAL
                                  #  - }VAL{
                                  #Can be done deeply, including any OBJ|ARR deeply

NOUTPUT                           #Wraps a VAL, including any OBJ|ARR deeply

output({VAL})->}VAL{              #
Output.create({VAL})->}VAL{       #

}VAL{.get()->VAL                  #
}VAL{.apply
 (FUNC(VAL)->>VAL2|}VAL2{)
 ->}VAL3{                         #

all({VAL}_ARR)->}ARR{             #

concat({VAL}_ARR)->}STR{          #
interpolate`...${{VAL}}...`       #Same as concat() but as a `...`

jsonParse(...)
jsonStringify(...)                #Like JSON.parse|stringify(...) but using {VAL} and returning }VAL{

N.iterable.groupBy({ARR},
 FUNC(VAL)->{[, STR, VAL]})
 ->}OBJ{                          #OBJ values are ARR

N.iterable.toObject(...)          #Same args as groupBy()
                                  #OBJ values are not ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PROGRAM CONFIG         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT.config                    #PCONFIG
                                  #PCONFIG_VAR can be either:
                                  #  - proj:*: custom arguments passed to PROJECT (similar to ENVVARs)
                                  #  - PROV:*: PROV-specific configuration
PCONFIG.PCONFIG_VAR               #Either VAL or { value: PCONFIG_VAL }
PCONFIG_VAL.type                  #'string|boolean|integer|array'
                                  #If YAML runtime: 'String|Number' or 'List<String|Number>'
PCONFIG_VAL.default               #VAL
PCONFIG_VAL.description           #STR. Not with YAML runtime
PCONFIG_VAL.items                 #PCONFIG_VAL_ARR. Not with YAML runtime

new Config(['PCONFIG'])           #NPCONFIG
NPROJECT.config
NPCONFIG.name                     #'PCONFIG'. Def: 'PROJECT'

NPCONFIG.get
 ('PCONFIG_VAR'[, OPTS])
 [->PCONFIG_VAL]                  #Returns undefined if missing or not matching OPTS.*
OPTS.allowedValues                #ARR
OPTS.min|maxLength                #NUM
OPTS.pattern                      #REGEXP|'REGEXP'

NPCONFIG.getObject
 ('PCONFIG_VAR')[->OBJ]           #
NPCONFIG.getBoolean
 ('PCONFIG_VAR')[->BOOL]          #
NPCONFIG.getNumber
 ('PCONFIG_VAR'[, OPTS])[->NUM]   #
OPTS.min|max                      #NUM

NPCONFIG.require*(...)->VAL       #Same as NPCONFIG.get*(...) but throw instead of returning undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STACK CONFIG          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCONFIG                           #Like PCONFIG, but for a STACK
                                  #Inherits PCONFIG values

[N]STACK_SETTINGS.config          #[N]SCONFIG
[N]SCONFIG.SCONFIG_VAR            #'SCONFIG_VAL'|NCONFIG_SECRET_VAL

NUPDATE_SUMMARY.config            #NSCONFIG_MAP
NSCONFIG_MAP.SCONFIG_VAR          #NSCONFIG_ENTRY
NSCONFIG_ENTRY.value              #'[ENCRYPTED_]SCONFIG_VAL'

pulumi config                     #
--path                            #Allow using VARR

pulumi config set-all
--plaintext|secret
 SCONFIG_VAR=SCONFIG_VAL
NSTACK.setAllConfig
 (NSCONFIG_MAP)->>                #

pulumi config set SCONFIG_VAR
 [SCONFIG_VAL]                    #Def SCONFIG_VAL: stdin
NSTACK.setConfig('SCONFIG_VAR',
 NSCONFIG_ENTRY)->>               #

pulumi config rm-all
 SCONFIG_VAR...
NSTACK.removeAllConfig
 ('SCONFIG_VAR'_ARR)->>           #

pulumi config rm SCONFIG_VAR
NSTACK.removeConfig
 ('SCONFIG_VAR')->>               #

NSTACK.getAllConfig()
 ->>NSCONFIG_MAP                  #

pulumi config get SCONFIG_VAR
NSTACK.getConfig('SCONFIG_VAR')
 ->>NSCONFIG_ENTRY                #

pulumi config refresh
NSTACK.refreshConfig()
 ->>NSCONFIG_MAP                  #
--force|-f                        #Do not abort if config file exists

pulumi config cp SCONFIG_VAR      #
--dest|-d                         #'STACK'

pulumi new|preview|up|watch
--config|-c                       #STR_ARR
--config-path                     #

pulumi config|destroy|import|logs
 |preview|refresh|up|watch
--config-file                     #'PATH' (def: guessed)

pulumi destroy|preview|up|watch
--show-config                     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SECRETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECRETS_PROV                      #One of:
                                  #  - 'default': Pulumi Cloud
                                  #  - 'passphrase': local prompt
                                  #  - 'awskms://...?region=REGION'
                                  #  - 'gcpkms://...'
                                  #  - 'azurekeyvault://...'
                                  #  - 'hashivault://...'

NWOPTS|NWORKSPACE|NSTACK_SETTINGS
 .secretsProvider                 #'SECRETS_PROV'
pulumi new|stack init             #'SECRETS_PROV'
 |stack select|up|watch           #Def:
--secrets-provider                #  - 'default' if using Pulumi Cloud
                                  #  - 'passphrase' otherwise
pulumi stack
 change-secrets-provider
 SECRETS_PROV                     #

XDEPLOYMENT.secrets_providers     #XSPROVS
XSPROVS.type                      #STR
XSPROVS.state                     #XSPROVS_STATE
XSPROVS_STATE.url                 #'URL'
XSPROVS_STATE.owner               #STR
XSPROVS_STATE.project             #'PROJECT'
XSPROVS_STATE.stack               #'STACK'

ENVVAR PULUMI_CONFIG_PASSPHRASE   #STR
ENVVAR PULUMI_CONFIG_
 PASSPHRASE_FILE                  #Like PULUMI_CONFIG_PASSPHRASE but as 'PATH'

pulumi config|stack
--show-secrets
SOPTS.showSecrets                 #BOOL. Do not hide secrets

NPCONFIG.getSecret*(...)[->}VAL{] #Same as NPCONFIG.get*(...) but returns a }VAL{

isSecret(}VAL{)->>BOOL            #
secret({VAL})->}VAL{              #
unsecret(}VAL{)->}VAL2{           #

fn::secret(STR)->STR              #

[NC]ROPTS.additionalSecretOutputs #STR_ARR
NSREZ.secretOutputNames           #}STR_ARR{

PCONFIG_VAL|NSCONFIG_ENTRY
 |NPOUTPUT
 |[N]PROJECT_TEMPLATE_VAL.secret  #BOOL

XWEBHOOK.secret                   #STR

SCONFIG_SECRET_VAL.secure         #'ENCRYPTED_VAL'

NSTACK_SETTINGS.encryptedKey      #STR
NSTACK_SETTINGS.encryptionSalt    #STR

pulumi config set|set-all
--plaintext|secret                #Whether to encrypt or not


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSETS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.asset                           #NASSETM

ASSET                             #File

fn::stringAsset('CONTENT')
new NASSETM
 .StringAsset([>]'CONTENT')       #[N]STRING_ASSET. Child of ASSET
NSTRING_ASSET.text                #>'CONTENT'

fn::fileAsset('PATH')
new NASSETM.FileAsset([>]'PATH')  #[N]FILE_ASSET. Child of ASSET
NFILE_ASSET.path                  #>'PATH'

fn::remoteAsset('URI')
new NASSETM.RemoteAsset([>]'URI') #[N]REMOTE_ASSET. Child of ASSET
                                  #Can use HTTP[S] or file:
NREMOTE_ASSET.uri                 #>'URI'

ARCHIVE                           #Collection of ASSETs|ARCHIVEs

fn::assetArchive(ASSETS)
new NASSETM
 .AssetArchive([>]NASSETS)        #[N]ASSET_ARCHIVE. Child of ARCHIVE
[N]ASSETS                         #OBJ: KEY [N]ASSET|[N]ARCHIVE
NARCHIVE.assets                   #>NASSETS

fn::fileArchive('PATH')
new NASSETM.FileArchive([>]'PATH')#[N]FILE_ARCHIVE. Child of ARCHIVE
                                  #Either 'DIR' or PATH to *.tar|tgz|tar.gz|zip|jar
NFILE_ARCHIVE.path                #>'PATH'

fn::remoteArchive('URI')
new NASSETM                       #[N]REMOTE_ARCHIVE. Child of ARCHIVE
 .RemoteArchive([>]'URI')         #Must be *.tar|tgz|tar.gz|zip|jar
NREMOTE_ARCHIVE.uri               #>'URI'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ                               #Specific infrastructure resource, e.g. S3 Bucket
'REZ'                             #REZ name
                                  #Can be anything
RTYPE                             #REZ type
                                  #Namespaced with colons, e.g. 'pulumi:providers:aws:...'
'URN'                             #RTYPE + 'REZ' unique identifier

PROGRAM.resources.REZ             #REZ
REZ.type                          #'RTYPE'
REZ.properties.RPROP              #{VAL}

new N.Resource('RTYPE', 'REZ',
 BOOL, {{NRPROPS}}, NROPTS, BOOL2,
 BOOL3)                           #NREZ
NREZ.urn                          #}'URN'{

new N.ComponentResource
 ('TYPE', 'REZ', {{NRPROPS}},
 NKROPTS, BOOL2)                  #NKREZ. Child of NREZ
NKREZ.initialize({{OBJ}})->>OBJ   #
NKREZ.getData()->>OBJ             #
NKREZ.registerOutputs
 ([}VAL{|[>]VAL])                 #VAL is {{OBJ}}

new N.CustomResource
 ('RTYPE', 'REZ'[, {{NRPROPS}}],
 NCROPTS, BOOL3)                  #NCREZ. Child of NREZ
NCREZ.id                          #}STR{

new N.StackReference              #NSREZ. Child of NCREZ
 ('REZ'[, OBJ][, NCROPTS])        #OBJ: name {'STACK'}
NSREZ.name                        #}'STACK'{
NSREZ.outputs                     #}OBJ{
NSREZ.getOutput({'STACK'})
 ->}VAL{                          #
NSREZ.getOutputValue
 ('STACK')->>VAL                  #
NSREZ.getOutputDetails
 ('STACK')->>OBJ                  #OBJ: value VAL, secretValue VAL
NSREZ.requireOutput
 ({'STACK'})->}VAL{               #
NSREZ.requireOutputValue
 ('STACK')->>VAL                  #

rootStackResource                 #NREZ

new ResourceError
 ('MESSAGE'[, NREZ][, BOOL])      #NRERROR. Child of ERROR
NRERROR.resource                  #NREZ
NRERROR.hideStack                 #BOOL

new RunError('MESSAGE')           #ERROR

createUrn({'REZ'}, {'RTYPE'},
 {'URN'}|NREZ, 'PROJECT', 'STACK')
 ->}'URN'{                        #

pulumi state rename URN REZ       #Rename a REZ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE OPTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]RPROPS                         #RTYPE-specific options

REZ.options                       #ROPTS
[N]ROPTS                          #RTYPE-agnostic options
NCROPTS                           #Child of NROPTS
                                  #Only for NCREZ
NKROPTS                           #Child of NROPTS
                                  #Only for NKREZ

mergeOptions(N*ROPTS, N*ROPTS2)
 ->N*ROPTS3                       #

REZ.get.id                        #STR
NROPTS.id                         #{STR}
NROPTS.urn                        #'URN'
REZ.get.state.KEY                 #{VAL}

[N]ROPTS.customTimeouts.METHOD    #'NUMs|m|d'
                                  #METHOD is create|update|delete
[NC]ROPTS.deleteBeforeReplace     #BOOL
NROPTS.deletedWith                #NREZ
[N]ROPTS.ignoreChanges            #STR_ARR
[NC]ROPTS.import                  #STR
[N]ROPTS.protect                  #BOOL
[N]ROPTS.version                  #STR
[N]ROPTS.replaceOnChanges         #STR_ARR
[N]ROPTS.retainOnDelete           #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALIAS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ROPTS.aliases                     #STR_ARR
NROPTS.aliases                    #{'URN'|NALIAS}_ARR
NALIAS.name                       #{'REZ'}
NALIAS.parent                     #NREZ|{'URN'}
NALIAS.project                    #{'PROJECT'}
NALIAS.stack                      #{'STACK'}
NALIAS.type                       #{STR}

allAliases({'URN'|ALIAS}_ARR, STR,
 'RTYPE', NREZ, STR)->}'URN'{_ARR #Similar to all(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DEPENDENCIES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDENCIES ==>                  #A REZ depending on another REZ2 wait for it to be provisioned first.

INPUT DEPENDENCIES ==>            #A REZ with an INPUT using another REZ2's OUTPUT creates a dependency.

[N]ROPTS.dependsOn                #{[N]REZ[_ARR]}. Explicitely add a dependency to another REZ.

XREZ.dependencies                 #'URN'_ARR

new N.DependencyResource('URN')   #NDREZ. Child of NCREZ

new N.DependencyProviderResource
 (STR)                            #NDPROV. Child of NPROV

pulumi stack graph [PATH]         #Visualize STACK dependencies|parents as a DOT graph
                                  #Def PATH: stdout
--short-node-name                 #Label each node with its 'REZ'
--ignore-dependency|parent-edges  #Skip edges related to dependencies|parents
--dependency|parent-edge-color    #'#COLOR' (def: '#246C60|#AA6639')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]ROPTS.parent                   #{REZ}|NREZ

XDREZ.parent
XREZ.parent.urn                   #'URN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TRANSFORMATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NROPTS.transformations            #NTFUNC_ARR
NTFUNC                            #FUNC(NTARGS)[->NTRESULT]
NTARGS.name                       #'REZ'
NTARGS|NTRESULT.opts              #NROPTS
NTARGS|NTRESULT.props             #NRPROPS
NTARGS.resource                   #NREZ
NTARGS.type                       #'RTYPE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROVIDER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new N.ProviderResource
 ('PACKAGE', 'PROV'[,{{NRPROPS}}],
 NROPTS, BOOL3)                   #NPROV. Child of NCREZ
N.ProviderResource.register
 ([NPROV])[->>STR]                #

[N]ROPTS.provider                 #{PROV}|NPROV
[NK]ROPTS.providers.KEY           #{REZ}

NREZ.getProvider(STR)->NPROV      #

REZ.defaultProvider               #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DYNAMIC PROVIDER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


N.provider.main(NPROV, STR_ARR)->>#

NPROV.check                       #FUNC('URN', IVAL, IVAL2)->>OBJ:
                                  #  - inputs IVAL3
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROV.create                      #FUNC('URN', IVAL)->>OBJ:
                                  #  - id 'ID'
                                  #  - outs OVAL
NPROV.delete                      #FUNC('ID', 'URN', OVAL)->>
NPROV.diff                        #FUNC('ID', 'URN', OVAL, IVAL)->>OBJ:
                                  #  - changes BOOL
                                  #  - deleteBeforeReplace BOOL
                                  #  - replaces STR_ARR
                                  #  - stables STR_ARR
NPROV.read                        #FUNC('ID', 'URN'[, OVAL])->>OBJ:
                                  #  - id 'ID'
                                  #  - props OVAL
NPROV.update                      #FUNC('ID', 'URN', OVAL, IVAL)->>OBJ:
                                  #  - outs OVAL

NPROV.construct                   #FUNC(STR, 'RTYPE', {{NRPROPS}}, NKROPTS)->>OBJ:
                                  #  - urn {'URN'}
                                  #  - state {{OBJ}}
NPROV.call                        #FUNC('TOKEN', {{NRPROPS}})->>OBJ:
                                  #  - outputs OVAL
                                  #  - failures OBJ_ARR:
                                  #     - property STR
                                  #     - reason STR
NPROV.invoke                      #FUNC('TOKEN', IVAL)->>OBJ (same return value as call())

NPROV.schema                      #'JSON'
NPROV.version                     #'VERSION'

new N.dynamic.Resource
 (NPROV, 'REZ', {{NRPROPS}},
 NCROPTS, 'MODULE', 'RTYPE')      #NDPROV. Child of NCREZ

NDPROV                            #Like NPROV except:
                                  #  - only check|create|delete|diff|read|update
                                  #  - IVAL|OVAL -> {IVAL|OVAL}
                                  #  - no 'URN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi import TYPE NAME ID        #Print declaration to add a REZ not currently managed by Pulumi

--generate-code                   #BOOL. If true (def), print REZ declaration
--out|-o                          #'DIR'

--protect                         #BOOL. If true (def), make REZs protected

--from                            #STR. Converter plugin.

--provider                        #NAME='URN' of PROV
--parent                          #NAME='URN' of parent
--properties                      #'PROP,...'

-f                                #'PATH.json' to import multiple resources.
                                  #OBJ:
                                  #  - nameTable.NAME 'URN': of PROV|parent
                                  #  - resources IMPORT_REZ_ARR
IMPORT_REZ.type                   #'RTYPE'
IMPORT_REZ.name                   #'REZ'
IMPORT_REZ.id                     #STR
IMPORT_REZ.provider               #'PROV'
IMPORT_REZ.parent                 #'REZ'
IMPORT_REZ.version                #STR
IMPORT_REZ.properties             #'PROP'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROJECT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT                           #Sets of REZs to provision, and related settings
                                  #Set in Pulumi.yaml|json
                                  #Used with any runtime, not only YAML

pulumi new                        #Create a new PROJECT + STACK
--dir                             #'DIR' where to generate (def: '.')
--force|-f                        #Override existing files
--generate-only|-g                #Do not create a STACK, save config nor install dependencies

getProject()->'PROJECT'           #
GLOBALS.pulumi.project            #'PROJECT'

NWOPTS.projectSettings            #NPROJECT
NWORKSPACE.saveProjectSettings
 (NPROJECT)->>                    #
NWORKSPACE.projectSettings()
 ->>NPROJECT                      #

[N]PROJECT.name                   #'PROJECT'
pulumi new --name|-n              #'PROJECT' (def: prompted)

[N]PROJECT.description            #STR
pulumi new --description|-d       #PROJECT.description (def: prompted)

[N]PROJECT.main                   #'DIR' of PROGRAM
                                  #Def: '.'
PROJECT.options.refresh           #undefined|'always'

NPROJECT.author                   #STR
NPROJECT.license                  #STR
NPROJECT.website                  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROGRAM            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAMS ==>                      #File declaring [N]REZs. One per PROJECT

PROGRAM                           #YAML runtime uses same file as PROJECT (Pulumi.yaml|json) as PROGRAM
index.js|ts                       #NPROGRAM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BACKEND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[N]PROJECT.backend.url            #'BACKEND' among:
ENVVAR PULUMI_BACKEND_URL         #  - 's3://BUCKET' (AWS S3)
                                  #  - 'gs://BUCKET' (GCP GCS)
                                  #  - 'azblob://BUCKET' (Azure Blob)

pulumi state upgrade              #Migrate to latest version of current BACKEND

pulumi console                    #Open web page to Pulumi Console


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi new|up|policy new TEMPLATE #Def TEMPLATE: interactive choice
                                  #TEMPLATE can also be a:
                                  #  - PATH
                                  #  - URL to GitHub|GitLab|BitBucket repository|branch
pulumi new --list-templates|-l    #List TEMPLATEs then exit
pulumi [policy] new ...
--offline|-o                      #Only use locally cached TEMPLATEs

[N]PROJECT.template               #[N]PROJECT_TEMPLATE
[N]PROJECT_TEMPLATE.description   #STR
NPROJECT_TEMPLATE.important       #BOOL
NPROJECT_TEMPLATE.quickstart      #STR

[N]PROJECT_TEMPLATE.config.KEY    #[N]PROJECT_TEMPLATE_VAL
[N]PROJECT_TEMPLATE_VAL.default   #STR
[N]PROJECT_TEMPLATE_VAL
 .description                     #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PACKAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi convert                    #Convert a PROGRAM from one runtime to another
--from                            #STR (def: 'yaml'). Converter plugin.
--language                        #STR. Language plugin
--mappings                        #STR
--generate-only                   #Do not install dependencies
--out                             #'DIR' (def: '.')

pulumi package gen-schema PACKAGE #Get a PACKAGE schema.json
                                  #PACKAGE can be name|URL

pulumi package gen-sdk STR        #Generate a PACKAGE SDK
                                  #STR can be:
                                  #  - 'PACKAGE'
                                  #  - PATH to schema.json
                                  #  - PATH to plugin binary
--out|-o                          #'DIR' (def: './sdk')
--language                        #'RUNTIME' or 'all' (def)

pulumi schema check               #Validate a PACKAGE schema


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGIN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi plugin install             #Install a PLUGIN
 [KIND NAME [VERSION]]            #Def KIND|NAME: guessed for current PROJECT

--exact                           #Pin VERSION, instead of allowing any later one
--reinstall                       #Re-install existing PLUGIN

--file|-f                         #PATH to PLUGIN FILE|DIR|ARCHIVE, instead of downloading it
--server                          #'URL' where to download PLUGINs
--checksum                        #'SHA2526' of PLUGIN archive

NWORKSPACE.installPlugin
 ('PLUGIN', 'VERSION', 'KIND')->> #
NWORKSPACE.installPluginFromServer
 ('PLUGIN', 'VERSION','SERVER')->>#

pulumi plugin ls                  #List plugins
--project|-p                      #'PROJECT' (def: current one)

NWORKSPACE.listPlugins()
 ->NPLUGIN_INFO_ARR               #

pulumi plugin rm                  #Uninstall a PLUGIN
 [KIND NAME [VERSION[_RANGE]]]    #Def KIND|NAME: cache only
                                  #Def VERSION: all
--all|-a                          #Remove all PLUGINs

NWORKSPACE.removePlugin('PLUGIN',
 'VERSION_RANGE', 'KIND')->>      #

PROJECT.plugins.KINDs             #PLUGIN_INFO
                                  #KIND is NPLUGIN_INFO.kind

PLUGIN_INFO.kind                  #'analyzer|language|resource'
[N]PLUGIN_INFO.name               #'PLUGIN'
[N]PLUGIN_INFO.path               #'DIR'
[N]PLUGIN_INFO.version            #'VERSION'
NPLUGIN_INFO.serverURL            #'URL'
NPLUGIN_INFO.size                 #NUM
NPLUGIN_INFO.installTime          #DATE
NPLUGIN_INFO.lastUsedTime         #DATE

[N]ROPTS|[N]IOPTS
 .pluginDownloadURL               #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PACKAGE FUNCTION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fn::invoke(OBJ)->STR              #Call a package FUNC. OBJ:
                                  #  - function STR
                                  #  - arguments.ARG {VAL}
                                  #  - options IOPTS
[N]IOPTS.provider                 #{PROV}|NPROV
[N]IOPTS.parent                   #{REZ}|NREZ
[N]IOPTS.version                  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LOCAL WORKSPACE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NA.LocalWorkspace
 .create([NWOPTS])->>NWORKSPACE   #

NSTACK.workspace                  #NWORKSPACE

pulumi ... --cwd|-C               #'DIR' (def: '.') used for:
GLOBALS.pulumi.cwd                #  - main files like Pulumi[.STACK].yaml, index.js|ts, etc.
NWOPTS|NWORKSPACE.workDir         #  - all local paths
NQOPTS.workDir                    #Same. Not with NQOPTS.projectName|program

NWOPTS|NWORKSPACE.pulumiHome      #'DIR' where to store plugins, workspaces, templates, credentials.
ENVVAR PULUMI_HOME                #Def: ~/.pulumi

NWOPTS|NWORKSPACE.envVars         #OBJ

NWOPTS|NWORKSPACE|NQOPTS.program  #FUNC()[->>OBJ]
SOPTS.program                     #Same. Only with preview|up()

NWORKSPACE.postCommandCallback    #FUNC('STACK')->>
NWORKSPACE.serializeArgsForOp     #FUNC('STACK')->>STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK SET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi stack init [ORG/]STACK     #Create an empty STACK
                                  #Def ORG: current one
--copy-config-from                #'STACK2'. Copy its config
--no-select                       #Do not select the STACK
--teams                           #'TEAM'_ARR with read|write permissions

NA.LocalWorkspace.create|select
 |createOrSelectStack
 (NQOPTS[, NWOPTS])->>NSTACK#
NQOPTS.stackName                  #'STACK'
NQOPTS.projectName                #'PROJECT'

NA.Stack
 .create|select|createOrSelect
 ('STACK', NWORKSPACE)->>NSTACK2  #
NWORKSPACE
 .create|selectStack('STACK')->>  #
pulumi stack select [STACK]       #Select the STACK, i.e. make it the current one
                                  #Def STACK: interactive prompt
--create|-c                       #Upserts

pulumi stack unselect             #No more current STACK

pulumi about|cancel|config|console
 |destroy|import|logs|new|preview
 |refresh|stack|state|up|watch
--stack|-s                        #'STACK' (def: current) instead of current one

pulumi stack rename STACK         #Rename a STACK

POST STACK_URL/transfer           #Req: 'ORG'
                                  #Res: empty

DELETE STACK_URL                  #Req: OBJ
                                  #  - force BOOL
                                  #Res: empty
NWORKSPACE.removeStack('STACK')->>
pulumi stack rm [STACK]           #Remove an empty STACK and its config
--preserve-config                 #Do not delete the STACK config
--force|-f                        #Delete even if STACK has REZs

NWORKSPACE
 .export*|import*|*Config*|*Tag*
 ('STACK', ...)                   #Same as NSTACK.exportStack|...(...)
NWORKSPACE.stackOutputs('STACK')  #Same as NSTACK.outputs()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           STACK GET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACKS_URL                        #API_URL/stacks
USER_STACKS_URL                   #API_URL/user/stacks
STACK_URL                         #STACKS_URL/ORG/PROJECT/STACK

GET USER_STACKS_URL               #Req: empty
                                  #Res: OBJ: stacks XSTACK_SHORT_ARR
NWORKSPACE.listStacks()
 ->>NSTACK_SUMMARY_ARR
pulumi stack ls                   #All STACKs of current PROJECT
--all|-a                          #Print for all PROJECTs
--organization|-o                 #'ORG'
--project|-p                      #'PROJECT'
--tag|-t                          #'TAG=VAL' filter

getStack()->'STACK'               #
GLOBALS.pulumi.stack              #'STACK'

pulumi stack ...
--show-name                       #Print 'STACK' then exit
--show-ids|-i                     #Show REZs IDs
--show-urns|-u                    #Show REZs URNs

GET STACK_URL                     #Req: empty
                                  #Res: XSTACK
NWORKSPACE.stack()
 [->>NSTACK_SUMMARY]              #

XSTACK[_SHORT].orgName            #'ORG'
XSTACK[_SHORT].projectName        #'PROJECT'
XSTACK[_SHORT].stackName          #'STACK'
NSTACK_SUMMARY.name               #'STACK'
XSTACK_SHORT|NSTACK_SUMMARY
 .resourceCount                   #NUM
NSTACK_SUMMARY.current            #BOOL
XSTACK.activeUpdate               #'UUID'
NSTACK_SUMMARY.updateInProgress   #BOOL
XSTACK_SHORT|NSTACK_SUMMARY
 .lastUpdate                      #DATE_NUM
NSTACK_SUMMARY.url                #'URL'
XSTACK.version                    #NUM

XSTACK.currentOperation           #XCUR_OP
XCUR_OP.kind                      #STR
XCUR_OP.author                    #STR
XCUR_OP.started                   #DATE_NUM

NSTACK.name                       #'STACK'

NA.fullyQualifiedStackName
 ('ORG', 'PROJECT', 'STACK')->STR #Returns 'ORG/PROJECT/STACK'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STACK SETTINGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_SETTINGS                    #STACK-specific settings
                                  #Persisted at Pulumi.STACK.yaml
PROJECT.stackConfigDir            #'DIR'

NWOPTS.stackSettings              #NSTACK_SETTINGS
NWORKSPACE.saveStackSettings
 ('STACK', NSTACK_SETTINGS)->>    #
NWORKSPACE.stackSettings()
 ->>NSTACK_SETTINGS               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REMOTE WORKSPACE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NA.RemoteWorkspace.create|select
 |createOrSelectStack
 (NQROPTS[, OPTS])->>NRSTACK      #

OPTS.envVars.ENVVAR               #STR or { secret STR }
OPTS.preRunCommands               #STR_ARR

OPTS.skipInstallDependencies      #BOOL (def: false)
ENVVAR PULUMI_PREFER_YARN         #If 'true', use yarn instead of npm

NQROPTS.stackName                 #'STACK'
NQROPTS.projectPath               #STR

NQROPTS.branch                    #STR
NQROPTS.commitHash                #STR
NQROPTS.url                       #'URL'

NQROPTS.auth                      #RGIT_AUTH
NQROPTS_AUTH.username             #STR
NQROPTS_AUTH.password             #STR
NQROPTS_AUTH.personalAccessToken  #STR
NQROPTS_AUTH.sshPrivateKey        #STR
NQROPTS_AUTH.sshPrivateKeyPath    #'PATH'

NRSTACK                           #Like NSTACK except:
                                  #  - no workspace property
                                  #  - no create|select|createOrSelect()
                                  #  - no last BOOL arg in history()
                                  #  - SOPTS: only onEvent|onOutput()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUTOMATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NSTACK.preview([SOPTS])->>NURESULT
pulumi preview                    #Show a preview of `pulumi up`

NSTACK.up([SOPTS])->>NURESULT
pulumi up                         #Create|update REZs in a STACK

NSTACK.cancel()->>                #Cancel current update
pulumi cancel [STACK]             #Does not rollback

NSTACK.refresh([SOPTS])->>NDRESULT
pulumi refresh                    #Refresh REZs in a STACK
--import-pending-creates          #'PROV_URN'_ARR of pending creates
--clear-pending-creates           #Remove all pending creates from the state
--skip-pending-creates            #Do not import pending creates in interactive mode

pulumi watch                      #Update REZs in watch mode
--path                            #'DIR|FILE'_ARR to watch (def: '.')

NSTACK.destroy([SOPTS])->>NDRESULT
pulumi destroy                    #Destroy all REZs in a STACK
--exclude-protected               #Keep protected REZs
--remove                          #Also destroy STACK itself and its config file

pulumi state delete URN           #Delete a REZ from the STACK
--force                           #Also delete protected REZs

pulumi state unprotect URN        #Make a REZ not protected anymore
--all                             #Apply to all REZs

NDRESULT|NURESULT.stdout|stderr   #STR

pulumi destroy|import|refresh|up
--skip-preview|-f                 #Do not compute a preview first

pulumi destroy|preview|up|watch
--refresh|-r                      #If 'true', refresh STACK state first

SOPTS.expectNoChanges
pulumi preview|refresh|up ...
--expect-no-changes               #Fail if there are any changes

SOPTS.target                      #'URN'_ARR
pulumi destroy|preview|refresh|up
--target|-t                       #'URN'. Only operate specific REZs, including its child REZs
                                  #Can use wildcards *|**

SOPTS.replace                     #STR_ARR
pulumi preview|up ...
--replace                         #Like --target, but for replacements
--target-replace                  #Combine --target + --replace

SOPTS.targetDependents
pulumi destroy|preview
 |state delete|up
--target-dependents               #Also operate on dependent REZs

SOPTS.message
pulumi destroy|import|preview
 |refresh|up|watch
--message|-m                      #'MESSAGE' describing the operation

SOPTS.parallel
pulumi destroy|import|preview
 |refresh|up|watch
--parallel|-p                     #NUM (def: unlim). Operates on NUM REZs in parallel

SOPTS.diff
pulumi destroy|import|preview
 |refresh|up
--diff                            #Show change as diff

pulumi destroy|preview|refresh
 |up|watch
--show-replacement-steps          #Show replacement as two steps (creation then deletion) instead of one
--show-sames                      #Show REZs that won't change

pulumi up
--show-reads                      #Show REZs being read, not only ones in the STACK

pulumi destroy|import|preview
 |refresh|up
--suppress-permalink              #If 'true', do no show state permalinks

SOPTS.debug
pulumi destroy|import|preview
 |refresh|up|watch
--debug|-d                        #Debug logging

SOPTS.logFlow
pulumi ... --logflow              #BOOL

SOPTS.logToStdErr
pulumi ... --logtostderr          #BOOL. Log to stderr instead of to files

SOPTS.logVerbosity
pulumi ... --verbose|-v           #NUM. Verbose logging

SOPTS.tracing
pulumi ... --tracing              #'URI' (including file: URI) where to send traces

SOPTS.plan                        #STR
                                  #Only with preview|up()

SOPTS.onEvent                     #FUNC(ENGINE_EVENT)

SOPTS.userAgent                   #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HISTORY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NSTACK.history
 ([NUM[, NUM2[, BOOL]]])
 ->>NUPDATE_SUMMARY_ARR           #NUM is like --page-size, NUM2 --page, BOOL --show-secrets
pulumi stack history              #Print STACK previous upates
--page-size                       #NUM (def: 10), for pagination
--page                            #NUM2 (def: 1), for pagination
--full-dates                      #Show absolute dates, not relative

NSTACK.info([BOOL])
 [->>NUPDATE_SUMMARY]             #

NDRESULT.summary                  #NUPDATE_SUMMARY
NUPDATE_SUMMARY.Deployment        #'JSON'
NUPDATE_SUMMARY.startTime|endTime #DATE
NUPDATE_SUMMARY.environment.ENVVAR#'VAL'
NUPDATE_SUMMARY.kind              #'update|preview|refresh|rename|destroy|import'
NUPDATE_SUMMARY.message           #STR
NUPDATE_SUMMARY.result            #'not-started|in-progress|succeeded|failed'
NUPDATE_SUMMARY.version           #NUM

NUPDATE_SUMMARY.resourceChanges   #OP_MAP
NURESULT.changeSummary            #OP_MAP
OP_MAP.OP_TYPE                    #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            UPDATES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UPDATES_URL                       #STACK_URL/updates

GET UPDATES_URL/UPDATE_ID         #Req: empty
                                  #Res: OBJ:
                                  #  - status STR
                                  #  - events XEVENT_ARR
GET UPDATES_URL                   #Req: OBJ
                                  #  - output-type 'service' or 'cli' (def)
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/latest/previews   #Req: empty
                                  #Res: updates XUPDATE_ARR
GET UPDATES_URL/UPDATE_ID/events  #Req: empty
                                  #Res: events XEVENT_ARR

XUPDATE.updateID                  #'UPDATE_ID'
XUPDATE.version                   #NUM
XUPDATE.latestVersion             #NUM

XUPDATE.info                      #XINFO
XINFO.kind                        #STR
XINFO.start|endTime               #DATE_NUM
XINFO.message                     #STR
XINFO.environment                 #OBJ
XINFO.config.KEY                  #OBJ
XINFO.result                      #STR
XINFO.version                     #NUM
XINFO.resourceChanges.KEY         #NUM

XUPDATE.githubCommitInfo          #XGITINFO
XGITINFO.slug                     #'USER/REPO'
XGITINFO.sha                      #'COMMIT_HASH'
XGITINFO.url                      #'URL' to commit

XGITINFO.author                   #XUSER
XUPDATE.requestedBy               #XUSER

XEVENT.timestamp                  #DATE_NUM
XEVENT.type                       #'EVENT_TYPE'
XEVENT.EVENT_TYPE                 #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EXPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi stack export               #Serialize STACK
--version                         #STR (def: latest)

pulumi stack export|import        #
--file                            #'PATH' of serialized STACK (def: stdout)

pulumi stack import               #Parse STACK, adding it
--force|-f                        #Allow apparent errors

NSTACK.exportStack()->>NDEPLOYMENT#
NSTACK.importStack(NDEPLOYMENT)->>#

NDEPLOYMENT.deployment            #VAL
NDEPLOYMENT.version               #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STATE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET STACK_URL/export              #Req: empty
                                  #Res: XSTACK_STATE

XSTACK_STATE.version              #NUM
XSTACK_STATE.deployment           #XDEPLOYMENT

XDEPLOYMENT.manifest              #XMANIFEST
XMANIFEST.time                    #'DATE'
XMANIFEST.magic                   #'HEX'
XMANIFEST.version                 #'xX.Y.Z'

XDEPLOYMENT.resources             #XDREZ_ARR
XDREZ.urn                         #'URN'
XDREZ.id                          #'UUID'
XDREZ.type                        #STR
XDREZ.custom                      #BOOL
XDREZ.inputs.KEY                  #VAL
XDREZ.outputs.KEY                 #VAL
XDREZ.provider                    #'PROV_URN'
XDREZ.propertyDependencies        #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS_URL                          #STACK_URL/tags

POST TAGS_URL                     #Req: XTAGS
                                  #Res: empty
XTAGS.name                        #'TAG'
XTAGS.value                       #'VAL'
NSTACK.setTag('TAG', 'VAL')->>    #
pulumi stack tag set TAG VAL      #

XSTACK.tags.TAG                   #'VAL'
NSTACK.listTags()->>OBJ           #
pulumi stack tag ls               #

NSTACK.getTag('TAG')->>'VAL'      #
pulumi stack tag get TAG          #

DELETE TAGS_URL/TAG               #Req: empty
                                  #Res: empty
NSTACK.removeTag('TAG')->>        #
pulumi stack tag rm TAG           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi policy new                 #Create new POLICY_PACK
--dir
--force|-f
--generate-only|-g                #Like pulumi new ...

pulumi policy rm
 ORG/POLICY_PACK                  #Remote a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'all'

pulumi policy ls                  #List all POLICY_PACKs
pulumi policy group ls            #List all POLICY_GROUPs

pulumi policy publish [ORG]       #Publish a POLICY_PACK to the BACKEND
                                  #Def ORG: current one
                                  #Must first be disabled

pulumi policy disable
 ORG/POLICY_PACK                  #Disable a POLICY_PACK
--version                         #'POLICY_PACK_VERSION' (def: all)

pulumi policy disable|enable
--policy-group                    #POLICY_GROUP (def: default one)

pulumi policy enable
 ORG/POLICY_PACK                  #Enable a POLICY_PACK
 POLICY_PACK_VERSION              #POLICY_PACK_VERSION can be 'latest'

pulumi policy enable
 |validate-config ...
--config                          #'PATH' to POLICY_PACK config

pulumi policy validate-config
 ORG/POLICY_PACK
 POLICY_PACK_VERSION              #Validate a POLICY_PACK config

pulumi preview|up|watch ...
SOPTS.policyPacks                 #STR_ARR
--policy-pack                     #POLICY_PACK_ARR

XUPDATE.policyPacks               #XPOLICYPACK_ARR
XPOLICYPACK.name                  #STR
XPOLICYPACK.displayName           #STR
XPOLICYPACK.version               #NUM
XPOLICYPACK.versionTag            #STR

pulumi preview|up|watch ...
SOPTS.policyPackConfigs           #STR_ARR
--policy-pack-config              #'PATH' to POLICY_PACK config

XPOLICYPACK.config                #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORG_URL                           #API_URL/orgs/ORG

pulumi org set-default ORG        #Set default ORG for current BACKEND
pulumi org get-default            #Print default ORG for current BACKEND

getOrganization()->'ORG'          #

pulumi login --default-org        #'ORG'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MEMBERS_URL                       #ORG_URL/members

GET MEMBERS_URL                   #Req: OBJ
                                  #  - type 'backend'
                                  #Res: members XMEMBER_ARR
POST MEMBERS_URL/USER             #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
PATCH MEMBERS_URL/USER            #Req: XMEMBER
                                  #  - only role
                                  #Res: empty
DELETE MEMBERS_URL/USER           #Req: empty
                                  #Res: empty

XMEMBER.role                      #'admin|member'
XMEMBER.knownToPulumi             #BOOL
XMEMBER.virtualAdmin              #BOOL

XMEMBER.user                      #XUSER
XUSER.name                        #'USER'
XUSER.githubLogin                 #STR
XUSER.avatarUrl                   #'URL'
XUSER.email                       #'EMAIL'

pulumi whoami                     #Prints current 'USER'
NWORKSPACE.whoAmI()->>NWHO        #
NWHO.organizations                #'ORG'_ARR
NWHO.url                          #'URL'
NWHO.user                         #'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEAM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEAMS_URL                         #ORG_URL/teams

GET TEAMS_URL                     #Req: empty
                                  #Res: teams XTEAM_ARR
POST TEAMS_URL/TEAM_KIND          #Req: XTEAM
                                  #  - not kind|userRole
                                  #Res: XTEAM
PATCH TEAMS_URL/TEAM              #Req: OBJ
                                  #  - memberAction 'add|remove'
                                  #  - member 'USER'
                                  #Res: empty
PATCH TEAMS_URL/TEAM              #Req: OBJ:
                                  #  - addStackPermission|removeStack OBJ
                                  #     - projectName 'PROJECT'
                                  #     - stackName 'STACK'
                                  #     - permission 101 (read), 102 (edit) or 103 (admin)
                                  #Res: empty
DELETE TEAMS_URL/TEAM             #Req: empty
                                  #Res: empty

XTEAM.kind                        #TEAM_KIND. Either 'pulumi' or 'github'
XTEAM.name                        #'TEAM'
XTEAM.displayName                 #STR
XTEAM.description                 #STR
XTEAM.userRole                    #STR
XTEAM.members                     #XUSER_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCESS TOKEN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOKENS_URL                        #API_URL/user/tokens

GET TOKENS_URL                    #Req: empty
                                  #Res: tokens XTOKEN_ARR
POST TOKENS_URL                   #Req: XTOKEN
                                  #  - only description
                                  #Res: XTOKEN
DELETE TOKENS_URL/TOKEN_ID        #Req: empty
                                  #Res: empty

XTOKEN.id                         #'TOKEN_ID'
XTOKEN.description                #STR
XTOKEN.lastUsed                   #DATE_NUM
XTOKEN.tokenValue                 #'ACCESS_TOKEN'

ACCESS_TOKEN                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization:
 token ACCESS_TOKEN [C]           #
ENVVAR PULUMI_ACCESS_TOKEN        #'ACCESS_TOKEN'

pulumi login [URL]                #Login
                                  #Prompt for ENVVAR PULUMI_ACCESS_TOKEN if not present
                                  #Cache credentials locally
                                  #URL is for either:
                                  #  - default: Pulumi Cloud
                                  #  - self-hosted REST API
                                  #  - 'BACKEND'
                                  #  - local, using file://PATH
                                  #     - stores under PATH/.pulumi
--insecure                        #No SSL

pulumi login|logout
--local                           #Same as using URL file://~
--cloud-url                       #'URL'

pulumi logout [URL]               #Logout
                                  #Def URL: current backend
--all                             #Logout of all backends


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOKS_URL                      #ORG_URL/hooks

POST WEBHOOKS_URL                 #Req: XWEBHOOK
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL/WEBHOOK          #Req: empty
                                  #Res: XWEBHOOK
GET WEBHOOKS_URL                  #Req: empty
                                  #Res: XWEBHOOK_ARR

XWEBHOOK.name                     #'WEBHOOK'
XWEBHOOK.displayName              #STR
XWEBHOOK.organizationName         #'ORG'
XWEBHOOK.payloadUrl               #'URL'
XWEBHOOK.active                   #BOOL

GET WEBHOOKS_URL/WEBHOK/deliveries#Req: empty
                                  #Res: XWEBHOOK_RES_ARR
POST WEBHOOKS_URL/WEBHOOK/ping    #Req: empty
                                  #Res: XWEBHOOK_RES

XWEBHOOK_RES.id                   #'UUID'
XWEBHOOK_RES.kind                 #STR
XWEBHOOK_RES.payload              #'JSON_OBJ'
XWEBHOOK_RES.requestHeaders       #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseCode         #NUM
XWEBHOOK_RES.responseHeaders      #'VAR: VAL\r\n...'
XWEBHOOK_RES.responseBody         #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUDIT LOGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUDIT_LOGS_URL                    #ORG_URL/auditlogs

GET AUDIT_LOGS_URL                #Req: OBJ
                                  #  - startTime DATE_NUM
                                  #  - userFilter 'USER'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR
GET AUDIT_LOGS_URL/export         #Req: OBJ:
                                  #  - startTime|userFilter: like above
                                  #  - format 'csv' (def) or 'cef'
                                  #Res: auditLogEvents XAUDIT_LOG_ARR, but as CSV|CEF

XAUDIT_LOG.timestamp              #DATE_TIME
XAUDIT_LOG.sourceIP               #'IP'
XAUDIT_LOG.event                  #'MESSAGE'
XAUDIT_LOG.description            #STR
XAUDIT_LOG.user                   #XUSER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INSIGHTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REZ_URL                           #ORG_URL/resources

GET REZ_URL/summary               #Req: OBJ
                                  #  - granularity 'hourly|daily|weekly|monthly|yearly'
                                  #  - lookbackDays NUM
                                  #Res: summary REZ_COUNT_ARR

REZ_COUNT.resources               #NUM
REZ_COUNT.year|month|weekNumber
 |day|hour                        #NUM

SEARCH_REZ_URL                    #ORG_URL/search/resources

GET SEARCH_REZ_URL                #Req: XSEARCH_REZ_REQ
                                  #Res: XREZ_INFO
GET SEARCH_REZ_URL/export         #Req: XSEARCH_REZ_REQ
                                  #  - no facet
                                  #Res: XREZ_ARR, as CSV

XSEARCH_REZ_REQ.query             #STR
XSEARCH_REZ_REQ.sort              #'VARR'_ARR
XSEARCH_REZ_REQ.asc               #BOOL

XREZ_INFO.resources               #XREZ_ARR

XSEARCH_REZ_REQ.facet             #'VARR'_ARR
XREZ_INFO.aggregations            #XAGGR
XAGGR.results                     #XAGGR_RESULT_ARR
XAGGR_RESULT.name                 #STR
XAGGR_RESULT.count                #NUM
XAGGR.others                      #NUM

XREZ.created                      #'DATE'
XREZ.modified                     #'DATE'
XREZ.custom                       #BOOL
XREZ.delete                       #BOOL
XREZ.id                           #STR
XREZ.module                       #STR
XREZ.name                         #'REZ'
XREZ.package                      #'PACKAGE'
XREZ.pending                      #'creating|deleting|updating|reading|importing'
XREZ.project                      #'PROJECT'
XREZ.protected                    #BOOL
XREZ.provider.urn                 #'PROV_URN'
XREZ.stack                        #'STACK'
XREZ.type                         #'RTYPE'
XREZ.urn                          #'URN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


pulumi logs                       #Show RTYPE-specific logs for a REZ
--resource|-r                     #'[RTYPE::]REZ'|'URN' (def: all)
--follow|-f                       #Print in realtime
--since                           #'NUMs|m|h' (def: '1h')

N.log.LEVEL('MESSAGE'
 [, NREZ][, NUM][, BOOL])->>      #
N.log.hasErrors()->BOOL           #
