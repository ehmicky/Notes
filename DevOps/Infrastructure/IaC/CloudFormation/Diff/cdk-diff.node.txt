
            
   CDK-DIFF  
            



VERSION ==>                       #Part of cdk monorepo (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


diffTemplate
 (TEMPLATE_OBJ, TEMPLATE_OBJ2)
 ->DTEMPLATE                      #Compute differences between two CloudFormation TEMPLATEs

DTEMPLATE.differenceCount         #NUM of differences
DTEMPLATE.isEmpty                 #BOOL. differenceCount === 0

DTEMPLATE.awsTemplateFormatVersion
 |description|transform           #DVAL. undefined if no difference
DTEMPLATE.metadata|parameters
 |mappings|conditions|outputs     #DOBJ
DTEMPLATE.unknown                 #DOBJ for unknown TEMPLATE_OBJ.* properties

DOBJ                              #Difference between TEMPLATE.** plain OBJ values
DOBJ.changes.PROP                 #DVAL. undefined if no difference
DOBJ.get('PROP')->DVAL            #Same but throws if no difference
DOBJ.logicalIds                   #'PROP'_ARR with differences
DOBJ.differenceCount              #NUM of different PROPs
DOBJ.forEachDifference            #Call FUNC() on each different PROP
 (FUNC('PROP', DVAL))             #Ordered: isRemoval true, isAddition true, isUpdate true, isDifferent true
DOBJ.filter
 (FUNC([DVAL])->BOOL)
 ->DOBJ2                          #Omit PROP if BOOL false

DVAL                              #Difference between TEMPLATE.** non-OBJ values
DVAL.oldValue|newValue            #VAL from TEMPLATE_OBJ[2]
DVAL.isDifferent                  #BOOL. False when different syntax, but same semantics (e.g. null <=> undefined)
DVAL.isAddition|isRemoval|isUpdate#BOOL. Depending on whether oldValue|newValue undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEMPLATE.resources               #DRESOURCES. Differences in TEMPLATE.Resources
DRESOURCES
 .changes|get|logicalIds|filter   #Like DOBJ.* but using DRESOURCE instead of DVAL

DRESOURCE                         #Differences in TEMPLATE.Resources.RESOURCE
                                  #Inherits DVAL
DRESOURCE.old|newResourceType     #'RESTYPE'. undefined if new|deleted RESOURCE
DRESOURCE.resourceType            #newResourceType || oldResourceType. Throws if resourceTypeChanged
DRESOURCE.resourceTypeChanged     #BOOL. Whether 'RESTYPE' changed. false if new|deleted RESOURCE
DRESOURCE.changeImpact            #ENUM ResourceImpact among:
                                  #  - 'WILL_CREATE': new RESOURCE
                                  #  - 'WILL_DESTROY': deleted RESOURCE
                                  #  - 'WILL_ORPHAN': deleted RESOURCE with DeletionPolicy 'Retain'
                                  #  - 'WILL_REPLACE': replacement
                                  #  - 'MAY_REPLACE': potential replacement
                                  #  - 'WILL_UPDATE': no replacement
                                  #  - 'NO_CHANGE': no diff
                                  #Uses CloudFormation spec to know
DRESOURCE.otherChanges.PROP       #DVAL. TEMPLATE.Resources.RESOURCE.PROP undefined if no difference
                                  #Not for PROP `Properties`
DRESOURCE.differenceCount         #NUM of different PROPs|RESPROPs
RES.forEachDifference
 (FUNC('Property|Other',          #Call FUNC() on each different PROP|RESPROP
 'PROP|RESPROP', DVAL))           #Alphabetical order

DRESOURC.old|newProperties.RESPROP#VAL. undefined if new|deleted RESOURCE
DRESOURCE.propertyUpdates.RESPROP #DRESPROP. undefined if no difference
DRESOURCE.setPropertyChange
 ('RESPROP', DRESPROP)            #
DRESPROP                          #Differences in TEMPLATE.Resources.RESOURCE.Properties.RESPROP
                                  #Inherits DVAL
DRESPROP.changeImpact             #Same as DRESOURCE.changeImpact, but only for a RESPROP, not a RESOURCE
                                  #No 'WILL_CREATE', 'WILL_DESTROY', 'WILL_ORPHAN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IAM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEMPLATE.iamChanges              #DIAM. Differences in IAM POLICYs
                                  #Includes RESOURCE additions|deletions
DIAM.hasChanges                   #BOOL. Whether any differences
DIAM.permissionsBroadened         #BOOL. Whether any difference grants more privileges
DTEMPLATE.permissionsAnyChanges   #BOOL. DIAM|DSGROUP.hasChanges
DTEMPLATE.permissionsBroadened    #BOOL. DIAM.permissionsBroadened || DSGROUP.rulesAdded

DIAM.managedPolicies              #DCOLL of DMPOLICYs
                                  #Differences in managed POLICYs: IAM USER|GROUP|ROLE.ManagedPolicyArns
DMPOLICY.identityArn              #'${USER|GROUP|ROLE}'
DMPOLICY.managedPolicyArn         #'POLICY_ARN'

DIAM.statements                   #DCOLL of DSTATEMENTs
                                  #Differences in:
                                  #  - inline POLICYs: IAM USER|GROUP|ROLE.Policies
                                  #  - resource-level POLICYs: IAM ROLE.AssumeRolePolicyDocument, Lambda FUNC.Policy, ApiGateway API.Policy, etc.
DSTATEMENT.sid                    #STR. STATEMENT.Sid
DSTATEMENT.effect                 #ENUM Effect Allow|Deny. STATEMENT.Effect
DSTATEMENT.actions                #DTARGETS. STATEMENT.[Not]Actions
DSTATEMENT.resources              #DTARGETS. STATEMENT.[Not]Resources
                                  #Def: ['*']
                                  #'*' is substituted to 'AWS:${USER|GROUP|ROLE}' or 'AWS:USER|GROUP|ROLE'
DSTATEMENT.principals             #DTARGETS. STATEMENT.[Not]Principals
                                  #Def: ['*']
                                  #'*' is substituted to: '${USER|GROUP|ROLE.Arn}', 'PRINCIPAL' or '???' (if cannot guess)
DTARGETS.not                      #BOOL
DTARGETS.values                   #STR_ARR
DSTATEMENT.condition              #VAL. STATEMENT.Condition
DSTATEMENT.serializedIntrinsic    #STR. JSON serialization of STATEMENT when it contains any dynamic !FUNC
                                  #In that case, DSTATEMENT.* is: sid|condition undefined, effect Unknown, actions|resources|principals { values [], not false }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EC2 EGRESS/INGRESS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEMPLATE.securityGroupChanges    #DSGROUP. Differences in EC2 egress|ingress SECURITY_GROUPs
                                  #Includes RESOURCE additions|deletions
DSGROUP.hasChanges                #BOOL. Whether any differences
DSGROUP.rulesAdded                #BOOL. Whether any difference grants more privileges

DSGROUP.ingress|egress            #DCOLL of DSECRULE
                                  #Differences in EC2 SECURITY_GROUP_INGRESS|EGRESS or SECURITY_GROUP.SecurityGroupIngress|Egress
DSECRULE.groupId                  #STR (def: '*unknown*')
DSECRULE.ipProtocol               #STR (def: '*unknown*')
DSECRULE.fromPort|toPort          #NUM|undefined

DSECRULE.peer                     #DPEER|undefined
DPEER.kind                        #'cidr-ip', 'security-group' or 'prefix-list'
DPEER.ip                          #STR. Only with 'cidr-ip'
DPEER.securityGroupId             #STR. Only with 'security-group'
DPEER.prefixListId                #STR. Only with 'prefix-list'

DCOLL.additions                   #New DSTATEMENT|DMPOLICY|DSECRULE
DCOLL.removals                    #Deleted DSTATEMENT|DMPOLICY|DSECRULE
DCOLL.hasAdditions|hasRemovals    #BOOL
DCOLL.hasChanges                  #BOOL. hasAdditions || hasRemovals


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            FORMAT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


formatDifferences                 #Pretty-print DTEMPLATE differences to OSTREAM
 (OSTREAM, DTEMPLATE[, OBJ[,NUM]])#  - including color ANSI sequences
                                  #OBJ is { RESOURCE: 'NID', ... }
                                  #  - def: guessed from TEMPLATE.Resources.RESOURCE.Metadata['aws:cdk:path'] 'NID'
                                  #NUM (def: 3) is number of context lines to show in diffs

formatSecurityChanges(...)        #Same but only for DTEMPLATE.iamChanges|securityGroupChanges

DIAM.summarizeManagedPolicies()   #Serialize DIAM.managedPolicies. First level is each DMPOLICY, second level is each DMPOLICY.* field
 ->STR_ARR_ARR                    #Contains color ANSI sequences
DIAM.summarizeStatements()
 ->STR_ARR_ARR                    #Like DIAM.summarizeManagedPolicies() but for DIAM.statements
DSGROUP.summarize()->STR_ARR_ARR  #Like DIAM.summarizeManagedPolicies() but for DSGROUP
