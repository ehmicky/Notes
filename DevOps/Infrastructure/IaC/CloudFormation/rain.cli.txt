
        
   RAIN  
        



VERSION ==>                       #1.6.0

rain                              #CLI on top of `aws cloudformation`
--debug                           #Debug logging
--no-colour                       #No colors in output

rain forecast
!Rain::Module                     #
--experimental|-x                 #Must be used

rain bootstrap|deploy|rm
 |stackset deploy                 #
--yes|-y                          #No CLI confirmation input

rain bootstrap|cat|console|deploy
 |forecast|info|logs|ls|pkg|rm
 |stackset|watch                  #
--region|-r                       #'REGION' (def: see AWS config doc)
--profile|-p                      #AWS 'PROFILE' (def: see AWS config doc)

rain info                         #Print current ACCOUNT_ID, PRINCIPAL_ARN and REGION, using IAM GetCallerIdentity()
--creds|-c                        #Also print CREDS

rain console [STACK]              #Open AWS UI. If STACK, to its page
                                  #Done using temporary CREDS. Must be logged in as a ROLE, not USER
--url|-u                          #Print URL but do not open it
--service|-s                      #'SERVICE' (def: 'cloudformation') to show
--name|-n                         #Temporary 'USER' (def: current) to use within the console

rain bootstrap                    #Upserts S3 BUCKET used by `rain`
                                  #Named 'rain-artifacts-ACCOUNT_ID-REGION'
                                  #BUCKET has:
                                  #  - LocationConstraint 'REGION'
                                  #  - LIFECYCLE_RULE: delete OBJECTs|VERSIONs|MUPLOADs after 7 days
                                  #rain requires S3 PACTIONs: CreateBucket|HeadBucket, PutBucketEncryption, PutPublicAccessBlock,
                                  #PutBucketLifecycleConfiguration, PutObject|ListBucketVersions

rain build RESTYPE...             #Scaffold TEMPLATE with those RESTYPEs, and print it
                                  #Contains all possible RESPROPs, and sometimes IAM POLICYs
                                  #RESTYPE is case-insensitive, and can be only the end of it
                                  #Def 'RESOURCE' is 'MyRESTYPENUM'
--json|-j                         #Instead of YAML
--bare|-b                         #Do not include optional RESPROPs, nor comments
--list|-l                         #List all RESTYPEs

rain fmt [TEMPLATE_PATH...]       #Prettify TEMPLATEs (def: stdin)
                                  #Tries to use !RFUNC shortcut syntax
                                  #Preserve comments
--write|-w                        #Write TEMPLATE instead of printing to stdout
--verify|-v                       #Only set exit code 1 if not prettified
--json|-j                         #Output as JSON. If YAML, convert it. Def: vice-versa
--unsorted|-u                     #Unless specified, sort TEMPLATE properties usinng a logical order

rain merge TEMPLATE_PATH...       #Merge TEMPLATEs. Last TEMPLATE has priority
                                  #OBJs are merged, ARRs concatenated
                                  #Some STR properties are merged as a single newline-joined STR, e.g. TEMPLATE.Description
--output|-o                       #'PATH'. Def: stdout
--force|-f                        #Rename unmergeable attributes (!Ref, !GetAtt, etc.). Def: fail

rain diff
 TEMPLATE_PATH TEMPLATE_PATH2     #Diff 2 TEMPLATEs
--long|-l                         #Print unchanged elements

rain tree [TEMPLATE_PATH]         #Visualize dependencies between RESOURCEs|PARAMs|OUTPUTs
--all|-a                          #Print elements without dependencies
--both|-b                         #Print both dependencies and dependents
--dot|-d                          #DOT format

rain pkg TEMPLATE_PATH            #Package local artifacts into a template
                                  #Performs the same functions as “aws cloudformation package” but with added functionality.
                                  #You may use the following, rain-specific directives in templates packaged with “rain pkg”
--output|-o                       #string      Output packaged template to a file
--s3-bucket                       #string   Name of the S3 bucket that is used to upload assets
--s3-prefix                       #string   Prefix to add to objects uploaded to S3 bucket

!Rain::Embed                      #Embeds the contents of the file at into the template as a string
                                  #https://github.com/aws-cloudformation/rain#embed

!Rain::Include                    #Reads the file at as YAML/JSON and inserts the resulting object into the template
                                  #https://github.com/aws-cloudformation/rain#include

!Rain::Env                        #Reads the environmental variable and inserts value into the template as a string
                                  #https://github.com/aws-cloudformation/rain#env

!Rain::S3Http                     #Uploads (zipping first if it is a directory) to S3 and embeds the S3 HTTP URL into the template as a string
                                  #https://github.com/aws-cloudformation/rain#s3http

!Rain::S3                         #Uploads (zipping first if it is a directory) to S3 and embeds the S3 URI into the template as a string
                                  #!Rain::S3 supply an object with the following properties:
                                  #  - Path: a file or directory to be uploaded to S3
                                  #  - Zip: true|false If "true", rain with zip even if it is a file
                                  #  - BucketProperty|KeyProperty: If you supply "BucketProperty" and "KeyProperty", rain pkg will
                                  #    include the uploaded file/directory's details as an object in the template with the property names you specify.
                                  #  - Format: Uri|Http Specify which format rain pkg should return the S3 location as.
                                  #    Do not specify this property if you supply BucketProperty and KeyProperty.
                                  #    The default Format is "Uri".
                                  #https://github.com/aws-cloudformation/rain#s3

!Rain::Module                     #Supply a URL to a rain module, which is similar to a CloudFormation module, but allows for type inheritance.
                                  #One of the resources in the module yaml file must be called "ModuleExtension",
                                  #and it must have a Metadata entry called "Extends" that supplies the existing type to be extended.
                                  #The Parameters section of the module can be used to define additional properties for the extension.
                                  #Rain modules are partial templates that are inserted into the parent template, with some extra functionality added to enable extending existing resource types.
                                  #https://github.com/aws-cloudformation/rain#module

rain deploy|forecast|rm           #
--role-arn                        #ROLE_ARN

rain deploy|rm|stackset deploy
 |stackset rm                     #
--detach|-d                       #Wait for operation to start, instead of waiting for its completion

rain deploy|forecast
 |stackset deploy
--params                          #strings           set parameter values; use the format key1=value1,key2=value2
--tags                            #strings             add tags to the stack; use the format key1=value1,key2=value2
--config|-c                       #string            YAML or JSON file to set tags and parameters
                                  #The config flags can be used to set accounts, regions to operate and tags with parameters to use.
                                  #The config flag can be used to programmatically set tags and parameters.
                                  #The format is similar to the “Template configuration file” for AWS CodePipeline just without the ‘StackPolicy’ key.
                                  #The file can be in YAML or JSON format.
                                  #Configuration file with extended options can be provided along with ‘–config’ flag in YAML or JSON format (see example file for details).
                                  #YAML:
                                  #  Parameters:
                                  #    Name: Value
                                  #  Tags:
                                  #    Name: Value
                                  #  StackSet:
                                  #    description: “test description”
                                  #    ...
                                  #  StackSetInstances:
                                  #    accounts:
                                  #      - “123456789123”
                                  #    regions:
                                  #      - us-east-1
                                  #      - us-east-2
                                  #Account(s) and region(s) provideed as flags OVERRIDE values from configuration files.
                                  #Tags and parameters from the configuration file are MERGED with CLI flag values.

rain forecast TEMPLAT_PATH [STACK]#Predict deployment failures
                                  #Outputs warnings about potential deployment failures due to constraints in the account or misconfigurations in the template related to dependencies in the account.
                                  #To use this command, add –experimental or -x as an argument.
                                  #This command is not a linter! Use cfn-lint for that.
                                  #The forecast command is concerned with things that could go wrong during deployment, after the template has been checked to make sure it has a valid syntax.
                                  #This command checks for some common issues across all resources:
                                  # - The resource already exists
                                  # - You do not have permissions to create/update/delete the resource
                                  # - (More to come.. service quotas, drift issues)
                                  #Resource-specific checks:
                                  # - S3 bucket is not empty
                                  # - S3 bucket policy has an invalid principal
                                  # - (Many more to come…)
                                  #Analyzes a template and the target deployment account to predict things that might go wrong when you attempt to create, update, or delete a stack.
                                  #This command speeds up development by giving you advanced notice for issues like missing permissions, resources that already exist,
                                  #and a variety of other common resource-specific deployment blockers.
--skip-iam                        #Skip permissions checks, which can take a long time
--type                            #string       Optional resource type to limit checks to only that type

rain deploy TEMPLATE_PATH [STACK] #Similar to `aws cloudformation deploy`, i.e. do CreateChangeSet() then ExecuteChangeSet(), but improved
                                  #First run `aws pkg`
                                  #Rain will attempt to create an S3 bucket to store artifacts that it packages and deploys.
                                  #The bucket’s name will be of the format rain-artifacts--.
                                  #Prompts you for any parameters that have not yet been defined
                                  #Shows you a summary of the changes that will be made
                                  #Displays real-time updates as your stack is being deployed
                                  #Once finished, you get a summary of the outcome along with any error messages collected along the way,
                                  #including errors messages for stacks that have been rolled back and no longer exist.
--ignore-unknown-params           #Ignore unknown parameters
--keep|-k                         #Keep deployed resources after a failure by disabling rollbacks
--termination-protection|-t       #Enable termination protection on the stack
--s3-bucket
--s3-prefix                       #Like rain pkg

rain ls                           #Like ListStacks() but improved
                                  #Shows STACK StackStatus, RESOURCEs, OUTPUTs
--all|-a                          #For all REGIONs

rain cat STACK                    #Get the CloudFormation template from a running stack
                                  #Downloads the template used to deploy and prints it to stdout.
--transformed|-t                  #Get the template with transformations applied by CloudFormation
--unformatted|-u                  #Output the template in its raw form; do not attempt to format it

rain watch STACK                  #Display an updating view of a CloudFormation stack
                                  #Repeatedly displays the status of a CloudFormation stack.
                                  #Useful for watching the progress of a deployment started from outside of Rain.
--wait|-w                         #Wait for changes to begin rather than refusing to watch an unchanging stack

rain logs STACK [RESOURCE]        #Show the event log for the named stack
                                  #Shows the event log for a stack and its nested stack.
                                  #Optionally, filter by a specific resource by name, or see a gantt chart of the most recent stack action.
                                  #By default, only show log entries that contain a useful message (e.g. a failure message).
                                  #You can use the –all flag to change this behaviour.
                                  #You will see a combined stream of logs from the stack you specified along with any nested stack associated with it.
                                  #Rain also filters out uninteresting log messages by default so you just see the errors that require attention.
--all|-a                          #Include uninteresting logs
--chart|-c                        #Output a gantt chart of the most recent action as an html file
                                  #To see a Gantt chart that shows you how long each operation took for a given stack.
                                  #https://github.com/aws-cloudformation/rain#gantt-chart

rain rm STACK                     #Like DeleteStack() but improved

rain stackset deploy              #Deploy a CloudFormation stack set from a local template
 TEMPLATE_PATH [SET]              #Creates or updates a CloudFormation stack set from the template file
--accounts                        #strings         accounts for which to create stack set instances
--ignore-stack-instances|-i       #Ignores adding or removing stack instances while updating, useful if you are managing the stack instances separately
--regions                         #strings          regions where you want to create stack set instances

rain stackset ls [SET]	          #List a CloudFormation stack sets in a given region
                                  #If you specify a stack set name it will show all the stack instances and last 10 operations.
--all|-a                          #List stacks in all regions; if you specify a stack set name, show more details

rain stackset rm SET              #Delete a CloudFormation stack set and/or its instances.
