
             
   CFN-GUARD  
             



ALTERNATIVES ==>                  #  - cfn-guard
                                  #     - on any JSON|YAML, but meant for CloudFormation templates
                                  #     - builtin rules: well-architected pillars + many compliance standards
                                  #     - custom rules: easy (declarative DSL)
                                  #  - cdk-validator-cfnguard
                                  #     - cfn-guard for CDK
                                  #        - applied after full resolution
                                  #     - builtin rules: Control Tower
                                  #  - cdk-nag
                                  #     - on CDK
                                  #        - applied before full resolution
                                  #     - builtin rules: best practices, grouped around some compliance standards
                                  #     - custom rules: possible, although not as easy as others
                                  #     - good reporting
                                  #  - cfn-lint
                                  #     - on CloudFormation templates
                                  #        - can use on CDK, in a slightly hacky way
                                  #     - builtin rules:
                                  #        - template syntax
                                  #        - valid RESPROPs for each SERVICE (using specification)
                                  #        - some SERVICE-specific best practices
                                  #     - custom rules: easy, but only for simple RESOURCE.RESPROP equality|>|REGEXP checks
                                  #     - IDE plugin
                                  #Preferred: cfn-guard + cfn-validator-cfnguard + cdk-nag + cfn-lint

VERSION ==>                       #3.0.1
                                  #Installed through homebrew, cargo
                                  #Or install script, which downloads GitHub release binary and install to ~/.guard/bin/cfn-guard


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cfn-guard                         #CLI. Declarative JSON|YAML validation
                                  #Meant as Policy-as-Code for CloudFormation, but can be used for anything
                                  #Similar to JSONPath, but more advanced DSL, and uses assertions (with OPs)

CDK ==>                           #See cdk-validator-cfnguard

cfn-guard-lambda                  #Rust binary to deploy as a Lambda FUNC
                                  #Runs `cfn-guard --payload REQ`, returning STR output as RES
                                  #Can also pass REQ.verbose false

aws-guard-rules-registry          #Registry of cfn-guard RULES
                                  #Mostly about:
                                  #  - specific compliance standards
                                  #     - including HIPAA, PCI DSS, NIST 800-53, but many others
                                  #  - Well-Architected Framework: Reliability|Security Pillars
                                  #All RULEs are available either:
                                  #  - in the GitHub repository
                                  #  - zipped in a single file, as GitHub release or Docker image
                                  #Version 1.0.2
Resources.*[
  Metadata.guard.SuppressedRules
    not exists or
  Metadata.guard.SuppressedRules.*#Pattern to allow users to ignore RULE using
    != "RULE"                     #RESOURCE.Metadata.guard.SuppressedRules 'RULE'_ARR
]                                 #Used by all RULES in aws-guard-rules-registry

cfn-guard completions             #Shell autocompletion
--shell|-s                        #bash|zsh|fish


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VALIDATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cfn-guard validate                #Validate RULES against IDATA
                                  #Non-0 exit code on failure

--rules|-r                        #'RULES_FILE|DIR'
                                  #If DIR, uses DIR/*.guard|ruleset
                                  #Can be specified multiple times

IDATA                             #Input data to `cfn-guard validate`
                                  #Any JSON|YAML OBJ, although originally meant for CloudFormation TEMPLATEs
--data|-d                         #'IDATA_FILE|DIR'
                                  #If DIR, uses DIR/*.y[a]ml|js[o]n|template
                                  #Can be specified multiple times
--input-parameters|-i             #Like --data, but merged to it
                                  #Shallow merging, and overlap not allowed
                                  #Meant for helpers and associated data

--payload|-P                      #Alternative to using --rules|--data
                                  #Provides both as 'OBJ_JSON': rules 'RULES'_ARR, data 'IDATA'_ARR
                                  #Must be passed as stdin

--output-format|-o                #One of:
                                  #  - 'single-line-summary' (def)
                                  #  - 'json'
                                  #  - 'yaml'
--structured|-z                   #Must be specified when using --output-format json|yaml and multiple RULES_FILEs
                                  #Makes the output be a top-level ARR of RULES_FILEs
--verbose|-v                      #Print evaluation details as text
--print-json|-p                   #Print evaluation details as JSON
--type|-t                         #Set to 'CFNTemplate' if CloudFormation TEMPLATE, to produce better output

--show-summary                    #Whether to print RULEs that are:
                                  #  - 'all': FAIL|PASS|SKIP
                                  #  - 'skip': SKIP
                                  #  - 'pass': PASS
                                  #  - 'fail' (def): FAIL
                                  #  - 'STR,...': combination
                                  #  - 'none': none
                                  #Not with --ouput-format json|yaml

--last-modified|-m                #Run --rules|--data DIR/* in mtime order
--alphabetical|-a                 #Run --rules|--data DIR/* in alphabetical order


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UNIT TEST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cfn-guard test                    #Validate RULES against TDATA
                                  #Meant to unit test RULES
                                  #Non-0 exit code on failure

--rules-file|-r                   #Like cfn-guard validate --rules, except cannot be DIR
--dir|-d                          #Like cfn-guard validate --rules, except must be DIR
--test-data|-t                    #Like cfn-guard validate --data, but as 'TDATA_FILE'
--last-modified|-m
--alphabetical|-a
--verbose|-v                      #Like cfn-guard validate

TDATA                             #Input datas to `cfn-guard test`
                                  #JSON|YAML ARR of TDATUM
                                  #Often filename ends with _tests.json|yaml
TDATUM.name                       #'TEST_NAME'
TDATUM.input                      #IDATA
TDATUM.expectations.rules.RULE    #Asserts that RULE:
                                  #  - 'PASS'
                                  #  - 'FAIL'
                                  #  - 'SKIP', due to:
                                  #     - `when CLAUSE`
                                  #     - [...] filter resolving to empty



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SCAFFOLD            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cfn-guard rulegen                 #Scaffold rules from a CloudFormation TEMPLATE
                                  #Create one CLAUSE per RESPROP, requiring it to be equal
--template|-t                     #'PATH' to TEMPLATE
--output|-o                       #'RULES_FILE' (def: stdout)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PARSE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cfn-guard parse-tree              #Parse RULES into a JSON format (not documented yet)
                                  #Fails if syntax error, i.e. can be used for validation
--rules|-r                        #'RULES_FILE'
--output|-o                       #'PATH' (def: stdout)
--print-json|-p
--print-yaml|-y                   #JSON (def) or YAML


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RULES MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RULES                             #Newline-separated top-level statements
                                  #Often use file extension .guard
                                  #The syntax follows.

#COMMENT                          #

CASE ==>                          #Keywords are case-insensitive


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RULES BLOCKS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{ ... }                           #Block with CLAUSEs
                                  #Can be nested

rule RULE { ... }                 #"Named rule"/"rule set". RULE composed of the product of all the CLAUSEs in the block

UNNAMED RULE ==>                  #All top-level CLAUSEs are implicitely put in `rule default { ... }`

RULE                              #Can be used as a CLAUSE with `when` or inside another `rule`
                                  #Since the original `rule RULE` is still evaluated, this is meant only to improve
                                  #reporting output, not change the overall RULES result. With:
                                  #  - `when`: dependency, i.e. second RULE not evaluated|printed if first RULE false
                                  #  - inside another `rule`: composition, i.e. second RULE shows it false due to first RULE
                                  #Not with `default` RULE
not RULE                          #Same but negates

when CLAUSE { ... }               #Skip { ... } if CLAUSE is false
rule RULE when ... { ... }        #Combine `rule` and `when`

QUERY { ... }                     #Sets `this` as QUERY inside { ... }

this                              #Implicitely prepended to each QUERY (unless it starts with `this`), joined with .
                                  #Can also be used explicitly
                                  #Initially set to IDATA
                                  #To keep track of current `this` in children { ... }, can use `let MVAR = this`


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RULES VARIABLE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


let MVAR = VAL|QUERY              #Define MVAR as a VAL
                                  #Lexical scope: if inside { ... }, can only be used inside it
                                  #Actual variable, not macro
%MVAR                             #Reference MVAR
                                  #Can be inside a QUERY, e.g. %MVAR.VAR or VAR.%MVAR
                                  #Cannot be inside <<MESSAGE>> nor REGEXP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RULES CLAUSE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUERY OP [VAL|QUERY2]             #CLAUSE
                                  #Assertion on IDATA

CLAUSE <<MESSAGE>>                #Error message displayed if CLAUSE false
                                  #Can include newlines
                                  #Can be a JSON|YAML OBJ

CLAUSE [or]                       #Relation with next CLAUSE is either:
CLAUSE2                           #  - and (default)
                                  #  - `or`
                                  #`or` has higher priority than `and`


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RULES QUERY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUERY                             #Performed on input data OBJ
                                  #All of the following are QUERYs, are can be chained

VAR                               #Input data OBJ.VAR
                                  #To start with others (e.g. [*] .* [NUM] [...]), must use `this`

QUERY.VAR
QUERY."VAR"
QUERY.'VAR'
QUERY["VAR"]
QUERY['VAR']                      #
QUERY[NUM]                        #

QUERY.*                           #All OBJ|ARR values
QUERY[*]                          #All ARR values
                                  #If not an ARR, noop
                                  #  - but does not fail
                                  #  - this allows traversing values that are optionally ARRs

QUERY[...]
QUERY[
  ...                             #Filter only elements with CLAUSEs true, where [...] is a block of CLAUSEs
]                                 #Each ARR item is `this` inside [...]

EMPTY QUERY ==>                   #Resolves to false:
                                  #  - QUERY.VAR or QUERY[NUM] that is unknown
                                  #  - QUERY.* or QUERY[*] on empty OBJ|ARR
                                  #Except with `exists` or `empty`
let MVAR = QUERY
when %MVAR !empty {
  %MVAR.QUERY2 ...
}                                 #Common pattern to allow possibly empty queries


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RULES ARRAY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUERY.*
QUERY[*]
QUERY.%ARR_MVAR                   #Resolve to ARR. The rest of the QUERY operates on each item

[some] ARR OP ...                 #Performs OP on each ARR item
                                  #Result is and'd (def) or or'd (`some`)

[some] QUERY { ... }              #Each ARR item evaluates its own { ... }
                                  #Result is and'd (def) or or'd (`some`)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RULES VALUES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAL                               #Any JSON value|type

/REGEXP/                          #Flags must use (?FLAG)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RULES OPERATORS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OP                                #One of the following

not OP                            #
!OP                               #Same. No space after !

VAL == != VAL2                    #
VAL in [VAL2,...]                 #
VAL exists                        #Is not undefined
VAL empty                         #Is undefined, or empty STR|ARR|OBJ

VAL < <= > >= VAL                 #
NUM in r[NUM2, NUM3]              #NUM2 <= NUM <= NUM3
                                  #Can also use r[...) r(...] r(...) to use < instead

STR == /REGEXP/                   #
STR in [/REGEXP/,...]             #

VAL is_null                       #Is null
VAL is_bool                       #Is BOOL
VAL is_int                        #Is INT
VAL is_float                      #Is FLOAT
VAL is_string                     #Is STR
VAL is_struct                     #Is OBJ
VAL is_list                       #Is ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RULES FUNCTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MFUNC(...)                        #Execute MFUNC(...). Must be either:
                                  #  - assigned to MVAR: let MVAR = MFUNC(...)
                                  #  - on right side (not left) of OP: QUERY OP MFUNC(...)
                                  #The ARR arguments must be either:
                                  #  - a QUERY that resolves to an ARR
                                  #  - %ARR_MVAR.*

count(ARR)->NUM                   #

join(ARR, "DELIM")->STR           #
to_lower|to_upper(STR)->STR       #
substring(STR, NUM, NUM2)->STR2   #NUM is inclusive, NUM2 exclusive
regex_replace
 (STR, "REGEXP", STR2)->STR3      #Capture groups in STR2 must be ${NUM} (1-based)

json_parse(STR)->OBJ              #

url_decode(STR)->STR2             #
