
           
   CDK-NAG  
           



VERSION ==>                       #2.27.201

new NagPack([OPTS])               #NAGPACK
                                  #Most properties|methods are protected, i.e. NAGPACK must be subclassed
                                  #  - must define NAGPACK.visit(CONSTRUCT)
                                  #     - noop unless CONSTRUCT instanceof CfnResource
                                  #     - call NAGPACK.applyRule()
Aspect.of(CONSTRUCT).add(NAGPACK) #Use a NAGPACK
                                  #Usually CONSTRUCT is CAPP

NAGPACK.packName                  #'NAGPACK'
NAGPACK.readPackName()->'NAGPACK' #

NAGPACK.applyRule(RULE)           #Add a RULE
RULE.node                         #CZRESOURCE
RULE.rule                         #FUNC(CZRESOURCE)->VAL, either:
                                  #  - ENUM NagRuleCompliance.COMPLIANT
                                  #  - ENUM NagRuleCompliance.NON_COMPLIANT
                                  #  - '[...]'_ARR, usually referring to PhysicalResourceIds
                                  #     - behaves like NON_COMPLIANT
                                  #  - ENUM NagRuleCompliance.NOT_APPLICABLE
                                  #  - throw ERROR

OPTS.additionalLoggers            #LOGGER_ARR
LOGGER.onCompliance(INFO)         #Called on NagRuleCompliance.COMPLIANT

TEMPLATE[.Resources.RESOURCE]
 .Metadata.cdk_nag
 .rules_to_suppress               #Ignore specific RULE
IGNORED_RULE.id                   #'NAGPACK-RULE'
IGNORED_RULE.reason               #'ERROR'
IGNORED_RULE.is_reason_encoded    #BOOL (def: false). Whether reason is base64'd
IGNORED_RULE.applies_to           #STR or { regex: '/REGEXP/[FLAGS]' }, RULE-specific
                                  #Matched against '[...]'_ARR returned by some RULEs

NagSuppressions                   #Adds TEMPLATE.Resources.RESOURCE.cdk_nag.rules_to_suppress on CZRESOURCE|CKRESOURCE
 .addResourceSuppressions         #If CKRESOURCE, applied on its `defaultChild`
 (CZRESOURCE|CKRESOURCE[_ARR],    #If BOOL true (def: false), includes descendants
 IGNORED_RULE_ARR[, BOOL])        #IGNORED_RULE is like above, except:
                                  #  - applies_to -> appliesTo
                                  #  - is_reason_encoded is automatically set, based on whether ASCII-only
NagSuppressions
 .addResourceSuppressionsByPath
 (CSTACK, 'NODE_PATH'[_ARR],
 IGNORED_RULE_ARR[, BOOL])        #Like addResourceSuppressions() but locating the RESOURCEs using a CSTACK + 'NODE_PATH'
NagSuppressions
 .addStackSuppressions            #Like addResourceSuppressions() but for a CSTACK, i.e.  TEMPLATE.Metadata.cdk_nag.rules_to_suppress
 (CSTACK, IGNORED_RULE_ARR[,BOOL])#If BOOL true (def: false), includes nested STACKs
