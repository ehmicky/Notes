
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   SAM CLI   ┃
                                  ┗━━━━━━━━━━━━━┛

VERSION ==>                       #1.127.0

                                  ┌─────────────┐
                                  │   INSTALL   │
                                  └─────────────┘

INSTALL ==>                       #Download|extract zip from GitHub releases
                                  #Can verify integrity with GPG

./dist/sam                        #Executable
                                  #Can be executed directly, with|without running the install script

./install                         #Install script
                                  #Just copies files and create symlinks
                                  #Can delete zip extracted contents afterwards

--update|-u                       #Update instead of new install
                                  #Previous versions kept at INSTALL_DIR/X.Y.Z
                                  #Current version is symlink from INSTALL_DIR/current to INSTALL_DIR/X.Y.Z
GLOBAL_CONFIG.lastVersionCheck    #DATE_NUM of last version check
                                  #Once per week, check for new version and print if exists

--install-dir|-i                  #'INSTALL_DIR' (def: /usr/local/aws-sam-cli) containing binary + source code
--bin-dir|-b                      #'DIR' (def: /usr/local/bin) with symlink to `sam` executable

                                  ┌────────────────────────────┐
                                  │   INSTALL GITHUB ACTIONS   │
                                  └────────────────────────────┘

aws-actions/setup-sam@v2          #GitHub action installing sam CLI
                                  #Adds it to ENVVAR PATH
                                  #Should also set AWS credentials, e.g. with aws-actions/configure-aws-credentials
                                  #Version v2

INPUTS.version                    #'X.Y.Z' (def: latest)

INPUTS.use-installer              #BOOL. If:
                                  #  - false (def): installs using `pip install`
                                  #  - true (recommended):
                                  #     - installs by downloading from GitHub release
                                  #     - uses ./dist/sam directly, i.e. does not run install script
                                  #     - automatically cached
                                  #     - only with Linux x64

INPUTS.python                     #STR (def: 'python' on Windows, 'python3' else)
                                  #Only if INPUTS.use-installer false

INPUTS.token                      #'GITHUB_TOKEN' used when retrieving latest version
                                  #Only necessary to improve rate limiting
                                  #Only if INPUTS.version not specified
                                  #Only if INPUTS.use-installer true

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

./.aws-sam/                       #SAM_LDIR
~/.aws-sam/                       #SAM_GDIR
SAM_GDIR/metadata.json            #GLOBAL_CONFIG. Undocumented by SAM, but we document some of it here
                                  #As opposed to CONFIG (per-project)

sam ...
--config-file                     #'PATH' to CONFIG (def: './samconfig.y[a]ml|toml')
                                  #Relative paths use TEMPLATE's DIR
--config-env                      #'SAM_PROFILE' (def: 'default')
                                  #Each should have its own CREDS
--save-params                     #Save CLI FLAGs to CONFIG file

CONFIG.version                    #Must be 0.1
CONFIG.SAM_PROFILE.COMMAND|global #Default VAL for CLI flags
 .parameters.FLAG                 #snake_case for COMMAND + FLAG, e.g. local start-api -> local_start_api
                                  #BOOL FLAGs with default true must be named no_*
                                  #  - e.g. no_interactive BOOL

YAML SYNTAX ==>                   #Multiple VALs: ARR

TOML SYNTAX ==>                   #Multiple VALs: "VAL ..."
                                  #OBJ: "VAR=VAL ..."
                                  #OBJ_ARR: ["VAR=VAL ...", ...]
[SAM_PROFILE]
[SAM_PROFILE.COMMAND|global]
[SAM_PROFILE.COMMAND|global
 .parameters]                     #When using TOML, each depth level must be defined

                                  ┌─────────────┐
                                  │   GENERAL   │
                                  └─────────────┘

GLOBAL_CONFIG.experimentalAll
ENVVAR SAM_CLI_BETA_FEATURES
sam ... --[no-]beta-features      #BOOL (def: false). Enable all SAM_CLI_BETA_* features

GLOBAL_CONFIG.telemetryEnabled
ENVVAR SAM_CLI_TELEMETRY=0        #Disable telemetry

GLOBAL_CONFIG.installationId      #'UUID' created at install time, used for telemetry
TEMPLATE.Metadata.SamCliInfo
 .installationId                  #Set for the bootstrap STACK created by --resolve-s3

sam ...
--debug                           #Debug logs

sam docs CLI_COMMAND              #Open docs in browser

                                  ┌─────────────────┐
                                  │   ENVIRONMENT   │
                                  └─────────────────┘

sam ...
--profile                         #AWS CONFIG 'PROFILE' (def: guessed)
--region                          #'REGION' (def: guessed)

sam local generate-event
--partition                       #'PARTITION' (def: 'aws')

                                  ┌──────────────────┐
                                  │   STACK CONFIG   │
                                  └──────────────────┘

sam validate|build|sync|package   #'PATH' to TEMPLATE
 |deploy|publish|local|list       #Def:
ENVVAR SAM_TEMPLATE_FILE          #  - 'SAM_LDIR/build/template.yaml': with sam package|deploy|publish|local
--template[-file]|-t              #  - 'template.y[a]ml|json'

sam sync|deploy|delete|list|logs
--stack-name                      #CloudFormation 'STACK'. Required
sam remote
--stack-name                      #CloudFormation 'STACK'. Required unless a RESOURCE ARN is passed

sam build|local|deploy|sync|remote
 |list
--parameter-overrides             #'PARAM=VAL,...'. STACK.Parameters

'RESOURCE'                        #Can be:
                                  #  - 'RESOURCE' name in TEMPLATE.Resources.RESOURCE
                                  #     - if in NESTED_STACK, can be prefixed with 'NESTED_STACK/...'
                                  #     - not with sam logs
                                  #  - RESOURCE's PhysicalResourceId (e.g. for FUNCTION, FUNC_VERSION.FunctionName)
                                  #     - not with sam build|sync
                                  #  - RESOURCE ARN
                                  #     - only with sam remote

                                  ┌──────────┐
                                  │   LINT   │
                                  └──────────┘

sam validate                      #Validate TEMPLATE syntax

--lint                            #BOOL (def: false, recommended: true). Run cfn-lint
                                  #Not very useful: can use cfn-lint directly

                                  ┌──────────┐
                                  │   INIT   │
                                  └──────────┘

sam init                          #Scaffolds:
                                  #  - samconfig.toml:
                                  #     - for SAM_PROFILE 'default'
                                  #     - with flags documented here as "recommended"
                                  #  - TEMPLATE
                                  #  - code|tests for FUNCTIONs
                                  #  - package.json and dev tasks
                                  #  - Dockerfile (if PackageType 'Image')
                                  #  - CodeBuild buildspec.yml
                                  #  - TEST_EVENT
                                  #Note: sam CLI can be used without `sam init`, by just using:
                                  #  - right CLI flags (and|or a CONFIG file)
                                  #  - normal CloudFormation setup (TEMPLATE, etc.)
                                  #Based on a repository called aws-sam-cli-app-templates

--output-dir|-o                   #'DIR' (def: '.'). Outputs at DIR/PROJECT_NAME/
--name|-n                         #'PROJECT_NAME', used in:
                                  #  - default 'STACK' (in CONFIG file)
                                  #  - TEMPLATE.Description
                                  #  - README

--no-interactive                  #BOOL. If false (def), Interactive input for required flags
--no-input                        #BOOL. If false (def), same for optional flags

--package-type                    #FUNC_VERSION.PackageType (def: 'Zip')
--architecture                    #FUNC_VERSION.Architectures
--runtime                         #FUNC_VERSION.Runtime
--base-image                      #'amazon/RUNTIME-base'. Like --runtime but when PackageType 'Image'
                                  #Use Docker image 'public.ecr.aws/lambda/RUNTIME'
--dependency-manager              #Package manager used in FUNCTION
                                  #Depends on RUNTIME:
                                  #  - JavaScript: 'npm'
                                  #  - Python: 'pip'
                                  #  - Ruby: 'bundler'
                                  #  - DotNet: 'cli-package'
                                  #  - Java: 'gradle' or 'maven'
                                  #Def: guessed from --runtime or --base-image, unless Java
--extra-context                   #'{"SCAFFOLDING_VAR": "VAL",...}_JSON'
                                  #Additional options. Only for specific scaffolders

--app-template                    #Builtin cookiecutter scaffolder
                                  #Many of them are available only on specific RUNTIMEs
                                  #The scaffolded contents depends on --runtime, --package-type, --base-image, --dependency-manager
                                  #Can be any of the following:
quick-start-from-scratch          #FUNCTION
response-streaming                #FUNCTION with InvokeMode RESPONSE_STREAM
hello-world-lambda-image          #FUNCTION + API Gateway ROUTE, with PackageType 'Image'
                                  #Def when using PackageType 'Image'
hello-world                       #FUNCTION + API Gateway ROUTE, with PackageType 'Zip'
hello-world-typescript            #Same but in TypeScript, with esbuild
hello-world-powertools-           #Same but uses @aws-lambda-powertools/tracing|metrics|logger in FUNCTION
 typescript|dotnet|java|python    #Has SCAFFOLDING_VAR 'Powertools for AWS Lambda (TypeScript) Tracing|Metrics|Logging' 'enabled' or 'disabled' (def)
hello-world-native-aot            #FUNCTION using specific bundler for DotNet
quick-start-s3                    #FUNCTION handling BUCKET events
quick-start-
 sns|sqs|cloudwatch-events|dbd    #Similar for other SERVICEs
eventBridge-hello-world           #Similar for Event Bridge
eventBridge-schema-app            #Same but can customize using multiple SCAFFOLDING_VARs 'AWS_Schema_*' (not documented yet)
efs-sample-app                    #FUNCTION using EFS + API Gateway ROUTE
quick-start-web                   #CRUD FUNCTIONs + API Gateway ROUTEs + DynamoDB TABLE
quick-start-full-stack            #Same but also BUCKET + CloudFront DISTRIBUTION
graphql-api-sample-app            #AWS::Serverless::GraphQLApi + FUNCTIONs + DynamoDB TABLE
step-functions-sample-app         #AWS::Serverless::StateMachine + FUNCTIONs + DynamoDB TABLE
ml-apigw-pytorch|tensorflow       #Machine learning FUNCTION
 |xgboost|scikit-learn            #Uses specific SCAFFOLDING_VARs to set paths and dependencies version (not documented yet)
                                  #Requires PackageType 'Image'

--location|-l                     #Custom scaffolding DIR, among:
                                  #  - 'DIR'
                                  #  - 'PATH.zip'
                                  #  - 'URI.zip'
                                  #  - 'gh:USER/REPO'
                                  #  - 'git+ssh://git@github.com/USER/REPO.git'
                                  #Runs cookiecutter, providing there is a cookiecutter.json
                                  #Ignores --runtime, --package-type, --base-image, --dependency-manager

--[no-]structured-logging         #BOOL (def: false). Sets TEMPLATE.Globals:
                                  #  - Function.LoggingConfig.LogFormat 'JSON'
--[no-]tracing                    #BOOL (def: false). Sets TEMPLATE.Globals:
                                  #  - Function.Tracing 'Active'
                                  #  - Api.TracingEnabled true
--[no-]application-insights       #BOOL (def: false). Enable CloudWatch Application Insights monitoring by setting TEMPLATE.Resources:
                                  #  - 'ApplicationResourceGroup':
                                  #     - RESTYPE AWS::ResourceGroups::Group
                                  #     - Name 'ApplicationInsights-SAM-STACK'
                                  #     - ResourceQuery.Type 'CLOUDFORMATION_STACK_1_0'
                                  #  - 'ApplicationInsightsMonitoring':
                                  #     - RESTYPE AWS::ApplicationInsights::Application
                                  #     - ResourceGroupName {Ref: RESOURCE_GROUP}
                                  #     - AutoConfigurationEnabled true

                                  ┌────────────────────┐
                                  │   BOOTSTRAP MAIN   │
                                  └────────────────────┘

sam pipeline bootstrap            #Create|deploy RESOURCEs needed for `sam package|deploy|sync|delete` for:
                                  #  - auth: USER, ROLEs, OPENID_PROVIDER
                                  #  - assets: BUCKET, ECR REPO
                                  #Can be used with|without `sam pipeline init`

aws-sam-cli-managed-BSTAGE-       #PIPELINE_STACK, used to create those RESOURCEs
 pipeline-resources               #Upserted with a CHANGESET
                                  #Not upserted if no RESOURCEs to upsert

TAG 'ManagedStackSource'          #Is set on PIPELINE_STACK and USER|ROLEs|BUCKETs, with value 'AwsSamCli'

SAM_LDIR/pipeline/                #Stores ARNs of USER|ROLEs|BUCKET|REPO, whether created by PIPELINE_STACK or not
 pipelineconfig.toml              #Is a CONFIG with multiple CONFIG.SAM_PROFILE.pipeline_bootstrap.parameters.FLAG
                                  #  - e.g. USER is stored as CONFIG.SAM_PROFILE.pipeline_bootstrap.parameters.pipeline_user
                                  #Created by `sam pipeline bootstrap`, which also prints those RESOURCE ARNs
                                  #Also stores every --FLAG passed to `sam pipeline bootstrap`
                                  #  - except --confirm-changeset, --interactive, --create-image-repository
                                  #Also used as default values for any --FLAG if `sam pipeline bootstrap` called again, but only:
                                  #  - for SAM_PROFILE 'default'
                                  #  - with USER|OPENID_PROVIDER-related flags

CUSTOMIZING RESOURCES ==>         #The RESOURCEs can be customized:
                                  #  - must create them in a separate STACK
                                  #  - then provide their ARN as a flag
                                  #  - e.g. --pipeline-user for USER
                                  #When doing so, must make sure their POLICY is correctly setup
                                  #  - see https://github.com/aws/aws-sam-cli/blob/develop/samcli/lib/pipeline/bootstrap/stage_resources.yaml
                                  #Alternatively, can also manually modify STACK after creation
                                  #  - must then PARAMVAL.UsePreviousValue true for each PARAM

--[no-]confirm-changeset          #BOOL (def: true). Confirm before upserting STACK
--[no-]interactive                #BOOL (def: true). Interactive mode

--stage                           #'SAM_PROFILE'. Meant to represent a stage (dev, staging, production, etc.)
                                  #Namespaces 'STACK' name
                                  #Each should have its own CREDS
                                  #Required. Only [:alnum:]-

--cloudformation-execution-role
--bucket
--image-repository
--[no-]create-image-repository    #See below

--pipeline-execution-role         #PIPELINE_ROLE. ROLE_ARN used to run `sam deploy|sync|delete`
                                  #Def: created by PIPELINE_STACK and allowed:
                                  #  - cloudformation:Create|Describe|ExecuteChangeSet, DescribeStack[Events|Resource]|DeleteStack,
                                  #    GetTemplate[Summary] on any STACK
                                  #  - iam:PassRole to CLOUDFORMATION_ROLE

                                  ┌───────────────────┐
                                  │   BOOTSTRAP IAM   │
                                  └───────────────────┘

--permissions-provider 'iam'      #Default behavior

--pipeline-user                   #IAM USER_ARN used to assume PIPELINE_ROLE
                                  #Must assume it using (depending on PIPELINE_ROLE's TAG 'Role' value):
                                  #  - 'pipeline-execution-role' (def): USER
                                  #  - 'aws-sam-pipeline-codebuild-service-role': USER's ACCOUNT's ROOT
                                  #Def: created by PIPELINE_STACK
                                  #Only if --permissions-provider 'iam'

ACCESS_KEY                        #If PIPELINE_STACK creates USER, it also creates its ACCESS_KEY
                                  #Its ACCESS_KEY_ID|SECRET_ACCESS_KEY are:
                                  #  - stored as a Secrets Manager SECRET
                                  #  - printed
                                  #  - but not stored in pipelineconfig.toml

                                  ┌────────────────────┐
                                  │   BOOTSTRAP OIDC   │
                                  └────────────────────┘

--permissions-provider 'oidc'     #Make PIPELINE_STACK create an OPENID_PROVIDER (see STS doc) (unless exists already) used to assume PIPELINE_ROLE
                                  #Alternative to --permissions-provider 'iam'
                                  #Automatically computes OPENID_PROVIDER.ThumbprintList

--oidc-provider-url               #'WEB_ID_DOMAIN'. OPENID_PROVIDER.Url. Required
--oidc-client-id                  #'CLIENT_ID'. OPENID_PROVIDER.ClientIDList[0]. Required

--oidc-provider                   #Can be 'github-actions', 'gitlab' or 'bitbucket-pipelines'
                                  #To set when using --permissions-provider 'oidc'
--cicd-provider                   #Same as --oidc-provider
                                  #Exception: with --interactive, prompts for --oidc-provider even if --permissions-provider 'iam'

--oidc-provider 'github-actions'  #Subject claim is 'repo:USER/REPO:ref:refs/heads/BRANCH'
                                  #'WEB_ID_DOMAIN' must be 'https://token.actions.githubusercontent.com'
                                  #'CLIENT_ID' must be 'sts.amazonaws.com'
                                  #Must set following flags
--github-org                      #GitHub 'USER'
--github-repo                     #GitHub 'REPO'
--deployment-branch               #Git 'BRANCH'

--oidc-provider 'gitlab'          #Subject claim is 'project_path:USER/REPO:ref_type:branch:ref:BRANCH'
                                  #Must set following flags
--gitlab-group                    #GitLab 'USER'
--gitlab-project                  #GitLab 'REPO'
--deployment-branch               #Git 'BRANCH'

--oidc-provider                   #Subject claim is 'REPO_UUID:*'
 'bitbucket-pipelines'            #Must set following flags
--bitbucket-repo-uuid             #BitBucket REPO UUID

                                  ┌───────────┐
                                  │   CI/CD   │
                                  └───────────┘

sam pipeline init                 #Scaffolds CI/CD configuration file, e.g. GitHub actions workflows
                                  #Always interactive
                                  #Re-uses RESOURCEs created by `sam pipeline bootstrap`
                                  #  - must be called first
                                  #  - its result is retrieved using pipelineconfig.toml

--bootstrap                       #First runs `sam pipeline bootstrap --interactive`
                                  #Also prompts for --cicd-provider
                                  #No other flags

STAGES ==>                        #`sam pipeline bootstrap` must be called twice, with different --stage=SAM_PROFILE
                                  #First for staging, second for production
                                  #Produces identical CI/CD setup for each
                                  #Can call a third time with --stage=default for shared RESOURCEs

SAM_GDIR/pipeline/generated-files/#Contains generated files

aws-sam-cli-pipeline-init-        #Repo containing the cookiecutter templates
 templates                        #Available templates: GitHub actions, GitLab, BitBucket, Jenkins, CodeDeploy
SAM_GDIR/aws-sam-cli-app-
 pipeline-templates               #Caches that repo

CUSTOM TEMPLATES ==>              #Can be used
                                  #Not documented yet

                                  ┌──────────────────────────┐
                                  │   CI/CD GITHUB ACTIONS   │
                                  └──────────────────────────┘

GITHUB ACTIONS TEMPLATE ==>       #`sam pipeline init` scaffolds GitHub actions WORKFLOW file
                                  #On feature* BRANCH push:
                                  #  - automated tests
                                  #  - sam build
                                  #  - sam deploy (staging)
                                  #On feature* BRANCH delete:
                                  #  - sam delete (staging)
                                  #On main BRANCH push:
                                  #  - automated tests
                                  #  - sam build
                                  #  - sam package + sam deploy (staging)
                                  #  - integration tests (staging)
                                  #  - sam package + sam deploy (production)
                                  #No jobs on pull_request
                                  #On all:
                                  #  - install sam
                                  #  - configure CREDS
                                  #Uses PIPELINE_STACK's RESOURCEs
                                  #If --permissions-provider 'iam', must set ENVVAR AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY
                                  #  - as GitHub secrets
                                  #  - current scaffold does not seem to account for the fact that staging|production have
                                  #    different ones, i.e. must probably manually edit WORKFLOW file accordingly
                                  #TEMPLATEs transformed by `sam package` are uploaded as artifact
                                  #Runs on Ubuntu latest

                                  ┌────────────────┐
                                  │   BUILD MAIN   │
                                  └────────────────┘

sam build ['FUNCTION|LAYER']      #Build AWS::Serverless|Lambda::Function|LayerVersion
                                  #Does package|runtime-related build step:
                                  #  - e.g. `npm pack`, `npm install`, `esbuild`, `go build`
                                  #  - not other build logic like `tsc`, `babel`, etc., which must be performed before
                                  #Does not zip nor upload to S3|ECR: `sam package` does it instead, afterwards
                                  #'FUNCTION|LAYER':
                                  #  - def: all
                                  #  - FUNCTION includes its FUNC_VERSION.Layers
                                  #Run by `sam sync`, but always:
                                  #  - targets all FUNCTIONs|LAYERs
                                  #  - use default values of --cached, --cache-dir, --manifest, --skip-pull-image,
                                  #    --container-env-file, --mount-with, --docker-network, --hook-name
                                  #  - sets --parallel
                                  #Not run by `sam deploy`
--exclude|-x                      #'FUNCTION|LAYER' to exclude

SOURCE_DIR                        #FUNCTION|LAYER's 'DIR' specified as RESPROP, e.g. FUNCTION.Code 'DIR'
sam build|sync
--base-dir|-s                     #'DIR' (def: TEMPLATE's DIR) used to resolve relative PATHs in TEMPLATE
                                  #Only for properties used by `sam build`, not `sam package`
                                  #  - except those used by both (e.g.  FUNCTION.Code 'DIR')

BUILD_DIR                         #'BASE_BUILD_DIR/FUNCTION|LAYER'
                                  #SOURCE_DIR is copied, transformed and output to BUILD_DIR
                                  #Re-created on each build
sam build
--build-dir|-c                    #'BASE_BUILD_DIR' (def: 'SAM_LDIR/build/')

                                  ┌───────────────────────┐
                                  │   BUILD PERFORMANCE   │
                                  └───────────────────────┘

sam build
--parallel|-p                     #BOOL (def: false, recommended: true). Build all FUNCTIONs|LAYERs in parallel

sam build
--[no-]cached|-c                  #BOOL (def: false, recommended: true). Caches build
                                  #Noop if --use-container or if PackageType Image
                                  #Uses, depending on BuildMethod:
                                  #  - 'nodejs*', 'esbuild', 'python*', 'ruby*': SAM_LDIR/deps
                                  #  - 'go*', 'java*', 'dotnet*', 'rust*', 'provided': SAM_LDIR/cache (--cache-dir)
SAM_LDIR/deps                     #Cached dependencies, e.g. node_modules, avoiding install step
 /FUNCTION_UUID|LAYER_UUID        #Invalidated when --manifest contents changes
                                  #  - e.g. new dependency, or when dependency version range changed
                                  #  - but not when a new dependency version is available but its version change stayed the same
                                  #     - should use --no-cached to invalidate then
--cache-dir|-cd                   #'CACHE_DIR' (def: SAM_LDIR/cache/)
CACHE_DIR/FUNCTION_UUID|LAYER_UUID#Cached BUILD_DIR, avoiding whole build step
                                  #Invalidated when SOURCE_DIR contents or list of files changes

GLOBAL_CONFIG
 .experimentalBuildPerformance
ENVVAR                            #BOOL (def: false). If multiple FUNCTIONs share exact same set of dependencies,
 SAM_CLI_BETA_BUILD_PERFORMANCE   #make them share it, for performance

sam build|sync
--[no-]build-in-source            #Update|re-use dependencies inside SOURCE_DIR
                                  #As opposed to installing them fresh inside BUILD_DIR
                                  #Symlink BUILD_DIR's dependencies to SOURCE_DIR's
                                  #Depending on BuildMethod:
                                  #  - 'node*', 'esbuild', 'provided*|makefile': can be false (def) or true
                                  #     - if 'esbuild', implies --no-cached
                                  #  - 'go*', 'rust*', 'dotnet*': always true
                                  #  - 'python*', 'java*', 'ruby*': always false

                                  ┌────────────────────┐
                                  │   BUILD ZIP MAIN   │
                                  └────────────────────┘

ZIP BUILD ==>                     #Done on AWS::Serverless|Lambda::Function|LayerVersion, if PackageType Zip
                                  #Not done if already zipped, i.e. FUNCTION.Code[Uri][.ZipFile] 'PATH.zip' or FUNCTION.InlineCode set
                                  #Uses the following RESOURCE.Metadata.* and CLI flags

RESOURCE.Metadata.BuildMethod     #Main build logic, mostly RUNTIME-based
                                  #Can be:
                                  #  - 'nodejsX.x'
                                  #  - 'esbuild'
                                  #  - 'pythonX.Y'
                                  #  - 'rubyX.x'
                                  #  - 'goX.x'
                                  #  - 'javaX'
                                  #  - 'dotnet[X]'
                                  #  - 'rust-cargolambda':
                                  #     - uses RUNTIME 'rust' (which is deprecated)
                                  #     - must set GLOBAL_CONFIG.experimentalCargoLambda or ENVVAR SAM_CLI_BETA_RUST_CARGO_LAMBDA true
                                  #  - 'provided[.al2|al2023]' or 'makefile': use Makefile
                                  #     - cannot use LAYERs
                                  #Def: guessed based on RUNTIME
                                  #  - for Node.js: 'nodejsX.x', not 'esbuild'
                                  #Based on a Python library called aws-lambda-builders
RESOURCE.Metadata.BuildProperties #BUILD_PROPS. BuildMethod-specific options

sam build
--manifest|-m                     #'PATH' to RUNTIME-specific dependencies manifest
                                  #Def: SOURCE_DIR/FILENAME with FILENAME depending on BuildMethod:
                                  #  - 'nodejsX.x' or 'esbuild': package.json
                                  #  - 'pythonX.Y': requirements.txt
                                  #  - 'rubyX.x': Gemfile
                                  #  - 'goX.x': go.mod
                                  #  - 'javaX': either build.gradle[.kts] or pom.xml
                                  #  - 'dotnet[X]': .csproj
                                  #  - 'rust-cargolambda': Cargo.toml
                                  #  - 'provided[.al2|al2023]' or 'makefile': Makefile

                                  ┌────────────────────┐
                                  │   BUILD ZIP NODE   │
                                  └────────────────────┘

BuildMethod 'nodejsX.x'           #Included|excluded files:
                                  #  - uses PACKAGE.files and .npmignore (with `npm pack` under-the-hood)
                                  #  - includes package-lock.json, npm-shrinkwrap.json
                                  #  - includes .npmrc but deletes at end
                                  #  - excludes .git/, SAM_LDIR
                                  #Runs `npm install --production`

BUILD_PROPS.UseNpmCi              #BOOL (def: false). Use `npm ci` instead
                                  #Always false if no package-lock.json nor npm-shrinkwrap.json

                                  ┌───────────────────────┐
                                  │   BUILD ZIP ESBUILD   │
                                  └───────────────────────┘

BuildMethod 'esbuild'             #Like Node.js, but runs `esbuild` after dependencies are installed|restored
                                  #Must install `esbuild` as a dependency

BUILD_PROPS.EntryPoints           #'PATH'_ARR (def: 'HANDLER')
BUILD_PROPS.FLAG                  #VAL. `esbuild --FLAG`
                                  #FLAG is in PascalCase
                                  #Def: --target=es2020 --format=cjs --minify
                                  #Always used: --bundle --platform=node
BUILD_PROPS.External              #STR_ARR (def: []). `esbuild --external`.
                                  #Special STR value './node_modules/*':
                                  #  - does --external for each PACKAGE.dependencies
                                  #  - i.e. does not bundle node_modules
BUILD_PROPS.Sourcemap             #BOOL (def: false). Make esbuild produce source maps
                                  #Also sets RESPROP Environment.Variables.NODE_OPTIONS "... --enable-source-maps"

                                  ┌────────────────────────┐
                                  │   BUILD ZIP PROVIDED   │
                                  └────────────────────────┘

BuildMethod 'provided*'           #Not fully documented yet
RESOURCE.Metadata
 .ProjectRootDirectory            #Main 'DIR', used instead of 'SOURCE_DIR'
RESOURCE.Metadata.ContextPath     #'DIR' containing Makefile, used instead of 'SOURCE_DIR'

OTHER BUILDMETHODS ==>            #Not fully documented yet

                                  ┌─────────────────────────┐
                                  │   BUILD ZIP CONTAINER   │
                                  └─────────────────────────┘

sam build|sync
--use-container|-u                #Run build inside a Docker container
                                  #Only if PackageType Zip
                                  #The FUNCTION|LAYER does not use a container, just `sam build` itself
                                  #128MB memory limit

--build-image|-bi                 #'[FUNCTION|LAYER.]URI'. Container image

public.ecr.aws/sam/build-RUNTIME  #Default value for --build-image
 [:latest|X.Y.Z[-CPU_ARCH]]       #Executes aws-lambda-layers, i.e. BuildMethod-specific logic described above
                                  #Uses public.ecr.aws/lambda/RUNTIME:*-CPU_ARCH
                                  #Has aws CLI and sam CLI
                                  #  - X.Y.Z is SAM CLI's version
                                  #Stored in repository aws-sam-build-images

sam build
--skip-pull-image                 #BOOL. If false (def), calls `docker pull` even if --build-image available locally,
ENVVAR SAM_SKIP_PULL_IMAGE        #i.e. force getting latest version

sam build
--container-env-var|-e            #'[FUNCTION|LAYER.]ENVVAR=VAL' passed to container
sam build|sync
--container-env-var-file|-ef      #Same but as 'PATH.json' containing { FUNCTION|LAYER|Parameters: { ENVVAR: 'VAL',... },... }

--mount-with|-mw                  #'READ' (def) or 'WRITE'. If 'WRITE', dependencies update inside the container
                                  #also update them in the local SOURCE_DIR

--docker-network
ENVVAR SAM_DOCKER_NETWORK         #Docker 'NETWORK_NAME' (def: bridge)

                                  ┌─────────────────┐
                                  │   BUILD IMAGE   │
                                  └─────────────────┘

IMAGE BUILD ==>                   #Runs `docker build`, for AWS::Serverless|Lambda::Function|LayerVersion, if PackageType Image
                                  #Not done if ImageUri is 'PATH.tar' (from `docker save`): use `docker load` instead
                                  #'FUNCTION|LAYER' is used as image name
                                  #Uses the following RESOURCE.Metadata.*

RESOURCE.Metadata.Dockerfile      #'PATH'. Required
RESOURCE.Metadata.DockerContext   #'DIR'. Required
RESOURCE.Metadata.DockerBuildArgs #OBJ (def: {}). `docker build --build-arg VAR=VAL`
RESOURCE.Metadata
 .DockerBuildTarget               #STR (def: none). `docker build --target STR`
RESOURCE.Metadata.DockerTag       #'TAG' (def: 'latest'). `docker build --tag TAG`
FUNC_VERSION.Architectures
LAYER_VERSION
 .CompatibleArchitectures         #Used as `docker build --architecture linux/arm64|amd64`

                                  ┌────────────────────┐
                                  │   BUILD INTERNAL   │
                                  └────────────────────┘

SAM_LDIR/build.toml               #BUILD_MANIFEST. Internal information used and automatically generated by `sam build`
                                  #Has information about each FUNCTION|LAYER having been built
BUILD_MANIFEST
 .function_build_definitions      #FUNCTION_MANIFEST
 .FUNCTION_UUID                   #UUID is generated for each build
FUNCTION_MANIFEST.functions       #'FUNCTION'_ARR
FUNCTION_MANIFEST.codeuri         #'SOURCE_DIR'
FUNCTION_MANIFEST.runtime         #FUNC_VERSION.Runtime
FUNCTION_MANIFEST.packagetype     #FUNC_VERSION.PackageType
FUNCTION_MANIFEST.architecture    #FUNC_VERSION.Architectures[0]
FUNCTION_MANIFEST.handler         #FUNC_VERSION.Handler
FUNCTION_MANIFEST.metadata        #FUNCTION.Metadata
FUNCTION_MANIFEST.env_vars        #OBJ. --container-env-var[-file]
FUNCTION_MANIFEST.manifest_hash   #'HASH' of --manifest file
FUNCTION_MANIFEST.source_hash     #'HASH' of 'SOURCE_DIR' contents + filenames
                                  #Only if --cache-dir used

BUILD_MANIFEST
 .layer_build_definitions
 .LAYER_UUID                      #LAYER_MANIFEST. Same for LAYERs
LAYER_MANIFEST.layer_name         #'LAYER'
LAYER_MANIFEST.codeuri
 |architecture|env_vars
 |source_hash|manifest_hash       #Same as FUNCTION_MANIFEST.*
LAYER_MANIFEST.build_method       #BuildMethod
LAYER_MANIFEST.compatible_runtimes#LAYER_VERSION.CompatibleRuntimes

                                  ┌────────────┐
                                  │   ASSETS   │
                                  └────────────┘

sam package                       #Uploads to S3 any local 'PATH.zip' in TEMPLATE:
                                  #  - replaced by S3 URL|OBJ, depending on RESPROP
                                  #  - 'OBJECT' name is contents hash
                                  #Also uploads to ECR any local image in TEMPLATE:
                                  #  - value is either:
                                  #     - 'DIR' with Dockerfile
                                  #     - local 'REPO:TAG'
                                  #     - local 'sha256:HASH'
                                  #  - replaced by ECR IMAGE URL
                                  #  - uses same TAG, but replaces : by -
                                  #  - only for AWS::Serverless|Lambda::Function ImageUri
                                  #Special RESTYPEs:
                                  #  - AWS::CloudFormation::Stack[Set] TemplateURL, AWS::Serverless::Application Location
                                  #     - value must be 'PATH' (not 'PATH.zip')
                                  #     - with `sam build`, has to be 'PATH', not 'URL' nor OBJ
                                  #  - TEMPLATE.Metadata['AWS::ServerlessRepo::Application'].LicenseUrl|ReadmeUrl:
                                  #     - value must be 'PATH' (not 'PATH.zip')
                                  #  - AWS::Serverless|Lambda::Function|LayerVersion CodeUri:
                                  #     - value must be 'DIR' (not 'PATH.zip')
                                  #     - S3 'OBJECT' name is hash of all contents + filenames
                                  #     - with `sam build`, should be 'PATH', not URL
                                  #  - AWS::Serverless::Function|GraphQLApi: noop if [**.]InlineCode used
                                  #  - AWS::Serverless::GraphQLApi: uses Resolvers|Functions.**.CodeUri
                                  #  - AWS::ECR::Repository RepositoryName: no upload, only deletes with `sam delete`
                                  #Noop if RESPROP value is not set, or is already a S3|ECR URL
                                  #Only for specific RESPROPs on specific RESTYPEs, documented in their respective docs
                                  #Other TEMPLATE transformations:
                                  #  - removes YAML comments
                                  #  - adds RESOURCE.Metadata.SamResourceId
                                  #Does not build, i.e. must be run after `sam build`
                                  #Run by:
                                  #  - `sam deploy`
                                  #  - `sam sync`:
                                  #     - only on the target RESOURCEs
                                  #     - use default values for --use-json, --signing-profiles
                                  #     - sets --no-progressbar, --force-upload
--output-template-file            #'PATH' (def: stdout) of the transformed TEMPLATE

sam package|deploy
--use-json                        #Instead of YAML, for transformed TEMPLATEs
--no-progressbar                  #BOOL. If false (def), progress bar while uploading to S3|ECR

RESOURCE.Metadata.SamResourceId   #Original 'RESOURCE'
                                  #Set by `sam package`. Used internally

                                  ┌───────────────┐
                                  │   S3 ASSETS   │
                                  └───────────────┘

sam package|deploy|sync|delete
--s3-bucket                       #S3 'BUCKET' for `sam package`
                                  #Also used by TEMPLATEs themselves of:
                                  #  - --template-file
                                  #     - `sam deploy`: if > 51KB
                                  #     - `sam sync`: always
                                  #  - --resolve-image-repos
--s3-prefix                       #S3 virtual 'FOLDER' (def: none)

sam package|deploy
--[no-]resolve-s3                 #BOOL (def: false, recommended: true)
                                  #Automatically create S3 BUCKET instead of using --s3-bucket
                                  #Does it by upserting a bootstrap STACK 'S3_STACK' with BUCKET using:
                                  #  - SSE-KMS
                                  #  - VERSIONING
                                  #  - BUCKET_POLICY allowing GetObject() from SERVICE serverlessrepo.amazonaws.com (if same ACCOUNT)
                                  #  - TAG 'ManagedStackSource' with value 'AwsSamCli'
                                  #     - on STACK too
                                  #  - force HTTPS
                                  #'S3_STACK' is 'aws-sam-cli-managed-default'
                                  #  - i.e. one bootstrap STACK + BUCKET for all main STACKs

sam bootstrap
--bucket                          #S3 'BUCKET_ARN' to use with `sam package|deploy|sync|delete --s3-bucket`
                                  #Def: created by PIPELINE_STACK with:
                                  #  - allows PIPELINE_ROLE|CLOUDFORMATION_ROLE to s3:GetBucket*|GetObject*|PutObject*|List*
                                  #  - LOGGING to another BUCKET2, with file prefix 'artifact-logs'
                                  #  - VERSIONING
                                  #  - DeletionPolicy 'Retain'
                                  #  - force HTTPS
                                  #Alternative to --resolve-s3:
                                  #  - pros:
                                  #     - automatically allows s3:* PACTIONs
                                  #     - can create different BUCKETs for different STACKs
                                  #     - `sam delete` automatically deletes uploaded TEMPLATEs
                                  #     - has LOGGING
                                  #  - con: must manually call `sam pipeline bootstrap`

sam package|deploy
--force-upload                    #BOOL (def: false). Re-upload S3 OBJECT even if already exists with same contents
--signing-profiles                #'FUNCTION|LAYER=SIGNING_PROFILE[:OWNER]'
                                  #Lambda FUNC_VERSION|LAYER_VERSION_OUTPUT.SigningProfileVersionArn
                                  #Automatically sign with CodeSigner

sam package|deploy|sync
--kms-key-id                      #S3 'KMS_KEY_MID' (def: uses SSE-S3)
--metadata                        #'OBJ_JSON' or 'VAR=VAL,...'. S3 x-amz-meta-* [C]

                                  ┌────────────────┐
                                  │   ECR ASSETS   │
                                  └────────────────┘

sam package|deploy|sync
--image-repository                #ECR 'REPO[_URL]' for `sam package`
                                  #IMAGEs use 'RESOURCE' as name
--image-repositories              #Same but as 'FUNCTION=REPO[_URL]'

sam deploy
--resolve-image-repos             #BOOL (def: false, recommended: true)
                                  #Automatically create|delete one ECR REPO for each FUNCTION with PackageType Image
                                  #  - instead of using --image-repositories
                                  #  - but can still specify --image-repositories to override REPO for specific FUNCTIONs
                                  #Does it by upserting a bootstrap STACK 'ECR_STACK' with one ECR REPO per FUNCTION:
                                  #  - 'REPO' name is 'MAIN_STACK{MAIN_STACK_HASH}/FUNCTION{FUNCTION_PATH_HASH}repo'
                                  #  - allows SERVICE lambda.amazonaws.com to ecr:GetDownloadUrlForLayer|GetRepositoryPolicy|BatchGetImage()
                                  #  - TAG 'ManagedStackSource' with value 'AwsSamCli'
                                  #  - TAG 'AwsSamCliCompanionStack' with value 'ECR_STACK'
                                  #     - on STACK too, as TAG 'CompanionStackName'
                                  #'ECR_STACK' is 'MAIN_STACK-MAIN_STACK_HASH-CompanionStack'
                                  #  - i.e. one bootstrap STACK per main STACK
                                  #Automatically deletes REPO|STACK when removing FUNCTIONs with PackageType Image

sam bootstrap
--image-repository                #ECR 'REPO_ARN' to use with `sam package|deploy|sync --image-repository`
                                  #Def: created by PIPELINE_STACK and allows:
                                  #  - SERVICE lambda.amazonaws.com to ecr:GetDownloadUrlForLayer, BatchGetImage, Set|Get|DeleteRepositoryPolicy
                                  #  - PIPELINE_ROLE|CLOUDFORMATION_ROLE to ecr:GetDownloadUrlForLayer|BatchCheckLayerAvailability,
                                  #    Put|BatchGet|BatchDeleteImage, InitiateLayerUpload|UploadLayerPart|CompleteLayerUpload
                                  #  - PIPELINE_ROLE to ecr:GetAuthorizationToken
                                  #Alternative to --resolve-image-repos:
                                  #  - pro: automatically allows ecr:* PACTIONs
                                  #  - cons:
                                  #     - must manually call `sam pipeline bootstrap`
                                  #     - not deleted by `sam delete`
--[no-]create-image-repository    #BOOL. If false (def), ignore --image-repository and do not use ECR REPOs

                                  ┌──────────────────┐
                                  │   STACK UPSERT   │
                                  └──────────────────┘

sam deploy                        #Upserts a STACK, in a production stage
                                  #Uses CreateChangeSet() + ExecuteChangeSet() under-the-hood
--guided|-g                       #Interactive mode
                                  #Optionally saves flags to CONFIG file
                                  #Does not work with --resolve-s3
--[no-]confirm-changeset          #BOOL (def: false, recommended: true). Confirm before deploying, after showing diff
--no-execute-changeset            #BOOL (def: false). Dry run, i.e. does not call ExecuteChangeSet()
--[no-]fail-on-empty-changeset    #BOOL (def: true). Non-zero exit code if no STACK changes

sam deploy|sync
--capabilities                    #STACK.Capabilities
                                  #Def:
                                  #  - sam deploy: none
                                  #  - sam sync: 'CAPABILITY_NAMED_IAM' + 'CAPABILITY_AUTO_EXPAND'
                                  #Recommended: 'CAPABILITY_IAM'
--notification-arns               #STACK.NotificationARNs
--tags                            #'TAG=VAL ...'. STACK.Tags

sam deploy|sync
--role-arn                        #'ROLE_ARN'. STACK.RoleARN
sam bootstrap
--cloudformation-execution-role   #CLOUDFORMATION_ROLE. ROLE_ARN used as STACK.RoleARN, i.e. to pass to `sam deploy|sync --role-arn`
                                  #Def: created by PIPELINE_STACK and:
                                  #  - assumable by cloudformation.amazonaws.com
                                  #  - allowed any PACTION on any RESOURCE

sam deploy
--on-failure                      #STACK.OnFailure
                                  #'DELETE' actually tries 'ROLLBACK' first
--[no-]disable-rollback           #BOOL (def: false). STACK.DisableRollback
--max-wait-duration               #NUM (in mins, def: 1h). Deployment timeout

ENVVAR SAM_CLI_POLL_DELAY         #NUM (in secs). WAIT_OPTS.minDelay for WAIT ChangeSetCreateComplete
                                  #Def: 5s with `sam deploy`, 500ms with `sam sync`

                                  ┌───────────────────────┐
                                  │   STACK LIVE RELOAD   │
                                  └───────────────────────┘

sam sync                          #Live reloading
                                  #Meant to update RESOURCEs fast, in a development stage
                                  #Must either use --no-code (def) or --code

--code                            #Update RESOURCE using direct CRUD API
                                  #  - e.g. UpdateFunctionCode() with Lambda FUNCTION
                                  #Does not update the STACK, i.e. creates drift
                                  #Only for following RESTYPEs:
                                  #  - AWS::Serverless|Lambda::Function|LayerVersion
                                  #  - AWS::Serverless::Api|HttpApi, AWS::ApiGateway::RestApi, AWS::ApiGatewayV2::HttpApi
                                  #  - AWS::Serverless|StepFunctions::StateMachine
--resource                        #Filter by 'RESTYPE' (def: all)
                                  #Only with --code
--resource-id                     #Filter by 'RESOURCE' (def: all)
                                  #Only with --code
CACHING ==>                       #`sam sync --code` always caches, using RESOURCE's contents
                                  #I.e. if contents did not change, do not update RESOURCEs using CRUD direct API
                                  #Contents is:
                                  #  - FUNCTION|LAYER with PackageType Zip: zip file
                                  #     - also does an API call to check FUNC_VERSION|LAYER_VERSION_OUTPUT.CodeSha256
                                  #  - FUNCTION|LAYER with PackageType Image: local IMAGE hash
                                  #  - API: OpenAPI spec (BodyS3Location|DefinitionUri's contents)
                                  #  - STATE_MACHINE: definition (DefinitionUri's contents)
BUILD_DIR/sync.toml               #Automatically created by `sam sync`
                                  #Contains cache information of both `sam sync --code` and `sam sync --no-code --skip-deploy-sync`

--no-code                         #Upserts STACK, in a development stage
                                  #Uses UpdateStack(), i.e. no CHANGESET
                                  #Meant to remove drift introduced by --code
                                  #Always use default values for --on-failure, --disable-rollback, --max-wait-duration
--[no-]skip-deploy-sync           #BOOL (def: true). Caches, using TEMPLATE.Resources.RESOURCE definitions
                                  #I.e. if they did not change since last `sam sync --no-code`, do not update STACK
                                  #Only for the RESTYPEs mentioned above
                                  #Always false if either:
                                  #  - > 50 such RESOURCEs
                                  #  - last `sam sync --no-code` was >= 7 days ago
                                  #If cached, performs `sam sync --code` instead
                                  #Only with --no-code

--[no-]watch                      #BOOL (def: false, recommended: true). On file changes of:
                                  #  - FUNCTION|LAYER|API|STATE_MACHINE's local files: sam sync --code
                                  #     - even if --no-code set
                                  #  - TEMPLATE: sam sync --no-code
                                  #     - unless --code set
                                  #Also does `sam sync --no-code` at start|end
--watch-exclude                   #'RESOURCE=FILE|DIR' to not watch

--[no-]dependency-layer           #BOOL (def: true). Put FUNCTION dependencies into a LAYER
                                  #Only meant to speed up `sam sync`, not to be used in production
                                  #Only for FUNCTIONs with PackageType Zip
                                  #Not if --use-container
                                  #Only for BuildMethod 'nodejs*' (not 'esbuild'), 'python*', 'java*'
                                  #Uses a nested STACK 'AwsSamAutoDependencyLayerNestedStack'
                                  #BUILD_DIR is SAM_LDIR/auto-dependency-layer/ instead
                                  #The LAYER is uploaded during --code
                                  #However, must be specified with --no-code too

GLOBAL_CONFIG                     #BOOL. If false (def), confirm that a development stage is used
 .accelerateOptInStacks           #Set to MD5('TEMPLATE_PATH' + 'STACK') after the confirmation

                                  ┌──────────────────┐
                                  │   STACK DELETE   │
                                  └──────────────────┘

sam delete                        #Deletes main STACK: DeleteStack()
                                  #In S3_STACK, deletes:
                                  #  - not the STACK itself nor the BUCKET
                                  #  - only following OBJECTs with DeleteObject():
                                  #     - assets from `sam package`
                                  #     - if --s3-bucket (not --resolve-s3): --template-file TEMPLATE
                                  #     - if also --s3-prefix: any OBJECT within it
                                  #        - including --resolve-image-repos TEMPLATE
                                  #Deletes ECR_STACK: DeleteRepository() + DeleteStack()

--no-prompts                      #BOOL. If false (def), interactive

                                  ┌────────────────┐
                                  │   STACK INFO   │
                                  └────────────────┘

sam list
--output                          #Either 'table' (def) or 'json'

sam list resources                #Print all STACK_RESOURCEs both:
                                  #  - locally: 'RESOURCE', using TEMPLATE
                                  #     - if using SAM transform, expand it first
                                  #  - deployed (if --stack-name set): RESOURCE_MID, using ListStackResources()

sam list stack-outputs            #Print all STACK_OUTPUTs, using DescribeStacks()

sam list endpoints                #Prints each:
                                  #  - Lambda: FUNC_URL ('-' if none)
                                  #  - API Gateway:
                                  #     - 'https://DNAME'
                                  #        - if no MAPPING: 'INVOKE_URI/STAGE' instead, for each STAGE
                                  #     - '/PATH HTTP_METHOD,...' (using OpenAPI spec)
                                  #Uses multiple API calls from CloudFormation, API Gateway, Lambda
                                  #If no --stack-name, only shows the '/PATH HTTP_METHOD,...'

                                  ┌───────────────────┐
                                  │   INVOKE REMOTE   │
                                  └───────────────────┘

sam remote invoke ['RESOURCE']    #Invoke RESOURCE in AWS API
                                  #RESOURCE can be Lambda FUNCTION, Step Functions STATE_MACHINE, SQS QUEUE or Kinesis data stream
                                  #Def RESOURCE: guessed if only one possible in current STACK

--event|-e                        #Input, i.e. main REQ.PARAM
                                  #Def: none|empty
--event-file                      #Same but as 'FILE' or '-' (stdin)
--test-event-name                 #Same but using 'TEST_EVENT', using same logic as `sam remote test-event ...`
                                  #Only with Lambda

--parameter                       #Any 'PARAM=VAL ...', i.e. other REQ.PARAMs
                                  #Some PARAMs have default values, and some are automatically set

--output                          #Either 'text' (def) or 'json'
                                  #Response is split into two (stdout|stderr) if both:
                                  #  - --output=text
                                  #  - Lambda or Step Functions
                                  #Else, the response is printed full on stdout

LAMBDA ==>                        #Calls Invoke[WithResponseStream]()
                                  #Input: REQ.Payload
                                  #Default PARAMs: InvocationType 'RequestResponse', LogType 'Tail'
                                  #Always sets PARAMs: FunctionArn
                                  #Splits: INVOCATION_RES.ResponseBody (stdout), INVOCATION_RES.LogResult (stderr)

STEP FUNCTIONS ==>                #Calls StartExecution()
                                  #Input: REQ.Input
                                  #Default PARAMs: name 'sam_remote_invoke_DATE'
                                  #Always sets PARAMs: stateMachineArn
                                  #Splits: EXECUTION.output (stdout), EXECUTION.error|cause (stderr)

SQS ==>                           #Calls SendMessage()
                                  #Input: REQ.MessageBody
                                  #Default PARAMs: none
                                  #Always sets PARAMs: QueueUrl
                                  #If set, PARAM Message[System]Attributes must be 'JSON'

KINESIS ==>                       #Calls PutRecord()
                                  #Input: REQ.Data
                                  #Default PARAMs: PartitionKey UUIDv4
                                  #Always sets PARAMs: StreamName

                                  ┌───────────────────────┐
                                  │   INVOKE LOCAL MAIN   │
                                  └───────────────────────┘

sam local invoke ['FUNCTION']     #Invoke Lambda FUNCTION locally (emulation)
                                  #Does not work if RESPROP Code.ZipFile or InlineCode
                                  #Must be run after `sam build`

--event|-e                        #REQ, as a 'PATH.json' or '-' (stdin)
                                  #Def: empty {}

--env-vars|-n                     #'PATH.json' containing '{ FUNCTION|Parameters: { ENVVAR: 'VAL',... },... }'
                                  #Current ENVVARs are not used
                                  #Always emulates all Lambda ENVVARs, with exceptions:
                                  #  - AWS_SAM_LOCAL 'true'
                                  #  - AWS_LAMBDA_FUNCTION_VERSION '$LATEST'
                                  #  - AWS_LAMBDA_LOG_STREAM_NAME '$LATEST'
                                  #  - AWS_ACCOUNT_ID '123456789012'
                                  #  - AWS_LAMBDA_INITIALIZATION_TYPE 'on-demand'
                                  #  - AWS_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN: short-term CREDS

--log-file|-l                     #'PATH' to output:
                                  #  - INVOCATION_RES.ResponseBody (def: stdout)
                                  #  - INVOCATION_RES.LogResult (def: stderr)
                                  #sam logs are always printed on stderr

--shutdown                        #BOOL (def: false). Emulate FUNC_INSTANCE shutdown after invocation
                                  #Meant to test Lambda extensions' shutdown behavior
                                  #Regardless, container can be interrupted by CTRL-C

                                  ┌───────────────────────────┐
                                  │   INVOKE LOCAL ADVANCED   │
                                  └───────────────────────────┘

ENVVAR SAM_LAYER_CACHE_BASEDIR    #'DIR' caching LAYERs used by FUNCTION
--layer-cache-basedir             #Def: SAM_GDIR/layers-pkg
                                  #Cached at DIR/LAYER_NAME/
                                  #Cache not invalidated on new LAYER_VERSIONs
                                  #Cache invalidated on --force-image-build
                                  #Not cached if LAYER defined in same TEMPLATE as FUNCTION

ENVVAR SAM_DEBUG_PORT
--debug-port|-d                   #PORT_NUM. Start debugger in localhost:PORT_NUM
                                  #If set, FUNC_VERSION.Timeout will also be set to 10h
ENVVAR DEBUGGER_ARGS
--debug-args                      #Debugger 'ARG ...', e.g. `--inspect-brk`
--debugger-path                   #'DIR' to custom debugger command
--container-env-vars              #'[FUNCTION.]ENVVAR=VAL' (def: none) passed during `docker build`
                                  #Only used when debugging

                                  ┌────────────────────────┐
                                  │   INVOKE LOCAL IMAGE   │
                                  └────────────────────────┘

aws-lambda-rie-ARCH               #Go binary running Lambda locally
                                  #Vendored inside SAM CLI
                                  #Repository is aws-lambda-runtime-interface-emulator

--invoke-image|-ii                #'[FUNCTION.]URI'. Base container image that runs aws-lambda-rie
                                  #If PackageType Image, uses FUNC_VERSION.Code.ImageUri instead
                                  #Def: 'public.ecr.aws/lambda/RUNTIME:VERSION-ARCH'
                                  #Built locally with `docker build`

ENVVAR SAM_FORCE_IMAGE_BUILD      #BOOL. If false (def), do not rebuild --invoke-image unless has changed, including:
--force-image-build               #  - new version of --invoke-image
                                  #  - changed RUNTIME or RUNTIME version
                                  #  - added|removed LAYER (but not LAYER_VERSION)

ENVVAR SAM_DOCKER_NETWORK
--docker-network                  #Like sam build

ENVVAR SAM_SKIP_PULL_IMAGE        #Like sam build
--skip-pull-image                 #If PackageType Image, always set

ENVVAR SAM_DOCKER_VOLUME_BASEDIR  #TEMPLATE's 'DIR'
--docker-volume-basedir|-v        #Only meant for remote execution edge cases

--container-host                  #'HOST' (def: 'localhost') of container
--container-host-interface        #'IP' (def: '127.0.0.1') of container
                                  #Can be '0.0.0.0'
--add-host                        #'HOST:IP' added to container's host file

                                  ┌─────────────────────────┐
                                  │   INVOKE LOCAL SERVER   │
                                  └─────────────────────────┘

sam local start-lambda            #Like `sam local invoke` but as a local HTTP server, with all Lambda FUNCTIONs
                                  #Only endpoint is: POST http://HOST:PORT/2015-03-31/functions/FUNCTION/invocations
                                  #Cannot pass X-Amz-Invocation-Type [C] nor X-Amz-Log-Type [C]
                                  #Uses Flask under-the-hood
--FLAG                            #Like sam local invoke, except no --event
--host                            #'HOST' (def: '127.0.0.1')
--port|-p                         #PORT_NUM (def: 3001)
--warm-containers                 #Whether to:
                                  #  - default: creates a new FUNC_INSTANCE for each request
                                  #  - 'EAGER' (recommended) or 'LAZY':
                                  #     - keep the same FUNC_INSTANCE for all requests
                                  #        - it is only started on first request
                                  #     - also, watch for TEMPLATE file changes, automatically reloading
                                  #Also, whether to build and start underlying container:
                                  #  - default or 'LAZY': on first request
                                  #  - 'EAGER': right away
--debug-function                  #'FUNCTION' to receive --debug*
                                  #Only if --warm-containers

                                  ┌──────────────────────────────┐
                                  │   INVOKE LOCAL API GATEWAY   │
                                  └──────────────────────────────┘

sam local start-api               #Like `sam local start-lambda` but emulates any STACK's API Gateway API too
                                  #Endpoint is: HTTP_METHOD http://HOST:PORT/PATH
                                  #Emulates:
                                  #  - v1|v2
                                  #  - every ROUTE
                                  #  - STAGE: only routing and STAGE_VARs
                                  #  - OpenAPI spec
                                  #  - CORS
                                  #  - API.binaryMediaTypes
                                  #Does not emulate:
                                  #  - WebSocket API
                                  #  - GRESP, MODEL, REQVALID, APIKEY, USAGEPLAN, DNAME, MAPPING, CCERTIFICATE, VPCLINK
--FLAG                            #Like sam local start-lambda

--static-dir|-s                   #'DIR' (def: 'public'). Serve DIR as static files at /
                                  #If `sam build` was run, DIR is relative to BUILD_DIR, not cwd
                                  #Uses Content-Disposition: inline; filename=FILE [S]
                                  #Guesses Content-Type [S]
                                  #Sets ETag [S] but Expires [S] expires right away and Cache-Control: no-cache; max-age=0 [S]
                                  #Uses werkzeug under-the-hood

--disable-authorizer              #BOOL. If false (def), emulates API Gateway AUTHORIZERs
                                  #Does not emulate: authorizerType 'JWT|COGNITO_USER_POOLS', authorizerCredentials,
                                  #authorizerResultTtlInSeconds, identityValidationExpression

--ssl-cert-file                   #'PATH' (def: none) to SSL certificate
--ssl-key-file                    #'PATH' (def: none) to SSL key

                                  ┌───────────────────────┐
                                  │   INVOKE MOCK EVENT   │
                                  └───────────────────────┘

sam local generate-event          #Scaffolds a mock Lambda REQ, when invoked by a given SERVICE + ACTION
 SERVICE ACTION                   #Meant for unit tests, when calling HANDLER FUNC programmatically
                                  #Printed on stdout
                                  #Only for FUNCTIONs triggered by another SERVICE, as opposed to FUNC_URL or direct Invoke()

--PARAM                           #SERVICE|ACTION-specific parameters
                                  #Some PARAMs are automatically converted to base64, URL encoding, or md5
                                  #Def: dummy ones (hardcoded, not random)

sam local generate-event          #Show list of SERVICEs
sam local generate-event SERVICE  #Show list of ACTIONs
sam local generate-event
 SERVICE ACTION --help            #Show list of PARAMs

                                  ┌───────────────────────┐
                                  │   INVOKE TEST EVENT   │
                                  └───────────────────────┘

sam remote test-event             #CRUD for Lambda TEST_EVENTs, i.e. INVOCATION_REQs
 put|list|get|delete              #Meant for end-to-end tests, when calling Lambda through its API
 ['FUNCTION']                     #Uses API calls on EventBridge schema registry 'lambda-testevent-schemas'
                                  #Automatically creates|deletes the schemas
                                  #Automatically deletes old versions, keeping max 5 of them

sam remote test-event
 put|get|delete
--name                            #'TEST_EVENT'

sam remote test-event put         #
--file                            #'PATH.json|yaml' or '-' (stdin) with REQ input
--force|-f                        #Unless set, fails if TEST_EVENT already exists

sam remote test-event get         #
--output-file                     #'PATH.json' (def: stdout) for REQ output

                                  ┌──────────┐
                                  │   LOGS   │
                                  └──────────┘

sam logs                          #Prints Cloudwatch logs in current STACK
                                  #Only for Lambda FUNCTIONs, API Gateway APIs, StepFunctions STATE_MACHINEs
                                  #Uses FilterLogEvents(), DescribeLogStreams(), ListStackResources()

--cw-log-group                    #'LOG_GROUP' (def: all)
--name|-n                         #'FUNCTION|API|STATE_MACHINE' (def: all)
                                  #Also shows logs from other FUNCTION|API|STATE_MACHINEs sharing the same LOG_GROUP
                                  #Noop if --cw-log-group

--filter                          #'FILTER_PATTERN' (def: any). LLEVENTS_REQ.filterPattern
                                  #Also highlighted (unless --output 'json')
--start-time|-s                   #'DATE' or words like 'yesterday' or '5mins ago'. LLEVENTS_REQ.startTime
                                  #Def: '10m ago'
--end-time|-e                     #Same for LLEVENTS_REQ.endTime
                                  #Def: now
--tail|-r                         #Live tail
                                  #Polls every second (does not use StartLiveTail())

--output                          #Either 'text' (def) or 'json'

                                  ┌────────────┐
                                  │   TRACES   │
                                  └────────────┘

sam traces                        #Print X-Ray traces (using GetTraceSummaries() + BatchGetTraces())
                                  #Also print graph (using GetServiceGraph())
--trace-id|-ti                    #'TRACE_ID' (def: any)
--tail|-t
--start-time|-s
--end-time|-e
--output                          #Like sam logs

sam logs
--include-traces|-i               #Prints `sam traces` output too, interleaved

                                  ┌─────────┐
                                  │   CDK   │
                                  └─────────┘

DETECTION ==>                     #If any of the following exists:
                                  #  - RESOURCE AWS::CDK::Metadata
                                  #  - RESOURCE.Metadata['aws:cdk:path']
                                  #  - ./manifest.json
                                  #  - ./tree.json
                                  #  - ./cdk.json

sam validate|package|deploy|sync  #Using it with CDK is not officially supported
                                  #Those can only be used on the synthetized TEMPLATE file created by CDK

sam build                         #Does not build if HFOPTS.bundling was used

sam package                       #Handles ASSETs already built by CDK, based on RESOURCE.Metadata['aws:asset:*']
                                  #Replaces RESPROP with PATH to built file
                                  #Sets RESOURCE.Metadata.SamResourceId using aws:asset:path
                                  #If Code.fromAssetImage(), sets RESOURCE.Metadata.Docker*
                                  #Do not build if HFOPTS.bundling was used

aws-cdk-lib/aws-sam               #L1 RESOURCEs for CDK, e.g. CfnFunction, CfnApplication or CfnSimpleTable
                                  #I.e. CDK creates AWS::Serverless::* RESTYPEs
                                  #No L2 RESOURCEs

                                  ┌───────────────┐
                                  │   TERRAFORM   │
                                  └───────────────┘

sam build|local
--hook-name                       #'SAM_BUILD_PLUGIN'. Only available one: 'terraform'

--hook-name 'terraform'           #Allows using Terraform
                                  #Converts Terraform template to CloudFormation
                                  #Cannot use --template-file, --parameter-overrides, --build-in-source
                                  #If --use-container, must specify --build-image
--[skip-]prepare-infra            #BOOL (def: true). If false, caches generated TEMPLATE

sam build
--terraform-project-root-path     #Terraform root 'DIR' (def: '.')

sam local
--terraform-plan-file             #Terraform plan 'PATH.json', used as input to convert to CloudFormation TEMPLATE
                                  #Def: automatically created using:
                                  #  - terraform init -input=false
                                  #  - terraform plan -out TEMP_FILE -input=false
                                  #  - terraform show -json TEMP_FILE

./.aws-sam-iacs/iacs_metadata
 /template.json                   #Generated TEMPLATE, automatically used by `sam build|local`

TEMPLATE.Metadata
 ['AWS::SAM::Hook'].HookName      #'terraform'. Set on generated TEMPLATE

GLOBAL_CONFIG
 .experimentalTerraformSupport
ENVVAR
 SAM_CLI_BETA_TERRAFORM_SUPPORT   #BOOL (def: false). Seems to not be used right now, i.e. actually always true
