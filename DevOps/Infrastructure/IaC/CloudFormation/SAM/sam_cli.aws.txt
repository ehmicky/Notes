
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   SAM CLI   ┃
                                  ┗━━━━━━━━━━━━━┛

VERSION ==>                       #1.127.0

SAR ==>                           #See its doc
TRANSFORM ==>                     #See its doc

                                  ┌─────────────┐
                                  │   INSTALL   │
                                  └─────────────┘

INSTALL ==>                       #Download|extract zip from GitHub releases

./install                         #Install script
                                  #Just copies files and create symlinks
                                  #Can delete zip extracted contents afterwards

--update|-u                       #Update instead of new install
                                  #Previous versions kept at INSTALL_DIR/X.Y.Z
                                  #Current version is symlink from INSTALL_DIR/current to INSTALL_DIR/X.Y.Z

--install-dir|-i                  #'INSTALL_DIR' (def: /usr/local/aws-sam-cli) containing binary + source code
--bin-dir|-b                      #'DIR' (def: /usr/local/bin) with symlink to `sam` executable

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

sam ...
--config-file                     #'PATH' to CONFIG (def: './samconfig.y[a]ml|toml')
--config-env                      #'SAM_PROFILE' (def: 'default')
--save-params                     #Save FLAGs to CONFIG file

CONFIG.version                    #Must be 0.1
CONFIG.SAM_PROFILE.COMMAND|global #Default VAL for CLI flags
 .parameters.FLAG                 #snake_case for COMMAND + FLAG, e.g. local start-api -> local_start_api

YAML SYNTAX ==>                   #Multiple VALs: ARR

TOML SYNTAX ==>                   #Multiple VALs: "VAL ..."
                                  #OBJ: "VAR=VAL ..."
                                  #OBJ_ARR: ["VAR=VAL ...", ...]
[SAM_PROFILE]
[SAM_PROFILE.COMMAND|global]
[SAM_PROFILE.COMMAND|global
 .parameters]                     #When using TOML, each depth level must be defined

                                  ┌─────────────┐
                                  │   GENERAL   │
                                  └─────────────┘

ENVVAR SAM_CLI_BETA_FEATURES      #Enable all beta features
sam ... --[no-]beta-features     !#BOOL (def: false). Noted like this

ENVVAR SAM_CLI_BETA_*             #Enable a specific beta feature

ENVVAR SAM_CLI_TELEMETRY=0        #Disable telemetry

sam ...
--debug                           #Debug logs

sam docs CLI_COMMAND              #Open docs in browser

                                  ┌─────────────────┐
                                  │   ENVIRONMENT   │
                                  └─────────────────┘

sam ...
--profile                         #AWS CONFIG 'PROFILE' (def: guessed)
--region                          #'REGION' (def: guessed)

sam local generate-event
--partition                       #'PARTITION' (def: 'aws')

                                  ┌──────────────────┐
                                  │   STACK CONFIG   │
                                  └──────────────────┘

sam validate|build|sync|package
 |deploy|publish|local|list
 |publish
--template[-file]|-t              #'PATH' to TEMPLATE (def: 'template.y[a]ml|json')

sam remote|sync|deploy|delete|list
--stack-name                      #CloudFormation 'STACK'

sam build|local|sync|remote|list
--parameter-overrides             #'PARAM=VAL,...'. STACK.Parameters

                                  ┌──────────┐
                                  │   LINT   │
                                  └──────────┘

sam validate                      #Validate TEMPLATE syntax
--lint                            #Run cfn-lint

                                  ┌───────────────┐
                                  │   TERRAFORM   │
                                  └───────────────┘

sam build|local
--hook-name                       #'SAM_BUILD_PLUGIN'
                                  #Only available one: 'terraform', to support Terraform templates
--[skip-]prepare-infra            #BOOL (def: true). Run preparation logic even if no STACK changes
                                  #Only with --hook-name

sam build
--terraform-project-root-path     #Terraform root 'DIR' (def: .)

sam local
--terraform-plan-file PATH        #Terraform plan 'PATH'

                                  ┌──────────┐
                                  │   INIT   │
                                  └──────────┘

sam init                          #Scaffolds
                                  #Interactive if no options

--output-dir|-o                   #Output 'DIR'
--name|-n                         #'PROJECT_NAME', e.g. used in README, etc.

--[no-]interactive                #BOOL (def: true). Interactive input for required flags
--[no-]input                      #BOOL (def: true). Same for optional flags
--extra-context                   #'{PARAM: "VAL",...}_JSON'. Override specific template parameters

--package-type                    #FUNC_VERSION.PackageType
--architecture                    #FUNC_VERSION.Architectures
--runtime                         #FUNC_VERSION.Runtime
--base-image                      #'amazon/RUNTIME-base'. Docker image used to deploy

--dependency-manager              #Package manager to install SDK
                                  #Can be:
                                  #  - 'cli-package': AWS CLI
                                  #  - 'npm': JavaScript
                                  #  - 'pip': Python
                                  #  - 'mod': Go
                                  #  - 'bundler': Ruby
                                  #  - 'gradle', 'maven': Java

--app-template                    #'INIT_TEMPLATE' among: 'hello-world'
--location|-l                     #Cookiecutter scaffolding DIR, among:
                                  #  - 'DIR'
                                  #  - 'PATH.zip'
                                  #  - 'URI.zip'
                                  #  - 'gh:USER/REPO'
                                  #  - 'git+ssh://git@github.com/USER/REPO.git'

--[no-]tracing                    #BOOL (def: false). Enable X-Ray
--[no-]application-insights       #BOOL (def: false). Enable CloudWatch Application Insights monitoring
--[no-]structured-logging         #BOOL (def: false). Enable Structured Logging

                                  ┌──────────────────┐
                                  │   STACK CREATE   │
                                  └──────────────────┘

sam deploy                        #Creates a STACK and deploy it
--guided|-g                       #Interactive mode
                                  #Does not work with --[no-]resolve-s3
--[no-]confirm-changeset          #BOOL (def: false). Confirm before deploying, after showing diff
--[no-]execute-changeset          #BOOL (def: true). Use a CHANGESET
--[no-]fail-on-empty-changeset    #BOOL (def: true). Non-zero exit code if no STACK changes

sam deploy|sync
--capabilities                    #STACK.Capabilities
--notification-arns               #STACK.NotificationARNs
--tags                            #'TAG=VAL'. STACK.Tags
--role-arn                        #'ROLE_ARN' executing CHANGESET

sam deploy
--on-failure                      #STACK.OnFailure
--[no-]disable-rollback           #BOOL (def: false). STACK.DisableRollback
--max-wait-duration               #NUM (in mins). Deployment timeout

ENVVAR SAM_CLI_POLL_DELAY         #NUM (in secs, def: 5). How often to poll with DescribeStack() WAIT

                                  ┌──────────────────┐
                                  │   STACK UPDATE   │
                                  └──────────────────┘

sam sync                          #Update STACK by doing a CHANGESET
--[no-]watch                      #BOOL (def: false). Re-perform when local file changes
--watch-exclude                   #'[[NESTED_STACK/]RESOURCE=]FILE|DIR' to not watch
--[no-]skip-deploy-sync           #BOOL (def: false). Do not sync bootstrap STACK if TEMPLATE did not change
--[no-]dependency-layer           #BOOL (def: false). Put FUNCTION dependencies into a LAYER
--resource-id                     #'[NESTED_STACK/]RESOURCE'. Only sync that RESOURCE
--resource                        #Same using RESTYPEs among:
                                  #  - AWS::Serverless|Lambda::Function|LayerVersion
                                  #  - AWS::Serverless|ApiGatewyaV2::Api, AWS::Serverless:HttpApi, AWS::ApiGatewayV2::Api
                                  #  - AWS::Serverless|StepFunctions::StateMachine
--code                            #Same using all the above RESTYPEs

                                  ┌──────────────────┐
                                  │   STACK DELETE   │
                                  └──────────────────┘

sam delete                        #Delete STACK
--[no-]prompts                    #BOOL (def: true). Interactive

                                  ┌────────────────┐
                                  │   STACK INFO   │
                                  └────────────────┘

sam list
--output                          #Either 'table' (def) or 'json'
sam list resources                #Print all STACK_RESOURCEs
sam list stack-outputs            #Print all STACK_OUTPUTs
sam list endpoints                #Print Lambda and API Gateway local|remote URIs

                                  ┌───────────┐
                                  │   BUILD   │
                                  └───────────┘

sam build [FUNCTION|LAYER]        #Build Lambda FUNCTION|LAYER, for AWS::Serverless|Lambda::Function|LayerVersion
                                  #Run by `sam deploy|sync`???
--build-dir|-c                    #Output 'DIR'
                                  #Deleted before build starts

sam build|sync
--base-dir|-s                     #'DIR' used to resolve relative PATHs in TEMPLATE
                                  #Def: TEMPLATE's DIR
--[no-]build-in-source            #Run build step. Can be (def: none):
                                  #  - 'nodejsX.x'
                                  #  - 'esbuild'
                                  #  - 'Makefile'

sam build
--exclude|-x                      #'RESOURCE' to exclude
--parallel|-p                     #Build all FUNCTIONs|LAYERs in parallel
--manifest|-m                     #'PATH.json' to custom dependency manifest
--[no-]cached|-c                  #BOOL (def: false). Cache build artifacts, based on their file contents
                                  #Does not cache dependencies
--cache-dir|-cd                   #Cache 'DIR' (def: ./.aws-sam/cache/)

sam build|sync
--use-container|-u                #Build with a container
--build-image|-bi                 #'[FUNCTION|LAYER.]URI'. Container image
                                  #Def: 'public.ecr.aws/sam/build-RUNTIME:latest'

sam build
--container-env-var|-e            #'[FUNCTION|LAYER.]ENVVAR=VAL' passed to container
--container-env-var-file|-ef      #Same but as 'PATH.json' containing OBJ
--mount-with|-mw                  #'READ' (def) or 'WRITE'. Allow containing to write to source DIR
--[skip-]pull-image               #BOOL (def: true). Use latest container image for Lambda SDK
--docker-network                  #Docker 'NETWORK_NAME' (def: bridge)

                                  ┌────────────┐
                                  │   ASSETS   │
                                  └────────────┘

sam package                       #Like `aws cloudformation package` except:
                                  #  - also uploads to ECR, not only S3
                                  #  - can automatically create ECR REPO and S3 BUCKETs
                                  #  - different sets of available RESTYPEs|PROPs
                                  #Run by `sam deploy`
--output-template-file            #'PATH' (def: stdout) of the transformed TEMPLATE

sam package|deploy
--use-json                        #Instead of YAML, for TEMPLATEs
--[no-]progressbar                #BOOL (def: true). Progress bar
--signing-profiles                #'FUNCTION|LAYER=SIGNING_PROFILE[:OWNER]'. Lambda FUNC_VERSION.SigningProfileVersionArn

sam package|deploy|sync
--metadata                        #'OBJ_JSON'. Metadata attached to each S3 OBJECT or ECR REPO

                                  ┌───────────────┐
                                  │   S3 ASSETS   │
                                  └───────────────┘

sam package|deploy|sync|delete
--s3-bucket                       #S3 'BUCKET' for `sam package` and TEMPLATE themselves
--s3-prefix                       #STR prefixing S3 'OBJECT'

sam package|deploy
--[no-]resolve-s3                 #BOOL (def: false). Automatically create S3 BUCKET instead of using --s3-bucket
--force-upload                    #Unless set, fail if S3 OBJECTs already exist

sam package|deploy|sync
--kms-key-id                      #S3 'KMS_KEY_MID'

sam pipeline bootstrap
--bucket                          #Like --s3-bucket

                                  ┌────────────────┐
                                  │   ECR ASSETS   │
                                  └────────────────┘

sam package|deploy|sync
--image-repository                #ECR 'REPO' for `sam package`
--image-repositories              #Same but as 'FUNCTION=REPO'

sam deploy
--resolve-image-repos             #Automatically create|delete one ECR REPO for each FUNCTION instead of using --image-repositories

sam pipeline bootstrap
--image-repository                #Same but using REPO_ARN
--[no-]create-image-repository    #BOOL (def: false). Automatically creates ECR REPO for all FUNCTIONs instead of using --image-repository

                                  ┌────────────────────┐
                                  │   CI/CD PIPELINE   │
                                  └────────────────────┘

sam pipeline bootstrap            #Create|deploy RESOURCEs needed for CI/CD

--[no-]confirm-changeset          #Like sam deploy
--[no-]interactive                #BOOL (def: false). Interactive mode

--stage                           #STR prefixing all RESOURCE names
                                  #Similar to CDK STAGE

--pipeline-user                   #IAM USER_ARN used by CI/CD provider to call CloudFormation
                                  #Must share ACCESS_KEY_ID and SECRET_ACCESS_KEY with CI/CD provider
                                  #Def: use short-term CREDS
--permissions-provider            #Either:
                                  #  - 'iam' (def): use --pipeline-user
                                  #  - 'oidc': use OIDC
--pipeline-execution-role         #ROLE_ARN (def: automatically created) used by CI/CD provider to call CloudFormation
--cloudformation-execution-role   #ROLE_ARN (def: automatically created) used as STACK.RoleARN, i.e. for CloudFormation to provision

--cicd-provider                   #Can be 'github-actions', 'gitlab', 'bitbucket-pipelines' or 'oidc'

--github-org                      #GitHub 'USER'
--github-repo                     #GitHub 'REPO'
--deployment-branch               #Git 'BRANCH'. Only with GitHub actions

--gitlab-group                    #GitLab 'USER'
--gitlab-project                  #GitLab 'REPO'

--bitbucket-repo-uuid             #BitBucket REPO UUID

--oidc-provider                   #Same values as --cicd-provider, except 'oidc'
                                  #To set when using --cicd-provider 'oidc'
--oidc-provider-url               #'URL' of OIDC provider
--oidc-client-id                  #'CLIENT_ID' with OIDC

sam pipeline init                 #Creates CI/CD configuration file, e.g. GitHub actions workflows
--bootstrap                       #Also runs sam pipeline bootstrap --interactive

                                  ┌──────────────────┐
                                  │   LOCAL INVOKE   │
                                  └──────────────────┘

sam local invoke [FUNCTION]       #Invoke Lambda FUNCTION locally (emulation)

--event|-e                        #'PATH.json' or '-' (stdin) to REQ
                                  #Def: no REQ
--env-vars|-n                     #'PATH.json' with ENVVARs to pass to FUNCTION

--shutdown                        #Emulate FUNC_INSTANCE shutdown after invocation
                                  #Meant to test Lambda extensions' shutdown behavior

--log-file|-l                     #'PATH' (def: stdout) for FUNCTION logs

--layer-cache-basedir             #Cache 'DIR' for LAYERs

--debug-port|-d                   #PORT_NUM. Start debugger in localhost:PORT_NUM
--debugger-path                   #'PATH' to debugger command
--debug-args                      #Debugger 'ARG ...'

--container-env-vars
--skip-pull-image
--docker-network                  #Like sam build
--force-image-build               #Unless set, do not rebuild container image unless has changed
--docker-volume-basedir|-v        #'DIR' of the TEMPLATE ???
--invoke-image|-ii                #Like sam build --build-image
--container-host                  #'HOST' (def: 'localhost') of container
--container-host-interface        #'NETWORK_IP' (def: '127.0.0.1') of container
                                  #Can be '0.0.0.0'
--add-host                        #'HOST:IP' added to container's host file

                                  ┌───────────────┐
                                  │   LOCAL API   │
                                  └───────────────┘

sam local start-lambda            #Start local server with Lambda FUNCTION
--FLAG                            #Like sam local invoke, except no --event
--host                            #'HOST' (def: '127.0.0.1')
--port|-p                         #PORT_NUM (def: 3001)
--warm-containers                 #Whether to load FUNCTIONs:
                                  #  - 'EAGER': right away
                                  #  - 'LAZY': on first invocation

sam local start-api               #Same as start-lambda???
                                  #Seems to use AWS::Serverless::Function CodeUri
                                  #Seems to live reload
--FLAG                            #Like sam local start-lambda
--disable-authorizer              #Ignore Lambda AUTHORIZERs
--static-dir|-s                   #'DIR'. Serve DIR as static files at /
--ssl-cert-file                   #'PATH' (def: none) to SSL certificate
--ssl-key-file                    #'PATH' (def: none) to SSL key

                                  ┌─────────────────┐
                                  │   LOCAL EVENT   │
                                  └─────────────────┘

sam local generate-event          #Scaffolds a test REQ for a given SERVICE + ACTION
 SERVICE ACTION                   #Only for specific SERVICEs|ACTIONs
--FLAG                            #Like sam local invoke, except no --event
--PARAM                           #ACTION-specific parameters
                                  #Def: dummy ones

                                  ┌────────────┐
                                  │   INVOKE   │
                                  └────────────┘

sam remote invoke [RESOURCE|ARN]  #Invoke RESOURCE in AWS
                                  #Can be Lambda FUNCTION, Step Function, SQS QUEUE, Kinesis data stream
--output                          #Either 'text' (def) or 'json'
                                  #Response printed to stdout
                                  #Logs (Lambda or Step Functions) printed to stderr
--event|-e                        #Input among:
                                  #  - Lambda: REQ
                                  #  - Step Functions: Input
                                  #  - SQS: MessageBody
                                  #  - Kinesis: Data
--event-file                      #Same but as 'FILE' or '-' (stdin)
--test-event-name                 #'TEST_EVENT' to use as Lambda REQ
--parameter                       #'PARAM=VAL' among:
                                  #  - Lambda: Qualifier, INVOCATION_REQ.InvocationType|ClientContext|LogType
                                  #  - Step Functions: name STR, traceHeader STR
                                  #  - SQS: DelaySeconds NUM, Message[System]Attributes 'JSON', MessageDeduplicationId STR, MessageGroupId STR
                                  #  - Kinesis: PartitionKey STR, ExplicitHashKey STR, SequenceNumberForOrdering STR, StreamARN STR

                                  ┌────────────────┐
                                  │   TEST EVENT   │
                                  └────────────────┘

sam remote test-event
 put|list|get|delete
 [FUNCTION|ARN]                   #CRUD for Lambda TEST_EVENTs

sam remote test-event
 put|get|delete
--name                            #'TEST_EVENT'

sam remote test-event put         #
--file                            #'PATH.json' or '-' (stdin) with REQ input
--force|-f                        #Unless set, fails if TEST_EVENT already exists

sam remote test-event get         #
--output-file                     #'PATH.json' for REQ output

                                  ┌──────────┐
                                  │   LOGS   │
                                  └──────────┘

sam logs                          #Prints Cloudwatch logs, including ones from Lambda

--name|-n                         #'[NESTED_STACK/]RESOURCE' (e.g. 'FUNCTION') (def: all)
--cw-log-group                    #'LOG_GROUP' (def: guessed from --name)

--filter                          #'FILTER_PATTERN'. LLEVENTS_REQ.filterPattern
--start-time|-s                   #'DATE' or words like 'yesterday' or '5mins ago'. LLEVENTS_REQ.startTime
                                  #Def: '10mins ago'
--end-time|-e                     #Same for LLEVENTS_REQ.endTime
                                  #Def: now
--tail|-r                         #Live tail

--output                          #Either 'text' (def) or 'json'

                                  ┌────────────┐
                                  │   TRACES   │
                                  └────────────┘

sam traces                        #Print X-Ray traces
--trace-id|-ti                    #'TRACE_ID' (def: any)
--tail|-r
--start-time|-s
--end-time|-e
--output                          #Like sam logs

sam logs
--include-traces|-i               #Also print X-Ray traces
