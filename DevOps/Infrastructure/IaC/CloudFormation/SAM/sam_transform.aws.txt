
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SAM_TRANSFORM   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.91.0

SAM CLI ==>                       #See its doc
                                  #Does not require SAM transform: supports regular RESTYPEs
                                  #However, does support SAM transform: AWS::Serverless::* RESTYPEs
                                  #Is not required by SAM transform: since transformation happens inside CloudFormation, not locally

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', must be after it
                                  #Transforms AWS::Serverless::* RESTYPEs into regular ones

TRANSFORMATION ==>                #Happens inside CloudFormation itself, not locally
                                  #I.e. any CloudFormation-related tool:
                                  #  - in order to support TEMPLATEs with SAM transform
                                  #  - must be enhanced to handle AWS::Serverless::* RESTYPEs and TEMPLATE.Globals

TEMPLATE.Globals.TYPE.RESPROPS    #OBJ. Default RESPROPs
                                  #Only for AWS::Serverless::TYPE???
                                  #OBJs are deeply merged, ARRs are prepended
                                  #Api also applies to AWS::Serverless::Function EventSource of Type 'Api'
                                  #Does not support following RESPROPs:
                                  #  - Function: FunctionName, Role, Policies, Events
                                  #  - [Http]Api: StageName, DefinitionBody
                                  #  - HttpApi: DefinitionUri

https://github.com/aws/serverless-application-model???

                                  ┌──────────┐
                                  │   LINT   │
                                  └──────────┘

cfn-lint E3038                    #AWS::Serverless TRANSFORM must be declared if using AWS::Serverless::* RESTYPEs

                                  ┌──────────────┐
                                  │   API MAIN   │
                                  └──────────────┘

TODO:
  - check what OSPEC.** sets: if missing, means missing features from AWS::Serverless::Api???

AWS::Serverless::Api             =#Expands to API Gateway v1:
                                  #  - API
                                  #  - through OSPEC: RESOURCE, ROUTE, RRESP, INTEGRATION, REQVALID, DOCPART, DOCVERS
                                  #  - STAGE
                                  #  - DEPLOYMENT
                                  #  - DNAME
                                  #  - multiple MAPPINGs
                                  #  - multiple MODELs
                                  #  - multiple AUTHORIZERs
                                  #     - Lambda PERMISSIONs
                                  #  - CORS
                                  #  - GRESP
                                  #  - USAGEPLAN
                                  #  - USAGEKEY
                                  #  - APIKEY
                                  #Also to Route53 RECORD_SET

CAN BE ADDED ==>                 =#IRESP, VPCLINK

MISSING FEATURES ==>             =#Requires OSPEC: RESOURCE, ROUTE, RRESP, INTEGRATION, REQVALID, DOCPART, DOCVERS
                                  #API: cloneFrom, parameters
                                  #INTEGRATION|STAGE|DEPLOYMENT|MODEL|APIKEY: description
                                  #Multiple: name???
                                  #ROUTE: requestParameters, requestModels
                                  #RRESP: responseModels
                                  #INTEGRATION: responseParameters
                                  #MODEL: contentType, flatten
                                  #CCERTIFICATE
                                  #USAGEPLAN: apiStages
                                  #APIKEY: enabled, value, stageKeys, customerId
                                  #Route53 RECORD_SET: CidrRoutingConfig, Comment, Failover, Geo*,
                                  #  HealthCheckId, MultiValueAnswer, Name, ResourceRecods, TTL, Weight
                                  #Check???

                                  ┌──────────────────┐
                                  │   API REST API   │
                                  └──────────────────┘

AWS::Serverless::Api             =#RESPROPs:
                                  #  - Name
                                  #  - Description
                                  #  - Tags OBJ
                                  #  - PropagateTags BOOL: whether Tags targets:
                                  #     - false (def): STAGE
                                  #     - true: API (and children), DNAME, USAGEPLAN, APIKEY (cannot set their Tags otherwise)

                                  ┌──────────────────┐
                                  │   API PAYLOADS   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - MinimumCompressionSize
                                  #  - BinaryMediaTypes (JSON pointer encoded)
                                  #     - also sets OSPEC.x-amazon-apigateway-binary-media-types

                                  ┌──────────────────┐
                                  │   API RESOURCE   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Creates RESOURCE through RESPROP Definition*
                                  #Includes RESATTRs: RootResourceId

                                  ┌───────────────────────┐
                                  │   API ROUTE REQUEST   │
                                  └───────────────────────┘

AWS::Serverless::Api             =#Creates ROUTE through RESPROP Definition*

                                  ┌────────────────────────┐
                                  │   API ROUTE RESPONSE   │
                                  └────────────────────────┘

AWS::Serverless::Api             =#Creates RRESP through RESPROP Definition*

                                  ┌─────────────────────────────┐
                                  │   API INTEGRATION REQUEST   │
                                  └─────────────────────────────┘

AWS::Serverless::Api             =#Creates INTEGRATION through RESPROP Definition*
                                  #Includes RESPROPs:
                                  #  - InvokeRole: INTEGRATION.credentials except:
                                  #     - 'arn:aws:iam::*:user/*' -> 'CALLER_CREDENTIALS' (def)
                                  #     - null -> 'NONE'

                                  ┌──────────────────────────┐
                                  │   API GATEWAY RESPONSE   │
                                  └──────────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: GatewayResponse OBJ
                                  #  - like OSPEC.x-amazon-apigateway-gateway-responses (also sets it)

                                  ┌───────────────┐
                                  │   API MODEL   │
                                  └───────────────┘

AWS::Serverless::Api             =#Include RESPROPs: Models.MODEL MODEL.schema

                                  ┌────────────────────┐
                                  │   API VALIDATION   │
                                  └────────────────────┘

AWS::Serverless::Api             =#Creates REQVALID through RESPROP Definition*

                                  ┌───────────────────────┐
                                  │   API AUTHORIZATION   │
                                  └───────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth:
                                  #  - Authorizers ARR or 'AWS_IAM'
                                  #  - DefaultAuthorizer STR???
                                  #  - ResourcePolicy SPOLICY

SPOLICY.CustomStatements         =#IAM STATEMENT_ARR
SPOLICY.AwsAccountWhitelist      =#'ACCOUNT_ID'_ARR. Add STATEMENT with:
                                  #  - PACTION 'execute-api:Invoke'
                                  #  - PRINCIPAL '*'
                                  #  - COND_KEY 'aws:SourceAccount'
SPOLICY.IpRangeWhitelist         =#'IP'_ARR. Same with COND_KEY 'aws:SourceIp'
SPOLICY.IntrinsicVpc[e]Whitelist =#'VPC_MID'_ARR. Same with COND_KEY 'aws:SourceVpc[e]'
SPOLICY.SourceVpcWhitelist       =#Same but with 'VPC'_ARR
SPOLICY.*Blacklist               =#Same as *Whitelist but excludes instead

                                  ┌────────────────────┐
                                  │   API AUTHORIZER   │
                                  └────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: Authorizers[*]:
                                  #  (AUTH_TYPE 'TOKEN|REQUEST')
                                  #  - FunctionPayloadType: AUTHORIZER.type
                                  #  - Identity:
                                  #     (AUTH_TYPE 'TOKEN|COGNITO_USER_POOLS')
                                  #     - ValidationExpression
                                  #     - Header 'HEADER'_ARR: AUTHORIZER.identitySource 'method.request.header.HEADER,...'
                                  #     (AUTH_TYPE 'REQUEST')
                                  #     - Headers 'HEADER'_ARR: AUTHORIZER.identitySource 'method.request.header.HEADER,...'
                                  #     - Context 'VAR'_ARR: AUTHORIZER.identitySource 'context.VAR,...'
                                  #     - QueryStrings 'VAR'_ARR: AUTHORIZER.identitySource 'method.request.querystring.VAR,...'
                                  #     - StageVariables 'STAGEVAR'_ARR: AUTHORIZER.identitySource 'stageVariables.STAGEVAR,...'

                                  ┌────────────────────────────┐
                                  │   API AUTHORIZER COGNITO   │
                                  └────────────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: Authorizers[*]: UserPoolArn ARN, AuthorizationScopes

                                  ┌───────────────────────────┐
                                  │   API AUTHORIZER LAMBDA   │
                                  └───────────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: Authorizers[*]:
                                  #  - FunctionArn: AUTHORIZER.authorizerUri
                                  #  - FunctionInvokeRole: AUTHORIZER.authorizerCredentials
                                  #  - DisableFunctionDefaultPermissions BOOL: if false (def), create Lambda PERMISSION

                                  ┌──────────────────────────┐
                                  │   API AUTHORIZER CACHE   │
                                  └──────────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: Authorizers[*]:
                                  #  - Identity: ReauthorizeEvery: AUTHORIZER.authorizerResultTtlInSeconds

                                  ┌──────────────┐
                                  │   API CORS   │
                                  └──────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - Cors:
                                  #     - CORS.* except:
                                  #        - no ExposeHeaders
                                  #        - can be 'ORIGIN' -> AllowOrigins[0]
                                  #     - uses OSPEC.* HTTP headers, since API Gateway v1 does not support CORS
                                  #     - if INTEGRATION.type *_PROXY, CORS response headers must be implemented by backend
                                  #  - Auth:
                                  #     - AddApiKeyRequiredToCorsPreflight BOOL (def: true): adds APIKEY to OSPEC???
                                  #     - AddDefaultAuthorizerToCorsPreflight BOOL (def: true): adds default AUTHORIZER to OSPEC???

                                  ┌───────────────┐
                                  │   API STAGE   │
                                  └───────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: StageName, Variables, MethodsSettings OBJ_ARR: ResourcePath, HttpMethod

                                  ┌────────────────────┐
                                  │   API DEPLOYMENT   │
                                  └────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - AlwaysDeploy BOOL:
                                  #     - if false (def), create a DEPLOYMENT if there was a change
                                  #     - if true, always create it
                                  #  - CanarySetting

                                  ┌─────────────────┐
                                  │   API METRICS   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: MethodsSettings OBJ_ARR: MetricsEnabled

                                  ┌─────────────────┐
                                  │   API LOGGING   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - MethodsSettings OBJ_ARR: LoggingLevel, DataTraceEnabled
                                  #  - AccessLogSettings, TracingEnabled

                                  ┌─────────────────┐
                                  │   API CACHING   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - CacheClusterEnabled, CacheClusterSize
                                  #  - MethodsSettings OBJ_ARR: CachingEnabled, CacheTtlInSeconds, CacheDataEncrypted

                                  ┌───────────────────────┐
                                  │   API IMPORT/EXPORT   │
                                  └───────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - DefinitionBody RAW_API_EXPORT_OBJ
                                  #     - def: automatically created
                                  #  - DefinitionUri OBJ: Bucket 'BUCKET', Key 'OBJECT', Version VERSION_MID
                                  #     - can use `sam package` (not `aws cloudformation package`)
                                  #  - OpenApiVersion API_EXPORT_TYPE
                                  #     - either '2.0' or '3.0.1'
                                  #     - if set, no STAGE is created
                                  #  - MergeDefinitions BOOL (def: false)
                                  #     - if non-default DefinitionBody set, merge it with the OSPEC.* set by other properties
                                  #  - Mode
                                  #  - FailOnWarnings

                                  ┌──────────────────┐
                                  │   API DOC PART   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Creates DOCPART through RESPROP Definition*

                                  ┌─────────────────────┐
                                  │   API DOC VERSION   │
                                  └─────────────────────┘

AWS::Serverless::Api             =#Creates DOCVERS through RESPROP Definition*

                                  ┌─────────────────────┐
                                  │   API DOMAIN NAME   │
                                  └─────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - Domain: DomainName, EndpointConfiguration STR
                                  #  - DisableExecuteApiEndpoint
                                  #     - also sets OSPEC2|OSERVER3.x-amazon-apigateway-endpoint-configuration.disableExecuteApiEndpoint
                                  #  - EndpointConfiguration.type STR

                                  ┌─────────────────────┐
                                  │   API PRIVATE API   │
                                  └─────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: EndpointConfiguration: VpcEndpointIds

                                  ┌─────────────┐
                                  │   API TLS   │
                                  └─────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Domain:
                                  #  - CertificateArn: DNAME.[Regional]CertificateArn
                                  #  - SecurityPolicy
                                  #  - OwnershipVerificationCertificateArn
                                  #  - MutualTlsAuthentication
                                  #     - no TruststoreWarnings

                                  ┌─────────────────┐
                                  │   API MAPPING   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Domain:
                                  #  - BasePath 'BASEPATH'_ARR (def: ['/'])
                                  #  - NormalizeBasePath BOOL (def: true): strip invalid chars

                                  ┌────────────────────┐
                                  │   API USAGE PLAN   │
                                  └────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: UsagePlan:
                                  #  - UsagePlanName, Description, Tags
                                  #  - CreateUsagePlan: configure creation of USAGEPLAN, USAGEKEY, APIKEY among:
                                  #     - 'NONE': no creation
                                  #     - 'PER_API': 'RESOURCE' name in TEMPLATE is namespaced by API_MID
                                  #     - 'SHARED': always namespaced by 'Serverless'
                                  #        - shared by all APIs in TEMPLATE
                                  #        - must be specified by only one AWS::Serverless::Api

                                  ┌──────────────────┐
                                  │   API THROTTLE   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - MethodsSettings OBJ_ARR: ThrottlingRate, ThrottlingBurstLimit
                                  #  - Auth: UsagePlan: Throttle, Quota, ApiStages OBJ_ARR: Throttle

                                  ┌────────────────────────┐
                                  │   API USAGE PLAN KEY   │
                                  └────────────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth: UsagePlan: creates USAGEKEY

                                  ┌─────────────────┐
                                  │   API API KEY   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Auth:
                                  #  - UsagePlan: creates APIKEY
                                  #  - ApiKeySourceType
                                  #  - ApiKeyRequired

                                  ┌─────────────────┐
                                  │   API ROUTE53   │
                                  └─────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs: Domain: Route53 RECORD_SET:
                                  #  - HostedZoneId
                                  #  - HostedZoneName
                                  #  - Region
                                  #  - SetIdentifier
                                  #  - IpV6 BOOL (def: false): RECORD_SET.Type 'A|AAAA'
                                  #  - DistributionDomainName: RECORD_SET.AliasTarget.DNSName (def: 'DNAME')
                                  #  - EvaluateTargetHealth
