
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SAM_TRANSFORM   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.91.0

SAM CLI ==>                       #See its doc
                                  #Does not require SAM transform: supports regular RESTYPEs
                                  #However, does support SAM transform: AWS::Serverless::* RESTYPEs
                                  #Is not required by SAM transform: since transformation happens inside CloudFormation, not locally

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', must be after it
                                  #Transforms AWS::Serverless::* RESTYPEs into regular ones

TRANSFORMATION ==>                #Happens inside CloudFormation itself, not locally
                                  #I.e. any CloudFormation-related tool:
                                  #  - in order to support TEMPLATEs with SAM transform
                                  #  - must be enhanced to handle AWS::Serverless::* RESTYPEs and TEMPLATE.Globals

TEMPLATE.Globals.TYPE.RESPROPS    #OBJ. Default RESPROPs
                                  #Only for AWS::Serverless::TYPE???
                                  #OBJs are deeply merged, ARRs are prepended
                                  #Api also applies to AWS::Serverless::Function EventSource of Type 'Api'
                                  #Does not support following RESPROPs:
                                  #  - Function: FunctionName, Role, Policies, Events
                                  #  - [Http]Api: StageName, DefinitionBody
                                  #  - HttpApi: DefinitionUri

https://github.com/aws/serverless-application-model???

                                  ┌──────────┐
                                  │   LINT   │
                                  └──────────┘

cfn-lint E3038                    #AWS::Serverless TRANSFORM must be declared if using AWS::Serverless::* RESTYPEs

                                  ┌──────────────┐
                                  │   API MAIN   │
                                  └──────────────┘

TODO:
  - replace by AWS::Serverless::Api
  - no more SAPI
  - no more "cannot be set"
  - check what OSPEC.** sets: if missing, means missing features from AWS::Serverless::Api???

AWS::Serverless::Api             =#Expands to API Gateway v1:
                                  #  - API
                                  #  - through OSPEC: RESOURCE, ROUTE, RRESP, INTEGRATION, REQVALID, DOCPART, DOCVERS
                                  #  - STAGE
                                  #  - DEPLOYMENT
                                  #  - DNAME
                                  #  - multiple MAPPINGs
                                  #  - multiple MODELs
                                  #  - multiple AUTHORIZERs
                                  #     - Lambda PERMISSIONs
                                  #  - CORS
                                  #  - GRESP
                                  #  - USAGEPLAN
                                  #  - USAGEKEY
                                  #  - APIKEY
                                  #Also to Route53 RECORD_SET

CAN BE ADDED ==>                 =#IRESP, VPCLINK

MISSING FEATURES ==>             =#Requires OSPEC: RESOURCE, ROUTE, RRESP, INTEGRATION, REQVALID, DOCPART, DOCVERS
                                  #API: cloneFrom, parameters
                                  #ROUTE: requestParameters, requestModels
                                  #RRESP: responseModels
                                  #INTEGRATION|STAGE|DEPLOYMENT|MODEL: description
                                  #MODEL: contentType, flatten
                                  #CCERTIFICATE
                                  #USAGEPLAN: apiStages
                                  #APIKEY: name, description, enabled, value, stageKeys, customerId
                                  #Route53 RECORD_SET: CidrRoutingConfig, Comment, Failover, Geo*,
                                  #  HealthCheckId, MultiValueAnswer, Name, ResourceRecods, TTL, Weight

                                  ┌──────────────────┐
                                  │   API REST API   │
                                  └──────────────────┘

AWS::Serverless::Api             =#RESPROPs:
                                  #  - Name
                                  #  - Description
                                  #  - Tags OBJ
                                  #  - PropagateTags BOOL: whether Tags targets:
                                  #     - false (def): STAGE
                                  #     - true: API (and children), DNAME, USAGEPLAN, APIKEY (cannot set their Tags otherwise)

                                  ┌──────────────────┐
                                  │   API PAYLOADS   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Includes RESPROPs:
                                  #  - MinimumCompressionSize
                                  #  - BinaryMediaTypes (JSON pointer encoded): also sets OSPEC.x-amazon-apigateway-binary-media-types

                                  ┌──────────────────┐
                                  │   API RESOURCE   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Creates RESOURCE through RESPROP Definition*
                                  #Includes RESATTRs: RootResourceId

                                  ┌───────────────────────┐
                                  │   API ROUTE REQUEST   │
                                  └───────────────────────┘

AWS::Serverless::Api             =#Creates ROUTE through RESPROP Definition*

                                  ┌────────────────────────┐
                                  │   API ROUTE RESPONSE   │
                                  └────────────────────────┘

AWS::Serverless::Api             =#Creates RRESP through RESPROP Definition*

                                  ┌─────────────────────────────┐
                                  │   API INTEGRATION REQUEST   │
                                  └─────────────────────────────┘

AWS::Serverless::Api             =#Creates INTEGRATION through RESPROP Definition*
                                  #RESPROP InvokeRole: INTEGRATION.credentials except:
                                  #  - 'arn:aws:iam::*:user/*' -> 'CALLER_CREDENTIALS' (def)
                                  #  - null -> 'NONE'

                                  ┌──────────────────────────┐
                                  │   API GATEWAY RESPONSE   │
                                  └──────────────────────────┘

AWS::Serverless::Api             =#RESPROP GatewayResponse OBJ:
                                  #  - like OSPEC.x-amazon-apigateway-gateway-responses (also sets it)

                                  ┌───────────────┐
                                  │   API MODEL   │
                                  └───────────────┘

AWS::Serverless::Api             =#RESPROP Models.MODEL MODEL.schema

                                  ┌────────────────────┐
                                  │   API VALIDATION   │
                                  └────────────────────┘

AWS::Serverless::Api             =#Creates REQVALID through RESPROP Definition*

                                  ┌───────────────────────┐
                                  │   API AUTHORIZATION   │
                                  └───────────────────────┘

AWS::ApiGateway::RestApi         =#Includes RESPROPs:
                                  #  - Authorizers ARR or 'AWS_IAM'
                                  #  - DefaultAuthorizer STR???
                                  #  - Auth.ResourcePolicy SAPI_POLICY

TODO: no more SAUTHORIZERs, SIDENTITY???

SAUTHORIZER.Identity             =#SIDENTITY

SAPI_POLICY.CustomStatements     =#IAM STATEMENT_ARR
SAPI_POLICY.AwsAccountWhitelist  =#'ACCOUNT_ID'_ARR. Add STATEMENT with:
                                  #  - PACTION 'execute-api:Invoke'
                                  #  - PRINCIPAL '*'
                                  #  - COND_KEY 'aws:SourceAccount'
SAPI_POLICY.IpRangeWhitelist     =#'IP'_ARR. Same with COND_KEY 'aws:SourceIp'
SAPI_POLICY
 .IntrinsicVpc[e]Whitelist       =#'VPC_MID'_ARR. Same with COND_KEY 'aws:SourceVpc[e]'
SAPI_POLICY.SourceVpcWhitelist   =#Same but with 'VPC'_ARR
SAPI_POLICY.*Blacklist           =#Same as *Whitelist but excludes instead

                                  ┌────────────────────┐
                                  │   API AUTHORIZER   │
                                  └────────────────────┘

AUTH_TYPE
 'TOKEN|COGNITO_USER_POOLS' ==>   #
SIDENTITY.ValidationExpression   =#AUTHORIZER.identityValidationExpression
SIDENTITY.Header                 =#'HEADER'_ARR. AUTHORIZER.identitySource 'method.request.header.HEADER,...'

AUTH_TYPE 'REQUEST' ==>           #
SIDENTITY.Headers                =#'HEADER'_ARR. AUTHORIZER.identitySource 'method.request.header.HEADER,...'
SIDENTITY.Context                =#'VAR'_ARR. AUTHORIZER.identitySource 'context.VAR,...'
SIDENTITY.QueryStrings           =#'VAR'_ARR. AUTHORIZER.identitySource 'method.request.querystring.VAR,...'
SIDENTITY.StageVariables         =#'STAGEVAR'_ARR. AUTHORIZER.identitySource 'stageVariables.STAGEVAR,...'

                                  ┌────────────────────────────┐
                                  │   API AUTHORIZER COGNITO   │
                                  └────────────────────────────┘

AWS::ApiGateway::RestApi         =#Includes RESPROPs: Authorizers[*]: UserPoolArn ARN, AuthorizationScopes

                                  ┌───────────────────────────┐
                                  │   API AUTHORIZER LAMBDA   │
                                  └───────────────────────────┘

AWS::ApiGateway::RestApi         =#Includes RESPROPs: Authorizers[*]: UserPoolArn ARN, AuthorizationScopes

SAUTHORIZER.FunctionPayloadType  =#AUTHORIZER.type except:
                                  #  - 'COGNITO_USER_POOLS': specified by setting SAUTHORIZER.UserPoolArn instead
SAUTHORIZER.FunctionArn          =#AUTHORIZER.authorizerUri
SAUTHORIZER.FunctionInvokeRole   =#AUTHORIZER.authorizerCredentials

SAUTHORIZER.DisableFunction
 DefaultPermissions              =#BOOL. If false (def), create Lambda PERMISSION

                                  ┌──────────────────────────┐
                                  │   API AUTHORIZER CACHE   │
                                  └──────────────────────────┘

SIDENTITY.ReauthorizeEvery       =#AUTHORIZER.authorizerResultTtlInSeconds

                                  ┌──────────────┐
                                  │   API CORS   │
                                  └──────────────┘

SAPI.Cors                        =#CORS.* except:
                                  #  - no ExposeHeaders
                                  #  - can be 'ORIGIN' -> AllowOrigins[0]
                                  #Uses OSPEC.* HTTP headers, since API Gateway v1 does not support CORS
                                  #If INTEGRATION.type *_PROXY, CORS response headers must be implemented by backend
SAPI.Auth.AddApiKeyRequired
 ToCorsPreflight                 =#BOOL (def: true). Adds APIKEY to OSPEC???
SAPI.Auth.AddDefaultAuthorizer
 ToCorsPreflight                 =#BOOL (def: true). Adds default AUTHORIZER to OSPEC???

                                  ┌───────────────┐
                                  │   API STAGE   │
                                  └───────────────┘

SAPI.StageName|Variables
 |MethodSettings                 =#STAGE.*

STAGE.Description                =#Cannot be set

                                  ┌────────────────────┐
                                  │   API DEPLOYMENT   │
                                  └────────────────────┘

SAPI.AlwaysDeploy                =#BOOL. If false (def), create a DEPLOYMENT if there was a change
                                  #If true, always create it

SAPI.CanarySetting               =#STAGE.DeploymentCanarySettings

DEPLOYMENT.[Stage]Description    =#Cannot be set

                                  ┌─────────────────┐
                                  │   API METRICS   │
                                  └─────────────────┘

SAPI.MethodSettings[*]
 .MetricsEnabled                 =#STAGE.*

                                  ┌─────────────────┐
                                  │   API LOGGING   │
                                  └─────────────────┘

SAPI.MethodSettings[*]
 .LoggingLevel|DataTraceEnabled
SAPI.AccessLogSettings
 |TracingEnabled                 =#STAGE.*

ACCOUNT.CloudWatchRoleArn        =#Cannot be set

                                  ┌─────────────────┐
                                  │   API CACHING   │
                                  └─────────────────┘

SAPI.CacheClusterEnabled
 |CacheClusterSize
SAPI.MethodsSettings[*]
 .CachingEnabled|CacheTtlInSeconds
 |CacheDataEncrypted             =#STAGE.*

                                  ┌───────────────────────┐
                                  │   API IMPORT/EXPORT   │
                                  └───────────────────────┘

SAPI.DefinitionBody              =#API.Body
                                  #Def: automatically created
SAPI.DefinitionUri               =#API.BodyS3Location except no ETag
                                  #Can use `sam package` (not `aws cloudformation package`)

SAPI.OpenApiVersion              =#API_EXPORT_TYPE. Either '2.0' or '3.0.1'
                                  #If set, no STAGE is created

SAPI.MergeDefinitions            =#BOOL (def: false). If non-default SAPI.DefinitionBody set,
                                  #merge it with the OSPEC.* set by other properties

SAPI.Mode|FailOnWarnings         =#API.*

API.Parameters                   =#Cannot be set

                                  ┌──────────────────┐
                                  │   API DOC PART   │
                                  └──────────────────┘

AWS::Serverless::Api             =#Creates DOCPART through RESPROP Definition*

                                  ┌─────────────────────┐
                                  │   API DOC VERSION   │
                                  └─────────────────────┘

AWS::Serverless::Api             =#Creates DOCVERS through RESPROP Definition*

                                  ┌─────────────────────┐
                                  │   API DOMAIN NAME   │
                                  └─────────────────────┘

SAPI.Domain.DomainName           =#DNAME.*

SAPI.DisableExecuteApiEndpoint   =#Also sets OSPEC2|OSERVER3.x-amazon-apigateway-endpoint-configuration.disableExecuteApiEndpoint

SAPI[.Domain]
 .EndpointConfiguration.type     =#API|DNAME.EndpointConfiguration.types[0]

                                  ┌─────────────────────┐
                                  │   API PRIVATE API   │
                                  └─────────────────────┘

SAPI.EndpointConfiguration
 .VpcEndpointIds                 =#API.*

                                  ┌─────────────┐
                                  │   API TLS   │
                                  └─────────────┘

SAPI.Domain.SecurityPolicy
 |OwnershipVerification
 CertificateArn
 |MutualTlsAuthentication        =#DNAME.*
SAPI.Domain.CertificateArn       =#DNAME.[Regional]CertificateArn

                                  ┌────────────────────────────┐
                                  │   API CLIENT CERTIFICATE   │
                                  └────────────────────────────┘

CCERTIFICATE                     =#Cannot be used

                                  ┌─────────────────┐
                                  │   API MAPPING   │
                                  └─────────────────┘

SAPI.Domain.BasePath             =#MAPPING.BasePath except as 'BASEPATH'_ARR, with def ['/']
SAPI.Domain.NormalizeBasePath    =#BOOL (def: true). Strip invalid chars

                                  ┌────────────────────┐
                                  │   API USAGE PLAN   │
                                  └────────────────────┘

SAPI.Auth.UsagePlan.*            =#USAGEPLAN.* except no ApiStages

SAPI.Auth.UsagePlan              =#Configure creation of USAGEPLAN, USAGEKEY, APIKEY
 .CreateUsagePlan                 #Can be:
                                  #  - 'NONE': no creation
                                  #  - 'PER_API': 'RESOURCE' name in TEMPLATE is namespaced by API_MID
                                  #  - 'SHARED': always namespaced by 'Serverless'
                                  #      - shared by all APIs in TEMPLATE
                                  #      - must be specified by only one AWS::Serverless::Api

                                  ┌──────────────────┐
                                  │   API THROTTLE   │
                                  └──────────────────┘

SAPI.MethodSettings[*]
 .ThrottlingRate
 |ThrottlingBurstLimit           =#STAGE.*
SAPI.Auth.UsagePlan
 .Quota|[ApiStage[*].]Throttle   =#USAGEPLAN.*

                                  ┌────────────────────────┐
                                  │   API USAGE PLAN KEY   │
                                  └────────────────────────┘

SAPI.Auth.UsagePlan              =#Creates USAGEKEY

                                  ┌─────────────────┐
                                  │   API API KEY   │
                                  └─────────────────┘

SAPI.Auth.UsagePlan              =#Creates APIKEY

SAPI.Auth.ApiKeyRequired         =#ROUTE.ApiKeyRequired

APIKEY.Name|Description|Enabled
 |Value|StageKeys                =#Cannot be set

                                  ┌─────────────────────┐
                                  │   API MARKETPLACE   │
                                  └─────────────────────┘

APIKEY.CustomerId                =#Cannot be set

                                  ┌─────────────────┐
                                  │   API ROUTE53   │
                                  └─────────────────┘

SAPI.Domain.Route53.*            =#Route53 RECORD_SET.RecordSets[0].* except:
                                  #  - Type STR -> IpV6 BOOL (def: false)
                                  #  - AliasTarget.* -> *
                                  #  - AliasTarget.DNSName -> DistributionDomainName (def: SAPI.Domain.DomainName)
                                  #  - no CidrRoutingConfig, Comment, Failover, Geo*, HealthCheckId, MultiValueAnswer,
                                  #    Name, ResourceRecods, TTL, Weight
