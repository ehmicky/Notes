
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SAM_TRANSFORM   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See CDK doc

VERSION ==>                       #1.94.0

SUMMARY ==>                       #Transform: API, CLI, CDK
                                  #Transformations: globals, RESOURCE names
                                  #RESTYPEs: API Gateway API, Lambda FUNCTION|LAYER_VERSION,
                                  # Step Functions STATE_MACHINE, DynamoDB TABLE, AppSync GRAPHQL_API
                                  #Connectors
                                  #Policy templates

SAM CLI ==>                       #See its doc
                                  #Does not require SAM transform: supports regular RESTYPEs
                                  #However, does support SAM transform: AWS::Serverless::* RESTYPEs
                                  #Is not required by SAM transform: since transformation happens inside CloudFormation, not locally

                                  ┌───────────────┐
                                  │   TRANSFORM   │
                                  └───────────────┘

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', must be after it
                                  #  - recommended to use !RFUNCs inside SAM-specific RESPROPs
                                  #Transforms AWS::Serverless::* RESTYPEs into regular ones

TRANSFORMATION ==>                #Happens inside CloudFormation itself, not locally
                                  #I.e. any CloudFormation-related tool:
                                  #  - in order to support TEMPLATEs with SAM transform
                                  #  - must be enhanced to handle AWS::Serverless::* RESTYPEs and TEMPLATE.Globals

                                  ┌─────────┐
                                  │   CLI   │
                                  └─────────┘

sam-translate                     #CLI that does the transformation
                                  #Mostly meant for debugging: the official flow is to let CloudFormation API do the transform
                                  #Does not seem to be published, i.e. must:
                                  #  - git clone
                                  #  - python -r requirements/dev.txt
                                  #  - python bin/sam-translate.py
--template-file                   #'PATH' (def: 'template.yaml')
--output-template                 #'PATH' (def: 'transformed-template.json')
--stdout                          #Output to stdout

sam translate package             #Same but first do `aws cloudformation package` first, using temporary ._sam_packaged_.yaml
--verbose
--s3-bucket                       #Passed to `aws cloudformation package`

sam translate deploy              #Same but first do `aws cloudformation deploy` afterwards (not very useful)
--capabilities
--stack-name                      #Passed to `aws cloudformation deploy`

                                  ┌─────────┐
                                  │   CDK   │
                                  └─────────┘

CDK ==>                           #Transform is applied by CloudFormation API, i.e. CDK can use it
                                  #However, prefer using CDK's L2 RESOURCEs over AWS::Serverless::* since they offer more features
                                  #  - e.g. CDK Function over aws-cdk-lib/aws-sam's CfnFunction

aws-cdk-lib/aws-sam               #CDK's L1 RESOURCEs for SAM transform, e.g. CfnFunction, CfnApplication, CfnSimpleTable, etc.
                                  #I.e. CDK creates AWS::Serverless::* RESTYPEs
                                  #No L2 RESOURCEs

                                  ┌──────────┐
                                  │   LINT   │
                                  └──────────┘

cfn-lint E3038                    #AWS::Serverless TRANSFORM must be declared if using AWS::Serverless::* RESTYPEs

                                  ┌─────────────┐
                                  │   GLOBALS   │
                                  └─────────────┘

TEMPLATE.Globals.TYPE.RESPROPS    #OBJ. Default RESPROPs
                                  #Only for AWS::Serverless::*
                                  #OBJs are deeply merged, ARRs are prepended
                                  #Also applies to AWS::ApiGateway[V2]::* implicited created by AWS::Serverless::Function EventSource of Type 'Api'

RESOURCE.IgnoreGlobals            #'RESPROP|*'[_ARR]. Ignore TEMPLATE.Globals

NOT SUPPORTED ==>                 #AWS::Serverless::[Http]Api: DefinitionBody, Description, DisableExecuteApiEndpoint, FailOnWarnings, StageName
                                  #AWS::Serverless::Api: AlwaysDeploy, ApiKeySourceType, MergeDefinitions, Mode, Models, Tags
                                  #AWS::Serverless::HttpApi: CorsConfiguration, DefaultRouteSettings, DefinitionUri, Domain, Name, RouteSettings
                                  #AWS::Serverless::Function: AutoPublishAliasAllProperties, AutoPublishCodeSha256, CodeSigningConfigArn, Events,
                                  # FunctionName, FunctionUrlConfig, ImageConfig, ImageUri, InlineCode, LoggingConfig, PackageType,
                                  # Policies, RecursiveLoop, Role, RolePath, RuntimeManagementConfig, SnapStart, SourceKMSKeyArn, VersionDescription
                                  #AWS::Serverless::StateMachine: all but PropagateTags
                                  #AWS::Serverless::SimpleTable: all but SSESpecification
                                  #AWS::Serverless::LayerVersion: all but PublishLambdaVersion
                                  #AWS::Serverless::GraphQLApi|Connector

                                  ┌─────────────────────┐
                                  │   TRANSFORMATIONS   │
                                  └─────────────────────┘

{ Ref: 'SAM_RESOURCE' }           #Replaced by { Ref: 'RESOURCE' }
                                  #'SAM_RESOURCE' is an alternative to 'RESOURCE', that is human-friendlier
'RESOURCE'                        #Most AWS::Serverless::* do not have much RESATTRs
                                  #Instead must either:
                                  #  - use 'SAM_RESOURCE'
                                  #  - guess 'RESOURCE' based on known pattern
                                  #Some include a 'HASH' part
                                  #  - i.e. only change when some of its RESPROPs change
                                  #  - i.e. must target using 'SAM_RESOURCE'

RESOURCE.Metadata|DependsOn       #On AWS::Serverless::*, only applies to the generated main RESOURCE
RESOURCE.Condition|*Policy        #On AWS::Serverless::*, applies to all generated RESOURCEs

TAG 'SERVICE:createdBy'           #With value 'SAM'. Added to most generated RESOURCEs

AWS::Serverless::Application      #Expanded to nested STACK (see SAR doc)
AWS::Serverless::[Http]Api        #Expanded to API Gateway API and related resources (see API Gateway doc)
AWS::Serverless::Function         #Expanded to Lambda FUNCTION and related resources (see Lambda, API Gateway, S3, CloudWatch Logs doc)

                                  ┌────────────────┐
                                  │   CODEDEPLOY   │
                                  └────────────────┘

AWS::Serverless::Function         #Includes RESPROPs: DeploymentPreference OBJ:
                                  #  - Enabled BOOL (def: false): create a CodeDeploy:
                                  #     - APPLICATION 'ServerlessDeploymentApplication' (singleton per STACK)
                                  #     - DEPLOYMENT_GROUP 'FUNCTIONDeploymentGroup'
                                  #  - Role ROLE_ARN
                                  #     - AWS::CodeDeploy::DeploymentGroup RESPROP ServiceRoleArn
                                  #     - def: automatically create ROLE 'CodeDeployServiceRole' (singleton per STACK)
                                  #  - TriggerConfigurations: same as AWS::CodeDeploy::DeploymentGroup RESPROP TriggerConfigurations
                                  #  - Alarms ARR: same as AWS::CodeDeploy::DeploymentGroup RESPROP AlarmConfiguration.Alarms
                                  #  - Hooks OBJ: PreTraffic|PostTraffic: same as AWS::CodeDeploy::DeploymentGroup
                                  #    RESOURCE.UpdatePolicy.CodeDeployLambdaAliasUpdate.Before|AfterAllowTrafficHook
                                  #  - PassthroughCondition BOOL (def: false, recommended: true): copy RESOURCE.Condition
                                  #    from AWS::Serverless::Function to AWS::CodeDeploy::DeploymentGroup
                                  #  - Type 'Linear10Percent5|10|15|30Minutes', 'Canary10Percent5|10|15|30Minutes', 'AllAtOnce': not documented yet
                                  #Only if RESPROP AutoPublishAlias set

                                  ┌───────────────┐
                                  │   CONNECTOR   │
                                  └───────────────┘

AWS::Serverless::Connector        #Transformed to an identity|resource-based POLICY, depending on SERVICE
                                  #See its full doc in IAM doc

SQS ==>                           #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: SNS TOPIC or EventBridge RULE (RESOURCE_REF.Arn)
                                  #  - Destination: QUEUE (RESOURCE_REF.Arn + RESOURCE_REF.QueueUrl)
                                  #  - Permissions 'Write'
                                  #Transformed to a QUEUE_POLICY on QUEUE (from QueueUrl):
                                  #  - allowing SERVICE sns|events.amazonaws.com
                                  #  - to sqs:SendMessage
                                  #  - on QUEUE2 (from Arn)
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN|RULE_ARN
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: QUEUE (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.RoleName)
                                  #  - Permissions 'Read' and|or 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing:
                                  #     - Read: sqs:ReceiveMessage|GetQueueAttributes
                                  #     - Write: sqs:DeleteMessage
                                  #  - on QUEUE
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: FUNCTION (RESOURCE_REF.RoleName)
                                  #  - Destination: QUEUE (RESOURCE_REF.Arn)
                                  #  - Permissions 'Read' and|or 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing:
                                  #     - Read: sqs:ReceiveMessage|GetQueueAttributes
                                  #     - Write: sqs:DeleteMessage|SendMessage|ChangeMessageVisibility|PurgeQueue
                                  #  - on QUEUE
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: QUEUE (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing sqs:SendMessage
                                  #  - on QUEUE

SNS ==>                           #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TOPIC (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a Lambda PERMISSION on FUNCTION:
                                  #  - allowing SERVICE sns.amazonaws.com
                                  #  - to lambda:InvokeFunction
                                  #  - SourceArn TOPIC_ARN
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION or Step Functions STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing sns:Publish
                                  #  - on TOPIC
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: EventBridge RULE (RESOURCE_REF.Arn)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a TOPIC_POLICY on TOPIC:
                                  #  - allowing SERVICE events.amazonaws.com
                                  #  - to sns:Publish
                                  #  - COND_KEY aws:SourceArn RULE_ARN

STEP FUNCTIONS ==>                #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing lambda:InvokeFunction|InvokeAsync
                                  #  - on FUNCTION
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION (RESOURCE_REF.RoleName)
                                  #  - Destination: STATE_MACHINE (RESOURCE_REF.Arn + RESOURCE_REF.Name)
                                  #  - Permissions 'Read' and|or 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing on STATE_MACHINE (from Arn):
                                  #     - Read: states:ListExecutions|DescribeStateMachine
                                  #     - Write: states:Start[Sync]Execution
                                  #  - allowing on EXECUTION/* (from Name):
                                  #     - Read: states:DescribeExecution|DescribeStateMachineForExecution|GetExecutionHistory
                                  #     - Write: states:StopExecution
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: STATE_MACHINE2 (RESOURCE_REF.Arn + RESOURCE_REF.Name)
                                  #  - Permissions 'Read' and|or 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing on STATE_MACHINE2 (from Arn):
                                  #     - Write: states:StartExecution
                                  #  - allowing on EXECUTION/* (from Name):
                                  #     - Read: states:DescribeExecution
                                  #     - Write: states:StopExecution
                                  #  - allowing on RULE 'StepFunctionsGetEventsForStepFunctionsExecutionRule':
                                  #     - Read: states:DescribeRule
                                  #     - Write: states:PutRule|PutTargets
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: EventBridge RULE (RESOURCE_REF.RoleName)
                                  #  - Destination: STATE_MACHINE (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing states:StartExecution
                                  #  - on STATE_MACHINE

EVENT BRIDGE ==>                  #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION, Step Functions STATE_MACHINE,
                                  #    EventBridge RULE, AppSync DATA_SOURCE (RESOURCE_REF.RoleName)
                                  #  - Destination: EVENT_BUS (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing events:PutEvents
                                  #  - on EVENT_BUS
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: RULE (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a Lambda PERMISSION on FUNCTION:
                                  #  - allowing SERVICE events.amazonaws.com
                                  #  - to lambda:InvokeFunction
                                  #  - SourceArn RULE_ARN

DYNAMODB ==>                      #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION, Step Functions STATE_MACHINE or AppSync DATA_SOURCE (RESOURCE_REF.RoleName)
                                  #  - Destination: TABLE (RESOURCE_REF.Arn)
                                  #  - Permissions 'Read' and|or 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing:
                                  #     - Read: dynamodb:[Batch]GetItem|Query|Scan|ConditionCheckItem|PartiQLSelect
                                  #     - Write: dynamodb:PutItem|UpdateItem||DeleteItem|BatchWriteItem,
                                  #       dynamodb:PartiQLInsert|Update|Delete
                                  #  - on TABLE and TABLE/index/*
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TABLE (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.RoleName)
                                  #  - Permissions 'Read'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing dynamodb:DescribeStream|ListStreams|GetRecords|GetShardIterator
                                  #  - on any TABLE's STREAM

APPSYNC ==>                       #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: DATA_SOURCE (RESOURCE_REF.RoleName)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing lambda:InvokeFunction|InvokeAsync
                                  #  - on FUNC_ARN + FUNC_ARN:*
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: GRAPHQL_API (RESOURCE_REF.ResourceId)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a Lambda PERMISSION on FUNCTION:
                                  #  - allowing SERVICE appsync.amazonaws.com
                                  #  - to lambda:InvokeFunction
                                  #  - SourceArn GRAPHQL_API_ARN

LOCATION SERVICE ==>              #
AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION (RESOURCE_REF.RoleName)
                                  #  - Destination: PLACE_INDEX (RESOURCE_REF.Arn)
                                  #  - Permissions 'Read'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing geo:DescribePlaceIndex|GetPlace|SearchPlaceIndexFor*
                                  #  - on PLACE_INDEX

                                  ┌──────────────────────┐
                                  │   POLICY TEMPLATES   │
                                  └──────────────────────┘

POLICY_TEMPLATE                   #See its doc in Lambda doc

CLOUDWATCH METRICS ==>            #
CloudWatchPutMetricPolicy         #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION cloudwatch:PutMetricData
                                  #  - on Resource '*'

CLOUDWATCH LOGS ==>               #
FilterLogEventsPolicy             #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION logs:FilterLogEvents
                                  #  - on 'LOG_GROUP'
                                  #     - using POLICY_TEMPLATE_PARAMS.LogGroupName

LAMBDA ==>                        #
LambdaInvokePolicy                #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION lambda:InvokeFunction
                                  #  - on 'FUNCTION'
                                  #     - using POLICY_TEMPLATE_PARAMS.FunctionName

S3 ==>                            #
S3CrudPolicy                      #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION s3:GetObject|ListBucket|GetBucketLocation|GetObjectVersion|PutObject
                                  #    |PutObjectAcl|GetLifecycleConfiguration|PutLifecycleConfiguration|DeleteObject
                                  #  - on BUCKET and BUCKET/*
                                  #     - using POLICY_TEMPLATE_PARAMS.BucketName
S3FullAccessPolicy                #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION s3:GetObject|GetObjectAcl|GetObjectVersion|PutObject|PutObjectAcl|DeleteObject|DeleteObjectTagging
                                  #    |DeleteObjectVersionTagging|GetObjectTagging|GetObjectVersionTagging|PutObjectTagging|PutObjectVersionTagging
                                  #     - on BUCKET/*
                                  #  - PACTION s3:ListBucket|GetBucketLocation|GetLifecycleConfiguration|PutLifecycleConfiguration
                                  #     - on BUCKET
                                  #  - using POLICY_TEMPLATE_PARAMS.BucketName
S3ReadPolicy                      #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION s3:GetObject|ListBucket|GetBucketLocation|GetObjectVersion|GetLifecycleConfiguration
                                  #  - on BUCKET and BUCKET/*
                                  #     - using POLICY_TEMPLATE_PARAMS.BucketName
S3WritePolicy                     #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION s3:PutObject|PutObjectAcl|PutLifecycleConfiguration
                                  #  - on BUCKET and BUCKET/*
                                  #     - using POLICY_TEMPLATE_PARAMS.BucketName

SAR ==>                           #
ServerlessRepo                    #SAM POLICY_TEMPLATE (see its doc) that allows:
 ReadWriteAccessPolicy            #  - PACTION serverlessrepo:CreateApplication|CreateApplicationVersion
                                  #    |UpdateApplication|GetApplication|ListApplications
                                  #    |ListApplicationVersions|ListApplicationDependencies
                                  #  - on any APP

ACM ==>                           #
AcmGetCertificatePolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION acm:GetCertificate
                                  #  - on CERTIFICATE_ARN
                                  #     - using POLICY_TEMPLATE_PARAMS.CertificateArn

ATHENA ==>                        #
AthenaQueryPolicy                 #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION athena:ListWorkGroups|GetExecutionEngine|GetExecutionEngines
                                  #    |GetNamespace|GetCatalogs|GetNamespaces|GetTables|GetTable
                                  #     - on Resource '*'
                                  #  - PACTION athena:StartQueryExecution|GetQueryResults|DeleteNamedQuery
                                  #    |GetNamedQuery|ListQueryExecutions|StopQueryExecution|GetQueryResultsStream
                                  #    |ListNamedQueries|CreateNamedQuery|GetQueryExecution|BatchGetNamedQuery
                                  #    |BatchGetQueryExecution|GetWorkGroup
                                  #     - on WORKGROUP_ARN
                                  #     - using POLICY_TEMPLATE_PARAMS.WorkGroupName

CODE COMMIT ==>                   #
CodeCommitCrudPolicy              #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION codecommit:GitPull|GitPush|CreateBranch|DeleteBranch|GetBranch
                                  #    |ListBranches|MergeBranchesByFastForward|MergeBranchesBySquash
                                  #    |MergeBranchesByThreeWay|UpdateDefaultBranch|BatchDescribeMergeConflicts
                                  #    |CreateUnreferencedMergeCommit|DescribeMergeConflicts|GetMergeCommit
                                  #    |GetMergeOptions|BatchGetPullRequests|CreatePullRequest|DescribePullRequestEvents
                                  #    |GetCommentsForPullRequest|GetCommitsFromMergeBase|GetMergeConflicts
                                  #    |GetPullRequest|ListPullRequests|MergePullRequestByFastForward
                                  #    |MergePullRequestBySquash|MergePullRequestByThreeWay|PostCommentForPullRequest
                                  #    |UpdatePullRequestDescription|UpdatePullRequestStatus|UpdatePullRequestTitle
                                  #    |DeleteFile|GetBlob|GetFile|GetFolder|PutFile|DeleteCommentContent|GetComment
                                  #    |GetCommentsForComparedCommit|PostCommentForComparedCommit|PostCommentReply
                                  #    |UpdateComment|BatchGetCommits|CreateCommit|GetCommit|GetCommitHistory
                                  #    |GetDifferences|GetObjectIdentifier|GetReferences|GetTree|GetRepository
                                  #    |UpdateRepositoryDescription|ListTagsForResource|TagResource|UntagResource
                                  #    |GetRepositoryTriggers|PutRepositoryTriggers|TestRepositoryTriggers|GetBranch
                                  #    |GetCommit|UploadArchive|GetUploadArchiveStatus|CancelUploadArchive
                                  #  - on 'REPOSITORY'
                                  #     - using POLICY_TEMPLATE_PARAMS.RepositoryName
CodeCommitReadPolicy              #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION codecommit:GitPull|GetBranch|ListBranches|BatchDescribeMergeConflicts
                                  #    |DescribeMergeConflicts|GetMergeCommit|GetMergeOptions|BatchGetPullRequests
                                  #    |DescribePullRequestEvents|GetCommentsForPullRequest|GetCommitsFromMergeBase
                                  #    |GetMergeConflicts|GetPullRequest|ListPullRequests|GetBlob|GetFile|GetFolder
                                  #    |GetComment|GetCommentsForComparedCommit|BatchGetCommits|GetCommit|GetCommitHistory
                                  #    |GetDifferences|GetObjectIdentifier|GetReferences|GetTree|GetRepository
                                  #    |ListTagsForResource|GetRepositoryTriggers|TestRepositoryTriggers|GetBranch
                                  #    |GetCommit|GetUploadArchiveStatus
                                  #  - on 'REPOSITORY'
                                  #     - using POLICY_TEMPLATE_PARAMS.RepositoryName

CODE PIPELINE ==>                 #
CodePipelineLambdaExecutionPolicy #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION codepipeline:PutJobSuccessResult|PutJobFailureResult
                                  #  - on Resource '*'
CodePipelineReadOnlyPolicy        #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION codepipeline:ListPipelineExecutions
                                  #  - on 'PIPELINE'
                                  #     - using POLICY_TEMPLATE_PARAMS.PipelineName

COMPREHEND ==>                    #
ComprehendBasicAccessPolicy       #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION comprehend:BatchDetectKeyPhrases|DetectDominantLanguage|DetectEntities|BatchDetectEntities
                                  #    |DetectKeyPhrases|DetectSentiment|BatchDetectDominantLanguage|BatchDetectSentiment
                                  #  - on Resource '*'

COST EXPLORER ==>                 #
CostExplorerReadOnlyPolicy        #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ce:GetCostAndUsage|GetDimensionValues|GetReservationCoverage
                                  #    |GetReservationPurchaseRecommendation|GetReservationUtilization|GetTags
                                  #  - on Resource '*'

DYNAMODB ==>                      #
DynamoDBBackupFullAccessPolicy    #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:CreateBackup|DescribeContinuousBackups
                                  #    |DeleteBackup|DescribeBackup|ListBackups
                                  #  - on 'TABLE' and its BACKUPs
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName
DynamoDBCrudPolicy                #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:GetItem|DeleteItem|PutItem|Scan|Query|UpdateItem
                                  #    |BatchWriteItem|BatchGetItem|DescribeTable|ConditionCheckItem
                                  #  - on 'TABLE' and its INDEXes
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName
DynamoDBReadPolicy                #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:GetItem|Scan|Query|BatchGetItem|DescribeTable
                                  #  - on 'TABLE' and its INDEXes
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName
DynamoDBReconfigurePolicy         #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:UpdateTable
                                  #  - on 'TABLE'
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName
DynamoDBRestoreFromBackupPolicy   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:RestoreTableFromBackup|PutItem|UpdateItem
                                  #    |DeleteItem|GetItem|Query|Scan|BatchWriteItem
                                  #  - on 'TABLE' and its BACKUPs
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName
DynamoDBStreamReadPolicy          #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:DescribeStream|GetRecords|GetShardIterator
                                  #     - on 'TABLE''s 'STREAM'
                                  #  - PACTION dynamodb:ListStreams
                                  #     - on any 'TABLE' STREAM
                                  #  - using POLICY_TEMPLATE_PARAMS.StreamName|TableName
DynamoDBWritePolicy               #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION dynamodb:PutItem|UpdateItem|BatchWriteItem
                                  #  - on 'TABLE' and its INDEXes
                                  #     - using POLICY_TEMPLATE_PARAMS.TableName

EC2 ==>                           #
AMIDescribePolicy                 #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ec2:DescribeImages
                                  #  - on Resource '*'
EC2CopyImagePolicy                #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION ec2:CopyImage
                                  #  - on IMAGE_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ImageId
EC2DescribePolicy                 #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION ec2:DescribeRegions|DescribeInstances
                                  #  - on Resource '*'

ECS ==>                           #
EcsRunTaskPolicy                  #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ecs:RunTask
                                  #  - on 'TASK_DEFINITION'
                                  #     - using POLICY_TEMPLATE_PARAMS.TaskDefinition

EFS ==>                           #
EFSWriteAccessPolicy              #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION elasticfilesystem:ClientMount|ClientWrite
                                  #  - COND_KEY elasticfilesystem:AccessPointArn 'ACCESS_POINT'
                                  #     - using POLICY_TEMPLATE_PARAMS.AccessPoint
                                  #  - on 'FILESYSTEM'
                                  #     - using POLICY_TEMPLATE_PARAMS.FileSystem

EKS ==>                           #
EKSDescribePolicy                 #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION eks:DescribeCluster|ListClusters
                                  #  - on Resource '*'

ELASTIC SEARCH ==>                #
ElasticsearchHttpPostPolicy       #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION es:ESHttpPost|ESHttpPut
                                  #  - on 'DNAME'
                                  #     - using POLICY_TEMPLATE_PARAMS.DomainName

EMR ==>                           #
ElasticMapReduce                  #SAM POLICY_TEMPLATE (see its doc) that allows:
 AddJobFlowStepsPolicy            #  - PACTION elasticmapreduce:AddJobFlowSteps
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId
ElasticMapReduceCancelStepsPolicy #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION elasticmapreduce:CancelSteps
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId
ElasticMapReduce                  #SAM POLICY_TEMPLATE (see its doc) that allows:
 ModifyInstanceFleetPolicy        #  - PACTION elasticmapreduce:ModifyInstanceFleet|ListInstanceFleets
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId
ElasticMapReduce                  #SAM POLICY_TEMPLATE (see its doc) that allows:
 ModifyInstanceGroupsPolicy       #  - PACTION elasticmapreduce:ModifyInstanceGroups|ListInstanceGroups
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId
ElasticMapReduce                  #SAM POLICY_TEMPLATE (see its doc) that allows:
 SetTerminationProtectionPolicy   #  - PACTION elasticmapreduce:SetTerminationProtection
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId
ElasticMapReduce                  #SAM POLICY_TEMPLATE (see its doc) that allows:
 TerminateJobFlowsPolicy          #  - PACTION elasticmapreduce:TerminateJobFlows
                                  #  - on CLUSTER_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.ClusterId

EVENT BRIDGE ==>                  #
EventBridgePutEventsPolicy        #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION events:PutEvents
                                  #  - on 'EVENT_BUS'
                                  #     - using POLICY_TEMPLATE_PARAMS.EventBusName

FIREHOSE ==>                      #
FirehoseCrudPolicy                #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION firehose:CreateDeliveryStream|DeleteDeliveryStream
                                  #    |DescribeDeliveryStream|PutRecord|PutRecordBatch|UpdateDestination
                                  #  - on 'DELIVERY_STREAM'
                                  #     - using POLICY_TEMPLATE_PARAMS.DeliveryStreamName
FirehoseWritePolicy               #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION firehose:PutRecord|PutRecordBatch
                                  #  - on 'DELIVERY_STREAM'
                                  #     - using POLICY_TEMPLATE_PARAMS.DeliveryStreamName

KINESIS ==>                       #
KinesisCrudPolicy                 #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION kinesis:AddTagsToStream|CreateStream|DecreaseStreamRetentionPeriod|DeleteStream
                                  #    |DescribeStream|DescribeStreamSummary|GetShardIterator|IncreaseStreamRetentionPeriod
                                  #    |ListTagsForStream|MergeShards|PutRecord|PutRecords|SplitShard|RemoveTagsFromStream
                                  #  - on 'STREAM'
                                  #     - using POLICY_TEMPLATE_PARAMS.StreamName
KinesisStreamReadPolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION kinesis:ListStreams|DescribeLimits
                                  #     - on any STREAM
                                  #  - PACTION kinesis:DescribeStream|DescribeStreamSummary|GetRecords|GetShardIterator
                                  #     - on 'STREAM'
                                  #     - using POLICY_TEMPLATE_PARAMS.StreamName

KMS ==>                           #
KMSDecryptPolicy                  #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION kms:Decrypt
                                  #  - on KEY_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.KeyId
KMSEncryptPolicy_v2               #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION kms:Encrypt|GenerateDataKey|GenerateDataKeyWithoutPlaintext
                                  #    |GenerateDataKeyPair|GenerateDataKeyPairWithoutPlaintext
                                  #  - on KEY_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.KeyId

MOBILE ANALYTICS ==>              #
MobileAnalytics                   #SAM POLICY_TEMPLATE (see its doc) that allows:
 WriteOnlyAccessPolicy            #  - PACTION mobileanalytics:PutEvents
                                  #  - on Resource '*'

ORGANIZATIONS ==>                 #
OrganizationsListAccountsPolicy   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION organizations:ListAccounts
                                  #  - on Resource '*'

PINPOINT ==>                      #
PinpointEndpointAccessPolicy      #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION mobiletargeting:GetEndpoint|UpdateEndpoint|UpdateEndpointsBatch
                                  #  - on any ENDPOINT in APPLICATION_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.PinpointApplicationId

POLLY ==>                         #
PollyFullAccessPolicy             #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION polly:GetLexicon|DeleteLexicon
                                  #     - on 'LEXICON'
                                  #     - using POLICY_TEMPLATE_PARAMS.LexiconName
                                  #  - PACTION polly:DescribeVoices|ListLexicons|PutLexicon|SynthesizeSpeech
                                  #     - on any LEXICON

REKOGNITION ==>                   #
RekognitionDetectOnlyPolicy       #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:DetectFaces|DetectLabels|DetectModerationLabels|DetectText
                                  #  - on Resource '*'
RekognitionFacesManagementPolicy  #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:IndexFaces|DeleteFaces
                                  #    |SearchFaces|SearchFacesByImage|ListFaces
                                  #  - on COLLECTION_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.CollectionId
RekognitionFacesPolicy            #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:CompareFaces|DetectFaces
                                  #  - on Resource '*'
RekognitionLabelsPolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:DetectLabels|DetectModerationLabels
                                  #  - on Resource '*'
RekognitionNoDataAccessPolicy     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:CompareFaces|DetectFaces|DetectLabels|DetectModerationLabels
                                  #  - on COLLECTION_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.CollectionId
RekognitionReadPolicy             #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:ListCollections|ListFaces|SearchFaces|SearchFacesByImage
                                  #  - on COLLECTION_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.CollectionId
RekognitionWriteOnlyAccessPolicy  #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION rekognition:CreateCollection|IndexFaces
                                  #  - on COLLECTION_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.CollectionId

ROUTE53 ==>                       #
Route53                           #SAM POLICY TEMPLATE (see its doc) that allows:
 ChangeResourceRecordSetsPolicy   #  - PACTION route53:ChangeResourceRecordSets
                                  #  - on HOSTED_ZONE_MID
                                  #     - using POLICY_TEMPLATE_PARAMS.HostedZoneId

SAGEMAKER ==>                     #
SageMaker                         #SAM POLICY_TEMPLATE (see its doc) that allows:
 CreateEndpointConfigPolicy       #  - PACTION sagemaker:CreateEndpointConfig
                                  #  - on 'ENDPOINT_CONFIG'
                                  #     - using POLICY_TEMPLATE_PARAMS.EndpointConfigName
SageMakerCreateEndpointPolicy     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sagemaker:CreateEndpoint
                                  #  - on 'ENDPOINT'
                                  #     - using POLICY_TEMPLATE_PARAMS.EndpointName

SECRETS MANAGER ==>               #
AWSSecretsManager                 #SAM POLICY_TEMPLATE (see its doc) that allows:
 GetSecretValuePolicy             #  - PACTION secretsmanager:GetSecretValue
                                  #  - on SECRET_ARN
                                  #     - using POLICY_TEMPLATE_PARAMS.SecretArn
AWSSecretsManagerRotationPolicy   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION secretsmanager:DescribeSecret|GetSecretValue
                                  #    |PutSecretValue|UpdateSecretVersionStage
                                  #     - COND_KEY secretsmanager:resource/AllowRotationLambdaArn FUNC_ARN
                                  #        - using POLICY_TEMPLATE_PARAMS.FunctionName
                                  #     - on any SECRET
                                  #  - PACTION secretsmanager:GetRandomPassword
                                  #     - on Resource '*'

SES ==>                           #
SESBulkTemplatedCrudPolicy_v2     #SAM POLICY TEMPLATE (see its doc) that allows:
                                  #  - PACTION ses:SendEmail|SendRawEmail|SendTemplatedEmail|SendBulkTemplatedEmail
                                  #     - on 'IDENTITY'
                                  #     - using POLICY_TEMPLATE_PARAMS.IdentityName
                                  #     - also on 'TEMPLATE'
                                  #     - using POLICY_TEMPLATE_PARAMS.TemplateName
                                  #  - PACTION ses:GetIdentityVerificationAttributes|VerifyEmailIdentity
                                  #     - on Resource '*'
SESCrudPolicy                     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ses:GetIdentityVerificationAttributes
                                  #    |SendEmail|SendRawEmail|VerifyEmailIdentity
                                  #  - on 'IDENTITY'
                                  #     - using POLICY_TEMPLATE_PARAMS.IdentityName
SESEmailTemplateCrudPolicy        #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ses:CreateTemplate|GetTemplate|ListTemplates
                                  #    |UpdateTemplate|DeleteTemplate|TestRenderTemplate
                                  #  - on Resource '*'
SESSendBouncePolicy               #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ses:SendBounce
                                  #  - on 'IDENTITY'
                                  #     - using POLICY_TEMPLATE_PARAMS.IdentityName

SNS ==>                           #
SNSCrudPolicy                     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:ListSubscriptionsByTopic|CreateTopic|SetTopicAttributes|Subscribe|Publish
                                  #  - on 'TOPIC*'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName
SNSPublishMessagePolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:Publish
                                  #  - on 'TOPIC'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName

SQS ==>                           #
SQSPollerPolicy                   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sqs:ChangeMessageVisibility|ChangeMessageVisibilityBatch
                                  #    |DeleteMessage|DeleteMessageBatch|GetQueueAttributes|ReceiveMessage
                                  #  - on 'QUEUE'
                                  #     - using POLICY_TEMPLATE_PARAMS.QueueName
SQSSendMessagePolicy              #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sqs:SendMessage*
                                  #  - on 'QUEUE'
                                  #     - using POLICY_TEMPLATE_PARAMS.QueueName

SSM ==>                           #
SSMParameter                      #SAM POLICY_TEMPLATE (see its doc) that allows:
 [WithSlashPrefix]ReadPolicy      #  - PACTION ssm:DescribeParameters
                                  #     - on Resource '*'
                                  #  - PACTION ssm:GetParameters|GetParameter|GetParametersByPath
                                  #     - on 'PARAM'
                                  #  - uses POLICY_TEMPLATE_PARAMS.ParameterName:
                                  #     - if 'WithSlashPrefix': '/PARAM'
                                  #     - else: 'PARAM'

STEP FUNCTIONS ==>                #
StepFunctionsCallbackPolicy       #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION states:SendTaskFailure|SendTaskHeartbeat|SendTaskSuccess
                                  #  - on 'STATE_MACHINE'
                                  #     - using POLICY_TEMPLATE_PARAMS.StateMachineName
StepFunctionsExecutionPolicy_v2   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION states:StartExecution|StartSyncExecution
                                  #  - on 'STATE_MACHINE'
                                  #     - using POLICY_TEMPLATE_PARAMS.StateMachineName

TEXTRACT ==>                      #
TextractDetectAnalyzePolicy       #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION textract:DetectDocumentText|StartDocumentTextDetection
                                  #    |StartDocumentAnalysis|AnalyzeDocument
                                  #  - on Resource '*'
TextractGetResultPolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION textract:GetDocumentTextDetection|GetDocumentAnalysis
                                  #  - on Resource '*'
TextractPolicy                    #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION textract:*
                                  #  - on Resource '*'

VPC ==>                           #
VPCAccessPolicy                   #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION ec2:CreateNetworkInterface|DeleteNetworkInterface
                                  #    |DescribeNetworkInterfaces|DetachNetworkInterface
                                  #  - on Resource '*'
