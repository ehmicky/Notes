
                                  ┏━━━━━━━━━┓
                                  ┃   SAM   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #Transform: 1.91.0
                                  #Binary: 1.127.0

INSTALL ==>                       #Download zip from GitHub releases
./install                         #Install script
                                  #Just copies files and create symlinks
                                  #Can delete zip extracted contents afterwards
--update|-u                       #Update instead of new install
                                  #Previous versions kept at INSTALL_DIR/X.Y.Z
                                  #Current version is symlink from INSTALL_DIR/current to INSTALL_DIR/X.Y.Z
--install-dir|-i                  #'INSTALL_DIR' (def: /usr/local/aws-sam-cli) containing binary + source code
--bin-dir|-b                      #'DIR' (def: /usr/local/bin) with symlink to `sam` executable

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', 'AWS::Serverless-...' must be after it
                                  #Must be used to transform AWS::Serverless::* RESOURCEs into regular ones

ENVVAR SAM_CLI_BETA_FEATURES      #Enable all beta features
sam ... --[no-]beta-features     !#Noted like this

ENVVAR SAM_CLI_BETA_*             #Enable a specific beta feature

ENVVAR SAM_CLI_TELEMETRY=0        #Disable telemetry

sam ... --debug                   #Debug logs

sam ...
--config-file                     #'PATH' to CONFIG (def: 'samconfig.toml')
--config-env                      #'ENVVAR' containing CONFIG (def: 'default'???)
--save-params                     #Save FLAGs to CONFIG file

sam validate|build|sync|package
 |deploy|delete|logs|traces
 |publish|local|remote|sync
--region                          #'REGION' (def: guessed)

sam local generate-event
--partition                       #'PARTITION' (def: 'aws')

sam validate|build|sync|package
 |deploy|delete|logs|traces
 |publish|local|remote|sync
--profile                         #CONFIG 'PROFILE' (def: guessed)

sam validate|build|sync|package
 |deploy|publish|local|sync
--template[-file]|-t              #'PATH' to TEMPLATE (def: 'template.y[a]ml|json')

sam remote|sync
--stack-name                      #CloudFormation 'STACK'

sam build|local
--hook-name                       #'SAM_BUILD_PLUGIN'
                                  #Only available one: 'terraform', to support Terraform templates
--[skip-]prepare-infra            #Unless set, run preparation logic even if no TEMPLATE changes
                                  #Only with --hook-name

sam build
--terraform-project-root-path     #Terraform root 'DIR' (def: .)

sam local
--terraform-plan-file PATH        #Terraform plan 'PATH'

sam docs CLI_COMMAND              #Open docs in browser

sam init                          #Scaffolds
                                  #Interactive if no options
--output-dir|-o                   #Output 'DIR'
--no-interactive                  #Unless set or main flags passed, interactive input to set required flags
--no-input                        #Same for optional flags
--extra-context                   #'{PARAM: "VAL",...}_JSON'. Override specific template parameters
--name|-n                         #'APP_NAME'
--architecture                    #FUNC_VERSION.Architectures
--runtime                         #FUNC_VERSION.Runtime
--base-image                      #'amazon/RUNTIME-base'. Docker image used to deploy
--dependency-manager              #Package manager to install SDK
                                  #Can be:
                                  #  - 'cli-package': AWS CLI
                                  #  - 'npm': JavaScript
                                  #  - 'pip': Python
                                  #  - 'mod': Go
                                  #  - 'bundler': Ruby
                                  #  - 'gradle', 'maven': Java
--package-type                    #FUNC_VERSION.PackageType
--app-template                    #'INIT_TEMPLATE' among: 'hello-world'
--location|-l                     #Cookiecutter scaffolding DIR, among:
                                  #  - 'DIR'
                                  #  - 'PATH.zip'
                                  #  - 'URI.zip'
                                  #  - 'gh:USER/REPO'
                                  #  - 'git+ssh://git@github.com/USER/REPO.git'
--[no-]tracing                    #Enable X-Ray
--[no-]application-insights       #Enable CloudWatch Application Insights monitoring
--[no-]structured-logging         #Enable Structured Logging

sam validate                      #Validate TEMPLATE syntax
--lint                            #Run cfn-lint

sam build|local|sync
--parameter-overrides             #'PARAM=VAL,...'. STACK.Parameters
sam build|sync --build-image|-bi
sam local --invoke-image|-ii      #'[FUNCTION|LAYER.]URI'. Container image
                                  #Def: 'public.ecr.aws/sam/build-RUNTIME:latest'

sam build|sync
--use-container|-u                #Build with a container
--[no-]build-in-source            #Run build step. Can be:
                                  #  - 'nodejsX.x'
                                  #  - 'esbuild'
                                  #  - 'Makefile'
--base-dir|-s                     #'DIR' used to resolve relative PATHs in TEMPLATE
                                  #Def: TEMPLATE's DIR

sam build [FUNCTION|LAYER]        #Build Lambda FUNCTION|LAYER, as AWS::Serverless|Lambda::Function|LayerVersion
--parallel|-p                     #Build all FUNCTIONs|LAYERs in parallel
--exclude|-x                      #'RESOURCE' to exclude
--manifest|-m                     #'PATH.json' to custom dependency manifest
--build-dir|-c                    #Output 'DIR'
                                  #Deleted before build starts
--[no-]cached|-c                  #Cache build artifacts, based on their file contents
                                  #Does not cache dependencies
--cache-dir|-cd                   #Cache 'DIR' (def: ./.aws-sam/cache/)
--container-env-var|-e            #'[FUNCTION|LAYER.]ENVVAR=VAL' passed to container
--container-env-var-file|-ef      #Same but as 'PATH.json' containing OBJ
--mount-with|-mw                  #'READ' (def) or 'WRITE'. Allow containing to write to source DIR
--skip-pull-image                 #Unless set, use latest container image for Lambda SDK
--docker-network                  #Docker 'NETWORK_NAME' (def: bridge)

sam local
--shutdown                        #Emulate FUNC_INSTANCE shutdown after invocation
                                  #Meant to test Lambda extensions' shutdown behavior
--log-file|-l                     #'PATH' (def: stdout) for FUNCTION logs
--env-vars|-n                     #'PATH.json' with ENVVARs to pass to FUNCTION
--layer-cache-basedir             #Cache 'DIR' for LAYERs
--debug-port|-d                   #PORT_NUM. Start debugger in localhost:PORT_NUM
--debugger-path                   #'PATH' to debugger command
--debug-args                      #Debugger 'ARG ...'
--container-env-vars
--skip-pull-image
--docker-network                  #Like sam build
--force-image-build               #Unless set, do not rebuild container image unless has changed
--docker-volume-basedir|-v        #'DIR' of the TEMPLATE ???
--container-host                  #'HOST' (def: 'localhost') of container
--container-host-interface        #'NETWORK_IP' (def: '127.0.0.1') of container
                                  #Can be '0.0.0.0'
--add-host                        #'HOST:IP' added to container's host file

sam local start-lambda|start-api
--host                            #'HOST' (def: '127.0.0.1')
--port|-p                         #PORT_NUM (def: 3001)
--warm-containers                 #Whether to load FUNCTIONs:
                                  #  - 'EAGER': right away
                                  #  - 'LAZY': on first invocation

sam local invoke [FUNCTION]       #Invoke Lambda FUNCTION locally (emulation)
                                  #Logs are printed on stdout
--event|-e                        #'PATH.json' or '-' (stdin) to REQ
                                  #Def: no REQ

sam local start-lambda            #Start local server with Lambda FUNCTION

sam local start-api               #Same as start-lambda???
                                  #Seems to use AWS::Serverless::Function CodeUri
                                  #Seems to live reload
--disable-authorizer              #Ignore Lambda AUTHORIZERs
--static-dir|-s                   #'DIR'. Serve DIR as static files at /
--ssl-cert-file                   #'PATH' (def: none) to SSL certificate
--ssl-key-file                    #'PATH' (def: none) to SSL key

sam local generate-event          #Scaffolds a test REQ for a given SERVICE + ACTION
 SERVICE ACTION                   #Only for specific SERVICEs|ACTIONs
--PARAM                           #ACTION-specific parameters
                                  #Def: dummy ones

sam remote invoke [RESOURCE|ARN]  #Invoke RESOURCE in AWS
                                  #Can be Lambda FUNCTION, Step Function, SQS QUEUE, Kinesis data stream
--output                          #Either 'text' (def) or 'json'
                                  #Response printed to stdout
                                  #Logs (Lambda or Step Functions) printed to stderr
--event|-e                        #Input among:
                                  #  - Lambda: REQ
                                  #  - Step Functions: Input
                                  #  - SQS: MessageBody
                                  #  - Kinesis: Data
--event-file                      #Same but as 'FILE' or '-' (stdin)
--test-event-name                 #'TEST_EVENT' to use as Lambda REQ
--parameter                       #'PARAM=VAL' among:
                                  #  - Lambda: Qualifier, INVOCATION_REQ.InvocationType|ClientContext|LogType
                                  #  - Step Functions: name STR, traceHeader STR
                                  #  - SQS: DelaySeconds NUM, Message[System]Attributes 'JSON', MessageDeduplicationId STR, MessageGroupId STR
                                  #  - Kinesis: PartitionKey STR, ExplicitHashKey STR, SequenceNumberForOrdering STR, StreamARN STR

sam remote test-event
 put|list|get|delete
 [FUNCTION|ARN]                   #CRUD for Lambda TEST_EVENTs

sam remote test-event
 put|get|delete
--name                            #'TEST_EVENT'

sam remote test-event put         #
--file                            #'PATH.json' or '-' (stdin) with REQ input
--force|-f                        #Unless set, fails if TEST_EVENT already exists

sam remote test-event get         #
--output-file                     #'PATH.json' for REQ output

sam sync                          #Sync to AWS

--capabilities LIST,STRING      List of capabilities that one must specify before AWS Cloudformation can create certain stacks.
                                    Accepted Values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_RESOURCE_POLICY, CAPABILITY_AUTO_EXPAND.
                                    Learn more at: https://docs.aws.amazon.com/serverlessrepo/latest/devguide/acknowledging-application-capabilities.html
--s3-bucket TEXT                AWS S3 bucket where artifacts referenced in the template are uploaded.
--s3-prefix TEXT                Prefix name that is added to the artifact's name when it is uploaded to the AWS S3 bucket.
--image-repository STRING       AWS ECR repository URI where artifacts referenced in the template are uploaded.
--image-repositories LIST       Mapping of Function Logical ID to AWS ECR Repository URI.
                                    Example: Function_Logical_ID=ECR_Repo_Uri This option can be specified multiple times.
--role-arn TEXT                 ARN of an IAM role that AWS Cloudformation assumes when executing a deployment change set.
--kms-key-id TEXT               The ID of an AWS KMS key that is used to encrypt artifacts that are at rest in the AWS S3 bucket.
--notification-arns LIST,STRING ARNs of SNS topics that AWS Cloudformation associates with the stack.
--tags STRING,LIST              List of tags to associate with the stack.
--metadata STRING               Map of metadata to attach to ALL the artifacts that are referenced in the template.
--[no-]watch                    Watch local files and automatically sync with cloud.
--code                          Sync ONLY code resources. This includes Lambda Functions, API Gateway, and Step Functions.
--[no-]skip-deploy-sync         This option will skip the initial infrastructure deployment if it is not required by comparing the local template with the template deployed in cloud.
--[no-]dependency-layer         Separate dependencies of individual function into a Lambda layer for improved performance.
--resource-id TEXT              Sync code for all the resources with the ID.
                                    To sync a resource within a nested stack, use the following pattern {ChildStack}/{logicalId}.
--resource RESOURCE             Sync code for all resources of the given resource type. Accepted values are
                                    ['AWS::Serverless::Function', 'AWS::Lambda::Function',
                                    'AWS::Serverless::LayerVersion', 'AWS::Lambda::LayerVersion',
                                    'AWS::Serverless::Api', 'AWS::ApiGateway::RestApi', 'AWS::Serverless::HttpApi',
                                    'AWS::ApiGatewayV2::Api', 'AWS::Serverless::StateMachine',
                                    'AWS::StepFunctions::StateMachine']
--watch-exclude LIST            Excludes a file or folder from being observed for file changes.
                                    Files and folders that are excluded will not trigger a sync workflow.
                                    This option can be provided multiple times.
                                    Examples:
                                    HelloWorldFunction=package-lock.json
                                    ChildStackA/FunctionName=database.sqlite3

sam list                          #Print state

sam package                       #

sam deploy                        #

sam delete                        #Delete STACK

sam pipeline                      #Continuous delivery

sam logs                          #Prints Cloudwatch logs, including ones from Lambda

sam traces                        #Print X-Ray traces

sam publish                       #Publish package to SAR

SAR                               #AWS Serverless Application Repository
