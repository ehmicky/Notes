
                                  ┏━━━━━━━━━┓
                                  ┃   SAM   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #Transform: 1.91.0
                                  #Binary: 1.127.0

INSTALL ==>                       #Download zip from GitHub releases
./install                         #Install script
                                  #Just copies files and create symlinks
                                  #Can delete zip extracted contents afterwards
--update|-u                       #Update instead of new install
                                  #Previous versions kept at INSTALL_DIR/X.Y.Z
                                  #Current version is symlink from INSTALL_DIR/current to INSTALL_DIR/X.Y.Z
--install-dir|-i                  #'INSTALL_DIR' (def: /usr/local/aws-sam-cli) containing binary + source code
--bin-dir|-b                      #'DIR' (def: /usr/local/bin) with symlink to `sam` executable

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', 'AWS::Serverless-...' must be after it
                                  #Must be used to transform AWS::Serverless::* RESOURCEs into regular ones

ENVVAR SAM_CLI_BETA_FEATURES      #Enable all beta features
sam ... --[no-]beta-features     !#BOOL (def: false). Noted like this

ENVVAR SAM_CLI_BETA_*             #Enable a specific beta feature

ENVVAR SAM_CLI_TELEMETRY=0        #Disable telemetry

sam ...
--config-file                     #'PATH' to CONFIG (def: 'samconfig.toml')
--config-env                      #'ENVVAR' containing CONFIG (def: 'default'???)
--profile                         #CONFIG 'PROFILE' (def: guessed)
--save-params                     #Save FLAGs to CONFIG file
--region                          #'REGION' (def: guessed)
--debug                           #Debug logs

sam local generate-event
--partition                       #'PARTITION' (def: 'aws')

sam validate|build|sync|package
 |deploy|publish|local|list
 |publish
--template[-file]|-t              #'PATH' to TEMPLATE (def: 'template.y[a]ml|json')

sam remote|sync|deploy|delete|list
--stack-name                      #CloudFormation 'STACK'

sam build|local|sync|remote|list
--parameter-overrides             #'PARAM=VAL,...'. STACK.Parameters

sam build|local
--hook-name                       #'SAM_BUILD_PLUGIN'
                                  #Only available one: 'terraform', to support Terraform templates
--[skip-]prepare-infra            #BOOL (def: true). Run preparation logic even if no STACK changes
                                  #Only with --hook-name

sam build
--terraform-project-root-path     #Terraform root 'DIR' (def: .)

sam local
--terraform-plan-file PATH        #Terraform plan 'PATH'

sam docs CLI_COMMAND              #Open docs in browser

sam init                          #Scaffolds
                                  #Interactive if no options
--output-dir|-o                   #Output 'DIR'
--[no-]interactive                #BOOL (def: true). Interactive input for required flags
--[no-]input                      #BOOL (def: true). Same for optional flags
--extra-context                   #'{PARAM: "VAL",...}_JSON'. Override specific template parameters
--name|-n                         #'APP_NAME'
--architecture                    #FUNC_VERSION.Architectures
--runtime                         #FUNC_VERSION.Runtime
--base-image                      #'amazon/RUNTIME-base'. Docker image used to deploy
--dependency-manager              #Package manager to install SDK
                                  #Can be:
                                  #  - 'cli-package': AWS CLI
                                  #  - 'npm': JavaScript
                                  #  - 'pip': Python
                                  #  - 'mod': Go
                                  #  - 'bundler': Ruby
                                  #  - 'gradle', 'maven': Java
--package-type                    #FUNC_VERSION.PackageType
--app-template                    #'INIT_TEMPLATE' among: 'hello-world'
--location|-l                     #Cookiecutter scaffolding DIR, among:
                                  #  - 'DIR'
                                  #  - 'PATH.zip'
                                  #  - 'URI.zip'
                                  #  - 'gh:USER/REPO'
                                  #  - 'git+ssh://git@github.com/USER/REPO.git'
--[no-]tracing                    #BOOL (def: false). Enable X-Ray
--[no-]application-insights       #BOOL (def: false). Enable CloudWatch Application Insights monitoring
--[no-]structured-logging         #BOOL (def: false). Enable Structured Logging

sam validate                      #Validate TEMPLATE syntax
--lint                            #Run cfn-lint

sam build|sync --build-image|-bi
sam local --invoke-image|-ii      #'[FUNCTION|LAYER.]URI'. Container image
                                  #Def: 'public.ecr.aws/sam/build-RUNTIME:latest'

sam build|sync
--use-container|-u                #Build with a container
--[no-]build-in-source            #BOOL (def: false). Run build step. Can be:
                                  #  - 'nodejsX.x'
                                  #  - 'esbuild'
                                  #  - 'Makefile'
--base-dir|-s                     #'DIR' used to resolve relative PATHs in TEMPLATE
                                  #Def: TEMPLATE's DIR

sam build [FUNCTION|LAYER]        #Build Lambda FUNCTION|LAYER, as AWS::Serverless|Lambda::Function|LayerVersion
--parallel|-p                     #Build all FUNCTIONs|LAYERs in parallel
--exclude|-x                      #'RESOURCE' to exclude
--manifest|-m                     #'PATH.json' to custom dependency manifest
--build-dir|-c                    #Output 'DIR'
                                  #Deleted before build starts
--[no-]cached|-c                  #BOOL (def: false). Cache build artifacts, based on their file contents
                                  #Does not cache dependencies
--cache-dir|-cd                   #Cache 'DIR' (def: ./.aws-sam/cache/)
--container-env-var|-e            #'[FUNCTION|LAYER.]ENVVAR=VAL' passed to container
--container-env-var-file|-ef      #Same but as 'PATH.json' containing OBJ
--mount-with|-mw                  #'READ' (def) or 'WRITE'. Allow containing to write to source DIR
--[skip-]pull-image               #BOOL (def: true). Use latest container image for Lambda SDK
--docker-network                  #Docker 'NETWORK_NAME' (def: bridge)

sam local
--shutdown                        #Emulate FUNC_INSTANCE shutdown after invocation
                                  #Meant to test Lambda extensions' shutdown behavior
--log-file|-l                     #'PATH' (def: stdout) for FUNCTION logs
--env-vars|-n                     #'PATH.json' with ENVVARs to pass to FUNCTION
--layer-cache-basedir             #Cache 'DIR' for LAYERs
--debug-port|-d                   #PORT_NUM. Start debugger in localhost:PORT_NUM
--debugger-path                   #'PATH' to debugger command
--debug-args                      #Debugger 'ARG ...'
--container-env-vars
--skip-pull-image
--docker-network                  #Like sam build
--force-image-build               #Unless set, do not rebuild container image unless has changed
--docker-volume-basedir|-v        #'DIR' of the TEMPLATE ???
--container-host                  #'HOST' (def: 'localhost') of container
--container-host-interface        #'NETWORK_IP' (def: '127.0.0.1') of container
                                  #Can be '0.0.0.0'
--add-host                        #'HOST:IP' added to container's host file

sam local start-lambda|start-api
--host                            #'HOST' (def: '127.0.0.1')
--port|-p                         #PORT_NUM (def: 3001)
--warm-containers                 #Whether to load FUNCTIONs:
                                  #  - 'EAGER': right away
                                  #  - 'LAZY': on first invocation

sam local invoke [FUNCTION]       #Invoke Lambda FUNCTION locally (emulation)
                                  #Logs are printed on stdout
--event|-e                        #'PATH.json' or '-' (stdin) to REQ
                                  #Def: no REQ

sam local start-lambda            #Start local server with Lambda FUNCTION

sam local start-api               #Same as start-lambda???
                                  #Seems to use AWS::Serverless::Function CodeUri
                                  #Seems to live reload
--disable-authorizer              #Ignore Lambda AUTHORIZERs
--static-dir|-s                   #'DIR'. Serve DIR as static files at /
--ssl-cert-file                   #'PATH' (def: none) to SSL certificate
--ssl-key-file                    #'PATH' (def: none) to SSL key

sam local generate-event          #Scaffolds a test REQ for a given SERVICE + ACTION
 SERVICE ACTION                   #Only for specific SERVICEs|ACTIONs
--PARAM                           #ACTION-specific parameters
                                  #Def: dummy ones

sam remote invoke [RESOURCE|ARN]  #Invoke RESOURCE in AWS
                                  #Can be Lambda FUNCTION, Step Function, SQS QUEUE, Kinesis data stream
--output                          #Either 'text' (def) or 'json'
                                  #Response printed to stdout
                                  #Logs (Lambda or Step Functions) printed to stderr
--event|-e                        #Input among:
                                  #  - Lambda: REQ
                                  #  - Step Functions: Input
                                  #  - SQS: MessageBody
                                  #  - Kinesis: Data
--event-file                      #Same but as 'FILE' or '-' (stdin)
--test-event-name                 #'TEST_EVENT' to use as Lambda REQ
--parameter                       #'PARAM=VAL' among:
                                  #  - Lambda: Qualifier, INVOCATION_REQ.InvocationType|ClientContext|LogType
                                  #  - Step Functions: name STR, traceHeader STR
                                  #  - SQS: DelaySeconds NUM, Message[System]Attributes 'JSON', MessageDeduplicationId STR, MessageGroupId STR
                                  #  - Kinesis: PartitionKey STR, ExplicitHashKey STR, SequenceNumberForOrdering STR, StreamARN STR

sam remote test-event
 put|list|get|delete
 [FUNCTION|ARN]                   #CRUD for Lambda TEST_EVENTs

sam remote test-event
 put|get|delete
--name                            #'TEST_EVENT'

sam remote test-event put         #
--file                            #'PATH.json' or '-' (stdin) with REQ input
--force|-f                        #Unless set, fails if TEST_EVENT already exists

sam remote test-event get         #
--output-file                     #'PATH.json' for REQ output

sam deploy                        #Creates a STACK and deploy it
--guided|-g                       #Interactive mode
                                  #Does not work with --[no-]resolve-s3
--[no-]confirm-changeset          #BOOL (def: false). Confirm before deploying, after showing diff
--[no-]execute-changeset          #BOOL (def: true). Use a CHANGESET
--[no-]fail-on-empty-changeset    #BOOL (def: true). Non-zero exit code if no STACK changes
--on-failure                      #STACK.OnFailure
--[no-]disable-rollback           #BOOL (def: false). STACK.DisableRollback
--max-wait-duration               #NUM (in mins). Deployment timeout
ENVVAR SAM_CLI_POLL_DELAY         #NUM (in secs, def: 5). How often to poll with DescribeStack() WAIT

sam sync                          #Update STACK by doing a CHANGESET
--[no-]watch                      #BOOL (def: false). Re-perform when local file changes
--watch-exclude                   #'[[NESTED_STACK/]RESOURCE=]FILE|DIR' to not watch
--[no-]skip-deploy-sync           #BOOL (def: false). Do not sync bootstrap STACK if TEMPLATE did not change
--[no-]dependency-layer           #BOOL (def: false). Put FUNCTION dependencies into a LAYER
--resource-id                     #'[NESTED_STACK/]RESOURCE'. Only sync that RESOURCE
--resource                        #Same using RESTYPEs among:
                                  #  - AWS::Serverless|Lambda::Function|LayerVersion
                                  #  - AWS::Serverless|ApiGatewyaV2::Api, AWS::Serverless:HttpApi, AWS::ApiGatewayV2::Api
                                  #  - AWS::Serverless|StepFunctions::StateMachine
--code                            #Same using all the above RESTYPEs

sam delete                        #Delete STACK
--[no-]prompts                    #BOOL (def: true). Interactive

sam deploy|sync
--capabilities                    #STACK.Capabilities
--notification-arns               #STACK.NotificationARNs
--tags                            #'TAG=VAL'. STACK.Tags
--role-arn                        #'ROLE_ARN' executing CHANGESET

sam deploy|package
--[no-]progressbar                #BOOL (def: true). Progress bar
--signing-profiles                #'FUNCTION|LAYER=SIGNING_PROFILE[:OWNER]'. Lambda FUNC_VERSION.SigningProfileVersionArn

sam list
--output                          #Either 'table' (def) or 'json'
sam list resources                #Print all STACK_RESOURCEs
sam list stack-outputs            #Print all STACK_OUTPUTs
sam list endpoints                #Print Lambda and API Gateway local|remote URIs

sam package                       #Like `aws cloudformation package` except:
                                  #  - also uploads to ECR, not only S3
                                  #  - can automatically create ECR REPO and S3 BUCKETs
                                  #  - different sets of available RESTYPEs|PROPs
                                  #Automatically done by `sam deploy`
--output-template-file            #'PATH' (def: stdout) of the transformed TEMPLATE

sam deploy|package
--use-json                        #Instead of YAML, for TEMPLATEs

sam deploy|sync|delete|package
--s3-bucket                       #S3 'BUCKET' for `sam package` and TEMPLATE themselves
--s3-prefix                       #STR prefixing S3 'OBJECT'

sam deploy|package
--[no-]resolve-s3                 #BOOL (def: false). Automatically create S3 BUCKET instead of using --s3-bucket
--force-upload                    #Unless set, fail if S3 OBJECTs already exist

sam pipeline bootstrap
--bucket                          #Like --s3-bucket

sam deploy|sync|package
--kms-key-id                      #S3 'KMS_KEY_MID'
--metadata                        #'OBJ_JSON'. Metadata attached to each S3 OBJECT or ECR REPO

sam deploy|sync|package
--image-repository                #ECR 'REPO' for `sam package`
--image-repositories              #Same but as 'FUNCTION=REPO'

sam deploy
--resolve-image-repos             #Automatically create|delete one ECR REPO for each FUNCTION instead of using --image-repositories

sam pipeline bootstrap
--image-repository                #Same but using REPO_ARN
--[no-]create-image-repository    #BOOL (def: false). Automatically creates ECR REPO for all FUNCTIONs instead of using --image-repository

sam logs                          #Prints Cloudwatch logs, including ones from Lambda
--name|-n                         #'[NESTED_STACK/]RESOURCE' (e.g. 'FUNCTION') (def: all)
--cw-log-group                    #'LOG_GROUP' (def: guessed from --name)
--filter                          #'FILTER_PATTERN'. LLEVENTS_REQ.filterPattern

sam traces                        #Print X-Ray traces
--trace-id|-ti                    #'TRACE_ID' (def: any)

sam logs
--include-traces|-i               #Also print X-Ray traces

sam logs|traces
--tail|-r                         #Live tail
--start-time|-s                   #'DATE' or words like 'yesterday' or '5mins ago'. LLEVENTS_REQ.startTime
                                  #Def: '10mins ago'
--end-time|-e                     #Same for LLEVENTS_REQ.endTime
                                  #Def: now
--output                          #Either 'text' (def) or 'json'

sam publish                       #Publish package to SAR
--semantic-version                #Overrides SAR_APP.SemanticVersion
--fail-on-same-version            #Fail if version already exists

TEMPLATE.Metadata['AWS::
 ServerlessRepo::Application']    #SAR_APP. Must be set to publish

sam pipeline bootstrap            #Create|deploy RESOURCEs needed for CI/CD
--[no-]confirm-changeset          #Like sam deploy
--[no-]interactive                #BOOL (def: false). Interactive mode
--stage                           #STR prefixing all RESOURCE names
                                  #Similar to CDK STAGE
--pipeline-user                   #IAM USER_ARN used by CI/CD provider
                                  #Must share ACCESS_KEY_ID and SECRET_ACCESS_KEY with CI/CD provider
                                  #Def: use short-term CREDS
--pipeline-execution-role         #ROLE_ARN used by CI/CD provider
                                  Provide it only if you want to use your own role, otherwise this command will create one.
  --cloudformation-execution-role TEXT The ARN of the IAM role to be assumed by the AWS CloudFormation service while deploying the application's stack.
                                  Provide only if you want to use your own role, otherwise the command will create one.
  --permissions-provider [oidc|iam] Choose a permissions provider to assume the pipeline execution role.
                                  Default is to use an IAM User.
  --cicd-provider TEXT            The CICD platform for the SAM Pipeline
  --oidc-provider-url TEXT        The URL of the OIDC provider.
  --oidc-client-id TEXT           The client ID configured to use with the OIDC provider.
  --github-org TEXT               The GitHub organization that the repository belongs to.
                                  If there is no organization enter the Username of the repository owner instead
                                  Only used if using GitHub Actions OIDC for user permissions
  --github-repo TEXT              The name of the GitHub Repository that deployments will occur from.
                                  Only used if using GitHub Actions OIDC for permissions
  --deployment-branch TEXT        The name of the branch that deployments will occur from.
                                  Only used if using GitHub Actions OIDC for permissions
  --oidc-provider [github-actions|gitlab|bitbucket-pipelines] The name of the CI/CD system that will be used for OIDC permissions
                                  Currently supported CI/CD systems are : GitLab, GitHub and Bitbucket
  --gitlab-group TEXT             The GitLab group that the repository belongs to.
                                  Only used if using GitLab OIDC for permissions
  --gitlab-project TEXT           The GitLab project name.
                                  Only used if using GitLab OIDC for permissions
  --bitbucket-repo-uuid TEXT      The UUID of the Bitbucket repository.
                                  Only used if using Bitbucket OIDC for permissions.
                                  Found at https://bitbucket.org/<WORKSPACE>/<REPOSITORY>/admin/addon/admin/pipelines/openid-connect

sam pipeline init                 #Creates CI/CD configuration file, e.g. GitHub actions workflows
--bootstrap                       #Also runs sam pipeline bootstrap --interactive

SAR                               #AWS Serverless Application Repository
