
                                  ┏━━━━━━━━━┓
                                  ┃   SAM   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #Transform: 1.91.0
                                  #Binary: 1.127.0

INSTALL ==>                       #Download zip from GitHub releases
./install                         #Install script
                                  #Just copies files and create symlinks
                                  #Can delete zip extracted contents afterwards
--update|-u                       #Update instead of new install
                                  #Previous versions kept at INSTALL_DIR/X.Y.Z
                                  #Current version is symlink from INSTALL_DIR/current to INSTALL_DIR/X.Y.Z
--install-dir|-i                  #'INSTALL_DIR' (def: /usr/local/aws-sam-cli) containing binary + source code
--bin-dir|-b                      #'DIR' (def: /usr/local/bin) with symlink to `sam` executable

TEMPLATE.Transform                #Must include 'AWS::Serverless-2016-10-31'
                                  #If has 'AWS::LanguageExtensions', 'AWS::Serverless-...' must be after it
                                  #Must be used to transform AWS::Serverless::* RESOURCEs into regular ones

ENVVAR SAM_CLI_BETA_FEATURES      #Enable all beta features
sam ... --[no-]beta-features     !#Noted like this

ENVVAR SAM_CLI_BETA_*             #Enable a specific beta feature

ENVVAR SAM_CLI_TELEMETRY=0        #Disable telemetry

sam ... --debug                   #Debug logs

sam ...
--config-file                     #'PATH' to CONFIG (def: 'samconfig.toml')
--config-env                      #'ENVVAR' containing CONFIG (def: 'default'???)
--save-params                     #Save FLAGs to CONFIG file

sam validate|build|sync|package
 |deploy|delete|logs|traces
 |publish
--region                          #'REGION' (def: guessed)
--profile                         #CONFIG 'PROFILE' (def: guessed)

sam validate|build|sync|package
 |deploy|publish
--template[-file]|-t              #'PATH' to TEMPLATE (def: 'template.y[a]ml|json')

sam docs CLI_COMMAND              #Open docs in browser

sam init                          #Scaffolds
                                  #Interactive if no options
--output-dir|-o                   #Output 'DIR'
--no-interactive                  #Unless set or main flags passed, interactive input to set required flags
--no-input                        #Same for optional flags
--extra-context                   #'{PARAM: "VAL",...}_JSON'. Override specific template parameters
--name|-n                         #'APP_NAME'
--architecture                    #FUNC_VERSION.Architectures
--runtime                         #FUNC_VERSION.Runtime
--base-image                      #'amazon/RUNTIME-base'. Docker image used to deploy
--dependency-manager              #Package manager to install SDK
                                  #Can be 'cli-package', 'npm' (JavaScript), 'pip' (Python), 'mod' (Go), 'bundler' (Ruby),
                                  #'gradle' (Java), 'maven' (Java)
--package-type                    #FUNC_VERSION.PackageType
--app-template                    #TEMPLATE location
--location|-l                     #TEMPLATE location type, among:
                                  #  - 'path': local 'DIR'
                                  #  - 'zip': local 'FILE.zip'
                                  #  - 'http[s]': 'URI'
                                  #  - 'git'
                                  #  - 'mercurial'
--[no-]tracing                    #Enable X-Ray
--[no-]application-insights       #Enable CloudWatch Application Insights monitoring
--[no-]structured-logging         #Enable Structured Logging

sam validate                      #Validate TEMPLATE syntax
--lint                            #Run cfn-lint

sam build                         #Build Lambda FUNCTION|LAYER, as AWS::Serverless|Lambda::Function|LayerVersion
--parameter-overrides             #'PARAM=VAL,...'. STACK.Parameters
--parallel|-p                     #Build all FUNCTIONs|LAYERs in parallel
--exclude|-x                      #'RESOURCE' to exclude
--manifest|-m                     #'PATH.json' to custom dependency manifest
--[no-]cached|-c                  #Cache build artifacts, based on their file contents
                                    Note: AWS SAM CLI does not evaluate changes made to third party modules that the project depends on.
                                    Example: Python function includes a requirements.txt file with the following entry requests=1.x
                                    and the latest request module version changes from 1.1 to 1.2,
                                    AWS SAM CLI will not pull the latest version until a non-cached build is run.
    --[no-]build-in-source Opts in to build project in the source folder.
                          The following workflows support building in source: ['nodejs16.x', 'nodejs18.x', 'nodejs20.x', 'Makefile', 'esbuild']
    -u, --use-container Build functions within an AWS Lambda-like container.
    -e, --container-env-var TEXT Environment variables to be passed into build containers Resource format (FuncName.VarName=Value) or Global format (VarName=Value).
                                     Example: --container-env-var Func1.VAR1=value1 --container-env-var VAR2=value2
    -ef, --container-env-var-file PATH Environment variables json file (e.g., env_vars.json) to be passed to containers.
    -bi, --build-image TEXT Container image URIs for building functions/layers.
                            You can specify for all functions/layers with just the image URI (--build-image public.ecr.aws/sam/build-nodejs18.x:latest).
                            You can specify for each individual function with (--build-image FunctionLogicalID=public.ecr.aws/sam/build-nodejs18.x:latest).
                            A combination of the two can be used.
                            If a function does not have build image specified or an image URI for all functions, the default SAM CLI build images will be used.
    -mw, --mount-with [READ|WRITE] Specify mount mode for building functions/layers inside container.
                            If it is mounted with write permissions, some files in source code directory may be changed/added by the build process.
                            By default the source code directory is read only.
    --skip-pull-image Skip pulling down the latest Docker image for Lambda runtime.
    --docker-network TEXT Name or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network.
                            If not specified, the Lambda containers will only connect to the default bridge docker network.
    -b, --build-dir DIRECTORY Directory to store build artifacts.Note: This directory will be first removed before starting a build.
    -cd, --cache-dir DIRECTORY Directory to store cached artifacts. The default cache directory is .aws-sam/cache
    -s, --base-dir DIRECTORY Resolve relative paths to function's source code with respect to this directory.
                              Use this if SAM template and source code are not in same enclosing folder.
                              By default, relative paths are resolved with respect to the SAM template's location.
    --hook-name TEXT Hook package id to extend AWS SAM CLI commands functionality.
                                    Example: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications.
                                    Available Hook Names: ['terraform']
    --[skip-]prepare-infra Skip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name.
    --terraform-project-root-path PATH Used for passing the Terraform project root directory path.
                              Current directory will be used as a default value, if this parameter is not provided.

sam local                         #Run Lambda FUNCTION locally

sam remote                        #Run Lambda FUNCTION in AWS
                                  #Or send event to other STACK RESOURCEs

sam sync                          #Sync to AWS

sam list                          #Print state

sam package                       #

sam deploy                        #

sam delete                        #Delete STACK

sam pipeline                      #Continuous delivery

sam logs                          #Prints Cloudwatch logs, including ones from Lambda

sam traces                        #Print X-Ray traces

sam publish                       #Publish package to SAR

SAR                               #AWS Serverless Application Repository
