
                                  ┏━━━━━━━━━┓
                                  ┃   SAR   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #2024-11-05

SAM CLI ==>                       #Uncorrelated to SAR
                                  #Exception: `publish` CLI command which calls the SAR CLI

SAM TRANSFORM ==>                 #Uncorrelated to SAR
                                  #Exception: AWS::Serverless::Application can reference APP

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SAR                               #AWS Serverless Application Repository
                                  #Registry (like npm) for CloudFormation TEMPLATEs

serverlessrepo.amazonaws.com      #SERVICE_DOMAIN
                                  #With SDK, called serverlessapplicationrepository

FORMAT ==>                        #JSON REST
                                  #Query parameters on GET|DELETE, request body on PUT|PATCH

ERRORS ==>                        #OBJ: errorCode, message
                                  #Also uses status code

PAGINATION ==>                    #Uses REQ.maxItems + REQ|RES.nextToken

PRICING ==>                       #Free

                                  ┌─────────────────┐
                                  │   APPLICATION   │
                                  └─────────────────┘

APP                               #Group of APP_VERSIONs, and metadata|info
                                  #Like a npm package, but for CloudFormation TEMPLATEs
                                  #Max 100 per ACCOUNT + REGION (soft)

APP_ARN                           #'arn:aws:serverlessrepo:REGION:ACCOUNT_ID:applications/APP_ID'
APP[_VERSION].applicationId       #'APP_ID'
APP.name                          #'APP'
                                  #Max 140 chars, only [:alnum:]-
APP.description                   #STR
                                  #Max 256 chars
APP.creationTime                  #'DATE'

APP.author                        #STR
                                  #Max 127 chars, only [:alnum:]-
APP.verifiedAuthorUrl             #'URL' of author
APP.isVerifiedAuthor              #BOOL. Whether verified by AWS
                                  #Shown as a badge in the UI
                                  #Must send:
                                  #  - author name, ACCOUNT_ID, GitHub page
                                  #  - to serverlessrepo-verified-author@amazon.com

APP.spdxLicenseId                 #STR, e.g. 'MIT'
APP.licenseBody                   #STR. License's contents
                                  #Max 5MB
APP.licenseUrl                    #Same as S3 'URL'

APP.readmeBody                    #STR. README's contents
                                  #Max 5MB
APP.readmeUrl                     #Same as S3 'URL'

APP.homePageUrl                   #'URL', e.g. website or GitHub repository

APP.labels                        #STR_ARR. Arbitrary tags|keywords for UI search
                                  #Max 10 items
                                  #Max 127 chars, only [:alnum:]-_/:@

                                  ┌─────────────────────┐
                                  │   APPLICATION API   │
                                  └─────────────────────┘

POST /applications                #Req: APP
CreateApplication()               #  - no applicationId, *verifiedAuthor*, creationTime
                                  #  - version.* -> *
                                  #     - no creationTime, requiredCapabilities, resourcesSupported
                                  #Res: APP
                                  #  - no *Body
PATCH /applications/APP_ID        #Req: APP
UpdateApplication()               #  - no *verifiedAuthor*, creationTime
                                  #  - no version, name, spdxLicenseId, license*
                                  #Res: APP
                                  #  - no *Body
GET /applications                 #Req: none
ListApplications()                #Res: applications APP_ARR
                                  #  - no version, *verifiedAuthor*, license*, readme*
GET /applications/APP_ID          #Req: APP
GetApplication()                  #  - only version.semanticVersion
                                  #Res: APP
                                  #  - no *Body
DELETE /applications/APP_ID       #Req: none
DeleteApplication()               #Res: none

                                  ┌────────────────────┐
                                  │   APPLICATION UI   │
                                  └────────────────────┘

DASHBOARD ==>                     #Can see list of:
                                  #  - public APP[_VERSION]
                                  #  - private ones shared with current user
                                  #Either:
                                  #  - in normal UI
                                  #  - without login at https://serverlessrepo.aws.amazon.com/applications

                                  ┌──────────────────────┐
                                  │   APPLICATION AUTH   │
                                  └──────────────────────┘

PACTION SearchApplications        #Allows searching in UI

                                  ┌─────────────────────┐
                                  │   APPLICATION CLI   │
                                  └─────────────────────┘

APP.licenseBody|readmeBody        #Can use 'file://...'

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

APP.version                       #APP_VERSION
                                  #Like a npm package version, but for a CloudFormation TEMPLATE
APP_VERSION.semanticVersion       #'APP_VERSION'. Must be a semver, e.g. 'X.Y.Z'
                                  #Def: '0.0.1'
APP_VERSION.creationTime          #'DATE'

APP_VERSION.templateBody          #STR. TEMPLATE's contents
                                  #Must be self-sufficient, i.e. should after `aws cloudformation package` or `sam package`
APP_VERSION.templateUrl           #Same but as S3 'URL'

APP_VERSION.sourceCodeUrl         #'URL' to source code, e.g. to GitHub commit, for documentation
APP_VERSION.sourceCodeArchiveUrl  #S3 'URL' to source code zip file, for documentation

APP_VERSION.resourcesSupported    #BOOL. False if some of the RESOURCEs are not supported in caller's REGION
                                  #Computed by API, using TEMPLATE
APP_VERSION.requiredCapabilities  #Minimum STACK.Capabilities required
                                  #If there is any, APP is hidden by default in UI
                                  #Computed by API, using TEMPLATE

AVAILABLE RESTYPES ==>            #Not all RESTYPEs are supported
                                  #See list in https://docs.aws.amazon.com/serverlessrepo/latest/devguide/list-supported-resources.html

AWS::Serverless|Lambda::          #Can be included as any other RESTYPE
 LayerVersion                     #This can be used as an alternative way to share a LAYER
                                  #  - instead of distributing a global LAYER_ARN
                                  #  - pro: consumers get local copies, i.e. less dependent

BUCKET                            #If APP_VERSION.licenseUrl|readmeUrl|templateUrl not provided,
 'awsserverlessrepo-changesets*'  #API automatically uploads APP_VERSION.licenseBody|readmeBody|templateBody to that BUCKET
                                  #Max 50MB contents per APP_VERSION (including sourceCodeArchiveUrl's contents)
                                  #Max 5GB contents for all APP_VERSIONs per ACCOUNT + REGION

                                  ┌──────────────────┐
                                  │   VERSION AUTH   │
                                  └──────────────────┘

PACTION s3:GetObject              #Used:
                                  #  - by SERVICE serverlessrepo.amazonaws.com
                                  #  - to retrieve APP_VERSION.licenseUrl|readmeUrl|templateUrl
                                  #If APP_VERSION.*Url was user-provided, must allow:
                                  #  - SERVICE serverlessrepo.amazonaws.com
                                  #  - on the specific OBJECT
                                  #     - or any within the BUCKET: 'arn:aws:s3:::BUCKET/*'
                                  #  - COND_KEY 'aws:SourceAccount' 'ACCOUNT_ID'
                                  #APP_POLICY automatically grants access to this BUCKET to any ACCOUNT_ID that can access the APP
                                  #  - i.e. users within that ACCOUNT can see TEMPLATEs of each others
                                  #  - can restrict with a IAM POLICY that:
                                  #     - denies s3:GetObject
                                  #     - on "arn:aws:s3:::awsserverlessrepo-changesets*/*"

                                  ┌─────────────────┐
                                  │   VERSION API   │
                                  └─────────────────┘

PUT /applications/APP_ID          #Req: APP_VERSION
 /versions/APP_VERSION            #  - no creationTime, requiredCapabilities, resourcesSupported, parameterDefinitions
CreateApplicationVersion()        #Res: APP_VERSION
                                  #  - no templateBody
GET /applications/APP_ID/versions #Req: none
ListApplicationVersions()         #Res: versions APP_VERSION_ARR
                                  #  - no sourceCodeArchiveUrl, templateBody, requiredCapabilities, resourcesSupported, parameterDefinitions

                                  ┌─────────────────┐
                                  │   VERSION CLI   │
                                  └─────────────────┘

APP_VERSION.templateBody          #Can use 'file://...'

                                  ┌─────────────────┐
                                  │   VERSION SAM   │
                                  └─────────────────┘

sam publish                       #Calls CreateApplication() using APP_METADATA
                                  #Uses APP_VERSION.templateBody (not APP_VERSION.templateUrl)
--fail-on-same-version            #BOOL. If APP_VERSION already exists:
                                  #  - false (def): fail
                                  #  - true: calls UpdateApplication() + CreateApplicationVersion()
--semantic-version                #Sets APP_METADATA.SemanticVersion

TEMPLATE.Metadata['AWS::          #APP_METADATA. Must be set to publish
 ServerlessRepo::Application']    #Cannot use !RFUNC
APP_METADATA.Name|Description
 |Author|SpdxLicenseId|LicenseBody
 |LicenseUrl|ReadmeBody|ReadmeUrl
 |HomePageUrl|Labels              #APP.*
APP_METADATA
 .SemanticVersion|SourceCodeUrl   #APP_VERSION.*

                                  ┌────────────────┐
                                  │   PARAMETERS   │
                                  └────────────────┘

APP_VERSION.parameterDefinitions  #APP_PARAM_ARR. TEMPLATE.Parameters
                                  #Computed by API, using TEMPLATE
APP_PARAM.name                    #'PARAM'
APP_PARAM.type|minLength|maxLength
 |minValue|maxValue|allowedPattern
 |allowedValues|defaultValue
 |noEcho|constraintDescription
 |description                     #Like PARAM.* (see CloudFormation docs)

APP_PARAM.referencedByResources   #'RESOURCE'_ARR using this APP_PARAM

                                  ┌───────────────┐
                                  │   CHANGESET   │
                                  └───────────────┘

APP_CHANGESET                     #Calls CreateChangeSet(), but sets CHANGESET.Template* using an APP's TEMPLATE
APP_CHANGESET.applicationId       #'APP_ID'
APP_CHANGESET.semanticVersion     #'APP_VERSION'
APP_CHANGESET.templateId          #'APP_TEMPLATE_MID'
                                  #Def: automatically calls CreateCloudFormationTemplate()

APP_CHANGESET.changeSetId
 |changeSetName|stackId
 |description|capabilities
 |clientToken|notificationArns
 |tags|rollbackConfiguration
 |resourceTypes                   #CHANGESET.* (see CloudFormation docs)
APP_CHANGESET.stackName           #'STACK'. Actual STACK name will be 'serverlessrepo-STACK'
APP_CHANGESET.parameterOverrides  #CHANGESET.Parameters but as OBJ_ARR: name 'PARAM', value 'VAL'

                                  ┌──────────────────┐
                                  │   CHANGESET UI   │
                                  └──────────────────┘

UI ==>                            #Can perform a APP_CHANGESET from the dashboard

                                  ┌───────────────────┐
                                  │   CHANGESET API   │
                                  └───────────────────┘

POST                              #Req: APP_CHANGESET
 /applications/APP_ID/changesets  #  - no changeSetId, stackId
CreateCloudFormationChangeSet()   #Res: APP_CHANGESET
                                  #  - only applicationId, semanticVersion, changeSetId, stackId

                                  ┌──────────────┐
                                  │   TEMPLATE   │
                                  └──────────────┘

APP_TEMPLATE                      #Clone an APP_VERSION's TEMPLATE, but in current REGION|ACCOUNT
                                  #Done by CreateCloudFormationTemplate() explicitely|implicitely
APP_TEMPLATE.templateId           #APP_TEMPLATE_MID
APP_TEMPLATE.applicationId        #'APP_ID'
APP_TEMPLATE.semanticVersion      #'APP_VERSION'
APP_TEMPLATE.creationTime         #'DATE'

APP_TEMPLATE.templateUrl          #S3 'URL' to TEMPLATE

APP_TEMPLATE.expirationTime       #Max 'DATE' to use through CreateCloudFormationTemplate()
                                  #Always 1 hour after creationTime
APP_TEMPLATE.status               #One of: 'PREPARING', 'ACTIVE', 'EXPIRED'

                                  ┌──────────────────┐
                                  │   TEMPLATE API   │
                                  └──────────────────┘

POST                              #Req: APP_TEMPLATE
 /applications/APP_ID/templates   #  - no template*, status, *Time
CreateCloudFormationTemplate()    #Res: APP_TEMPLATE
GET /applications/APP_ID
 /templates/APP_TEMPLATE_MID      #Req: empty
GetCloudFormationTemplate()       #Res: APP_TEMPLATE

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

APP_POLICY                        #Resource-based POLICY on APP, APP_VERSION, APP_TEMPLATE, APP_CHANGESET
                                  #By default: none, i.e. private
APP_POLICY.statements             #APP_STATEMENT_ARR
                                  #Max 6KB
APP_STATEMENT.statementId         #STR (def: none). Like IAM STATEMENT.Sid
APP_STATEMENT.actions             #'PACTION'_ARR among only:
                                  #  - SearchApplications, GetApplication, ListApplicationVersions, ListApplicationDependencies
                                  #  - CreateCloudFormationTemplate
                                  #  - CreateCloudFormationChangeSet
                                  #  - Deploy: all of the above
APP_STATEMENT.principals          #'ACCOUNT_ID|*'_ARR. STATEMENT.Principal
                                  #Applies to all REGIONs
APP_STATEMENT.principalOrgIDs     #'ORG_ID'_ARR (def: any)
                                  #Current user must be a member

COND_KEY                          #One of:
 serverlessrepo:applicationType   #  - 'private': no APP_POLICY, or APP_POLICY.statements empty ARR
                                  #  - 'shared': APP_STATEMENT.principals 'ACCOUNT_ID' or APP_STATEMENT.principalOrgIDs set
                                  #  - 'public': APP_STATEMENT.principals '*' and no APP_STATEMENT.principalOrgIDs
                                  #Only on  same PACTIONs available as APP_STATEMENT.actions

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

PUT /applications/APP_ID/policy   #Req: APP_POLICY
PutApplicationPolicy()            #Res: APP_POLICY
POST /applications/APP_ID/unshare #Req: organizationId 'ORG_ID'
UnshareApplication()              #Res: none
                                  #Updates APP_STATEMENT.principalOrgIDs
GET /applications/APP_ID/policy   #Req: empty
GetApplicationPolicy()            #Res: APP_POLICY

                                  ┌───────────────┐
                                  │   TRANSFORM   │
                                  └───────────────┘

AWS::Serverless::Application      #Expands to a nested STACK
                                  #  - i.e. requires STACK.Capabilities CAPABILITY_AUTO_EXPAND

                                  ┌─────────────┐
                                  │   NESTING   │
                                  └─────────────┘

NESTING ==>                       #APP using another APP in its TEMPLATE, through AWS::Serverless::Application
                                  #Is shown as a warning in the UI, due to STACK.Capabilities CAPABILITY_AUTO_EXPAND
                                  #Nested APP must be published before its parent

                                  ┌──────────────────┐
                                  │   NESTING AUTH   │
                                  └──────────────────┘

PACTION serverlessrepo:
 CreateCloudFormationTemplate
 |GetApplication                  #Must be allowed for others to nest this APP

                                  ┌─────────────────┐
                                  │   NESTING API   │
                                  └─────────────────┘

GET                               #Req: APP_VERSION
 /applications/APP_ID/dependencies#  - only semanticVersion
ListApplicationDependencies()     #Res: dependencies APP_VERSION
                                  #  - only semanticVersion, applicationId
