
                                  ┏━━━━━━━━━┓
                                  ┃   SAR   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #2024-11-05

SAM ==>                           #Documented as part of SAM, but uncorrolated to both SAM CLI and SAM transforms
                                  #Exception: publishing happens using a SAM CLI command

TODO:
  - go through new_service doc for SAM
  - go through `sam publish` code
  - https://docs.aws.amazon.com/serverlessrepo/latest/devguide/what-is-serverlessrepo.html

                                  ┌─────────────┐
                                  │   TO SORT   │
                                  └─────────────┘

sam publish                       #Publish package to SAR
--fail-on-same-version            #BOOL (def: false). Fail if version already exists

TEMPLATE.Metadata['AWS::
 ServerlessRepo::Application']    #APP_METADATA. Must be set to publish

APP_METADATA.SemanticVersion      #'APP_VERSION'
sam publish --semantic-version    #Overrides APP_METADATA.SemanticVersion

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SAR                               #AWS Serverless Application Repository

serverlessrepo.amazonaws.com      #SERVICE_DOMAIN
                                  #With SDK, called serverlessapplicationrepository

FORMAT ==>                        #JSON REST
                                  #Query parameters on GET|DELETE, request body on PUT|PATCH

ERRORS ==>                        #OBJ: errorCode, message
                                  #Also uses status code

PAGINATION ==>                    #Uses REQ.maxItems + REQ|RES.nextToken

PRICING ==>                       #Free

                                  ┌─────────────────┐
                                  │   APPLICATION   │
                                  └─────────────────┘

APP                               #Max 100 per ACCOUNT + REGION (soft)
APP_ARN                           #'arn:aws:serverlessrepo:REGION:ACCOUNT_ID:applications/APP_ID'
APP[_VERSION].applicationId       #'APP_ID'
APP.name                          #'APP'
                                  #Max 140 chars, only [:alnum:]-
APP.description                   #STR
                                  #Max 256 chars
APP.creationTime                  #'DATE'

APP.author                        #STR
                                  #Max 127 chars, only [:alnum:]-
APP.verifiedAuthorUrl             #'URL' of author
APP.isVerifiedAuthor              #BOOL. AWS-verified author

APP.spdxLicenseId                 #STR, e.g. 'MIT'
APP.licenseBody                   #STR. License's contents
                                  #Max 5MB
APP.licenseUrl                    #Same as S3 'URL'

APP.readmeBody                    #STR. README's contents
                                  #Max 5MB
APP.readmeUrl                     #Same as S3 'URL'

APP.homePageUrl                   #'URL', e.g. website or GitHub repository

APP.labels                        #STR_ARR. Arbitrary tags|keywords for search
                                  #Max 10 items
                                  #Max 127 chars, only [:alnum:]-_/:@

                                  ┌─────────────────────┐
                                  │   APPLICATION API   │
                                  └─────────────────────┘

POST /applications                #Req: APP
CreateApplication()               #  - no applicationId, *verifiedAuthor*, creationTime
                                  #  - version.* -> *
                                  #     - no creationTime, requiredCapabilities, resourcesSupported
                                  #Res: APP
                                  #  - no *Body
PATCH /applications/APP_ID        #Req: APP
UpdateApplication()               #  - no applicationId, *verifiedAuthor*, creationTime
                                  #  - no version, name, spdxLicenseId, license*
                                  #Res: APP
                                  #  - no *Body
GET /applications                 #Req: none
ListApplications()                #Res: applications APP_ARR
                                  #  - no version, *verifiedAuthor*, license*, readme*
GET /applications/APP_ID          #Req: APP
GetApplication()                  #  - only version.semanticVersion
                                  #Res: APP
                                  #  - no *Body
DELETE /applications/APP_ID       #Req: none
DeleteApplication()               #Res: none

                                  ┌──────────────────────┐
                                  │   APPLICATION AUTH   │
                                  └──────────────────────┘

PACTION SearchApplications        #Like ListApplications, but filters only the ones shared to current user

                                  ┌─────────────────────┐
                                  │   APPLICATION CLI   │
                                  └─────────────────────┘

APP.licenseBody|readmeBody        #Can use 'file://...'

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

APP.version                       #APP_VERSION
APP_VERSION.semanticVersion       #'APP_VERSION'. Must be a semver, e.g. 'X.Y.Z'
APP_VERSION.creationTime          #'DATE'

APP_VERSION.sourceCodeArchiveUrl  #S3 'URL' to source code zip file, for publishing
                                  #Max 50MB contents per APP_VERSION
                                  #Max 5GB contents for all APPs per ACCOUNT + REGION
APP_VERSION.sourceCodeUrl         #'URL' to source code, e.g. to GitHub commit, for documentation

APP_VERSION.templateBody          #STR. TEMPLATE's contents
APP_VERSION.templateUrl           #Same but as S3 'URL'

APP_VERSION.resourcesSupported    #BOOL. False if some of the RESOURCEs are not supported in caller's REGION
APP_VERSION.requiredCapabilities  #Minimum STACK.Capabilities required

                                  ┌─────────────────┐
                                  │   VERSION API   │
                                  └─────────────────┘

PUT /applications/APP_ID          #Req: APP_VERSION
 /versions/APP_VERSION            #  - no semanticVersion, creationTime, requiredCapabilities, resourcesSupported, parameterDefinitions
CreateApplicationVersion()        #Res: APP_VERSION
                                  #  - no templateBody
GET /applications/APP_ID/versions #Req: none
ListApplicationVersions()         #Res: versions APP_VERSION_ARR
                                  #  - no sourceCodeArchiveUrl, templateBody, requiredCapabilities, resourcesSupported, parameterDefinitions

                                  ┌─────────────────┐
                                  │   VERSION CLI   │
                                  └─────────────────┘

APP_VERSION.templateBody          #Can use 'file://...'

                                  ┌────────────────┐
                                  │   PARAMETERS   │
                                  └────────────────┘

APP_VERSION.parameterDefinitions  #APP_PARAM_ARR. TEMPLATE.Parameters
APP_PARAM.name                    #'PARAM'
APP_PARAM.type|minLength|maxLength
 |minValue|maxValue|allowedPattern
 |allowedValues|defaultValue
 |noEcho|constraintDescription
 |description                     #Like PARAM.* (see CloudFormation docs)

APP_PARAM.referencedByResources   #'RESOURCE'_ARR using this APP_PARAM

APP_CHANGESET.parameterOverrides  #APP_PARAMVAL_ARR. STACK.Parameters
APP_PARAMVAL.name                 #'PARAM'.
APP_PARAMVAL.value                #'VAL'

                                  ┌──────────────┐
                                  │   TEMPLATE   │
                                  └──────────────┘

APP_TEMPLATE.templateId           #TEMPLATE_MID
APP_TEMPLATE.applicationId        #'APP_ID'
APP_TEMPLATE.semanticVersion      #'APP_VERSION'
APP_TEMPLATE.creationTime         #'DATE'

APP_TEMPLATE.templateUrl          #S3 'URL' to TEMPLATE

APP_TEMPLATE.expirationTime       #'DATE' when expires
                                  #Always 1 hour after creationTime
APP_TEMPLATE.status               #One of:
                                  #  - 'PREPARING'
                                  #  - 'ACTIVE'
                                  #  - 'EXPIRED'

                                  ┌──────────────────┐
                                  │   TEMPLATE API   │
                                  └──────────────────┘

POST                              #Req: APP_TEMPLATE
 /applications/APP_ID/templates   #  - no applicationId, template*, status, *Time
CreateCloudFormationTemplate()    #Res: APP_TEMPLATE
GET /applications/APP_ID
 /templates/TEMPLATE_MID          #Req: empty
GetCloudFormationTemplate()       #Res: APP_TEMPLATE

                                  ┌───────────────┐
                                  │   CHANGESET   │
                                  └───────────────┘

APP_CHANGESET.applicationId       #'APP_ID'
APP_CHANGESET.semanticVersion     #'APP_VERSION'
APP_CHANGESET.templateId          #'TEMPLATE_MID'

APP_CHANGESET.changeSetId
 |changeSetName|stackId|stackName
 |description|capabilities
 |clientToken|notificationArns
 |tags|rollbackConfiguration
 |resourceTypes                   #CHANGESET.* (see CloudFormation docs)

                                  ┌───────────────────┐
                                  │   CHANGESET API   │
                                  └───────────────────┘

POST                              #Req: APP_CHANGESET
 /applications/APP_ID/changesets  #  - no applicationId, changeSetId, stackId
CreateCloudFormationChangeSet()   #Res: APP_CHANGESET
                                  #  - only applicationId, semanticVersion, changeSetId, stackId

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

APP_POLICY.statements             #APP_STATEMENT_ARR
                                  #Max 6KB
APP_STATEMENT.statementId         #STR. Like IAM STATEMENT.Sid
APP_STATEMENT.actions             #'PACTION'_ARR
                                  #  - no CreateApplication[Version], UpdateApplication, DeleteApplication, ListApplications
                                  #    GetCloudFormationTemplate, *ApplicationPolicy, UnshareApplication
                                  #  - Deploy: same as all available PACTIONs
APP_STATEMENT.principals          #'ACCOUNT_ID|*'_ARR. STATEMENT.Principal
APP_STATEMENT.principalOrgIDs     #'ORG_ID'_ARR. COND_KEY aws:PrincipalOrgID

COND_KEY
 serverlessrepo:applicationType   #'public' or 'private'. Same PACTIONs available as APP_STATEMENT.actions

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

PUT /applications/APP_ID/policy   #Req: APP_POLICY
PutApplicationPolicy()            #Res: APP_POLICY
GET /applications/APP_ID/policy   #Req: empty
GetApplicationPolicy()            #Res: APP_POLICY

                                  ┌─────────────┐
                                  │   UNSHARE   │
                                  └─────────────┘

APP_UNSHARE.organizationId        #'ORG_ID'

                                  ┌─────────────────┐
                                  │   UNSHARE API   │
                                  └─────────────────┘

POST /applications/APP_ID/unshare #Req: APP_UNSHARE
UnshareApplication()              #Res: none

                                  ┌──────────────────────┐
                                  │   DEPENDENCIES API   │
                                  └──────────────────────┘

GET                               #Req: APP_VERSION
 /applications/APP_ID/dependencies#  - only semanticVersion
ListApplicationDependencies()     #Res: dependencies APP_VERSION
                                  #  - only semanticVersion, applicationId
