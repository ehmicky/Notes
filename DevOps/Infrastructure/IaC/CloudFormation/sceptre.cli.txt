
           
   SCEPTRE  
           



TODO:
  - https://github.com/orgs/Sceptre/repositories?type=source
  - compare with rain

VERSION ==>                       #4.2.2
                                  #Installed with pip|Docker

sceptre                           #CLI on top of `aws cloudformation`
-U                                #Update version
--output                          #text|yaml|json
--no-colour                       #
--debug                           #Debug logs

eval
 "$(_SCEPTRE_COMPLETE=source[_zsh]
 sceptre)"                        #Add autocompletion for Bash|ZSH

sceptre --dir                     #'DIR' (def: '.') used as cwd
/PROJECT/config[/ACCOUNT_ID]      #APATH
/APATH/config.yaml                #GGCONFIG. Default value for all GCONFIGs
/APATH/GROUP/config.yaml          #GCONFIG, i.e. config for a GROUP
                                  #Can also set all SCONFIG.*, targetting all STACKs
                                  #  - except for: template|stack_name
                                  #  - SCONFIG.* overrides GCONFIG.*
                                  #     - except SCONFIG.dependencies, which is concatenated instead
/APATH/GROUP/STACK.yaml           #SCONFIG, i.e. config for a STACK

GPATH                             #PATH to GCONFIG
SPATH                             #PATH to SCONFIG
GSPATH                            #GPATH|SPATH

sceptre new project PROJECT       #Creates GGCONFIG and /PROJECT/templates
sceptre new group GROUP           #Creates GCONFIG

GROUP                             #Group of STACKs deployed together in the same ACCOUNT|REGION
                                  #When one STACK uses another STACK2's OUTPUTs, it waits for it first
                                  #As opposed to a SET, which is a single STACK deployed on multiple ACCOUNTs|REGIONs

SCONFIG.template                  #TEMPLATE_HANDLER. Where to read TEMPLATE (not write) for most `sceptre` commands
                                  #Can implement custom one with Python logic (not documented yet)
TEMPLATE_HANDLER.type             #'path|s3|http'
TEMPLATE_HANDLER.path             #Location of TEMPLATE.EXT. With type:
                                  #  - 'path': 'PATH', usually /PROJECT/templates/STACK.EXT
                                  #  - 's3': 'BUCKET/OBJECT'
TEMPLATE_HANDLER.url              #'URL'. Location of TEMPLATE.EXT with type 'http'
GCONFIG
 .http_template_handler.retries   #NUM (def: 5) of retries, with type 'http'
GCONFIG
 .http_template_handler.timeout   #NUM (in secs, def: 5) timeout, with type 'http'

GCONFIG.template_bucket_name      #'BUCKET' where to upload TEMPLATEs during `sceptre launch|create|update` and `sceptre validate|estimate-cost`
                                  #Takes the local TEMPLATE, upload it to S3, then use STACK|CHANGELOG.TemplateURL
                                  #Stored as S3 OBJECT 'REGION/GROUP/STACK-YYYY-MM-DD-HH-MM-SS-SSSZ.json|yaml'
GCONFIG.template_key_prefix       #STR prefix to S3 OBJECT with uploaded TEMPLATE

TEMPLATE.json|yaml                #No templating
TEMPLATE.j2                       #Jinja templating, to transform to JSON|YAML
TEMPLATE.py                       #Python FUNC sceptre_handler(OBJ)->'TEMPLATE_JSON|YAML'

SCONFIG.sceptre_user_data         #OBJ of template variables passed to TEMPLATE.j2|py

sceptre
--var-file                        #YAML 'PATH' with OBJ of template variables
--var                             #Same as 'VARR=VAL'
--merge-vars                      #If two --var[-file] specify same VARR, deep merge instead of overwriting

!RFUNC VAL                        #Similar to RFUNC, but for GCONFIG|SCONFIG
                                  #Only for:
                                  #  - values of GCONFIG: template_bucket_name
                                  #  - values of SCONFIG: template|ignore|notifications|role_arn|*_role|sceptre_user_data|stack_tags
                                  #  - OBJ values of SCONFIG.parameters
sceptre validate|diff
 |dump template
--no-placeholders|-n              #Unlike specified, !RFUNC cannot be resolved is substituted with '!RFUNC(ARG)', instead of failing

sceptre validate GSPATH           #ValidateTemplate()

sceptre estimate-cost GSPATH      #EstimateTemplateCost(), opening a browser

sceptre launch GSPATH             #Upserts STACK, i.e. like `screptre create|update`

sceptre launch|create|update
 |execute|delete|prune
--yes|-y                          #No CLI interactive input
--disable|enable-rollback         #CHANGESET.DisableRollback BOOL (def: false)
SCONFIG.protected                 #BOOL (def: false). Forbid `sceptre launch|create|update|execute|delete|prune`

sceptre create GSPATH [CHANGESET] #CreateStack()
                                  #If CHANGESET, CreateChangeSet() instead
                                  #Use STACK|CHANGESET.Capabilities ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND"]
SCONFIG.parameters                #OBJ of PARAMVALs. STACK|CHANGESET.Parameters
SCONFIG.notifications             #SNS_TOPIC_ARN_ARR. STACK|CHANGESET.NotificationARNs
SCONFIG.stack_tags                #OBJ. STACK|CHANGESET.Tags
SCONFIG
 .cloudformation_service_role     #ROLE_ARN. STACK|CHANGESET.RoleARN
SCONFIG.disable_rollback          #BOOL (def: false). STACK.DisableRollback
SCONFIG.on_failure                #STR (def: 'ROLLBACK'). STACK.OnFailure
SCONFIG.stack_timeout             #NUM (def: none). STACK.TimeoutInMinutes

sceptre update GSPATH             #UpdateStack()
--change-set|-c                   #Instead: CreateChangeSet(), then confirmation (DescribeChangeSet()), then ExecuteChangeSet()
--verbose|-v                      #With --change-set, show raw response of DescribeChangeSet() instead of simplified

sceptre execute GSPATH CHANGESET  #ExecuteChangeSet()

sceptre set-policy
 GSPATH POLICY_PATH               #SetStackPolicy()
--built-in|-b                     #'allow-all|deny-all'. Instead of POLICY_PATH, use built-in one
                                  #With STATEMENT: Effect 'Allow|Deny', Action 'Update:*', Principal '*', Resource '*'

sceptre describe policy GSPATH    #GetStackPolicy()

sceptre describe change-set
 GSPATH CHANGESET                 #DescribeChangeSet()
--verbose|-v                      #Raw response instead of simplified

sceptre list change-sets GSPATH   #ListChangeSets()
--url|-U                          #Print as URLs to AWS UI

sceptre status GSPATH             #Print STACK.StackStatus (using DescribeStacks())

sceptre list outputs GSPATH       #Print STACK.Outputs (using DescribeStacks())
--export|-e                       #How to print, among:
                                  #  - default: flat
                                  #  - envvar: export SCEPTRE_{OUTPUT}=VAL
                                  #  - stackoutput[external]: !stack_output[_external] STACK.yaml::OUTPUT [VAL]

sceptre list resources GSPATH     #DescribeStackResources()

sceptre dump                      #
--to-file                         #Output to .dump/STACK/... instead of stdout

sceptre dump all GSPATH           #Combines both sceptre dump config|template

sceptre list stacks GSPATH        #Print SCONFIG, before applying templating

sceptre dump config GSPATH        #Print SCONFIG, after applying templating

sceptre dump template GSPATH
sceptre generate GSPATH           #Print local TEMPLATE, after applying templating

sceptre fetch-remote-template PATH#GetTemplate(), i.e. output the TEMPLATE currently in CloudFormation

sceptre delete GSPATH [CHANGESET] #DeleteStack()
                                  #If CHANGESET, DeleteChangeSet() instead

sceptre prune [GSPATH]
sceptre launch --prune|-p         #DeleteStack() if SCONFIG.obsolete true
sceptre diff --all|-a             #Include STACKs that are ignored or obsolete
SCONFIG.ignore                    #BOOL (def: false). Make `screptre launch` ignore STACK
SCONFIG.obsolete                  #BOOL (def: false). Same but also make `prune` delete STACK

sceptre diff GSPATH               #Diff between:
                                  #  - local|deployed TEMPLATEs
                                  #  - SCONFIG.* and STACK.*
                                  #     - only parameters|notifications|cloudformation_service_role|stack_tags
                                  #I.e. not meant for drift, but for changes not committed yet
--type|-t                         #How to diff:
                                  #  - deepdiff (def): recursive comparison
                                  #  - difflib: more traditional `diff`
--show-no-echo|-s                 #Whether to display NoEcho PARAMs
                                  #Always false for PARAMs retrieved from CloudFormation, i.e. only for PARAMs specified locally

sceptre drift detect GSPATH       #DetectStackDrift()
                                  #5 minutes timeout

sceptre drift show GSPATH         #DetectStackDrift() + DescribeStackResourceDrifts()
                                  #5 minutes timeout
--drifted|-D                      #Only show RESOURCEs not IN_SYNC

SCONFIG.hooks                     #

GCONFIG.project_code              #'PROJECT_CODE' (Def: 'PROJECT'). Prefixes 'STACK' names
GCONFIG.region                    #'REGION'
GCONFIG.profile                   #
GCONFIG.required_version          #
GCONFIG.j2_environment            #

SCONFIG.dependencies              #
sceptre --ignore-dependencies     #Ignore STACK dependencies
SCONFIG.role_arn                  #
SCONFIG.iam_role                  #
SCONFIG.sceptre_role              #
SCONFIG.iam_role_session_duration #
SCONFIG
 .sceptre_role_session_duration   #
SCONFIG.stack_name                #
