
           
   SCEPTRE  
           



TODO:
  - https://github.com/Sceptre/github-ci-action
  - https://github.com/Sceptre/sceptrelint
  - resolvers:
     - https://github.com/Sceptre/sceptre-date-resolver
     - https://github.com/Sceptre/sceptre-json-resolver
     - https://github.com/Sceptre/sceptre-request-resolver
     - https://github.com/Sceptre/jinja-unquote-resolvers-filter
     - https://github.com/Sceptre/sceptre-kms-resolver
     - https://github.com/Sceptre/sceptre-ssm-resolver
  - compare with rain

VERSION ==>                       #4.2.2
                                  #Installed with pip|Docker

sceptre                           #CLI on top of `aws cloudformation`
-U                                #Update version
GCONFIG.required_version          #'>= X.Y[.Z]'. Minimum sceptre version

sceptre                           #
--output                          #text|yaml|json
--no-colour                       #
--debug                           #Debug logs

eval
 "$(_SCEPTRE_COMPLETE=source[_zsh]
 sceptre)"                        #Add autocompletion for Bash|ZSH

GROUP                             #Group of STACKs deployed together in the same ACCOUNT|REGION
                                  #As opposed to a SET, which is a single STACK deployed on multiple ACCOUNTs|REGIONs

SCONFIG.dependencies              #'STACK'_ARR to build first
                                  #GROUPs are automatically dependent on their children STACKs
                                  #Same with !stack_output
sceptre --ignore-dependencies     #Ignore STACK dependencies

sceptre --dir                     #'DIR' (def: '.') used as cwd
/PROJECT/config                   #APATH
/APATH/GROUP                      #APATH. I.e. can create parent|child GROUPs
/APATH/config.yaml                #GCONFIG, i.e. config for a GROUP
                                  #Can also define all SCONFIG.*, targetting all STACKs of this GROUP
                                  #  - except for: SCONFIG.template|stack_name
                                  #  - SCONFIG.* overrides GCONFIG.*
                                  #     - except SCONFIG.dependencies, which is concatenated instead
/APATH/STACK.yaml                 #SCONFIG, i.e. config for a STACK

GPATH                             #PATH to GCONFIG
SPATH                             #PATH to SCONFIG
GSPATH                            #GPATH|SPATH. Check again???

sceptre new project PROJECT       #Creates /PROJECT/config/config.yaml and /PROJECT/templates
sceptre new group GROUP           #Creates /PROJECt/config/GROUP/config.yaml

SCONFIG.template                  #TEMPLATE_HANDLER. Where to read TEMPLATE (not write) for most `sceptre` commands
                                  #Can implement custom one with Python logic (not documented yet)
TEMPLATE_HANDLER.type             #'path|s3|http'
TEMPLATE_HANDLER.path             #Location of TEMPLATE.EXT. With type:
                                  #  - 'path': 'PATH', usually /PROJECT/templates/STACK.EXT
                                  #  - 's3': 'BUCKET/OBJECT'
TEMPLATE_HANDLER.url              #'URL'. Location of TEMPLATE.EXT with type 'http'
GCONFIG
 .http_template_handler.retries   #NUM (def: 5) of retries, with type 'http'
GCONFIG
 .http_template_handler.timeout   #NUM (in secs, def: 5) timeout, with type 'http'

GCONFIG.template_bucket_name      #'BUCKET' where to upload TEMPLATEs during `sceptre launch|create|update` and `sceptre validate|estimate-cost`
                                  #Takes the local TEMPLATE, upload it to S3, then use STACK|CHANGELOG.TemplateURL
                                  #Stored as S3 OBJECT 'REGION/GROUP/STACK-YYYY-MM-DD-HH-MM-SS-SSSZ.json|yaml'
GCONFIG.template_key_prefix       #STR prefix to S3 OBJECT with uploaded TEMPLATE

JINJA TEMPLATING ==>              #Can be used in:
                                  #  - GCONFIG|SCONFIG: to YAML
                                  #  - TEMPLATE.j2: to JSON|YAML
                                  #     - as opposed to TEMPLATE.json|yaml: no Jinja templating
                                  #     - should try to use CloudFormation RFUNC and PARAMs instead, when possible
                                  #Includes:
                                  #  - {{ TVAR }}
                                  #  - {{ TVAR | default('...') }}
GCONFIG.j2_environment            #OBJ. Jinja configuration. Not documented yet

TEMPLATE.py                       #Python FUNC sceptre_handler()->'TEMPLATE_JSON|YAML'

TVAR                              #Template variables to use in Jinja templating (GCONFIG|SCONFIG|TEMPLATE)

TVAR environment_variable.ENVVAR  #VAL
TVAR [stack_group_config.]VARR    #GCONFIG|SCONFIG.VARR. Of parent config files only, not current one
TVAR command_path.NUM             #Additional arguments passed to `spectre ...`

sceptre
--var-file                        #YAML 'PATH' with OBJ, set as TVAR `var`
--var                             #Same as 'VARR=VAL'
--merge-vars                      #If two --var[-file] specify same VARR, deep merge instead of overwriting
SCONFIG.sceptre_user_data         #OBJ set as TVAR sceptre_user_data
                                  #Also passed as argument to TEMPLATE.py sceptre_handler()

!RFUNC VAL                        #Similar to CloudFormation RFUNC, but for GCONFIG|SCONFIG
                                  #Only for:
                                  #  - values of GCONFIG: template_bucket_name
                                  #  - values of SCONFIG: template|ignore|notifications|role_arn|*_role|sceptre_user_data|stack_tags
                                  #  - OBJ values of SCONFIG.parameters
                                  #Multiple ARGs: must be an ARR
                                  #Performed after Jinja templating
                                  #Can implement custom RFUNCs with Python logic (not documented yet)
sceptre validate|diff
 |dump template
--no-placeholders|-n              #Unlike specified, if !RFUNC cannot be resolved is substituted with '!RFUNC(ARG)'
                                  #E.g. this happens with !stack_output SPATH::OUTPUT:
                                  #  - `spectre launch|create|update|delete` will operate other STACK first, i.e. resolving it correctly
                                  #  - but `spectre diff|validate|generate` do not, i.e. fail by default

!environment_variable ENVVAR      #VAL
!file PATH|URL                    #File contents. If .json|y[a]ml, injected as VAL, otherwise as STR
!rcmd SHELL_COMMAND               #Runs in /bin/bash
!join DELIM STR...                #STR.join(DELIM)
!split DELIM STR                  #STR.split(DELIM)
!sub STR OBJ                      #Replace {VAR} in STR by OBJ.VAR
                                  #Should prefer Jinja templating most of the time
!select NUM VAL...                #ARR[NUM]. NUM can be negative
!no_value                         #undefined
!stack_attr VARR                  #Like TVAR stack_group_config.VARR, but as a RFUNC
!stack_output SPATH::OUTPUT       #STACK OUTPUT, resolved locally
                                  #Cannot be used if other STACK has SCONFIG.stack_name defined
                                  #  - should use !stack_output_external + SCONFIG.dependencies ['STACK'] instead
!stack_output_external            #STACK OUTPUT, resolved by calling CloudFormation
 STACK::OUTPUT [PROFILE]          #Can specify PROFILE, if STACK is in a different ACCOUNT|REGION

sceptre validate GSPATH           #ValidateTemplate()

sceptre estimate-cost GSPATH      #EstimateTemplateCost(), opening a browser

sceptre launch GSPATH             #Upserts STACK, i.e. like `screptre create|update`

sceptre launch|create|update
 |execute|delete|prune
--yes|-y                          #No CLI interactive input
--disable|enable-rollback         #CHANGESET.DisableRollback BOOL (def: false)
SCONFIG.protected                 #BOOL (def: false). Forbid `sceptre launch|create|update|execute|delete|prune`

sceptre create GSPATH [CHANGESET] #CreateStack()
                                  #If CHANGESET, CreateChangeSet() instead
                                  #Use STACK|CHANGESET.Capabilities ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND"]
SCONFIG.stack_name                #STR. STACK.StackName
GCONFIG.project_code              #STR, prefixed to the StackName of all STACKs in the GROUP
SCONFIG.parameters                #OBJ of PARAMVALs. STACK|CHANGESET.Parameters
SCONFIG.notifications             #SNS_TOPIC_ARN_ARR. STACK|CHANGESET.NotificationARNs
SCONFIG.stack_tags                #OBJ. STACK|CHANGESET.Tags
SCONFIG
 .cloudformation_service_role     #ROLE_ARN. STACK|CHANGESET.RoleARN
SCONFIG.disable_rollback          #BOOL (def: false). STACK.DisableRollback
SCONFIG.on_failure                #STR (def: 'ROLLBACK'). STACK.OnFailure
SCONFIG.stack_timeout             #NUM (def: none). STACK.TimeoutInMinutes

sceptre update GSPATH             #UpdateStack()
--change-set|-c                   #Instead: CreateChangeSet(), then confirmation (DescribeChangeSet()), then ExecuteChangeSet()
--verbose|-v                      #With --change-set, show raw response of DescribeChangeSet() instead of simplified

sceptre execute GSPATH CHANGESET  #ExecuteChangeSet()

sceptre set-policy
 GSPATH POLICY_PATH               #SetStackPolicy()
--built-in|-b                     #'allow-all|deny-all'. Instead of POLICY_PATH, use built-in one
                                  #With STATEMENT: Effect 'Allow|Deny', Action 'Update:*', Principal '*', Resource '*'

sceptre describe policy GSPATH    #GetStackPolicy()

sceptre describe change-set
 GSPATH CHANGESET                 #DescribeChangeSet()
--verbose|-v                      #Raw response instead of simplified

sceptre list change-sets GSPATH   #ListChangeSets()
--url|-U                          #Print as URLs to AWS UI

sceptre status GSPATH             #Print STACK.StackStatus (using DescribeStacks())

sceptre list outputs GSPATH       #Print STACK.Outputs (using DescribeStacks())
--export|-e                       #How to print, among:
                                  #  - default: flat
                                  #  - envvar: export SCEPTRE_{OUTPUT}=VAL
                                  #  - stackoutput[external]: !stack_output[_external] STACK.yaml::OUTPUT [VAL]

sceptre list resources GSPATH     #DescribeStackResources()

sceptre dump                      #
--to-file                         #Output to .dump/STACK/... instead of stdout

sceptre dump all GSPATH           #Combines both sceptre dump config|template

sceptre list stacks GSPATH        #Print SCONFIG, before applying templating

sceptre dump config GSPATH        #Print SCONFIG, after applying templating

sceptre dump template GSPATH
sceptre generate GSPATH           #Print local TEMPLATE, after applying templating

sceptre fetch-remote-template PATH#GetTemplate(), i.e. output the TEMPLATE currently in CloudFormation

sceptre delete GSPATH [CHANGESET] #DeleteStack()
                                  #If CHANGESET, DeleteChangeSet() instead

sceptre prune [GSPATH]
sceptre launch --prune|-p         #DeleteStack() if SCONFIG.obsolete true
sceptre diff --all|-a             #Include STACKs that are ignored or obsolete
SCONFIG.ignore                    #BOOL (def: false). Make `screptre launch` ignore STACK
SCONFIG.obsolete                  #BOOL (def: false). Same but also make `prune` delete STACK
                                  #Meant to delete STACKs in a CI flow

sceptre diff GSPATH               #Diff between:
                                  #  - local|deployed TEMPLATEs
                                  #  - SCONFIG.* and STACK.*
                                  #     - only parameters|notifications|cloudformation_service_role|stack_tags
                                  #I.e. not meant for drift, but for changes not committed yet
--type|-t                         #How to diff:
                                  #  - deepdiff (def): recursive comparison
                                  #  - difflib: more traditional `diff`
--show-no-echo|-s                 #Whether to display NoEcho PARAMs
                                  #Always false for PARAMs retrieved from CloudFormation, i.e. only for PARAMs specified locally

sceptre drift detect GSPATH       #DetectStackDrift()
                                  #5 minutes timeout

sceptre drift show GSPATH         #DetectStackDrift() + DescribeStackResourceDrifts()
                                  #5 minutes timeout
--drifted|-D                      #Only show RESOURCEs not IN_SYNC

SCONFIG.hooks.before|after_EVENT  #!CTYPE ARGS...
                                  #Runs CTYPE(ARGS...) before|after EVENT
                                  #EVENT can be:
                                  #  - create|update|delete: of a STACK
                                  #  - create_change_set: of a CHANGESET
                                  #  - launch|validate|diff|drift_detect|drift_show: `sceptre EVENT`
                                  #  - dump_template|generate: sceptre diff|generate|dump template
                                  #Following !CTYPE are available. Can also implement custom one with Python logic (not documented yet)
!cmd SHELL_COMMAND                #Runs in shell (/bin/sh on Unix, cmd.exe on Windows)
!asg_scaling_processes
 suspend|resume::STR              #AutoScaling Suspend|ResumeProcesses() with ScalingProcesses STR

GCONFIG.profile                   #'PROFILE' used by the initial user, that calls STS AssumeRole() to SCONFIG.sceptre_role
                                  #Def: guessed from AWS config (see its doc)
SCONFIG.sceptre_role              #ROLE_ARN used by `spectre` when calling CloudFormation API
                                  #Def: none, i.e. uses GCONFIG.profile instead
SCONFIG
 .sceptre_role_session_duration   #NUM (in secs, def: 1h). STS AssumeRole() DurationSeconds

GCONFIG.region                    #'REGION'
