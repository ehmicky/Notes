
       
   CDK  
       



TODO:
  - https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html
  - https://docs.aws.amazon.com/cdk/v2/guide/cli.html
  - https://cdkworkshop.com/
  - https://docs.aws.amazon.com/cdk/v2/guide/home.html
  - https://github.com/aws/aws-cdk
  - https://constructs.dev/
  - https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript
  - https://github.com/Sceptre/sceptre-cdk-handler
  - https://cdk.dev/resources
  - https://github.com/kalaiser/awesome-cdk
  - check currently documented SERVICEs, with the list of aws_general doc

require('aws-cdk-lib/SERVICE')    #SLIB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk                               #CLI. Package `aws-cdk` (version 2.100.0)
                                  #TypeScript/Python/Java/Go/.NET

CONFIG                            #Either (in priority order):
                                  #  - CLI flags
                                  #  - ./cdk.json
                                  #  - ~/.cdk.json
                                  #CLI flags:
                                  #  - ARR -> repeatable
                                  #  - OBJ -> VAR=VAL, repeatable
                                  #  - BOOL -> --FLAG=BOOL or --[no-]FLAG
                                  #cdk.json:
                                  #  - paths are relative to file itself

STACK                             #'STACK'
                                  #Can contain ? * ** (/-delimited)
                                  #If single one, defaults to it
                                  #"All STACKs" refers to the ones for the current app

cdk ...
--build                           #'COMMAND' run before `cdk synth` to build the main file
--app|-a                          #'COMMAND' run during `cdk synth` to execute the main file
                                  #E.g. with TypeScript: `ts-node PATH.ts`
                                  #With cdk deploy|import|diff, 'PATH' instead
                                  #  - to `cdk synth` output
                                  #  - def: runs `cdk synth` automatically
--output|-o                       #'DIR' (def: single 'cdk.out' file). Output of `cdk synth`
--staging                         #BOOL (def: true). Copy assets to the output directory, to allow for local debugging
--plugin|-p                       #'PATH|MODULE'_ARR to plugin

--json|-j                         #BOOL (def: false). Output as JSON instead of YAML (e.g. when printing TEMPLATEs on stdout)
--version-reporting               #BOOL (def: true). Output RESOURCE.CDKMetadata:
                                  #  - Type 'AWS::CDK::Metadata'
                                  #  - Properties.Analytics 'v2:deflate64:[X.Y.Z!]MODULE/EXPORT,...'
                                  #     - list of CONSTRUCTs used
                                  #     - e.g. @aws-cdk/core.{Stack,Construct,CfnResource} or @aws-solutions-constructs/aws-apigateway-lambda.Function
                                  #     - the last part is gzip'd then base64'd
                                  #     - used for analytics, or notifying of security vulnerabilities
--path-metadata                   #BOOL (def: true). Output RESOURCE.*.Metadata['aws:cdk:path']
--asset-metadata                  #BOOL (def: true). Output RESOURCE.*.Metadata['aws:asset:*'] if use assets

--no-color                        #BOOL (def: false)
ENVVAR CI=true
--ci                              #BOOL (def: false). CI output.

--trace                           #BOOL (def: false). Print stack trace with warnings.
--strict                          #BOOL (def: false). Fail on warnings.
--ignore-errors                   #BOOL (def: false). Do not fail on errors.
--verbose|-v                      #BOOL_ARR. Verbose logs
--debug                           #BOOL (def: false). Debug logs

--profile                         #'PROFILE' (see AWS config doc)
--role-arn|-r                     #ROLE_ARN making CloudFormation API calls
                                  #Def: use current PRINCIPAL

ENVVAR HTTPS_PROXY
--proxy                           #'URL'
ENVVAR AWS_CA_BUNDLE
--ca-bundle-path                  #'PATH' to CA certificates for HTTPS
--ec2creds|-i                     #BOOL (def: false). Fetch EC2 instance credentials instead of guessing EC2 instance status

cdk ... --notices                 #BOOL (def: false). Show notices
cdk notices                       #Show all notices
cdk acknowledge|ack [NOTICE_ID]   #Do not show a notice anymore

cdk synth|deploy|destroy|diff
--exclusively|-e                  #BOOL. If false (def), include dependent STACKs

cdk init [SCAFFOLDER]             #Scaffold files. SCAFFOLDER can be:
                                  #  - app: empty app
                                  #  - sample-app: example app with an SQS QUEUE and an SNS TOPIC
                                  #  - lib: CONSTRUCT library (only 'typescript')
--language|-l                     #Among: 'typescript', 'javascript', 'csharp', 'fsharp', 'go', 'java', 'python'
--generate-only                   #BOOL. If false (def), also setup git, install dependencies and build project
--list                            #BOOL (def: false). List available SCAFFOLDERs

cdk synth[esize] [STACK...]       #Convert CDK files to CloudFormation TEMPLATE files
ENVVAR CDK_VALIDATION=true
--validation                      #BOOL (def: true). After synthesis, validate stacks with the "validateOnSynth" attribute set
--quiet|-q                        #BOOL. If false (def), print TEMPLATE to stdout too

cdk bootstrap|deploy|import
--toolkit-stack-name              #'STACK' (def: 'CDKToolkit') created by `cdk bootstrap`

cdk bootstrap [ENVIRONMENT...]    #Deploy the "toolkit", a STACK needed for operations with:
                                  #  - a S3 BUCKET
                                  #  - ROLEs to deploy
                                  #Specific to a given ENVIRONMENT, i.e. 'aws://ACCOUNT_ID/REGION' (def: current one)
--execute                         #Like cdk import
--previous-parameters             #Like cdk deploy

--bootstrap-bucket-name|-b
--toolkit-bucket-name             #S3 'BUCKET'. Must not exist yet
--bootstrap-kms-key-id            #KMS_KEY_ID used with BUCKET
--bootstrap-customer-key          #BOOL (def: false). Create a S3 x-amz-server-side-encryption-customer-key [C] used with BUCKET
--public-access-block
 -configuration                   #BOOL (def: true). Use S3 PUBLIC_BLOCK

--qualifier                       #STR. String which must be unique for each bootstrap stack. You must configure it on your CDK app if you change this from the default.
--termination-protection          #BOOL (def: false). STACK.EnableTerminationProtection
--tags|-t                         #OBJ. STACK.Tags

--cloudformation-execution        #POLICY_ARN_ARR attached to the ROLE deploying
 -policies                        #Def: allow all
--trust                           #'ACCOUNT_ID'_ARR used as Principal in the POLICY, for any PACTIONs
--trust-for-lookup                #Same but only for read-only PACTIONs

--show-template                   #BOOL (def: false). Instead of actual bootstrapping, print the current CLI's bootstrapping template to stdout for customization
--template                        #STR. Use the template from the given file instead of the built-in one
                                  #Use --show-template to obtain an example
--force|-f                        #BOOL. If false (def), fails if deploy would downgrade template version

cdk deploy [STACK...]             #Deploys the stack(s) named STACKS into your AWS account
--all                             #BOOL (def: false). Deploy all STACKs

--method|-m                       #Deploy using:
                                  #  - 'direct': UpdateStack()
                                  #  - 'prepare-change-set': CreateChangeSet()
                                  #  - 'change-set': CreateChangeSet() + ExecuteChangeSet()
--change-set-name                 #'CHANGESET'
--rollback                        #BOOL (def: true). STACK|CHANGESET.DisableRollback false|true
                                  #Must not be false if some RESOURCEs are replaced

--parameters                      #OBJ. Key is '[STACK:]PARAM'. STACK|CHANGESET.Parameters
--previous-parameters             #BOOL (def: true). Re-use PARAMs from previous deploy, except ones overridden
--outputs-file|-O                 #'PATH.json' (def: stdout) to write STACK OUTPUTs to

--notification-arns               #SNS TOPIC_ARN_ARR. STACK|CHANGESET.NotificationARNs
--progress                        #How to display STACK EVENTs among 'bar' or 'events'

--concurrency                     #Max NUM (def: 1) on ongoing deploys
--asset-parallelism               #BOOL (def: false). Build|publish assets in parallel
--asset-prebuild                  #BOOL (def: true). Build all assets before deploying the first stack (useful for failing Docker builds)
--build-exclude|-E                #STR_ARR. Do not rebuild asset with the given ID

--watch                           #BOOL (def: false). Deploy on file change
                                  #Implies --hotswap-fallback by default
cdk watch ...                     #Same as deploy --watch ...
CONF.watch.include|exclude        #'GLOB'. Def: ./**
--logs                            #BOOL (def: true). Print CloudWatch Logs LLEVENTs from all RESOURCEs
                                  #Requires --watch
--hotswap                         #BOOL (def: false). Update RESOURCEs by making direct calls to SERVICEs instead of using CloudFormation
                                  #If some properties are not hotswappable, ignore them
                                  #Meant for development only
--hotswap-fallback                #BOOL (def: false). Same but if some properties are not hotswappable, do a normal deploy instead

--force|-f                        #BOOL. If false (def), fail if TEMPLATE did not change
--require-approval                #Whether to require manual approval for security-sensitive changes (e.g. IAM|STS-related):
                                  #  - 'never'
                                  #  - 'any-change': always
                                  #  - 'broadening' (def): only if add more permissions, not remove

cdk import [STACK]                #Do a CHANGESET import
--change-set-name
--rollback                        #Like cdk deploy
--execute                         #BOOL (def: true). Whether to call ExecuteChangeSet()
--force|-f                        #BOOL. If false (def), abort if some existing RESOURCEs are updated|deleted

--resource-mapping|-m             #'PATH' of RESOURCEs to import
                                  #Def: interactive prompt
--record-resource-mapping|-r      #'PATH' to write map of existing physical resources, instead of performing import, for --resource-mapping to use

cdk list|ls [STACK...]            #List all STACKs
--long|-l                         #BOOL (def: false). Print 'STACK', ACCOUNT_ID and REGION

cdk metadata [STACK]              #Print TEMPLATE.Metadata

cdk destroy [STACK...]            #Delete STACKs
--all                             #BOOL (def: false). All STACKs
--force|-f                        #BOOL. If false (def), confirm first

cdk diff [STACK...]               #Compare production STACK with local one
                                  #Not meant for drift, but for changes not committed yet
--template                        #Compare with 'TEMPLATE_PATH' instead of production STACK
--context-lines                   #NUM (def: 3) of context  files
--fail                            #BOOL (def: false). Exit code 1 if any difference
--quiet|-q                        #BOOL (def: false). No output if no diff
--security-only                   #BOOL (def: false). Only show security-sensitive changes that add more permissions
--processed                       #BOOL (def: false). Apply MACROs processing first

cdk docs                          #Open CDK docs
--browser|-b                      #'COMMAND' (def: 'xdg-open %u') to open the browser
                                  #Can use %u for the file to open

cdk doctor                        #Check your set-up for potential problems


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONTEXT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk --context|-c                  #OBJ. Set CONTEXT. Key is '[STACK:]KEY' (def: all STACKs)
--lookups                         #BOOL (def: true). Perform CONTEXT lookups
                                  #`cdk synth` fails if this is disabled and context lookups need to be performed

cdk context                       #Cached CONTEXT
--clear                           #BOOL (def: false). Delete whole cache
--reset|-e                        #'VAR' to delete from cache
--force|-f                        #BOOL (def: false). Do not fail if 'VAR' missing

CONTEXT                           #Data associated with NODEs

NODE.setContext('VAR', 'VAL')     #Inherited by children, which can override it
                                  #Should be set before adding children, since their constructor might check it
NODE.getContext('VAR')->'VAL'     #Throw if not found
NODE.tryGetContext('VAR')->'VAL'  #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSTRUCT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #Npm package (version 10.3.0)

CONSTRUCT                         #RESOURCE or group of RESOURCEs
                                  #Can be:
                                  #  - l1: 1-1 correspondence to a CloudFormation RESOURCE
                                  #  - l2: higher-level, group of RESOURCEs
                                  #  - l3: "pattern", group of l2s
                                  #The parent|child relationship of those groups form a "scope tree"
                                  #  - different from "dependencies tree", which express execution order

this                              #Root CONSTRUCT

new Construct
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #CONSTRUCT
Construct.isConstruct(VAL)->BOOL  #Like instanceof but cross-realm
CONSTRUCT.node                    #NODE

NODE.id                           #'CONSTRUCT'
                                  #/ are converted to --
                                  #undefined if root
NODE.addr                         #STR. NODE.id of current NODE + its parents, excluding ones with id 'Default'
                                  #Is hex SHA1 hash, starting with 'c8'
NODE.path                         #STR. NODE.id of parents + current NODE, /-separated
                                  #undefined if root
CONSTRUCT.toString()->STR         #Same except '<root>' if root

NODE.scope                        #Current CONSTRUCT
                                  #undefined for root
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Default' or 'Resource'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')    #Among direct children
 ->CONSTRUCT                      #undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)

NODE.addValidation(OBJ)
OBJ.validate()->'ERROR'_ARR       #Add validate() FUNC, which checks whether NODE is valid
NODE.validate()->'ERROR'_ARR      #Call and concatenate all validate() FUNCs of this NODE
                                  #Called by `cdk synth`

NODE.metadata                     #METADATA_ARR. Associated metadata
NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a METADATA
METADATA.type                     #'VAR'
METADATA.data                     #VAL
METADATA.trace                    #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets METADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start METADATA.trace from

DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set dependencies
NODE.addDependency(DEPENDABLE...) #Add dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RESOLVE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{VAL}                             #RESOLVABLE. Deferred value

Tokenization.resolve              #Resolve all RESOLVABLEs in VAL, deeply
 (VAL, OPTS)->VAL                 #TOKENs are first decoded
                                  #  - including inside 'TOKENS'
                                  #VAL cannot be a FUNC|CONSTRUCT
                                  #Called by `cdk synth`
OPTS.scope
OPTS.preparing                    #Passed to PRODUCER's OBJ.*
OPTS.removeEmpty                  #BOOL (def: true). Remove empty values in OBJ|ARR
OPTS.resolver                     #Must be `new DefaultTokenResolver(new StringConcat())`

Lazy.any(PRODUCER[, OPTS])
 ->RESOLVABLE                     #OPTS: omitEmptyArray BOOL (def: false): transform resolved empty ARRs to undefined
Lazy.string(PRODUCER[, OPTS])
 ->STR_TOKEN                      #
Lazy.list(PRODUCER[, OPTS])
 ->ARR_TOKEN                      #OPTS: omitEmpty (same as Lazy.any())
Lazy.number(PRODUCER)->NUM_TOKEN  #
Lazy.uncached*(...)->TOKEN        #Unless using this, all of the above memoize PRODUCER.produce()
JsonNull                          #RESOLVABLE that resolves to null

Token.asAny(VAL)->RESOLVABLE      #Turn VAL into RESOLVABLE (unless already one)
                                  #If VAL is TOKEN, return its RESOLVABLE as is
Token.as*(...)[->RESOLVABLE]      #Unlike Lazy.*(...), create RESOLVABLE from a direct VAL, not deferred

PRODUCER.produce(OBJ)->VAL        #RESOLVABLE's deferred FUNC
                                  #Called by Tokenization.resolve()
OBJ.scope                         #CONSTRUCT
OBJ.documentPath                  #'PROP'_ARR. Property path within CONSTRUCT
OBJ.preparing                     #BOOL (def: false). Whether final output, or only preparing it
OBJ.registerPostProcessor
 (FUNC(VAL, RCONTEXT)->VAL)       #Transform VAL, once resolved
OBJ.resolve(VAL[, OPTS])->VAL     #Reference to Tokenization.resolve(), to resolve a child value
                                  #OPTS is only: removeEmpty BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TOKEN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOKEN                             #*_TOKEN. Encode RESOLVABLE to a smaller serializable type
                                  #Stores it in a global MAP, then returns a key to it

STR_TOKEN                         #'${Token[STR.NUM]}'
                                  #NUM is global increment
                                  #STR can be set using OPTS.displayHint
                                  #  - non-[[:alnum:]._-:] converted to `.`
                                  #  - def: 'TOKEN'
Token.asString
 (VAL[, OPTS])->STR_TOKEN         #Noop if VAL is STR
Tokenization
 .reverseCompleteString(STR_TOKEN)
 [->RESOLVABLE]                   #undefined if not STR_TOKEN

ARR_TOKEN                         #ARR with single element '#{TOKEN[STR.NUM]}', similar to STR_TOKEN
Token.asList
 (VAL[, OPTS])->ARR_TOKEN         #Noop if VAL is STR_ARR
Tokenization.reverseList
 (ARR_TOKEN)[->RESOLVABLE]        #undefined if not ARR_TOKEN

NUM_TOKEN                         #NUM. Exponent e+289 is used as a marker, integer part is global increment
                                  #Can be decoded either as NUM or as 'NUM'
Token.asNumber(VAL)->NUM_TOKEN    #Noop if VAL is NUM
Tokenization.reverseNumber
 (NUM_TOKEN)[->RESOLVABLE]        #undefined if not NUM_TOKEN
Tokenization.stringifyNumber
 (NUM[_TOKEN])->STR[_TOKEN]       #

Token.reverse                     #If VAL is:
 (VAL[, OPTS])[->RESOLVABLE]      #  - TOKEN: turn it into RESOLVABLE
                                  #  - RESOLVABLE: return as is
                                  #  - otherwise: undefined
                                  #If OPTS.failConcat false (def: true), can pass 'TOKENS'
                                  #  - only the first TOKEN is turned into RESOLVABLE

Tokenization
 .isResolvable(VAL)->BOOL         #Whether is a RESOLVABLE
Token.isUnresolved(VAL)->BOOL     #Whether is a RESOLVABLE|TOKEN|'TOKENS'
Token.compareStrings              #Returns ENUM TokenComparison:
 (STR, STR2)->ENUM                #  - BOTH_UNRESOLVED|ONE_UNRESOLVED: if both|either is RESOLVABLE|TOKEN|'TOKENS'
                                  #  - DIFFERENT|SAME: otherwise, using ===

'TOKENS'                          #STR that can contain STR_TOKEN|NUM_TOKEN (not ARR_TOKEN)
TOKEN_FRAG                        #Concatenation of VALs and RESOLVABLEs
TOKEN_FRAG.addLiteral(VAL)        #Add VAL item
TOKEN_FRAG.addToken(RESOLVABLE)   #Add RESOLVABLE item
TOKEN_FRAG.length                 #NUM of items
TOKEN_FRAG.firstValue             #First item. undefined if none
                                  #If RESOLVABLE, returned as STR_TOKEN
TOKEN_FRAG.firstToken             #First RESOLVABLE item. undefined if none
TOKEN_FRAG.tokens                 #All RESOLVABLE items, as ARR
TOKEN_FRAG.mapTokens({ mapToken })
 ->TOKEN_FRAG2                    #Apply mapToken(RESOLVABLE)->RESOLVABLE|VAL on each RESOLVABLE item
TOKEN_FRAG.join({ join })->VAL    #Reduce all items to a single one using join(VAL2, VAL3)->VAL
                                  #RESOLVABLE items are passed as STR_TOKENs
                                  #If 0 items, call once with 2 undefined values
                                  #If 1 item, returned as is
                                  #`new StringConcat()` can be used as join FUNC, to return 'TOKENS'
Tokenization.reverseString
 ('TOKENS')->TOKEN_FRAG           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Tags.of(CONSTRUCT)->CTAGS         #
CTAGS.add('KEY', 'VAL'[, TOPTS])
CTAGS.remove('KEY', [, TOPTS])    #Applied during `cdk synth` (using ASPECTS)

CONSTRUCT.tags|cdkTagManager
TagManager.of(CONSTRUCT)->CTAGM   #CTAGM. Only when RESOURCE has TAGS
TagManager.isTaggable[V2]
 (CONSTRUCT)->BOOL                #Whether has CRESOURCE.tags|cdkTagManager

new TagManager(TAGTYPE_ENUM,      #CTAGM. RESPROP Tags
 'RESTYPE'[, TAGS_OBJ[, OPTS]])   #Used by CTAGS under the hood
                                  #TAGS_OBJ is renderTags()'s value

CTAGM.setTag('TAG', 'VAL')        #
CTAGM.removeTag('TAG')            #
CTAGM.tagValues()->TAGS_OBJ       #
CTAGM.hasTags()->BOOL             #

TOPTS.priority                    #NUM is merging priority when setting|removing 2 TAGs with same name
CTAGM.setTag(...[, NUM])          #Def:
CTAGM.removeTag(..., NUM)         #  - setTag|removeTag(): 0
                                  #  - renderTags()'s TAGS_OBJ: 50
                                  #  - Tag TOPTS.priority: 100
                                  #  - RemoveTag TOPTS.priority: 200

OPTS.renderedTags                 #{TAGS_FOBJ}
CTAGM.renderTags                  #TAGS_OBJ (def: {}) are merged in
 ([TAGS_OBJ])->TAGS_FOBJ          #undefined if empty
TAGS_FOBJ                         #TAGS in the format expected by CloudFormation, according to TagType
TagType ENUM                      #Shape of TAGS, which differs per SERVICE
TagType MAP                       #TAGS_OBJ, i.e. { KEY: value, ... }
TagType KEY_VALUE                 #[{ Key, Value },...]
                                  #As input, must be lowercase'd
TagType STANDARD                  #[{ key, value },...]
                                  #Can also include any OBJ ("dynamic TAGs"), which are kept as is
TagType AUTOSCALING_GROUP         #Like STANDARD, but OBJ can also have propagateAtLaunch BOOL (def: false)
                                  #  - set as CTAGM.setTag(..., BOOL) or TOPTS.applyToLaunchedInstances
TagType NOT_TAGGABLE              #Always empty []

OPTS.tagPropertyName              #'RESPROP' (def: 'tags')
TOPTS.includeResourceTypes        #'RESTYPE'_ARR. Do not CTAGM.setTag() unless its 'RESTYPE' matches
TOPTS.excludeResourceTypes        #'RESTYPE'_ARR. Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CRESOURCE                         #RCONSTRUCT of l1

CRESOURCE.env                     #CENV
CENV.region                       #'REGION' (def: 'AWS::REGION')
CENV.account                      #'ACCOUNT_ID' (def: 'AWS::ACCOUNT_ID')

CRESOURCE.applyRemovalPolicy(ENUM)#ENUM is RemovalPolicy. RESOURCE.DeletionPolicy
RPROPS.removalPolicy              #Available for some CRESOURCEs, usually when default is 'Retain' (instead of 'Delete')

CRESOURCE.stack                   #CSTACK

new Stack(PARENT_CONSTRUCT,
 'STACK'[, RESPROPS])             #CSTACK

new RCONSTRUCT(PARENT_CONSTRUCT,
 'RCONSTRUCT'[, RESPROPS])        #
RCONSTRUCT.RESPROP                #VAL
RCONSTRUCT.attrRESATTR            #VAL

Aspects.of(CONSTRUCT)->ASPECTS    #
ASPECTS.add(ASPECT)               #
ASPECTS.all()->ASPECT_ARR         #
ASPECT.visit(CONSTRUCT)           #FUNC to call on CONSTRUCT during `cdk synth`

ENVVAR CDK_DEBUG=true             #Debug logging
