
       
   CDK  
       



TODO:
  - https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html
  - https://docs.aws.amazon.com/cdk/v2/guide/cli.html
  - https://cdkworkshop.com/
  - https://docs.aws.amazon.com/cdk/v2/guide/home.html
  - https://github.com/aws/aws-cdk
  - https://constructs.dev/
  - https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript
  - https://github.com/Sceptre/sceptre-cdk-handler
  - https://cdk.dev/resources
  - https://github.com/kalaiser/awesome-cdk
  - check currently documented SERVICEs, with the list of aws_general doc

require('aws-cdk-lib/SERVICE')    #SLIB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK                             #'STACK'|STACK_MID
                                  #If single one, defaults to it

cdk synth|deploy|destroy|diff
--exclusively|-e                  #BOOL (def: false). Do not include dependent STACKs

cdk                               #CLI. Package `aws-cdk` (version 2.100.0)
                                  #TypeScript/Python/Java/Go/.NET

CONFIG                            #Either (in priority order):
                                  #  - CLI flags
                                  #  - ./cdk.json
                                  #  - ~/.cdk.json

cdk init [TEMPLATE]               #Create a new, empty CDK project from a template.
--language|-l                     #The language to be used for the new project (default can be configured in ~/.cdk.json) [string] [choices: "csharp", "fsharp", "go", "java", "javascript", "python", "typescript"]
--list                            #List the available templates                [boolean]
--generate-only                   #If true, only generates project files, without executing additional operations such as setting up a git repo, installing dependencies or compiling the project                    [boolean] [default: false]

cdk synthesize|synth [STACK...]   #Synthesizes and prints the CloudFormation template for this stack
--validation                      #After synthesis, validate stacks with the "validateOnSynth" attribute set (can also be controlled with CDK_VALIDATION) [boolean] [default: true]
--quiet|-q                        #Do not output CloudFormation Template to stdout [boolean] [default: false]

cdk bootstrap [ENVIRONMENTS...]   #Deploys the CDK toolkit stack into an AWS environment
--execute
--toolkit-stack-name              #Like cdk import
--previous-parameters             #Like cdk deploy
--bootstrap-bucket-name|-b
--toolkit-bucket-name             #The name of the CDK toolkit bucket; bucket will be created and must not exist                       [string]
--bootstrap-kms-key-id            #AWS KMS master key ID used for the SSE-KMS encryption          [string]
--bootstrap-customer-key          #Create a Customer Master Key (CMK) for the bootstrap bucket (you will be charged but can customize permissions, modern bootstrapping only)                      [boolean]
--qualifier                       #String which must be unique for each bootstrap stack. You must configure it on your CDK app if you change this from the default.      [string]
--public-access-block
 -configuration                   #Block public access configuration on CDK toolkit bucket (enabled by default)                   [boolean]
--tags|-t                         #Tags to add for the stack (KEY=VALUE)    [array] [default: []]
--trust                           #The AWS account IDs that should be trusted to perform deployments into this environment (may be repeated, modern bootstrapping only) [array] [default: []]
--trust-for-lookup                #The AWS account IDs that should be trusted to look up values in this environment (may be repeated, modern bootstrapping only) [array] [default: []]
--cloudformation-execution
 -policies                        #The Managed Policy ARNs that should be attached to the role performing deployments into this environment (may be repeated, modern bootstrapping only) [array] [default: []]
--force|-f                        #Always bootstrap even if it would downgrade template version [boolean] [default: false]
--termination-protection          #Toggle CloudFormation termination protection on the bootstrap stacks [boolean]
--show-template                   #Instead of actual bootstrapping, print the current CLI's bootstrapping template to stdout for customization [boolean] [default: false]
--template                        #Use the template from the given file instead of the built-in one (use --show-template to obtain an example)                    [string]

cdk deploy [STACK...]             #Deploys the stack(s) named STACKS into your AWS account
--toolkit-stack-name              #The name of the existing CDK toolkit stack (only used for app using legacy synthesis)       [string]
--change-set-name                 #Name of the CloudFormation change set to create (only if method is not direct)             [string]
--rollback                        #Rollback stack to stable state on failure. Defaults to 'true', iterate more rapidly with --no-rollback or -R. Note: do **not** disable this flag for deployments with resource replacements, as that will always fail                          [boolean]
--all                             #Deploy all available stacks [boolean] [default: false]
--build-exclude|-E                #Do not rebuild asset with the given ID. Can be specified multiple times      [array] [default: []]
--require-approval                #What security-sensitive changes need manual approval [string] [choices: "never", "any-change", "broadening"]
--notification-arns               #ARNs of SNS topics that CloudFormation will notify with stack related events                   [array]
--method|-m                       #How to perform the deployment. Direct is a bit faster but lacks progress information [string] [choices: "direct", "change-set", "prepare-change-set"]
--force|-f                        #Always deploy stack even if templates are identical [boolean] [default: false]
--parameters                      #Additional parameters passed to CloudFormation at deploy time (STACK:KEY=VALUE) [array] [default: {}]
--outputs-file|-O                 #Path to file where stack outputs will be written as JSON                                       [string]
--previous-parameters             #Use previous values for existing parameters (you must specify all parameters on every deployment if this is disabled) [boolean] [default: true]
--progress                        #Display mode for stack activity events [string] [choices: "bar", "events"]
--hotswap                         #Attempts to perform a 'hotswap' deployment, but does not fall back to a full deployment if that is not possible. Instead, changes to any non-hotswappable properties are ignored.Do not use this in production environments           [boolean]
--hotswap-fallback                #Attempts to perform a 'hotswap' deployment, which skips CloudFormation and updates the resources directly, and falls back to a full deployment if that is not possible. Do not use this in production environments                              [boolean]
--watch                           #Continuously observe the project files, and deploy the given stack(s) automatically when changes are detected. Implies --hotswap by default    [boolean]
cdk watch ...                     ##Same as deploy --watch ...
--logs                            #Show CloudWatch log events from all resources in the selected Stacks in the terminal. 'true' by default, use --no-logs to turn off. Only in effect if specified alongside the '--watch' option [boolean] [default: true]
--concurrency                     #Maximum number of simultaneous deployments (dependency permitting) to execute.  [number] [default: 1]
--asset-parallelism               #Whether to build/publish assets in parallel [boolean]
--asset-prebuild                  #Whether to build all assets before deploying the first stack (useful for failing Docker builds) [boolean] [default: true]

cdk import [STACK]                #Import existing resource(s) into the given STACK
--change-set-name
--rollback                        #Like cdk deploy
--toolkit-stack-name              #The name of the CDK toolkit stack to create                      [string]
--execute                         #Whether to execute ChangeSet (--no-execute will NOT execute the ChangeSet) [boolean] [default: true]
--force|-f                        #Do not abort if the template diff includes updates or deletes. This is probably safe but we're not sure, let us know how it goes.  [boolean]
--record-resource-mapping|-r      #If specified, CDK will generate a mapping of existing physical resources to CDK resources to be imported as. The mapping will be written in the given file path. No actual import operation will be performed                      [string]
--resource-mapping|-m             #If specified, CDK will use the given file to map physical resources to CDK resources for import, instead of interactively asking the user. Can be run from scripts          [string]

cdk list|ls [STACK...]            #Lists all stacks in the app
--long|-l                         #Display environment information for each stack [boolean] [default: false]

cdk metadata [STACK]              #Returns all metadata associated with this stack

cdk destroy [STACK...]            #Destroy the stack(s) named STACKS
--all                             #Destroy all available stacks [boolean] [default: false]
--force|-f                        #Do not ask for confirmation before destroying the stacks                                      [boolean]

cdk diff [STACK...]               #Compares the specified stack with the deployed stack or a local template file, and returns with status 1 if any difference is found
--context-lines                   #Number of context lines to include in arbitrary JSON diff rendering                  [number] [default: 3]
--template                        #The path to the CloudFormation template to compare with                                         [string]
--security-only                   #Only diff for broadened security changes [boolean] [default: false]
--fail                            #Fail with exit code 1 in case of diff       [boolean]
--processed                       #Whether to compare against the template with Transforms already processed [boolean] [default: false]
--quiet|-q                        #Do not print stack name and default message when there is no diff to stdout [boolean] [default: false]

cdk notices                       #Returns a list of relevant notices
cdk acknowledge|ack [ID]          #Acknowledge a notice so that it does not show up anymore

cdk context                       #Manage cached context values
--reset|-e                        #The context key (or its index) to reset      [string]
--force|-f                        #Ignore missing key error   [boolean] [default: false]
--clear                           #Clear all context                           [boolean]

cdk docs|doc                      #Opens the reference documentation in a browser
--browser|-b                      #The command to use to open the browser, using %u as a placeholder for the path of the file to open [string] [default: "xdg-open %u"]

cdk doctor                        #Check your set-up for potential problems

cdk ...
--app|-a                          #STR. REQUIRED WHEN RUNNING APP: command-line for executing your app or a cloud assembly directory (e.g. "node bin/my-app.js").
                                  #Can also be specified in cdk.json or ~/.cdk.json
--build                           #STR. Command-line for a pre-synth build
--context|-c                      #ARR. Add contextual string parameter (KEY=VALUE)
--plugin|-p                       #ARR. Name or path of a node package that extend the CDK features.
                                  #Can be specified multiple times
--trace                           #BOOL (def: false). Print trace for stack warnings
--strict                          #BOOL (def: false). Do not construct stacks with warnings
--lookups                         #BOOL (def: true). Perform context lookups (synthesis fails if this is disabled and context lookups need to be performed)
--ignore-errors                   #BOOL (def: false). Ignores synthesis errors, which will likely produce an invalid output
--json|-j                         #BOOL (def: false). Use JSON output instead of YAML when templates are printed to STDOUT
--verbose|-v                      #COUNT. Show debug logs (specify multiple times to increase verbosity)
--debug                           #BOOL (def: false). Enable emission of additional debugging information, such as creation stack traces of tokens
--profile                         #STR. Use the indicated AWS profile as the default environment
--proxy                           #STR. Use the indicated proxy.
                                  #Will read from HTTPS_PROXY environment variable if not specified
--ca-bundle-path                  #STR. Path to CA certificate to use when validating HTTPS requests.
                                  #Will read from AWS_CA_BUNDLE environment variable if not specified
--ec2creds|-i                     #BOOL (def: false). Force trying to fetch EC2 instance credentials.
                                  #Default: guess EC2 instance status
--version-reporting               #BOOL (def: true). Include the "AWS::CDK::Metadata" resource in synthesized templates
--path-metadata                   #BOOL (def: true). Include "aws:cdk:path" CloudFormation metadata for each resource
--asset-metadata                  #BOOL (def: true). Include "aws:asset:*" CloudFormation metadata for resources that uses assets
--role-arn|-r                     #STR. ARN of Role to use when invoking CloudFormation
--staging                         #BOOL (def: true). Copy assets to the output directory
                                  #Use --no-staging to disable the copy of assets which allows local debugging via the SAM CLI to reference the original source files
--output|-o                       #STR (def: 'cdk.out'). Emits the synthesized cloud assembly into a directory (default: cdk.out)
--notices                         #BOOL (def: false). Show relevant notices
--no-color                        #BOOL (def: false). Removes colors and other style from console output
--ci                              #BOOL (def: false). Force CI detection. If CI=true then logs will be sent to stdout instead of stderr


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSTRUCT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #Npm package (version 10.3.0)

CONSTRUCT                         #RESOURCE or group of RESOURCEs
                                  #Can be:
                                  #  - l1: 1-1 correspondence to a CloudFormation RESOURCE
                                  #  - l2: higher-level, group of RESOURCEs
                                  #  - l3: "pattern", group of l2s
                                  #The parent|child relationship of those groups form a "scope tree"
                                  #  - different from "dependencies tree", which express execution order

this                              #Root CONSTRUCT

new Construct
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #CONSTRUCT
Construct.isConstruct(VAL)->BOOL  #Like instanceof but cross-realm
CONSTRUCT.node                    #NODE

NODE.id                           #'CONSTRUCT'
                                  #/ are converted to --
                                  #undefined if root
NODE.addr                         #STR. NODE.id of current NODE + its parents, excluding ones with id 'Default'
                                  #Is hex SHA1 hash, starting with 'c8'
NODE.path                         #STR. NODE.id of parents + current NODE, /-separated
                                  #undefined if root
CONSTRUCT.toString()->STR         #Same except '<root>' if root

NODE.scope                        #Current CONSTRUCT
                                  #undefined for root
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Default' or 'Resource'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')    #Among direct children
 ->CONSTRUCT                      #undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)

NODE.addValidation(OBJ)
OBJ.validate()->'ERROR'_ARR       #Add validate() FUNC, which checks whether NODE is valid
NODE.validate()->'ERROR'_ARR      #Call and concatenate all validate() FUNCs of this NODE
                                  #Called by `cdk synth`

NODE.setContext('CVAR', 'VAL')    #Associated data
                                  #Inherited by children, which can override it
                                  #Should be set before adding children, since their constructor might check it
NODE.getContext('CVAR')->'VAL'    #Throw if not found
NODE.tryGetContext('CVAR')->'VAL' #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged

NODE.metadata                     #METADATA_ARR. Associated metadata
NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a METADATA
METADATA.type                     #'VAR'
METADATA.data                     #VAL
METADATA.trace                    #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets METADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start METADATA.trace from

DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set dependencies
NODE.addDependency(DEPENDABLE...) #Add dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RESOLVE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{VAL}                             #RESOLVABLE. Deferred value

Tokenization.resolve              #Resolve all RESOLVABLEs in VAL, deeply
 (VAL, OPTS)->VAL                 #TOKENs are first decoded
                                  #  - including inside 'TOKENS'
                                  #VAL cannot be a FUNC|CONSTRUCT
                                  #Called by `cdk synth`
OPTS.scope
OPTS.preparing                    #Passed to PRODUCER's OBJ.*
OPTS.removeEmpty                  #BOOL (def: true). Remove empty values in OBJ|ARR
OPTS.resolver                     #Must be `new DefaultTokenResolver(new StringConcat())`

Lazy.any(PRODUCER[, OPTS])
 ->RESOLVABLE                     #OPTS: omitEmptyArray BOOL (def: false): transform resolved empty ARRs to undefined
Lazy.string(PRODUCER[, OPTS])
 ->STR_TOKEN                      #
Lazy.list(PRODUCER[, OPTS])
 ->ARR_TOKEN                      #OPTS: omitEmpty (same as Lazy.any())
Lazy.number(PRODUCER)->NUM_TOKEN  #
Lazy.uncached*(...)->TOKEN        #Unless using this, all of the above memoize PRODUCER.produce()
JsonNull                          #RESOLVABLE that resolves to null

Token.asAny(VAL)->RESOLVABLE      #Turn VAL into RESOLVABLE (unless already one)
                                  #If VAL is TOKEN, return its RESOLVABLE as is
Token.as*(...)[->RESOLVABLE]      #Unlike Lazy.*(...), create RESOLVABLE from a direct VAL, not deferred

PRODUCER.produce(OBJ)->VAL        #RESOLVABLE's deferred FUNC
                                  #Called by Tokenization.resolve()
OBJ.scope                         #CONSTRUCT
OBJ.documentPath                  #'PROP'_ARR. Property path within CONSTRUCT
OBJ.preparing                     #BOOL (def: false). Whether final output, or only preparing it
OBJ.registerPostProcessor
 (FUNC(VAL, RCONTEXT)->VAL)       #Transform VAL, once resolved
OBJ.resolve(VAL[, OPTS])->VAL     #Reference to Tokenization.resolve(), to resolve a child value
                                  #OPTS is only: removeEmpty BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TOKEN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOKEN                             #*_TOKEN. Encode RESOLVABLE to a smaller serializable type
                                  #Stores it in a global MAP, then returns a key to it

STR_TOKEN                         #'${Token[STR.NUM]}'
                                  #NUM is global increment
                                  #STR can be set using OPTS.displayHint
                                  #  - non-[[:alnum:]._-:] converted to `.`
                                  #  - def: 'TOKEN'
Token.asString
 (VAL[, OPTS])->STR_TOKEN         #Noop if VAL is STR
Tokenization
 .reverseCompleteString(STR_TOKEN)
 [->RESOLVABLE]                   #undefined if not STR_TOKEN

ARR_TOKEN                         #ARR with single element '#{TOKEN[STR.NUM]}', similar to STR_TOKEN
Token.asList
 (VAL[, OPTS])->ARR_TOKEN         #Noop if VAL is STR_ARR
Tokenization.reverseList
 (ARR_TOKEN)[->RESOLVABLE]        #undefined if not ARR_TOKEN

NUM_TOKEN                         #NUM. Exponent e+289 is used as a marker, integer part is global increment
                                  #Can be decoded either as NUM or as 'NUM'
Token.asNumber(VAL)->NUM_TOKEN    #Noop if VAL is NUM
Tokenization.reverseNumber
 (NUM_TOKEN)[->RESOLVABLE]        #undefined if not NUM_TOKEN
Tokenization.stringifyNumber
 (NUM[_TOKEN])->STR[_TOKEN]       #

Token.reverse                     #If VAL is:
 (VAL[, OPTS])[->RESOLVABLE]      #  - TOKEN: turn it into RESOLVABLE
                                  #  - RESOLVABLE: return as is
                                  #  - otherwise: undefined
                                  #If OPTS.failConcat false (def: true), can pass 'TOKENS'
                                  #  - only the first TOKEN is turned into RESOLVABLE

Tokenization
 .isResolvable(VAL)->BOOL         #Whether is a RESOLVABLE
Token.isUnresolved(VAL)->BOOL     #Whether is a RESOLVABLE|TOKEN|'TOKENS'
Token.compareStrings              #Returns ENUM TokenComparison:
 (STR, STR2)->ENUM                #  - BOTH_UNRESOLVED|ONE_UNRESOLVED: if both|either is RESOLVABLE|TOKEN|'TOKENS'
                                  #  - DIFFERENT|SAME: otherwise, using ===

'TOKENS'                          #STR that can contain STR_TOKEN|NUM_TOKEN (not ARR_TOKEN)
TOKEN_FRAG                        #Concatenation of VALs and RESOLVABLEs
TOKEN_FRAG.addLiteral(VAL)        #Add VAL item
TOKEN_FRAG.addToken(RESOLVABLE)   #Add RESOLVABLE item
TOKEN_FRAG.length                 #NUM of items
TOKEN_FRAG.firstValue             #First item. undefined if none
                                  #If RESOLVABLE, returned as STR_TOKEN
TOKEN_FRAG.firstToken             #First RESOLVABLE item. undefined if none
TOKEN_FRAG.tokens                 #All RESOLVABLE items, as ARR
TOKEN_FRAG.mapTokens({ mapToken })
 ->TOKEN_FRAG2                    #Apply mapToken(RESOLVABLE)->RESOLVABLE|VAL on each RESOLVABLE item
TOKEN_FRAG.join({ join })->VAL    #Reduce all items to a single one using join(VAL2, VAL3)->VAL
                                  #RESOLVABLE items are passed as STR_TOKENs
                                  #If 0 items, call once with 2 undefined values
                                  #If 1 item, returned as is
                                  #`new StringConcat()` can be used as join FUNC, to return 'TOKENS'
Tokenization.reverseString
 ('TOKENS')->TOKEN_FRAG           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Tags.of(CONSTRUCT)->CTAGS         #
CTAGS.add('KEY', 'VAL'[, TOPTS])
CTAGS.remove('KEY', [, TOPTS])    #Applied during `cdk synth` (using ASPECTS)

CONSTRUCT.tags|cdkTagManager
TagManager.of(CONSTRUCT)->CTAGM   #CTAGM. Only when RESOURCE has TAGS
TagManager.isTaggable[V2]
 (CONSTRUCT)->BOOL                #Whether has CRESOURCE.tags|cdkTagManager

new TagManager(TAGTYPE_ENUM,      #CTAGM. RESPROP Tags
 'RESTYPE'[, TAGS_OBJ[, OPTS]])   #Used by CTAGS under the hood
                                  #TAGS_OBJ is renderTags()'s value

CTAGM.setTag('TAG', 'VAL')        #
CTAGM.removeTag('TAG')            #
CTAGM.tagValues()->TAGS_OBJ       #
CTAGM.hasTags()->BOOL             #

TOPTS.priority                    #NUM is merging priority when setting|removing 2 TAGs with same name
CTAGM.setTag(...[, NUM])          #Def:
CTAGM.removeTag(..., NUM)         #  - setTag|removeTag(): 0
                                  #  - renderTags()'s TAGS_OBJ: 50
                                  #  - Tag TOPTS.priority: 100
                                  #  - RemoveTag TOPTS.priority: 200

OPTS.renderedTags                 #{TAGS_FOBJ}
CTAGM.renderTags                  #TAGS_OBJ (def: {}) are merged in
 ([TAGS_OBJ])->TAGS_FOBJ          #undefined if empty
TAGS_FOBJ                         #TAGS in the format expected by CloudFormation, according to TagType
TagType ENUM                      #Shape of TAGS, which differs per SERVICE
TagType MAP                       #TAGS_OBJ, i.e. { KEY: value, ... }
TagType KEY_VALUE                 #[{ Key, Value },...]
                                  #As input, must be lowercase'd
TagType STANDARD                  #[{ key, value },...]
                                  #Can also include any OBJ ("dynamic TAGs"), which are kept as is
TagType AUTOSCALING_GROUP         #Like STANDARD, but OBJ can also have propagateAtLaunch BOOL (def: false)
                                  #  - set as CTAGM.setTag(..., BOOL) or TOPTS.applyToLaunchedInstances
TagType NOT_TAGGABLE              #Always empty []

OPTS.tagPropertyName              #'RESPROP' (def: 'tags')
TOPTS.includeResourceTypes        #'RESTYPE'_ARR. Do not CTAGM.setTag() unless its 'RESTYPE' matches
TOPTS.excludeResourceTypes        #'RESTYPE'_ARR. Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CRESOURCE                         #RCONSTRUCT of l1

CRESOURCE.env                     #CENV
CENV.region                       #'REGION' (def: 'AWS::REGION')
CENV.account                      #'ACCOUNT_ID' (def: 'AWS::ACCOUNT_ID')

CRESOURCE.applyRemovalPolicy(ENUM)#ENUM is RemovalPolicy. RESOURCE.DeletionPolicy
RPROPS.removalPolicy              #Available for some CRESOURCEs, usually when default is 'Retain' (instead of 'Delete')

CRESOURCE.stack                   #CSTACK

new Stack(PARENT_CONSTRUCT,
 'STACK'[, RESPROPS])             #CSTACK

new RCONSTRUCT(PARENT_CONSTRUCT,
 'RCONSTRUCT'[, RESPROPS])        #
RCONSTRUCT.RESPROP                #VAL
RCONSTRUCT.attrRESATTR            #VAL

Aspects.of(CONSTRUCT)->ASPECTS    #
ASPECTS.add(ASPECT)               #
ASPECTS.all()->ASPECT_ARR         #
ASPECT.visit(CONSTRUCT)           #FUNC to call on CONSTRUCT during `cdk synth`

ENVVAR CDK_DEBUG=true             #Debug logging
