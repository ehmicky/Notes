
       
   CDK  
       



TODO:
  - https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html
  - https://docs.aws.amazon.com/cdk/v2/guide/cli.html
  - https://cdkworkshop.com/
  - https://docs.aws.amazon.com/cdk/v2/guide/home.html
  - https://github.com/aws/aws-cdk
  - https://constructs.dev/
  - https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript
  - https://github.com/Sceptre/sceptre-cdk-handler
  - https://cdk.dev/resources
  - https://github.com/kalaiser/awesome-cdk
  - check currently documented SERVICEs, with the list of aws_general doc

require('aws-cdk-lib/SERVICE')    #SLIB

{TYPE}                            #RESOLVABLE

new RCONSTRUCT(PARENT_CONSTRUCT,
 'RCONSTRUCT'[, RESPROPS])        #
RCONSTRUCT.RESPROP                #VAL
RCONSTRUCT.attrRESATTR            #VAL

CRESOURCE                         #RCONSTRUCT of l1

CRESOURCE.env                     #CENV
CENV.region                       #'REGION'
CENV.account                      #'ACCOUNT_ID'

CRESOURCE.applyRemovalPolicy(ENUM)#ENUM is RemovalPolicy. RESOURCE.DeletionPolicy
RPROPS.removalPolicy              #Available for some CRESOURCEs, usually when default is 'Retain' (instead of 'Delete')

CRESOURCE.tags                    #CTAGS. RESOURCE.Tags, when available
new TagManager                    #CTAGS
 (ENUM, 'RESTYPE'[, OBJ[, OPTS]]) #OBJ is initial TAGs
                                  #ENUM is one of:
                                  #  - STANDARD
                                  #  - MAP
                                  #  - KEY_VALUE
                                  #  - AUTOSCALING_GROUP
                                  #  - NOT_TAGGABLE
OPTS.tagPropertyName              #'PROP' (def: 'tags') on RESOURCE.*
OPTS.renderedTags                 #{OBJ} with final TAGs

CRESOURCE.stack                   #CSTACK

new Stack(PARENT_CONSTRUCT,
 'STACK'[, RESPROPS])             #CSTACK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSTRUCT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #Npm package (version 10.3.0)

CONSTRUCT                         #RESOURCE or group of RESOURCEs
                                  #Can be:
                                  #  - l1: 1-1 correspondence to a CloudFormation RESOURCE
                                  #  - l2: higher-level, group of RESOURCEs
                                  #  - l3: "pattern", group of l2s
                                  #The parent|child relationship of those groups form a "scope tree"
                                  #  - different from "dependencies tree", which express execution order

this                              #Root CONSTRUCT

new Construct
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #CONSTRUCT
Construct.isConstruct(VAL)->BOOL  #Like instanceof but cross-realm
CONSTRUCT.node                    #NODE

NODE.id                           #'CONSTRUCT'
                                  #/ are converted to --
                                  #undefined if root
NODE.addr                         #STR. NODE.id of current NODE + its parents, excluding ones with id 'Default'
                                  #Is hex SHA1 hash, starting with 'c8'
NODE.path                         #STR. NODE.id of parents + current NODE, /-separated
                                  #undefined if root
CONSTRUCT.toString()->STR         #Same except '<root>' if root

NODE.scope                        #Current CONSTRUCT
                                  #undefined for root
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Default' or 'Resource'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')    #Among direct children
 ->CONSTRUCT                      #undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)

NODE.addValidation(OBJ)
OBJ.validate()->'ERROR'_ARR       #Add validate() FUNC, which checks whether NODE is valid
NODE.validate()->'ERROR'_ARR      #Call and concatenate all validate() FUNCs of this NODE
                                  #Called by `cdk synth`

NODE.setContext('CVAR', 'VAL')    #Associated data
                                  #Inherited by children, which can override it
                                  #Should be set before adding children, since their constructor might check it
NODE.getContext('CVAR')->'VAL'    #Throw if not found
NODE.tryGetContext('CVAR')->'VAL' #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged

NODE.metadata                     #METADATA_ARR. Associated metadata
NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a METADATA
METADATA.type                     #'VAR'
METADATA.data                     #VAL
METADATA.trace                    #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets METADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start METADATA.trace from

DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set dependencies
NODE.addDependency(DEPENDABLE...) #Add dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #
