
       
   CDK  
       



TODO:
  - SID: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/names.ts
  - TimeZone: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/time-zone.ts
  - Size: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/size.ts
  - SecretValue: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/secret-value.ts
  - custom-resource-provider:
     - https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/core/lib/custom-resource-provider
     - https://github.com/aws/aws-cdk/blob/22168b183417d446d6a5113cee569b4c814f10d8/packages/aws-cdk-lib/core/lib/private/refs.ts#L220
  - CfnJson: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/cfn-json.ts (already started)
  - CfnParse: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/core/lib/cfn-parse.ts
  - validation plugins: https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/core/lib/validation
  - https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib
  - https://github.com/aws/aws-cdk/tree/main/packages
  - https://github.com/aws/aws-cdk/tree/main/design
  - https://github.com/aws/aws-cdk/tree/main/docs
  - https://github.com/aws/aws-cdk/blob/main/packages/%40aws-cdk/cx-api/FEATURE_FLAGS.md
  - https://github.com/aws/aws-cdk
  - check all `???`
  - re-organize whole doc
  - https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html
  - https://docs.aws.amazon.com/cdk/v2/guide/home.html
     - stopped at "Concepts"
  - CDK pipelines
     - https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines.html
  - https://constructs.dev/
  - https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript
  - https://github.com/cdk-patterns/serverless
  - https://github.com/Sceptre/sceptre-cdk-handler
  - find interesting repos inside @aws-cdk monorepo
  - https://cdk.dev/resources
  - https://github.com/kalaiser/awesome-cdk
  - check currently documented SERVICEs, with the list of aws_general doc

TODO:
  - AWS CDK
  - AWS SAM
     - AWS::Serverless TRANSFORM:
        - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html
        - AWS::Serverless::* in https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/package.html
     - https://github.com/threadheap/serverless-ide-vscode
     - https://github.com/sceptre/sceptre-sam-handler
     - https://www.prisma.io/docs/guides/deployment/serverless/deploy-to-aws-lambda#loading-required-files
     - https://github.com/aws-actions/setup-sam
     - check difference with `serverless` framework
  - Application Composer
  - Cloud Control API

VERSION ==>                       #2.104.0
                                  #Monorepo, i.e. same for all packages

aws-cdk-lib                       #Programmatic library to use in programs
                                  #Includes both core and all SERVICEs
                                  #TypeScript/Python/Java/Go/.NET
require('aws-cdk-lib/aws-SERVICE')#Requiring a single SERVICE

@aws-cdk-lib/aws-SERVICE-alpha    #Library for alpha features not integrated yet to aws-cdk-lib/aws-SERVICE
                                  #Not documented
EXPORTED_VARBetaNUM               #Beta features are in aws-cdk-lib/aws-SERVICE, but the variable suffix is *BetaNUM
                                  #Not documented

JSII ==>                          #Underlying tool allowing cdk codebase to be coded only in TypeScript,
                                  #but built into multiple languages

CLASS.isCLASS(VAL)->BOOL          #Many CLASSes have this method, like `instanceof` but cross-realm
                                  #Not documented


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk                               #CLI. Package `aws-cdk`

CONFIG                            #Either (in priority order):
                                  #  - CLI flags
                                  #  - ./cdk.json
                                  #  - ~/.cdk.json
                                  #CLI flags:
                                  #  - ARR -> repeatable
                                  #  - OBJ -> VAR=VAL, repeatable
                                  #  - BOOL -> --FLAG=BOOL or --[no-]FLAG
                                  #cdk.json:
                                  #  - camelCase
                                  #  - paths are relative to file itself

STACKS                            #'STACK'
                                  #Can contain ? * ** (/-delimited)
                                  #If single one, defaults to it
                                  #"All STACKs" refers to the ones for the current CAPP

cdk --plugin|-p                   #'PATH|MODULE'_ARR to plugin

--json|-j                         #BOOL (def: false). Output as JSON instead of YAML (e.g. when printing TEMPLATEs on stdout)

--no-color                        #BOOL (def: false)
ENVVAR CI=true
--ci                              #BOOL (def: false). CI output.

--verbose|-v                      #BOOL_ARR. Verbose logs

--profile                         #'PROFILE' (see AWS config doc)
--role-arn|-r                     #ROLE_ARN making CloudFormation API calls
                                  #Def: use current PRINCIPAL

ENVVAR HTTPS_PROXY
--proxy                           #'URL'
ENVVAR AWS_CA_BUNDLE
--ca-bundle-path                  #'PATH' to CA certificates for HTTPS
--ec2creds|-i                     #BOOL (def: false). Fetch EC2 instance credentials instead of guessing EC2 instance status

cdk synth|deploy|destroy|diff
--exclusively|-e                  #BOOL. If false (def), include dependent STACKs and wait for them
                                  #Dependencies are based both on DEPENDABLEs and CONSTRUCT tree

cdk init [SCAFFOLDER]             #Scaffold files. SCAFFOLDER can be:
                                  #  - app: empty app
                                  #  - sample-app: example app with an SQS QUEUE and an SNS TOPIC
                                  #  - lib: CONSTRUCT library (only 'typescript')
--language|-l                     #Among: 'typescript', 'javascript', 'csharp', 'fsharp', 'go', 'java', 'python'
--generate-only                   #BOOL. If false (def), also setup git, install dependencies and build project
--list                            #BOOL (def: false). List available SCAFFOLDERs

cdk synth[esize] [STACKS...]      #Convert CDK files to an ASSEMBLY
--quiet|-q                        #BOOL. If false (def), print TEMPLATE to stdout too

cdk ...
--build                           #'COMMAND' run before `cdk synth` to build the main file
--app|-a                          #'COMMAND' run during `cdk synth` to execute the main file
                                  #E.g. with TypeScript: `ts-node PATH.ts`
                                  #I.e. this also decide on the CAPP being used
                                  #Can also be 'ASSEMBLY_PATH' directly, avoiding `cdk synth`
                                  #  - def for `cdk deploy|import|diff`

PARAM|COND                        #Usually not used, since can use imperative language instead

cdk deploy [STACKS...]            #Deploy STACKS
--all                             #BOOL (def: false). Deploy all STACKs

--method|-m                       #Deploy using:
                                  #  - 'direct': UpdateStack()
                                  #  - 'prepare-change-set': CreateChangeSet()
                                  #  - 'change-set': CreateChangeSet() + ExecuteChangeSet()
--change-set-name                 #'CHANGESET'
--rollback                        #BOOL (def: true). STACK|CHANGESET.DisableRollback false|true
                                  #Must not be false if some RESOURCEs are replaced

--parameters                      #OBJ. Key is '[STACK:]PARAM'. STACK|CHANGESET.Parameters
--previous-parameters             #BOOL (def: true). Re-use PARAMs from previous deploy, except ones overridden
--outputs-file|-O                 #'PATH.json' (def: stdout) to write STACK OUTPUTs to

--notification-arns               #SNS TOPIC_ARN_ARR. STACK|CHANGESET.NotificationARNs
--progress                        #How to display STACK EVENTs among:
                                  #  - 'bar' (def): not displayed
                                  #  - 'events': fully displayed

--concurrency                     #Max NUM (def: 1) on ongoing deploys

--asset-prebuild                  #BOOL (def: true). Build all assets before deploying the first stack (useful for failing Docker builds)
--build-exclude|-E                #STR_ARR. Do not rebuild asset with the given ID

--watch                           #BOOL (def: false). Deploy on file change
                                  #Implies --hotswap-fallback by default
cdk watch ...                     #Same as deploy --watch ...
CONF.watch.include|exclude        #'GLOB'. Def: ./**
--logs                            #BOOL (def: true). Print CloudWatch Logs LLEVENTs from all RESOURCEs
                                  #Requires --watch
--hotswap                         #BOOL (def: false). Update RESOURCEs by making direct calls to SERVICEs instead of using CloudFormation
                                  #If some properties are not hotswappable, ignore them
                                  #Only supports !Ref|GetAtt|ImportValue|Join|Select|Split|Sub
                                  #Meant for speed, for development only (since it introduces drift)
--hotswap-fallback                #BOOL (def: false). Same but if some properties are not hotswappable, do a normal deploy instead

--force|-f                        #BOOL. If false (def), fail if TEMPLATE did not change
--require-approval                #Whether to require manual approval for security-sensitive changes (e.g. IAM|STS-related):
                                  #  - 'never'
                                  #  - 'any-change': always
                                  #  - 'broadening' (def): only if add more permissions, not remove

cdk import [STACKS]               #Do a CHANGESET import
                                  #Does not work with nested STACKs
--change-set-name
--rollback                        #Like cdk deploy
--execute                         #BOOL (def: true). Whether to call ExecuteChangeSet()
--force|-f                        #BOOL. If false (def), abort if some existing RESOURCEs are updated|deleted

--resource-mapping|-m             #'PATH' of RESOURCEs to import
                                  #Def: interactive prompt
--record-resource-mapping|-r      #'PATH' to write map of existing physical resources, instead of performing import, for --resource-mapping to use

cdk list|ls [STACKS...]           #List all STACKs
--long|-l                         #BOOL (def: false). Print 'STACK', ACCOUNT_ID and REGION

cdk destroy [STACKS...]           #Delete STACKs
--all                             #BOOL (def: false). All STACKs
--force|-f                        #BOOL. If false (def), confirm first

cdk diff [STACKS...]              #Compare production STACK with local one
                                  #Not meant for drift, but for changes not committed yet
--template                        #Compare with 'TEMPLATE_PATH' instead of production STACK
--context-lines                   #NUM (def: 3) of context  files
--fail                            #BOOL (def: false). Exit code 1 if any difference
--quiet|-q                        #BOOL (def: false). No output if no diff
--security-only                   #BOOL (def: false). Only show security-sensitive changes that add more permissions
--processed                       #BOOL (def: false). Apply MACROs processing first

cdk docs                          #Open CDK docs
--browser|-b                      #'COMMAND' (def: 'xdg-open %u') to open the browser
                                  #Can use %u for the file to open

cdk doctor                        #Check your set-up for potential problems


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSTRUCT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #npm package (version 10.3.0)

new Construct                     #CONSTRUCT. Base class for most classes
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #Relationship with PARENT_CONSTRUCT form a "CONSTRUCT|scope tree"
                                  #  - different from "dependencies tree", which express execution order
                                  #Usually initialized within constructor of PARENT_CONSTRUCT, i.e. passes `this`
                                  #and parent is extending from its base class
                                  #Constructor has side-effect:
                                  #  - add to PARENT_CONSTRUCT, in CONSTRUCT tree
                                  #  - i.e. not always assigned to a variable
                                  #Root has PARENT_CONSTRUCT undefined and 'CONSTRUCT' empty STR
CONSTRUCT.node                    #NODE

NODE.id                           #'CONSTRUCT'
                                  #No / (converted to --)
                                  #undefined if root
NODE.addr                         #STR. NODE.id of current NODE + its parents, excluding ones with id 'Default'
                                  #Is hex SHA1 hash, starting with 'c8'
NODE.path                         #'NODE_PATH'. NODE.id of parents + current NODE, /-separated
                                  #undefined if root
CONSTRUCT.toString()->STR         #Same except '<root>' if root

NODE.scope                        #Current CONSTRUCT
                                  #undefined for root
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Default' or 'Resource'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')    #Among direct children
 ->CONSTRUCT                      #undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONTEXT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTEXT                           #Data associated with NODEs
                                  #Saved on filesystem at cdk.context.json

NODE.setContext('VAR', VAL)       #Inherited by child NODEs, which can override it
                                  #Should be set before adding child NODEs, since their constructor might check it
NODE.getContext('VAR')->VAL       #Throw if not found
NODE.tryGetContext('VAR')->VAL    #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged

AOPTS.context                     #{ VAR: VAL, ... } to set as CONTEXT on CAPP
ENVVAR CONTEXT_ENV                #Same as 'JSON_OBJ'
ENVVAR
 CONTEXT_OVERFLOW_LOCATION_ENV    #Same as 'PATH' to JSON file
cdk --context|-c                  #'[STACK:]VAR=VAL' (def: all STACKs)
AOPTS.postCliContext              #Like AOPTS.context, but has higher priority than all above

cdk context                       #Delete cdk.context.json
--clear                           #BOOL (def: false). Delete whole file
--reset|-e                        #Only delete 'VAR'
--force|-f                        #BOOL (def: false). Do not fail if 'VAR' missing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CONTEXT PROVIDER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


*.fromLookup                      #Most SERVICEs that use ContextProvider.getValue() do so inside this type of static method
 (CONSTRUCT, STR, ...)            #STR is a C[K]RESOURCE 'NAME'|MID. ... are additional options
 ->>C[K]RESOURCE                  #The method uses AWS API calls to retrieve the resource by id, then cache it on CONTEXT

cdk --no-lookups                  #Disables ContextProvider

ContextProvider.getValue          #Used by SERVICEs to compute a value then cache it on filesystem using CONTEXT
 (CONSTRUCT, OPTS)->{ value: VAL }#Value is computed on first call, using ContextProviderPlugin.getValue()
                                  #Value is cached on CONTEXT:
                                  #  - 'VAR' is 'SERVICE:VARR=VAL:...'
                                  #  - but documented here as OBJ (PCONTEXT.*)
OPTS.provider                     #'SERVICE'
OPTS.props.*                      #PCONTEXT.* OBJ (def: {})
OPTS.props.account|region         #Def: CSTACK.account|region, if OPTS.includeEnvironment true (def)
OPTS.dummyValue                   #Default VAL to use in next round
                                  #This is due to ContextProvider.getValue() being sync and ContextProviderPlugin.getValue() being async
                                  #The first round of `cdk synth` uses the dummyValue
                                  #Then the actual value is computed, and a new round of `cdk synth` is performed

ContextProviderPlugin
 .getValue(OPTS)->>VAL            #Defined by each SERVICE using PCONTEXT
this.aws                          #SDK_PROVIDER, used to make API calls
OPTS.*                            #PCONTEXT.*

OPTS.lookupRoleArn                #ROLE used by ContextProviderPlugin
DZOPTS
 .useLookupRoleForStackOperations #BOOL (def: true). If false, disables OPTS.lookupRoleArn, i.e. undefined
STACK_APROPS|STACK_CARTIFACT
 .lookupRole                      #LOOKUP_ROLE. OPTS.lookupRoleArn's value
DZOPTS.lookupRoleArn              #ROLE_ARN
LOOKUP_ROLE.arn                   #Def: ROLE BSTR 'cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}'
CSYNTH.lookupRole                 #Can be '': using CLI's credentials
LOOKUP_ROLE.assumeRoleExternalId
DZOPTS.lookupRoleExternalId       #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RESOLVE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RV                                #"Resolvable". Deferred value
                                  #Meant to represent RESATTRs, PARAMs, etc.

Tokenization.resolve              #Resolve all RVs in VAL, deeply
 (VAL, OPTS)->VAL                 #TKs are first decoded
                                  #  - including inside 'TOKENS'
                                  #VAL cannot be a FUNC|CONSTRUCT
                                  #Called by `cdk synth`
OPTS.scope
OPTS.preparing                    #Passed to PRODUCER's OBJ.*
OPTS.removeEmpty                  #BOOL (def: true). Remove empty values in OBJ|ARR
OPTS.resolver                     #Must be `new DefaultTokenResolver(new StringConcat())`

CSTACK.resolve(VAL)->VAL          #Same as Tokenization.resolve() with OPTS.scope CSTACK

Lazy.any(PRODUCER[, OPTS])->RV    #OPTS: omitEmptyArray BOOL (def: false): transform resolved empty ARRs to undefined
Lazy.string
 (PRODUCER[, OPTS])->STR_TK       #
Lazy.list
 (PRODUCER[, OPTS])->ARR_TK       #OPTS: omitEmpty (same as Lazy.any())
Lazy.number(PRODUCER)->NUM_TK     #
Lazy.uncached*(...)->TK           #Unless using this, all of the above memoize PRODUCER.produce()

JsonNull                          #RV that resolves to null

Token.asAny(VAL)->RV              #Turn VAL into RV (unless already one)
                                  #If VAL is TK, return its RV as is
Token.as*(...)->TK                #Turn VAL into TK

PRODUCER.produce(OBJ)->VAL        #RV's deferred FUNC
                                  #Called by Tokenization.resolve()
OBJ.scope                         #CONSTRUCT
OBJ.documentPath                  #'PROP'_ARR. Property path within CONSTRUCT
OBJ.preparing                     #BOOL (def: false). Whether final output, or only preparing it
OBJ.registerPostProcessor         #Transform VAL, once resolved
 (FUNC(VAL, OBJ)->VAL)            #OBJ is same as PRODUCER.produce()'s arg
OBJ.resolve(VAL[, OPTS])->VAL     #Reference to Tokenization.resolve(), to resolve a child value
                                  #OPTS is only: removeEmpty BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TOKEN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TK                                #*_TK. Encode RV to a smaller serializable type
                                  #Goal: allows concatenating it in 'TOKENS' string
                                  #Stores it in a global MAP, then returns a key to it

STR_TK                            #'${Token[STR.NUM]}'
                                  #NUM is global increment
                                  #STR can be set using OPTS.displayHint
                                  #  - non-[[:alnum:]._-:] converted to `.`
                                  #  - def: 'TOKEN'
Token.asString(VAL[,OPTS])->STR_TK#Noop if VAL is STR
Tokenization
 .reverseCompleteString(STR_TK)
 [->RV]                           #undefined if not STR_TK

ARR_TK                            #ARR with single element '#{TOKEN[STR.NUM]}', similar to STR_TK
Token.asList(VAL[, OPTS])->ARR_TK #Noop if VAL is STR_ARR
Tokenization
 .reverseList(ARR_TK)[->RV]       #undefined if not ARR_TK

NUM_TK                            #NUM. Exponent e+289 is used as a marker, integer part is global increment
                                  #Can be decoded either as NUM or as 'NUM'
Token.asNumber(VAL)->NUM_TK       #Noop if VAL is NUM
Tokenization
 .reverseNumber(NUM_TK)[->RV]     #undefined if not NUM_TK
Tokenization.stringifyNumber
 (NUM[_TK])->STR[_TK]             #

Tokenization.reverse              #If VAL is:
 (VAL[, OPTS])[->RV]              #  - TK: turn it into RV
                                  #  - RV: return as is
                                  #  - otherwise: undefined
                                  #If OPTS.failConcat false (def: true), can pass 'TOKENS'
                                  #  - only the first TK is turned into RV

Tokenization
 .isResolvable(VAL)->BOOL         #Whether is a RV
Token.isUnresolved(VAL)->BOOL     #Whether is a RV|TK|'TOKENS'
Token.compareStrings              #Returns ENUM TokenComparison:
 (STR, STR2)->ENUM                #  - BOTH_UNRESOLVED|ONE_UNRESOLVED: if both|either is RV|TK|'TOKENS'
                                  #  - DIFFERENT|SAME: otherwise, using ===

'TOKENS'                          #STR that can contain multiple STR_TK|NUM_TK (not ARR_TK)
                                  #Automatically converted to { Fn::Join }, if necessary
Tokenization.reverseString
 ('TOKENS')->TOKEN_FRAG           #
TOKEN_FRAG                        #Concatenation of VALs and RVs
TOKEN_FRAG.addLiteral(VAL)        #Add VAL item
TOKEN_FRAG.addToken(RV)           #Add RV item
TOKEN_FRAG.length                 #NUM of items
TOKEN_FRAG.firstValue             #First item. undefined if none
                                  #If RV, returned as STR_TK
TOKEN_FRAG.firstToken             #First RV item. undefined if none
TOKEN_FRAG.tokens                 #All RVs items, as ARR
TOKEN_FRAG.mapTokens({ mapToken })
 ->TOKEN_FRAG2                    #Apply mapToken(RV)->RV|VAL on each RV item
TOKEN_FRAG.join({ join })->VAL    #Reduce all items to a single one using join(VAL2, VAL3)->VAL
                                  #RV items are passed as STR_TKs
                                  #If 0 items, call once with 2 undefined values
                                  #If 1 item, returned as is
                                  #`new StringConcat()` can be used as join FUNC, to return 'TOKENS'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REFERENCE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Reference(VAL,PARENT_CONSTRUCT#CREF. Inherits RV
 [, 'CREF'[, ENUM]])              #Turn VAL into a RV
CREF.value                        #VAL
CREF.target                       #CONSTRUCT targetted by the CREF
                                  #As opposed to the PARENT_CONSTRUCT, which consumes it
CREF.displayName                  #'CREF' (def: 'Reference')
CREF.typeHint                     #ENUM ResolutionTypeHint.STRING|NUMBER|STRING_LIST
                                  #CREF.value's type
                                  #Should be correctly set for proper serialization
CREF.creationStack                #Like CELEM.*
CREF.toString()->STR_TK           #
CREF.toStringList()->ARR_TK       #

CFNREF                            #{ Ref } or { Fn::GetAtt } in TEMPLATE
                                  #Inherits CREF
CfnReference
 .forPseudo(STR, CONSTRUCT)       #{ Ref: STR }
 ->CFNREF                         #CONSTRUCT is CREF.target, i.e. parent element
CfnReference.for(CELEM,           #Reference to CELEM, either:
 'RESATTR|Ref'[, ENUM[, ENUM2]])  #  - 'Ref': { Ref: CELEM_CID }
 ->CFNREF                         #  - no ENUM: [CELEM_CID, 'RESATTR'], to use in { Fn::GetAtt }
                                  #  - ENUM ReferenceRendering.GET_ATT_STRING: CELEM_CID.RESATTR, to use in !GetAtt
                                  #  - ENUM ReferenceRendering.FN_SUB: '${CELEM_CID[.RESATTR]}', to use in { Fn::Sub }
                                  #     - 'RESATTR' is skipped when 'Ref'
                                  #ENUM2 is CREF.typeHint
CFNREF                            #Resolves to RV instead of { Ref|Fn::GetAtt }
 .assignValueForStack(CSTACK, RV) #CSTACK must be CREF.target's CSTACK
CFNREF.hasValueForStack
 (CSTACK)->BOOL                   #

CFNRESOURCE.getAtt                #CfnReference.for(CFNRESOURCE, 'RESATTR', undefined, ENUM)
 ('RESATTR'[, ENUM])->CFNREF      #I.e. [CFNRESOURCE_CID, 'RESATTR']

CfnRefElement                     #Inherits CfnElement
CFNREFELEM.ref                    #STR_TK resolving to { Ref: CELEM_CID }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        BUILT-IN PARAM         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Aws.STACK_ID|STACK_NAME|ACCOUNT_ID
 |REGION|PARTITION|URL_SUFFIX
 |NO_VALUE|NOTIFICATION_ARNS
CSTACK.urlSuffix                  #STR_TK resolving to built-in PARAM 'AWS::...'
CSTACK.partition                  #Same but is directly a STR (not a TK) providing both:
                                  #  - CSTACK.region is not a TK
                                  #  - FFLAG @aws-cdk/core:enablePartitionLiterals

new ScopedAws(CONSTRUCT)
 .stackId|stackName|accountId
 |region|partition|urlSuffix
 |notificationArns
CSTACK.stackId|notificationArns   #STR_TK resolving to built-in PARAM { Ref: 'AWS::...' }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Fn.*(...)                         #Arguments can be RV|TKs
                                  #If no RV|TK passed as argument, returns result directly
                                  #  - only for Fn.split|select|len|toJsonString|parseDomainName()

Fn.ref(STR)->STR_TK               #{ Ref: STR }
Fn.getAtt
 ('RESOURCE', 'RESATTR')->RV      #{ Fn::GetAtt: ['RESOURCE', 'RESATTR'] }
Fn.getAzs(['REGION'])->ARR_TK     #{ Fn::GetAZs: 'REGION'|'' }

new CfnDynamicReference           #RV resolving to '{{resolve:SERVICE:ARGS}}'
 ('SERVICE', 'ARGS')              #SERVICE can use ENUM CfnDynamicReferenceService.SSM[_SECURE]|SECRETS_MANAGER

Fn.importValue('EXPORT')->STR_TK  #{ Fn::ImportValue: 'EXPORT' }
Fn.importListValue
 ('EXPORT', NUM[, 'DELIM'])       #{ Fn::ImportValue: 'EXPORT' } + Fn.split('DELIM', ..., NUM)
 ->ARR_TK                         #Def 'DELIM': ','

Fn.conditionIf
 ('COND', VAL, VAL2)->RV          #{ Fn::If: ['COND', VAL, VAL2] }
Fn.conditionEquals(VAL, VAL2)->RV #{ Fn::Equals: [VAL, VAL2] }
Fn.conditionNot(BOOL)->RV         #{ Fn::Not: [BOOL] }
Fn.conditionAnd|Or(BOOL_ARR)->RV  #{ Fn::And|Or: [BOOL,...] }
                                  #If more than 10 items, nest { Fn::And|Or: [{ Fn::And|Or: [...] }, ...] }

Fn.join
 (STR, STR2_ARR[_RV])->STR_TK     #{ Fn::Join: [STR, STR2_ARR] }
Fn.split                          #{ Fn::Split: [STR, STR2] }
 (STR, STR2[, NUM])->ARR[_TK]     #If NUM passed, returns TK_ARR instead
Fn.sub(STR[, OBJ])->STR_TK        #{ Fn::Sub: STR } or { Fn::Sub: [STR, OBJ] }

Fn.len(ARR)->NUM_TK               #{ Fn::Length: ARR }
Fn.select
 (NUM, STR_ARR)->STR[_TK]         #{ Fn::Select: [NUM, STR_ARR] }

Fn.toJsonString(OBJ|ARR)->STR_TK  #{ Fn::ToJsonString: OBJ|ARR }
new CfnJson(PARENT_CONSTRUCT,     #RV that resolves to { Fn::ToJsonString: OBJ|ARR }
 'CJSON', { value: OBJ|ARR })     #Also inherits CONSTRUCT

Fn.base64(STR)->STR_TK            #{ Fn::Base64: STR }

Fn.cidr
 ('CIDR', NUM, 'NUM2')->ARR_TK    #{ Fn::Cidr: ['CIDR', NUM, NUM2] }

Fn.refAll('RESTYPE')->ARR_TK      #{ Fn::RefAll: 'RESTYPE' }
Fn.valueOfAll
 ('RESTYPE', 'RESATTR')->ARR_TK   #{ Fn::ValueOfAll: ['RESTYPE', 'RESATTR'] }
Fn.valueOf
 ('PARAM', 'RESATTR')->STR_TK     #{ Fn::ValueOf: ['PARAM', 'RESATTR'] }

Fn.conditionContains
 (STR_ARR, STR2)->RV              #{ Fn::Contains: [STR_ARR, STR2] }
Fn.conditionEachMemberEquals
 (STR_ARR, STR2)->RV              #{ Fn::EachMemberEquals: [STR_ARR, STR2] }
Fn.conditionEachMemberIn
 (STR_ARR, STR2_ARR)->RV          #{ Fn::EachMemberIn: [STR_ARR, STR2_ARR] }

Fn.parseDomainName
 ('URL')->STR[_TK]                #Get 'URL' domain name (using // and / delimiters)

CSTACK.toJSON(VAL[, NUM])->STR_TK #Resolves to JSON.stringify(VAL)
                                  #NUM is identation (def: 0)
                                  #Handles VAL (or descendant) being:
                                  #  - RV|TK|'TOKENS': resolved
                                  #  - CloudFormation !FUNCs: kept as is and joined with { Fn::Join }
                                  #Although CSTACK's method, it is unrelated to CSTACK
CSTACK.toYamlString(VAL)->STR_TK  #Same with YAML


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TAGS HIGH-LEVEL        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS ==>                          #Only for RESOURCEs that have TAGS
TagManager.isTaggable[V2]
 (CRESOURCE)->BOOL                #Whether has TAGS

OPTS.tags                         #TAGS_FOBJ. TEMPLATE.Resources.RESOURCE.Properties.TAGPROP
CRESOURCE.tagsRaw                 #TAPROP is RESTYPE-specific

Tags.of(CRESOURCE)->CTAGS         #
CTAGS.add('KEY', 'VAL'[, TOPTS])
CTAGS.remove('KEY', [, TOPTS])    #Add|remove TAGs, using underlying CTAGM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TAGS LOW-LEVEL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CRESOURCE.tags|cdkTagManager
CSTACK.tags
TagManager.of(CRESOURCE)->CTAGM   #CTAGM (v1|v2, depending on RESOURCE)
new TagManager(TAGTYPE_ENUM,      #CTAGM. RESPROP Tags
 'RESTYPE'[, TAGS_OBJ[, OPTS]])   #TAGS_OBJ is renderTags()'s value

CTAGM.setTag('TAG', 'VAL')        #
CTAGM.removeTag('TAG')            #
CTAGM.tagValues()->TAGS_OBJ       #
CTAGM.hasTags()->BOOL             #

TOPTS.priority                    #NUM is merging priority when setting|removing 2 TAGs with same name
CTAGM.setTag(...[, NUM])          #Def:
CTAGM.removeTag(..., NUM)         #  - setTag|removeTag(): 0
                                  #  - renderTags()'s TAGS_OBJ: 50
                                  #  - Tag TOPTS.priority: 100
                                  #  - RemoveTag TOPTS.priority: 200

OPTS.renderedTags                 #TAGS_FOBJ_RV
CTAGM.renderTags                  #TAGS_OBJ (def: {}) are merged in
 ([TAGS_OBJ])->TAGS_FOBJ          #undefined if empty
TAGS_FOBJ                         #TAGS in the format expected by CloudFormation, according to TagType
TagType ENUM                      #Shape of TAGS, which differs per SERVICE
TagType STANDARD                  #[{ key, value },...]. Most common
                                  #Can also include any OBJ ("dynamic TAGs"), which are kept as is
TagType MAP                       #TAGS_OBJ, i.e. { KEY: value, ... }. Second most common
TagType KEY_VALUE                 #[{ Key, Value },...]. Least common
                                  #As input, must be lowercase'd
TagType AUTOSCALING_GROUP         #Like STANDARD, but OBJ can also have propagateAtLaunch BOOL (def: false)
                                  #  - set as CTAGM.setTag(..., BOOL) or TOPTS.applyToLaunchedInstances
                                  #Only for AutoScalingGroup
TagType NOT_TAGGABLE              #Always empty []

OPTS.tagPropertyName              #'RESPROP' (def: 'tags')
TOPTS.includeResourceTypes        #'RESTYPE'_ARR. Do not CTAGM.setTag() unless its 'RESTYPE' matches
TOPTS.excludeResourceTypes        #'RESTYPE'_ARR. Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DURATION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATE                              #Converted to 'YYYY-MM-HHTHH:MM:SS' in RESPROPs during `cdk synth`

DURATION                          #
UNIT                              #'days|hours|minutes|seconds|millis'
Duration.UNIT(NUM)->DURATION      #
DURATION.toUNIT([OPTS])->NUM      #OPTS: integral BOOL (def: true)

'DURATION'                        #'P[..D][T[..H][..M][..[...]S]]'
Duration.parse
 ('DURATION')->DURATION           #
DURATION.toIsoString()->'DURATION'#

DURATION.toString()->STR          #'Duration.UNIT(NUM)'
DURATION.toHumanString()->STR     #'NUM UNITs [NUM2 UNIT2s]'
DURATION.unitLabel()->'UNIT'      #

DURATION.plus|minus
 (DURATION2)->DURATION

DURATION.isUnresolved()->BOOL     #Whether underlying duration was passed as a RV|TK
DURATION.formatTokenToNumber()
 ->'NUM UNIT'                     #Works even if isUnresolved()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXPIRATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPIRATION                        #Wrapper around DATE

Expiration.atDate
 (DATE)->EXPIRATION               #
EXPIRATION.date                   #DATE

Expiration.atTimestamp
 (DATE_NUM)->EXPIRATION           #
EXPIRATION.toEpoch()->DATE_NUM    #

Expiration.fromString
 ('DATE')->EXPIRATION             #Using new Date('DATE')

Expiration.after
 (DURATION)->EXPIRATION           #Using now + DURATION
EXPIRATION
 .isBefore|isAfter(DURATION)->BOOL#Using now + DURATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ARN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Arn.format
 (ARN_OBJ[, CSTACK])->'ARN'
CSTACK.formatArn(ARN_OBJ)->'ARN'  #CSTACK.partition|region|account are used as defaults
Arn.split
 ('ARN'[_TK], ENUM)->ARN_OBJ
CSTACK.splitArn
 ('ARN'[_TK], ENUM)->ARN_OBJ      #ENUM is ARN_OBJ.ArnFormat

ARN_OBJ.partition                 #'PARTITION'|undefined
ARN_OBJ.service                   #'SERVICE'
ARN_OBJ.region                    #'REGION'|undefined
ARN_OBJ.account                   #'ACCOUNT_ID'|undefined
ARN_OBJ.resource                  #'RESTYPE'
ARN_OBJ.resourceName              #'[...]NAME'
ARN_OBJ.arnFormat                 #ENUM|undefined. Format of ARN, among ENUM ArnFormat:
                                  #  - SLASH_RESOURCE_NAME: '...:RESTYPE:[NAMEPATH/]NAME'
                                  #  - COLON_RESOURCE_NAME: '...:RESTYPE:[NAMEPATH:]NAME'
                                  #  - SLASH_RESOURCE_SLASH_RESOURCE_NAME: '...:RESTYPE:[/NAMEPATH]/NAME'
                                  #  - NO_RESOURCE_NAME: '...:RESTYPE[[/NAMEPATH]/NAME]'
                                  #     - ARN_OBJ.resource is 'RESTYPE[[/NAMEPATH]/NAME]' and ARN_OBJ.resourceName undefined
                                  #     - can use Arn.extractResourceName('ARN', 'RESTYPE')->'[/NAMEPATH]/NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ANNOTATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk ... --notices                 #BOOL (def: false). Show ANNOTATIONs
cdk notices                       #Show all ANNOTATIONs
cdk acknowledge|ack [NOTICE_ID]   #Add an ACK

ENVVAR CDK_VALIDATION=true
cdk synth --validation            #BOOL (def: true). Print error|warning|info ANNOTATIONs
cdk --ignore-errors               #BOOL. If false (def), fail if any error ANNOTATION, with `cdk synth --validation`
cdk --strict                      #BOOL (def: false). Fail if any warning ANNOTATION, with `cdk synth --validation`
SYOPTS.validateOnSynthesis
STACK_APROPS|STACK_CARTIFACT
 |CSESSION.validateOnSynth        #BOOL (def: false). Ignore `cdk synth --validation`

Annotation.of
 (CONSTRUCT)->ANNOTATION          #Message

ANNOTATION.addError('MESSAGE')    #Add CMETADATA 'aws:cdk:error'

ANNOTATION.addWarningV2           #Add CMETADATA 'aws:cdk:warning'
 ('WNAME', 'MESSAGE')             #WNAME is usually 'LIB:CONSTRUCT.WARNING'

ANNOTATION.addDeprecation         #Same as addWarningV2() except:
 (STR, 'MESSAGE')                 #  - 'WNAME' is 'Deprecated:STR'
                                  #  - 'MESSAGE' is:
                                  #     - prepended with 'The API STR is deprecated'
                                  #     - appended with 'This API will be removed in the next major release'
                                  #  - throws if ENVVAR CDK_BLOCK_DEPRECATIONS set

Acknowledgement.of(CONSTRUCT)->ACK#One per CAPP
ACK.add                           #Makes warning ANNOTATION with 'WNAME' a noop
 (CONSTRUCT|'NODE_PATH', 'WNAME') #Includes CONSTRUCT's descendants
ANNOTATION
 .acknowledgeWarning('WNAME')     #Same except remove the CMETADATA 'aws:cdk:warning', do not just ignore it
ACK.has(CONSTRUCT|STR)->BOOL      #

ANNOTATION.addInfo('MESSAGE')     #Add CMETADATA 'aws:cdk:info'
                                  #Printed by CLI

ENVVAR CDK_DISABLE_STACK_TRACE
CONTEXT
 .aws:cdk:disable-stack-trace
AOPTS.stackTraces                 #BOOL (def: true). Include stack traces in CMETADATA 'aws:cdk:info|warning|error'
cdk --trace                       #BOOL (def: false). Print stack trace with warnings.

CARTIFACT.messages                #CANNOTATION_ARR
CANNOTATION.level                 #'error|warning|info'
CANNOTATION.id                    #'/NODE_PATH'
CANNOTATION.entry                 #CMETADATA


                                             /=+======0========================+=\
                                            /  :                               :  \
                                            )==:      ASSERTIONS TEMPLATE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@aws-sdk/assertions               #Testing assertion library for TEMPLATEs and ANNOTATIONs
                                  #Meant for testing custom CONSTRUCTs
TTEMPLATE|ANNOTATIONS.*           #All throw exceptions on validation

Template.fromString
 ('TEMPLATE'[, OPTS])->TTEMPLATE  #
Template.fromJSON
 (TEMPLATE_OBJ[, OPTS])->TTEMPLATE#
Template.fromStack
 (CSTACK[, OPTS])->TTEMPLATE      #
OPTS.skipCyclicalDependenciesCheck#BOOL. If false (def), fail on circular dependencies
                                  #From: RESOURCE.DependsOn, !Ref|GetAtt|Sub
TTEMPLATE.toJSON()->TEMPLATE_OBJ  #

TTEMPLATE
 .templateMatches(MTEMPLATE)      #TEMPLATE matches
MTEMPLATE                         #TEMPLATE passed to Match.objectLike(), i.e. either OBJ|MATCHER

TTEMPLATE.resourceCountIs
 ('RESTYPE', NUM)                 #NUM RESOURCEs match
TTEMPLATE.hasResource
 ('RESTYPE', MRESOURCE)           #At least 1 RESOURCE match
TTEMPLATE.allResources
 ('RESTYPE', MRESOURCE)           #All RESOURCEs (at least 1) match
TTEMPLATE.findResources
 ('RESTYPE'[, MRESOURCE])         #List matching RESOURCEs
 ->RESOURCES_OBJ                  #RESOURCES_OBJ key is 'RESOURCE', value is RESOURCE_OBJ
MRESOURCE                         #Like MTEMPLATE but for TEMPLATE.Resources.RESOURCE

TTEMPLAT.resourcePropertiesCountIs
 ('RESTYPE', MRESPROPS, NUM)      #NUM RESOURCEs match
TTEMPLATE.hasResourceProperties
 ('RESTYPE', MRESPROPS)           #At least 1 RESOURCE matches
TTEMPLATE.allResourcesProperties
 ('RESTYPE', MRESPROPS)           #All RESOURCEs (at least 1) match
MRESPROPS                         #Like MTEMPLATE but for TEMPLATE.Resources.RESOURCE.Properties

TTEMPLATE.hasParameter
 ('PARAM|*', MPARAM)              #PARAM matches
TTEMPLATE.findParameters          #List matching PARAMs
 ('PARAM|*'[, MPARAM])->PARAMS_OBJ#PARAMS_OBJ key is 'PARAM', value is PARAM_OBJ
MPARAM                            #Like MTEMPLATE but for TEMPLATE.Parameters.PARAM

TTEMPLATE.hasOutput
 ('OUTPUT|*', MOUTPUT)
TTEMPLATE.findOutputs
 ('OUTPUT|*'[, MOUTPUT])
 ->OUTPUTS_OBJ                    #Same for STACK OUTPUTS
MOUTPUT                           #Like MTEMPLATE but for TEMPLATE.Outputs.OUTPUT

TTEMPLATE.hasMapping
 ('FILTER|*', MFILTER)
TTEMPLATE.findMappings
 ('FILTER|*'[, MFILTER])
 ->FILTERS_OBJ                    #Same for FILTERs
MFILTER                           #Like MTEMPLATE but for TEMPLATE.Mappings.FILTER

TTEMPLATE.hasCondition
 ('COND|*', MCOND)
TTEMPLATE.findConditions
 ('COND|*'[, MCOND])->CONDS_OBJ   #Same for CONDs
MCOND                             #Like MTEMPLATE but for TEMPLATE.Conditions.COND


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSERTIONS MATCHER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCHER                           #OBJ|ARR matcher for a given property|item
                                  #Can be nested inside OBJ|ARR|MATCHER2
Match.*(...)                      #Arguments can be MATCHERs themselves, except Match.exact()

Match.not(MATCHER2)->MATCHER      #
Match.absent()->MATCHER           #=== undefined
Match.anyValue()->MATCHER         #!== null|undefined
Match.exact(VAL)->MATCHER         #Deep ===
Match.objectEquals(OBJ)->MATCHER  #Deep ===, must be an OBJ
Match.objectLike(OBJ)->MATCHER    #Deep ===, must be an OBJ, can be a subset
Match.arrayEquals(ARR)->MATCHER   #Deep ===, must be an ARR
Match.arrayWith(ARR)->MATCHER     #Deep ===, must be an ARR, can be a subset
Match.stringLikeRegexp
 ('REGEXP')->MATCHER              #/REGEXP/m.test(STR)
Match.serializedJson(VAL)->MATCHER#Deep ===, after JSON.parse()

new Capture([MATCHER|VAL])        #Can be used as a MATCHER, to get the value that is being asserted
                                  #If MATCHER: only capture values that pass it
                                  #  - VAL is like Match.exact(VAL)
CAPTURE.asBoolean()->BOOL
CAPTURE.asString()->STR
CAPTURE.asNumber()->NUM
CAPTURE.asObject()->OBJ
CAPTURE.asArray()->ARR            #Get captured value
CAPTURE.next()->BOOL              #When CAPTURE matched multiple times, moves to next captured value
                                  #Returns false if none


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ASSERTIONS ANNOTATIONS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Annotations.fromStack
 (CSTACK)->TANNOTATIONS           #

TANNOTATIONS
 .has[No]Error|Warning|Info
 ('NODE_PATH', 'MESSAGE')         #NODE (or descendant) has [not] emitted this ANNOTATION
TANNOTATIONS                      #NODEs (or descendants) with this ANNOTATION
 .findError|Warning|Info          #OBJ:
 ('NODE_PATH', 'MESSAGE')->OBJ_ARR#  - level 'error|warning|info'
                                  #  - id 'WNAME'
                                  #  - entry: type 'aws:cdk:error|warning|info', path 'NODE_PATH', data 'MESSAGE', trace STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         FEATURE FLAGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTEXT.FFLAG                     #BOOL. Flag for an experimental feature
                                  #Def: false, except for features not experimental anymore

FeatureFlags.of(CONSTRUCT)->FFLAGS#
FFLAGS.isEnabled('FFLAG')->BOOL   #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STAGE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Stage(PARENT_CONSTRUCT,       #CSTAGE. Parent of CAPP
 'CSTAGE'[, SSOPTS])              #Inherits CONSTRUCT
                                  #'CSTAGE' must be [[:alnum:]-_.]
                                  #If PARENT_CONSTRUCT:
                                  #  - undefined: root, with 'CSTAGE' empty STR
                                  #  - defined: nested, creating a nested ASSEMBLY
Stage.of(CONSTRUCT)->CSTAGE       #Find amongst ancestors
CSTAGE.parentStage                #PARENT_CSTAGE, if PARENT_CONSTRUCT had a CSTAGE2 itself

OPTS.stageName                    #'STAGE'. Def: 'CSTAGE' (including '')
                                  #Prefixed with 'PARENT_STAGE-...' (if any)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              APP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new App([AOPTS])                  #CAPP. Group of CSTACKs to deploy together
                                  #Must be top-level PARENT_CONSTRUCT
                                  #Inherits CSTAGE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STACK             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Stack([PARENT_CONSTRUCT,      #CSTACK. CloudFormation STACK
 ['CSTACK'[, SOPTS]]])            #Inherits CONSTRUCT
                                  #Def 'CSTACK': 'Default'
                                  #Def PARENT_CONSTRUCT (for automated tests): CAPP with AOPTS:
                                  #  - autoSynth false
                                  #  - outdir TMP_DIR/cdk-test-app-RANDOM
CELEM|CKRESOURCE.stack            #CSTACK
Stack.of(CONSTRUCT)->CSTACK       #Of CONSTRUCT or any ancestor

SOPTS|STACK_APROPS|STACK_CARTIFACT#'STACK' name, as used in CloudFormation
 CSTACK.stackName                 #By default, same as 'CSTACK'
STACK_CARTIFACT.originalName      #'STAGE' prefixed to it
                                  #  - unless ''
                                  #  - if FFLAG @aws-cdk/core:includePrefixInUniqueNameGeneration: use SID

SOPTS.description
CSTACK.templateOptions.description#STR. STACK.Description
CSTACK.templateOptions
 .templateFormatVersion           #STR. STACK.AWSTemplateFormatVersion
cdk bootstrap
--termination-protection
SOPTS|STACK_APROPS|STACK_CARTIFACT
 |CSTACK.terminationProtection    #BOOL (def: false). STACK.EnableTerminationProtection
SOPTS.tags                        #OBJ. STACK.Tags
                                  #ALso used as:
                                  #  - STACK_APROPS|STACK_CARTIFACT.tags
                                  #  - CMETADATA 'aws:cdk:stack-tags'
STACK_APROPS|STCK_CARTIFACT|CSYNTH
 .cloudFormationExecutionRoleArn  #'ROLE_ARN'. STACK.RoleARN
DZOPTS                            #Def: ROLE BSTR 'cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}'
 .cloudFormationExecutionRole     #Can be '': using CLI's credentials

CONTEXT
 .@aws-cdk/core:stackResourceLimit#Max NUM of RESOURCEs (def|max: 500)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NESTED STACK          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new NestedStack(PARENT_CONSTRUCT, #NSTACK. Inherits from CSTACK
 'NSTACK'[, OPTS])                #Nested STACK
                                  #Parent CSTACK is found using PARENT_CONSTRUCT
                                  #  - i.e. can be indirect parent

CSTACK.nested                     #BOOL. Whether is a NSTACK
CSTACK.nestedStackParent          #Parent CSTACK2 (undefined if none)
CSTACK.nestedStackResource        #If NSTACK: CFNRESOURCE of itself in the parent CSTACK2
                                  #Otherwise: undefined

OPTS.env|crossRegionReferences
 |permissionBoundary              #Cannot specify: uses parent instead
OPTS.analyticsReporting
 |terminationProtection
 |suppressTemplateIndentation     #Cannot specify: only meaningful for top-level STACK
NSTACK.syntherizer                #Forwards to parent

NSTACK.nestedStackResource        #Underlying CRESOURCE of type 'AWS::CloudFormation::Stack'
OPTS.description                  #Like CSTACK.*
OPTS.parameters                   #OBJ (def: {}). STACK.Parameters
NSTACK.setParameter('PARAM','VAL')#
OPTS.timeout                      #DURATION (def: none). STACK.TimeoutInMinutes
OPTS.notificationArns             #SNS_TOPIC_ARN_ARR (def: [])
OPTS.removalPolicy                #ENUM (def: DESTROY). See CFNRESOURCE.applyRemovalPolicy()
OPTS.tags                         #Cannot specify, but can still set TAGS after construction

OPTS.stackName                    #Cannot specify it
NSTACK.stackName                  #STR_TK resolving to:
                                  #  - inside NSTACK: 'AWS::StackName'
                                  #  - outside NSTACK: { Ref } to NSTACK + { Fn::Split: ['/', ...] } + { Fn::Select: [1, ...] }
NSTACK.stackId                    #STR_TK resolving to:
                                  #  - inside NSTACK: 'AWS::StackId'
                                  #  - outside NSTACK: { Ref } to NSTACK

CMETADATA 'aws:asset:path'        #'TemplateURL'
CMETADATA 'aws:asset:property'    #NSTACK.templateFile


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENVIRONMENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSOPTS.env                        #CENV, at STAGE-level
                                  #Def: parent STAGE (if none, undefined)
CSTAGE|CENV.account|region        #Same as above

SOPTS.env                         #CENV, at STACK-level
                                  #Def: same as STAGE (if none, Aws.ACCOUNT_ID|REGION)
CSTACK|CENV.account|region        #Same as above

CKRESOURCE.env                    #CEVENT, at CKRESOURCE-level
                                  #Def: same as STACK
CKOPTS.account|region             #Same as above
CKOPTS.environmentFromArn         #Alternative to CKOPTS.account|region, using any 'ARN' instead

CSTACK|STACK_ARTIFACT.environment #'ENVIRONMENT', i.e. 'aws://ACCOUNT/REGION'
STACK_CARTIFACT.environment       #ENVIRONMENT_OBJ

EnvironmentUtils.make
 ('ACCOUNT', 'REGION')
 ->ENVIRONMENT_OBJ                #
EnvironmentUtils.format
 ('ACCOUNT', 'REGION')
 ->'ENVIRONMENT'                  #
EnvironmentUtils.parse
 ('ENVIRONMENT')->ENVIRONMENT_OBJ #
ENVIRONMENT_OBJ.account|region    #'ACCOUNT|REGION'
ENVIRONMENT_OBJ.environment       #'ENVIRONMENT'

Aws.ACCOUNT_ID|REGION             #STR_TK resolving to built-in PARAM 'AWS::ACCOUNT_ID|REGION' (see above)
                                  #Can be set to SSOPTS|SOPTS|CKRESOURCE.env.account|region (its default value)
UNKNOWN_ACCOUNT|UNKNOWN_REGION    #'unknown-account|unknown-region'
                                  #Used in 'ENVIRONMENT'|ENVIRONMENT_OBJ when === Aws.ACCOUNT_ID|REGION
                                  #Means 'account|region-agnostic':
                                  #  - logic can check ENVIRONMENT_OBJ.account|region === UNKNOWN_ACCOUNT|REGION
                                  #    to throw when specific feature requires a specific ACCOUNT|REGION
                                  #  - library code should be agnostic, but production code should not

process.env.CDK_DEFAULT_REGION    #'REGION' that would be used by CLI
                                  #I.e. specified in ENVVARs (e.g. AWS_[DEFAULT_]REGION) or AWS CONFIG|CREDS (see its doc)
                                  #If not found: 'us-east-1'
                                  #Only used if passed to SSOPTS|SOPTS|CKRESOURCE.env.region
                                  #Takes into account --profile|--ec2-creds
                                  #Cannot be overridden
process.env.CDK_DEFAULT_ACCOUNT   #Same but for current 'ACCOUNT_ID'
                                  #Uses STS getCallerIdentity through CLI credentials
                                  #If not found: undefined
                                  #Only used if passed to SSOPTS|SOPTS|CKRESOURCE.env.account
                                  #Takes into account --profile|--ec2-creds|--container-creds|--http-options
                                  #Cannot be overridden


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REGION FACTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Fact.regions                      #All 'REGION'_ARR

CSTACK.partition                  #Aws.PARTITION (i.e. 'AWS::PARTITION' as a STR_TK)
                                  #If FFLAG @aws-cdk/core:enablePartitionLiterals, guess 'PARTITION' using CSTACK.region
                                  #  - if cannot guess: default to Aws.PARTITION

CSTACK.regionalFact               #Like Fact.find(CSTACK.region, RFACT)
 (RFACT[, 'RVAL2'])->'RVAL'       #'RVAL2' is default value (def: throws)
                                  #If CSTACK.region is Aws.RegionId (i.e. agnostic), tries to guess:
                                  #  - if 'RVAL' differs only by including 'REGION' or 'AWS_DOMAIN':
                                  #     - replace it by Aws.REGION_ID|URL_SUFFIX STR_TK
                                  #     - e.g. this is case for FactName.servicePrincipal(...)
                                  #  - if TEMPLATE.Mappings.RFACTMap.REGION.RFACT 'RVAL' defined, use it
                                  #     - specific name for RFACT is slightly different: see source code
                                  #  - for better guess, can restrict to specific CONTEXT.@aws-cdk/core:target-partitions 'PARTITION'_ARR (def: all)
Fact.find('REGION', RFACT)
 ->'RVAL'|undefined               #
Fact.requireFact('REGION', RFACT)
 ->'RVAL'                         #Same but throws if udnefined
RegionInfo.regionMap
 (RFACT)->{ REGION: 'RVAL', ... } #
RegionInfo.regions                #RINFO_ARR for all REGIONs
RegionInfo.get('REGION')->RINFO   #
RINFO.region                      #'REGION'
RINFO.RFACT                       #'RVAL'|undefined
                                  #'YES|NO' -> BOOL
                                  #FACT is camelCase'd

'RVAL'                            #Value for a specific REGION + RFACT

FactName.*[(...)]                 #RFACT. REGION-specific behavior
                                  #Some SERVICE-specific ones are my documentation for that SERVICE instead
FactName.PARTITION                #RFACT for 'PARTITION'
FactName.DOMAIN_SUFFIX            #RFACT for 'AWS_DOMAIN'
FactName
 .servicePrincipal('SERVICE')     #RFACT for 'SERVICE_DOMAIN'
FactName.IS_OPT_IN_REGION         #RFACT for 'YES|NO': whether REGION must be enabled

SERVICE-SPECIFIC ==>              #
FactName.S3_STATIC_WEBSITE_
 ZONE_53_HOSTED_ZONE_ID           #RFACT for Route53 'ZONE_ID'
FactName
 .EBS_ENV_ENDPOINT_HOSTED_ZONE_ID #RFACT for Route53 'ZONE_ID' used in Elastic Beanstalk (if none: '')
FactName.ELBV2_ACCOUNT            #RFACT for 'ACCOUNT_ID' to use with IAM POLICY's Principal.Aws with S3 BUCKET for access logs of ELB
                                  #undefined for REGIONs that 'logdelivery.elasticloadbalancing.amazonaws.com' instead
FactName.DLC_REPOSITORY_ACCOUNT   #RFACT for 'ACCOUNT_ID' owning the ECR repo with the container images of AWS Deep Learning (if none: undefined)
FactName.APPMESH_ECR_ACCOUNT      #RFACT for 'ACCOUNT_ID' owning the ECR repo with the container images of AppMesh Envoy Proxy (if none: undefined)
FactName.FIREHOSE_CIDR_BLOCK      #RFACT for Firehose server's 'CIDR'
FactName
 .VPC_ENDPOINT_SERVICE_NAME_PREFIX#RFACT for '[cn.]com.amazonaws.vpce' used in VPC
FactName
 .appConfigLambdaLayerVersion
 ('LAYER_VERSION', 'arm64|x86_64')#RFACT for LAYER_ARN of AppConfig Insights
FactName.adotLambdaLayer('TYPE',
 'LAYER_VERSION', 'arm64|x86_64') #RFACT for LAYER_ARN of OpenTelemetry Insights
FactName
 .paramsAndSecretsLambdaLayer
 ('LAYER_VERSION', 'arm64|x86_64')#RFACT for LAYER_ARN of SecretsManager Insights


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MACRO             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.addTransform('MACRO')      #TEMPLATE.Transform 'MACRO'[_ARR]
                                  #AWS::LanguageExtensions is automatically added when using Fn.findInMap|len|toJsonString()
CSTACK.templateOptions.transforms #'MACRO'_ARR

Fn.transform('MACRO', OBJ)->RV    #{ Fn::Transform: { Name: 'MACRO', Parameters: OBJ } }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ELEMENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnElement                    #CONSTRUCT within a CSTACK
 (PARENT_CONSTRUCT, 'CELEM')      #Usually corresponds to a TEMPLATE.* top-level property: Resource, Mappings, Parameters, etc.
                                  #TEMPLATE.* top-level properties are shallowly merged
CELEM.creationStack               #STR_ARR. Stack trace of CELEM's constructor

CSTACK.getLogicalId(CELEM)->STR   #'CID' using NODE_PATH, excluding CSTACK (not its parents), 'Default' and 'Resource'
                                  #Used as:
                                  #  - 'RESOURCE|PARAM|...' in CloudFormation TEMPLATEs
                                  #  - RESOURCE name's default value
                                  #Since whole NODE_PATH is used, 'CELEM' (which is NODE.id) need only to be unique among siblings
CELEM.logicalId                   #Same but as STR_RV
CSTACK.renameLogicalId(STR, STR2) #If logicalId is STR2, set to STR instead
CELEM.overrideLogicalId(STR)      #Manually set CELEM.logicalId
CMETADATA 'aws:cdk:logicalId'     #CELEM.logicalId
                                  #Not set if CONTEXT.aws:cdk:disable-logicalId-metadata true

SID                               #STR used as ID:
                                  #  - remove any non-[:alnum:]
                                  #  - truncated 255 chars
CID                               #Like SID, but using STR_ARR:
                                  #  - joined with empty delimiter
                                  #  - remove duplicates
                                  #  - appends HASH, as 8 hex chars
                                  #When STR_ARR are parents (e.g. with CELEM), this allows composability:
                                  #  - CID remains same unless parents change
                                  #  - same STRs (e.g. NODE.id) result in same CID, i.e. no update
                                  #  - i.e. allows users to namespace ID, while using in different parts of TEMPLATE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OUTPUT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnOutput(PARENT_CONSTRUCT,   #COUTPUT. TEMPLATE.Outputs.OUTPUT_SID
 'COUTPUT', OPTS)                 #Inherits CELEM
OPTS.value                        #STR. OUTPUT.Value
OPTS.description                  #STR. OUTPUT.Description
OPTS.exportName                   #'EXPORT'. OUTPUT.ExportName

COUTPUT.importValue()->STR_TK     #{ Fn::ImportValue: 'EXPORT' }

CSTACK.exportValue                #Create TEMPLATE.Outputs.OUTPUT_SID { value: VAL, exportName: OPTS.name }
 (VAL, OPTS)->STR_TK              #Return { Fn::ImportValue: 'EXPORT' }
CSTACK.exportValue                #Same except OPTS.name 'EXPORT' is auto-generated
 (CREF[_TK])->STR_TK              #CREF's target must be either in same CSTACK or in a nested one.
                                  #If in a nested one:
                                  #  - in nested CSTACK2, creates TEMPLATE.Outputs.OUTPUT_SID { value: CREF }
                                  #  - in parent CSTACK, creates TEMPLATE.Outputs.OUTPUT_SID { value: { Fn::GetAtt: [CSTACK2, 'Outputs.OUTPUT'] } }
                                  #  - repeat if deep nesting
CSTACK.exportStringListValue
 (...)->ARR_TK                    #Same but when value is a STR_ARR

CROSS-STACK REFERENCES ==>        #When a CREF's target is in a different CSTACK
                                  #Resolved during `cdk synth` by automatically adding PARAMs and OUTPUTs
                                  #If:
                                  #  - targetting a [deep] parent CSTACK2:
                                  #     - declare CREF in parent
                                  #     - pass to nested through PARAMs
                                  #  - targetting a [deep] nested CSTACK2:
                                  #     - declare CREF in nested
                                  #     - pass to parent through STACK OUTPUTs and { Fn::ImportValue }
                                  #  - otherwise: same but also add CSTACK dependency
                                  #Only if both CSTACKs are in same CAPP, ACCOUNT_ID and REGION (including agnostic Aws.ACCOUNT_ID|REGION)
                                  #Not if CFNREF.assignValueForStack() already called

SOPTS.crossRegionReferences       #BOOL (def: false). Allows CREF to target a CSTACK in a different REGION (except agnostic Aws.REGION)
                                  #Also makes CKRESOURCE.getResourceNameAttribute() not use CKRESOURCE.physicalName when STACKs differ only per REGION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      STACK DEPENDENCIES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.add|removeDependency       #Dependency between STACKs
 (CSTACK2)                        #If CSTACK2 is:
                                  #  - same: noop
                                  #  - nested: noop, because already dependent
                                  #  - parent: not allowed, because cycle
                                  #  - not parent|nested but have common ancestor CSTACK3:
                                  #     - in CSTACK3, link CSTACK[2] using TEMPLATE.Resources.RESOURCE.DependsOn
                                  #  - different top-level: kept in `manifest.json`, ensuring those are deployed serially
                                  #Must be in same CSTAGE
CSTACK.dependencies               #CSTACK2_ARR
ENVVAR CDK_DEBUG_DEPS=true        #Debug logs for STACK dependencies

CFNRESOURCE.add|removeDependency  #If same STACK: TEMPLATE.Resources.RESOURCE.DependsOn
 (CFNRESOURCE2)                   #Otherwise: use STACK dependency
CFNRESOURCE.replaceDependency
 (CFNRESOURCE2, CFNRESOURCE3)     #Same as removeDependency(CFNRESOURCE2) + addDependency(CFNRESOURCE3)
CFNRESOURCE
 .obtain[Resource]Dependencies()
 ->CFNRESOURCE2_ARR               #Including|excluding STACK dependencies

ARTIFACT.dependencies             #'ARTIFACT_ID'_ARR to deploy first
                                  #Mostly used with STACK_ARTIFACT, using CSTACK.dependencies, i.e. deploy STACK dependencies in order
CARTIFACT.dependencies            #Same but as CARTIFACT_ARR
LOPTS.topoSort                    #BOOL (def: true). Sort CASSEMBLY.artifacts:
                                  #  - dependencies before dependents
                                  #  - then alphabetically by 'ARTIFACT_ID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEPENDABLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
                                  #Part of `constructs` package
                                  #When NODE is CFNRESOURCE, NODE dependencies -> CFNRESOURCE.addDependency() during `cdk synth`
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set NODE dependencies
NODE.addDependency(DEPENDABLE...) #Add NODE dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get NODE dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONDITION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnCondition                  #CCOND. TEMPLATE.Conditions.COND
 (PARENT_CONSTRUCT, 'CCOND', OPTS)#Inherits CELEM
                                  #Is also a RV that resolves to { Condition: 'CCOND_CID' }
OPTS.expression                   #BOOL_RV
                                  #If undefined, no COND

CFRN_OPTS.condition               #CCCOND. TEMPLATE.Resources.RESOURCE.Condition
COUTPUT_OPTS.condition            #CCOND. OUTPUT.Condition


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MAPPINGS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnMapping(PARENT_CONSTRUCT,  #CFILTER. TEMPLATE.Mappings.FILTER
 'CFILTER'[, OPTS])               #Inherits CfnRefElement
                                  #OPTS is { VAR: { PROP: VAL, ...}, ... }
CFILTER.setValue
 ('VAR', 'PROP', VAL)             #

Fn.findInMap
 ('FILTER', 'VAR', 'PROP'[, STR]) #
 ->STR_TK                         #{ Fn::FindInMap: ['FILTER', 'VAR', 'PROP'[, { DefaultValue: STR }]] }
CFILTER.findInMap                 #Same except:
 ('VAR'[_TK], 'PROP'[_TK][, STR]) #  - automatically set 'FILTER' CID
 ->STR[_TK]                       #  - if used in a different CSTACK than CFILTER, set a TEMPLATE.Mappings.FILTER copy
                                  #  - automatically resolved if OPTS.lazy true and either:
                                  #     - no OPTS.VAR.PROP, and default value STR specified
                                  #     - neither 'VAR'|'PROP' is a TK
OPTS.lazy                         #BOOL (def: false). Only output TEMPLATE.Mappings.FILTER if CFILTER.findInMap() is called
                                  #Recommended


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PARAMETERS MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnParameter(PARENT_CONSTRUCT,#CPARAM. TEMPLATE.Parameters.PARAM
 'CPARAM'[, OPTS])                #Inherits CELEM
OPTS.type                         #STR (def: 'String'). PARAM.Type
OPTS.min|maxLength                #NUM. PARAM.Min|MaxLength
OPTS.min|maxValue                 #NUM. PARAM.Min|MaxValue
OPTS.allowedPattern               #'REGEXP'. PARAM.AllowedPattern
OPTS.allowedValues                #STR_ARR. PARAM.AllowedValues
OPTS.default                      #VAL. PARAM.Default
OPTS.description                  #STR. PARAM.Description
OPTS.constraintDescription        #STR. PARAM.ConstraintDescription
OPTS.noEcho                       #BOOL. PARAM.NoEcho

CPARAM.value                      #CFNREF. { Ref: 'PARAM' }
                                  #CPARAM is also a RV that resolves to it
CPARAM
 .valueAsString|List|Number()->TK #{ Ref: 'PARAM' }

STACK_APROPS|STACK_CARTIFACT
 .parameters                      #PARAMS_OBJ. STACK.Parameters


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PARAMETERS RULES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnRule(PARENT_CONSTRUCT,     #CRULE. TEMPLATE.Rules.RULE
 'CRULE'[, OPTS])                 #Inherits CfnRefElement
OPTS.ruleCondition                #BOOL. RULE.RuleCondition
OPTS.assertions                   #OBJ_ARR: assert BOOL, assertDescription STR
                                  #RULE.Assertions
CRULE.addAssertion(BOOL, STR)     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CFNRESOURCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnResource(PARENT_CONSTRUCT, #CFNRESOURCE. Base class of all CRESOURCEs
 'CFNRESOURCE', OPTS)             #Inherits CfnRefElement

OPTS.type
CFNRESOURCE.cfnResourceType       #'RESTYPE'

OPTS.properties
CFNRESOURCE.cfnProperties         #RESPROPS_OBJ (def: {}). TEMPLATE.Resource.RESOURCE.Properties
CFNRESOURCE.cfnOptions            #CFNR_OPTS (def: {})

CFNR_OPTS.description             #STR. RESOURCE.Description
CFNR_OPTS.version                 #'ETYPE_VERSION'. RESOURCE.Version

CFNRESOURCE.applyRemovalPolicy    #Set CFNR_OPTS.deletionPolicy
 (ENUM|undefined[, OPTS])         #If OPTS.applyToUpdateReplacePolicy true (def), also set CFNR_OPTS.updateReplacePolicy
                                  #ENUM is RemovalPolicy.DELETE|RETAIN|RETAIN_ON_UPDATE_OR_DELETE|SNAPSHOT
                                  #If ENUM undefined, uses OPTS.default (def: RETAIN)
                                  #If FFLAG @aws-cdk/core:validateSnapshotRemovalPolicy, throw if SNAPSHOT on invalid 'RESTYPE'
CFNR_OPTS.deletionPolicy          #ENUM CfnDeletionPolicy.DELETE|RETAIN|RETAIN_EXCEPT_ON_CREATE|SNAPSHOT
                                  #TEMPLATE.Resources.RESOURCE.DeletionPolicy
                                  #Required with many RESTYPEs, e.g. databases, S3 BUCKETs, etc.
CFNR_OPTS.updateReplacePolicy     #Same ENUM (except no RETAIN_EXCEPT_ON_CREATE)
                                  #TEMPLATE.Resources.RESOURCE.UpdateReplacePolicy

CFNR_OPTS.updatePolicy            #OBJ (RESTYPE-specific). TEMPLATE.Resources.RESOURCE.UpdatePolicy
CFNR_OPTS.creationPolicy          #OBJ. TEMPLATE.Resources.RESOURCE.CreationPolicy
                                  #OBJ is RESTYPE-specific except: resourceSignal { count NUM, timeout 'TIME_DURATION' }

CFNRESOURCE.addOverride           #TEMPLATE.Resources.RESOURCE.VARR VAL
 ('VARR', VAL)                    #VARR is dot-delimited, and can include NUM indices
CFNRESOURCE.addDeletionOverride
 ('VARR')                         #Delete TEMPLATE.Resources.RESOURCE.VARR
CFNRESOURCE
 .addProperty[Deletion]Override
 (...)                            #Same for TEMPLATE.Resources.RESOURCE.Properties.VARR

PROTECTED METHODS ==>             #Following are to override by subclasses
CFNRESOURCE.shouldSynthesize      #FUNC()->BOOL (def: always true).
                                  #If false, omit CFNRESOURCE in TEMPLATE.Resources.*
CFNRESOURCE                       #Compute TEMPLATE.Resource.RESOURCE.Properties, before RV resolution
 .cfnProperties()->RESPROPS_OBJ   #Can use this._cfnProperties RESPROPS_OBJ|undefined
                                  #Def: RESPROPS_OBJ and set TAGS property
CFNRESOURCE.renderProperties      #Transform TEMPLATE.Resource.RESOURCE.Properties, after RV resolution
 (RESPROPS_OBJ)->RESPROPS_OBJ     #Def: keep as is


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RESOURCE L1          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnRESOURCE(PARENT_CONSTRUCT, #CRESOURCE. "L1|CFN RESOURCE", corresponding to a given AWS::SERVICE::RESOURCE
 'CRESOURCE'[, OPTS])             #Inherits from CFNRESOURCE
                                  #Generated at build time:
                                  #  - from CloudFormation SPEC
                                  #  - by internal tool @aws-sdk/spec2cdk
                                  #  - i.e. always up-to-date
                                  #Always start with Cfn*
                                  #Documented online under "CloudFormation Resources" section

CfnRESOURCE.CFN_RESOURCE_TYPE_NAME
TATTRS.aws:cdk:cloudformation:type#'RESTYPE'

OPTS|CRESOURCE.RESPROP            #VAL. Like CloudFormation, but camelCase
                                  #Does basic runtime type validation (unless RV)
TATTRS
 .aws:cdk:cloudformation:props    #RESPROPS_OBJ

CRESOURCE.attrRESATTR             #TK. Like CloudFormation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE METRICS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CfnRESOURCEMetricsISTAT.METRIC
 (DOBJ)->CMETRIC                  #CloudWatch METRIC related to L1 CONSTRUCT
CMETRIC.namespace                 #'NAMESPACE'
CMETRIC.metricName                #'METRIC'
CMETRIC.dimensionsMap             #DOBJ
CMETRIC.statistic                 #'ISTAT', often 'Sum' or 'Average'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE METADATA       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CFNRESOURCE
 .addMetadata('VAR', VAL)         #
CFNRESOURCE
 .getMetadata('VAR')->VAL         #
CFNR_OPTS.metadata                #OBJ. TEMPLATE.Resources.RESOURCE.Metadata

CONTEXT
 .aws:cdk:enable-path-metadata
cdk --path-metadata               #BOOL (def: true). Enables TEMPLATE.Resources.RESOURCE.Metadata['aws:cdk:path']
TEMPLATE.Resources.RESOURCE
 .Metadata['aws:cdk:path']        #NODE_PATH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       TEMPLATE METADATA       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.addMetadata('VAR', VAL)    #TEMPLATE.Metadata.VAR = VAL
CSTACK.templateOptions.metadata   #OBJ

cdk metadata [STACKS]             #Print TEMPLATE.Metadata

CONTEXT.aws:cdk:version-reporting
AOPTS|SOPTS.analyticsReporting
cdk --version-reporting           #BOOL (def: true). Output TEMPLATE.Resources.CDKMetadata and TNODE.constructInfo

TEMPLATE.Resources.CDKMetadata    #Type 'AWS::CDK::Metadata'
                                  #Properties.Analytics 'v2:deflate64:X.Y.Z!MODULE/EXPORT,...'
                                  #  - list of CONSTRUCTs used in this STACK
                                  #  - uses {...} instead of repeating subparts, e.g. @aws-cdk/core.{Stack,Construct,CfnResource}
                                  #  - the part after 'v2:deflate64:' is gzip'd then base64'd
                                  #Used for analytics, or notifying of security vulnerabilities

TNODE.constructInfo.fqn           #'MODULE/EXPORT'
TNODE.constructInfo.version       #'X.Y.Z'

FactName                          #RFACT for 'YES|NO': whether REGION supports TEMPLATE.Resources.CDKMetadata
 .CDK_METADATA_RESOURCE_AVAILABLE #If CSTACK.region is:
                                  #  - not supported: skip it
                                  #  - agnostic, use TEMPLATE.Resources.CDKMetadata.Condition { Fn::Or: [{ Fn::Equals: ['AWS::Region', 'REGION'] },...] }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RESOURCE L2          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Resource(PARENT_CONSTRUCT,    #CKRESOURCE. Group of
 'CKRESOURCE'[, CKOPTS])          #  - CRESOURCEs ("L2|curated resource")
                                  #  - CKRESOURCEs ("L3 resource", "pattern")
                                  #Inherits CONSTRUCT
                                  #Documented online under "Constructs" section

Resource.isOwnedResource          #Whether there is a direct child CRESOURCE named 'Default' or 'Resource'
 (CONSTRUCT)->BOOL                #Means CKRESOURCE is a wrapper around it, and other children are just associated to it (e.g.  POLICYs)
CKRESOURCE.applyRemovalPolicy(...)#Same as CKRESOURCE.node.defaultChild.applyRemovalPolicy(...)

CKOPTS.physicalName               #'NAME'[_TK] of main child CRESOURCE's
                                  #Is SERVICE-specific 'NAME', not CloudFormation 'RESOURCE', nor SERVICE-specific MID
                                  #If undefined (def: STR_TK resolving to undefined): auto-generated by CloudFormation
CKRESOURCE.physicalName           #'NAME'[_TK]. Readonly. Protected, i.e. only in subclasses.

CKRESOURCE                        #Resolves to 'NAME' passed as input
 .getResourceNameAttribute        #However, if used cross-account|region, resolves to CKRESOURCE.physicalName instead
 ('NAME')->'NAME'_TK              #  - i.e. CKRESOURCE's STACK and consuming CONSTRUCT's STACK2 are in a different ACCOUNT or REGION
                                  #  - unless CKRESOURCE.physicalName is TK
CKRESOURCE                        #Same except resolves to 'ARN'
 .getResourceArnAttribute         #If cross-account|region, uses ARN_OBJ instead
 ('ARN', ARN_OBJ)->'ARN'_TK       #  - ARN_OBJ.resourceName must include `CKRESOURCE.physicalName`
PhysicalName.GENERATE_IF_NEEDED   #When passed to CKOPTS.physicalName, same as undefined except:
                                  #  - when calling CKRESOURCE.getResourceName|ArnAttribute() on cross-account|region
                                  #  - then set CKRESOURCE.physicalName to auto-generated 'NAME', and use it
                                  #Auto-generated 'NAME' (61 chars) is concatenation of:
                                  #  - 'STACK' (first 25 chars, lowercase'd)
                                  #  - NODE's 'SID' (first 24 chars)
                                  #  - SHA256 hash (first 12 chars) of:
                                  #     - STACK.account (must be set and not RV)
                                  #     - STACK.region (must be set and not RV)
                                  #     - 'STACK' (full)
                                  #     - NODE's 'SID' (full)
CKRESOURCE.generatePhysicalName() #Protected method to override in subclasses, to customize the 'NAME' auto-generated by PhysicalName.GENERATE_IF_NEEDED
 ->STR                            #E.g. can call super.generatePhysicalName() and prepend a prefix


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CUSTOM RESOURCE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CustomResource
 (PARENT_CONSTRUCT,               #CUSTOM_RESOURCE
 'CCUSTOM_RESOURCE', OPTS)        #Inherits CKRESOURCE

OPTS.resourceType                 #'Custom::CUSTOM' (def: 'AWS::CloudFormation::CustomResource')

OPTS.properties                   #RESPROPS_OBJ (def: {}). TEMPLATE.Resource.RESOURCE.Properties
OPTS.pascalCaseProperties         #BOOL (def: false). Convert OPTS.properties from camelCase to PascalCase
OPTS.serviceToken                 #SNS_TOPIC_ARN|LAMBDA_FUNC_ARN. RESPROP ServiceToken

OPTS.removalPolicy                #ENUM (def: DESTROY) passed to CFNRESOURCE.applyRemovalPolicy()

CCUSTOM_RESOURCE.ref              #STR_TK resolving to { Ref: CID } targetting underlying CFNRESOURCE
CCUSTOM_RESOURCE.getAtt
 ('RESATTR')->CFNREF
CCUSTOM_RESOURCE.getAttString
 ('RESATTR')->STR_TK              #Like CFNRESOURCE.getAtt()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SYNTH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTAGE.synth([SYOPTS])->CASSEMBLY #Modifies CONSTRUCTs, i.e. must be done only once
SYOPTS.force                      #BOOL. If false (def), memoize
AOPTS.autoSynth                   #BOOL (def: true if CLI). Call CAPP.synth() on `beforeExit`

Aspects.of(CONSTRUCT)->ASPECTS    #
ASPECTS.add(ASPECT)               #
ASPECTS.all()->ASPECT_ARR         #
ASPECT.visit                      #FUNC(CONSTRUCT) to call during `cdk synth`
                                  #Called on both CONSTRUCT and its descendants
                                  #Called before resolving cross-stack references

attachCustomSynthesis(CONSTRUCT,  #Calls onSynthesize() during `cdk synth`
 { onSynthesize(CSESSION) })      #Called only on CONSTRUCT
                                  #Called after ASPECTs, NODE.validate() and resolving cross-stack references


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VALIDATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NODE.addValidation(OBJ)
OBJ.validate()->'ERROR'_ARR       #Add validate() FUNC, which checks whether NODE is valid

NODE.validate()->'ERROR'_ARR      #Call and concatenate all validate() FUNCs of this NODE

SYOPTS.skipValidation             #BOOL. If false (def), call all NODE.validate() on `cdk synth`
                                  #Throws if any 'ERROR'
                                  #Called after ASPECTs and resolving cross-stack references


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ASSEMBLY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CASSEMBLY                         #Output of `cdk synth`

CSESSION.assembly
new CloudAssemblyBuilder
 (['ASSEMBLY_DIR'[, XOPTS]])      #CBUILDER. Builds a CASSEMBLY

new Assembly
 ('ASSEMBLY_DIR'[, LOPTS])        #Loads ASSEMBLY_DIR by using its MANIFEST

cdk --output|-o
ENVVAR CDK_OUTDIR
SSOPTS|CSTAGE|CSESSION.outdir     #'ASSEMBLY_DIR'. Def: 'TMPDIR/cdk.outRANDOM'
CASSEMBLY.directory               #If does not exist, created
                                  #Cannot be specified by nested CSTAGE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MANIFEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/manifest.json        #MANIFEST. Full CASSEMBLY description

CBUILDER.buildAssembly()
 ->CASSEMBLY                      #Save MANIFEST on-disk
CBUILDER.delete()                 #Delete MANIFEST on-disk

Manifest.saveAssemblyManifest
 (MANIFEST, 'PATH')               #Save to 'PATH', as JSON
Manifest.loadAssemblyManifest
 ('PATH'[, OPTS])->MANIFEST       #Inverse
OPTS|LOPTS.skipVersionCheck       #BOOL. If false (def), ensure Manifest.version >= MANIFEST.version
OPTS|LOPTS.skipEnumCheck          #BOOL (def: false). Allows MANIFEST.** values to contain invalid type when it is an enum

CASSEMBLY.manifest                #MANIFEST

Manifest|MANIFEST|CASSEMBLY
 .version                         #'34.0.0'

CBUILDER
 .addMissing(MISSING_CONTEXT)     #
MANIFEST.missing                  #MISSING_CONTEXT_ARR. PCONTEXT.* which could not be found (see OPTS.dummyValue above)
MISSING_CONTEXT.provider          #'SERVICE'
MISSING_CONTEXT.key               #PCONTEXT.* 'VAR' name
MISSING_CONTEXT.props             #PCONTEXT.* OBJ value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ARTIFACT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CBUILDER.addArtifact              #Add ARTIFACT to MANIFEST that CBUILDER.buildAssembly() will write
 ('ARTIFACT_ID', ARTIFACT)        #Does not write ARTIFACT to disk

CASSEMBLY.artifacts               #CARTIFACT_ARR
CASSEMBLY.tryGetArtifact
 ('ARTIFACT_ID')[->CARTIFACT]     #

CloudArtifact.fromManifest
 (CASSEMBLY, 'ARTIFACT_ID',
 ARTIFACT)->CARTIFACT             #
CARTIFACT.assembly                #CASSEMBLY
CARTIFACT.id                      #'ARTIFACT_ID'
CARTIFACT.manifest                #ARTIFACT
CARTIFACT.hierarchicalId          #Either STACK_ARTIFACT.displayName, or 'ARTIFACT_ID'

MANIFEST.artifacts.ARTIFACT_ID    #ARTIFACT. Parts of an ASSEMBLY
ARTIFACT.type                     #One of:
                                  #  - 'cdk:tree': TREE
                                  #  - 'aws:cloudformation:stack': STACK_ARTIFACT
                                  #  - 'cdk:asset-manifest': ASSETS
                                  #  - 'cdk:cloud-assembly': nested ASSEMBLY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ARTIFACT NESTED        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NESTED CSTAGE ==>                 #Nested CSTAGEs automatically create a nested ASSEMBLY
CSTAGE.artifactId                 #'assembly-NODE_PATH' (with / -> -) used as 'ARTIFACT_ID'
                                  #If not nested: ''

CBUILDER.createNestedAssembly
 ('ARTIFACT_ID', 'NODE_PATH')     #Create nested ASSEMBLY
 ->CBUILDER2                      #Same as parent one, except ASSETS_DIR -> ASSETS_DIR/ARTIFACT_ID
CBUILDER.parentBuilder            #Parent CBUILDER2, if nested

CASSEMBLY.nestedAssemblies        #NASSEMBLY_CARTIFACT_ARR
CASEMBLY.getNestedAssemblyArtifact
 ('ARTIFACT_ID')
 ->NASSEMBLY_CARTIFACT            #
CASEMBLY.getNestedAssembly
 ('ARTIFACT_ID')->CASSEMBLY       #
NASSEMBLY_CARTIFACT.nestedAssembly#CASSEMBLY

NASSEMBLY_ARTIFACT.properties     #NASSEMBLY_APROPS
NASSEMBLY_APROPS
 |NSSEMBLY_CARTIFACT.directoryName#'ARTIFACT_ID'
NASSEMBLY_CARTIFACT.fullPath      #'ASSEMBLY_DIR/ARTIFACT_ID'
NASSEMBLY_APROPS
 |NASSEMBLY_CARTIFACT.displayName #'NODE_PATH'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARTIFACT TREE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/tree.json            #TREE. Full CONSTRUCT tree
                                  #ARTIFACT_ID is 'Tree'

CASSEMBLY.tree                    #TREE_CARTIFACT

TREE_ARTIFACT.properties.file
TREE_CARTIFACT.file               #'PATH' to TREE
AOPTS.treeMetadata                #BOOL (def: true). If false, do not create TREE

TREE.version                      #'tree-0.1'
TREE.tree                         #TNODE
TNODE.children                    #TNODE_ARR
TNODE.id                          #'CONSTRUCT' or 'App' (for root)
TNODE.path                        #'NODE_PATH'

TNODE.attributes                  #TATTRS. Node-specific information, meant only for TREE
NODE.inspect                      #Can override as FUNC(INSPECTOR), to set TATTRS
                                  #Called on `cdk synth`
INSPECTOR.attributes              #TATTRS
INSPECTOR.addAttribute('VAR', VAL)#TATTRS.VAR = VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SYNTHESIZER          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.defaultStackSynthesizer
SOPTS|CSTACK.synthesizer          #CSYNTH. Produces STACK|ASSET ARTIFACTs

new DefaultStackSynthesizer
 ([DZOPTS])                       #Default CSYNTH

new CliCredentialsStackSynthesizer#CSYNTH. Same but always use CLI credentials
 ([DZOPTS])                       #  - i.e. no DZOPTS.*Role*|ExternalId
                                  #Also, no BootstrapVersion check
                                  #  - i.e. no DZOPTS.*BootstrapVersion*

new BootstraplessSynthesizer      #CSYNTH that does not need `cdk bootstrap` to have been run, i.e. no:
 ([BZOPTS])                       #  - BootstrapVersion check
                                  #     - i.e. no DZOPTS.*BootstrapVersion*
                                  #  - DZOPTS.qualifier
                                  #  - CSYNTH.add*Asset(), DZOPTS.*asset|bucket|dockerTag*
                                  #  - DZOPTS.*lookupRole*, *ExternalId
                                  #But still has: DZOPTS.deployRoleArn|cloudFormationExecutionRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ARTIFACT STACK         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_ARTIFACT                    #ARTIFACT that is a STACK definition + its TEMPLATE

CASSEMBLY.stacks[Recursively]     #STACK_CARTIFACT_ARR
                                  #If `Recursively`, includes nested CASSEMBLYs
CASSEMBLY.getStackByName
 ('STACK')->STACK_CARTIFACT       #Does not include nested CASSEMBLYs
CASSEMBLY.getStackArtifact
 ('ARTIFACT_ID')->STACK_CARTIFACT #Includes nested CASSEMBLYs

STACK_ARTIFACT.displayName        #'NODE_PATH' of CSTACK
STACK_CARTIFACT.displayName       #'NODE_PATH (CSTASK.stackName)'
STACK_ARTIFACT.properties         #STACK_APROPS

CSTACK.artifactId                 #'ARTIFACT_ID'. Is CSTACK.stackName, but without 'STAGE' prefix

CSTACK|STACK_APROPS               #'ARTIFACT_ID[.nested].template.json', i.e. 'PATH' to CloudFormation TEMPLATE
 |STACK_CARTIFACT.templateFile    #If NSTACK: `.nested`
STACK_CARTIFACT.templateFullPath  #'ASSEMBLY_DIR/ARTIFACT_ID[.nested].template.json'
SOPTS.suppressTemplateIndentation #BOOL. If false (def), indent|prettify TEMPLATE file
STACK_APROPS|STACK_CARTIFACT
 .stackTemplateAssetObjectUrl     #FASSET_RES.s3ObjectUrlWithPlaceholders, i.e. TEMPLATE is uploaded to S3 as a FASSET
STACK_CARTIFACT.template          #CloudFormation TEMPLATE OBJ

STACK_APROPS|STACK_CARTIFACT
 .assumeRoleArn                   #'ROLE_ARN' used to call CloudFormation API
DZOPTS|CSYNTH.deployRoleArn       #Def: ROLE BSTR 'cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}'
                                  #Can be '': using CLI's credentials
STACK_APROPS|STACK_CARTIFACT
 .assumeRoleExternalId
DZOPTS.deployRoleExternalId       #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ARTIFACT STACK METADATA    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_ARTIFACT.metadata./NODE_PATH#CMETADATA_ARR. NODE-related information kept in ASSEMBLY
NODE.metadata                     #Unlike STACK|RESOURCE.Metadata: not present in CloudFormation TEMPLATE
CARTIFACT.findMetadataByType
 ('VAR')->CMETADATA_ARR           #Also include CMETADATA.path '/NODE_PATH'

NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a CMETADATA
CMETADATA.type                    #'VAR'
CMETADATA.data                    #VAL. Can contain RV|TK|'TOKENS'

CMETADATA.trace                   #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets CMETADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start CMETADATA.trace from
ENVVAR CDK_DEBUG=true
cdk --debug                       #BOOL (def: false). Enable stack traces


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET MANIFEST MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/                     #ASSETS. Sets of local data to upload to S3 or ECR, for a specific STACK
 STACK_ARTIFACT_ID.assets.json    #ARTIFACT_ID is 'STACK_ARTIFACT_ID.assets'
                                  #Is just declaration of intent. Actual uploading is done by `cdk deploy` (through CPUBLISH), including:
                                  #  - zipping (FASSET_SRC.packaging 'zip')
                                  #  - command execution (ASSET_SRC.executable)
                                  #  - `docker build`
                                  #  - upload to S3|ECR
ASSETS_ARTIFACT.properties.file   #'PATH' to ASSETS

Manifest.saveAssetManifest
 (ASSETS, 'PATH')                 #Save to 'PATH', as JSON
Manifest.loadAssetManifest
 ('PATH')->ASSETS                 #Inverse

ASSETS.version                    #STR. Same value as MANIFEST.version

ASSET.source                      #ASSET_SRC. Local data
ASSET.destinations.DEST_ID        #ASSET_DEST. Where to upload
                                  #If agnostic, use 'current_account|current_region'
ASSET_DEST.*                      #With CPUBLISH, can be BSTR
ASSET_DEST.region                 #'REGION'. If agnostic, undefined

CONTEXT                           #BOOL (def: true). Whether to set 'aws:asset:*'
 .aws:cdk:enable-asset-metadata   #On either CMETADATA or RESOURCE.Metadata, depending on the case
cdk --asset-metadata              #Only for RESOURCEs that have ASSETs, documented as such here
                                  #Used by SAM for local workflow
CMETADATA 'aws:asset:path'        #'PROP'. Means ASSET 'PATH' is at RESOURCE.PROP
CMETADATA 'aws:asset:property'    #'PATH' to ASSET


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   ASSET MANIFEST HIGH-LEVEL   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-assets                        #Package in same monorepo

AssetManifest.fromFile
 ('ASSEMBLY_DIR/
 STACK_ARTIFACT_ID.assets.json')
 ->CASSETS
new AssetManifest
 ('ASSEMBLY_DIR', ASSETS)         #CASSETS. Higher-level view of ASSETS
CASSETS.directory                 #'ASSEMBLY_DIR'

CASSETS.entries                   #CASSET_ARR
CASSETS.files                     #Same but only with type 'file'

CASSET                            #ASSET_SRC + ASSET_DEST
CASSET.type                       #'file' or 'docker-image'
CASSET.id.assetId                 #'SRC_ID'
CASSET.source|genericSource       #ASSET_SRC
CASSET.id.destinationId           #'DEST_ID'
CASSET
 .destination|genericDestination  #ASSET_DEST

CASSETS.select
 (CASSET_PATTERN)->CASSETS2       #Return a subset matching specific SRC_IDs|DEST_IDs
new DestinationPattern
 (['SRC_ID'[, 'DEST_ID']])        #CASSET_PATTERN
CASSET_PATTERN.toString()
 ->'SRC_ID|*:DEST_ID:*'           #
DestinationPattern.parse
 ('[SRC_ID|*][:DEST_ID|*]')
 ->CASSET_PATTERN                 #

CASSETS.list()->STR_ARR           #CASSET_ARR serialized as:
                                  #  - 'SRC_ID CASSET.type ASSET_SRC'
                                  #  - '  - SRC_ID:DEST_ID ASSET_DEST' (for each)
cdk-assets ls                     #Print CASSETS.list()
--path|-p                         #'ASSEMBLY_DIR' (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET MANIFEST FILE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSETS.files.SRC_ID               #FASSET. ASSET that is a local FILE|DIR to upload to S3
                                  #'SRC_ID' is 'FILE_HASH'
CSYNTH.addFileAsset
 (FASSET_NEW)->FASSET_RES         #

FASSET_SRC|NEW.packaging          #'file' (FILE) or 'zip' (DIR to zip)

FASSET_SRC.path
FASSET_NEW.fileName               #'PATH' to local file

FASSET_NEW.sourceHash             #'FILE_HASH', i.e. SHA256 'HASH_HEX' of file contents

FASSET_SRC|NEW.executable         #['COMMAND'[, 'ARG',...]]. Alternative to FASSET_SRC.path|packaging
                                  #Must create file, then return its absolute file path on stdout

FASSET_DEST.bucketName            #S3 'BUCKET'
DZOPTS.fileAssetsBucketName       #Def: BSTR 'cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}'
FASSET_RES.bucketName             #Same, but as BSUB
FASSET_DEST.objectKey             #S3 'OBJECT'
                                  #Is 'FILE_HASH.EXT' with 'EXT' taken from local file 'PATH', or '.zip' if packaging 'zip'
FASSET_RES.objectKey              #Same, but as BSUB
DZOPTS.bucketPrefix               #STR (def: '') prefixing S3 'OBJECT'

FASSET_RES
 .s3ObjectUrlWithPlaceholders     #'s3://BUCKET/OBJECT' to TEMPLATE uploaded to S3
FASSET_RES.s3ObjectUrl            #Same, but as BSUB
FASSET_RES.httpUrl                #BSUB 'https://s3.${AWS::Region}.amazonaws.com/BUCKET/OBJECT'

FASSET_DEST.assumeRoleArn         #Like STACK_APROPS.* but for uploading to S3
DZOPTS.fileAssetPublishingRoleArn #Def: ROLE BSTR 'cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}'
                                  #Can be '': using CLI's credentials
FASSET_DEST.assumeRoleExternalId
DZOPTS
 .fileAssetPublishingExternalId   #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn

FASSET_NEW.deployTime             #BOOL (def: false). Delete from S3 after `cdk deploy`
                                  #E.g. Lambda FUNC are copied during deploy, i.e. can be deleted


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   ASSET MANIFEST CONTAINER    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSETS.dockerImages.SRC_ID        #IASSET. ASSET that is a 'DIR' with a Dockerfile, to `docker build` then upload to ECR
                                  #SRC_ID is '[IMAGE_NAME-]IMAGE_HASH'
CSYNTH.addDockerImageAsset
 (IASSET_NEW)->IASSET_RES         #

IASSET_SRC.directory
IASSET_NEW.directoryName          #'DIR' of Dockerfile
IASSET_SRC|NEW.dockerFile         #'FILENAME' (def: 'Dockerfile'). `docker build --file FILENAME`

IASSET_SRC|NEW.executable         #['COMMAND'[, 'ARG',...]]. Alternative to IASSET_SRC.directory
                                  #Must call `docker build --tag LOCAL_TAG` and returns 'LOCAL_TAG' on stdout
                                  #Cannot use IASSET_SRC.dockerBuildArgs|dockerBuildTarget|dockerOutputs|dockerFile

IASSET_SRC|NEW.dockerBuildArgs    #OBJ. `docker build --build-arg VAR=VAL`
IASSET_SRC|NEW.dockerBuildSsh     #STR. `docker build --ssh STR`
IASSET_SRC|NEW.dockerBuildSecrets #OBJ. `docker build --secret id=VAR,VAL`
IASSET_SRC|NEW.dockerBuildTarget  #STR. `docker build --target STR`
IASSET_SRC|NEW.dockerOutputs      #STR_ARR. `docker build --output=STR`
IASSET_SRC|NEW.networkMode        #STR. `docker build --network STR`
IASSET_SRC|NEW.platform           #STR. `docker build --platform STR`

IASSET_SRC.cacheFrom
IASSET_NEW.dockerCacheFrom        #CONTAINER_CACHE_ARR. `docker build --cache-from type=STR,VAR=VAL,...`
IASSET_SRC.cacheTo
IASSET_NEW.dockerCacheTo          #CONTAINER_CACHE. `docker build --cache-to type=STR,VAR=VAL,...`
CONTAINER_CACHE.type              #STR. Docker cache backend, e.g. 'inline', 'local', 'registry', 's3', 'azblob', 'gha'
CONTAINER_CACHE.params            #OBJ. Docker cache configuration

IASSET_NEW.assetName              #'IMAGE_NAME'
IASSET_NEW.sourceHash             #'IMAGE_HASH'

IASSET_DEST.repositoryName        #ECR 'REPO'
DZOPTS.imageAssetsRepositoryName  #Def: BSTR 'cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}'
IASSET_RES.repositoryName         #Same but as BSUB
IASSET_DEST.imageTag              #Docker 'IMAGE_TAG'
                                  #Is 'IMAGE_HASH'
IASSET_RES.imageTag               #Same but as BSUB
DZOPTS.dockerTagPrefix            #STR (def: '') prefixing 'IMAGE_TAG'

IASSET_RES.imageUri               #BSUB '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/REPO:IMAGE_TAG'

IASSET_DEST.assumeRoleArn         #Like STACK_APROPS.* but for uploading to ECR
DZOPTS.imageAssetPublishingRoleArn#Def: ROLE BSTR 'cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}'
                                  #Can be '': using CLI's credentials
IASSET_DEST.assumeRoleExternalId
DZOPTS
 .imageAssetPublishingExternalId  #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET STAGING MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new AssetStaging(PARENT_CONSTRUCT,
 'UASSET'[, UOPTS])               #UASSET. Copies FASSET local path to ASSEMBLY_DIR, for local debugging

cdk --staging                     #BOOL (def: true). Enables copy (does not impact bundling)
CONTEXT
 .aws:cdk:disable-asset-staging   #BOOL (def: false). Same but inverse

AssetStaging.clearAssetHashCache()#Clear cache, which is used for:
                                  #  - ASSET_HASH computation
                                  #  - TARGET_PATH creation

UOPTS|UASSET.sourcePath           #'SOURCE_PATH' to copy. Can be DIR|FILE
UOPTS.exclude                     #STR_ARR (def: []) to exclude from 'SOURCE_PATH'
                                  #Not with bundling
UOPTS.ignoreMode                  #What STR means with UOPTS.exclude:
                                  #  - 'glob' (def): 'GLOB'
                                  #  - 'git': .gitignore pattern
                                  #  - 'docker': .dockerignore pattern
UOPTS.follow                      #Whether to follow symlinks in 'SOURCE_PATH'
                                  #  - 'always'
                                  #  - 'never'
                                  #  - 'external' (def): if outside 'SOURCE_PATH_DIR'
                                  #  - 'internal-only': if inside 'SOURCE_PATH_DIR'
                                  #Not with bundling

XOPTS|CBUILDER|CSTAGE.assetOutdir #'ASSETS_DIR' (def: 'ASSEMBLY_DIR')
UASSET.absoluteStagedPath         #'TARGET_PATH', absolute. Is 'ASSETS_DIR/asset.ASSET_HASH.EXT'
                                  #'.EXT' is taken from 'SOURCE_PATH'
UASSET.relativeStagedPath
 (CSTACK)->'TARGET_PATH'          #Relative to 'ASSEMBLY_DIR'
UASSET.packaging                  #'zip' or 'file', depending on whether 'TARGET_PATH' is 'DIR'
                                  #No zipping: done by CPUBLISH instead
UASSET.isArchive                  #BOOL. True if 'TARGET_PATH' not DIR and its 'EXT' is ARCHIVE_EXT, i.e. *.tar[.gz]|tgz, *.zip or *.jar

UASSET.assetHash                  #'ASSET_HASH'. SHA256 hex hash.
UOPTS.assetHashType               #Input of 'ASSET_HASH', among:
                                  #  - 'source' (def if no UOPTS.assetHash):
                                  #     - input is 'SOURCE_PATH' recursive files path + contents
                                  #     - input also includes some UOPTS.*
                                  #  - 'output':
                                  #     - same but using 'TARGET_PATH'
                                  #     - only with bundling
                                  #  - 'custom' (def if UOPTS.assetHash):
                                  #     - input is UOPTS.assetHash STR
                                  #     - input also includes UOPTS.bundling
CONTEXT
 .@aws-cdk/core:assetHashSalt     #STR. Additional input to 'ASSET_HASH'
UOPTS.extraHash                   #Not with UOPTS.assetHashType 'custom'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ASSET STAGING BUNDLE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UOPTS.bundling                    #BOPTS. Transform 'SOURCE_PATH_DIR' using a Docker container
                                  #Docker container:
                                  #  - gets 'SOURCE_PATH_DIR' as /asset-input
                                  #  - must produce /asset-output, which is bound to 'BDIR' locally
                                  #'BDIR' is temporary DIR: the final output is moved to UASSET.absoluteStagedPath

CONTEXT.aws:cdk:bundling-stacks
--bundling-stacks                 #'GLOB' (def: '**'). Only bundle STACKs with a matching 'NODE_PATH'
BOPTS.local.tryBundle             #FUNC('BDIR', BOPTS)->BOOL. Do not bundle if false

BOPTS.outputType                  #Final 'DIR|FILE' location, among:
                                  #  - 'auto-discover' (def): any of the ones below
                                  #  - 'single-file': '/asset-output/FILE' (no siblings, not a DIR)
                                  #  - 'archived': same but FILE must end with '.ARCHIVE_EXT'
                                  #  - 'not-archived': '/asset-output' (must be a DIR)
BOPTS.bundlingFileAccess          #How SOURCE_PATH_DIR and BDIR are passed as /asset-input and /asset-output to `docker`
                                  #Either:
                                  #  - 'BIND_MOUNT' (def):
                                  #     - `docker run --rm -v SOURCE_PATH_DIR:/asset-input -v BDIR:/asset-output IMAGE`
                                  #  - 'VOLUME_COPY':
                                  #     - does:
                                  #        - `docker cp TEMP_CONTAINER_ID:SOURCE_PATH/. TEMP_CONTAINER2:/asset-input`
                                  #        - `docker run --rm --volume-from=TEMP_CONTAINER2 IMAGE`
                                  #        - `docker cp TEMP_CONTAINER2:/asset-output BDIR`
                                  #     - 'TEMP_CONTAINER2' is created with `docker run`:
                                  #        - IMAGE is public.ecr.aws/docker/library/alpine
                                  #        - uses `-v TEMP_VOLUME:/asset-input -v TEMP_VOLUME2:/asset-output`
                                  #           - TEMP_VOLUME[2] through `docker volume create|rm`
                                  #        - runs SHELL_COMMAND: mkdir -p /asset-input && chown -R USER /asset-input /asset-output
                                  #     - no BOPTS.network
                                  #     - slower but more portable

BOPTS.image                       #DOCKER_IMAGE
DockerImage.fromRegistry
 ('IMAGE')->DOCKER_IMAGE          #
DockerImage.fromBuild
 ('PATH'[, OPTS])->DOCKER_IMAGE   #Calls `docker build PATH` then uses the built 'IMAGE', which is 'cdk-OPTS_HASH'
OPTS.file                         #STR. `docker build -f`
OPTS.buildArgs                    #OBJ. `docker build --build-arg VAR=VAL`
OPTS.platform                     #STR. `docker build --platform`
OPTS.targetStage                  #STR. `docker build --target`
OPTS.cacheFrom                    #`docker build --cache-from`. OBJ_ARR: type STR, params OBJ
OPTS.cacheTo                      #`docker build --cache-to`. OBJ_: type STR, params OBJ

DOCKER_IMAGE                      #Utility to run `docker` programmatically
DOCKER_IMAGE.image                #'IMAGE'
ENVVAR CDK_DOCKER                 #'COMMAND' (def: 'docker')

DOCKER_IMAGE.run([OPTS])          #Calls `docker run --rm IMAGE`
[B]OPTS.entrypoint                #['COMMAND', 'ARG',...]. `docker run ... --entrypoint COMMAND ARG...`
[B]OPTS.command                   #'SHELL_COMMAND'. `docker run ... SHELL_COMMAND`
[B]OPTS.securityOpt               #STR. `docker --security-opt`
[B]OPTS.network                   #STR. `docker --network`
OPTS.platform                     #STR. `docker --platform`
[B]OPTS.user                      #STR. `docker -u`
                                  #Def with BOPTS: current, or '1000:1000' on Windows
[B]OPTS.volumesFrom               #STR_ARR. `docker --volumes-from`
[B]OPTS.volumes                   #`docker -v PATH:PATH2:[FLAG,...]`. OBJ_ARR:
                                  #  - hostPath 'PATH'
                                  #  - containerPath 'PATH2'
                                  #  - consistency BOOL (def: false): use FLAG 'delegated'
[B]OPTS.environment               #OBJ. `docker --env VAR=VAL`
[B]OPTS.workingDirectory          #'DIR'. `docker -w`
                                  #Def with BOPTS: '/asset-input'

DOCKER_IMAGE.cp                   #Calls `docker cp CONTAINER_ID:PATH PATH2`
 ('PATH'[, 'PATH2'])->'PATH2'     #Create temporary container, i.e. `docker create IMAGE`, and `docker rm -v CONTAINER_ID` at the end
                                  #Def 'PATH2': '/TMPDIR/cdk-docker-cp-RANDOM'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET STAGING FILE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-s3-assets                     #Package in same monorepo
new Asset(PARENT_CONSTRUCT,HFOPTS)#HFASSET. Like FASSET, but first uses AssetStaging
                                  #Inherits CONSTRUCT
                                  #Should be used to add FASSETs in CAPP

HFOPTS.*                          #Like UOPTS.*
HFOPTS.path                       #'SOURCE_PATH' of asset. Can be DIR|FILE
HFASSET.isBundled                 #BOOL. Whether HFOPTS.bundling is used
HFASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as FASSET_NEW.sourceHash
HFASSET.assetPath                 #Like UASSET.absoluteStagedPath, but relative to 'ASSEMBLY_DIR'
                                  #Used as FASSET_NEW.fileName
HFASSET.isFile                    #BOOL. Whether UASSET.packaging 'file'
                                  #UASSET.packaging is also used as FASSET_NEW.packaging
HFASSET.isZipArchive              #Like UASSET.isArchive

HFOPTS.deployTime                 #Like FASSET_NEW.deployTime
HFASSET.s3BucketName              #Like FASSET_RES.bucketName
HFASSET.s3ObjectKey               #Like FASSET_RES.objectKey
HFASSET.s3ObjectUrl               #Like FASSET_RES.s3ObjectUrl
HFASSET.httpUrl                   #Like FASSET_RES.httpUrl

HFASSET.bucket                    #S3 CBUCKET

HFOPTS.readers???
HFASSET.grantRead(???) (https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-s3-assets/lib/asset.ts#L218) TODO: IAM first

HFASSET.addResourceMetadata       #Adds the following TEMPLATE.Resources.RESOURCE.Metadata:
 (CFNRESOURCE, 'PROP')            #  - 'aws:asset:property': 'PROP'
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:is-bundled': HFASSET.isBundled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ASSET STAGING CONTAINER    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-ecr-assets                    #Package in same monorepo
new DockerImageAsset              #HIASSET. Like IASSET, but first uses AssetStaging, using a `Dockerfile`
 (PARENT_CONSTRUCT, 'HIASSET',    #Inherits CONSTRUCT
 HIOPTS)                          #Should be used to add Dockerfile-based IASSETs in CAPP

HIOPTS.*                          #Like UOPTS.*
HIOPTS.dir                        #'SOURCE_PATH_DIR'
                                  #Resulting 'TARGET_PATH_DIR' is used as IASSET_NEW.directoryName
HIOPTS.exclude                    #Like UOPTS.exclude but always:
                                  #  - include and use SOURCE_PATH_DIR/.dockerignore, if exists
                                  #  - include HIOPTS.file
                                  #  - exclude ASSEMBLY_DIR
HIOPTS.ignoreMode                 #Like UOPTS.ignoreMode except default is 'docker'
HIOPTS.extraHash                  #Cannot be specified. Instead, always use HIOPTS.PROP except if HIOPTS.invalidation.PROP false
HIASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as IASSET_NEW.sourceHash

HIOPTS.*                          #Like IASSET_NEW.docker*
HIOPTS.assetName                  #Like IASSET_NEW.assetName

HIOPTS.networkMode                #Like IASSET_NEW.networkMode, except must use one of the following
NetworkMode.DEFAULT               #'default'
NetworkMode.HOST                  #'host'
NetworkMode.NONE                  #'none'
NetworkMode
 .fromContainer('CONTAINER_ID')   #'container:CONTAINER_ID'
NetworkMode.custom(STR)           #STR

HIOPTS.platform                   #Like IASSET_NEW.platform, except must use one of the following
Platform.LINUX_AMD64              #'linux/amd64'
Platform.LINUX_ARM64              #'linux/arm64'
Platform.custom(STR)              #STR

HIASSET.imageUri                  #Like IASSET_RES.imageUri
HIASSET.imageTag                  #Like IASSET_RES.imageTag

HIASSET.repository                #ECR CREPO

HIASSET.addResourceMetadata       #Adds the following TEMPLATE.Resources.RESOURCE.Metadata:
 (CFNRESOURCE, 'PROP')            #  - 'aws:asset:property': 'PROP'
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:dockerfile-path': HIOPTS.file
                                  #  - 'aws:asset:docker-*': HIOPTS.* related to IASSET_NEW.docker*, but dash-case'd


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ASSET STAGING TARBALL     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-ecr-assets                    #Package in same monorepo
new TarballImageAsset             #HTASSET. Like IASSET, but first uses AssetStaging, using an 'IMAGE.tar'
 (PARENT_CONSTRUCT, 'HTASSET',    #Inherits CONSTRUCT
 HIOPTS)                          #Should be used to add IMAGE.tar-based IASSETs in CAPP

HTOPTS.tarballFile                #'IMAGE.tar', created by `docker save`
                                  #IASSET.executable calls `docker load` on resulting 'TARGET_PATH'

HTASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as IASSET_NEW.sourceHash

HTASSET.imageUri                  #Like IASSET_RES.imageUri
HTASSET.imageTag                  #Like IASSET_RES.imageTag

HTASSET.repository                #ECR CREPO


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ASSET PUBLISH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-assets                        #Package in same monorepo
                                  #CLI + programmatic

cdk-assets publish [STR...]       #Calls CPUBLISH.publish()
                                  #STR... selects only specific CASSETS, with same syntax as DestinationPattern.parse()
--path|-p                         #'ASSEMBLY_DIR' (def: '.')
--profile                         #AWS 'PROFILE'

new AssetPublishing(CASSETS, OPTS)#CPUBLISH. Build ASSETS and publish them to S3|ECR

CPUBLISH.publish()->>             #Calls buildEntry() + publishEntry() on all CASSETS
cdk deploy --asset-parallelism
OPTS.publishInParallel            #BOOL (def: false). Whether CASSETS are processed serially or in parallel
OPTS.buildAssets                  #BOOL (def: true). Whether to call buildEntry()
OPTS.publishAssets                #BOOL (def: true). Whether to call publishEntry()

CPUBLISH.buildEntry               #Creates Docker IMAGE from IASSET locally:
 (CASSET)->>BOOL                  #  - `docker login`
                                  #  - `docker build --tag LOCAL_TAG`
                                  #  - `docker tag LOCAL_TAG ECR_REPO_URI:IMAGE_TAG`
                                  #  - LOCAL_TAG is 'cdkasset-SRC_ID'
                                  #With FASSET: noop

CPUBLISH.publishEntry             #Publish local files to S3, or Docker IMAGE to ECR
 (CASSET)->>BOOL                  #With FASSET: upload S3 OBJECT
                                  #With IASSET: `docker push ECR_REPO_URI:IMAGE_TAG`

CPUBLISH.isEntryPublished         #Whether publishEntry() already called
 (CASSET)->>BOOL                  #With FASSET: check if S3 OBJECT exists
                                  #With IASSET: check if ECR IMAGE exists

OPTS.aws                          #Must be new DefaultAwsClient(['PROFILE'])
                                  #If PROFILE, sets ENVVAR AWS_PROFILE

OPTS.quiet                        #BOOL (def: false)
                                  #Print `docker` commands stdout|stderr

CPUBLISH.message                  #Current log 'MESSAGE'
CPUBLISH
 .progressListener.onPublishEvent #On CPUBLISH.message change
 ('EVENT_TYPE', CPUBLISH)         #'EVENT_TYPE' is 'start', 'success', 'fail', 'check', 'found', 'cached', 'build', 'upload', 'debug'

CPUBLISH.percentComplete          #NUM percentage of CASSETs successfully processed with CPUBLISH.buildEntry|publish[Entry]()
CPUBLISH.failures                 #OBJ_ARR: error ERROR, asset CASSET
                                  #Failed invocations of CPUBLISH.buildEntry|publish[Entry]()
CPUBLISH.hasFailures              #BOOL. CPUBLISH.failures.length !== 0
OPTS.throwOnError                 #BOOL. If true (def), throw if any failure
CPUBLISH.abort()                  #Abort CPUBLISH.buildEntry|publish[Entry]() and make them return false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INTEGRITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Manifest.saveIntegManifest
 (ITG, 'PATH')                    #Save to 'PATH', as JSON
Manifest.loadIntegManifest
 ('PATH')->ITG                    #Inverse

ITG.version                       #STR
ITG.enableLookups                 #BOOL
ITG.synthContext.VAR              #'VAL'
ITG.testCases.TEST                #ITG_TEST. Not documented yet???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BOOTSTRAP           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk bootstrap --qualifier
CONTEXT
 .@aws-cdk/core:bootstrapQualifier
DZOPTS.qualifier                  #'BOOTSTRAP_MID'
CSYNTH.bootstrapQualifier         #Def: 'hnb659fds'

MANIFEST_APROPS|STACK_APROPS
|STACK_CARTIFACT|LOOKUP_ROL|DZOPTS#STR. SSM path to bootstrap's format version
.bootstrapStackVersionSsmParameter#Def: BSTR '/cdk-bootstrap/${Qualifier}/version'
MANIFEST_APROPS|STACK_APROPS
 |STACK_CARTIFACT|LOOKUP_ROLE     #NUM. Currently always 6
 .requiresBootstrapStackVersion   #Minimum bootstrap format version supported by cdk

TEMPLATE                          #PARAM of type 'AWS::SSM::Parameter::Value<String>'
 .Parameters.BootstrapVersion     #Value is bootstrapStackVersionSsmParameter
                                  #Only meant to be checked by following RULE
                                  #Created by `cdk synth`
TEMPLATE                          #RULE that ensure that ensure that BootstrapVersion PARAM >= requiresBootstrapStackVersion NUM
 .Rules.CheckBootstrapVersion     #Created by `cdk synth`
DZOPTS
 .generateBootstrapVersionRule    #BOOL (def: true). If false, do not generate TEMPLATE.*.*BootstrapVersion

BSTR                              #STR with following template variables
BSUB                              #Like BSTR but resolved to a STR_TK of { Fn::Sub: BSTR } if account|region is agnostic
${AWS::Partition}                 #'PARTITION'
${AWS::AccountId}                 #CSTACK.accountId, unless agnostic (kept as is)
${AWS::Region}                    #CSTACK.region, unless agnostic (kept as is)
${Qualifier}                      #'BOOTSTRAP_MID'

cdk bootstrap|deploy|import
--toolkit-stack-name              #'STACK' (def: 'CDKToolkit') created by `cdk bootstrap`

cdk bootstrap ['ENVIRONMENT'...]  #Deploy the "toolkit", a STACK needed for deploys with:
                                  #  - S3 BUCKET for the TEMPLATEs
                                  #  - ROLEs
                                  #Def 'ENVIRONMENT': current one
--execute                         #Like cdk import
--previous-parameters             #Like cdk deploy

--bootstrap-bucket-name|-b
--toolkit-bucket-name             #S3 'BUCKET'. Must not exist yet
--bootstrap-kms-key-id            #KMS_KEY_ID used with BUCKET
--bootstrap-customer-key          #BOOL (def: false). Create a S3 x-amz-server-side-encryption-customer-key [C] used with BUCKET
--public-access-block
 -configuration                   #BOOL (def: true). Use S3 PUBLIC_BLOCK

--tags|-t                         #OBJ. STACK.Tags

--cloudformation-execution        #POLICY_ARN_ARR attached to the ROLE deploying
 -policies                        #Def: allow all
--trust                           #'ACCOUNT_ID'_ARR used as Principal in the POLICY, for any PACTIONs
--trust-for-lookup                #Same but only for lookupRoleArn

--show-template                   #BOOL (def: false). Instead of actual bootstrapping, print the current CLI's bootstrapping template to stdout for customization
--template                        #STR. Use the template from the given file instead of the built-in one
                                  #Use --show-template to obtain an example
--force|-f                        #BOOL. If false (def), fails if deploy would downgrade template version


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     PERMISSIONS BOUNDARY      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSOPTS|SOPTS.permissionsBoundary  #CSTACK_PERM_BOUNDARY
                                  #Set RESPROP PermissionsBoundary PERM_BOUNDARY_ARN for all USERs|ROLEs of the STACK
PermissionsBoundary
 .fromName('PERM_BOUNDARY'_BSTR)
 ->CSTACK_PERM_BOUNDARY           #
PermissionsBoundary
 .fromArn(PERM_BOUNDARY_ARN_BSTR)
 ->CSTACK_PERM_BOUNDARY           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              EC2              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.availabilityZones          #'AZ'_ARR
                                  #Retrieved using ec2 describeAvailabilityZones() (with State 'available')
                                  #Performed by ContextProvider (dummy 'AZ': 'dummy1a|b|c')
                                  #If CTACK.account|region agnostic, returns either:
                                  #  - CONTEXT.aws:cdk:availability-zones:fallback
                                  #  - [{ Fn::Select: [0, { Fn::GetAZs: '' }] },
                                  #     { Fn::Select: [1, { Fn::GetAZs: '' }] }] as a STR_TK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CUSTOM CONSTRUCTS ==>             #When developing custom CONSTRUCTs, should put as:
                                  #  - devDependencies + peerDependencies (with ^): constructs, aws-cdk-lib, used @aws-cdk/*
                                  #  - devDependencies (with ^): jsii, aws-cdk
