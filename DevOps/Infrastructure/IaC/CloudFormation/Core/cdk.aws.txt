
       
   CDK  
       



TODO:
  - check currently documented SERVICEs:
     - CDK main code:
        - s3 (there are several directories)
           - https://github.com/aws/aws-cdk/blob/8ce02838ba5033a6b35123a34e444c4f35350975/packages/aws-cdk-lib/aws-lambda-event-sources/lib/s3.ts
              - https://github.com/aws/aws-cdk/tree/8ce02838ba5033a6b35123a34e444c4f35350975/packages/aws-cdk-lib/aws-lambda-event-sources#s3
        - api-gateway (there are several directories)
           - must also do: CloudFormation
           - https://github.com/aws/aws-cdk/blob/8ce02838ba5033a6b35123a34e444c4f35350975/packages/aws-cdk-lib/aws-lambda-event-sources/lib/api.ts
     - list of aws_general doc, "CDK" part
        - IAM, STS, CloudWatch Metric|Alarm|Dashboard|Logs, CloudTrail, Lambda, Glacier, S3, API Gateway
  - https://aws.amazon.com/solutions/
     - https://github.com/awslabs/aws-solutions-constructs

TODO:
  - AWS CDK
  - Powertools for Lambda
     - https://github.com/aws-powertools/powertools-lambda-typescript
     - https://github.com/aws-powertools/powertools-lambda-layer-cdk
  - Application Composer
     - Move CloudFormation designer to own doc, and compare it with Application Composer
     - also https://github.com/aws-samples/aws-cdk-stack-builder-tool
     - https://aws.amazon.com/about-aws/whats-new/2023/11/aws-lambda-view-export-functions-template-aws-application-composer/
     - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/app-composer-for-cloudformation.html
  - AWS SAM
     - AWS::Serverless TRANSFORM:
        - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html
        - AWS::Serverless::* in https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/package.html
     - https://github.com/threadheap/serverless-ide-vscode
     - https://github.com/sceptre/sceptre-sam-handler
     - https://www.prisma.io/docs/guides/deployment/serverless/deploy-to-aws-lambda#loading-required-files
     - https://github.com/aws-actions/setup-sam
     - https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/aws-sam
     - check difference with `serverless` framework
  - Cloud Control API

VERSION ==>                       #2.114.1
                                  #Monorepo, i.e. same version for all packages

ENVVAR CDK_CLI_VERSION            #'X.Y.Z'

ENVVAR CDK_DISABLE_VERSION_CHECK  #BOOL (def: !process.stdout.isTTY). If false, prints warning if new version available
CDK_HOME/cache/repo-version-ttl   #Caches last version for 1d

UNIT TESTING ASSERTIONS ==>       #See cdk assertions doc
INTEGRITY TESTING ASSERTIONS ==>  #See integ-tests doc

SUMMARY ==>                       #CLI: auth, init, bootstrap, synth, deploy, list, destroy, diff
                                  #Bootstrap stack: environment, roles, bucket|kms|ECR, version check
                                  #Deploy: hotswap, deployRole, watch, resource logs, import
                                  #Construct: tree, id|NID|AID|CID|SID|LID|PhysicalResourceId, custom, stage|app
                                  #Context: cache (ContextProvider, lookupRole) vs config
                                  #Errors: notices, annotations
                                  #Environment: account, region (facts), stage|stack|resource, agnostic
                                  #Stack: executionRole, nested, version-reporting, dependencies, set
                                  #Stack elements: parameter, rule, output (file), condition, mapping, macro
                                  #Resource: L1 (generation), L2, override, tags
                                  #Custom resource: core, internal, high-level, action, trigger, extensions, CLI layer
                                  #CloudFormation: include, migrate
                                  #Resolvable: resolve, lazy vs not, tokens (concat), functions
                                  #References: Ref|GetAtt, built-in param, secret, cross-stack, cross-region, cross-account
                                  #Utilities: ARN, duration|expiration, timezone, size
                                  #Synth: auto, aspect, validation, policy
                                  #Assembly: manifest, artifacts, tree, stack (definition, template, metadata), assets, nested assembly
                                  #Assets: manifest, metadata, S3|ECR, command, publish, publishingRole, deployTime, staging, bundling, esbuild

PROS FROM CLOUDFORMATION ==>      #Imperative
                                  #Components, including common cross-service resources (policies, roles, metrics, etc.)
                                  #Deploy UX (CLI, hotswap|watch, bootstrap roles)
                                  #Grouping stacks
                                  #Setting parameters
                                  #S3|ECR assets (including Lambda code)
                                  #Lookup cache
                                  #Custom resource helpers
                                  #Cross-stack|region|account references


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-cdk                           #CLI

aws-cdk-lib                       #Programmatic library to use in programs
                                  #Includes both core and all SERVICEs
aws-cdk-lib/aws-SERVICE           #Single SERVICE
aws-cdk-lib/aws-SERVICE-*         #Additional packages for some SERVICEs:
                                  #  - `patterns`: L3 CONSTRUCTs
                                  #  - `actions|targets|destinations|event-sources`: integration to other SERVICEs
                                  #  - others: utilities

JSII ==>                          #Underlying tool allowing cdk codebase to be coded only in TypeScript,
                                  #but built into multiple languages: TypeScript/Python/Java/Go/.NET
                                  #Can be used when writing CONSTRUCT library or validation plugins, to make it available to those languages too
                                  #Not documented yet

DEPENDENCIES ==>                  #For custom construct, should put as devDependencies + peerDependencies (with ^):
                                  #  - constructs
                                  #  - aws-cdk-lib
                                  #  - used @aws-cdk/*
                                  #Normal applications should instead set those as production dependencies

aws-cdk-action                    #GitHub action running `cdk ...`
                                  #Uses Docker container with latest `cdk`
                                  #Not very useful, compared to just running as a script, and installing `cdk` through package.json
                                  #Version 1.6.2
INPUTS.args                       #'ARGS ...' passed to `cdk`

aws-cdk-v2-github-actions         #GitHub action running `cdk ...`
                                  #Original repo is archived, and there is a low-key fork
                                  #Runs `npm install` on `typescript` and `aws-cdk`, which is bad since this should be done by user instead
                                  #Create PR comment with `cdk` output, in a slightly hacky way
                                  #Not documented yet

CLASS.isCLASS(VAL)->BOOL          #Many CLASSes have this method, like `instanceof` but cross-realm
                                  #Not documented


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        BEST PRACTICES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PARAM|COND|MACRO                  #Happen at deploy-time
                                  #Instead, prefer synth-time logic: imperative language, CONTEXT

SYNC I/O ==>                      #Due to adding logic inside constructors, logic must almost always be sync

APP ==>                           #CAPP. Sets of related STACKs, usually for a given repository
                                  #  - should be in the same repository as the application non-infrastructure logic
                                  #Single STACK: RESOURCEs always deployed together
                                  #  - i.e. multiple STACKs: when RESOURCEs sometimes deployed separately

STAGING ENVIRONMENT ==>           #For dev, staging, production, etc.
                                  #Can:
                                  #  - one CAPP per staging environment
                                  #  - one CSTACK instance per staging environment
                                  #  - pass staging environment name as CVAR:
                                  #     - prefix CSTACK name, either:
                                  #        - directly
                                  #        - by instantiating child CAPP (preferred)
                                  #     - preferred because more dynamic and less boilerplate
                                  #Those all result in different 'STACK' names
                                  #  - CDK automatically uses it in PhysicalResourceIds
                                  #If possible, should have one ACCOUNT per staging environment

INPUT ==>                         #Instead of PARAM|COND, should use either:
                                  #  - ENVVARs
                                  #  - CVARs (preferred), with values set either:
                                  #     - only for current staging environment, i.e. as CONTEXT.*
                                  #        - preferred because more dynamic, and allows `cdk --context`, not only `cdk.json`
                                  #     - for each staging environment, i.e. as CONTEXT.STAGING_ENV.*

CUSTOM CONSTRUCT ==>              #Library extending from `Construct`, directly or not
                                  #Recommended to be its own library|repository
                                  #CDK is optimized for sharing re-usable components, bundling|wrapping resources
                                  #  - e.g. through automatic ID suffixing (CID|SID)
@aws-cdk/example-construct-library#Example custom construct library, for scaffolding

CONSTRUCT HUB ==>                 #Registry of custom constructs
                                  #Includes cdk8s and cdktf
                                  #All use jsii
                                  #Automatically shows API docs, thanks to jsii + TypeScript JSDoc
                                  #Publishing:
                                  #  - automatic, providing published on npm
                                  #  - npm keyword `awscdk|cdk8s|cdktf` + any of the known categories (see list online)
                                  #  - must use jsii (`.jsii` in root DIR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EXPERIMENTAL          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CVAR FFLAG                        #BOOL. Flag for an experimental feature
                                  #Def:
                                  #  - true if not experimental anymore
                                  #  - false otherwise
                                  #Set to true in cdk.context.json by `cdk init` if "recommended" FFLAG

FeatureFlags.of(CONSTRUCT)->FFLAGS#
FFLAGS.isEnabled('FFLAG')->BOOL   #

EXPORTED_VARBetaNUM               #Beta features in aws-cdk-lib have variable suffix *BetaNUM
                                  #Mostly not documented

@aws-cdk-lib/aws-SERVICE-alpha    #Library for alpha features not integrated yet to aws-cdk-lib/aws-SERVICE
                                  #Mostly not documented


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI MAIN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk                               #CLI. Package `aws-cdk`

--no-color                        #BOOL (def: false)
ENVVAR CI=true
--ci                              #BOOL (def: false). Redirect stderr to stdout instead

--verbose|-v                      #NUM (def: 0). Debug logs
                                  #Can be repeated (i.e. 2) to also log any AWS API call

cdk --plugin|-p                   #'PATH|MODULE'_ARR exporting PLUGIN
PLUGIN.version                    #'1'
PLUGIN.init(PHOST)                #Called on load

cdk doc[s]                        #Open CDK docs
--browser|-b                      #'COMMAND' to open the browser
                                  #Can use %u for the file to open
                                  #Def: xdg-open %u (Linux), open %u (macOS), start %u (Windows)

STACKS                            #Select STACKs by their NID
                                  #Can contain GLOB
                                  #Only for the STACKs in the current CAPP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLI CONFIG           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG                            #Either (in priority order):
                                  #  - ./cdk.json
                                  #  - ~/.cdk.json
                                  #Same options as CLI flags, but:
                                  #  - camelCase
                                  #  - paths are relative to file itself
                                  #  - repeatable -> ARR
                                  #  - VAR=VAL, repeatable -> OBJ
                                  #  - --FLAG=BOOL or --[no-]FLAG -> BOOL
                                  #  - no: --verbose|ci
                                  #Can also use ENVVAR CDK__VARR

ENVVAR CDK_HOME                   #Def: ~/.cdk

cdk doctor                        #Print CDK version, ENVVAR AWS_*|CDK_*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI AUTH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR AWS_[DEFAULT_]PROFILE
--profile                         #'PROFILE' (def: 'default') (see AWS config doc)

ENVVAR HTTPS_PROXY
--proxy                           #'URL'

ENVVAR AWS_CA_BUNDLE
--ca-bundle-path                  #'PATH' to CA certificates for HTTPS, in PEM format

--ec2creds|-i                     #BOOL (def: false). Fetch credentials from EC2 instance

PHOST
 .registerCredentialProviderSource#Custom AWS credentials
 (...)                            #Not documented yet

CDK_HOME/cache
 /accounts_partitions.json        #Caches ACCOUNT_ID|PARTITION of current ACCESS_KEY_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI INIT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk init [SCAFFOLDER]             #Scaffold files in cwd
                                  #Uses cwd 'DIR' name as project name
                                  #SCAFFOLDER can be:
                                  #  - app (def): empty app
                                  #  - sample-app: same but with an example SNS TOPIC subscribed to an SQS QUEUE
                                  #  - lib: CONSTRUCT library (only 'typescript')

--language|-l                     #Among: 'typescript', 'javascript', 'csharp', 'fsharp', 'go', 'java', 'python'

--generate-only                   #BOOL. If false (def), also:
                                  #  - git init + first commit (unless git already initialized)
                                  #  - install dependencies

--list                            #BOOL (def: false). List available SCAFFOLDERs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CLI BOOTSTRAP         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk bootstrap ['ENVIRONMENT'...]  #Deploy BOOTSTRAP_STACK, one per ENVIRONMENT
                                  #Can also update existing one
                                  #ENVIRONMENT can be 'GLOB': matched against current CAPP's CSTACK's ENVIRONMENTs
                                  #Def 'ENVIRONMENT': '**'
--execute                         #BOOL (def: true). Whether to call ExecuteChangeSet()
--tags|-t                         #OBJ_ARR. BOOTSTRAP_STACK.Tags
                                  #In CONFIG file, OBJ_ARR: Key 'TAG', Value 'VAL'
--trust                           #'ACCOUNT_ID'_ARR to allow to assume any BOOTSTRAP_ROLE
                                  #Current ACCOUNT always included

BOOTSTRAP_STACK                   #STACK used by `cdk` CLI. Also called "toolkit"
                                  #Includes ROLEs, S3 BUCKET and KMS KEY|ALIAS (for FASSET), ECR REPO (for IASSET), SSM parameter (for BootstrapVersion)

cdk bootstrap|deploy|import
--toolkit-stack-name              #BOOTSTRAP 'STACK' name (def: 'CDKToolkit')

cdk bootstrap --qualifier
CVAR
 @aws-cdk/core:bootstrapQualifier
DOPTS.qualifier                   #'BOOTSTRAP_MID'. Used as namespace to BOOTSTRAP_STACK's RESOURCEs
CSYNTH.bootstrapQualifier         #Def: 'hnb659fds'

MANIFEST_APROPS|STACK_APROPS      #STR. SSM parameter with BOOSTRAP_STACK format version
 |STACK_CARTIFACT|ASSETS_CARTIFACT#Incremented each time a new release of `cdk` changes BOOTSTRAP_STACK, even if not breaking
 |LOOKUP_ROLE|DOPTS               #Is BOOTSTRAP_STACK.Resources.CdkBootstrapVersion, exported as STACK OUTPUT 'BootstrapVersion'
.bootstrapStackVersionSsmParameter#Def: '/cdk-bootstrap/${Qualifier}/version'. Can be BSTR
                                  #Current version: 19
MANIFEST_APROPS|STACK_APROPS
 |STACK_CARTIFACT|ASSETS_CARTIFACT#NUM. Minimum BootstrapVersion supported by `cdk`, i.e. last one with breaking change
 |LOOKUP_ROLE                     #Makes `cdk deploy|import` fail if BootstrapVersion is lower
 .requiresBootstrapStackVersion   #Currently: 6

TEMPLATE                          #PARAM of type 'AWS::SSM::Parameter::Value<String>'
 .Parameters.BootstrapVersion     #Value is bootstrapStackVersionSsmParameter
                                  #Only meant to be checked by following RULE
                                  #Created by `cdk synth`
TEMPLATE                          #RULE that ensures BootstrapVersion PARAM >= requiresBootstrapStackVersion NUM
 .Rules.CheckBootstrapVersion     #Created by `cdk synth`
DOPTS.generateBootstrapVersionRule#BOOL (def: true). If false, do not generate TEMPLATE.*.*BootstrapVersion

BOOTSTRAP_TEMPLATE                #BOOTSTRAP_STACK's PARAM only meant as a change ID, with default value 'AWS CDK: Default Resources'
 .Parameters.BootstrapVariant     #I.e. must be changed each time BOOTSTRAP_STACK is customized (including the first time)
                                  #  - this prevents customization from being overwritten when there is a new BootstrapVersion
                                  #I.e. BootstrapVersion is for changes done by `cdk` itself, BootstrapVariant by user

cdk bootstrap
--force|-f                        #BOOL. If false (def), fails if:
                                  #  - customizing BOOTSTRAP_STACK but either:
                                  #     - downgrading BootstrapVersion
                                  #     - not changing BootstrapVariant
                                  #  - TEMPLATE and STACK.* did not change
--show-template                   #BOOL (def: false). Dry run. Print BOOTSTRAP STACK 'TEMPLATE'
--json|-j                         #BOOL (def: false). With --show-template, output as JSON instead of YAML
--template                        #'TEMPLATE'. Use previous output produced by --show-template (without --json), after possible customization


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI SYNTH           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk synth[esize] [STACKS...]      #Produce ASSEMBLY using CAPP.synth()
                                  #Def: all STACKs
                                  #Automatically called by `cdk diff|deploy|import|destroy|list|metadata`, which are the commands using ASSEMBLY
--quiet|-q                        #BOOL. If false (def), print TEMPLATE to stdout too, if only one STACK

cdk diff|deploy|import|destroy
 |list|metadata                   #
--build                           #'SHELL_COMMAND' run before `cdk synth` to build the CAPP
--app|-a                          #'SHELL_COMMAND' run during `cdk synth` to execute the CAPP
                                  #CAPP.synth() is run using AOPTS.autoSynth true
                                  #E.g. with TypeScript: `ts-node PATH.ts`
                                  #I.e. this also decide on the CAPP being used
                                  #Can also be:
                                  #  - 'PATH.js' (not PATH.ts)
                                  #  - 'ASSEMBLY_DIR': avoid `cdk synth`


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLI DEPLOY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk deploy [STACKS...]            #Deploy STACKS to CloudFormation
                                  #Def: current STACK, if only one
--all                             #BOOL (def: false). Deploy all STACKs

--method|-m                       #Deploy using:
                                  #  - 'direct': UpdateStack() (no progress info)
                                  #  - 'prepare-change-set': CreateChangeSet()
                                  #  - 'change-set' (def): CreateChangeSet() + ExecuteChangeSet()
                                  #Automatically delete empty CHANGESETs
--change-set-name                 #'CHANGESET' (def: 'cdk-deploy-change-set')
--no-rollback|-R                  #BOOL. STACK.DisableRollback BOOL (def: false)
                                  #Must not be true if some RESOURCEs are replaced
                                  #Only with --method 'direct'

--notification-arns               #SNS TOPIC_ARN_ARR. STACK|CHANGESET.NotificationARNs
--progress                        #How to display STACK EVENTs among:
                                  #  - 'events' (def if Windows, or not TTY, or --verbose, or --concurrency >1): 1 per line, no progress bar, 5s poll
                                  #  - 'bar' (def otherwise): single line being updated, with progress bar, 2s poll

--hotswap                         #BOOL (def: false). Update RESOURCEs by making direct calls to SERVICEs instead of using CloudFormation
                                  #If some properties are not hotswappable, ignore them
                                  #Only supports !Ref|GetAtt|ImportValue|Join|Select|Split|Sub
                                  #Does not support TEMPLATE.Outputs
                                  #Only for updated RESOURCEs, not created|deleted ones
                                  #Only for:
                                  #  - Lambda: FUNC[_VERSION].Code|Environment|Description, ALIAS.FunctionVersion
                                  #  - AppSync, CodeBuild, StepFunctions, ECS: some of it
                                  #Meant for speed, for development only (since it introduces drift)
--hotswap-fallback                #BOOL (def: false). Same but if some properties are not hotswappable, do a normal deploy instead

STACK_APROPS|STACK_CARTIFACT      #'ROLE_ARN' used to call CloudFormation API during `cdk deploy|import` for this STACK. Can be BSTR
 .assumeRoleArn                   #Can be '': using CLI's credentials
DOPTS|CSYNTH.deployRoleArn        #Def: BOOTSTRAP_ROLE 'deploy', which is BOOTSTRAP_STACK.Resources.DeploymentActionRole:
                                  #  - allowed cloudformation:*: CreateChangeSet|DeleteChangeSet|ExecuteChangeSet|DescribeChangeSet
                                  #    CreateStack|UpdateStack|DeleteStack|DescribeStacks,
                                  #    DescribeStackEvents|GetTemplate[Summary], UpdateTerminationProtection
                                  #  - allowed s3:GetObject*|GetBucket*|List* on FASSET 'BUCKET'
                                  #  - allowed s3:GetObject*|GetBucket*|List*, s3:Abort*|DeleteObject*|PutObject*
                                  #     - only if cross-account, for CodePipeline
                                  #  - allowed iam:PassRole to BOOTSTRAP_ROLE 'cfn-exec'
                                  #  - allowed ssm:GetParameter on BootstrapVersion
STACK_APROPS|STACK_CARTIFACT
 .assumeRoleExternalId
DOPTS.deployRoleExternalId        #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI WATCH           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk --watch                       #BOOL (def: false). Deploy on file change
                                  #Implies --hotswap-fallback by default
cdk watch ...                     #Same as deploy --watch ...
                                  #Cannot use --all --method --*parameters --outputs-file --notification-arns --asset-* --require-approval

CONF.watch.include                #'GLOB'. Def: **
CONF.watch.exclude                #'GLOB'. Always exclude .*, node_modules, ASSEMBLY_DIR

--logs                            #BOOL (def: true). Print CloudWatch Logs LLEVENTs from all RESOURCEs (using FilterLogEvents())
                                  #Uses all LOG_GROUPs defined in TEMPLATE.Resources.*
                                  #  - including one implicitly created by Lambda FUNC
                                  #  - excluding ones related to CloudTrail, CodeBuild or EC2 FlowLog
                                  #Requires --watch


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLI IMPORT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk import [STACKS]               #Do a CHANGESET import
                                  #Imported RESOURCEs use DeletionPolicy 'RETAIN' by default
                                  #Does not work with nested STACKs
                                  #Def: current STACK, if only one
--change-set-name
--no-rollback|-R
--progress                        #Like cdk deploy
--execute                         #BOOL (def: true). Whether to call ExecuteChangeSet()

--resource-mapping|-m             #'PATH.json' of RESOURCEs to import, as { 'RESOURCE': IMPORTED_RESPROP, ... }
                                  #Def: interactive prompt based on STACK_TEMPLATE.ResourceIdentifierSummaries
--record-resource-mapping|-r      #'PATH.json'. Same but as output, instead of performing the import

--force|-f                        #BOOL. If false (def), only allow adding RESOURCEs, not updating|deleting them


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLI STACKS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk list|ls [STACKS...]           #List STACKs
                                  #Def: all STACKs
--long|-l                         #BOOL (def: false). Print 'STACK', ACCOUNT_ID and REGION

cdk destroy [STACKS...]           #Delete STACKs
                                  #Def: current STACK, if only one
--all                             #BOOL (def: false). All STACKs
--force|-f                        #BOOL. If false (def), confirm first

cdk diff
cdk deploy --require-approval     #See cdk-diff doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CONSTRUCT TREE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #npm package (version 10.3.0)
                                  #Peer dependency of `aws-cdk-lib`

new Construct                     #CONSTRUCT. Base class for most classes
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #Relationship with PARENT_CONSTRUCT form a "CONSTRUCT|scope tree"
                                  #  - different from "dependencies tree", which expresses execution order
                                  #Usually initialized within constructor of PARENT_CONSTRUCT
                                  #  - i.e. passes `this` and parent is extending from its base class
                                  #Constructor has side-effect:
                                  #  - add to PARENT_CONSTRUCT, in CONSTRUCT tree
                                  #  - i.e. not always assigned to a variable
                                  #Root has PARENT_CONSTRUCT undefined and 'CONSTRUCT' empty STR
                                  #  - usually CAPP|CSTAGE
new Construct(...CARGS)           #Shortcut notation for (PARENT_CONSTRUCT, 'CONSTRUCT')
CONSTRUCT.node                    #NODE

NODE.scope                        #Current CONSTRUCT
                                  #If root: undefined
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root, ending with PARENT_CONSTRUCT
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Resource' or 'Default'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')
 [->CONSTRUCT]                    #Same but undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONSTRUCT ID          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NODE.id                           #'CONSTRUCT' passed to constructor
                                  #No / (converted to --)
                                  #undefined if root
                                  #NID|AID|CID|SID|LID are used as actual identifiers instead
                                  #  - this allows re-using NODE.id in different parts of the CONSTRUCT tree
                                  #  - i.e. allows encapsulation and components composition

NODE.path                         #'NID'. NODE.id of ancestors + current NODE, joined with / separator
                                  #If root: ''
                                  #Goal: ID that shows the construct tree path, e.g. when printing or on input
CONSTRUCT.toString()->STR         #Like NODE.path except '<root>' if root

NODE.addr                         #'AID'. Like NID but SHA1 hash'd, prefixed with 'c8'
                                  #Also excludes any NODE.id 'Default'
                                  #  - this allows refactoring NODE hierarchy without changing AID
                                  #Goal: short machine-friendly ID

Names.nodeUniqueId(NODE)->'CID'   #NODE.id of ancestors + current NODE, joined without separators
Names.uniqueId(CONSTRUCT)->'CID'  #  - excluding 'Default' or 'Resource'
                                  #  - excluding parents with name being a prefix of child
                                  #     - e.g. parent 'This' -> child 'ThisThat'
                                  #     - mostly meant to make CID prettier
                                  #  - without any non-[:alnum:]
                                  #  - truncated 255 chars
                                  #Also appends hash of NODE.id of ancestors + current NODE
                                  #  - without any of above transformations, i.e. to prevent collisions
                                  #  - unless only one ancestor
                                  #I.e. both unique and human-friendly
                                  #Goal: cross-STACK IDs, unique per CAPP

Names.uniqueResourceName          #Like CID except only ancestors until CSTACK (which uses its stackName)
 (CONSTRUCT, OPTS)->'SID'         #Goal: cross-STACK IDs, shorter but potential duplicates per CAPP when using nested STACKs
                                  #Can also customize with following OPTS
OPTS.prefix                       #STR (def: '')
OPTS.separator                    #STR (def: '')
OPTS.maxLength                    #NUM (def: 255)
OPTS.allowedSpecialCharacters     #STR (def: ''). Additional allowed characters, inserted in new RegExp('[STR]')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          LOGICAL ID           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.getLogicalId(CELEM)->'LID' #Like SID but excluding CSTACK
                                  #Goal: STACK-specific ID
                                  #Used as 'RESOURCE|PARAM|...' LogicalResourceId, e.g. name in TEMPLATEs
                                  #  - CloudFormation uses it to generate the PhysicalResourceId (ARN|MID|name), with additional suffix
CELEM.logicalId                   #Same but as STR_RV

CMETADATA 'aws:cdk:logicalId'     #CELEM.logicalId
                                  #Not set if CVAR aws:cdk:disable-logicalId-metadata true
                                  #Used by `cdk diff`

CELEM.overrideLogicalId(STR)      #Manually set CELEM.logicalId

CSTACK.renameLogicalId(STR, STR2) #If logicalId is STR, set to STR2 instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PHYSICAL ID          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'NAME'                            #In this section, refers to PhysicalResourceId (see CloudFormation)
                                  #  - not LogicalResourceId
                                  #  - e.g. CloudWatch 'LOG_GROUP' name
                                  #I.e. does not apply to RESOURCEs where PhysicalResourceId is MID|ARN instead

CROSS-ACCOUNT|REGION NAME ==>     #When referring to a RESOURCE 'NAME', if:
                                  #  - static and known in advance: can pass it as is
                                  #  - same STACK: can use { Ref }
                                  #  - different STACK but same ACCOUNT|REGION: can use { Ref } with CDK,
                                  #    which automatically uses PARAMs|OUTPUTs (see below)
                                  #  - different STACK, ACCOUNT and REGION: problem
                                  #To target the RESOURCE, AWS will most likely need not only the 'NAME' but also the ACCOUNT|REGION
                                  #  - i.e. this problem usually happens when 'NAME' is part of either:
                                  #     - an ARN being built
                                  #     - a request where ACCOUNT|REGION are specified in different properties

CROSS-ACCOUNT|REGION ARN ==>      #When referring to a RESOURCE ARN:
                                  #  - if available as RESATTR and same ACCOUNT|REGION: can use { GetAtt }
                                  #  - otherwise: can build it using the 'NAME'
                                  #     - i.e. inherits the same problem as above

CROSS-ACCOUNT|REGION SOLUTION ==> #CDK generates 'NAME' as a unique EID, instead of letting CloudFormation do it
                                  #Only works when referring to a RESOURCE 'NAME'|ARN, not MID, since MID are always generated by AWS

CKRESOURCE.CSRESOURCEName         #STR_TK resolving to 'NAME'|ARN but using above solution (generated EID) providing both:
CKRESOURCE.CSRESOURCEArn          #  - cross-ACCOUNT|REGION (and not agnostic)
                                  #     - i.e. CKRESOURCE's STACK and consuming CONSTRUCT's STACK2 are in a different ACCOUNT or REGION
                                  #  - CKOPTS.physicalName PhysicalName.GENERATE_IF_NEEDED was used

CROSS-ACCOUNT|REGION              #This relies on using CKRESOURCEs implementing the following pattern:
 IMPLEMENTATION ==>               #  - pass CKRESOURCE.physicalName to CSRESOURCE's 'NAME'_RESPROP
                                  #  - CKRESOURCE.CSRESOURCEName = CKRESOURCE.getResourceNameAttribute(CSRESOURCE.ref)
                                  #  - CKRESOURCE.CSRESOURCEArn = CKRESOURCE.getResourceArnAttribute(CSRESOURCE.ARN_RESATTR, { resourceName: CKRESOURCE.physicalName, ... })
                                  #CSRESOURCE is underlying one, usually named 'Resource'
                                  #This is done by most core CKRESOURCEs, when PhysicalResourceId is 'NAME' (not MID|ARN)
                                  #The rest of this section assumes above pattern is being done

EID                               #'NAME' generated by GENERATE_IF_NEEDED
                                  #Similar to CID, but includes ACCOUNT_ID|REGION
                                  #Is STR (61 chars, lowercase'd) concatenation of:
                                  #  - CSTACK.stackName (first 25 chars)
                                  #  - NODE's 'CID' (last 24 chars)
                                  #  - SHA256 hash (12 chars) of:
                                  #     - CSTACK.account
                                  #     - CSTACK.region
                                  #     - CSTACK.stackName (full)
                                  #     - NODE's 'CID' (full)

CKOPTS.physicalName               #'NAME' of underlying CSRESOURCE, among:
                                  #  - undefined (def): generated by CloudFormation based on the RESOURCE's LID
                                  #  - 'NAME'[_TK]: as is
                                  #  - PhysicalName.GENERATE_IF_NEEDED
                                  #     - if any cross-ACCOUNT|REGION reference: generated by CDK as a new EID
                                  #     - otherwise: same as undefined
                                  #Whether there is any cross-ACCOUNT|REGION reference:
                                  #  - is decided based on whether CKRESOURCE.CSRESOURCEName|Arn is used
                                  #  - which itself is based on internal logic at CKRESOURCE.getResource*Attribute()
CKRESOURCE.physicalName           #Depending on CKOPTS.physicalName:
                                  #  - undefined: STR_TK resolving to undefined
                                  #  - 'NAME'[_TK]: as is
                                  #  - PhysicalName.GENERATE_IF_NEEDED: STR_TK resolving to:
                                  #     - if any cross-ACCOUNT|REGION reference: 'NAME' (which is EID)
                                  #     - otherwise: undefined
                                  #Readonly. Protected, i.e. only in subclasses

CKRESOURCE.generatePhysicalName() #Protected method to override in subclasses, to customize the 'NAME' generated by PhysicalName.GENERATE_IF_NEEDED
 ->STR                            #E.g. can call super.generatePhysicalName() and prepend a prefix


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONTEXT MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONTEXT                           #Data associated with NODEs
                                  #Inherited by descendant NODEs, which can override it

./cdk.context.json                #{ CVAR: VAL, ... } to use as CONTEXT
                                  #Saved on new CVAR value
                                  #CVAR must be :-namespaced, lowercase dasherized
                                  #Meant for values cached by ContextProvider
                                  #  - i.e. should not be manually edited, except through `cdk context --clear|--reset`
cdk --context|-c                  #'[STACK:]CVAR=VAL'_ARR (def: all STACKs) to use as CONTEXT
                                  #CLI flag, i.e. can be set in cdk.json context.[STACK:]CVAR VAL too
                                  #Meant for values not cached by ContextProvider
AOPTS.context                     #Same for CAPP
AOPTS.postCliContext              #Like AOPTS.context, but has higher priority than all above

cdk context                       #Print CONTEXT
--json|-j                         #BOOL (def: false). Output as JSON instead of YAML
--clear                           #BOOL (def: false). Save cdk.context.json as empty OBJ
--reset|-e                        #Delete 'CVAR' from cdk.context.json
                                  #Can be a 'GLOB'
--force|-f                        #BOOL (def: false). Do not fail if 'CVAR' missing, with --reset

NODE.setContext('CVAR', VAL)      #Should be set before adding child NODEs, since their constructor might check it
NODE.getContext('CVAR')->VAL      #Throw if not found
NODE.tryGetContext('CVAR')->VAL   #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CONTEXT PROVIDER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ContextProvider.getValue          #Used by SERVICEs to compute a value then cache it on filesystem using CONTEXT
 (CONSTRUCT, OPTS)->{ value: VAL }#Value is computed on first call, using PCONTEXT_PLUGIN.getValue()
                                  #Value is cached on CONTEXT:
                                  #  - CVAR is serialized 'SERVICE:VARR=VAL:...'
                                  #  - but documented here as PCONTEXT.* OBJ
                                  #Caching is both for:
                                  #  - performance
                                  #  - stability, like a lock file
                                  #     - e.g. when retrieving last version of an AMI
                                  #     - i.e. `cdk context --reset` allows upgrades
OPTS.provider                     #'SERVICE'
OPTS.props.*                      #PCONTEXT.* OBJ (def: {})
OPTS.props.account|region         #Def: CSTACK.account|region, if OPTS.includeEnvironment true (def)
OPTS.dummyValue                   #Default VAL to use in next round
                                  #This is due to ContextProvider.getValue() being sync and PCONTEXT_PLUGIN.getValue() async
                                  #The first round of `cdk synth` uses the dummyValue
                                  #Then the actual value is computed, and a new round of `cdk synth` is performed

PHOST.registerContextProviderAlpha#Add custom PCONTEXT_PLUGIN
 ('NAME', PCONTEXT_PLUGIN)        #Defined by each SERVICE using PCONTEXT
PCONTEXT_PLUGIN
 .getValue(OPTS)->>VAL            #
this.aws                          #SDK_PROVIDER, used to make API calls
OPTS.*                            #PCONTEXT.*
OPTS.lookupRoleArn                #LOOKUP_ROLE_ARN, used for requests

STACK_APROPS|STACK_CARTIFACT      #LOOKUP_ROLE. Used for read-only requests:
 .lookupRole                      #  - ContextProvider
                                  #  - `cdk diff`, `cdk deploy --require-approval` `cdk watch --logs`, parts of `cdk import`
                                  #     - if no BOOTSTRAP, uses CLI's credentials
                                  #Def: BOOTSTRAP_ROLE 'lookup', which is BOOTSTRAP_STACK.Resources.LookupRole
                                  #  - has AWS managed policy  arn:aws:iam::aws:policy/ReadOnlyAccess', i.e. readonly for all SERVICEs
                                  #  - denied kms:Decrypt
DOPTS.lookupRoleArn
LOOKUP_ROLE.arn                   #ROLE_ARN. Can be BSTR
CSYNTH.lookupRole                 #Can be '': using CLI's credentials
LOOKUP_ROLE.assumeRoleExternalId
DOPTS.lookupRoleExternalId        #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with lookupRoleArn
cdk bootstrap --trust-for-lookup  #'ACCOUNT_ID'_ARR to allow to assume BOOTSTRAP_ROLE 'lookup'

cdk diff|deploy|import|destroy
 |list|metadata --lookups
DOPTS
 .useLookupRoleForStackOperations #BOOL (def: true). Enables ContextProvider

*.fromLookup                      #Most SERVICEs that use ContextProvider.getValue() do so inside this type of static method
 (CONSTRUCT, STR, ...)            #STR is a C[K]RESOURCE 'NAME'|MID and ... are additional options
 ->>C[K]RESOURCE                  #The method uses AWS API calls to retrieve the resource by id, then cache it on CONTEXT

CBUILDER
 .addMissing(MISSING_CONTEXT)     #
MANIFEST.missing                  #MISSING_CONTEXT_ARR. PCONTEXT.* which could not be found (see OPTS.dummyValue)
MISSING_CONTEXT.provider          #'SERVICE'
MISSING_CONTEXT.key               #PCONTEXT.* 'VAR' name
MISSING_CONTEXT.props             #PCONTEXT.* OBJ value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NOTICES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk ... --notices                 #BOOL (def: false). Print NOTICEs, warning messages on deprecated versions|components (using TNODE.constructInfo)
cdk notices                       #Print NOTICEs

CDK_HOME/cache/notices.json       #Caches NOTICEs, since they are retrieved from https://cli.cdk.dev-tools.aws.dev/notices.json

cdk ack[nowledge] [NOTICE_ID]     #Do not print this NOTICE anymore with `cdk --notices` (but still shown with `cdk notices`)
CVAR acknowledged-issue-numbers   #'NOTICE_ID'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ANNOTATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk synth|deploy|import|diff      #Print error|warning|info ANNOTATIONs
                                  #ANNOTATIONs are similar to NODE.addValidation()
                                  #  - except `cdk synth` still produces ARTIFACTs for the other CSTACKs
                                  #     - i.e. those can still be deployed
                                  #  - useful for warnings|info
                                  #     - for errors, prefer throwing ERRORs
--ignore-errors                   #BOOL. If false (def), fail if any error ANNOTATION
--strict                          #BOOL (def: false). Fail if any warning ANNOTATION

SYOPTS.validateOnSynthesis
STACK_APROPS|STACK_CARTIFACT      #BOOL (def: false). Print error|warning|info ANNOTATIONs during `cdk synth`
 |CSESSION.validateOnSynth        #on that CSTACK, even if it is not selected
ENVVAR CDK_VALIDATION=true
cdk synth --validation            #BOOL (def: true). If false, `validateOnSynth` is noop

Annotation.of
 (CONSTRUCT)->ANNOTATION          #Message

ANNOTATION.addError('MESSAGE')    #Add CMETADATA 'aws:cdk:error'

ANNOTATION.addWarningV2           #Add CMETADATA 'aws:cdk:warning'
 ('WNAME', 'MESSAGE')             #WNAME is usually 'LIB:CONSTRUCT.WARNING'

ANNOTATION.addDeprecation         #Same as addWarningV2() except:
 (STR, 'MESSAGE')                 #  - 'WNAME' is 'Deprecated:STR'
                                  #  - 'MESSAGE' is:
                                  #     - prepended with 'The API STR is deprecated'
                                  #     - appended with 'This API will be removed in the next major release'
                                  #  - throws if ENVVAR CDK_BLOCK_DEPRECATIONS set

ANNOTATION                        #Remove CMETADATA 'aws:cdk:warning', in current process
 .acknowledgeWarning('WNAME')     #Includes CONSTRUCT's descendants

ANNOTATION.addInfo('MESSAGE')     #Add CMETADATA 'aws:cdk:info'
                                  #Printed by CLI

ENVVAR CDK_DISABLE_STACK_TRACE
CVAR aws:cdk:disable-stack-trace
AOPTS.stackTraces                 #BOOL (def: true). Include stack traces in CMETADATA 'aws:cdk:info|warning|error'
cdk synth|deploy|import|diff
--trace                           #BOOL (def: false). Print stack trace with warnings

CARTIFACT.messages                #CANNOTATION_ARR
CANNOTATION.level                 #'error|warning|info'
CANNOTATION.id                    #'/NID'
CANNOTATION.entry                 #CMETADATA


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENVIRONMENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSOPTS.env                        #CENV, at STAGE-level
                                  #Def: parent STAGE (if none, undefined)
CSTAGE|CENV.account|region        #Same as below

SOPTS.env                         #CENV, at STACK-level
                                  #Def: same as STAGE (if none, Aws.ACCOUNT_ID|REGION)
CSTACK|CENV.account|region        #Same as below

CKRESOURCE.env                    #CENV, at CKRESOURCE-level
                                  #Def: same as STACK
CKOPTS.account|region             #Same as below
CKOPTS.environmentFromArn         #Alternative to CKOPTS.account|region, using any 'ARN' instead

CSTACK|STACK_ARTIFACT.environment #'ENVIRONMENT', i.e. 'aws://ACCOUNT/REGION'
STACK_CARTIFACT.environment       #ENVIRONMENT_OBJ

EnvironmentUtils.make
 ('ACCOUNT', 'REGION')
 ->ENVIRONMENT_OBJ                #
EnvironmentUtils.format
 ('ACCOUNT', 'REGION')
 ->'ENVIRONMENT'                  #
EnvironmentUtils.parse
 ('ENVIRONMENT')->ENVIRONMENT_OBJ #
ENVIRONMENT_OBJ.account|region    #'ACCOUNT|REGION'
ENVIRONMENT_OBJ.environment       #'ENVIRONMENT'

Aws.ACCOUNT_ID|REGION             #STR_TK resolving to built-in PARAM 'AWS::ACCOUNT_ID|REGION' (see above)
                                  #Can be passed to SSOPTS|SOPTS|CKRESOURCE.env.account|region
UNKNOWN_ACCOUNT|UNKNOWN_REGION    #'unknown-account|unknown-region'
                                  #Used in 'ENVIRONMENT'|ENVIRONMENT_OBJ when === Aws.ACCOUNT_ID|REGION
                                  #Means account|region "agnostic":
                                  #  - logic can check ENVIRONMENT_OBJ.account|region === UNKNOWN_ACCOUNT|REGION
                                  #    to throw when specific feature requires a specific ACCOUNT|REGION
                                  #  - library code should be agnostic, but production code should not

process.env.CDK_DEFAULT_REGION    #'REGION' that would be used by CLI
                                  #I.e. specified in ENVVARs (e.g. AWS_[DEFAULT_]REGION) or AWS CONFIG|CREDS (see its doc)
                                  #If not found: 'us-east-1'
                                  #Only used if passed to SSOPTS|SOPTS|CKRESOURCE.env.region
                                  #Takes into account --profile|--ec2-creds
                                  #Cannot be overridden
process.env.CDK_DEFAULT_ACCOUNT   #Same but for current 'ACCOUNT_ID'
                                  #Uses STS getCallerIdentity through CLI credentials
                                  #If not found: undefined
                                  #Only used if passed to SSOPTS|SOPTS|CKRESOURCE.env.account
                                  #Takes into account --profile|--ec2-creds|--container-creds|--http-options
                                  #Cannot be overridden


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REGION FACTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Fact.regions                      #All 'REGION'_ARR

CSTACK.regionalFact               #Like Fact.find(CSTACK.region, RFACT)
 (RFACT[, 'RVAL2'])->'RVAL'       #'RVAL2' is default value (def: throws)
                                  #If CSTACK.region is agnostic, tries to guess:
                                  #  - if 'RVAL' differs only by including 'REGION' or 'AWS_DOMAIN':
                                  #     - replace it by Aws.REGION|URL_SUFFIX STR_TK
                                  #     - e.g. this is case for FactName.servicePrincipal(...)
                                  #  - if TEMPLATE.Mappings.RFACTMap.REGION.RFACT 'RVAL' defined, use it
                                  #     - specific name for RFACT is slightly different: see source code
                                  #  - for better guess, can restrict to specific CVAR @aws-cdk/core:target-partitions 'PARTITION'_ARR (def|recommended: all)
Fact.find('REGION', RFACT)
 ->'RVAL'|undefined               #
Fact.requireFact('REGION', RFACT)
 ->'RVAL'                         #Same but throws if undefined
RegionInfo.regionMap
 (RFACT)->{ REGION: 'RVAL', ... } #
RegionInfo.regions                #RINFO_ARR for all REGIONs
RegionInfo.get('REGION')->RINFO   #
RINFO.region                      #'REGION'
RINFO.RFACT                       #'RVAL'|undefined
                                  #'YES|NO' -> BOOL
                                  #FACT is camelCase'd

'RVAL'                            #Value for a specific REGION + RFACT

FactName.*[(...)]                 #RFACT. REGION-specific behavior
                                  #Some SERVICE-specific ones are my documentation for that SERVICE instead
FactName.PARTITION                #RFACT for 'PARTITION'
FactName.DOMAIN_SUFFIX            #RFACT for 'AWS_DOMAIN'
FactName
 .servicePrincipal('SERVICE')     #RFACT for 'SERVICE_DOMAIN'
FactName.IS_OPT_IN_REGION         #RFACT for 'YES|NO': whether REGION must be enabled

SERVICE-SPECIFIC ==>              #
FactName.S3_STATIC_WEBSITE_
 ZONE_53_HOSTED_ZONE_ID           #RFACT for Route53 'ZONE_ID'
FactName
 .EBS_ENV_ENDPOINT_HOSTED_ZONE_ID #RFACT for Route53 'ZONE_ID' used in Elastic Beanstalk (if none: '')
FactName.ELBV2_ACCOUNT            #RFACT for 'ACCOUNT_ID' to use with IAM POLICY's Principal.Aws with S3 BUCKET for access logs of ELB
                                  #undefined for REGIONs that 'logdelivery.elasticloadbalancing.amazonaws.com' instead
FactName.DLC_REPOSITORY_ACCOUNT   #RFACT for 'ACCOUNT_ID' owning the ECR repo with the container images of AWS Deep Learning (if none: undefined)
FactName.APPMESH_ECR_ACCOUNT      #RFACT for 'ACCOUNT_ID' owning the ECR repo with the container images of AppMesh Envoy Proxy (if none: undefined)
FactName.FIREHOSE_CIDR_BLOCK      #RFACT for Firehose server's 'CIDR'
FactName
 .VPC_ENDPOINT_SERVICE_NAME_PREFIX#RFACT for '[cn.]com.amazonaws.vpce' used in VPC
FactName
 .appConfigLambdaLayerVersion
 ('LAYER_VERSION', 'arm64|x86_64')#RFACT for LAYER_ARN of AppConfig Insights
FactName.adotLambdaLayer('TYPE',
 'LAYER_VERSION', 'arm64|x86_64') #RFACT for LAYER_ARN of OpenTelemetry Insights
FactName
 .paramsAndSecretsLambdaLayer
 ('LAYER_VERSION', 'arm64|x86_64')#RFACT for LAYER_ARN of SecretsManager Insights


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STAGE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Stage(...CARGS[, SSOPTS])     #CSTAGE. Group of related CSTACKs
                                  #Inherits CONSTRUCT
                                  #'CSTAGE' must be [[:alnum:]-_.]
                                  #Meant as top-level CONSTRUCT
                                  #  - with PARENT_CONSTRUCT undefined, 'CSTAGE' empty STR
                                  #Can also have a parent CSTAGE2, creating a nested ASSEMBLY
Stage.of(CONSTRUCT)->CSTAGE       #Find amongst ancestors
CSTAGE.parentStage                #PARENT_CSTAGE, if PARENT_CONSTRUCT had a CSTAGE2 itself

OPTS.stageName                    #'STAGE'. Def: 'CSTAGE' (including '')
                                  #Prefixed with 'PARENT_STAGE-...' (if any)

new App([AOPTS])                  #CAPP. CSTAGE (inherits it) with automatic synth (AOPTS.autoSynth)
                                  #Also has few smaller features, like AOPTS.context


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STACK MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Stack([...CARGS[, SOPTS]])    #CSTACK. CloudFormation STACK
                                  #Inherits CONSTRUCT
                                  #Def 'CSTACK': 'Default'
                                  #Def PARENT_CONSTRUCT (for automated tests): CAPP with AOPTS:
                                  #  - autoSynth false
                                  #  - outdir TMP_DIR/cdk-test-app-RANDOM
CELEM|CKRESOURCE.stack            #CSTACK
Stack.of(CONSTRUCT)->CSTACK       #Of CONSTRUCT or any ancestor

SOPTS|STACK_APROPS|STACK_CARTIFACT#'STACK' name, as used in CloudFormation
 |CSTACK.stackName                #Def: SID but up until CSTAGE (excluded)
STACK_CARTIFACT.originalName      #  - i.e. if direct child: uses 'CSTACK' as is
                                  #  - if parent CSTAGE is nested, prefix 'STAGE'
                                  #     - if FFLAG @aws-cdk/core:includePrefixInUniqueNameGeneration (recommended): more accurate prefixing

SOPTS.description
CSTACK.templateOptions.description#STR. STACK.Description
CSTACK.templateOptions
 .templateFormatVersion           #STR. STACK.AWSTemplateFormatVersion
cdk bootstrap
--termination-protection
SOPTS|STACK_APROPS|STACK_CARTIFACT
 |CSTACK.terminationProtection    #BOOL (def: false). STACK.EnableTerminationProtection
SOPTS.tags                        #OBJ. STACK.Tags
                                  #ALso used as:
                                  #  - STACK_APROPS|STACK_CARTIFACT.tags
                                  #  - CMETADATA 'aws:cdk:stack-tags'

cdk bootstrap|deploy|import
 |destroy --role-arn|-r
STACK_APROPS|STCK_CARTIFACT|CSYNTH
 .cloudFormationExecutionRoleArn  #'ROLE_ARN'. STACK.RoleARN. Can be BSTR
DOPTS                             #Can be '': using CLI's credentials
 .cloudFormationExecutionRole     #Def: BOOTSTRAP_ROLE 'cfn-exec', which is BOOTSTRAP_STACK.Resources.CloudFormationExecutionRole
cdk bootstrap
--cloudformation-execution        #POLICY_ARN_ARR attached to BOOTSTRAP_ROLE 'cfn-exec'
 -policies                        #Def: none if --trust, IAM AdministratorAccess otherwise
--custom-permissions-boundary
 |-cpb                            #'PERM_BOUNDARY' to attach to BOOTSTRAP_ROLE 'cfn-exec'
--example-permissions-boundary    #BOOL (def: false). Same as --custom-permissions-boundary but using following
 |-ebp                            #PERM_BOUNDARY 'cdk-${Qualifier}-permissions-boundary'
                                  #Allows all except:
                                  #  - deleting PERM_BOUNDARYs
                                  #  - changing this PERM_BOUNDARY
                                  #It is upserted as part of `cdk bootstrap`, not part of BOOTSTRAP_STACL itself

CVAR
 @aws-cdk/core:stackResourceLimit #Max NUM of RESOURCEs (def|max: 500)

CSTACK.toJsonString               #Resolves to JSON.stringify(VAL)
 (VAL[, NUM])->STR_TK             #NUM is indentation (def: 0)
                                  #Handles VAL (or descendant) being:
                                  #  - RVV: resolved
                                  #  - CloudFormation !FUNCs: kept as is and joined with { Fn::Join }
                                  #Although CSTACK's method, it is unrelated to CSTACK
CSTACK.toYamlString(VAL)->STR_TK  #Same with YAML

STACK.Capabilities                #Always ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND']


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STACK NESTED          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new NestedStack(...CARGS[, OPTS]) #NSTACK. Nested STACK
                                  #Inherits from CSTACK
                                  #Parent CSTACK is found using PARENT_CONSTRUCT
                                  #  - i.e. can be indirect parent

CSTACK.nested                     #BOOL. Whether is a NSTACK
NSTACK.nestedStackParent          #Parent CSTACK2
NSTACK.nestedStackResource        #CZRESOURCE of itself in the parent CSTACK2, of type 'AWS::CloudFormation::Stack'

OPTS.env|crossRegionReferences
 |permissionBoundary              #Cannot specify: uses parent instead
OPTS.analyticsReporting
 |terminationProtection
 |suppressTemplateIndentation     #Cannot specify: only meaningful for top-level STACK
NSTACK.synthesizer                #Forwards to parent

OPTS.description                  #STR. STACK.Description
OPTS.parameters                   #OBJ (def: {}). STACK.Parameters
NSTACK.setParameter('PARAM','VAL')#
OPTS.timeout                      #DURATION (def: none). STACK.TimeoutInMinutes
OPTS.notificationArns             #SNS_TOPIC_ARN_ARR (def: [])
OPTS.removalPolicy                #ENUM (def: DESTROY). See CZRESOURCE.applyRemovalPolicy()
OPTS.tags                         #Cannot specify, but can still set TAGS after construction

OPTS.stackName                    #Cannot specify it
NSTACK.stackName                  #STR_TK resolving to:
                                  #  - inside NSTACK: 'AWS::StackName'
                                  #  - outside NSTACK: { Ref } to NSTACK + { Fn::Split: ['/', ...] } + { Fn::Select: [1, ...] }
NSTACK.stackId                    #STR_TK resolving to:
                                  #  - inside NSTACK: 'AWS::StackId'
                                  #  - outside NSTACK: { Ref } to NSTACK

CMETADATA 'aws:asset:path'        #'TemplateURL'
CMETADATA 'aws:asset:property'    #NSTACK.templateFile


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STACK METADATA         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.addMetadata('VAR', VAL)    #TEMPLATE.Metadata.VAR = VAL
CSTACK.templateOptions.metadata   #OBJ

CVAR aws:cdk:version-reporting
AOPTS|SOPTS.analyticsReporting
cdk diff|deploy|import|destroy
 |list|metadata
--version-reporting               #BOOL (def: true). Output TEMPLATE.Resources.CDKMetadata and TNODE.constructInfo

TEMPLATE.Resources.CDKMetadata    #Type 'AWS::CDK::Metadata'
                                  #Properties.Analytics 'v2:deflate64:X.Y.Z!MODULE/EXPORT,...'
                                  #  - list of CONSTRUCTs used in this STACK
                                  #  - uses {...} instead of repeating subparts, e.g. @aws-cdk/core.{Stack,Construct,CfnResource}
                                  #  - the part after 'v2:deflate64:' is gzip'd then base64'd
                                  #Used by:
                                  #  - `cdk diff` and `cdk-validator-cfnguard` output
                                  #  - NOTICEs
                                  #  - analytics

TNODE.constructInfo.fqn           #'MODULE/EXPORT'
TNODE.constructInfo.version       #'X.Y.Z'

FactName                          #RFACT for 'YES|NO': whether REGION supports TEMPLATE.Resources.CDKMetadata
 .CDK_METADATA_RESOURCE_AVAILABLE #If CSTACK.region is:
                                  #  - not supported: skip it
                                  #  - agnostic, use TEMPLATE.Resources.CDKMetadata.Condition { Fn::Or: [{ Fn::Equals: ['AWS::Region', 'REGION'] },...] }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STACK ELEMENT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnElement(...CARGS)          #CELEM. CONSTRUCT within a CSTACK
                                  #Usually corresponds to a TEMPLATE.* top-level property: Resource, Mappings, Parameters, etc.
                                  #TEMPLATE.* top-level properties are shallowly merged
CELEM.creationStack               #STR_ARR. Stack trace of CELEM's constructor


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PARAMETERS MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk deploy
--parameters                      #OBJ. Key is '[STACK:]PARAM'. STACK|CHANGESET.Parameters
cdk deploy|bootstrap
--previous-parameters             #BOOL (def: true). Re-use PARAMs from previous deploy (using PARAMVAL.UsePreviousValue true), except ones overridden

new CfnParameter(...CARGS[, OTPS])#CPARAM. TEMPLATE.Parameters.PARAM
                                  #Inherits CELEM
OPTS.type                         #STR (def: 'String'). PARAM.Type
OPTS.min|maxLength                #NUM. PARAM.Min|MaxLength
OPTS.min|maxValue                 #NUM. PARAM.Min|MaxValue
OPTS.allowedPattern               #'REGEXP'. PARAM.AllowedPattern
OPTS.allowedValues                #STR_ARR. PARAM.AllowedValues
OPTS.default                      #VAL. PARAM.Default
OPTS.description                  #STR. PARAM.Description
OPTS.constraintDescription        #STR. PARAM.ConstraintDescription
OPTS.noEcho                       #BOOL. PARAM.NoEcho

CPARAM.value                      #CFNREF. { Ref: 'PARAM' }
                                  #CPARAM is also a RV that resolves to it
CPARAM
 .valueAsString|List|Number()->TK #{ Ref: 'PARAM' }

STACK_APROPS|STACK_CARTIFACT
 .parameters                      #PARAMS_OBJ. STACK.Parameters


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PARAMETERS RULES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnRule(...CARGS[, OPTS])     #CRULE. TEMPLATE.Rules.RULE
                                  #Inherits CfnRefElement

OPTS.ruleCondition                #BOOL. RULE.RuleCondition

OPTS.assertions                   #OBJ_ARR: assert BOOL, assertDescription STR
                                  #RULE.Assertions
CRULE.addAssertion(BOOL, STR)     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OUTPUT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk deploy --outputs-file|-O      #'PATH.json' (def: none) to write { 'STACK': STACK_OUTPUT_ARR, ... }
                                  #Regardless, always printed to stdout

new CfnOutput(...CARGS, OPTS)     #COUTPUT. TEMPLATE.Outputs.OUTPUT_LID
                                  #Inherits CELEM
OPTS.value                        #STR. OUTPUT.Value
OPTS.description                  #STR. OUTPUT.Description
OPTS.exportName                   #'EXPORT'. OUTPUT.ExportName

COUTPUT.importValue()->STR_TK     #{ Fn::ImportValue: 'EXPORT' }

CSTACK.exportValue                #Create TEMPLATE.Outputs.OUTPUT_LID { value: VAL, exportName: OPTS.name }
 (VAL, OPTS)->STR_TK              #Return { Fn::ImportValue: 'EXPORT' }
CSTACK.exportValue                #Same except OPTS.name 'EXPORT' is auto-generated
 (CREF[_TK])->STR_TK              #CREF's target must be either in same CSTACK or in a nested one.
                                  #If in a nested one:
                                  #  - in nested CSTACK2, creates TEMPLATE.Outputs.OUTPUT_LID { value: CREF }
                                  #  - in parent CSTACK, creates TEMPLATE.Outputs.OUTPUT_LID { value: { Fn::GetAtt: [CSTACK2, 'Outputs.OUTPUT'] } }
                                  #  - repeat if deep nesting
CSTACK.exportStringListValue
 (...)->ARR_TK                    #Same but when value is a STR_ARR

CROSS-STACK REFERENCES ==>        #When a CREF's target is in a different CSTACK
                                  #Resolved during `cdk synth` by automatically adding PARAMs and OUTPUTs
                                  #If:
                                  #  - targeting a [deep] parent CSTACK2:
                                  #     - declare CREF in parent
                                  #     - pass to nested through PARAMs
                                  #  - targeting a [deep] nested CSTACK2:
                                  #     - declare CREF in nested
                                  #     - pass to parent through STACK OUTPUTs and { Fn::ImportValue }
                                  #  - otherwise: same but also add CSTACK dependency
                                  #Only if both CSTACKs are in same CAPP, ACCOUNT_ID and REGION (including agnostic)
                                  #  - otherwise: should use physicalName.GENERATE_IF_NEEDED (see above)
                                  #Not if CFNREF.assignValueForStack() already called

SOPTS.crossRegionReferences       #BOOL (def: false). Allows CREF to target a different CSTACK in a different REGION (unless agnostic):
                                  #  - in target REGION, a CustomResource resolves CREF and exports it as SSM parameter 'EXPORT'
                                  #  - in source REGION, another CustomResource's sets a RESATTR 'EXPORT' to '{{resolve:ssm:EXPORT}}', i.e. importing it
                                  #     - CREF resolves to it, i.e. { GetAtt: [CUSTOM_RESOURCE_LID, 'EXPORT'] }
                                  #Also makes CKOPTS.physicalName logic be only for cross-ACCOUNT, not cross-REGIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      STACK DEPENDENCIES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.add|removeDependency       #Make CSTACK depend on CSTACK2
 (CSTACK2)                        #If CSTACK2 is:
                                  #  - same: noop
                                  #  - nested: noop, because already dependent
                                  #  - parent: not allowed, because cycle
                                  #  - not parent|nested but have common ancestor CSTACK3:
                                  #     - in CSTACK3, link CSTACK[2] using TEMPLATE.Resources.RESOURCE.DependsOn
                                  #  - different top-level: kept in `manifest.json` (ARTIFACT.dependencies), ensuring those are deployed serially
                                  #Must be in same CSTAGE
CSTACK.dependencies               #CSTACK2_ARR
ENVVAR CDK_DEBUG_DEPS=true        #Debug logs for STACK dependencies

CZRESOURCE.add|removeDependency   #If same STACK: TEMPLATE.Resources.RESOURCE.DependsOn
 (CZRESOURCE2)                    #Otherwise: use STACK dependency
CZRESOURCE.replaceDependency
 (CZRESOURCE2, CZRESOURCE3)       #Same as removeDependency(CZRESOURCE2) + addDependency(CZRESOURCE3)
CZRESOURCE
 .obtain[Resource]Dependencies()
 ->CZRESOURCE2_ARR                #Including|excluding STACK dependencies

ARTIFACT.dependencies             #'ARTIFACT_ID'_ARR to deploy first
                                  #Mostly used with STACK_ARTIFACT, using CSTACK.dependencies, i.e. deploy STACK dependencies in order
CARTIFACT.dependencies            #Same but as CARTIFACT_ARR
LOPTS.topoSort                    #BOOL (def: true). Sort CASSEMBLY.artifacts:
                                  #  - dependencies before dependents
                                  #  - then alphabetically by 'ARTIFACT_ID'

cdk synth|deploy|destroy|diff
--exclusively|-e                  #BOOL. If false (def), include dependent STACKs and wait for them
                                  #With `cdk destroy`, inverse: include STACKs that depend on the destroyed STACK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEPENDABLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
                                  #Part of `constructs` package
                                  #When NODE is CZRESOURCE, NODE dependencies -> CZRESOURCE.addDependency() during `cdk synth`
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set NODE dependencies
NODE.addDependency(DEPENDABLE...) #Add NODE dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get NODE dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONDITION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnCondition(...CARGS, OPTS)  #CCOND. TEMPLATE.Conditions.COND
                                  #Inherits CELEM
                                  #Is also a RV that resolves to { Condition: 'CCOND_LID' }
OPTS.expression                   #BOOL_RV
                                  #If undefined, no COND

CFRN_OPTS.condition               #CCCOND. TEMPLATE.Resources.RESOURCE.Condition
COUTPUT_OPTS.condition            #CCOND. OUTPUT.Condition


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MAPPINGS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnMapping(...CARGS[, OPTS])  #CFILTER. TEMPLATE.Mappings.FILTER
                                  #Inherits CfnRefElement
                                  #OPTS is { VAR: { PROP: VAL, ...}, ... }
CFILTER.setValue
 ('VAR', 'PROP', VAL)             #

Fn.findInMap
 ('FILTER', 'VAR', 'PROP'[, STR]) #
 ->STR_TK                         #{ Fn::FindInMap: ['FILTER', 'VAR', 'PROP'[, { DefaultValue: STR }]] }
CFILTER.findInMap                 #Same except:
 ('VAR'[_TK], 'PROP'[_TK][, STR]) #  - automatically set 'FILTER' LID
 ->STR[_TK]                       #  - if used in a different CSTACK than CFILTER, set a TEMPLATE.Mappings.FILTER copy
                                  #  - automatically resolved if OPTS.lazy true and either:
                                  #     - no OPTS.VAR.PROP, and default value STR specified
                                  #     - neither 'VAR'|'PROP' is a TK
OPTS.lazy                         #BOOL (def: false). Only output TEMPLATE.Mappings.FILTER if CFILTER.findInMap() is called
                                  #Recommended


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MACRO             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTACK.addTransform('MACRO')      #TEMPLATE.Transform 'MACRO'[_ARR]
                                  #AWS::LanguageExtensions is automatically added when using Fn.findInMap|len|toJsonString()
CSTACK.templateOptions.transforms #'MACRO'_ARR

Fn.transform('MACRO', OBJ)->RV    #{ Fn::Transform: { Name: 'MACRO', Parameters: OBJ } }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE L1 BASE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnResource(...CARGS, OPTS)   #CZRESOURCE. TEMPLATE.Resource.RESOURCE
                                  #Inherits CfnRefElement
                                  #Can be used for ETYPEs (extensions RESOURCEs)
CZRESOURCE.cfnOptions             #CZOPTS (def: {})
                                  #Can be mutated

OPTS.type
CZRESOURCE.cfnResourceType        #'RESTYPE'

OPTS.properties
CZRESOURCE.cfnProperties          #RESPROPS_OBJ (def: {}). TEMPLATE.Resource.RESOURCE.Properties

CZOPTS.description                #STR. TEMPLATE.Resources.RESOURCE.Description
CZOPTS.version                    #'ETYPE_VERSION'. TEMPLATE.Resources.RESOURCE.Version

CZRESOURCE.applyRemovalPolicy     #Set CZOPTS.deletionPolicy
 (REMOVAL_POLICY|undefined[,OPTS])#If OPTS.applyToUpdateReplacePolicy true (def), also set CZOPTS.updateReplacePolicy
                                  #REMOVAL_POLICY is ENUM RemovalPolicy.DESTROY|RETAIN|RETAIN_ON_UPDATE_OR_DELETE|SNAPSHOT
                                  #If ENUM undefined, uses OPTS.default (def: RETAIN)
                                  #If applyRemovalPolicy() not called though, uses CloudFormation's default, i.e. DESTROY
                                  #If FFLAG @aws-cdk/core:validateSnapshotRemovalPolicy (recommended), throw if SNAPSHOT on invalid 'RESTYPE'
CZOPTS.deletionPolicy             #ENUM CfnDeletionPolicy.DELETE|RETAIN|RETAIN_EXCEPT_ON_CREATE|SNAPSHOT
                                  #TEMPLATE.Resources.RESOURCE.DeletionPolicy
                                  #Required with many stateful RESTYPEs, e.g. databases, S3 BUCKETs, etc.
                                  #Def: DELETE
CZOPTS.updateReplacePolicy        #Same ENUM (except no RETAIN_EXCEPT_ON_CREATE)
                                  #TEMPLATE.Resources.RESOURCE.UpdateReplacePolicy
                                  #Def: DELETE

CZOPTS.updatePolicy               #OBJ (RESTYPE-specific). TEMPLATE.Resources.RESOURCE.UpdatePolicy
CZOPTS.creationPolicy             #OBJ. TEMPLATE.Resources.RESOURCE.CreationPolicy
                                  #OBJ is RESTYPE-specific except: resourceSignal { count NUM, timeout 'TIME_DURATION' }

CZRESOURCE.addOverride            #TEMPLATE.Resources.RESOURCE.VARR VAL
 ('VARR', VAL)                    #VARR is dot-delimited, and can include NUM indices
CZRESOURCE.addDeletionOverride
 ('VARR')                         #Delete TEMPLATE.Resources.RESOURCE.VARR
CZRESOURCE
 .addProperty[Deletion]Override
 (...)                            #Same for TEMPLATE.Resources.RESOURCE.Properties.VARR

PROTECTED METHODS ==>             #Following are to override by subclasses
CZRESOURCE.shouldSynthesize       #FUNC()->BOOL (def: always true).
                                  #If false, omit CZRESOURCE in TEMPLATE.Resources.*
CZRESOURCE                        #Compute TEMPLATE.Resource.RESOURCE.Properties, before RV resolution
 .cfnProperties()->RESPROPS_OBJ   #Can use this._cfnProperties RESPROPS_OBJ|undefined
                                  #Def: RESPROPS_OBJ and set TAGS property
CZRESOURCE.renderProperties       #Transform TEMPLATE.Resource.RESOURCE.Properties, after RV resolution
 (RESPROPS_OBJ)->RESPROPS_OBJ     #Def: keep as is


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RESOURCE L1 CORE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnRESOURCE(...CARGS[, OPTS]) #CSRESOURCE. "L1|CFN RESOURCE", corresponding to a given AWS::SERVICE::RESOURCE
                                  #Inherits from CZRESOURCE
                                  #Always start with Cfn*
                                  #Documented online under "CloudFormation Resources" section

CfnRESOURCE.CFN_RESOURCE_TYPE_NAME
TATTR aws:cdk:cloudformation:type #'RESTYPE'

OPTS|CSRESOURCE.RESPROP           #VAL. Like CloudFormation, but camelCase
                                  #Does basic runtime type validation, unless RV
                                  #Can be mutated
TATTR aws:cdk:cloudformation:props#RESPROPS_OBJ

CSRESOURCE.attrRESATTR            #CSATTR. CFNREF_TK resolving to { Fn::GetAtt: [CSRESOURCE_LID, 'RESATTR'] }
                                  #Like CloudFormation

@aws-sdk/spec2cdk                 #Internal tool generating CSRESOURCEs at build time

awscdk-service-spec               #Monorepo with @cdklabs/tskb, @cdklabs/typewriter, @aws-cdk/service-spec-importers, @aws-cdk/service-spec-types, @aws-cdk/aws-service-spec
                                  #Underlying source of AWS SERVICEs info, used by spec2cdk and `cdk diff`
                                  #Uses:
                                  #  - daily updates:
                                  #     - CloudFormation SPEC
                                  #     - SAM RESOURCEs specification, from https://github.com/awslabs/goformation/blob/master/schema/sam.schema.json
                                  #  - weekly updates:
                                  #     - list of RESOURCE with specific DeletionPolicy: https://github.com/aws-cloudformation/cfn-lint/blob/main/src/cfnlint/data/AdditionalSpecs/StatefulResources.json
                                  #     - AWS documentation
                                  #  - manual updates:
                                  #     - list of security-sensitive RESOURCEs|RESPROPs, for `cdk diff`
                                  #     - list of RESOURCE METRICs
                                  #     - fixes when SPEC has errors


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     RESOURCE L1 METADATA      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CZRESOURCE
 .addMetadata('VAR', VAL)         #
CZRESOURCE
 .getMetadata('VAR')->VAL         #
CZOPTS.metadata                   #OBJ. TEMPLATE.Resources.RESOURCE.Metadata

CVAR aws:cdk:enable-path-metadata
cdk diff|deploy|import|destroy    #BOOL (def: true). Enables TEMPLATE.Resources.RESOURCE.Metadata['aws:cdk:path']
 |list|metadata --path-metadata   #Used by `cdk metadata|diff|import`
TEMPLATE.Resources.RESOURCE
 .Metadata['aws:cdk:path']        #NID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TAGS HIGH-LEVEL        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAGS ==>                          #Only for RESOURCEs that have TAGS
TagManager.isTaggable[V2]
 (CSRESOURCE)->BOOL               #Whether has TAGS

OPTS.tags                         #TAGS_FOBJ. TEMPLATE.Resources.RESOURCE.Properties.TAGPROP
CSRESOURCE.tagsRaw                #TAGPROP is RESTYPE-specific

Tags.of(CSRESOURCE)->CTAGS        #
CTAGS.add('KEY', 'VAL'[, TOPTS])  #Add|remove TAG, using underlying CTAGM
CTAGS.remove('KEY', [, TOPTS])    #Uses ASPECTS, i.e. done on both CSRESOURCE and its descendants

new Tag('KEY', 'VAL'[, TOPTS])    #CTAGT
CTAGT.key                         #'KEY'
CTAGT.value                       #'VAL'
CTAGT.visit(CSRESOURCE)           #Add TAG, using underlying CTAGM
                                  #Unlike CTAGS, does not use ASPECTS, i.e. not applied on descendants

new RemoveTag('KEY'[, TOPTS])     #Like CTAGT but removing TAG instead

TOPTS.includeResourceTypes        #'RESTYPE'_ARR. Do not set TAG unless its 'RESTYPE' matches
                                  #Meant for CTAGS recursion on descendants
TOPTS.excludeResourceTypes        #'RESTYPE'_ARR. Inverse

TOPTS.priority                    #NUM. Merging priority when adding|removing same TAG multiple times
                                  #Def:
                                  #  - removing: 200
                                  #  - adding: 100
                                  #  - CTAGM.renderTags()'s TAGS_OBJ: 50
                                  #  - CTAGM.setTag|removeTag(): 0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TAGS LOW-LEVEL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSRESOURCE.tags|cdkTagManager
CSTACK.tags
TagManager.of(CSRESOURCE)->CTAGM  #CTAGM (v1|v2, depending on RESOURCE)
new TagManager(TAGTYPE_ENUM,      #CTAGM. RESPROP Tags
 'RESTYPE'[, TAGS_OBJ[, OPTS]])   #TAGS_OBJ is renderTags()'s value

CTAGM.setTag('TAG', 'VAL'[, NUM]) #NUM is TOPTS.priority
CTAGM.removeTag('TAG', NUM)       #
CTAGM.tagValues()->TAGS_OBJ       #
CTAGM.hasTags()->BOOL             #

OPTS.renderedTags                 #TAGS_FOBJ_RV
CTAGM.renderTags                  #TAGS_OBJ (def: {}) are merged in
 ([TAGS_OBJ])->TAGS_FOBJ          #undefined if empty
TAGS_FOBJ                         #TAGS in the format expected by CloudFormation, according to TagType
TagType ENUM                      #Shape of TAGS, which differs per SERVICE
TagType STANDARD                  #[{ key, value },...]. Most common
                                  #Can also include any OBJ ("dynamic TAGs"), which are kept as is
TagType MAP                       #TAGS_OBJ, i.e. { KEY: value, ... }. Second most common
TagType KEY_VALUE                 #[{ Key, Value },...]. Least common
                                  #As input, must be lowercase'd
TagType AUTOSCALING_GROUP         #Like STANDARD, but OBJ can also have propagateAtLaunch BOOL (def: false)
                                  #  - set as CTAGM.setTag(..., BOOL) or TOPTS.applyToLaunchedInstances
                                  #Only for AutoScalingGroup
TagType NOT_TAGGABLE              #Always empty []

OPTS.tagPropertyName              #'RESPROP' (def: 'tags')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RESOURCE L2          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Resource(...CARGS[, CKOPTS])  #CKRESOURCE. Group of
                                  #  - CSRESOURCEs ("L2|curated resource")
                                  #  - CKRESOURCEs ("L3 resource", "pattern")
                                  #Inherits CONSTRUCT
                                  #Documented online under "Constructs" section

Resource.isOwnedResource          #Whether there is a direct child CSRESOURCE named 'Resource' (or 'Default')
 (CONSTRUCT)->BOOL                #Means CKRESOURCE is a wrapper around it, and other children are just associated to it (e.g. POLICYs)
                                  #Can access|manipulate underlying CSRESOURCE by using CKRESOURCE.node.defaultChild
                                  #  - e.g. to set CZOPTS or CSRESOURCE.RESPROP
                                  #Meant to distinguish from CKRESOURCEs created by CKRESOURCE_CLASS.from*()
CKRESOURCE.applyRemovalPolicy(...)#Same as CKRESOURCE.node.defaultChild.applyRemovalPolicy(...)

CKRESOURCE_CLASS.from*            #Many CKRESOURCEs can be built using `from*` methods which allows importing already existing resources
 (...)->CKRESOURCE                #Those are used, but not imported nor present in the STACK
                                  #Also, they are usually have a minimal shape
                                  #  - fewer properties|methods than the actual class
                                  #  - interface name usually named I* in code, e.g. IUser
                                  #  - in my code, prefixed as IC* instead of C*

CKRESOURCE_CLASS.fromCfnRESOURCE  # available
 (CSRESOURCE)->CKRESOURCE         #As above, any RESOURCE created by CKRESOURCE will not be present in the STACK
                                  #However, any mutation of underlying CSRESOURCE done by CKRESOURCE will be kept


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SET              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-stacksets                     #Version 0.0.149

new StackSet(...CARGS, OPTS)      #CSET. CKRESOURCE wrapping SET

OPTS.stackSetName                 #'SET' name (def: new SID)
OPTS.description                  #STR. SET.Description
OPTS.capabilities                 #ENUM_ARR. SET.Capabilities

OPTS.deploymentType               #SET.PermissionModel. Either:
                                  #  - DeploymentType.selfManaged([CSET_SOPTS]) (def)
                                  #  - DeploymentType.serviceManaged([CSET_MOPTS])
CSET_SOPTS.adminRole              #CROLE. SET.AdministrationRoleArn
                                  #Def: new one that can be assumed by cloudformation.amazonaws.com
CSET_SOPTS.executionRoleName      #'ROLE'. SET.ExecutionRoleName
CSET_MOPTS.delegatedAdmin         #BOOL (def: true). OP.CallAs 'DELEGATED_ADMIN' or 'SELF'

CSET_MOPTS.autoDeployEnabled      #BOOL (def: true). SET.AutoDeployment.Enabled
CSET_MOPTS.autoDeployRetainStacks #BOOL (def: true). SET.AutoDeployment.RetainStacksOnAccountRemoval

OPTS.target                       #Multiple INSTANCEs of a SET. Either:
                                  #  - StackSetTarget.fromAccounts(CINSTANCES_AOPTS)
                                  #  - StackSetTarget.fromOrganizationalUnits(CINSTANCES_OOPTS)
CINSTANCES_*OPTS.regions          #'REGION'_ARR. INSTANCE.Region
CINSTANCES_*OPTS
 .parameterOverrides              #PARAMVAL_ARR. INSTANCE.ParameterOverrides
CINSTANCES_AOPTS.accounts         #ACCOUNT_ID_ARR. DEPLOYMENT_TARGET.Accounts
CINSTANCES_OOPTS
 .additionalAccounts
 |excludeAccounts                 #Same but with DEPLOYMENT_TARGET.AccountFilterType UNION|DIFFERENCE
CINSTANCES_OOPTS
 .organizationalUnits             #STR_ARR. DEPLOYMENT_TARGET.OrganizationalUnitIds

OPTS.operationPreferences         #OBJ. SET.OperationPreferences.failureTolerancePercentage|maxConcurrentPercentage|regionConcurrencyType
OPTS.managedExecution             #BOOL (def: true). SET.ManagedExecution.Active

OPTS.templateUrl                  #StackSetTemplate.fromStackSetStack(CINSTANCES). SET.TemplateURL

new StackSetStack(...CARGS[,OPTS])#CINSTANCES, representing all INSTANCEs (StackInstance) of a SET, i.e. its TemplateURL
                                  #Inherits from CSTACK
                                  #Must be within another parent CSTACK
                                  #Must be passed to OPTS.templateUrl of a CSET
                                  #Account|region must be agnostic
CINSTANCES.templateFile           #'CID.stackset.template.json' instead
CINSTANCES.synthesizer            #Uses its own CSYNTH:
                                  #  - does not create a STACK_ARTIFACT
                                  #  - TEMPLATE is added as a FASSET to parent CSTACK instead
                                  #  - can add FASSET but:
                                  #     - upload to OPTS.assetBucket, single S3 BUCKET for all INSTANCEs
                                  #     - must be a DIR, which is zipped
                                  #     - does not use BOOTSTRAP_STACK nor BSTRs
                                  #  - cannot use IASSETs
OPTS.assetBucket                  #S3 CBUCKET where to upload FASSETs when using CINSTANCES.synthesizer.addFileAsset()
                                  #CBUCKET must not be created within CINSTANCES itself


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     CUSTOM RESOURCE CORE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CustomResource(...CARGS, OPTS)#CCUSTOM_RESOURCE. CKRESOURCE wrapping CUSTOM_RESOURCE
                                  #Meant for logic that is:
                                  #  - for an individual RESOURCE
                                  #     - if only bundling multiple RESOURCEs: prefer CKRESOURCE instead
                                  #  - performed at deploy-time
                                  #     - including CRUD provisioning logic
                                  #     - if synth-time: prefer custom CONSTRUCT instead
                                  #  - such as:
                                  #     - RESOURCEs not present in CloudFormation yet
                                  #     - third-party APIs
                                  #     - custom logic (e.g. "current time")

OPTS.resourceType                 #'Custom::CUSTOM' (def: 'AWS::CloudFormation::CustomResource')

OPTS.properties                   #RESPROPS_OBJ (def: {}). TEMPLATE.Resource.RESOURCE.Properties
OPTS.pascalCaseProperties         #BOOL (def: false). Convert OPTS.properties from camelCase to PascalCase
OPTS.serviceToken                 #SNS_TOPIC_ARN|LAMBDA_FUNC_ARN. RESPROP ServiceToken

OPTS.removalPolicy                #ENUM (def: DESTROY) passed to CZRESOURCE.applyRemovalPolicy()

CCUSTOM_RESOURCE.ref              #STR_TK resolving to { Ref: LID } targeting underlying CZRESOURCE, i.e. its PhysicalResourceId
CCUSTOM_RESOURCE.getAtt[String]
 ('RESATTR')->CFNREF[_STR_TK]     #Like CZRESOURCE.getAtt()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   CUSTOM RESOURCE INTERNAL    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CustomResourceProvider            #High-level CustomResource: automatically creates LAMBDA_FUNC and its ROLE
 .getOrCreateProvider             #Singleton for a given PARENT_CONSTRUCT + 'ZCUSTOM_RESOURCE'
 (...CARGS, OPTS)                 #Like CH_CUSTOM, but meant only for CDK itself:
 ->ZCUSTOM_RESOURCE               #  - uses fewer dependencies, solving circular dependencies when used within CDK itself
CustomResourceProvider
 .getOrCreate(...CARGS, OPTS)
 ->ZCUSTOM_RESOURCE.serviceToken  #
ZCUSTOM_RESOURCE.serviceToken     #LAMBDA_FUNC_ARN, as STR_TK to { Fn::GetAtt: [FUNC_LID, 'Arn'] }
                                  #Must pass to new CustomResource()

OPTS.description                  #STR. FUNC_VERSION.Description
OPTS.runtime                      #ENUM CustomResourceProviderRuntime.NODEJS_NUM_X (required). FUNC_VERSION.Runtime
OPTS.memory                       #SIZE (def: 128MB, i.e. min). FUNC_VERSION.MemorySize
OPTS.timeout                      #DURATION (def: 15m, i.e. max). FUNC_VERSION.Timeout
OPTS.environment                  #OBJ (def: {}). FUNC_VERSION.Environment

ZCUSTOM_RESOURCE.roleArn          #ROLE_ARN. LAMBDA_FUNC.Role
                                  #Uses AWS managed ROLE AWSLambdaBasicExecutionRole
                                  #FUNC DependsOn it
OPTS.policyStatements             #IAM POLICY STATEMENT_OBJ_ARR to add
ZCUSTOM_RESOURCE
 .addToRolePolicy(STATEMENT_OBJ)  #

ZCUSTOM_RESOURCE.codeHash         #'FILE_HASH'. FASSET_NEW.sourceHash

OPTS.codeDirectory                #'DIR' containing index.js entry point of LAMBDA_FUNC
                                  #Must be Node.js and export `handler` FUNC
                                  #Copy to a temporary DIR to exclude any *.ts
                                  #Adds as staged FASSET, i.e. zipped
                                  #Uses as LAMBDA_FUNC.Code.S3Bucket|S3Key
CMETADATA 'aws:asset:path'        #'PATH'
CMETADATA 'aws:asset:property'    #'Code'

OPTS.useCfnResponseWrapper        #BOOL. If true (def), wraps entry point, to add following features.
                                  #Performs the REQ_PAYLOAD.ResponseURL call automatically
                                  #  - retries 5 times with 1s intervals
                                  #Logs REQ_PAYLOAD|RES_PAYLOAD on console
                                  #Wrapped entry point still uses REQ_PAYLOAD|RES_PAYLOAD but following RES_PAYLOAD.* are set
RES_PAYLOAD.Status                #'FAILED' if thrown error, 'SUCCESS' otherwise
RES_PAYLOAD.Reason                #ERROR.stack if thrown error
RES_PAYLOAD.LogicalResourceId
 |StackId|RequestId               #Def: same as REQ_PAYLOAD.*
RES_PAYLOAD.PhysicalResourceId    #Def: REQ_PAYLOAD.RequestId on create, REQ_PAYLOAD.PhysicalResourceId otherwise

CVAR @aws-cdk/core:               #Instead of staging as FASSET, directly uses as LAMBDA_FUNC.Code.ZipFile 'DIR'
 inlineCustomResourceIfPossible   #Cannot use OPTS.useCfnResponseWrapper


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:  CUSTOM RESOURCE HIGH-LEVEL   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Provider(...CARGS, OPTS)      #CH_CUSTOM. High-level CustomResource
                                  #Singleton for a given PARENT_CONSTRUCT + 'CH_CUSTOM'
                                  #Inherits from CONSTRUCT
CH_CUSTOM.serviceToken            #LAMBDA_FUNC_ARN, as STR_TK to { Fn::GetAtt: [FUNC_LID, 'Arn'] }
                                  #Must pass to new CustomResource()

WRAPPER_CFUNC                     #OPTS.onEventHandler|isCompleteHandler CFUNCs are proxied by a WRAPPER_CFUNC
OPTS.providerFunctionName         #'FUNCTION' name (def: generated) of WRAPPER_CFUNC
                                  #Only for OPTS.onEventHandler
OPTS.role|logRetention
 |vpc[Subnets]|securityGroups     #Passed to WRAPPER_CFUNC OPTS.*
OPTS.providerFunctionEnvEncryption#Passed to WRAPPER_CFUNC OPTS.environmentEncryption

OPTS|CH_CUSTOM.onEventHandler     #CFUNC to call on create|update|delete
                                  #Uses same behavior (including REQ_PAYLOAD|RES_PAYLOAD) as ZCUSTOM_RESOURCE

OPTS|CH_CUSTOM.isCompleteHandler  #Optional CFUNC called at the end of create|update|delete
                                  #Meant for long async tasks:
                                  #  - repeats until RES_PAYLOAD.IsComplete true
                                  #  - until then, create|update|delete call is still considered pending
                                  #  - when done, RES_PAYLOAD.Data RESATTRS_OBJ are merged
                                  #Receives onEventHandler's RES_PAYLOAD as REQ_PAYLOAD
                                  #Uses a StepFunctions STATE_MACHINE under-the-hood
OPTS.totalTimeout                 #Max DURATION (def: 30m) to repeat
OPTS.queryInterval                #DURATION (def: 5s) between repeats


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    CUSTOM RESOURCE ACTION     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new AwsCustomResource             #CAPI_CUSTOM. CustomResource that fires an AWS action on create|update|delete
 (...CARGS, OPTS)                 #Automatically creates the underlying LAMBDA_FUNC
                                  #Is RGRANTABLE (using underlying LAMBDA_FUNC)

OPTS.resourceType                 #'Custom::CUSTOM' (def: 'Custom::AWS')
OPTS.removalPolicy                #Passed to CCUSTOM_RESOURCE
OPTS.timeout                      #DURATION (def: 2m). Passed to CFUNC OPTS.timeout
OPTS.functionName|logRetention
 |vpc[Subnets]                    #Passed to CFUNC OPTS.*

OPTS.role                         #Passed to CFUNC OPTS.role
OPTS.policy                       #Automatically creates OPTS.role using either:
                                  #  - AwsCustomResourcePolicy.fromStatements(CSTATEMENT_ARR)
                                  #  - AwsCustomResourcePolicy.fromSdkCalls({ resources: 'RESOURCE'_ARR }):
                                  #     - allows SERVICE:ACTION to RESOURCEs
                                  #     - if CAPI_CUSTOM_ACTIONs uses assumeRoleArn: only allows sts:AssumeRole to it instead

CVAR @aws-cdk/customresources     #BOOL (def: false). Make LAMBDA_FUNC run `npm install @aws-sdk/client-SERVICE` in a TEMP_DIR
 :installLatestAwsSdkDefault      #Cached per FUNC_INSTANCE
OPTS.installLatestAwsSdk          #In general not needed, since Lambda includes @aws-sdk by default

OPTS.onCreate                     #CAPI_CUSTOM_ACTION (def: same as OPTS.onUpdate)
OPTS.onUpdate                     #CAPI_CUSTOM_ACTION
OPTS.onDelete                     #CAPI_CUSTOM_ACTION

CAPI_CUSTOM_ACTION                #AWS API call to perform on create|update|delete
CAPI_CUSTOM_ACTION
 .apiVersion|region               #COPTS.* (see JavaScript SDK doc)
CAPI_CUSTOM_ACTION.assumedRoleArn #ROLE_ARN, using STS AssumeRole()
CAPI_CUSTOM_ACTION.service        #'SERVICE'
CAPI_CUSTOM_ACTION.action         #'ACTION'
CAPI_CUSTOM_ACTION.parameters     #PARAMS_OBJ
                                  #Any UINT8ARR value must be UTF8 STR instead, using TextDecoder
CAPI_CUSTOM_ACTION                #RESOURCE's PhysicalResourceId. Either:
 .physicalResourceId              #  - PhysicalResourceId.fromResponse('VARR'): retrieved from RESP.VARR
                                  #  - PhysicalResourceId.of(STR): manually set
                                  #  - default: value from previous create|update
                                  #     - i.e. not possible with OPTS.onCreate
new PhysicalResourceIdReference() #Can be used inside PARAMS_OBJ, deeply
                                  #Resolved with PhysicalResourceId, according to CAPI_CUSTOM_ACTION.physicalResourceId:
                                  #  - PhysicalResourceId.of(STR): STR
                                  #  - otherwise: value from previous create|update
                                  #Not with OPTS.onCreate

CAPI_CUSTOM
 .getResponseFieldReference
 ('VARR')->CFNREF                 #Retrieve AWS action response VARR field
CAPI_CUSTOM.getResponseField      #VARR can also be 'apiVersion' or 'region', but not '$metadata'
 ('VARR')->STR_TK                 #ISTREAM|OSTREAM|RSTREAM|WSTREAM|BLOB|BUFFER|TYPED_ARR|DATAVIEW converted to UTF8 STR
CAPI_CUSTOM_ACTION.outputPaths    #'VARR'_ARR. Only allow retrieving those VARRs
                                  #Meant to decrease the LAMBDA_FUNC's response payload
CAPI_CUSTOM_ACTION                #'REGEXP'. If API action fails and its ErrorCode matches:
 .ignoreErrorCodesMatching        #  - do not fail
                                  #  - CAPI_CUSTOM.getResponseField*('VARR') throws
                                  #Cannot be used together with PhysicalResourceId.fromResponse()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TRIGGER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new TriggerFunction(...[, OPTS])  #TRIGGER_FUNC. Inherits from LAMBDA_FUNC
TRIGGER_FUNC.trigger              #TRIGGER
OPTS.*                            #Same as both TRIGGER and LAMBDA_FUNC

new Trigger(...CARGS[, OPTS])     #TRIGGER. CUSTOM_RESOURCE that invokes a Lambda FUNC each time it is created
                                  #I.e. meant for actions
                                  #Inherits from CONSTRUCT
                                  #The LAMBDA_FUNC's successful response is ignored
                                  #Any function|invocation error is forwarded as a function error
OPTS.handler                      #LAMBDA_FUNC. Automatically set when using TRIGGER_FUNC
OPTS.invocationType               #Like LAMBDA_FUNC (def: 'RequestResponse'). ENUM InvocationType
OPTS.timeout                      #DURATION (def: 2m)
OPTS.executeOnHandlerChange       #BOOL (def: true). Also calls LAMBDA_FUNC each time TRIGGER_FUNC is updated (but not deleted)
TRIGGER[_FUNC].executeBefore|After
 (CONSTRUCT_ARR)                  #CONSTRUCT_ARR (def: [])
OPTS.executeBefore|After          #Only call LAMBDA_FUNC before|after those CONSTRUCTs have been created|updated (using RESOURCE.DependsOn)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EXTENSIONS RESOURCE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@cdk-clouformation/RESTYPE        #ETYPE
                                  #RESTYPE is dasherized, e.g. Alexa::ASK::Skill -> alexa-ask-skill
                                  #Automatically generated from ETYPE's ESCHEMA
                                  #Version 0.0.305

new CfnTYPE(...CARGS[, OPTS])     #CETYPE. TYPE is RESTYPE's last part
                                  #Inherits from CZRESOURCE

OPTS.*
CETYPE.props                      #RESPROPS_OBJ but camelCase'd
CETYPE.attrRESATTR                #TK. Like CloudFormation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       EXTENSIONS IMPORT       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-import cfn                    #Creates CDK code for an ETYPE or Service Catalog PRODUCT, as a CZRESOURCE
 ETYPE[@ETYPE_VERSION]            #Used by @cdk-clouformation under-the-hood
cdk-import sc                     #I.e. only needed directly when testing locally, or when using Service Catalog PRODUCT
                                  #Version 0.2.565

--outdir|-o                       #'DIR' (def: '.')
--language|-l                     #Output 'LANGUAGE', among typescript|java|python|csharp|golang

--schema|-s                       #'ESCHEMA_PATH' (def: use registry)

--go-module                       #STR. Module name, with Go
--java-package                    #STR. Package name, with Java
--csharp-namespace                #STR (def: 'ETYPE'). Namespace, with C#

cdk-import sc
--product-id                      #STR
--provisioning-artifact-id        #STR
--path-id                         #STR. Launch path id


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLI CALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new AwsCliLayer(...CARGS)         #Lambda CLAYER_VERSION with AWS CLI v1
                                  #Installed at /opt/awscli/aws
                                  #Used by a few CDK internal modules

new AwsCliAsset(...CARGS[,HFOPTS])#HFASSET with AWS CLI v2 as .zip archive
                                  #Can be turned into Lambda CLAYER_VERSION using:
                                  #  Lambda.LayerVersion OPTS.code lambda.Code.fromBucket(HFASSET.bucket, HFASSET.s3ObjectKey)
                                  #Installed at /opt/awscli/aws
                                  #Package @aws-cdk/asset-awscli-v2 (version 2.2.202)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INCLUDE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnInclude(...CARGS, OPTS)    #CINCLUDE. CloudFormation JSON|YAML 'TEMPLATE', used as a fragment
                                  #I.e. transform CloudFormation -> CDK
                                  #Inherits from CELEM
OPTS.templateFile                 #'PATH' to TEMPLATE

CINCLUDE.getResource('RESOURCE')  #TEMPLATE.resources.RESOURCE
 ->CSRESOURCE|CZRESOURCE          #CUSTOM_RESOURCEs are returned as CZRESOURCEs. All others are returned as CSRESOURCEs
CINCLUDE.getParameter
 ('PARAM')->CPARAM                #TEMPLATE.parameters.PARAM
CINCLUDE.getCondition
 ('COND')->CCOND                  #TEMPLATE.conditions.COND
CINCLUDE.getMapping
 ('FILTER')->CFILTER              #TEMPLATE.mappings.FILTER
CINCLUDE.getRule
 ('RULE')->CRULE                  #TEMPLATE.rules.RULE
CINCLUDE.getOutput
 ('OUTPUT')->COUTPUT              #TEMPLATE.outputs.OUTPUT
CINCLUDE.getHook
 ('HOOK')->CHOOK                  #TEMPLATE.hooks.HOOK

OPTS.parameters                   #{ PARAM: 'VAL', ... } (def: {}) to resolve right away:
                                  #  - substitute any 'PARAM' in !Ref|Sub with 'VAL'
                                  #  - remove TEMPLATE.Parameters.PARAM

OPTS.preserveLogicalIds           #BOOL. If true (def), CELEM.logicalId uses 'RESOURCE' name from TEMPLATE
                                  #Otherwise, it generates a LID, i.e. default behavior of CELEM.logicalId
                                  #I.e. should be true for apps, false for libraries

OPTS.allowCyclicalReferences      #BOOL (def: false). Allow cycles in TEMPLATE.Resources.**
                                  #Only meant when those cycles are resolved by MACROs

OPTS.loadNestedStacks.RESOURCE    #OPTS2 for nested STACK 'RESOURCE' defined in TEMPLATE
                                  #Required to create underlying NSTACK
CINCLUDE.getNestedStack
 ('RESOURCE')->OBJ                #Returns OBJ: stack NSTACK, includedTemplate CINCLUDE2
CINCLUDE.loadNestedStack
 ('RESOURCE', OPTS2)->OBJ         #Same as OPTS.loadNestedStacks.RESOURCE OPTS2 + getNestedStack()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MIGRATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk migrate                       #Transform CloudFormation 'TEMPLATE' to CDK file, using cdk_from_cfn

--language|-l                     #STR (def: 'typescript'). Same choices as cdk_from_cfn

--from-path                       #'PATH' to source TEMPLATE

--from-stack                      #BOOL (def: false). Alternative to --from-path: use GetTemplate() on deployed 'STACK'
                                  #'STACK' name is --stack-name
--account                         #'ACCOUNT_ID', with --from-stack
--region                          #'REGION', with --from-stack

--stack-name|-n                   #'STACK'. New STACK.stackName
--output-path                     #'DIR' (def: '.')
                                  #Output 'PATH' depends on language
                                  #  - for TypeScript: DIR/lib/STACK-stack.ts
                                  #Calls `cdk init app` in DIR
--compress                        #BOOL (def: false). Zip output 'DIR'

cdk_from_cfn ['TEMPLATE']         #Convert CloudFormation 'TEMPLATE' to CDK code
 ['OUTPUT']                       #Def 'TEMPLATE': stdin
                                  #Def 'OUTPUT': stdout
                                  #Can choose language with cargo build --features=LANGUAGE,
                                  #among typescript (def), golang, java, Python, csharp
                                  #Version 0.90.0

decdk                             #Transform declarative JSON CloudFormation TEMPLATE-like to CDK file
                                  #Unlike `cdk migrate`:
                                  #  - pro: can use core CKRESOURCEs as RESTYPEs
                                  #  - con: not an actual CloudFormation TEMPLATE, i.e. much fewer features
                                  #Not documented: prefer using either CloudFormation TEMPLATEs, or CDK directly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RESOLVABLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RV                                #"Resolvable". Deferred value
                                  #Meant to represent RESATTRs, PARAMs, etc.
Tokenization
 .isResolvable(VAL)->BOOL         #Whether is RV

RVV                               #RV|TK|'TOKENS'
Token.isUnresolved(VAL)->BOOL     #Whether is RVV
Token.compareStrings              #Returns ENUM TokenComparison:
 (STR, STR2)->ENUM                #  - BOTH_UNRESOLVED|ONE_UNRESOLVED: if both|either is RVV
                                  #  - DIFFERENT|SAME: otherwise, using ===

Tokenization.resolve              #Resolve all RVs in VAL, deeply
 (VAL, OPTS)->VAL                 #TKs are first decoded
                                  #  - including inside 'TOKENS'
                                  #VAL cannot be a FUNC|CONSTRUCT
                                  #Called by `cdk synth`
OPTS.scope
OPTS.preparing                    #Passed to PRODUCER's OBJ.*
OPTS.removeEmpty                  #BOOL (def: true). Remove empty values in OBJ|ARR
OPTS.resolver                     #Must be `new DefaultTokenResolver(new StringConcat())`

CSTACK.resolve(VAL)->VAL          #Same as Tokenization.resolve() with OPTS.scope CSTACK

Lazy.any(PRODUCER[, OPTS])->RV    #OPTS:
                                  #  - omitEmptyArray BOOL (def: false): transform resolved empty ARRs to undefined
Lazy.string
 (PRODUCER[, OPTS])->STR_TK       #
Lazy.list
 (PRODUCER[, OPTS])->ARR_TK       #OPTS: omitEmpty (same as Lazy.any())
Lazy.number(PRODUCER)->NUM_TK     #
Lazy.uncached*(...)->TK           #Unless using this, all of the above memoizes PRODUCER.produce()

PRODUCER.produce(OBJ)->VAL        #RV's deferred FUNC
                                  #Called by Tokenization.resolve()
OBJ.scope                         #CONSTRUCT
OBJ.documentPath                  #'PROP'_ARR. Property path within CONSTRUCT
OBJ.preparing                     #BOOL (def: false). Whether called by `cdk synth`
OBJ.registerPostProcessor         #Transform VAL, once resolved
 (FUNC(VAL, OBJ)->VAL)            #OBJ is same as PRODUCER.produce()'s arg
OBJ.resolve(VAL[, OPTS])->VAL     #Reference to Tokenization.resolve(), to resolve a child value
                                  #OPTS is only: removeEmpty BOOL

JsonNull                          #RV that resolves to null

Token.asAny(VAL)->RV              #Turn VAL into RV (unless already one)
                                  #If VAL is TK, return its RV as is
Token.as*(...)->TK                #Turn VAL into TK


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TOKEN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TK                                #*_TK. Encode RV to a smaller serializable type
                                  #Goal:
                                  #  - allows concatenating it in 'TOKENS' string
                                  #  - same type as underlying value, for type validation
                                  #Stores it in a global MAP, then returns a key to it
                                  #Can be represented as a STR, STR_ARR or NUM, but resolved value is same

STR_TK                            #'${Token[STR.NUM]}'
                                  #NUM is global increment
                                  #STR can be set using OPTS.displayHint
                                  #  - non-[[:alnum:]._-:] converted to `.`
                                  #  - def: 'TOKEN'
Token.asString(VAL[,OPTS])->STR_TK#Noop if VAL is STR
Tokenization
 .reverseCompleteString(STR_TK)
 [->RV]                           #undefined if not STR_TK

ARR_TK                            #ARR with single element '#{TOKEN[STR.NUM]}', similar to STR_TK
Token.asList(VAL[, OPTS])->ARR_TK #Noop if VAL is STR_ARR
Tokenization
 .reverseList(ARR_TK)[->RV]       #undefined if not ARR_TK

NUM_TK                            #NUM. Exponent e+289 is used as a marker, integer part is global increment
                                  #Can be decoded either as NUM or as 'NUM'
Token.asNumber(VAL)->NUM_TK       #Noop if VAL is NUM
Tokenization
 .reverseNumber(NUM_TK)[->RV]     #undefined if not NUM_TK
Tokenization.stringifyNumber
 (NUM[_TK])->STR[_TK]             #

Tokenization.reverse              #If VAL is:
 (VAL[, OPTS])[->RV]              #  - TK: turn it into RV
                                  #  - RV: return as is
                                  #  - otherwise: undefined
                                  #If OPTS.failConcat false (def: true), can pass 'TOKENS'
                                  #  - only the first TK is turned into RV


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         TOKENS STRING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'TOKENS'                          #STR that can contain multiple STR_TK|NUM_TK (not ARR_TK)
                                  #Automatically converted by `cdk synth` to { Fn::Join }, if necessary

Tokenization.reverseString
 ('TOKENS')->TOKEN_FRAG           #
TOKEN_FRAG                        #Concatenation of VALs and RVs
TOKEN_FRAG.addLiteral(VAL)        #Add VAL item
TOKEN_FRAG.addToken(RV)           #Add RV item
TOKEN_FRAG.length                 #NUM of items
TOKEN_FRAG.firstValue             #First item. undefined if none
                                  #If RV, returned as STR_TK
TOKEN_FRAG.firstToken             #First RV item. undefined if none
TOKEN_FRAG.tokens                 #All RVs items, as ARR
TOKEN_FRAG.mapTokens({ mapToken })
 ->TOKEN_FRAG2                    #Apply mapToken(RV)->RV|VAL on each RV item

TOKEN_FRAG.join({ join })->VAL    #Reduce all items to a single one using join(VAL2, VAL3)->VAL
                                  #RV items are passed as STR_TKs
                                  #If 0 items, call once with 2 undefined values
                                  #If 1 item, returned as is
                                  #`new StringConcat()` can be used as join FUNC, to return 'TOKENS'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REFERENCE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Reference(VAL,...CARGS[,ENUM])#CREF. Inherits RV
                                  #RV with a known target CONSTRUCT
                                  #Def 'CREF': 'Reference'
CREF.value                        #VAL to resolved to
CREF.target                       #CONSTRUCT targeted by the CREF
                                  #As opposed to the PARENT_CONSTRUCT, which consumes it
CREF.displayName                  #'CREF'
CREF.typeHint                     #ENUM ResolutionTypeHint.STRING|NUMBER|STRING_LIST
                                  #CREF.value's type
                                  #Should be correctly set for proper serialization
CREF.creationStack                #Like CELEM.*
CREF.toString()->STR_TK           #
CREF.toStringList()->ARR_TK       #

CFNREF                            #Resolves to { Ref } or { Fn::GetAtt } in TEMPLATE
                                  #Inherits CREF
CfnReference
 .forPseudo(STR, CONSTRUCT)       #{ Ref: STR }
 ->CFNREF                         #CONSTRUCT is CREF.target
CfnReference.for(CELEM,           #Reference to CELEM, either:
 'RESATTR|Ref'[, ENUM[, ENUM2]])  #  - 'Ref': { Ref: CELEM_LID }
 ->CFNREF                         #  - no ENUM: { Fn::GetAtt: [CELEM_LID, 'RESATTR'] }
                                  #  - ENUM ReferenceRendering.GET_ATT_STRING: { Fn::GetAtt: 'CELEM_LID.RESATTR' }
                                  #  - ENUM ReferenceRendering.FN_SUB: '${CELEM_LID[.RESATTR]}', to use in { Fn::Sub }
                                  #     - 'RESATTR' is skipped when 'Ref'
                                  #ENUM2 is CREF.typeHint
CFNREF                            #Resolves to RV instead of { Ref|Fn::GetAtt }
 .assignValueForStack(CSTACK, RV) #CSTACK must be CREF.target's CSTACK
CFNREF.hasValueForStack
 (CSTACK)->BOOL                   #

CZRESOURCE.getAtt                 #CfnReference.for(CZRESOURCE, 'RESATTR', undefined, ENUM)
 ('RESATTR'[, ENUM])->CFNREF      #I.e. CFNREF resolving to { Fn::GetAtt: [CZRESOURCE_LID, 'RESATTR'] }

CfnRefElement                     #Inherits CfnElement
CFNREFELEM.ref                    #CFNREF_STR_TK resolving to { Ref: CELEM_LID }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        BUILT-IN PARAM         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Aws.STACK_ID|STACK_NAME|ACCOUNT_ID
 |REGION|PARTITION|URL_SUFFIX
 |NO_VALUE|NOTIFICATION_ARNS
CSTACK.urlSuffix                  #STR_TK resolving to built-in PARAM 'AWS::...'
CSTACK.partition                  #Same but is directly a STR (not a TK) providing both:
                                  #  - CSTACK.region is not agnostic
                                  #  - FFLAG @aws-cdk/core:enablePartitionLiterals (recommended)

new ScopedAws(CONSTRUCT)
 .stackId|stackName|accountId
 |region|partition|urlSuffix
 |notificationArns
CSTACK.stackId|notificationArns   #STR_TK resolving to built-in PARAM { Ref: 'AWS::...' }

BSTR                              #STR with following template variables
BSUB                              #Like BSTR but resolved to a STR_TK of { Fn::Sub: BSTR } if account|region is agnostic
${AWS::Partition}                 #'PARTITION'
${AWS::AccountId}                 #CSTACK.accountId, unless agnostic (kept as is)
${AWS::Region}                    #CSTACK.region, unless agnostic (kept as is)
${Qualifier}                      #'BOOTSTRAP_MID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SECRET VALUE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new SecretValue(VAL[, OPTS])      #CSECRET. Inherits from RV, resolving to VAL
CSECRET.unsafeUnwrap()->STR_TK    #
FFLAG                             #If true (recommended), require using unsafeUnwrap(), as opposed to resolving RV directly
 @aws-cdk/core:checkSecretUsage   #I.e. requires being explicit about where VAL is being referenced

OPTS|CSECRET.typeHint             #Like CREF.typeHint (def: STRING)
OPTS.stackTrace                   #BOOL (def: true). Whether to create CSECRET.creationStack
CSECRET.creationStack
CSECRET.toString()->STR_TK
CSECRET.toStringList()->ARR_TK    #Like CREF.*

SecretValue.unsafePlainText
 (STR)->CSECRET                   #Resolving to STR

SecretValue.resourceAttribute
 (CFNREFELEM.ref)->CSECRET        #Resolving to { Ref: CELEM_LID }
SecretValue.resourceAttribute
 (CSRESOURCE.attrRESATTR)->CSECRET#Resolving to { Fn::GetAtt: [CSRESOURCE_LID, 'RESATTR'] }

SecretValue.cfnParameter          #Resolving to { Ref: 'PARAM' }
 (CPARAM)->CSECRET                #Fails if PARAM.NoEcho true


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DYNAMIC REFERENCE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new CfnDynamicReference
 ('SERVICE', 'ARGS')              #CDYNREF. RV resolving to '{{resolve:SERVICE:ARGS}}'

SecretValue.cfnDynamicReference
 (CDYNREF)->CSECRET               #Resolving to '{{resolve:SERVICE:ARGS}}'

SecretValue.ssmSecure
 ('NAME'[, 'VERSION'])->CSECRET   #Resolving to '{{resolve:ssm-secure:NAME[:VERSION]}}'

SecretValue.secretsManager
 ('SECRET_ID'[, OPTS])->CSECRET   #Resolving to '{{resolve:secretsmanager:SECRET_ID:SecretString[:VARR][:VSTAGE|VID]}}'
OPTS.jsonField                    #'VARR'
OPTS.versionStage                 #'VSTAGE'
OPTS.versionId                    #'VID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Fn.*(...)                         #Arguments can be RVV
                                  #If no RVV passed as argument, returns result directly
                                  #  - only for Fn.split|select|len|toJsonString|parseDomainName()

Fn.ref(STR)->STR_TK               #{ Ref: STR }
Fn.getAtt
 ('RESOURCE', 'RESATTR')->RV      #{ Fn::GetAtt: ['RESOURCE', 'RESATTR'] }
Fn.getAzs(['REGION'])->ARR_TK     #{ Fn::GetAZs: 'REGION'|'' }

Fn.importValue('EXPORT')->STR_TK  #{ Fn::ImportValue: 'EXPORT' }
Fn.importListValue
 ('EXPORT', NUM[, 'DELIM'])       #{ Fn::ImportValue: 'EXPORT' } + Fn.split('DELIM', ..., NUM)
 ->ARR_TK                         #Def 'DELIM': ','

Fn.conditionIf
 ('COND', VAL, VAL2)->RV          #{ Fn::If: ['COND', VAL, VAL2] }
Fn.conditionEquals(VAL, VAL2)->RV #{ Fn::Equals: [VAL, VAL2] }
Fn.conditionNot(BOOL)->RV         #{ Fn::Not: [BOOL] }
Fn.conditionAnd|Or(BOOL_ARR)->RV  #{ Fn::And|Or: [BOOL,...] }
                                  #If more than 10 items, nest { Fn::And|Or: [{ Fn::And|Or: [...] }, ...] }

Fn.join
 (STR, STR2_ARR[_RV])->STR_TK     #{ Fn::Join: [STR, STR2_ARR] }
Fn.split                          #{ Fn::Split: [STR, STR2] }
 (STR, STR2[, NUM])->ARR[_TK]     #If NUM passed, returns TK_ARR instead
Fn.sub(STR[, OBJ])->STR_TK        #{ Fn::Sub: STR } or { Fn::Sub: [STR, OBJ] }

Fn.len(ARR)->NUM_TK               #{ Fn::Length: ARR }
Fn.select
 (NUM, STR_ARR)->STR[_TK]         #{ Fn::Select: [NUM, STR_ARR] }

Fn.toJsonString(OBJ|ARR)->STR_TK  #{ Fn::ToJsonString: OBJ|ARR }

new CfnJson                       #CFN_JSON. RV resolving to JSON.parse(JSON.stringify(OBJ|ARR))
 (...CARGS, { value: OBJ|ARR })   #OBJ|ARR can use RVVs
                                  #Goal: using RVV as OBJ keys
CFN_JSON.value                    #CFNREF

Fn.base64(STR)->STR_TK            #{ Fn::Base64: STR }

Fn.cidr
 ('CIDR', NUM, 'NUM2')->ARR_TK    #{ Fn::Cidr: ['CIDR', NUM, NUM2] }

Fn.refAll('RESTYPE')->ARR_TK      #{ Fn::RefAll: 'RESTYPE' }
Fn.valueOfAll
 ('RESTYPE', 'RESATTR')->ARR_TK   #{ Fn::ValueOfAll: ['RESTYPE', 'RESATTR'] }
Fn.valueOf
 ('PARAM', 'RESATTR')->STR_TK     #{ Fn::ValueOf: ['PARAM', 'RESATTR'] }

Fn.conditionContains
 (STR_ARR, STR2)->RV              #{ Fn::Contains: [STR_ARR, STR2] }
Fn.conditionEachMemberEquals
 (STR_ARR, STR2)->RV              #{ Fn::EachMemberEquals: [STR_ARR, STR2] }
Fn.conditionEachMemberIn
 (STR_ARR, STR2_ARR)->RV          #{ Fn::EachMemberIn: [STR_ARR, STR2_ARR] }

Fn.parseDomainName
 ('URL')->STR[_TK]                #Get 'URL' domain name (using // and / delimiters)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ARN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Arn.format
 (ARN_OBJ[, CSTACK])->'ARN'
CSTACK.formatArn(ARN_OBJ)->'ARN'  #CSTACK.partition|region|account are used as defaults
Arn.split
 ('ARN'[_TK], ENUM)->ARN_OBJ
CSTACK.splitArn
 ('ARN'[_TK], ENUM)->ARN_OBJ      #ENUM is ARN_OBJ.ArnFormat

ARN_OBJ.partition                 #'PARTITION'|undefined
ARN_OBJ.service                   #'SERVICE'
ARN_OBJ.region                    #'REGION'|undefined
ARN_OBJ.account                   #'ACCOUNT_ID'|undefined
ARN_OBJ.resource                  #'RESTYPE'
ARN_OBJ.resourceName              #'[...]NAME'
ARN_OBJ.arnFormat                 #ENUM|undefined. Format of ARN, among ENUM ArnFormat:
                                  #  - SLASH_RESOURCE_NAME: '...:RESTYPE:[NAMEPATH/]NAME'
                                  #  - COLON_RESOURCE_NAME: '...:RESTYPE:[NAMEPATH:]NAME'
                                  #  - SLASH_RESOURCE_SLASH_RESOURCE_NAME: '...:RESTYPE:[/NAMEPATH]/NAME'
                                  #  - NO_RESOURCE_NAME: '...:RESTYPE[[/NAMEPATH]/NAME]'
                                  #     - ARN_OBJ.resource is 'RESTYPE[[/NAMEPATH]/NAME]' and ARN_OBJ.resourceName undefined
                                  #     - can use Arn.extractResourceName('ARN', 'RESTYPE')->'[/NAMEPATH]/NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DURATION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATE                              #Converted to 'YYYY-MM-HHTHH:MM:SS' in RESPROPs during `cdk synth`

DURATION                          #
UNIT                              #'days|hours|minutes|seconds|millis'
Duration.UNIT(NUM)->DURATION      #
DURATION.toUNIT([OPTS])->NUM      #OPTS: integral BOOL (def: true)

'DURATION'                        #'P[..D][T[..H][..M][..[...]S]]'
Duration.parse
 ('DURATION')->DURATION           #
DURATION.toIsoString()->'DURATION'#

DURATION.toString()->STR          #'Duration.UNIT(NUM)'
DURATION.toHumanString()->STR     #'NUM UNITs [NUM2 UNIT2s]'
DURATION.unitLabel()->'UNIT'      #

DURATION.plus|minus
 (DURATION2)->DURATION

DURATION.isUnresolved()->BOOL     #Whether underlying duration was passed as a RV|TK
DURATION.formatTokenToNumber()
 ->'NUM UNIT'                     #Works even if isUnresolved()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXPIRATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPIRATION                        #Wrapper around DATE

Expiration.atDate
 (DATE)->EXPIRATION               #
EXPIRATION.date                   #DATE

Expiration.atTimestamp
 (DATE_NUM)->EXPIRATION           #
EXPIRATION.toEpoch()->DATE_NUM    #

Expiration.fromString
 ('DATE')->EXPIRATION             #Using new Date('DATE')

Expiration.after
 (DURATION)->EXPIRATION           #Using now + DURATION
EXPIRATION
 .isBefore|isAfter(DURATION)->BOOL#Using now + DURATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TIMEZONE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Timezone.TIMEZONE                 #TIMEZONE. E.g. Timezone.EUROPE_ZURICH
Timezone.of('TIMEZONE')->TIMEZONE #

TIMEZONE.timezoneName             #'TIMEZONE'. E.g. 'Europe/Zurich'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SIZE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Size.UNIT(NUM[_RVV])->SIZE        #
SIZE.toUNIT([OPTS])->NUM          #Throws if RVV, unless same UNIT
OPTS.rounding                     #How to round, among ENUM SizeRoundingBehavior:
                                  #  - NONE: keep as float
                                  #  - FLOOR: Math.floor()
                                  #  - FAIL (def): throw if not integer

SIZE.unit.label                   #'UNIT' among: bytes|kibibytes|mebibytes|gibibytes|tebibytes|pedibytes
SIZE.amount                       #NUM[_RVV] (in SIZE.unit)
SIZE.unit.inBytes                 #NUM[_RVV] (in bytes)
SIZE.isResolved()->BOOL           #Whether NUM is RVV


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SYNTH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CSTAGE.synth([SYOPTS])->CASSEMBLY #Creates ASSEMBLY from a STAGE
                                  #Modifies CONSTRUCTs, i.e. must be done only once
SYOPTS.force                      #BOOL. If false (def), memoize
AOPTS.autoSynth                   #BOOL (def: true if CLI). Call CAPP.synth() on `beforeExit`

ORDER ==>                         #First order: nested CSTAGEs before parent
                                  #Second order within each CSTAGE:
                                  #  - ASPECTs
                                  #  - resolve cross-stack references
                                  #  - NODE.validate()
                                  #  - onSynthesize()
                                  #  - resolve RESOLVABLEs
                                  #  - create ASSEMBLY, ARTIFACTs, ASSETs
                                  #  - VPOL

Aspects.of(CONSTRUCT)->ASPECTS    #
ASPECTS.add(ASPECT)               #
ASPECTS.all()->ASPECT_ARR         #
ASPECT.visit                      #FUNC(CONSTRUCT) to call during `cdk synth`
                                  #Called on both CONSTRUCT and its descendants (excluding child CSTAGEs)

NODE.addValidation                #Calls validate() during `cdk synth`, with `this` NODE
 ({ validate()->'ERROR'_ARR })    #Throws if any 'ERROR'
                                  #As opposed to throwing an ERROR, this is done once all CAPP initialized
                                  #  - i.e. only useful when validation requires being called lazily
SYOPTS.skipValidation             #BOOL (def: false). Do not call NODE.validate() on `cdk synth`
NODE.validate()->'ERROR'_ARR      #Manually call and concatenate all validate() FUNCs of this NODE

attachCustomSynthesis(CONSTRUCT,  #Calls onSynthesize() during `cdk synth`
 { onSynthesize(CSESSION) })      #Called only on CONSTRUCT (cannot be CSTACK)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VALIDATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSOPTS.policyValidationBeta1      #VPOL_ARR. Validate TEMPLATE files after `cdk synth` done
                                  #Meant for Policy-as-Code
                                  #E.g. used by cdk-validator-cfnguard (see its doc)

VPOL.name                         #'VPOL', for description purpose
VPOL.ruleIds                      #'RULE'_ARR, for description purpose

VPOL.validate                     #FUNC(VREQ)->VRES called at the end of `cdk synth`
VREQ.templatePaths                #'PATH'_ARR to 'TEMPLATE' of all STACKs
VRES.success                      #BOOL. If false, exit code 1
VPOL.version
VRES.pluginVersion                #'X.Y.Z' (def: '0.0.0'), for description purpose
VRES.metadata                     #Arbitrary OBJ, with STR values
VRES.metadata.error               #Automatically set to 'Validation plugin "VPOL" failed: ERROR.message', if VPOL.validate() throws

VRES.violations                   #VERROR_ARR
VERROR.ruleName                   #'RULE'
VERROR.description                #STR. What failed
VERROR.fix                        #STR. How to fix
VERROR.severity                   #STR
VERROR.ruleMetadata               #Arbitrary OBJ, with STR values

VERROR.violatingResources         #VRES_ARR. RESOURCEs that failed
VRES.resourceLogicalId            #'LID'
VRES.templatePath                 #'PATH' to template
VRES.locations                    #'VARR'_ARR in RESOURCE, e.g. 'Properties/RESPROP'

CVAR                              #BOOL. If false (def), pretty print results (successful or not)
@aws-cdk/core:validationReportJson#If true, saved as JSON to 'ASSEMBLY_DIR/policy-validation-report.json' (only failed ones)
                                  #In either case, includes failed RESOURCE:
                                  #  - location in CONSTRUCT tree
                                  #  - library version (using TNODE.constructInfo)
                                  #  - stack trace (using CMETADATA.trace)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ASSEMBLY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CASSEMBLY                         #Output of `cdk synth`

CSESSION.assembly
new CloudAssemblyBuilder
 (['ASSEMBLY_DIR'[, XOPTS]])      #CBUILDER. Builds a CASSEMBLY

new CloudAssembly
 ('ASSEMBLY_DIR'[, LOPTS])        #CASSEMBLY. Loads ASSEMBLY_DIR by using its MANIFEST

cdk diff|deploy|import|destroy
 |list|metadata|notices
--output|-o
ENVVAR CDK_OUTDIR                 #'ASSEMBLY_DIR'. Def: './cdk.out' in CLI, 'TMPDIR/cdk.outRANDOM' programmatically
SSOPTS|CSTAGE|CSESSION.outdir     #If does not exist, created
CASSEMBLY.directory               #Cannot be specified by nested CSTAGE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MANIFEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/manifest.json
CASSEMBLY.manifest                #MANIFEST. Full CASSEMBLY description

CBUILDER.buildAssembly()
 ->CASSEMBLY                      #Save MANIFEST on-disk
CBUILDER.delete()                 #Delete MANIFEST on-disk

Manifest.saveAssemblyManifest
 (MANIFEST, 'PATH')               #Save to 'PATH', as JSON
Manifest.loadAssemblyManifest
 ('PATH'[, OPTS])->MANIFEST       #Inverse
OPTS|LOPTS.skipVersionCheck       #BOOL. If false (def), ensure Manifest.version >= MANIFEST.version
OPTS|LOPTS.skipEnumCheck          #BOOL (def: false). Allows MANIFEST.** values to contain invalid type when it is an enum

ENVVAR CDK_CLI_ASM_VERSION
Manifest|MANIFEST|CASSEMBLY
 .version                         #'34.0.0'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARTIFACT MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MANIFEST.artifacts.ARTIFACT_ID    #ARTIFACT. Parts of an ASSEMBLY
ARTIFACT.type                     #One of:
                                  #  - 'cdk:tree': TREE
                                  #  - 'aws:cloudformation:stack': STACK_ARTIFACT
                                  #  - 'cdk:asset-manifest': ASSETS
                                  #  - 'cdk:cloud-assembly': nested ASSEMBLY

CBUILDER.addArtifact              #Declare ARTIFACT
 ('ARTIFACT_ID', ARTIFACT)        #Does not write ARTIFACT to disk: done by CBUILDER.buildAssembly() instead

CASSEMBLY.artifacts               #CARTIFACT_ARR
CASSEMBLY.tryGetArtifact
 ('ARTIFACT_ID')[->CARTIFACT]     #

CloudArtifact.fromManifest
 (CASSEMBLY, 'ARTIFACT_ID',
 ARTIFACT)->CARTIFACT             #
CARTIFACT                         #Higher-level view on ARTIFACT
CARTIFACT.assembly                #CASSEMBLY
CARTIFACT.id                      #'ARTIFACT_ID'
CARTIFACT.manifest                #ARTIFACT
CARTIFACT.hierarchicalId          #Either STACK_ARTIFACT.displayName, or 'ARTIFACT_ID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   ARTIFACT NESTED ASSEMBLY    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NESTED CSTAGE ==>                 #Nested CSTAGEs (including CAPPs) automatically create a nested ASSEMBLY
                                  #Same as parent one, except ASSETS_DIR -> ASSETS_DIR/ARTIFACT_ID
CSTAGE.artifactId                 #'assembly-NID' (with / -> -) used as 'ARTIFACT_ID'
                                  #If not nested: ''

CBUILDER.createNestedAssembly
 ('ARTIFACT_ID', 'NID')
 ->CBUILDER2                      #Create nested ASSEMBLY
CBUILDER.parentBuilder            #Parent CBUILDER2, if nested

CASSEMBLY.nestedAssemblies        #NASSEMBLY_CARTIFACT_ARR
CASEMBLY.getNestedAssemblyArtifact
 ('ARTIFACT_ID')
 ->NASSEMBLY_CARTIFACT            #
CASEMBLY.getNestedAssembly
 ('ARTIFACT_ID')->CASSEMBLY       #
NASSEMBLY_CARTIFACT.nestedAssembly#CASSEMBLY

NASSEMBLY_ARTIFACT.properties     #NASSEMBLY_APROPS
NASSEMBLY_APROPS
 |NSSEMBLY_CARTIFACT.directoryName#'ARTIFACT_ID'
NASSEMBLY_CARTIFACT.fullPath      #'ASSEMBLY_DIR/ARTIFACT_ID'
NASSEMBLY_APROPS
 |NASSEMBLY_CARTIFACT.displayName #'NID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARTIFACT TREE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/tree.json            #TREE. Full CONSTRUCT tree (not CloudFormation RESOURCE tree)
                                  #ARTIFACT_ID is 'Tree'

CASSEMBLY.tree                    #TREE_CARTIFACT

TREE_ARTIFACT.properties.file
TREE_CARTIFACT.file               #'PATH' to TREE
AOPTS.treeMetadata                #BOOL (def: true). If false, do not create TREE

TREE.version                      #'tree-0.1'
TREE.tree                         #TNODE
TNODE.children                    #TNODE_ARR
TNODE.id                          #'CONSTRUCT' or 'App' (for root)
TNODE.path                        #'NID'

TNODE.attributes                  #TATTRS. Node-specific information, meant only for TREE
NODE.inspect                      #FUNC(INSPECTOR) called during `cdk synth` to set TATTRS
INSPECTOR.attributes              #TATTRS
INSPECTOR.addAttribute
 ('TATTR', VAL)                   #TATTRS.TATTR = VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SYNTHESIZER          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.defaultStackSynthesizer
SOPTS|CSTACK.synthesizer          #CSYNTH. Produces STACK|ASSET ARTIFACTs

new DefaultStackSynthesizer
 ([DOPTS])                        #Default CSYNTH

new CliCredentialsStackSynthesizer#CSYNTH. Like default but always use CLI credentials
 ([DOPTS])                        #  - i.e. no DOPTS.*Role*|ExternalId
                                  #Also, no BootstrapVersion check
                                  #  - i.e. no DOPTS.*BootstrapVersion*

new BootstraplessSynthesizer      #CSYNTH. Like default but does not need `cdk bootstrap` to have been run, i.e. no:
 ([DOPTS])                        #  - BootstrapVersion check
                                  #     - i.e. no DOPTS.*BootstrapVersion*
                                  #  - DOPTS.qualifier
                                  #  - CSYNTH.add*Asset(), DOPTS.*asset|bucket|dockerTag*
                                  #  - DOPTS.*lookupRole*, *ExternalId
                                  #But still has: DOPTS.deployRoleArn|cloudFormationExecutionRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ARTIFACT STACK         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STACK_ARTIFACT                    #ARTIFACT that is a STACK definition + its TEMPLATE

CASSEMBLY.stacks[Recursively]     #STACK_CARTIFACT_ARR
                                  #If `Recursively`, includes nested CASSEMBLYs
CASSEMBLY.getStackByName
 ('STACK')->STACK_CARTIFACT       #Does not include nested CASSEMBLYs
CASSEMBLY.getStackArtifact
 ('ARTIFACT_ID')->STACK_CARTIFACT #Includes nested CASSEMBLYs

STACK_ARTIFACT.displayName        #'NID' of CSTACK
STACK_CARTIFACT.displayName       #Same but, unless equals, appends ' (CSTACK.stackName)'
STACK_ARTIFACT.properties         #STACK_APROPS

CSTACK.artifactId                 #'ARTIFACT_ID'. CID, excluding top-level CSTAGE

CSTACK|STACK_APROPS               #'ARTIFACT_ID[.nested].template.json', i.e. 'PATH' to CloudFormation TEMPLATE
 |STACK_CARTIFACT.templateFile    #If NSTACK: `.nested`
STACK_CARTIFACT.templateFullPath  #'ASSEMBLY_DIR/ARTIFACT_ID[.nested].template.json'
SOPTS.suppressTemplateIndentation #BOOL. If false (def), indent|prettify TEMPLATE file
STACK_APROPS|STACK_CARTIFACT      #FASSET_RES.s3ObjectUrlWithPlaceholders, i.e. TEMPLATE is uploaded to S3 as a FASSET
 .stackTemplateAssetObjectUrl     #Only when TEMPLATE is >50KB
                                  #S3 OBJECT is 'cdk/STACK_ARTIFACT_ID/TEMPLATE_HASH.yml'
STACK_CARTIFACT.template          #CloudFormation TEMPLATE OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ARTIFACT STACK METADATA    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk metadata STACKS               #Print STACK_ARTIFACT.metadata
--json|-j                         #BOOL (def: false). Output as JSON instead of YAML

STACK_ARTIFACT.metadata./NID      #CMETADATA_ARR. NODE-related information kept in ASSEMBLY
NODE.metadata                     #Unlike STACK|RESOURCE.Metadata: not present in CloudFormation TEMPLATE
CARTIFACT.findMetadataByType
 ('VAR')->CMETADATA_ARR           #Also include CMETADATA.path '/NID'

NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a CMETADATA
CMETADATA.type                    #'VAR'
CMETADATA.data                    #VAL. Can contain RVV

CMETADATA.trace                   #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets CMETADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start CMETADATA.trace from
ENVVAR CDK_DEBUG=true             #BOOL (def: false). Enable stack traces
cdk --debug                       #Handles source maps (using node-source-map-support)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET MANIFEST MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/                     #ASSETS. Sets of local data to upload to S3 or ECR, for a specific STACK
 STACK_ARTIFACT_ID.assets.json    #ARTIFACT_ID is 'STACK_ARTIFACT_ID.assets'
                                  #Is just declaration of intent. Actual uploading is done by `cdk deploy` (through CPUBLISH), including:
                                  #  - zipping (FASSET_SRC.packaging 'zip')
                                  #  - command execution (ASSET_SRC.executable)
                                  #  - `docker build`
                                  #  - upload to S3|ECR
ASSETS_CARTIFACT.contents         #ASSETS

ASSETS_ARTIFACT.properties.file   #'PATH' to ASSETS, relative to 'ASSEMBLY_DIR'
ASSETS_CARTIFACT.file             #'PATH' to ASSETS, absolute

Manifest.saveAssetManifest
 (ASSETS, 'PATH')                 #Save to 'PATH', as JSON
Manifest.loadAssetManifest
 ('PATH')->ASSETS                 #Inverse

ASSETS.version                    #STR. Same value as MANIFEST.version

ASSET.source                      #ASSET_SRC. Local data
ASSET.destinations.DEST_ID        #ASSET_DEST. Where to upload
                                  #If agnostic, use 'current_account|current_region'
ASSET_DEST.*                      #With CPUBLISH, can be BSTR
ASSET_DEST.region                 #'REGION'. If agnostic, undefined

CVAR aws:cdk:enable-asset-metadata#BOOL (def: true). Whether to set 'aws:asset:*'
cdk diff|deploy|import|destroy    #On either CMETADATA or RESOURCE.Metadata, depending on the case
 |list|metadata --asset-metadata  #Only for RESOURCEs that have ASSETs, documented as such here
                                  #Used by:
                                  #  - SAM for local workflow
                                  #  - `cdk diff` to populate nested STACKs
CMETADATA 'aws:asset:path'        #'PROP'. Means ASSET 'PATH' is at RESOURCE.PROP
CMETADATA 'aws:asset:property'    #'PATH' to ASSET


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   ASSET MANIFEST HIGH-LEVEL   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-assets                        #Package in same monorepo

AssetManifest.fromFile
 ('ASSEMBLY_DIR/
 STACK_ARTIFACT_ID.assets.json')
 ->CASSETS
new AssetManifest
 ('ASSEMBLY_DIR', ASSETS)         #CASSETS. Higher-level view of ASSETS
CASSETS.directory                 #'ASSEMBLY_DIR'

CASSETS.entries                   #CASSET_ARR
CASSETS.files                     #Same but only with type 'file'

CASSET                            #ASSET_SRC + ASSET_DEST
CASSET.type                       #'file' or 'docker-image'
CASSET.id.assetId                 #'SRC_ID'
CASSET.source|genericSource       #ASSET_SRC
CASSET.id.destinationId           #'DEST_ID'
CASSET
 .destination|genericDestination  #ASSET_DEST

CASSETS.select
 (CASSET_PATTERN)->CASSETS2       #Return a subset matching specific SRC_IDs|DEST_IDs
new DestinationPattern
 (['SRC_ID'[, 'DEST_ID']])        #CASSET_PATTERN
CASSET_PATTERN.toString()
 ->'SRC_ID|*:DEST_ID:*'           #
DestinationPattern.parse
 ('[SRC_ID|*][:DEST_ID|*]')
 ->CASSET_PATTERN                 #

CASSETS.list()->STR_ARR           #CASSET_ARR serialized as:
                                  #  - 'SRC_ID CASSET.type ASSET_SRC'
                                  #  - '  - SRC_ID:DEST_ID ASSET_DEST' (for each)
cdk-assets ls                     #Print CASSETS.list()
--path|-p                         #'ASSEMBLY_DIR' (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET MANIFEST FILE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSETS.files.SRC_ID               #FASSET. ASSET that is a local FILE|DIR to upload to S3
                                  #'SRC_ID' is 'FILE_HASH'
CSYNTH.addFileAsset
 (FASSET_NEW)->FASSET_RES         #

FASSET_SRC.path
FASSET_NEW.fileName               #'PATH' to local file
FASSET_SRC|NEW.packaging          #'file' (FILE) or 'zip' (DIR to zip)
FASSET_NEW.sourceHash             #'FILE_HASH', i.e. SHA256 'HASH_HEX' of file contents
                                  #I.e. if file contents did not change, does not re-upload

FASSET_SRC|NEW.executable         #['COMMAND'[, 'ARG',...]]. Alternative to FASSET_SRC.path|packaging
                                  #Must create file, then return its absolute file path on stdout

FASSET_DEST.bucketName            #S3 'BUCKET'
DOPTS.fileAssetsBucketName        #Def: see BOOTSTRAP. Can be BSTR
FASSET_RES.bucketName             #Same, but as BSUB
FASSET_DEST.objectKey             #S3 'OBJECT'
                                  #Is 'FILE_HASH.EXT' with 'EXT' taken from local file 'PATH', or '.zip' if packaging 'zip'
FASSET_RES.objectKey              #Same, but as BSUB
DOPTS.bucketPrefix                #STR (def: '') prefixing S3 'OBJECT'

cdk bootstrap
--bootstrap-bucket-name|-b        #S3 'BUCKET' for FASSETs. Def: 'cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}'
--toolkit-bucket-name             #Is BOOTSTRAP_STACK.Resources.StagingBucket, exported as STACK OUTPUTs BucketName and BucketDomainName
                                  #Uses:
                                  #  - ACL 'private'
                                  #  - VERSIONING (delete former VERSIONs after 1y)
                                  #  - UpdateReplacePolicy|DeletePolicy 'Retain'
                                  #  - BUCKET_POLICY requiring TLS
                                  #     - at BOOTSTRAP_STACK.Resources.StagingBucketPolicy
--bootstrap-kms-key-id            #KMS_KEY_ID used with BUCKET's x-amz-server-side-encryption-aws-kms-key-id [C|S] (SSE-KMS)
                                  #Def: none, i.e. uses SSE-S3
--bootstrap-customer-key          #BOOL (def: false). Like --bootstrap-kms-key-id, but creates KMS_KEY as part of BOOTSTRAP_STACK
                                  #Is BOOTSTRAP_STACK.Resources.FileAssetsBucketEncryptionKey[Alias], with ALIAS 'cdk-${Qualifier}-assets-key'
--public-access-block             #BOOL (def: true). Use S3 PUBLIC_BLOCK with all values true
 -configuration                   #Noop since those are already PUBLIC_BLOCK's default values

FASSET_RES
 .s3ObjectUrlWithPlaceholders     #'s3://BUCKET/OBJECT' to TEMPLATE uploaded to S3
FASSET_RES.s3ObjectUrl            #Same, but as BSUB
FASSET_RES.httpUrl                #BSUB 'https://s3.${AWS::Region}.amazonaws.com/BUCKET/OBJECT'

FASSET_DEST.assumeRoleArn         #Like STACK_APROPS.* but for uploading to S3. Can be BSTR
DOPTS.fileAssetPublishingRoleArn  #Can be '': using CLI's credentials
                                  #Def: BOOTSTRAP_ROLE 'file-publishing', which is at BOOTSTRAP_STACK.Resources.FilePublishingRole:
                                  #  - allowed s3:GetObject*|GetBucket*|GetEncryptionConfiguration|List*, s3:DeleteObject*|PutObject*|Abort*
                                  #  - only on FASSET 'BUCKET'
FASSET_DEST.assumeRoleExternalId
DOPTS
 .fileAssetPublishingExternalId   #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn

FASSET_NEW.deployTime             #BOOL (def: false). Delete from S3 after `cdk deploy`
                                  #E.g. Lambda FUNC are copied during deploy, i.e. can be deleted


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   ASSET MANIFEST CONTAINER    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSETS.dockerImages.SRC_ID        #IASSET. ASSET that is a 'DIR' with a Dockerfile, to `docker build` then upload to ECR
                                  #SRC_ID is '[IMAGE_NAME-]IMAGE_HASH'
CSYNTH.addDockerImageAsset
 (IASSET_NEW)->IASSET_RES         #

IASSET_SRC.directory
IASSET_NEW.directoryName          #'DIR' of Dockerfile
IASSET_SRC|NEW.dockerFile         #'FILENAME' (def: 'Dockerfile'). `docker build --file FILENAME`

IASSET_SRC|NEW.executable         #['COMMAND'[, 'ARG',...]]. Alternative to IASSET_SRC.directory
                                  #Must call `docker build --tag LOCAL_TAG` and returns 'LOCAL_TAG' on stdout
                                  #Cannot use IASSET_SRC.dockerBuildArgs|dockerBuildTarget|dockerOutputs|dockerFile

IASSET_SRC|NEW.dockerBuildArgs    #OBJ. `docker build --build-arg VAR=VAL`
IASSET_SRC|NEW.dockerBuildSsh     #STR. `docker build --ssh STR`
IASSET_SRC|NEW.dockerBuildSecrets #OBJ. `docker build --secret id=VAR,VAL`
IASSET_SRC|NEW.dockerBuildTarget  #STR. `docker build --target STR`
IASSET_SRC|NEW.dockerOutputs      #STR_ARR. `docker build --output=STR`
IASSET_SRC|NEW.networkMode        #STR. `docker build --network STR`
IASSET_SRC|NEW.platform           #STR. `docker build --platform STR`

IASSET_SRC.cacheFrom
IASSET_NEW.dockerCacheFrom        #CONTAINER_CACHE_ARR. `docker build --cache-from type=STR,VAR=VAL,...`
IASSET_SRC.cacheTo
IASSET_NEW.dockerCacheTo          #CONTAINER_CACHE. `docker build --cache-to type=STR,VAR=VAL,...`
CONTAINER_CACHE.type              #STR. Docker cache backend, e.g. 'inline', 'local', 'registry', 's3', 'azblob', 'gha'
CONTAINER_CACHE.params            #OBJ. Docker cache configuration

IASSET_NEW.assetName              #'IMAGE_NAME'
IASSET_NEW.sourceHash             #'IMAGE_HASH'

IASSET_DEST.repositoryName        #ECR 'REPO'. Can be BSTR
DOPTS.imageAssetsRepositoryName   #Def: 'cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}'
                                  #Is BOOTSTRAP.Resources.ContainerAssetsRepository, exported as STACK OUTPUT ImageRepositoryName:
                                  #  - ImageTagMutability 'immutable'
                                  #  - untagged IMAGEs expiring after 1y
IASSET_RES.repositoryName         #Same but as BSUB
IASSET_DEST.imageTag              #Docker 'IMAGE_TAG'
                                  #Is 'IMAGE_HASH'
IASSET_RES.imageTag               #Same but as BSUB
DOPTS.dockerTagPrefix             #STR (def: '') prefixing 'IMAGE_TAG'

IASSET_RES.imageUri               #BSUB '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/REPO:IMAGE_TAG'

IASSET_DEST.assumeRoleArn         #Like STACK_APROPS.* but for uploading to ECR. Can be BSTR
DOPTS.imageAssetPublishingRoleArn #Can be '': using CLI's credentials
                                  #Def: BOOTSTRAP_ROLE 'image-publishing', which is BOOTSTRAP_STACK.Resources.ImagePublishingRole:
                                  #  - allowed ecr:PutImage|InitiateLayerUpload|UploadLayerPart|CompleteLayerUpload,
                                  #    ecr:BatchCheckLayerAvailability|DescribeRepositories|DescribeImages|BatchGetImage|GetDownloadUrlForLayer
                                  #  - only on IASSET's ECR 'REPO'
IASSET_DEST.assumeRoleExternalId
DOPTS
 .imageAssetPublishingExternalId  #STR (def: none). ASSUMED_ROLE_REQ.ExternalId with assumeRoleArn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET STAGING MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new AssetStaging(...CARGS[,UOPTS])#UASSET. Copies FASSET local path to ASSEMBLY_DIR
                                  #Goals:
                                  #  - making ASSEMBLY_DIR self-contained, i.e. able to move it
                                  #  - local debugging

cdk diff|deploy|import|destroy
 |list|metadata --staging         #BOOL (def: true). Enables copy (does not impact bundling)
CVAR aws:cdk:disable-asset-staging#BOOL (def: false). Same but inverse

AssetStaging.clearAssetHashCache()#Clear cache used for ASSET_HASH computation and TARGET_PATH creation

UOPTS|UASSET.sourcePath           #'SOURCE_PATH' to copy. Can be DIR|FILE
UOPTS.exclude                     #STR_ARR (def: []) to exclude from 'SOURCE_PATH'
                                  #Not with bundling
UOPTS.ignoreMode                  #What STR means with UOPTS.exclude:
                                  #  - 'glob' (def): 'GLOB'
                                  #  - 'git': .gitignore pattern
                                  #  - 'docker': .dockerignore pattern
UOPTS.follow                      #Whether to follow symlinks in 'SOURCE_PATH'
                                  #  - 'always'
                                  #  - 'never'
                                  #  - 'external' (def): if outside 'SOURCE_PATH_DIR'
                                  #  - 'internal-only': if inside 'SOURCE_PATH_DIR'
                                  #Not with bundling

XOPTS|CBUILDER|CSTAGE.assetOutdir #'ASSETS_DIR' (def: 'ASSEMBLY_DIR')
UASSET.absoluteStagedPath         #'TARGET_PATH', absolute. Is 'ASSETS_DIR/asset.ASSET_HASH.EXT'
                                  #'.EXT' is taken from 'SOURCE_PATH'
UASSET.relativeStagedPath
 (CSTACK)->'TARGET_PATH'          #Relative to 'ASSEMBLY_DIR'
UASSET.packaging                  #'zip' or 'file', depending on whether 'TARGET_PATH' is 'DIR'
                                  #No zipping: done by CPUBLISH instead
UASSET.isArchive                  #BOOL. True if 'TARGET_PATH' not DIR and its 'EXT' is ARCHIVE_EXT, i.e. *.tar[.gz]|tgz, *.zip or *.jar

UASSET.assetHash                  #'ASSET_HASH'. SHA256 hex hash.
                                  #I.e. if does not change, does not re-upload
UOPTS.assetHashType               #Input of 'ASSET_HASH', among:
                                  #  - 'source' (def if no UOPTS.assetHash):
                                  #     - input is 'SOURCE_PATH' recursive files path + contents
                                  #     - input also includes some UOPTS.*
                                  #  - 'output':
                                  #     - same but using 'TARGET_PATH'
                                  #     - only with bundling
                                  #  - 'custom' (def if UOPTS.assetHash):
                                  #     - input is UOPTS.assetHash STR
                                  #     - input also includes UOPTS.bundling
CVAR @aws-cdk/core:assetHashSalt  #STR. Additional input to 'ASSET_HASH'
UOPTS.extraHash                   #Not with UOPTS.assetHashType 'custom'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ASSET STAGING BUNDLE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UOPTS.bundling                    #BOPTS. Transform 'SOURCE_PATH_DIR' using a Docker container
                                  #Docker container:
                                  #  - gets 'SOURCE_PATH_DIR' as /asset-input
                                  #  - must produce /asset-output[/FILE], which is bound to 'BDIR' locally
                                  #'BDIR' is temporary DIR: the final output is moved to UASSET.absoluteStagedPath
AssetStaging.BUNDLING_INPUT_DIR   #'/asset-input'
AssetStaging.BUNDLING_OUTPUT_DIR  #'/asset-output'

CVAR aws:cdk:bundling-stacks
--bundling-stacks                 #'GLOB' (def: '**'). Only bundle STACKs with a matching 'NID'

BOPTS.local.tryBundle             #FUNC('BDIR', BOPTS)->BOOL
                                  #Build programmatically instead of using a Docker container
                                  #If success, must return true, which skips Docker container bundling

BOPTS.outputType                  #Final 'DIR|FILE' location, among:
                                  #  - 'auto-discover' (def): any of the ones below
                                  #  - 'single-file': '/asset-output/FILE' (no siblings, not a DIR)
                                  #  - 'archived': same but FILE must end with '.ARCHIVE_EXT'
                                  #  - 'not-archived': '/asset-output' (must be a DIR)
BOPTS.bundlingFileAccess          #How SOURCE_PATH_DIR and BDIR are passed as /asset-input and /asset-output to `docker`
                                  #Either:
                                  #  - 'BIND_MOUNT' (def):
                                  #     - `docker run --rm -v SOURCE_PATH_DIR:/asset-input -v BDIR:/asset-output IMAGE`
                                  #  - 'VOLUME_COPY':
                                  #     - does:
                                  #        - `docker cp TEMP_CONTAINER_ID:SOURCE_PATH/. TEMP_CONTAINER2:/asset-input`
                                  #        - `docker run --rm --volume-from=TEMP_CONTAINER2 IMAGE`
                                  #        - `docker cp TEMP_CONTAINER2:/asset-output BDIR`
                                  #     - 'TEMP_CONTAINER2' is created with `docker run`:
                                  #        - IMAGE is public.ecr.aws/docker/library/alpine
                                  #        - uses `-v TEMP_VOLUME:/asset-input -v TEMP_VOLUME2:/asset-output`
                                  #           - TEMP_VOLUME[2] through `docker volume create|rm`
                                  #        - runs SHELL_COMMAND: mkdir -p /asset-input && chown -R USER /asset-input /asset-output
                                  #     - no BOPTS.network
                                  #     - slower but more portable

BOPTS.image                       #DOCKER_IMAGE
DOCKER_IMAGE                      #Utility to run `docker` programmatically
DOCKER_IMAGE.image                #'IMAGE'
ENVVAR CDK_DOCKER                 #'COMMAND' (def: 'docker')

DockerImage.fromRegistry
 ('IMAGE')->DOCKER_IMAGE          #
DockerImage.fromBuild
 ('PATH'[, OPTS])->DOCKER_IMAGE   #Calls `docker build PATH` then uses the built 'IMAGE', which is 'cdk-OPTS_HASH'
OPTS.file                         #STR. `docker build -f`
OPTS.buildArgs                    #OBJ. `docker build --build-arg VAR=VAL`
OPTS.platform                     #STR. `docker build --platform`
OPTS.targetStage                  #STR. `docker build --target`
OPTS.cacheFrom                    #`docker build --cache-from`. OBJ_ARR: type STR, params OBJ
OPTS.cacheTo                      #`docker build --cache-to`. OBJ_: type STR, params OBJ

DOCKER_IMAGE.run([OPTS])          #Calls `docker run --rm IMAGE`
[B]OPTS.entrypoint                #['COMMAND', 'ARG',...]. `docker run ... --entrypoint COMMAND ARG...`
[B]OPTS.command                   #'SHELL_COMMAND'. `docker run ... SHELL_COMMAND`
[B]OPTS.securityOpt               #STR. `docker --security-opt STR`
[B]OPTS.network                   #STR. `docker --network STR`
OPTS.platform                     #STR. `docker --platform STR`
[B]OPTS.user                      #STR. `docker -u STR`
                                  #Def with BOPTS: current, or '1000:1000' on Windows
[B]OPTS.volumesFrom               #STR_ARR. `docker --volumes-from`
[B]OPTS.volumes                   #`docker -v PATH:PATH2:[FLAG,...]`. OBJ_ARR:
                                  #  - hostPath 'PATH'
                                  #  - containerPath 'PATH2'
                                  #  - consistency BOOL (def: false): use FLAG 'delegated'
[B]OPTS.environment               #OBJ. `docker --env VAR=VAL`
[B]OPTS.workingDirectory          #'DIR'. `docker -w DIR`
                                  #Def with BOPTS: '/asset-input'

DOCKER_IMAGE.cp                   #Calls `docker cp CONTAINER_ID:PATH PATH2`
 ('PATH'[, 'PATH2'])->'PATH2'     #Create temporary container, i.e. `docker create IMAGE`, and `docker rm -v CONTAINER_ID` at the end
                                  #Def 'PATH2': '/TMPDIR/cdk-docker-cp-RANDOM'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ASSET STAGING FILE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-s3-assets                     #Package in same monorepo
new Asset(...CARGS, HFOPTS)       #HFASSET. Like FASSET, but first uses AssetStaging
                                  #Inherits CONSTRUCT
                                  #Should be used to add FASSETs in CAPP

HFOPTS.*                          #Like UOPTS.*
HFOPTS.path                       #'SOURCE_PATH' of asset. Can be DIR|FILE
HFASSET.isBundled                 #BOOL. Whether HFOPTS.bundling is used
HFASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as FASSET_NEW.sourceHash
HFASSET.assetPath                 #Like UASSET.absoluteStagedPath, but relative to 'ASSEMBLY_DIR'
                                  #Used as FASSET_NEW.fileName
HFASSET.isFile                    #BOOL. Whether UASSET.packaging 'file'
                                  #UASSET.packaging is also used as FASSET_NEW.packaging
HFASSET.isZipArchive              #BOOL. Whether either 'DIR' or *.tar[.gz]|tgz|zip|jar

HFOPTS.deployTime                 #Like FASSET_NEW.deployTime
HFASSET.s3BucketName              #Like FASSET_RES.bucketName
HFASSET.s3ObjectKey               #Like FASSET_RES.objectKey
HFASSET.s3ObjectUrl               #Like FASSET_RES.s3ObjectUrl
HFASSET.httpUrl                   #Like FASSET_RES.httpUrl

HFASSET.bucket                    #S3 CBUCKET
HFASSET.grantRead(YGRANTABLE)     #Same as HFASSET.bucket.grantRead(...), i.e. allow reading OBJECTs
HFOPTS.readers                    #YGRANTABLE_ARR (def: []), called using HFASSET.grantRead()

HFASSET.addResourceMetadata       #Adds the following TEMPLATE.Resources.RESOURCE.Metadata:
 (CZRESOURCE, 'PROP')             #  - 'aws:asset:property': 'PROP'
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:is-bundled': HFASSET.isBundled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ASSET STAGING ESBUILD     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk-esbuild                       #Version 5.0.6

new TypeScriptAsset(...CARGS,OPTS)#HFASSET that uses bundling, but with esbuild buildSync()
                                  #Done locally, without a Docker image (using HFOPTS.bundling.local.tryBundle())
OPTS.entryPoints                  #'PATH'[_ARR] or { VAR: 'PATH' } used as esbuild buildSync({ entryPoints: ENTRY })
OPTS.buildOptions.*               #OBJ. esbuild buildSync(OBJ)
OPTS.buildOptions.bundle          #Always true
OPTS.buildOptions.absWorkingDir   #Source 'DIR' (def: '.')
OPTS.buildOptions.outfile|outdir  #Target 'PATH'. Relative to 'BDIR'
OPTS.assetHash                    #HFOPTS.assetHash
OPTS.copyDir                      #'DIR'[_ARR] to copy to 'BDIR/DIR'
                                  #Can be { SUBDIR: 'DIR', ... } to copy to 'BDIR/SUBDIR/DIR' instead
                                  #Relative to OPTS.buildOptions.absWorkingDir
                                  #Delete 'BDIR[/SUBDIR]/DIR' first if it exists
OPTS.buildProvider                #CESBUILD (def: new EsbuildProvider())

new TypeScriptCode(VAL[, OPTS])   #Lambda Code that uses TypeScriptAsset instead of HFASSET
                                  #OPTS.* is like TypeScriptAsset, with VAL being OPTS.entryPoints
                                  #OPTS.buildOptions default { platform: 'node', target 'nodeX' }
                                  #Prefer NodejsFunction instead (see Lambda docs)

new TypeScriptSource(VAL[, OPTS]) #Like aws-s3-deployment Source.asset() but using HFASSET
                                  #OPTS.* is like TypeScriptAsset, with VAL being OPTS.entryPoints
                                  #OPTS.buildOptions default { platform: 'browser' }

new InlineJavaScriptCode
 ('CODE'[, OPTS])                 #Lambda InlineCode that calls esbuild transformSync()
new InlineTypeScriptCode(...)     #Same but using defaults loader 'ts'
OPTS.transformOptions.*           #OBJ. esbuild transformSync('CODE', OBJ)
                                  #Def (merged not overridden): { logLevel: 'warning', format: 'cjs', platform: 'node', target: 'nodeX', loader: 'js' }
OPTS.transformProvider            #CESBUILD (def: new EsbuildProvider())

new EsbuildProvider([OPTS])       #CESBUILD. Wraps `esbuild` module
ENVVAR CDK_ESBUILD_MODULE_PATH    #'PATH' (def: none) to esbuild main file, used by CESBUILD.*Sync()
OPTS.esbuildModulePath            #Def: find locally installed esbuild
                                  #  - if not Node.js, also:
                                  #     - find globally installed esbuild
                                  #     - otherwise run `npm install esbuild` in a temporary DIR
OPTS.esbuildBinaryPath            #'PATH' (def: none) to esbuild binary
                                  #Only used to set ENVVAR ESBUILD_BINARY_PATH during CESBUILD.*Sync()
CESBUILD.buildSync(OBJ)           #Runs esbuild buildSync(OBJ)
CESBUILD.transformSync
 ('CODE'[, OBJ])->'CODE'          #Runs and returns esbuild transformSync('CODE'[, OBJ]).code


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ASSET STAGING CONTAINER    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-ecr-assets                    #Package in same monorepo
new DockerImageAsset              #HIASSET. Like IASSET, but first uses AssetStaging, using a `Dockerfile`
 (...CARGS, HIOPTS)               #Inherits CONSTRUCT
                                  #Should be used to add Dockerfile-based IASSETs in CAPP

HIOPTS.*                          #Like UOPTS.*
HIOPTS.dir                        #'SOURCE_PATH_DIR'
                                  #Resulting 'TARGET_PATH_DIR' is used as IASSET_NEW.directoryName
HIOPTS.exclude                    #Like UOPTS.exclude but always:
                                  #  - include and use SOURCE_PATH_DIR/.dockerignore, if exists
                                  #  - include HIOPTS.file
                                  #  - exclude ASSEMBLY_DIR
HIOPTS.ignoreMode                 #Like UOPTS.ignoreMode except default is 'docker'
HIOPTS.extraHash                  #Cannot be specified. Instead, always use HIOPTS.PROP except if HIOPTS.invalidation.PROP false
HIASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as IASSET_NEW.sourceHash

HIOPTS.*                          #Like IASSET_NEW.docker*
HIOPTS.assetName                  #Like IASSET_NEW.assetName

HIOPTS.networkMode                #Like IASSET_NEW.networkMode, except must use one of the following
NetworkMode.DEFAULT               #'default'
NetworkMode.HOST                  #'host'
NetworkMode.NONE                  #'none'
NetworkMode
 .fromContainer('CONTAINER_ID')   #'container:CONTAINER_ID'
NetworkMode.custom(STR)           #STR

HIOPTS.platform                   #Like IASSET_NEW.platform, except must use one of the following
Platform.LINUX_AMD64              #'linux/amd64'
Platform.LINUX_ARM64              #'linux/arm64'
Platform.custom(STR)              #STR

HIASSET.imageUri                  #Like IASSET_RES.imageUri
HIASSET.imageTag                  #Like IASSET_RES.imageTag

HIASSET.repository                #ECR CREPO

HIASSET.addResourceMetadata       #Adds the following TEMPLATE.Resources.RESOURCE.Metadata:
 (CZRESOURCE, 'PROP')             #  - 'aws:asset:property': 'PROP'
                                  #  - 'aws:asset:path': 'TARGET_PATH'
                                  #  - 'aws:asset:dockerfile-path': HIOPTS.file
                                  #  - 'aws:asset:docker-*': HIOPTS.* related to IASSET_NEW.docker*, but dash-case'd


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     ASSET STAGING TARBALL     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-ecr-assets                    #Package in same monorepo
new TarballImageAsset             #HTASSET. Like IASSET, but first uses AssetStaging, using an 'IMAGE.tar'
 (...CARGS, HIOPTS)               #Inherits CONSTRUCT
                                  #Should be used to add IMAGE.tar-based IASSETs in CAPP

HTOPTS.tarballFile                #'IMAGE.tar', created by `docker save`
                                  #IASSET.executable calls `docker load` on resulting 'TARGET_PATH'

HTASSET.assetHash                 #Like UASSET.assetHash
                                  #Used as IASSET_NEW.sourceHash

HTASSET.imageUri                  #Like IASSET_RES.imageUri
HTASSET.imageTag                  #Like IASSET_RES.imageTag

HTASSET.repository                #ECR CREPO


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ASSET PUBLISH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cdk deploy                        #Calls CPUBLISH.buildEntry|publishEntry() on all ASSETS
--concurrency                     #Max NUM (def: 1) on STACK to deploy in parallel
--asset-parallelism               #BOOL (def: false). Max NUM of ASSETS to publishEntry() in parallel (8 if true, 1 if false)
                                  #buildEntry() is always serial
--asset-prebuild                  #BOOL (def: true). Call buildEntry() before deploying the STACK
                                  #Regardless, publishEntry() is always done after deploying the STACK
--force|-f                        #BOOL. If false (def):
                                  #  - do not upload FASSET|IASSET already uploaded (using CPUBLISH.isEntryPublished())
                                  #  - fail if TEMPLATE and STACK.* did not change

cdk-assets                        #Package in same monorepo
                                  #CLI + programmatic

cdk-assets publish [STR...]       #Calls CPUBLISH.publish()
                                  #STR... selects only specific CASSETS, with same syntax as DestinationPattern.parse()
--path|-p                         #'ASSEMBLY_DIR' (def: '.')
--profile                         #AWS 'PROFILE'

new AssetPublishing(CASSETS, OPTS)#CPUBLISH. Build ASSETS and publish them to S3|ECR

CPUBLISH.publish()->>             #Calls buildEntry() + publishEntry() on all CASSETS
OPTS.publishInParallel            #BOOL (def: false). Whether CASSETS are processed serially or in parallel
OPTS.buildAssets                  #BOOL (def: true). Whether to call buildEntry()
OPTS.publishAssets                #BOOL (def: true). Whether to call publishEntry()

CPUBLISH.buildEntry               #Creates Docker IMAGE from IASSET locally:
 (CASSET)->>BOOL                  #  - `docker login`
                                  #  - `docker build --tag LOCAL_TAG`
                                  #  - `docker tag LOCAL_TAG ECR_REPO_URI:IMAGE_TAG`
                                  #  - LOCAL_TAG is 'cdkasset-SRC_ID'
                                  #With FASSET: noop

CPUBLISH.publishEntry             #Publish local files to S3, or Docker IMAGE to ECR
 (CASSET)->>BOOL                  #With FASSET: upload S3 OBJECT
                                  #With IASSET: `docker push ECR_REPO_URI:IMAGE_TAG`

CPUBLISH.isEntryPublished         #Whether publishEntry() already called
 (CASSET)->>BOOL                  #With FASSET: check if S3 OBJECT exists
                                  #With IASSET: check if ECR IMAGE exists

OPTS.aws                          #Must be new DefaultAwsClient(['PROFILE'])
                                  #If PROFILE, sets ENVVAR AWS_PROFILE

OPTS.quiet                        #BOOL (def: false)
                                  #Print `docker` commands stdout|stderr

CPUBLISH.message                  #Current log 'MESSAGE'
CPUBLISH
 .progressListener.onPublishEvent #On CPUBLISH.message change
 ('EVENT_TYPE', CPUBLISH)         #'EVENT_TYPE' is 'start', 'success', 'fail', 'check', 'found', 'cached', 'build', 'upload', 'debug'

CPUBLISH.percentComplete          #NUM percentage of CASSETs successfully processed with CPUBLISH.buildEntry|publish[Entry]()
CPUBLISH.failures                 #OBJ_ARR: error ERROR, asset CASSET
                                  #Failed invocations of CPUBLISH.buildEntry|publish[Entry]()
CPUBLISH.hasFailures              #BOOL. CPUBLISH.failures.length !== 0
OPTS.throwOnError                 #BOOL. If true (def), throw if any failure
CPUBLISH.abort()                  #Abort CPUBLISH.buildEntry|publish[Entry]() and make them return false
