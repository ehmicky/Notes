
       
   CDK  
       



TODO:
  - https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html
  - https://docs.aws.amazon.com/cdk/v2/guide/cli.html
  - https://cdkworkshop.com/
  - https://docs.aws.amazon.com/cdk/v2/guide/home.html
  - https://github.com/aws/aws-cdk
  - https://constructs.dev/
  - https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript
  - https://github.com/Sceptre/sceptre-cdk-handler
  - https://cdk.dev/resources
  - https://github.com/kalaiser/awesome-cdk
  - check currently documented SERVICEs, with the list of aws_general doc

require('aws-cdk-lib/SERVICE')    #SLIB

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSTRUCT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


constructs                        #Npm package (version 10.3.0)

CONSTRUCT                         #RESOURCE or group of RESOURCEs
                                  #Can be:
                                  #  - l1: 1-1 correspondence to a CloudFormation RESOURCE
                                  #  - l2: higher-level, group of RESOURCEs
                                  #  - l3: "pattern", group of l2s
                                  #The parent|child relationship of those groups form a "scope tree"
                                  #  - different from "dependencies tree", which express execution order

this                              #Root CONSTRUCT

new Construct
 (PARENT_CONSTRUCT, 'CONSTRUCT')  #CONSTRUCT
Construct.isConstruct(VAL)->BOOL  #Like instanceof but cross-realm
CONSTRUCT.node                    #NODE

NODE.id                           #'CONSTRUCT'
                                  #/ are converted to --
                                  #undefined if root
NODE.addr                         #STR. NODE.id of current NODE + its parents, excluding ones with id 'Default'
                                  #Is hex SHA1 hash, starting with 'c8'
NODE.path                         #STR. NODE.id of parents + current NODE, /-separated
                                  #undefined if root
CONSTRUCT.toString()->STR         #Same except '<root>' if root

NODE.scope                        #Current CONSTRUCT
                                  #undefined for root
NODE.scopes                       #Ancestors CONSTRUCT_ARR, starting with root
NODE.root                         #Root CONSTRUCT
NODE.children                     #Direct children CONSTRUCT_ARR
NODE.defaultChild                 #Direct child CONSTRUCT that is most important
                                  #Def: one with id 'Default' or 'Resource'
NODE.findChild('CONSTRUCT')       #Among direct children
 ->CONSTRUCT                      #Exception if not found
NODE.tryFindChild('CONSTRUCT')    #Among direct children
 ->CONSTRUCT                      #undefined if not found
NODE.findAll([ENUM])              #Traverse descendants, depth-first
 ->CONSTRUCT_ARR                  #ENUM is PREORDER (def) or POSTORDER
NODE.tryRemoveChild('CONSTRUCT')
 ->BOOL                           #false if not found

NODE.lock()                       #Do not allow other NODEs to become new children
                                  #Inherited by current children
                                  #Set by `cdk synth`
NODE.locked                       #BOOL (def: false)

NODE.addValidation(OBJ)
OBJ.validate()->'ERROR'_ARR       #Add validate() FUNC, which checks whether NODE is valid
NODE.validate()->'ERROR'_ARR      #Call and concatenate all validate() FUNCs of this NODE
                                  #Called by `cdk synth`

NODE.setContext('CVAR', 'VAL')    #Associated data
                                  #Inherited by children, which can override it
                                  #Should be set before adding children, since their constructor might check it
NODE.getContext('CVAR')->'VAL'    #Throw if not found
NODE.tryGetContext('CVAR')->'VAL' #undefined if not found
NODE.getAllContext([OBJ2])->OBJ   #OBJ2 (def: {}) is shallow merged

NODE.metadata                     #METADATA_ARR. Associated metadata
NODE.addMetadata
 ('VAR', VAL[, OPTS])             #Add a METADATA
METADATA.type                     #'VAR'
METADATA.data                     #VAL
METADATA.trace                    #STR_ARR. Stack trace.
OPTS.stackTrace                   #BOOL (def: false). Sets METADATA.trace using Error.captureStackTrace()
                                  #Error.stackTraceLimit is temporarily set to Infinity
OPTS.traceFromFunction            #FUNC (def: addMetadata), to start METADATA.trace from

DEPENDABLE                        #CONSTRUCT|DEPENDENCY_GROUP
Dependable.implement(DEPENDABLE,
 {dependencyRoots: CONSTRUCT_ARR})#Set dependencies
NODE.addDependency(DEPENDABLE...) #Add dependency
Dependable.of(DEPENDABLE)
 .dependencyRoots                 #CONSTRUCT_ARR. Get dependencies
NODE.dependencies                 #Same (readonly), for NODE itself, not parents
                                  #Includes itself

new DependencyGroup(DEPENDABLE...)#Group of DEPENDABLEs
DEPENDENCY_GROUP
 .add(DEPENDABLE...)              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LAZY              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Tokenization.resolve(...)???
Tokenization.stringifyNumber(...)???

PRODUCER.produce(RCONTEXT)[->VAL]

Lazy.string(PRODUCER[, LOPTS])
 ->TOKEN
Lazy.uncached*(...)->TOKEN        #Same but do not cache PRODUCER.produce()

JsonNull                          #RESOLVABLE that resolves to null

TOKEN                             #*_TOKEN. Encode RESOLVABLE to a smaller serializable type
                                  #Stores it in a global MAP, then returns a key to it
Token.asAny(VAL)->RESOLVABLE      #Turn VAL into RESOLVABLE (unless already one)
                                  #If VAL is TOKEN, apply Tokenization.reverse() first
Token.reverse                     #If VAL is:
 (VAL[, OPTS])[->RESOLVABLE]      #  - TOKEN: turn it into RESOLVABLE
                                  #  - RESOLVABLE: return as is
                                  #  - otherwise: undefined
                                  #If OPTS.failConcat false (def: true), can pass 'TOKENS'
                                  #  - only the first TOKEN is turned into RESOLVABLE

STR_TOKEN                         #'${Token[STR.NUM]}'
                                  #NUM is global increment
                                  #STR can be set using OPTS.displayHint
                                  #  - non-[[:alnum:]._-:] converted to `.`
                                  #  - def: 'TOKEN'
Token.asString
 (VAL[, OPTS])->STR_TOKEN         #Noop if VAL is STR
Tokenization
 .reverseCompleteString(STR_TOKEN)
 [->RESOLVABLE]                   #undefined if not STR_TOKEN

ARR_TOKEN                         #ARR with single STR_TOKEN element
Token.asList
 (VAL[, OPTS])->ARR_TOKEN         #Noop if VAL is STR_ARR
Tokenization.reverseList
 (ARR_TOKEN)[->RESOLVABLE]        #undefined if not ARR_TOKEN

NUM_TOKEN                         #NUM. Exponent e+289 is used as a marker, integer part is global increment
                                  #Can be decoded either as NUM or as 'NUM'
Token.asNumber(VAL)->NUM_TOKEN    #Noop if VAL is NUM
Tokenization.reverseNumber
 (NUM_TOKEN)[->RESOLVABLE]        #undefined if not NUM_TOKEN

Tokenization
 .isResolvable(VAL)->BOOL         #Whether is a RESOLVABLE
Token.isUnresolved(VAL)->BOOL     #Whether is a RESOLVABLE|TOKEN|'TOKENS'
Token.compareStrings              #Returns ENUM TokenComparison:
 (STR, STR2)->ENUM                #  - BOTH_UNRESOLVED|ONE_UNRESOLVED: if both|either is RESOLVABLE|TOKEN|'TOKENS'
                                  #  - DIFFERENT|SAME: otherwise, using ===

'TOKENS'                          #STR that can contain STR_TOKEN|NUM_TOKEN
Tokenization.reverseString
 ('TOKENS')->TOKEN_FRAG           #
TOKEN_FRAG                        #Concatenation of VALs and RESOLVABLEs
TOKEN_FRAG.addLiteral(VAL)        #Add VAL item
TOKEN_FRAG.addToken(RESOLVABLE)   #Add RESOLVABLE item
TOKEN_FRAG.length                 #NUM of items
TOKEN_FRAG.firstValue             #First item. undefined if none
                                  #If RESOLVABLE, returned as STR_TOKEN
TOKEN_FRAG.firstToken             #First RESOLVABLE item. undefined if none
TOKEN_FRAG.tokens                 #All RESOLVABLE items, as ARR
TOKEN_FRAG.mapTokens({ mapToken })
 ->TOKEN_FRAG2                    #Apply mapToken(RESOLVABLE)->RESOLVABLE|VAL on each RESOLVABLE item
TOKEN_FRAG.join({ join })->VAL    #Reduce all items to a single one using join(VAL2, VAL3)->VAL
                                  #RESOLVABLE items are passed as STR_TOKENs
                                  #If 0 items, call once with 2 undefined values
                                  #If 1 item, returned as is
                                  #I.e.:
                                  #  - STR concatenation returns 'TOKENS'
                                  #  - ARR concatenation returns ARR of VAL|STR_TOKEN

{VAL}                             #RESOLVABLE. Value resolved only at `cdk synth`-time
RESOLVABLE.typeHint               #ENUM ResolutionTypeHint (STRING (def), NUMBER, STRING_LIST) hinting about the VAL's type
RESOLVABLE.creationStack          #STR_ARR. Stack trace.
                                  #Only set if CDK_DEBUG
                                  #Printed by String(RESOLVABLE)

RESOLVABLE.resolve(RCONTEXT)->VAL #
RCONTEXT                          #Context for RESOLVABLEs
RCONTEXT.scope                    #CONSTRUCT
RCONTEXT.documentPath             #'VAR'_ARR. Property path in the OBJ being output
RCONTEXT.preparing                #BOOL. Whether final output, or only preparing it
RCONTEXT.registerPostProcessor
 (FUNC(VAL, RCONTEXT)->VAL)       #Transfer VAL, once resolved

RCONTEXT.resolve(VAL[, OPTS])->VAL#Resolves a child value
OPTS.allowIntrinsicKeys           #BOOL (def: false)???
OPTS.removeEmpty                  #BOOL (def: false). Remove empty OBJ|ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Tags.of(CONSTRUCT)->CTAGS         #
CTAGS.add('KEY', 'VAL'[, TOPTS])
CTAGS.remove('KEY', [, TOPTS])    #Applied during `cdk synth` (using ASPECTS)

CONSTRUCT.tags|cdkTagManager
TagManager.of(CONSTRUCT)->CTAGM   #CTAGM. Only when RESOURCE has TAGS
TagManager.isTaggable[V2]
 (CONSTRUCT)->BOOL                #Whether has CRESOURCE.tags|cdkTagManager

new TagManager(TAGTYPE_ENUM,      #CTAGM. RESPROP Tags
 'RESTYPE'[, TAGS_OBJ[, OPTS]])   #Used by CTAGS under the hood
                                  #TAGS_OBJ is renderTags()'s value

CTAGM.setTag('TAG', 'VAL')        #
CTAGM.removeTag('TAG')            #
CTAGM.tagValues()->TAGS_OBJ       #
CTAGM.hasTags()->BOOL             #

TOPTS.priority                    #NUM is merging priority when setting|removing 2 TAGs with same name
CTAGM.setTag(...[, NUM])          #Def:
CTAGM.removeTag(..., NUM)         #  - setTag|removeTag(): 0
                                  #  - renderTags()'s TAGS_OBJ: 50
                                  #  - Tag TOPTS.priority: 100
                                  #  - RemoveTag TOPTS.priority: 200

OPTS.renderedTags                 #{TAGS_FOBJ}
CTAGM.renderTags                  #TAGS_OBJ (def: {}) are merged in
 ([TAGS_OBJ])->TAGS_FOBJ          #undefined if empty
TAGS_FOBJ                         #TAGS in the format expected by CloudFormation, according to TagType
TagType ENUM                      #Shape of TAGS, which differs per SERVICE
TagType MAP                       #TAGS_OBJ, i.e. { KEY: value, ... }
TagType KEY_VALUE                 #[{ Key, Value },...]
                                  #As input, must be lowercase'd
TagType STANDARD                  #[{ key, value },...]
                                  #Can also include any OBJ ("dynamic TAGs"), which are kept as is
TagType AUTOSCALING_GROUP         #Like STANDARD, but OBJ can also have propagateAtLaunch BOOL (def: false)
                                  #  - set as CTAGM.setTag(..., BOOL) or TOPTS.applyToLaunchedInstances
TagType NOT_TAGGABLE              #Always empty []

OPTS.tagPropertyName              #'RESPROP' (def: 'tags')
TOPTS.includeResourceTypes        #'RESTYPE'_ARR. Do not CTAGM.setTag() unless its 'RESTYPE' matches
TOPTS.excludeResourceTypes        #'RESTYPE'_ARR. Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CRESOURCE                         #RCONSTRUCT of l1

CRESOURCE.env                     #CENV
CENV.region                       #'REGION'
CENV.account                      #'ACCOUNT_ID'

CRESOURCE.applyRemovalPolicy(ENUM)#ENUM is RemovalPolicy. RESOURCE.DeletionPolicy
RPROPS.removalPolicy              #Available for some CRESOURCEs, usually when default is 'Retain' (instead of 'Delete')

CRESOURCE.stack                   #CSTACK

new Stack(PARENT_CONSTRUCT,
 'STACK'[, RESPROPS])             #CSTACK

new RCONSTRUCT(PARENT_CONSTRUCT,
 'RCONSTRUCT'[, RESPROPS])        #
RCONSTRUCT.RESPROP                #VAL
RCONSTRUCT.attrRESATTR            #VAL

Aspects.of(CONSTRUCT)->ASPECTS    #
ASPECTS.add(ASPECT)               #
ASPECTS.all()->ASPECT_ARR         #
ASPECT.visit(CONSTRUCT)           #FUNC to call on CONSTRUCT during `cdk synth`

ENVVAR CDK_DEBUG=true             #Debug logging
