
                  
   CDK_ASSERTIONS  
                  



VERSION ==>                       #Part of `aws-cdk-lib` (see CDK doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-cdk-lib/assertions            #Testing assertion library for TEMPLATEs and ANNOTATIONs
                                  #Meant for testing custom CONSTRUCTs
TTEMPLATE|ANNOTATIONS.*           #All throw exceptions on validation (as opposed to returning a BOOL)

Template.fromString
 ('TEMPLATE'[, OPTS])->TTEMPLATE  #
Template.fromJSON
 (TEMPLATE_OBJ[, OPTS])->TTEMPLATE#
Template.fromStack
 (CSTACK[, OPTS])->TTEMPLATE      #
OPTS.skipCyclicalDependenciesCheck#BOOL. If false (def), fail on circular dependencies
                                  #From: RESOURCE.DependsOn, !Ref|GetAtt|Sub
TTEMPLATE.toJSON()->TEMPLATE_OBJ  #

TTEMPLATE
 .templateMatches(MTEMPLATE)      #TEMPLATE matches
MTEMPLATE                         #TEMPLATE passed to Match.objectLike(), i.e. either OBJ|MATCHER

TTEMPLATE.resourceCountIs
 ('RESTYPE', NUM)                 #NUM RESOURCEs match
TTEMPLATE.hasResource
 ('RESTYPE', MRESOURCE)           #At least 1 RESOURCE match
TTEMPLATE.allResources
 ('RESTYPE', MRESOURCE)           #All RESOURCEs (at least 1) match
TTEMPLATE.findResources
 ('RESTYPE'[, MRESOURCE])         #List matching RESOURCEs
 ->RESOURCES_OBJ                  #RESOURCES_OBJ key is 'RESOURCE', value is RESOURCE_OBJ
MRESOURCE                         #Like MTEMPLATE but for TEMPLATE.Resources.RESOURCE

TTEMPLAT.resourcePropertiesCountIs
 ('RESTYPE', MRESPROPS, NUM)      #NUM RESOURCEs match
TTEMPLATE.hasResourceProperties
 ('RESTYPE', MRESPROPS)           #At least 1 RESOURCE matches
TTEMPLATE.allResourcesProperties
 ('RESTYPE', MRESPROPS)           #All RESOURCEs (at least 1) match
MRESPROPS                         #Like MTEMPLATE but for TEMPLATE.Resources.RESOURCE.Properties

TTEMPLATE.hasParameter
 ('PARAM|*', MPARAM)              #PARAM matches
TTEMPLATE.findParameters          #List matching PARAMs
 ('PARAM|*'[, MPARAM])->PARAMS_OBJ#PARAMS_OBJ key is 'PARAM', value is PARAM_OBJ
MPARAM                            #Like MTEMPLATE but for TEMPLATE.Parameters.PARAM

TTEMPLATE.hasOutput
 ('OUTPUT|*', MOUTPUT)
TTEMPLATE.findOutputs
 ('OUTPUT|*'[, MOUTPUT])
 ->OUTPUTS_OBJ                    #Same for STACK OUTPUTS
MOUTPUT                           #Like MTEMPLATE but for TEMPLATE.Outputs.OUTPUT

TTEMPLATE.hasMapping
 ('FILTER|*', MFILTER)
TTEMPLATE.findMappings
 ('FILTER|*'[, MFILTER])
 ->FILTERS_OBJ                    #Same for FILTERs
MFILTER                           #Like MTEMPLATE but for TEMPLATE.Mappings.FILTER

TTEMPLATE.hasCondition
 ('COND|*', MCOND)
TTEMPLATE.findConditions
 ('COND|*'[, MCOND])->CONDS_OBJ   #Same for CONDs
MCOND                             #Like MTEMPLATE but for TEMPLATE.Conditions.COND


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MATCHER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCHER                           #OBJ|ARR matcher for a given property|item
                                  #Can be nested inside OBJ|ARR|MATCHER2
Match.*(...)                      #Arguments can be MATCHERs themselves, except Match.exact()

Match.not(MATCHER2)->MATCHER      #
Match.absent()->MATCHER           #=== undefined
Match.anyValue()->MATCHER         #!== null|undefined
Match.exact(VAL)->MATCHER         #Deep ===
Match.objectEquals(OBJ)->MATCHER  #Deep ===, must be an OBJ
Match.objectLike(OBJ)->MATCHER    #Deep ===, must be an OBJ, can be a subset
Match.arrayEquals(ARR)->MATCHER   #Deep ===, must be an ARR
Match.arrayWith(ARR)->MATCHER     #Deep ===, must be an ARR, can be a subset
Match.stringLikeRegexp
 ('REGEXP')->MATCHER              #/REGEXP/m.test(STR)
Match.serializedJson(VAL)->MATCHER#Deep ===, after JSON.parse()

new Capture([MATCHER|VAL])        #Can be used as a MATCHER, to get the value that is being asserted
                                  #If MATCHER: only capture values that pass it
                                  #  - VAL is like Match.exact(VAL)
CAPTURE.asBoolean()->BOOL
CAPTURE.asString()->STR
CAPTURE.asNumber()->NUM
CAPTURE.asObject()->OBJ
CAPTURE.asArray()->ARR            #Get captured value
CAPTURE.next()->BOOL              #When CAPTURE matched multiple times, moves to next captured value
                                  #Returns false if none


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ANNOTATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Annotations.fromStack
 (CSTACK)->TANNOTATIONS           #

TANNOTATIONS
 .has[No]Error|Warning|Info
 ('NID', 'MESSAGE')               #NODE (or descendant) has [not] emitted this ANNOTATION
TANNOTATIONS                      #NODEs (or descendants) with this ANNOTATION
 .findError|Warning|Info          #OBJ:
 ('NID', 'MESSAGE')->OBJ_ARR      #  - level 'error|warning|info'
                                  #  - id 'WNAME'
                                  #  - entry: type 'aws:cdk:error|warning|info', path 'NID', data 'MESSAGE', trace STR_ARR
