
                   
   CDK_INTEG_TESTS  
                   



VERSION ==>                       #Part of CDK

@aws-cdk/integ-runner             #Package for CLI
@aws-cdk/integ-tests-alpha        #Package for IntegTest[CaseStack]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNNER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


integ-runner [DTEST...]           #Run DTESTs (def: all)
--config                          #'PATH' (def: 'integ.config.json') to JSON file with same values as CLI flags

--exclude                         #BOOL (def: false). Exclude DTESTs passed as positional argument, instead of including
--test-regex                      #'REGEXP'_ARR (def: any). Only run DTEST files with matching names
--directory                       #'DIR' (def: 'test') with files declaring DTESTs
--from-file                       #'PATH' with newline-separated list of DTESTs to include

--list                            #BOOL (def: false). List DTESTs instead of running them

--language|-l                     #'LANGUAGE'_ARR (def: all) among 'javascript', 'typescript', 'python', 'go'
--app                             #'SHELL_COMMAND' to run DTEST files
                                  #Can include '{filePath}'

--dry-run                         #BOOL (def: false). Do not deploy STACKs, just update snapshot
--update-on-failed                #BOOL (def: false). Run DTESTs and update snapshots for failed ones
--force                           #BOOL (def: false). Run DTESTs even if passing

--parallel-regions                #'REGION'_ARR (def: all). Run DTESTs in parallel in those REGIONs
--profiles                        #'PROFILE'_ARR (def: none) to use
--max-workers                     #NUM (def: 16) of workers running DTESTs in parallel

--disable-update-workflow         #BOOL (def: false). Do not allow DOPTS.stackUpdateWorkflow

--watch                           #BOOL (def: false)

--inspect-failures                #BOOL (def: false). Keep ASSEMBLY_DIR as is on DTEST failure, for inspection
--clean                           #BOOL (def: true). Cleanup STACKs at end

--verbose|-v                      #BOOL_ARR (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new IntegTest
 (CAPP, 'DTEST', DOPTS)           #DTEST. Set of CSTACKs to deploy and to perform assertions

DOPTS.testCases                   #CSTACK_ARR to deploy, i.e. being asserted
DOPTS.assertionStack              #CSTACK used to perform assertions
                                  #Def: new one within CAPP
                                  #Contains:
                                  #  - CUSTOM_RESOURCEs, performing assertions during `cdk deploy`
                                  #     - underlying Lambda FUNCs are added as UASSETs
                                  #     - automatically sets permissions
                                  #        - by creating POLICYs as part of CSTACK
                                  #        - i.e. using cfn-exec ROLE's privilege to do so
                                  #  - OUTPUTs with assertion results

DOPTS.enableLookups               #BOOL (def: false)
DOPTS.hooks                       #
DOPTS.regions                     #
DOPTS.diffAssets                  #BOOL
DOPTS.cdkCommandOptions           #OBJ
DOPTS.stackUpdateWorkflow         #BOOL
DOPTS.allowDestroy                #

new IntegTestCaseStack            #DSTACK. CSTACK used to perform assertions
 (PARENT_COSTRUCT,'DSTACK'[,OPTS])#Must be passed to DOPTS.testCases, and DOPTS.assertionStack must not be used
                                  #Goal: using multiple CSTACKs to perform assertions with different DOPTS.*
OPTS.*                            #Like CSTACK
OPTS.*                            #Like DOPTS.*, except no testCases|assertionStack|enableLookups


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MANIFEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSEMBLY_DIR/integ.json           #DMANIFEST, written during `cdk synth`
                                  #List of DSTACKs

DMANIFEST.version                 #'X.Y.Z'. Manifest.version

DMANIFEST.enableLookups           #OPTS.enableLookups

DMANIFEST
 .testCases.CSTACK_NODE_PATH      #DTCASE. One per DOPTS.assertionStack
DTCASE.*                          #DOPTS.*
DTCASE.assertionStack             #'NODE_PATH' of OPTS.assertionStack
DTCASE.assertionStackName         #'STACK' of OPTS.assertionStack
DTCASE.stacks                     #'NODE_PATH'_ARR of DOPTS.testCases


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REQUEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEST|DSTACK.assertions           #DASSERT

DASSERT.httpApiCall
 ('URL'[, OPTS])->DCALL           #Make HTTP call, and use its response
OPTS.*                            #Like fetch()

DASSERT.awsApiCall('SERVICE',
 'ACTION'[, PARAMS_OBJ            #Make AWS API call, and use its response
 [, 'VARR'_ARR]])->DCALL_API      #PARAMS_OBJ can use DATAVIEW|TYPED_ARRs

DASSERT.invokeFunction
 (OPTS)->DCALL_API                #Call Lambda FUNC, and use its response
OPTS.functionName|invocationType
 |logType|payload                 #Lambda INVOCATION_REQ.*

DCALL*.next(DCALL*2)->DCALL*2     #Run DCALL* only after DCALL*2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ASSERT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DASSERT.expect
 ('DEXPECT', DEXPECTED, DACTUAL)  #Asserts DACTUAL matches DEXPECTED
ActualResult.fromCustomResource
 (DCALL)->DACTUAL                 #
ActualResult.fromAwsApiCall
 (DCALL_API)->DACTUAL             #

DCALL*.expect(DEXPECTED)->DCALL*  #Asserts that HTTP|API call's response matches DEXPECTED
DCALL_API.assertAtPath
 ('VARR', DEXPECTED)->DCALL_API   #Same but only for response field VARR

DCALL*.waitForAssertions          #Repeats DCALL*.expect|assertAtPath() assertion until it succeeds
 ([OPTS])->DCALL*                 #Meant for long async tasks. Otherwise, 2m timeout
                                  #Uses a StepFunctions STATE_MACHINE under-the-hood
OPTS.totalTimeout                 #Max DURATION (def: 30m) to repeat
OPTS.interval                     #DURATION (def: 5s) between repeats
OPTS.backoffRate                  #NUM (def: 1)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXPECTED            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ExpectedResult
 .exact(VAL)->DEXPECTED           #Deep ===

Match.objectLike(OBJ)->MATCHER
Match.arrayWith(ARR)->MATCHER
Match.stringLikeRegexp
 ('REGEXP')->MATCHER              #Can be used within ExpectedResult.*() argument
Match.serializedJson(VAL)->MATCHER#Like cdk-assertions (see its doc)

ExpectedResult
 .objectLike(OBJ)->DEXPECTED
ExpectedResult
 .arrayWith(ARR)->DEXPECTED
ExpectedResult.stringLikeRegexp
 ('REGEXP')->DEXPECTED            #Combine ExpectedResult.exact() and Match.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RESULTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPUT 'AssertionResults...'      #'EXPECT_RES_JSON' (DEXPECT) or 'ASSERT_RES_JSON' (DCALL). Assertion result
                                  #'...' is concatenation of:
                                  #  - DEXPECT: 'DEXPECT', HASH(DEXPECTED, DACTUAL)
                                  #  - DCALL: 'HttpApiCall', 'URL', HASH(URL, OPTS)
                                  #  - DCALL_API: 'AwsApiCall', 'SERVICE', 'ACTION', HASH(PARAMS_OBJ)
                                  #  - DCALL_API (Lambda): 'LambdaInvoke', HASH(OPTS)

EXPECT_RES.assertion              #ASSERT_RES
ASSERT_RES.status                 #'success|fail'
ASSERT_RES.message                #'ERROR' if status 'fail'

EXPECT_RES.failed                 #true|undefined, if status 'fail|success'
