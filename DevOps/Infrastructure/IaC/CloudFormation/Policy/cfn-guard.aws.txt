
             
   CFN-GUARD  
             



TODO:
  - https://github.com/aws-cloudformation/cloudformation-guard/

VERSION ==>                       #3.0.1
                                  #Installed through homebrew, cargo
                                  #Or install script, which downloads GitHub release binary and install to ~/.guard/bin/cfn-guard

cfn-guard                         #Policy-as-code for CloudFormation

cfn-guard validate                #Validate rules against a TEMPLATE
--data|-d                         #STR. Provides the name of a file or directory for data files in either JSON or YAML format.
                                  #If you provide a directory, Guard evaluates the specified rules against all data files in the directory.
                                  #The directory must contain only data files; it cannot contain both data and rules files.
                                  #If you specify the --payload flag, don't specify the --data option.
--rules|-r                        #STR. Provides the name of a rules file or a directory of rules files.
                                  #If you provide a directory, Guard evaluates all rules in the directory against the specified data.
                                  #The directory must contain only rules files; it cannot contain both data and rules files.
                                  #If you specify the --payload flag, do not specify the --rules option.
-P, --payload                     #Allows you to provide rules and data in the following JSON format via stdin:
                                  #  {"rules":["<rules 1>", "<rules 2>", ...], "data":["<data 1>", "<data 2>", ...]}
                                  #For example:
                                  #  {"data": ["{\"Resources\":{\"NewVolume\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":500,\"Encrypted\":false,\"AvailabilityZone\":\"us-west-2b\"}},\"NewVolume2\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":50,\"Encrypted\":false,\"AvailabilityZone\":\"us-west-2c\"}}},\"Parameters\":{\"InstanceName\":\"TestInstance\"}}","{\"Resources\":{\"NewVolume\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":500,\"Encrypted\":false,\"AvailabilityZone\":\"us-west-2b\"}},\"NewVolume2\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":50,\"Encrypted\":false,\"AvailabilityZone\":\"us-west-2c\"}}},\"Parameters\":{\"InstanceName\":\"TestInstance\"}}"], "rules" : [ "Parameters.InstanceName == \"TestInstance\"","Parameters.InstanceName == \"TestInstance\"" ]}
                                  #For "rules", specify a string list of rules files. For "data", specify a string list of data files.
                                  #If you specify the --payload flag, don't specify the --rules or --data options.
--output-format|-o                #One of 'json', 'yaml', 'single-line-summary' (def)
--show-summary                    #Specifies the verbosity of the Guard rule evaluation summary.
                                  #One of:
                                  #  - 'all' (def): displays the full summary
                                  #  - 'pass,fail': only displays summary information for rules that passed or failed
                                  #  - 'none': does not display summary information
--type|-t                         #Input data format. Either:
                                  #  - default: displays property paths and values, such as `Property [/Resources/vol2/Properties/Encrypted`
                                  #  - 'CFNTemplate': Guard displays the logical names of CloudFormation template resources in the output
--verbose|-v                      #Increases the output verbosity. Can be specified multiple times.
--print-json|-p                   #Prints the output in JSON format.
--show-clause-failures|-s         #Shows clause failure including a summary.
--alphabetical|-a                 #Validates files in a directory that is ordered alphabetically.
--last-modified|-m                #Validates files in a directory that is ordered by last-modified times.

cfn-guard test                    #Validate rules against a unit test file
--rules-file|-r                   #'PATH'
--test-data|-t                    #'FILE|DIR', in JSON|YAML
--last-modified|-m                #Sort DIR by mtime
--alphabetical|-a                 #Sort DIR alphabetically
--verbose|-v                      #Verbose output. Can be done multiple times
                                  #The verbose output follows the structure of the Guard rules file.
                                  #Every block in the rules file is a block in the verbose output.
                                  #The top-most block is each rule.
                                  #If there are when conditions against the rule, they appear as a sibling condition block.

cfn-guard rulegen                 #Scaffold rules from a TEMPLATE
                                  #Create one rule per RESPROP, requiring it to be equal
--output|-o                       #'PATH' (def: stdout)
--template|-t                     #'PATH' to TEMPLATE

cfn-guard parse-tree              #Parse rules
--rules|-r                        #'PATH'
--output|-o                       #'PATH' (def: stdout)
--print-json|-j
--print-yaml|-y                   #JSON (def) or YAML
