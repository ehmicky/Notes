
                  
   DOCKER_COMPOSE  
                  



DOCUMENTATION ==>                 #Partly documented in this file, partly in Docker engine (search for docker-compose, CPCONF, CPVCONF, CPSCONF, CPNCONF, |# and !#)

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

DOCKER COMPOSE VERSION ==>        #1.8.1
docker-compose version
--short
CONTAINERINFO.Config.
 "com.docker.compose.version"     #

                                  ┌─────────────┐
                                  │   GENERAL   │
                                  └─────────────┘

GOAL ==>                          #High-level declarative interface on top of Docker engine
                                  #Otherwise, does not add features to Docker engine.
                                  #Many features not available:
                                  #  - some not critical, some more important (limits|isolation for example)
                                  #  - can use both though

DIFFERENCE DOCKER ENGINE AND      #Available in both:
COMPOSE COMMANDS ==>              #  - state: run, start, stop, restart, kill, pause, unpause
                                  #  - high-level:
                                  #     - debug: ps, logs, events, port, version
                                  #     - build: build
                                  #     - CRUD: create, exec, rm
                                  #     - registry: rm
                                  #Available only with docker engine:
                                  #  - low-level:
                                  #     - debug: inspect, info, images, stats, top, many flags with ps|logs|events
                                  #     - build: commit, diff, history, load, save, export, import
                                  #     - CRUD: rmi, update, rename
                                  #     - registry: login, logout, search
                                  #  - network: network *
                                  #  - volume, filesystem: volume, cp
                                  #  - Swarm mode: swarm *, node *, service *
                                  #  - many limits|isolation: --isolation, --oom-*, --memory-swappiness, --uts, --userns, --blkio|device|io-*, --pids-limit, --kernel-memory,
                                  #    --memory-reservation, --cpuset-mems
                                  #  - networking: --internal, --ipv6, --subnet, --gateway, --ip-range, --aux-address, --ip-masq, --ip-forward, --mtu, --icc
                                  #  - most standard streams-related: attach, --attach, --detach-keys, --sig-proxy
                                  #  - most tag related: tag, pull --all
                                  #  - others: wait, --sysctl, --runtime, --cidfile, --storage-opt, --link-local-ip, --dns-opt, --group-add, --config, --rm=false
                                  #Available only with docker compose:
                                  #  - CPCONF: config, bundle
                                  #  - down, up, scale

COMPOSE COMMAND SYNTAX ==>        #Usually specify IMAGE_NAME as argument
                                  #Use CPCONF for most options, i.e. most flags not available with docker-compose
                                 |#  - this notation means: flag available for docker-compose also
                                 !#  - this notation means: flag only available for docker-compose

CLI COMPLETION  ==>               #See online doc for how to install

                                  ┌───────────────────┐
                                  │   CONFIGURATION   │
                                  └───────────────────┘

CPCONF                            #YAML|JSON configuration file
$ENVVAR
${ENVVAR}                         #Can be used. Use $$VAR to escape

docker-compose ...
-f CPCONF                         #Can be used several times (or colon-separated for ENVVAR):
--file CPCONF                     #  - to recursively merge them
ENVVAR COMPOSE_FILE               #  - useful to add environment-specific (e.g. production-only) configuration
                                  #Def: ./[../.../]docker-compose[.override].yml ("override" has priority)
                                  #Can be - fot stdin

CPSCONF.extends                   #Merge another CPSCONF2 into CPSCONF
                                  #Is OBJ:
                                  #  - service IMAGE_NAME2
                                  #  - file CPCONF2 (def: current CPCONF)


docker-compose config             #Validates, parses (e.g. add default values) and prints CPCONF
-q
--quiet                           #Only validates
--services                        #Only prints each IMAGE_NAME


CPCONF.version                    #Should be '2.0'
CPCONF.services.IMAGE_NAME
CONTAINERINFO.Config.             #CPSCONF
 "com.docker.compose.service"     #"Services" are actually images, not docker Swarm services


docker-compose ...
-p PROJECT
--project-name PROJECT
ENVVAR DOCKER_PROJECT_NAME
CONTAINERINFO.Config.             #Namespace of the project, to be able to run several on single host
 "com.docker.compose.project"     #Def: current dir name

                                  ┌──────────┐
                                  │   FLOW   │
                                  └──────────┘

NETWORK ==>                       #Specified in CPCONF:
                                  #  - created by docker-compose run|up if not existing
                                  #  - required (but not automatically) by docker-compose create
                                  #Def:
                                  #  - bridge network named PROJECT_default
                                  #  - can be configured with CPCONF.networks.default

docker-compose build ...          #Apart from doing docker build, also:
                                  #  - docker tag PROJECT_IMAGE_NAME
                                  #  - is called by docker-compose create|run:
                                  #     - unless IMAGE_NAME already exists
                                  #     - can be configured using docker create|up --[no-]build

docker-compose up [IMAGE_NAME...] #Like docker-compose run, except not "one-off" service (see below)
--abort-container-exit            #Stops all containers when one is stopped

docker-compose down               #For all CPCONF-related containers: like docker rm + docker network rm
--rmi STR                         #Also remove images, with docker rmi
                                  #Can be:
                                  #  - all
                                  #  - local: only if CPSCONF.image specified
-v
--volumes                         #Also remove volumes, with docker rm -v
docker-compose up|down ...
--remove-orphans                  #Remove containers not defined in CPCONF


ONE-OFF SERVICES ==>              #There are two types of containers, depending on how they were created:
                                  #  - docker-compose run ("one-off"):
                                  #     - CONTAINER_NAME is PROJECT_IMAGE_NAME_run_NUM
                                  #     - must be manually managed:
                                  #        - i.e. not affected by any other docker-compose, except ps, rm, down
                                  #        - on configuration change, keep old containers
                                  #  - docker-compose create|up:
                                  #     - CONTAINER_NAME is PROJECT_IMAGE_NAME_NUM
                                  #     - is maintained:
                                  #        - number (NUM) is according to docker-compose scale
                                  #        - on configuration change, replace all containers
CONTAINERINFO.Config.
 "com.docker.compose.oneoff"      #"True|false"


CONFIGURATION CHANGE ==>          #When neither CPCONF or IMAGE changes:
                                  #  - docker-compose run: run a new container
                                  #  - docker-compose create|up: do nothing
                                  #When they do change:
                                  #  - docker-compose create|run: create|run a new container
                                  #  - docker-compose up:
                                  #     - clean up previous containers:
                                  #        - docker-compose stop + rm containers created with last configuration
                                  #        - only ones created using docker-compose create|up, not run
                                  #     - create|run new containers
                                  #Note:
                                  #  - it is IMAGE change, not Dockerfile
                                  #  - to rebuild IMAGE if Dockerfile changed, use docker-compose build
docker-compose create|up ...
--force-recreate                  #Force replacing containers, even if no configuration change
--no-recreate                     #No replacing containers, even if configuration change
CONTAINERINFO.Config.
 "com.docker.compose.config-hash" #Configuration unique ID, to track changes. Only if not "one-off"

                                  ┌───────────┐
                                  │   SCALE   │
                                  └───────────┘

docker-compose scale
 IMAGE_NAME=NUM...                #Change number of containers to maintain for that IMAGE
CONTAINERINFO.Config.
 "com.docker.compose.number"      #Index number

docker-compose exec|port ...
--index NUM                       #Which container to target (NUM in PROJECT_IMAGE_NAME_NUM) (def: 1)

                                  ┌───────────┐
                                  │   ORDER   │
                                  └───────────┘

CPSCONF.depends_on                #IMAGE_NAME_ARR
                                  #They will be started by docker-compose run|up on CPSCONF's IMAGE:
                                  #  - IMAGE will only start being built|run after successful run of those dependencies
                                  #     - "run" (e.g. server start) is usually before "ready" (e.g. server listens)
                                  #     - dependent IMAGE should keep retrying until dependency is "ready"
                                  #Also implied when using CPSCONF.links, CPSCONF.volumes_from or CPSCONF.network_mode "service:IMAGE"
docker-compose run|up ...
--no-deps                         #Do not use CPSCONF.depends_on

                                  ┌────────────┐
                                  │   BUNDLE   │
                                  └────────────┘

docker-compose bundle             #Creates a DAB file, i.e. condensed JSON version of CPCONF
                                  #Each CPSCONF.image must exist, and point to an image to a registry
--push-images                     #Do docker push, if CPSCONF.build exists
-o FILE
--output FILE                     #Def: ./PROJECT.dab


docker deploy PROJECT             #Similar to docker-compose up but:
                                  #  - using a DAB file
                                  #  - using Docker engine (not Docker compose)
                                  #Only in experimental build
--file FILE                       #Def: ./PROJECT.dab

                                  ┌───────────┐
                                  │   SWARM   │
                                  └───────────┘

SWARM ==>                         #Use old swarm (i.e. Docker swarm, not Swarm mode)
                                  #Must:
                                  #  - use multi-host network (e.g. "overlay")
                                  #  - use CPSCONF.image, not CPSCONF.build
