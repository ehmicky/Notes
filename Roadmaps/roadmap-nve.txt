
                                  ┏━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP-NVE   ┃
                                  ┗━━━━━━━━━━━━━━━━━┛

Verify checksums with GPG signature

Add support for BSD, Android, armv6l

Try removing core-js from all my projects

Fix Execa bug https://github.com/sindresorhus/execa/issues/434

Document https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc0

Add `nodeenv` to preferred-node-version

Promote preferred-node-version

Fix `nve` tests failing on Windows|Mac

Consider using `process.env.SHELL` or similar in `node-version-alias`

Upgrade jscpd:
  - https://github.com/kucherenko/jscpd/issues/231
  - https://github.com/kucherenko/jscpd/issues/207

Execa:
  - check why 2 CI tests are failing on Windows
  - check question about stdin: https://github.com/sindresorhus/execa/issues/418

fs-memoize (in all-node-version git branch "feat/caching"):
  - replace through2 by using stream.Transform directly
  - remove offline feature: not useful with automatic cleanup
  - OPTS.ignoreReturn BOOL:
     - make returnValue undefined
        - including streams, i.e. not created on cache hit
        - with|without cacheInfo true
     - goal: faster and lower memory when only cache path is needed
  - if type "error", still memoize in-process
     - unless OPTS.stream true: invalidate it then
  - ensuring returnInfo.path exists:
     - after getting it from process cache
     - possible reasons: user removed cache dir, automatic cleanup in another process, type "error", etc.
     - only if returnInfo.path needed: OPTS.cacheInfo|stream
     - if:
        - type "process"
        - (OPTS.cacheInfo && path !== undefined) || OPTS.stream
           - note: path is undefined if previously type "error". It is ok unless OPTS.stream true
        - !pathExists(path)
     - then:
        - invalidate process cache
        - call moized function again
  - All ERROR should have different ERROR.reason STR
  - Error handling types:
     - very likely user errors
        - for: OPTS.shouldInvalidate() exception
        - behavior: propagate error
     - either user errors, or user's users
        - for: serializing return value, serializing args ({hash} template, OPTS.pickInput() exception)
        - behavior:
           - if OPTS.strict true, propagate
           - if OPTS.strict false:
              - return as { type "error", error ERROR }
              - try to cache what is possible
     - system errors:
        - that prevent writing cache:
           - for: writing cache file or expireAt file
           - behavior: silently return as { type: "error", error ERROR }, do not cache in-file, still cache in-process
        - otherwise:
           - for reading cache file or expireAt file, parsing cache file, parsing expireAt
           - behavior: silently ignore, like if there was no cache. Remove the file.
     - go through code to find other places that might fail
  - OPTS.updateExpire -> OPTS.lastCallTime
     - use OPTS.lastCallTime false with all-node-versions, but true with get-node
     - expireAt -> (created|updated) timestamp (depending on OPTS.lastCallTime)
  - allow OPTS.maxAge to be or `Infinity`
  - positional argument getCacheDir() -> "PATH" instead:
     - if "PATH" relative:
        - if OPTS.namespace STR: getcachedir(OPTS.namespace)
        - otherwise relative to cwd
     - optional template {VAR}:
        - {hash}: of ARGS_ARR, using sha1 + v8.serialize()
           - only allowed in filename
     - do not allow repeating any template {VAR}
     - OPTS.pickInput(ARGS_ARR)->VAL
        - VAL used by {hash} template VAR instead of ARGS_ARR
        - VAL passed as {input} template VAR
           - providing it is STR
           - only allowed in filename
              - / and \ are stripped
     - exception in {hash} or OPTS.pickInput():
        - same behavior as return value serialization error:
           - if OPTS.strict true, propagate. Otherwise, return as { type 'error', error ERROR }
        - skip logic for readFsCache|writeFsCache, but still call FUNC(...ARGS) and memoizes it in-process:
           - pass args array as first argument to moized function instead of cachePath
  - timestamp:
     - filename is FILE.metadata.txt
     - content:
        - timestamp + version, space-separated
        - parse it as if other fields might be added in future
     - timestamp file should be created first and removed second (not in parallel)
  - automatic cleanup:
     - at the beginning of writing a new cache file, but before serializing the value
     - do not await it, i.e. happens in background
     - add top try/catch than make errors silent
     - started right before writeFsCache() is about to be performed
     - use opendir():
        - default buffer size (32)
        - throttle parallel file read to 32 at once using p-map
           - also anything that can be done without knowing the other files
     - remove any of the following:
        - FILE:
           - without FILE.metadata.txt
        - FILE.metadata.txt without FILE, only if > 1 hour old
        - FILE + FILE.metadata.txt:
           - with DATENUM < Date.now()
     - filter out duplicates filepaths from list to remove
     - call all fs.unlink() in parallel
        - silently ignore failures (might be due to parallel calls)
     - invalidate process cache too
  - OPTS.maxCount NUM:
     - min 1
     - def 1000
        - reason: not taking too much space
        - other reason: some filesystems have limits in number of files per directory
        - other reason: makes `fs.readdir()` of automatic cleanup faster
     - if Infinity, prevents even checking for any cleanup
     - during automatic cleanup
        - invalidate process cache too
     - if more than NUM files (timestamps excluded), remove the ones with the oldest timestamps
     - pass option to process moize OPTS.maxCount NUM too
  - OPTS.group(filename)->STR:
     - noop if OPTS.maxCount is Infinity
     - make OPTS.maxCount keep the same number of items between groups:
        - if division not perfectly roundable, keep the most recent items
     - OPTS.groupsCount NUM:
        - noop if OPTS.group undefined
        - def: same as OPTS.maxCount
        - max: OPTS.maxCount
        - min: 1
        - number of groups OPTS.maxCount should keep
  - OPTS.version NUM:
     - def 0
     - min 1 (outside def)
     - must be finite integer
     - added to timestamp content, space-separated
     - only read fsCache if same version, i.e. changing it invalidates other versions (either < or >)
     - during automatic cleanup, remove any timestamp with different version (either < or >) and their associated file (if any)
     - document that this is version of return value, not library version. Bump when previous version value cannot be used for current one
  - see TODO comments in code after cache invalidation
  - OPTS.compress STR:
     - "none" (def), "gzip", "brotli"
     - add file extension ".gz|br" to cache path
     - if OPTS.streams, done in streaming mode in write. Always in streaming mode in read.
  - fix streams code:
     - errors during temporary file write create uncaught promise rejections
     - it should not start writing the temporary file until the stream is being read
  - OPTS.maxFileSize NUM:
     - do not cache if serialized returnValue length > NUM
     - for both stream and non-stream
  - consider whether to use moize's OPTS.updateCacheForKey for OPTS.invalidate()???
     - OPTs.invalidate() should not be fired twice though
  - stream atomic write: find library
     - if none, create own???
  - own repository
  - use in repositories:
     - CACHE_DIR/bin/MIRROR/ARCH/VERSION/node.exe
     - CACHE_DIR/versions/MIRROR/ARCH/versions.json
     - CACHE_DIR/releases/releases.json (does not include `latest`, this is retrieved and merged separately)
  - cache-cli-command:
     - own repository
     - use fs-memoize on the CLI
     - executable is ccc
     - ccc [OPTS] COMMAND ARGS...
     - does not use `child_process` OPTS.shell: shell was already interpreted
     - OPTS.shouldInvalidate() -> --invalidate CLI flag
  - key-value store abstraction (for future):
     - done as a separate library on top of it
     - core only provides with OPTS callbacks to modify fs.* calls

Use `env-paths` cache instead of `node-cachedir` and `global-cache-dir`

OPTS.mirror:
  - can be shortcut "release" (def), "nightly", "v8-canary", "test", "rc" (for https://nodejs.org/download/*)
     - i.e. "rc" is only "rc" (should document)
  - allow versions to include prerelease tags
     - make sure it works with nightly, etc.
  - when version contains prerelease tag like "-nightly" and OPTS.mirror not defined, default to "nightly", etc.
  - cache per OPTS.mirror:
     - for:
        - all-node-versions
        - get-node
     - use all letters from URL to form dir name
        - common mirrors have a hardcoded list of friendlier names
  - need to check Node.js version limits in get-node??? E.g. for xz introduction

Arch:
  - pass OPTS.arch to all-node-versions:
     - filter out releases without requested arch
     - cache index.json per OPTS.arch
  - preferred-node-version also returns arch
     - def: current process.arch
     - when loading nvs, parse suffix '/x64', '/x86', '/32' or '/64' after version

OPTS.fetch BOOL -> OPTS.cache !BOOL
nve VERSION COMMAND -> nve exec VERSION COMMAND
nve VERSION -> nve version VERSION
nve VERSIONS --FLAGS [COMMAND [ARGS]] instead of nve --FLAGS VERSIONS [COMMAND [ARGS]]

Pruning cache:
  - in get-node (and above libraries)
  - OPTS.maxCount NUM
     - def: 10
     - min: 1
     - max number of cached versions at once
     - 1: no caching
     - high number like 1000: no pruning
  - using fs-memoize OPTS:
     - maxCount NUM: user-provided OPTS.maxCache
     - group: remove only patch and minor version from filename
     - groupsCount: Math.ceil(Math.sqrt(OPTS.maxCount))

`nve exec` signals propagation:
  - propagate signals as soon as childProcess started
     - undo as soon as childProcess exited
  - on single|serial|parallel commands
  - using process.on|off("signal", () => childProcess.kill(signal))
  - parent process forwards signals but does not send them to itself

Dry mode:
  - already working:
     - OPTS.cache defaults to false
     - print resolved version, one per line
  - when `local|global`:
     - should use preferred-node-version
     - print 'X.Y.Z (using "RAW_VERSION" from FILE_PATH)' instead
        - RAW_VERSION: before alias substitution
        - FILE_PATH: if in current directory or below, relative and prefixed with "./" or ".\". Otherwise absolute
  - document more in README
     - including that `nve version latest|lts|MAJOR` can be used to check latest versions
     - including works with multiple versions

`node-releases`:
  - start by doing it inside all-node-versions
  - fetches github.com/nodes/releases JSON file
  - return as OBJ_ARR:
     - major "X" or "0.Y"
     - latest "X.Y.Z"
        - done by calling allNodeVersions()
           - OPTS.cache|mirror forwarded to allNodeVersions()
        - can be `undefined` when using custom OPTS.mirror
     - isCurrent BOOL: whether process.version is using it
     - lts "NAME"
     - maintained BOOL
     - future BOOL
     - startDate DATE
     - ltsDate DATE
     - maintenanceDate DATE
     - endDate DATE
  - OBJ_ARR sorted from oldest to most recent
  - OPTS.versions "VERSION_RANGE"_ARR
     - only return majors containing those
     - def: all
  - cache it using exact logic as all-node-versions, including OPTS.cache (def: undefined), offline, file caching, process caching
  - make allNodeVersions() only return array of versions, no more `lts`

`node-releases-cli`:
  - columns:
     - name "v0.10", "v6", etc.
     - latest "X.Y.Z"
     - local "X.Y.Z" for process.version on the relevant major
     - LTS name (without "LTS" except as column name)
     - Start date
        - only if not started yet
        - use local date format
     - End date
        - including if already ended
        - not if not started yet
        - use local date format
  - oldest on top, newest on bottom
  - default OPTS.cache false
  - OPTS.versions:
     - def: maintained releases + next release + process.version release
     - is positional argument
     - document that can be "*" for all
  - --columns=NAME,... (def: all)
  - --format=table|csv|tsv|json
  - --[no-]color
  - `nve releases`:
     - `node-releases-cli` should export YARGS command: use it

`node-changelog`:
  - FUNC(VERSION)->URL
     - URL to changelog
     - if VERSION not found, throw
  - URL:
     - use https://nodejs.org/en/blog/release/ if possible
     - with fallback to https://github.com/nodejs/node/releases
     - with fallback to https://github.com/nodejs/node/blob/master/CHANGELOG.md
  - `node-changelog-cli`:
     - node-changelog [VERSION]
     - def VERSION is process.version
     - open browser
     - --print CLI flag: print URL instead
  - `nve changelog [VERSION]`:
     - forward to `node-changelog-cli`, using its YARGS exported command
     - unlike `node-changelog-cli`, do not document --print CLI flag

Interactive mode:
  - rename OPTS.progress to OPTS.interactive
  - default: is-interactive module

Print changelog:
  - in get-node
     - after Node.js binary downloaded and temp file moved to final file
     - performance optimization: read the cache file in parallel with retrieving the (potentially cached) Node.js binary, but still perform the rest of the logic afterwards
        - not if won't be used (e.g. OPTS.interactive false)
  - keep `seen` state ARR in CACHE_DIR/nve/changelog.json
     - filepath regardless of mirror|arch
     - content is OBJ { seen ARR }
     - when written, ensure potential future sibling variables of `seen` are kept
     - same versions sorting as all-node-versions
  - noop if either:
     - there is a version in SEEN >= downloaded version within same major
     - downloaded version is not exactly "X.Y.Z" (e.g. custom mirror)
     - OPTS.interactive false
  - do it regardless of whether Node.js binary download is using cache or doing actual request
  - if SEEN does not exist, initialize it with the latest versions of all majors
     - regardless of downloaded version
     - do not print anything
     - the call to allNodeVersions() should be done after Node.js binary download complete, to ensure it is cached
        - pass OPTS.cache|mirror as it to allNodeVersions()
  - if SEEN exists:
     - add downloaded version to SEEN
        - if downloaded version major already has another version in SEEN, replace it
     - print "LOGO Node.js X.Y.Z (CHANGELOG_URL)"
        - try keep same left text as binary download progress bar
        - on stderr
        - CHANGELOG_URL: use `node-changelog`
           - if error, silently do not show it

.nve.yml:
  - in current dir, any parent dirs or in home dir
  - contains OBJ with common nve options
  - used by all nve libraries
  - will contain OBJ.version for nve-shell
  - memoized per process
  - have own library to load it or to merge to library options
  - add to preferred-node-version, using field CONF.version field
     - NUM|STR
     - optional
  - documentation should mostly reference OBJ.version in .nve.yml as the best way to set global version

Improve resilience:
  - use cached Node when offline
  - find other ways

Put groupBy function from all-node-versions into own library

Linting:
  - enforce only arrow functions are used, not `function`
     - see https://github.com/eslint/eslint/issues/13141
  - or enforce arrow functions are never used, only FUNC.bind()???

Learn CLI/Terminal from to_learn
