
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP-LOG-PROCESS-ERRORS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Add examples for opts.testing

Add jest support:
  - see feature/jest branch
  - see https://github.com/facebook/jest/issues/8246

Exit timeout:
  - exit timeout is a workaround that should be removed
  - instead opts.log() should allow returning not only PROMISE but also STREAM
     - we would keep track of all returned STREAMs
        - should use a WeakSet so garbage collection is not prevented
           - this means when iterating, some values might be gone
     - before exit, we would close STREAMs and wait for them to flush
        - always add process.stdout|stderr to those
           - i.e. default opts.log() does not need to be changed
     - i.e. with Winston, should `return winston.*()` instead of `winston.*()` (it returns a STREAM)
        - fix documentation example accordingly
  - why we need to do that: Node.js does not flush streams on process.exit():
     - https://github.com/nodejs/node/issues/784
     - https://github.com/nodejs/node/issues/6456
  - we could also allow opts.log() to return EVENTEMITTER (e.g. CHILD_PROCESS.spawn() return value) by using
    `Stream.finished()`/`end-of-stream`

Signal events:
  - event.name "signals"
  - event.signal "SIGNAME"
  - single handler for any signal
  - listening to some events prevents default handler which terminates process
     - i.e. must do same logic as default handler, after logging finished
        - but must only do so if there were no event handlers, i.e. default one would have been used
  - if other handlers are defined and they call process.exit(), this might interrupt logging
  - only ones that can be listened to cross-platform are SIGINT, SIGTERM
     - however can use os.constants.signals to get list of current OS.
  - do not include uninteresting signals like SIGWINCH
  - can never listen to SIGKILL, SIGSTOP
  - opts.exitOn should not allow "signals"
  - default level is "warn"

Child processes:
  - propagate child process to parent process
  - only if child process is Node too
  - maybe use process.send()
     - this requires user to use options.stdio "ipc" though
