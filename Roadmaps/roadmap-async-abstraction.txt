
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP-ASYNC-ABSTRACTION   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Async return value abstraction layer

Possible types:
  - event emitter:
      - any event "EVENT" with payload EVENT_OBJ
      - optional final event "error" with payload ERROR
          - there should be no more events afterwards
      - final event "done" with no payload
  - stream:
      - "data" event { type: "EVENT", ...EVENT_OBJ }
      - final "error" event like event emitter
          - stream should be closed after it
      - final stream closing
  - promise:
      - either:
          - resolved with ARR of { type: "EVENT", ...EVENT_OBJ }
          - rejected with ERROR on first "error"
  - callback:
      - like promise but as FUNC(ERROR, ARR)
  - async generator:
      - iterates over ARR
      - on first "error" throws it
  - observable

Go through async to_learn to get inspiration

FUNC(FUNC2)->FUNC2 with a FUNC2()->EVENT_EMITTER, that adds FUNC2.promise()->PROMISE, etc.

Use it in autoclient:
  - do it with different func name, e.g. runTasks[.promise]()->PROMISE, runTasks.stream()->STREAM
  - events:
     - "task" OBJ, on task succesful
     - "error" ERROR, with ERROR.errors OBJ_ARR:
        - on error before or after running all tasks
        - at end (after all tasks completed) if any task failed
