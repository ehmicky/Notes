
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP-CUTTING-EDGE   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Check my edl doc for versioning / dependencies first

Do npm search for similar packages

Think of better name

Goal: check for outdated dependencies

For any runtime and package manager, using plugins:
  - must be npm libraries writing in Node.js
     - follow naming convention (e.g. `cutting-edge-*`) so they can be found without being declared
  - must export FUNC('ARG'[, OPTS])->PROMISE_OBJ
     - run once for each 'ARG'
     - should resolve PROMISE with OBJ:
        - outdated BOOL
        - current 'VERSION'
        - latest 'VERSION'
        - changelog 'URL'
        - homepage 'URL'

Create plugins for:
  - Node version
  - npm (itself) version
  - npm package version (either one or all of them)

Input:
  - use arguments or use config???

Results:
  - CLI: if any outdated, exit code 1 + messages. Otherwise silent
  - programmatic: if any outdated, PROMISE rejected with info. Otherwise PROMISE resolved with undefined

Always for latest version, or only for latest version that matches semver (e.g. `package.json` semver)???

Use instead of gulp checkVersions and gulp outdated in gulp-shared-tasks

Potential for commercial CI
