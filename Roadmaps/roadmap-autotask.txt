
                                  ┏━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP AUTOTASK   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━┛

task.validate.status:
  - what if want a merged task to specify "if task uses this status"???
     - this is actually what OpenAPI is doing
  - make task.validate.STATUS_RANGE means "must be one of those statuses"
  - remove task.validate.status
  - when merging OpenAPI to task.validate:
     - if task.validate undefined, set it as is
     - otherwise:
        - deep merge to task.validate.STATUS_RANGE, but do not add new STATUS_RANGE
        - if cannot merge to any, throw error ("OpenAPI should describe")
  - status range:
     - allow range 'any'
     - extract logic to a separate repository

upgrade json-schema-faker
  - must first fix https://github.com/json-schema-faker/json-schema-faker/issues/473
  - merge branch upgrade-json-schema-faker
  - use `const` in my tests

JSON schema v7 instead of v4:
  - v4 to v7 tool:
     - SCHEMA {} -> SCHEMA true
     - SCHEMA { not: {} } -> SCHEMA false
     - SCHEMA.id -> SCHEMA.$id
     - x-$comment|examples|readOnly|writeOnly|contentEncoding|contentMediaType|contains|propertyNames|if|then|else -> $comment|...
     - SCHEMA.enum [VAL] -> SCHEMA.const
     - SCHEMA.exclusiveMaximum:
        - exclusiveMaximum true + maximum NUM -> exclusiveMaximum NUM
        - exclusiveMaximum false + maximum NUM -> maximum NUM
        - exclusiveMaximum BOOL + nothing -> nothing
     - SCHEMA.exclusiveMinimum: same
     - SCHEMA.not { items: { not: SCHEMA2 } } -> SCHEMA.contains SCHEMA2
  - v7 to v4 tool:
     - SCHEMA BOOL:
        - except additionalItems|additionalProperties
        - true -> {}
        - false -> { not: {} }
     - SCHEMA.$id -> SCHEMA.id
     - SCHEMA.$comment|examples|readOnly|writeOnly|contentEncoding|contentMediaType|propertyNames -> SCHEMA.x-$comment|...
     - SCHEMA.const -> SCHEMA.enum [VAL]
        - if SCHEMA.enum exists, make an intersection
     - SCHEMA.exclusiveMaximum|Minimum NUM -> SCHEMA.maximum|minimum NUM + SCHEMA.exclusiveMaximum|Minimum true
        - if SCHEMA.maximum|minimum already exists -> SCHEMA.maximum|minimum NUM alone
     - SCHEMA.contains SCHEMA2 -> SCHEMA.not { items: { not: SCHEMA2 } }
        - if SCHEMA.not already exists, deep merge to it
     - SCHEMA.required|dependencies empty array -> nothing
     - SCHEMA.if SCHEMA2:
        - if + nothing -> nothing
        - if SCHEMA2 + then SCHEMA3 -> oneOf [{ not: SCHEMA2 }, SCHEMA3]
        - if SCHEMA2 + else SCHEMA4 -> oneOf [SCHEMA2, SCHEMA4]
           - if oneOf already exists, do allOf [..., { oneOf ... }]
              - if allOf already exists, append to it
        - if SCHEMA2 + then SCHEMA3 + else SCHEMA4 -> allOf [above two]
           - if allOf already exists, append to it
     - not supported:
        - SCHEMA.$id with relative URI
        - SCHEMA.propertyNames
  - https://github.com/Cardero-X/test-openapi/issues/7 should be taken into account
  - allow in task.validate and `spec`:
     - OpenAPI uses v4, i.e. should be converted to v7
  - allow in $(random)
     - JSON-SCHEMA-FAKER uses v4, i.e. should convert from v7 to v4
     - add missing v7 formats to JSON-SCHEMA-FAKER
  - allow in plugin.config
  - my own schemas in code
  - only thing to update in `api-service` I think is:
     - in tests: enum [VAL] -> const VAL

json-schema-faker maxItems:
  - since we use OPTS.optionalProbability 1, schemas of arrays with high `maxItems` generates `maxItems` elements,
    which is way too slow. Find a solution to that issue

Template:
  - delimiter $(NAME)
     - reasons:
        - having end delimiter allows for better concatenation, and for indirection
        - as opposed to {{NAME}}, reminds more of simple variable substitution and less of template engine logic/keywords/operators
     - escaping:
        - extra braces $(())
        - can be done several times to escape escaping itself
     - top-level data.NAME instead of data.$$NAME:
        - i.e. now config.template.NAME, task.alias.NAME, coreVars.NAME (no more prefixing)
     - NAME now has less restricted chars: only ( and ) are not allowed
     - indirection like $($(NAME)) or $(...$(NAME)...)
        - consider as a case of concat
        - only innermost are evaluated
           - which automatically happens when looking for NAME that do not include ( nor )
        - result is then stringified and joined
           - using String() except undefined which becomes ""
           - ARR.join("") might suffice for that
        - $() (i.e. no NAME) should evaluate to undefined
           - reason: might happen with indirection
        - result should then be recursively evaluated
  - break down `substitute.js`
  - add to autoserver notes: question whether should use autotemplate
  - go through whole `template` core module and `template` library again

Custom properties:
  - config|task._*
  - are ignored
  - are kept in return value but not reporting (since part of originalTask)
     - i.e. can be used to return metadata or evaluated templated
  - validate that module names do not start with _

`valid`/`invalid` does not work when it's inside an array

Other programming languages:
  - should include WebAssembly
  - Node.js script runner core plugin should use JSON references, i.e. allowing several programming languages

JSON references:
  - use same code as autoserver:
     - including relative references
     - including can be used to target functions
  - can be used both in config and tasks file
  - resolved during config/tasks load, before start handlers
  - { $ref: FUNC, args }: if pointing to a function, and has sibling property "args: VAL[_ARR]", do FUNC.bind(null, ...VAL)
  - https://github.com/Cardero-X/test-openapi/issues/5

Function parameters:
  - trigger any task.PLUGIN.**.* that is a FUNC():
     - trigger it just before PLUGIN handlers
     - fire FUNC(CURRENT_TASK)->VAL, and substitute with VAL
        - FUNC can be async

`task.validate.custom` BOOL|STR|ANY:
  - if:
     - true|ANY: noop
     - false: throw "Response ... is invalid"
     - STR: throw "Response ... is invalid: STR"
        - should lowercase first char
  - meant to be used with a function parameter
  - use it in `api-service` to check for response sorting

$data:
  - only for JSON schemas
  - can target anything inside task.*
  - places:
     - main ajv validation utility:
        - i.e. used by task.validate
        - make sure it works in other places using the utility
     - `$(random)`:
        - somehow make json-schema-faker leave it as is
        - then use json-schema-faker return value and crawl and substitute all $data objects

CLI options:
  - get all possible plugins using readdir list from plugins dir
      - add TODO to use node_modules instead
  - then require all plugins
  - build CLI options descriptions using PLUGIN.conf.general|task.description|default|schema.type|required|others? and PLUGIN.conf.examples
  - think of type "object" and "array"
  - check code from autoserver
  - default value should be appended to description instead of using yargs.default()
  - task options should be added as an option under task category but throw error during parsing. An explanation at beginning of --help should explain how task options work
  - should work with dynamic options like config.report.options.* but still be strict enough to validate typos

config.maxParallel:
  - max number of tasks at once
  - def 100
  - buffered in the beginning of runTask, i.e.:
     - depReqs count as one task
     - repeated tasks each count as one task

Content negotiation:
  - autoformat
     - use it in stringify/parse
     - add multipart/form-data format:
        - parsed as { "VAR[;filename=FILE][;content-type=MIME]": VAL, ... }
        - stringify not on plain object should throw
        - each VAL is parsed according to that MIME, or left as unparsed string otherwise
     - should maybe default to raw format instead of throwing exception
  - Content-Type [C]:
     - intersection of:
        - types supported by library (for serialization)
        - arrays merge (in priority order) of:
           - task.call.headers.content-type
              - matched case-insensitive
              - if specified, must only use:
                 - type 'string'
                 - enum
                 - default|title|description
           - spec.consumes
           - def: application/json
     - intersection:
        - if empty array, throw that MIME is unsupported
        - should work with MIMEs being just '+EXT'
        - should work with MIME parameters like `;charset=CHARSET`
        - MIME options:
           - if none specified, leave as is
           - if specified by one side only, pick it
           - if specified by both sides and equal, pick it
           - if specified by both sides and different, do not pick that MIME
  - Accept [C]:
     - same but with:
        - types supported by library (for parsing)
        - using:
           - task.request.headers.accept
           - spec.produces
           - def: any
  - Content-Type [S]
     - if not among possible library parsers, throw error
     - used to pick how to parse body
     - def: application/octet-stream
     - validate according to same logic as other standard headers
  - [SMALL_]SCHEMA.type 'file':
     - PARAM:
        - during spec normalization, set Content-Type [C] to multipart/form-data
        - adds parameters:
           - name="PARAM_NAME"
           - filename="PARAM_NAME"
     - RESP:
        - validate Content-Type [S] is multipart/form-data
        - validates every part has "filename"
     - when normalizing OpenAPI schema to JSON schema:
        - convert to another type by guessing from other properties, and defaulting to string
        - should propose a PR to OPENAPI-SCHEMA-TO-JSON-SCHEMA (which throws at the moment)
     - how to specify a request body???
        - from base64 encoding
        - from local file

Validate:
  - custom formats
  - at the moment, ajv formats (e.g. uuid) are included by default: good idea???
     - should work with `random` as well

Explore:
  - fuzzy testing
  - stress testing
  - load testing

To improve???
  - reduce amount of mocking needed by users
  - reduce amount of setup and teardown (e.g. starting server) needed by users
     - including faking authentication

Plugins:
  - move plugins to own repositories
  - create a repository with some core plugins already included, so users don't have to
  - remove CORE_PLUGINS array

Plugin that only execute binary or Node.js file

Schemes:
  - support over protocols than HTTP[S]
     - including WebSocket

Think about using OpenAPI 2.0 collectionFormat or OpenAPI 3.0 styles outside of OpenAPI

Add support for HTTP authentication, OAuth2 and OpenID

Add support for OpenAPI 3.0, RAML, API blueprint
  - should use a specification abstraction layer
     - if api-elements is not good enough (probably), create own

collectionFormat on formData for OpenAPI 2.0 does not currently work

Re-use autoserver's ajv error beautification utility (separate it in a different module)

Globbing:
  - go through globbing in to_learn.txt to improve current usage of globbing (e.g. in config.tasks or in 'glob' plugin)
  - allow passing directories (included recursively) to config.tasks

Reporters:
  - go through CLI doc in to_learn.txt to improve current reporters
  - try to simplify reporter.*() interface:
     - too many methods: options(), start(), tick(), complete(), end()
  - 'pretty' reporter:
     - replace spinner by progress bar
     - add diffs between ERROR.expected and ERROR.actual
  - 'data' reporter:
     - use autoformat
     - add a 'path' option (e.g. JSON path)
  - 'notify' reporter:
     - go through to_learn.txt for desktop notifications
     - show project icon in popup
  - try to re-use `autoserver` loggers as reporters, e.g. `http`, future ones like 'rollbar', etc.
  - add other reporters:
     - see list in my reporters doc: minimal sentence, sentence, dot, progress, nyan, plane, flat, spec, markdown, styleless
       HTML, static HTML, dynamic HTML, JSON stream, XUnit, JUnit, NUnit, Teamcity, AppVeyor
     - try to use a generic input (not test-openapi-specific) so that they can be used by other projects
        - i.e. same idea as TAP but using a stream of JavaScript objects instead of using TAP string parsing

Dynamic properties keys:
  - problematic on parameter generation and response validation
     - for parameter name, response header names, OpenAPI schema properties
     - OpenAPI only allows static keys
  - possible solution:
     - use 'REGEXP' for keys
     - transform to patternProperties instead of properties
        - both ajv and JSON-SCHEMA-FAKER should then handle it correctly
     - how to mark that a key is a REGEXP not a STR??? Possible solutions:
        - all keys are REGEXPs
        - "/.../" key
        - global OPT
        - taskOpt
        - property in specification, e.g. x-*
     - need to work with other specification formats too

Polymorphism:
  - support config|task.PLUGIN values being either an object or not
     - at the moment it does not work, e.g. when retrieving final return value

Snapshot testing:
  - persist (if not yet) response.raw string as is and check difference on next run
  - persist in a Markdown file with code blocks (i.e. can be used as documentation, and gives nice git diff)
  - automatic pruning (i.e. delete snapshot folder before writing to it)
  - what about dynamic attributes (e.g timestamps)???
  - how to update snapshots???
     - think of CI mode

Maybe: watch mode

Add configuration file and logic:
  - re-use same logic as autoserver
  - including JSON references (including in task files)
  - load task file re-using same logic as autoserver to allow many formats ("autoformat")

Check autoserver for feature suggestions:
  - including special linting tool

How to enforce handler arguments are read-only???
  - deepFreeze problems:
     - slow
     - some arguments might need to mutate state, e.g. streams or servers attached to task|config.*

autopackage:
  - abtraction of package.json for many programming languages and OS package managers
  - automatically creates other package.json-like files
  - should whitelist the format we want,  to avoid pollution???
  - automatically publish:
     - maybe using a common user controlled by me
  - paying option:
     - to allow publishing
     - GitHub hooks

autotask:
  - based of autovalidate
  - parallel, functional, incremental task runner
  - as opposed to Gulp, Grunt, autotools, brunch:
     - optimized for parallelism
     - functional:
        - tasks are meant to return values not modify state
           - rich and diverse reporting
        - not meant for builds
           - reporting is silent on success, verbose on failure (not the inverse)
     - incremental:
        - tasks can be added incrementally and/or recursively
  - also uses declarative approach
  - autovalidate:
     - simply autotask with some default plugins
     - should allow users specifying extra plugins though, including between default plugins

Business idea:
  - CI features:
     - executes requests on cloud/FaaS
     - notifications (GitHub hooks, etc.)
  - configuration editor
     - linting
     - execute as you type
  - nice reporting
