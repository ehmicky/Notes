
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ROADMAP-GULP-DEV-TASKS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Finish spyd

TypeScript parsing documentation:
  - finish abstract-parser and dev-parser
     - dev-parser -> dev-parser (CLI) + dev-parser-core (non-CLI)
     - separate into several packages:
        - https://github.com/ehmicky/abstract-parser/issues/1
        - abstractParser("name")->OBJ
           - does require("abstract-parser-NAME")
  - fix issue with abstract-parser:
     - when espree's dependency on acorn has a different version than abstract-parser's dependency on acorn, the following
       error message happens when parsing any code with acorn: acorn-private-class-elements does not support mixing different acorn copies
        - this is probably due to plugins directly mutating acorn instance
  - javascript-parsers-benchmark:
     - on jQuery source code
     - with each option true|false (e.g. next true|false, comment true|false) to see impact of options
     - use check-speed
  - AST:
     - document esprima
     - document each parser
     - document babel-eslint
     - document tokens format
     - submit issues to solve differences
  - javascript-parsing-cheatsheet:
     - introduction explaining what JavaScript parsing is
     - link to awesome-javascript-parsing
     - for each ESTree|TSESTree node:
        - code example
        - node parsed output
        - attributes types
        - parent node
     - also compare tokens formats
  - javascript-parsers-differences:
     - export data about differences between javascript parsers, as used in javascript-parsing-cheatsheet
     - snapshot tests, i.e. can see when things change
  - organize my todo list for this
  - https://github.com/babel/babel-polyfills
  - estree-to-babel
  - ast-types
  - recast
  - @typescript-eslint/typescript-estree:
    - TypeScript parser
    - alternative to espree, @babel/parser, acorn, etc.
    - @babel/parser parses TypeScript too, with same AST (with minor differences)
  - @typescript-eslint/parser:
    - ESLint parser (to be specified as ESLint CONF.parser)
    - uses typescript-estree
    - some ESLint rules might not work with this new CONF.parser
    - uses tsc under the hood to provide with type inference information
  - go through each JavaScript parser
    - search github for utilities related to each parser
    - finish going though "language processing" in edl
  - go through babel roadmap
    - search github for utilities related to each parser
  - learn how to make ESLint plugins:
    - go through eslint organization repos
    - search github for utilities related to eslint
  - learn about parsing in general (in to_learn.txt)
  - finish static analysis in to_learn.txt:
     - including tern.js
     - including sourcegraph
  - repositories:
     - add tests, document and promote dev-parser, abstract-parser, javascript-parsers-benchmark, javascript-parsing-cheatsheet
        - document dev-parser using npx not npm
     - awesome-javascript-parsing
     - post an issue on each JS parser projects to ask them whether they want to document it and|or use it

TypeScript:
  - go through TypeScript projects in to_learn.txt
  - consider running eslint twice since two parsers (@babel/parser, typescript-estree) might be needed???
  - add TypeScript:
     - remove all *.js from import statements
     - *.js -> *.ts
     - add @babel/plugin-transform-typescript
        - use PLUGIN_OPTS.allowNamespaces true
     - CommonJS default exports:
        - tsc --esModuleInterop
        - should already be done:
           - use import VAL from '...'
           - use module.exports = VAL (top-level only)
     - use `tsc` (non-watch mode) and `tsc -w` (not gulp-typescript)
     - type every function
     - typescript keyword in package.json and GitHub tags
  - add JSDoc:
     - gulp docs:
        - runs typedoc:
           - --excludeNotExported
           - output to build/src_docs/
        - before typedoc, should transform VINYL.content:
           - // COMMENT to /** COMMENT */
              - if several in a row, merge them
           - this allows keeping using // COMMENT everywhere except for top exports
              - including on top of files to imply @file (make sure it works)
           - this still allows using /** COMMENT */ (since those are not changed) if want to specify additional @TAG
        - part of gulp build only if it's fast
        - document it in CONTRIBUTING.md
     - comment:
        - entry file exported variables with JSDoc tags and description:
           - @param|returns|typeparam (no TYPE)
           - @default|throws
           - @deprecated|todo|ignore
           - @event|fires|listens
           - @external|global
           - @mixin
           - @link|see and [[VARR]]
           - ``` ... ``` for examples
        - make sure VSCode is showing TypeScript TYPEs even if current file is JavaScript and library is transpiled to JavaScript
           - otherwise, entry file exported variables should add more JSDoc tags
        - non-entry file exported variables with only // COMMENT
        - links to README.md and docs/*
        - check if using @module with typedoc-plugin-external-module-name makes sense for bigger repos
     - JSDoc blocks are extracted to *.d.ts by tsc --declaration:
        - should not be stripped by Babel so also available in *.js
     - add eslint-plugin-jsdoc
        - check each rule to see if it works
  - try to use it for input/options validation (check if library exists)
     - check my json-schema roadmap
     - might require separate build step
     - should be a function wrapper
     - checks both input and output
        - this should be skipped when detect that consumer uses tsc too
        - goals:
           - runtime check
           - test that types match implementation, during automated tests
     - apply default values
  - other option for validation:
     - TypeScript to JSON-SCHEMA:
     - also repo for better ajv error messages
     - validation tool:
        - compile-time transform to ajv optimized function
        - @VALIDATE(FILE)(FUNC)
           - using ajv FILE
        - cached (unless ajv cache is enough)
  - try to use it for CLI handling (check if library exists)
     - check my better-cli roadmap

Finish Stripe (see Stripe doc)

"Cross-platform Node.js" Medium series
  - once every Wednesday, based on a chapter of cross-platform-node-guide
  - promote on cross-platform-node-guide
  - maybe promote on awesome-cross-platform-nodejs

Check spectrum chat vs Gitter

Fix `timeout` and `killSignal` in Node core (https://github.com/nodejs/node/issues/27639)

Go through "versioning" documentation
  - add better changelog logic
     - should include contributors names and thank them

Separate gulp-watch code into own repository
  - re-use Gulp logo but dark and eye symbol instead of "Gulp" word

Separate the codecov upload logic into own repository

codecov-check (see roadmap)

Separate the npm publish logic into own repository

Add tests
  - test on several Gulp versions?
