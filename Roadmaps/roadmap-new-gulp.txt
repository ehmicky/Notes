
                    
   ROADMAP-NEW-GULP  
                    


Features:
  - simplicity
     - no plugins needed
     - no filesystem abstraction (unlike Vinyl)
     - simple functions, easy to test
     - simple helpers for most common need: ordering, file selection, file watching, CLI flags, commands
  - imperative
     - no need to learn declarative syntax
     - flexibility for any logic

Order:
  - series(FUNC...)(ARGS...)
  - parallel(FUNC...)(ARGS...)

Files selection:
  - files(GLOBS, FUNC('PATH'_ARR)[->PROMISE])
  - OPTS.cwd 'PATH'
     - def: package.json's root
     - for GLOBS
     - 'PATH' are not absolute, but relative to OPTS.cwd
        - this makes it easier to re-use directory structure when copying files
  - forbid files() as FUNC(), or inside FUNC() (i.e. no nesting)

Watch mode:
  - OPTS.watch true
  - make files() operate in watch mode
  - files() is still triggered once at the beginning with all files
  - if multiple files change at same time, files() callback called only once
  - errors should not stop watch mode
     - errors in both tasks and watcher
  - a given task should only be run once at a time
     - if triggered while being run, the additional call should wait for command completion
     - if triggered again, should be ignored, as opposed to being queued again
  - series(FUNC...):
     - should only run one FUNC at a time
        - and let enough time after completion for change events to be triggered
     - if multiple FUNC... triggered at once, priority to earliest
     - if FUNC triggered, next FUNCs should be re-triggered
        - if already triggered by files(), next FUNCs should only use those files

Files filtering:
  - Positional arguments 'GLOB'..., after task name
  - Make files() filter for those files only
     - in watch mode or not

Caching:
  - OPTS.cache BOOL (def: false)
  - For each task, make files()'s initial run ignore any files if either
     - last run threw an error
     - last run was after current mtime
  - if false, cache is deleted

Logging:
  - print only:
     - "TASK start[: PATH]"
     - "TASK end (DURATION)[: PATH]"
  - use some color
  - TASK name:
     - top-level tasks: named export name
     - nested tasks: FUNC.name
        - if anonymous: "anonymous"
  - PATH only present if single file is being changed
  - task errors should use red color
  - users should just use console.*
     - no logging utility, for simplicity

Meta-description:
  - no CLI flags --help, for simplicity
  - invalid task name or no task name lists tasks

Commands:
  - exec(): small wrapper around execa(), which adds:
     - stdio 'inherit'
     - error handling
  - only for execa(), not execaCommand()

CLI binary
  - short name
  - first positional argument is task name
     - def: "main"
     - only single one
  - "main" default task name
  - OPTS.tasks 'PATH'
     - def: '[.../]SOME_NAME.js|mjs|cjs'
     - named exports, i.e. does a dynamic import()

CLI flags:
  - No positional arguments
  - No need to define them: automatically parsed
  - Passed as OBJ argument to task FUNCs
     - if files(), passed as second argument
  - Core flags (OPTS.watch, etc.) also passed

TypeScript support
