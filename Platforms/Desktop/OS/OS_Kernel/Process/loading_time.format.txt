
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   LOADING TIME   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

                                   MEMORY MAP

Une memmap (memory map, région virtuelle) est 1 ou plusieurs pages de mémoire virtuelle contigue, caractérisé par :
  - des droits d'accès (RWX)
  - une adresse de début et une taille
  - des infos sur la zone mappée.
C'est par exemple des memmap qui sont mappées lors du loading des "segments" d'un exécutable.
Une memmap peut :
  - être la projection d'un fichier ou bout de fichier (notamment exécutable, ou memmap())
  - être anon[ymous], c'est-à-dire pas associée à un fichier, et initialisée à zéro. Utilisée par exemple par les stacks, heaps, etc.
Une memmap nouvellement créée (tel que lorsqu'un exécutable est lancé) a une adresse virtuelle, mais pas d'adresse physique : la page qu'elle tente d'accéder n'a pas de Presence Bit. Une exception Page Fault est alors lancée (à moins que page demandée soit inacessible, auquel cas SegFault), et les page tables sont mis à jour pour permettre traduction adresse virtuelle -> adresse physique. Cette traduction est donc fait de manière dynamique et runtime : c'est le "demand paging".
Les pages plus ou peu utilisées sont remises dans la mémoire secondaire / "backing store". Il s'agit :
  - pour une memmap normale, du fichier physique
  - pour une memmap anon, du swap

Pour accéder aux memmaps allouées à un processus : /proc/$PID/maps, ou commande pmap, et plus d'infos encore : /proc/$PID/smaps
fork() :
  - crée un processus fils copie du père, avec toutes ses memmaps partagées avec le père donc, mais :
    - MAP_SHARED pour le code
    - MAP_PRIVATE pour les data. A la première tentative d'écriture de l'un des deux processus, une nouvelle copie de cette memmap est créé pour le fils (COW, Copy-on-write).
execve() :
  - remplace les memmaps actuels par ceux désignés par l'exécutable ELF.
  - met à jour le contexte d'environnement courant.

Le heap est une memmap anon, permettant l'allocation runtime de mémoire.
Un heap peut être redimensionné (syscall brk() sous Linux)

_________________________________

                           POSITION INDEPENDANT CODE

Soit un ensemble de segments SD... pour les data segments et SX... pour les code segments :
  - Tout A utilisé par SX... fait référence à une adresse de SD... relative à l'instruction, et non absolue.
  - Ainsi, les segments SD... + SX... peuvent être chargés à n'importe quel endroit de l'espace virtuel d'un programme
  - Nécessaire donc pour les shared libraries, qui sont mappées dans l'espace virtuel des programmes les utilisant
  - Généré avec -fPIC et -fpic par gcc
  - Implique plus de relocations lors du loading-time => pour efficience, essayer de réduire ces dernières
  - Pour ce faire :
    - pour les jmp, ret et call : utilise des jmp "relative" et non normaux (absolus)
    - pour le reste : utilise des GOT (Global Offset Table) :
      - calcule une adresse absolue, mais runtime
      - les GOT contiennent cette adresse absolue : le code fait référence donc non à une adresse absolue, mais à un index de la GOT, contenant cette adresse.
      - la GOT est construite par le loader pendant le loading-time
      - les GOT ne sont pas shared mais private à chaque process (comme tout data segment ???)
      - la base adresse de la GOT est contenu dans ebx
      - _GLOBAL_OFFSET_TABLE_ est remplacé par l'offset relatif entre l'adresse de la GOT (ebx) et l'instruction courante ($)
      - trois premières entrées de GOT réservées ???
    - PLT (Procedure Linkage Entry)
      - construite lors du loading-time

Voc :
  - PC est la position actuelle dans le code
  - Sym@MOT signie l'offset entre quelquechose lié au symbole Sym et autre chose, cf ci-dessous
  - @GOTPLT est comme @GOT, mais implique que Sym utilise aussi la PLT

         |           PLT           |                           |           GOT            |
  <------+-----+-------------------+----+----------------------+-----+--------------------+
               |Entrée PLT de Sym       |Utilisation de Sym          |Entrée GOT de Sym

               <-----------------------><---------------------><----->
                        @PLT                     @GOTOFF        @GOT
                                                                @GOTPLT
                                        <---------------------------->
                                                   @GOTPCREL
               <---------------------------------------------->
                                  @PLTOFF

Pour le reste, le loader n'a pas besoin de GOT et peut écrire l'adresse absolue, loadtime.

Relocation :
  - quand un symbole est traduit en adresse absolue/relative/GOT/PLT ???
  - soit, pour un symbole Sym donné :
    - A : offset quelconque
    - B : base adresse virtuelle du segment courant, dans le process courant, runtime
    - GB : base adresse virtuelle de la GOT, dans le process courant, runtime
    - G : offset depuis GB de l'entrée de Sym dans la GOT
    - L : offset depuis début de la PLT de l'entrée de Sym dans la PLT
    - S : "value of the symbol whose index resides in the relocation entry" ???
    - P : "place of the storage unit being relocated" ???
    - Z : "size du symbol" ???
  - types de relocation possibles ??? :
    - R_386_NONE, R_X86_64_NONE, R_386_COPY, R_X86_64_COPY : rien
    - R_386_32, R_X86_64_64 : S + A
    - R_386_PC32, R_X86_64_PC32 : S + A - P
    - R_386_GOT32 : G + A - P
    - R_X86_64_GOT32 : G + A
    - R_386_PLT32, R_X86_64_PLT32 : L + A - P
    - R_386_GLOB_DAT, R_X86_64_GLOB_DAT : S
    - R_386_JMP_SLOT, R_X86_64_JUMP_SLOT : S
    - R_386_RELATIVE, R_X86_64_RELATIVE : B + A
    - R_X86_64_GOTPCREL : G + GB + A - P
    - R_X86_64_32, R_X86_64_32S, R_X86_64_16, R_X86_64_8 : S + A
    - R_X86_64_PC16, R_X86_64_PC8, R_X86_64_PC64 : S + A - P
    - R_X86_64_DTPMOD64, R_X86_64_DTPOFF64, R_X86_64_TPOFF64, R_X86_64_TLSGD, R_X86_64_TLSLD, R_X86_64_DTPOFF32, R_X86_64_GOTTPOFF, R_X86_64_TPOFF32 : rien
    - R_386_GOTOFF, R_X86_64_GOTOFF64 : S + A - GB
    - R_386_GOTPC, R_X86_64_GOTPC32 : GB + A - P
    - R_X86_64_SIZE32, R_X86_64_SIZE64 : Z + A
    - R_X86_64_GOTPC32_TLSDESC, R_X86_64_TLSDESC_CALL, R_X86_64_TLSDESC : rien

_________________________________

LINKING ET SYMBOLES :

Un symbole est un L ou V. Après l'assemblage (fichier objet), il n'est pas traduit en adresse mémoire : c'est le linker qui le fait.
Pour un static VAR, il regarde juste au niveau du même fichier ; pour un extern VAR, il regarde avec les autres fichiers qu'on lui fournit.
Il résout les symboles en comparant les M demandant tel symbole, et les lignes déclarant telle symbole, et résout le tout dans un seul fichier synthétisant tous les fichiers (=> exécutable)
.strtab : array de strings des symboles
.symtab : array des adresses des symboles ???

_________________________________

DSO (Dynamic Shared Objects) : synonyme de shared library

ld --shared : crée une shared library, et non un exécutable. Différence :
  - shared library n'ont pas de fixed load adress, c'est le loader qui le décide. Un exécutable au contraire impose sa load adress au loader.

_________________________________

Autre utilisation possible des shared library :
  - core de routines (module) utilisé par un programme, que l'on modifie peu ou différemment du reste du programme -> on en fait un .so, ce qui évite de refaire le linking

Symbole : fonction ou variable.

_________________________________

Exécution (kernel mode) :
  - OS mappe les différentes memmaps de l'exécutable
  - OS prépare l'auxilary vector (arge), qui contient des infos pour le loader, dont l'entry point et l'emplacement en mémoire des memmaps de l'exécutable.
  - OS mappe le loader, et lui passe la main
Loader (user mode) :
  - détermine les dépendances (shared libraries utilisées par l'exécutable), et mappe leurs différentes memmaps
  - fait les relocation :
    - "early" : loadtime
    - "lazy" : runtime, seulement quand le symbole (fonction ou variable) est utilisé
  - exécute l'init fonction de chaque exécutable/shared library :
    - il ne s'agit pas ici de la fonction _init définie par l'OS
    - sous GNU/Linux, utiliser pour cela void __attribute ((constructor)) maFonction(), et non _init()
    - les init fonctions sont exécutées en commençant par les dépendances (des dépendances, etc.)
  - après exécution, fera la même chose avec les fini fonctions ( utiliser alors ((destructor)) )

Relocation / symbol resolution : fait d'attribuer une adresse aux symboles.

Types de relocation de symboles :
  - "relative" : quand le symbole est défini dans le même fichier :
    - traduit par un simple offset link-time
  - "absolue" : quand le symbole est dans un autre fichier

Efficience du loading : NombreSharedLibrariesUtilisées * NombreDeSymbolesTotal,

Pre-linking ???

_________________________________

PLT et GOT :
  - permettent relocations sans changer le segment .text, mais seulement les segments data
  - de plus, relocate symbols demande seulement modification d'une entrée de la PLT ou GOT, non chaque instruction utilisant cette variable.
  - doit utiliser -fpic ou -fPIC ???

GOT : 
  - pour toutes les variables (variables V non-label) extern (non static ???)
  - en ASM : sym@GOT(ebx)
  - l'adresse de la variable se trouve dans la GOT
  - offset entre ebx et instruction est connu link-time, mais ebx est assigné load-time
  - une entrée == 4 octets : une adresse
  - GOT.PLT : part de la GOT réservée pour la PLT

PLT : 
  - pour les fonctions (label L)
  - en ASM : call sym@PLT
  - l'adresse de la fonction se trouve dans la PLT (trampoline)
  - une entrée == 2 octets
  - si les labels des entrées sont .PLT0, .PLT1, etc., leur écriture  pour un jmp est .PLT0@PC, .PLT1@PC, etc.
  - chaque entrée, en ASM :
    - jmp [sym@GOT] (lors du premier jmp, sym@GOT == l'adresse qui suit ; lors des jmp suivants, sym@GOT == véritable adresse de la fonction sym) (1ère entrée de PLT -> 4ème entrée de GOT.PLT, 2ème -> 5ème, etc.)
      push OFFSET (de sym@GOT par rapport au début de GOT.PLT, - 12)
      jmp .PLT0@PC
  - la première entrée, .PLT0@PC est particulière :
    - push [2ème adresse de la GOT.PLT (0 au début ??? puis adresse pointant dans les .bss de ld ensuite ???)]
      jmp [3ème adresse de la GOT.PLT (adresse pointant dans le .text de ld ensuit)] (ld remplace alors l'adresse sym@GOT (GOT.PLT base adresse + OFFSET + 12) par l'adresse de la fonction sym et jmp vers cette fonction)
  - tout fonction extern, même défini + déclaré dans le même fichier, a une entrée PLT, au cas où il soit redéfini autre part. Pour éviter cela, déclarer static ???

_________________________________

                                    LINKING

Prendre plusieurs object files et les rassembler en un seul exécutable ou shared librarie. Nécessite de :
  - rassembler les code segments
  - résoudre les symboles externes résolvables linking-time
  - construire les sections pour le loading-time des symboles (dont table des symboles) et d'autres sections (numero de l'ABI, etc.)

Différents adress space :
  - file space
  - load memory adress
  - virtual memory adress
    - en général == load memory adress, sauf pour de l'embarqué
    - une seule shared library peut avoir plusieurs virtual adresses, si loadée par plusieurs processes

_________________________________

Symbols :
  - fonction ou variable.
  - Peut être :
    - "defined"   : pouvant être résolu linking-time
    - "undefined" : ne pouvant pas être résolus linking-time (ex : appel à une shared library)
  - a un nom + une valeur (== son adresse)

Sections / "Contents"

Relocation :
  - modifier la valeur des symboles en fonction de règles établies
  - "addend" : valeur fixe utilisée comme offset dans certaines règles de relocation

Override de symboles :
  - si exécutable lié avec un DSO override un symbole, cela marchera pour lui, mais en plus le DSO utilisera alors ce symbole

_________________________________

Entrées de la GOT :
  - GLOB_DAT : variables dans le code segment, accédées via GOT_BASE_ADRESS + offset
  - JMP_SLOT : entrée utilisée par la PLT ; initialisée avec l'adresse qui suit dans l'entrée PLT : ne reste plus qu'à rajouter la base load adress de la library loadtime
