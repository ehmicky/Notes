
               
   ANSI-STYLES  
               



VERSION ==>                           #6.2.1

GOAL ==>                              #ANSI sequence map from name to raw sequence.
                                      #Only for common SGR sequences \[~m

COLORS ==>                            #ANSI sequences for:
                                      #  - 4 bits (16 colors + modifiers): using 'NAME'
                                      #  - 8 bits (256 colors): using NUM 0-255
                                      #  - 24 bits (16e6 colors): using RED|GREEN|BLUE 0-255, or HEX (NUM|STR, 3 or 6 digits)

[modifier.]MODIFIER.open|close        #STR. ANSI sequences for:
                                      #  - reset (clear)                                         \e[0m  -> \e[0m
                                      #  - bold                                                  \e[1m  -> \e[22m
                                      #  - underline                                             \e[4m  -> \e[24m
                                      #  - inverse                                               \e[7m  -> \e[27m
                                      #And (not supported on Windows terminal):
                                      #  - dim                                                   \e[2m  -> \e[22m
                                      #  - italic                                                \e[3m  -> \e[23m
                                      #  - hidden (invisible)                                    \e[8m  -> \e[28m
                                      #  - strikethrough                                         \e[9m  -> \e[29m
                                      #  - overline                                              \e[53m -> \e[55m
modifierNames                         #'MODIFIER'_ARR

[color.]COLOR.open                    #STR. ANSI sequence for foreground color (4 bits):
                                      #  - black|red|green|yellow|blue|magenta|cyan|white        \e[30m to \e[37m
                                      #  - black|red|green|yellow|blue|magenta|cyan|whiteBright  \e[90m to \e[97m
                                      #  - gray|grey (same as blackBright)                       \e[90m
color[.COLOR].close                   #                                                          \e[39m
[bgColor.]COLOR.open                  #STR. ANSI sequence for background color (4 bits):
                                      #  - black|red|green|yellow|blue|magenta|cyan|white        \e[40m  to \e[47m
                                      #  - black|red|green|yellow|blue|magenta|cyan|whiteBright  \e[100m to \e[107m
                                      #  - gray|grey (same as blackBright)                       \e[100m
bgColor[.COLOR].close                 #                                                          \e[49m
[foreground|background]ColorNames     #'COLOR'_ARR

codes                                 #MAP mapping from open NUM to close NUM2 (4 bits modifier|color)

color.ansi(NUM)->STR                  #4 bits color ANSI open sequence                           \e[NUMm
color.ansi256(NUM)->STR               #8 bits color ANSI open sequence                           \e[38;5;NUMm
color.ansi16m(RED, GREEN, BLUE)->STR  #24 bits color ANSI open sequence                          \e[38;2;RED;GREEN;BLUEm
bgColor.ansi*(...)->STR               #Same for background color (same as above but with 48 instead of 38)

hexToRgb(HEX)->[RED,GREEN,BLUE]       #24 bits colors as HEX
rgbToAnsi256(RED, GREEN, BLUE)->NUM   #From 24 bits color to 8 bits color
rgbToAnsi(RED, GREEN, BLUE)->NUM      #From 24 bits color to 4 bits color
ansi256ToAnsi(NUM)->NUM2              #From 8 bits to 4 bits
hexToAnsi256(HEX)->NUM                #hexToRgb() + rgbToAnsi256()
hexToAnsi(HEX)->NUM                   #hexToRgb() + rgbToAnsi()
