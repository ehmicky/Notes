
              
   DENO_FLAGS  
              



VERSION ==>                       #See Deno doc

Deno.args                         #STR_ARR. CLI argv, excluding deno commands|flags

std/flags/mod.ts                  #

parse(STR_ARR[, OPTS])->FLAGS_OBJ #Parse CLI flags
                                  #STR_ARR is usually Deno.args

--FLAG=VAR vs --FLAG VAR???
check yargs???
FLAGS._ always set with unknown flags???
OPTS.-- default true???

OPTS.stopEarly                    #BOOL (def: false). Set FLAGS._ with everything after first non-FLAG
OPTS.--                           #BOOL (def: false). Set:
                                  #  - FLAGS._ STR|NUM_ARR with everything before --
                                  #  - FLAGS.-- STR|NUM_ARR with everything after --

OPTS.default.FLAG                 #VAL. Default value

OPTS.boolean                      #BOOL or 'FLAG'[_ARR] with type BOOL
                                  #  - transtyped with Boolean()
                                  #  - default value false
                                  #If true, treats --FLAG (but not -F nor --FLAG=VAL) as boolean
                                  #If false (def), treats --FLAG and -F (but not --FLAG=VAL) as boolean
OPTS.negatable                    #'FLAG'[_ARR] with type BOOL which can use --no-*
OPTS.string                       #'FLAG'[_ARR] (def: []) with type STR
NUMBER FLAGS ==>                  #Automatically detected
OPTS.collect                      #'FLAG'[_ARR] with type ARR.
                                  #  - flag must be repeated
                                  #  - default value []

OPTS.alias.FLAG                   #'FLAG2'[_ARR] alias name

OPTS.unknown                      #FUNC('FLAG', 'FLAG', VAL)->VAL
                                  #Called on unknown FLAGs
                                  #If returning false, flag is ignored
