
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DENO_PROGRESS_BAR   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See cli-progress

VERSION ==>                       #Part of Deno
                                  #Browser compatible

@std/cli/unstable-progress-bar   !#
new ProgressBar(WSTREAM, OPTS)    #PBAR
                                  #WSTREAM can be Deno.stdout|stderr.writable for example
                                  #Updated 1/s

OPTS.value                        #NUM (def: 0)
PBAR.add(NUM)                     #
OPTS.max                          #NUM (def: none)
PBAR.end()->>                     #

OPTS.keepOpen                     #BOOL (def: true). If false, closes WSTREAM at end
OPTS.clear                        #BOOL (def: false). Clear the line at the end

OPTS.barLength                    #NUM (def: 50)
OPTS.fillChar                     #'CHAR' (def: '#')
OPTS.emptyChar                    #'CHAR' (def: '-')

OPTS.fmt                          #FUNC(PCONTEXT)->STR, with each line
                                  #Def: PCONTEXT.styledTime() + PCONTEXT.progressBar + PCONTEXT.styledData()

PCONTEXT.value                    #OPTS.value
PCONTEXT.previousValue            #Last OPTS.value
PCONTEXT.max                      #OPTS.max
PCONTEXT.styledData()->STR        #Same as '[NUM/NUM2 UNIT]' with UNIT being KiB|MiB|GiB|TiB|PiB

PCONTEXT.time                     #NUM of ms since start
PCONTEXT.previousTime             #Last PCONTEXT.time
PCONTEXT.styledTime()->STR        #Same as '[SS:ss]'

PCONTEXT.progressBar              #'[##----]' using OPTS.barLength|fillChar|emptyChar

@std/cli/
 unstable-progress-bar-stream    !#
new ProgressBarStream             #TSTREAM that:
 (WSTREAM, OPTS)                  #  - start a PBAR
                                  #  - calls PBAR.add(CHUNK.length) with each CHUNK
                                  #  - end PBAR on flush|cancel
