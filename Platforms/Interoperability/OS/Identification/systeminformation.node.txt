
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SYSTEMINFORMATION   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #4.17.0

GOAL ==>                          #Cross-OS information on:
                                  #  - main device, motherboard, BIOS, machine UUID
                                  #  - CPU models, caches, flags, speed, temperature, load
                                  #  - memory usage, RAM bars
                                  #  - hard drives, IO stats, disk partitions
                                  #  - network interfaces, speed, connections, latency, wifi
                                  #  - GPUs, screens
                                  #  - current time, uptime, timezone
                                  #  - battery
                                  #  - OS, distribution
                                  #  - processes, daemons
                                  #  - real users
                                  #  - software versions
                                  #  - docker containers, stat, processes
                                  #  - virtualbox

PROBLEMS ==>                     ##Not installed on Linux by default:
                                 ##  - "net-tools" (for networkInterfaceDefault())
                                 ##  - "lm-sensors" (for cpuTemperature().cores)
                                 ##Not installed on Mac by default:
                                 ##  - "osx-temperature-sensor" (for cpuTemperature())
                                 ##Must be root on Linux|*BSD:
                                 ##  - dmidecode (for system(), bios(), baseboard(), cpu().socket, memLayout(), graphics().controllers[*].bus)
                                 ##  - /sys/devices/virtual/dmi/id/*_serial|uuid
                                 ##  - smartctl (diskLayout())
                                 ##Marked as such in documentation below

PACKAGES AND FILES USED ==>       #Linux|Mac|Windows|*BSD|Solaris:
                                  #  - ping (package "iputils-ping")
                                  #Linux|Mac|Windows|*BSD:
                                  #  - netstat (package "net-tools")
                                  #Linux|Mac|*BSD|Solaris:
                                  #  - curl (package "curl")
                                  #  - ps (package "procps")
                                  #  - route (package "net-tools")
                                  #  - w (package "procps")
                                  #  - who (package "coreutils")
                                  #Linux|Mac|*BSD:
                                  #  - df (package "coreutils")
                                  #Linux|Mac:
                                  #  - ifconfig (package "net-tools")
                                  #Linux|*BSD:
                                  #  - /proc/cpuinfo
                                  #  - dmidecode (package "dmidecode")
                                  #     - /sys/devices/virtual/dmi/id/* as fallback
                                  #  - service (package "init-system-helpers")
                                  #  - ss (package "iproute2")
                                  #Linux:
                                  #  - /etc/*-release
                                  #  - /etc/machine-id
                                  #  - /etc/openwrt_release
                                  #  - /proc/diskstats
                                  #  - /proc/meminfo
                                  #  - /proc/net/wireless
                                  #  - /proc/stat
                                  #  - /proc/sys/fs/file-nr
                                  #  - /sys/block/*/queue/rotational
                                  #  - /sys/block/*/stat
                                  #  - /sys/class/net/*/*
                                  #  - /sys/class/power_supply/BAT*/uevent
                                  #  - /sys/class/thermal/thermal_zone0/temp
                                  #  - /usr/lib/os-release
                                  #  - /var/lib/dbus/machine-id
                                  #  - hostname (package "hostname")
                                  #  - ip (package "iproute2")
                                  #  - iw (package "iw")
                                  #  - lsblk (package "util-linux")
                                  #  - lscpu (package "util-linux")
                                  #  - lspci (package "pciutils")
                                  #  - nmcli (package "network-manager")
                                  #  - sensors (package "lm-sensors")
                                  #  - smartctl (package "smartmontools")
                                  #  - fbset, tvservice, vcgencmd (on Raspberry PI)
                                  #  - xdpyinfo (package "x11-utils")
                                  #  - xrandr (package "x11-xserver-utils")
                                  #Mac|*BSD:
                                  #  - sysctl (package "procps")
                                  #Mac:
                                  #  - airport
                                  #  - diskutil
                                  #  - IOKit (native module 'osx-temperature-sensor')
                                  #  - ioreg
                                  #  - sw_vers
                                  #  - system_profiler
                                  #  - vm_stat
                                  #Windows:
                                  #  - Get-PhysicalDisk, Get-CimInstance, System.Windows.Forms.Screen (PowerShell)
                                  #  - query
                                  #  - netsh
                                  #  - reg
                                  #  - wmic
                                  #  - HTTP[S].get()
                                  #*BSD:
                                  #  - kenv
                                  #Solaris:
                                  #  - uname
                                  #all:
                                  #  - OS.cpus|loadavg|networkInterfaces|release|uptime()

                                  ┌───────────────┐
                                  │   AGGREGATE   │
                                  └───────────────┘

getAllData(...)->PROMISE_OBJ      #getStaticData() + getDynamicData()
getStaticData()->PROMISE_OBJ      #Aggregate all methods below, for the information that does not change:
                                  #  - system(), bios(), baseboard()
                                  #  - osInfo(), uuid(), versions()
                                  #  - cpu(), cpuFlags()
                                  #  - graphics()
                                  #  - networkInterfaces()
                                  #  - memLayout(), diskLayout()
getDynamicData                    #Same for dynamic data:
 (['SERVICES,...']['INTERFACE,']) #  - time()
 ->PROMISE_OBJ                    #  - cpuCurrentSpeed(), currentLoad(), cpuTemperature()
                                  #  - users()
                                  #  - services('SERVICES,...'), processes()
                                  #  - networkStats(['INTERFACE']), networkConnections(), inetLatency()
                                  #  - mem(), fsSize(), fsStats(), disksIO()
                                  #  - battery()

                                  ┌────────────┐
                                  │   DEVICE   │
                                  └────────────┘

system()->PROMISE_OBJ             #Main device. Uses:
                                  #  - Linux|*BSD:
                                  #     - dmidecode --type system
                                  #     - /sys/devices/virtual/dmi/id/*
                                  #  - Mac: ioreg -c IOPlatformExpertDevice -d 2
                                  #  - Windows:
                                  #     - wmic csproduct get /value
                                  #     - wmic /namespace:\\\\root\\wmi path MS_SystemInformation get /value
system().manufacturer             #STR (e.g. 'PC Specialist LTD')
system().model                    #STR (e.g. 'P7xxTM1')
                                  #(Linux only)
                                  #  - 'Docker Container' if `/.dockerenv|dockerinit` exists
                                  #  - 'Virtual machine' if dmesg | grep -i virtual | grep -iE "vmware|qemu|kvm|xen"
                                  #  - 'BCM*' (Raspberry PI) using `cat /proc/cpuinfo`
system().version                  #STR (e.g. "1.0")
system().serial                  ##STR (e.g. "0")
system().uuid                    ##STR (e.g. '525BFA80-E4EC-0000-0000-000000000000')
system().sku                      #STR

baseboard()->PROMISE_OBJ          #Motherboard. Uses:
                                  #  - Linux|*BSD:
                                  #     - /sys/devices/virtual/dmi/id/*
                                  #     - on non-ARM: dmidecode --type 2
                                  #     - on ARM: cat /proc/cpuinfo | grep Serial
                                  #  - Mac: ioreg -c IOPlatformExpertDevice -d 2
                                  #  - Windows: wmic baseboard get /value
baseboard().manufacturer          #STR (e.g. 'CLEVO')
baseboard().model                 #STR (e.g. 'P7xxTM1')
baseboard().version               #STR
baseboard().serial               ##STR
baseboard().assetTag              #STR (e.g. 'Tag 12345')

chassis()->PROMISE_OBJ            #Enclosure. Uses:
                                  #  - Linux|*BSD: /sys/devices/virtual/dmi/id/chassis_*
                                  #  - Mac: ioreg -c IOPlatformExpertDevice -d 2
                                  #  - Windows: wmic path Win32_SystemEnclosure get /value
chassis().manufacturer            #STR
chassis().model                   #STR
chassis().type                    #STR (e.g. '10')
chassis().version                 #STR
chassis().serial                  #STR
chassis().assetTag                #STR
chassis().sku                     #STR

bios()->PROMISE_OBJ               #BIOS. Uses:
                                  #  - Linux|*BSD:
                                  #     - on non-ARM: dmidecode --type 0
                                  #     - on ARM: cat /proc/cpuinfo | grep Serial
                                  #     - /sys/devices/virtual/dmi/id/*
                                  #  - Windows: wmic bios get /value
bios().vendor                     #STR (e.g. 'American Megatrends Inc.')
bios().version                    #STR (e.g. '5.12')
bios().releaseDate                #STR (e.g. '11/23/2017')
bios().revision                   #STR (e.g. '5.12')

uuid()->PROMISE_OBJ               #Machine UUID. Uses:
                                  #  - Linux: cat /var/lib/dbus/machine-id /etc/machine-id || hostname
                                  #  - Mac: ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID
                                  #  - Windows: %windir%\\System32\\reg query "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography" /v MachineGuid
                                  #  - *BSD: kenv -q smbios.system.uuid
uuid().os                         #STR (e.g. "dbdfe326696d4644978c1752531c7599" or "d9517fbc-b6eb-4446-95d6-6224c1c9d7ac")

                                  ┌─────────┐
                                  │   CPU   │
                                  └─────────┘

cpu()->PROMISE_OBJ                #CPU models. Uses:
                                  #  - Linux:
                                  #     - lscpu
                                  #     - cat /proc/cpuinfo | grep -E "physical id|core id"
                                  #     - dmidecode –t 4 2>/dev/null | grep "Upgrade: Socket"
                                  #  - Mac: sysctl machdep.cpu hw.cpufrequency_max hw.cpufrequency_min hw.packages hw.physicalcpu_max hw.ncpu
                                  #  - Windows:
                                  #     - wmic cpu get /value
                                  #     - wmic path Win32_CacheMemory get CacheType,InstalledSize,Purpose
                                  #  - *BSD: dmidecode -t 4|7
                                  #  - all: OS.cpus()
cpu().manufacturer                #STR (e.g. "Intel®")
cpu().brand                       #STR (e.g. "Core™ i7-8700K")
cpu().vendor                      #STR (e.g. "GenuineIntel")
cpu().family                      #STR (e.g. "6")
cpu().model                       #STR (e.g. "158")
cpu().stepping                    #STR (e.g. "10")
cpu().revision                    #STR (e.g. "")
cpu().voltage                     #STR (e.g. "")
cpu().speed                       #STR (e.g. "3.70")
cpu().speedmin                    #STR (e.g. "0.80")
cpu().speedmax                    #STR (e.g. "4.70")
cpu().cores                       #NUM (e.g. 12)
cpu().physicalCores               #NUM (e.g. 6)
cpu().processors                  #NUM (e.g. 1)
cpu().socket                     ##STR (e.g. "LGA1151")
cpu().governor                    #STR (e.g. "powersaver")

cpuCache()->PROMISE_OBJ           #CPU caches. Uses:
                                  #  - Linux: lscpu
                                  #  - Mac: sysctl hw.l1icachesize hw.l1dcachesize hw.l2cachesize hw.l3cachesize
                                  #  - Windows:
                                  #     - wmic cpu get l2cachesize, l3cachesize /value
                                  #     - wmic path Win32_CacheMemory get CacheType,InstalledSize,Purpose
                                  #  - *BSD: dmidecode -t 7
cpu().cache                       #OBJ (e.g. { "l1d": 32768, "l1i": 32768, "l2": 262144, "l3": 12582912 }

cpuFlags()->PROMISE_STR           #CPU flags. Uses:
                                  #  - Linux:
                                  #     - lscpu
                                  #     - cat /proc/cpuinfo
                                  #  - Mac: sysctl machdep.cpu.features
                                  #  - Windows: reg query "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0" /v FeatureSet
                                  #  - *BSD: dmidecode -t 4
cpu().flags                       #STR (e.g. "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 ...")

cpuCurrentspeed()->PROMISE_OBJ    #CPU speed. Uses: OS.cpus()
cpuCurrentspeed().min             #NUM (e.g. 4.33)
cpuCurrentspeed().max             #NUM (e.g. 4.41)
cpuCurrentspeed().avg             #NUM (e.g. 4.36)
cpuCurrentspeed().cores           #NUM_ARR (e.g. [4.39) 4.33, 4.36, 4.34, 4.34, 4.4, 4.38, 4.34, 4.38, 4.41, 4.34, 4.36]

cpuTemperature()->PROMISE_OBJ    ##CPU temperature. Uses:
                                 ##  - Linux:
                                 ##     - sensors
                                 ##     - /sys/class/thermal/thermal_zone0/temp
                                 ##     - vcgencmd measure_temp
                                 ##  - Mac: IOKit with native C code (must have `osx-temperature-sensor` installed)
                                 ##  - Windows: /namespace:\\\\root\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature
                                 ##  - *BSD: sysctl dev.cpu | grep temp
cpuTemperature().main            ##NUM (e.g. 53)
cpuTemperature().max             ##NUM (e.g. 53)
cpuTemperature().cores           ##NUM_ARR (e.g. [])

currentLoad()->PROMISE_OBJ        #CPU load.
                                  #Uses: OS.loadavg(), OS.cpus()
currentLoad().avgload             #NUM (e.g. 0.11)
currentLoad().currentload         #NUM (e.g. 5.820068190909327)
currentLoad().currentload_user    #NUM (e.g. 2.9976314622515607)
currentLoad().currentload_system  #NUM (e.g. 2.8169164454700404)
currentLoad().currentload_nice    #NUM (e.g. 0.005520283187725356)
currentLoad().currentload_idle    #NUM (e.g. 94.17993180909068)
currentLoad().currentload_irq     #NUM (e.g. 0)
currentLoad().raw_currentload     #NUM (e.g. 207698300)
currentLoad().raw_currentload_user
currentLoad()                     #NUM (e.g. 106975200)
 .raw_currentload_system          #NUM (e.g. 100526100)
currentLoad().raw_currentload_nice#NUM (e.g. 197000)
currentLoad().raw_currentload_idle#NUM (e.g. 3360959200)
currentLoad().raw_currentload_irq #NUM (e.g. 0)
currentLoad().cpus                #OBJ_ARR
currentLoad().cpus.VAR            #Same VAR as currentLoad().[raw_]current* but without current*

fullLoad()->PROMISE_NUM           #Average load since boot.
                                  #NUM (e.g. 3.25).
                                  #Uses OS.cpus()

                                  ┌────────────┐
                                  │   MEMORY   │
                                  └────────────┘

memLayout()->PROMISE_OBJ_ARR     ##RAM bars. Uses:
                                 ##  - Linux: dmidecode -t memory
                                 ##  - Mac: system_profiler SPMemoryDataType
                                 ##  - Windows: wmic memorychip get /value
memLayout()[*].size              ##NUM (e.g. 17179869184)
memLayout()[*].bank              ##STR (e.g. "BANK 0")
memLayout()[*].type              ##STR (e.g. "DDR4")
memLayout()[*].clockSpeed        ##NUM (e.g. 2400)
memLayout()[*].formFactor        ##STR (e.g. "SODIMM")
memLayout()[*].manufacturer      ##STR (e.g. "029E")
memLayout()[*].partNum           ##STR (e.g. "CM4X16GE2400C16S4")
memLayout()[*].serialNum         ##STR (e.g. "00000000")
memLayout()[*].voltageConfigured ##NUM (e.g. 1.2)
memLayout()[*].voltageMin        ##NUM (e.g. 1.2)
memLayout()[*].voltageMax        ##NUM (e.g. 1.2)

mem()->PROMISE_OBJ                #Memory usage. Uses:
                                  #  - Linux: cat /proc/meminfo
                                  #  - Mac: vm_stat | grep "Pages active", sysctl -n vm.swapusage
                                  #  - Windows: pagefile get AllocatedBaseSize, CurrentUsage
                                  #  - *BSD: sysctl -a | grep -E "hw.realmem|hw.physmem|vm.stats.vm.v_page_count|vm.stats.vm.v_wire_count|vm.stats.vm.v_active_count|vm.stats.vm.v_inactive_count|
                                  #    vm.stats.vm.v_cache_count|vm.stats.vm.v_free_count|vm.stats.vm.v_page_size"
mem().total                       #NUM (e.g. 33668726784)
mem().free                        #NUM (e.g. 6174519296)
mem().used                        #NUM (e.g. 27494207488)
mem().active                      #NUM (e.g. 6219747328)
mem().available                   #NUM (e.g. 11204636672)
mem().buffcache                   #NUM (e.g. 21274460160)
mem().swaptotal                   #NUM (e.g. 31999389696)
mem().swapused                    #NUM (e.g. 0)
mem().swapfree                    #NUM (e.g. 31999389696)

                                  ┌─────────┐
                                  │   I/O   │
                                  └─────────┘

diskLayout()->PROMISE_OBJ_ARR    ##Hard drives. Uses:
                                 ##  - Linux: lsblk -ablJO + cat /sys/block/*/queue/rotational, smartctl -H
                                 ##  - Mac: system_profiler SPSerialATADataType SPNVMeDataType, diskutil info /dev/*
                                 ##  - Windows:
                                 ##     - wmic diskdrive get /value
                                 ##     - Get-PhysicalDisk (PowerShell)
diskLayout()[*].type             ##STR (e.g. "HD")
diskLayout()[*].name             ##STR (e.g. "ST2000LX001-1RG1")
diskLayout()[*].vendor           ##STR (e.g. "Seagate")
diskLayout()[*].size             ##NUM (e.g. 2000000000000)
diskLayout()[*].bytesPerSector   ##NUM (e.g. 512)
diskLayout()[*].totalCylinders   ##NUM (e.g. 6527)
diskLayout()[*].totalHeads       ##NUM (e.g. 255)
diskLayout()[*].totalSectors     ##NUM (e.g. 104856255)
diskLayout()[*].totalTracks      ##NUM (e.g. 1664385)
diskLayout()[*].tracksPerCylinder##NUM (e.g. 255)
diskLayout()[*].sectorsPerTrack  ##NUM (e.g. 63)
diskLayout()[*].firmwareRevision ##STR (e.g. "SDM1")
diskLayout()[*].serialNum        ##STR (e.g. "WDZABADZ")
diskLayout()[*].interfaceType    ##STR (e.g. "SATA")
diskLayout()[*].smartStatus      ##STR (e.g. "unknown")

fsStats()->PROMISE_OBJ            #Number of bytes read|write, FS speed. Uses:
                                  #  - Linux: lsblk + cat /proc/diskstats
                                  #  - Mac: ioreg -c IOBlockStorageDriver -k Statistics -r -w0 | grep "IOBlockStorageDriver"
                                  #Need to be run at least twice, with real-life operations in-between (at least 500ms).
fsStats().rx                      #NUM (e.g. 15091493888)
fsStats().wx                      #NUM (e.g. 12358868480)
fsStats().tx                      #NUM (e.g. 27450362368)
fsStats().rx_sec                  #NUM (e.g. -1)
fsStats().wx_sec                  #NUM (e.g. -1)
fsStats().tx_sec                  #NUM (e.g. -1)
fsStats().ms                      #NUM (e.g. 0)

disksIO()->PROMISE_OBJ            #Similar but per IO but per byte. Uses:
                                  #  - Linux|BSD: lsblk + cat /sys/block/*/stat
                                  #  - Mac: ioreg -c IOBlockStorageDriver -k Statistics -r -w0 | grep "IOBlockStorageDriver"
disksIO().rIO                     #NUM (e.g. 484061)
disksIO().wIO                     #NUM (e.g. 792074)
disksIO().tIO                     #NUM (e.g. 1276135)
disksIO().rIO_sec                 #NUM (e.g. -1)
disksIO().wIO_sec                 #NUM (e.g. -1)
disksIO().tIO_sec                 #NUM (e.g. -1)
disksIO().ms                      #NUM (e.g. 0)

                                  ┌────────────────┐
                                  │   PARTITIONS   │
                                  └────────────────┘

blockDevices()->PROMISE_OBJ_ARR   #Disk partitions. Uses:
                                  #  - Linux: lsblk -bPo NAME,TYPE,SIZE,FSTYPE,MOUNTPOINT,UUID,ROTA,RO,RM,LABEL,MODEL,OWNER[,TRAN,SERIAL]
                                  #  - Mac: diskutil info -all
                                  #  - Windows: wmic logicaldisk get Caption,Description,DeviceID,DriveType,FileSystem,FreeSpace,Name,Size,VolumeName,VolumeSerialNumber /value
blockDevices()[*].name            #STR (e.g. "sda1")
blockDevices()[*].type            #STR (e.g. "part")
blockDevices()[*].fstype          #STR (e.g. "ext4")
blockDevices()[*].mount           #STR (e.g. "/home/data")
blockDevices()[*].size            #NUM (e.g. 2000397795328)
blockDevices()[*].physical        #STR (e.g. "SSD")
blockDevices()[*].uuid            #STR (e.g. "68e31969-789c-4d54-b442-41e3ace5a076")
blockDevices()[*].label           #STR (e.g. "SYSTEM")
blockDevices()[*].model           #STR (e.g. "Samsung SSD 960 PRO 512GB")
blockDevices()[*].serial          #STR (e.g. "S3EWNX0K226906K")
blockDevices()[*].removable       #BOOL (e.g. false)
blockDevices()[*].protocol        #STR (e.g. "nvme")

fsSize()->PROMISE_OBJ_ARR         #Disk partitions, with focus on memory. Uses:
                                  #  - Linux|Mac|*BSD: df -lkPT
                                  #  - Windows: wmic logicaldisk get Caption,FileSystem,FreeSpace,Size
fsSize()[*].fs                    #STR (e.g. "/dev/sda1")
fsSize()[*].type                  #STR (e.g. "ext4")
fsSize()[*].size                  #NUM (e.g. 1967925690368)
fsSize()[*].used                  #NUM (e.g. 50408796160)
fsSize()[*].use                   #NUM (e.g. 2.56)
fsSize()[*].mount                 #STR (e.g. "/home/data")

fsOpenFiles()->PROMISE_OBJ_ARR    #Number of open files. Uses:
                                  #  - Linux: cat /proc/sys/fs/file-nr
                                  #  - Mac|*BSD: sysctl -a | grep 'kern.*files'
fsOpenFiles().allocated           #NUM
fsOpenFiles().max                 #NUM
fsOpenFiles().available           #max - allocated

                                  ┌─────────────┐
                                  │   NETWORK   │
                                  └─────────────┘

networkInterfaces()               #Network interfaces. Uses:
 ->PROMISE_OBJ_ARR                #  - all: OS.networkInterfaces()
                                  #  - Linux|*BSD:
                                  #     - ip link show up
                                  #     - ifconfig
                                  #     - cat /sys/class/net/*/*
                                  #     - cat /proc/net/wireless
                                  #     - iw dev * link
                                  #  - Mac: ifconfig
                                  #  - Windows: wmic nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value
networkInterfaces()[*].iface      #STR (e.g. "wlp112s0")
networkInterfaces()[*].ifaceName  #STR
networkInterfaces()[*].ip4        #STR (e.g. "192.168.1.225")
networkInterfaces()[*].ip6        #STR (e.g. "fe80::ca35:9059:32c0:7095")
networkInterfaces()[*].mac        #STR (e.g. "9c:b6:d0:20:69:c7")
networkInterfaces()[*].internal   #BOOL (e.g. false)
networkInterfaces()[*].virtual    #BOOL (e.g. false)
networkInterfaces()[*].operstate  #
networkInterfaces()[*].type       #
networkInterfaces()[*].duplex     #
networkInterfaces()[*].mtu        #
networkInterfaces()[*].speed      #
networkInterfaces()[*].dhcp       #
networkInterfaces()[*].dnsSuffix  #
networkInterfaces()[*].
 ieee8021xAuth                    #
networkInterfaces()[*].
 ieee8021xState                   #
networkInterfaces()[*].
 carrierChanges                   #

networkInterfaceDefault()        ##Default network interface.
 ->PROMISE_STR                   ##STR (e.g. "wlp112s0")
                                 ##Uses:
                                 ##  - Linux: ip route
                                 ##  - Mac|*BSD|Solaris: route
                                 ##  - all: OS.networkInterfaces()
networkGatewayDefault()          ##Gateway network interface.
 ->PROMISE_STR                   ##STR (e.g. "wlp112s0")
                                 ##Uses:
                                 ##  - Linux: ip route
                                 ##  - Mac|*BSD|Solaris: route
                                 ##  - all: Get-CimInstance

networkStats(['INTERFACE'])       #Network speed. Uses:
 ->PROMISE_OBJ                    #  - Linux: cat /sys/class/net/*/*
                                  #  - Mac: ifconfig *
                                  #  - Mac|*BSD: netstat -ibndI *
                                  #  - Windows:
                                  #     - wmic path Win32_PerfRawData_Tcpip_NetworkInterface Get name,BytesReceivedPersec,BytesSentPersec,BytesTotalPersec,PacketsOutboundDiscarded,
                                  #       PacketsOutboundErrors,PacketsReceivedDiscarded,PacketsReceivedErrors /value
                                  #     - wmic nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value
                                  #  - all: like networkInterfaceDefault()
                                  #Need to be run at least twice.
                                  #Need to be run at least twice, with real-life operations in-between (at least 500ms).
networkStats().iface              #STR (e.g. "en0")
networkStats().operstate          #STR (e.g. "up")
networkStats().rx                 #NUM (e.g. 6560567312)
networkStats().tx                 #NUM (e.g. 82889387)
networkStats().rx_sec             #NUM (e.g. -1)
networkStats().tx_sec             #NUM (e.g. -1)
networkStats().ms                 #NUM (e.g. 0)

networkConnections()              #Network connections. Uses:
 ->PROMISE_OBJ_ARR                #  - Linux|Mac|*BSD|Windows: netstat -tunap
                                  #  - Linux|*BSD: ss -tunap
networkConnections()[*].protocol  #STR (e.g. "tcp")
networkConnections()[*]
 .localaddress                    #STR (e.g. "127.0.0.53%lo")
networkConnections()[*].localport #STR (e.g. "53")
networkConnections()[*]
 .peeraddress                     #STR (e.g. "0.0.0.0")
networkConnections()[*].peerport  #STR (e.g. "*")
networkConnections()[*].state     #STR (e.g. "LISTEN")
networkConnections()[*].pid       #NUM
networkConnections()[*].process   #STR

inetChecksite('URL')->PROMISE_OBJ #Ping a URL. Uses:
                                  #  - Linux|Mac|*BSD|Solaris: curl -I --connect-timeout 5 -m 5 URL
                                  #  - Windows: HTTP[S].get()
inetCheckSite('URL').url          #'URL'
inetCheckSite('URL').ok           #BOOL
inetCheckSite('URL').status       #NUM (e.g. 404)
inetCheckSite('URL').ms           #NUM (e.g. 205)

inetLatency('HOST')->PROMISE_NUM  #Ping time.
                                  #NUM (e.g. 18.042).
                                  #Def 'HOST': '8.8.8.8'.
                                  #Uses:
                                  #  - Linux|Mac|*BSD: ping -c 2 -w 3 HOST
                                  #  - Windows: ping HOST -n 1
                                  #  - Solaris: ping -s -a HOST 56 2

wifiNetworks()->PROMISE_OBJ       #Uses:
                                  #  - Linux: nmcli device wifi list
                                  #  - Mac: airport -s
                                  #  - Windows: netsh wlan show networks
wifiNetworks().ssid               #STR
wifiNetworks().bssid              #STR
wifiNetworks().mode               #STR
wifiNetworks().channel            #NUM
wifiNetworks().frequency          #NUM
wifiNetworks().signalLevel        #NUM
wifiNetworks().quality            #NUM
wifiNetworks().security           #STR_ARR
wifiNetworks().wpaFlags           #STR_ARR
wifiNetworks().rsnFlags           #STR_ARR

                                  ┌────────────────┐
                                  │   GPU/SCREEN   │
                                  └────────────────┘

graphics()->PROMISE_OBJ           #GPUs, screens. Uses:
                                  #  - Linux: lspci -vvv, xdpyinfo, dmidecode -t 9, xrandr --verbose
                                  #  - Mac: system_profiler SPDisplaysDataType
                                  #  - Windows:
                                  #     - wmic path win32_VideoController|desktopmonitor get /value
                                  #     - Get-CimInstance, System.Windows.Forms.Screen (PowerShell)
                                  #  - Raspberry PI: fbset -s, vcgencmd get_mem_gpu, tvservice -s|n
graphics().controllers            #GPUs. OBJ_ARR
graphics().controllers[*].vendor  #STR (e.g. "NVIDIA Corporation")
graphics().controllers[*].model   #STR (e.g. "GP106M [GeForce GTX 1060 Mobile] ")
graphics().controllers[*].bus    ##STR (e.g. "Onboard")
graphics().controllers[*].vram    #NUM|null (e.g. 32)
graphics().controllers[*]
 .vramDynamic                     #BOOL (e.g. false)

graphics().displays               #Screens. OBJ_ARR
graphics().displays[*].model      #STR (e.g. "Display")
graphics().displays[*].main       #BOOL (e.g. true)
graphics().displays[*].builtin    #BOOL (e.g. false)
graphics().displays[*].connection #STR (e.g. "DP-0")
graphics().displays[*].sizex      #NUM (e.g. 381)
graphics().displays[*].sizey      #NUM (e.g. 214)
graphics().displays[*].positionX  #NUM
graphics().displays[*].positionY  #NUM
graphics().displays[*].pixeldepth #NUM (e.g. 24)
graphics().displays[*].resolutionx#NUM (e.g. 1920)
graphics().displays[*].resolutiony#NUM (e.g. 1080)
graphics().displays[*].currentResX#NUM
graphics().displays[*].currentResY#NUM
graphics().displays[*].
 currentRefreshRate               #NUM

                                  ┌──────────┐
                                  │   TIME   │
                                  └──────────┘

time()->PROMISE_OBJ               #Time-related info.
time().current                    #DATE (now)
time().uptime                     #OS.uptime()
time().timezone                   #STR (e.g. 'GMT+0100')
time().timezoneName               #STR (e.g. 'Central European Standard Time')

                                  ┌─────────────┐
                                  │   BATTERY   │
                                  └─────────────┘

battery()->PROMISE_OBJ            #Device battery. Uses:
                                  #  - Linux: cat /sys/class/power_supply/BAT*/uevent
                                  #  - Mac: ioreg -n AppleSmartBattery -r | egrep "CycleCount|IsCharging|MaxCapacity|CurrentCapacity|BatterySerialNumber|TimeRemaining"; pmset -g batt | grep %
                                  #  - Windows: wmic Path Win32_Battery Get BatteryStatus, DesignCapacity, EstimatedChargeRemaining /value
                                  #  - *BSD: sysctl hw.acpi.battery hw.acpi.acline
battery().hasbattery              #BOOL (e.g. true)
battery().cyclecount              #NUM (e.g. 0)
battery().ischarging              #BOOL (e.g. true)
battery().maxcapacity             #NUM (e.g. 5600000)
battery().currentcapacity         #NUM (e.g. 944000)
battery().percent                 #NUM (e.g. 19)
battery().timeremaining           #NUM (e.g. 20)
battery().acconnected             #BOOL (e.g. true)
battery().type                    #STR (e.g. "Li-ion")
battery().model                   #STR (e.g. "BAT")
battery().manufacturer            #STR (e.g. "Notebook")
battery().serial                  #STR (e.g. "0001")

                                  ┌────────┐
                                  │   OS   │
                                  └────────┘

osInfo()->PROMISE_OBJ             #OS/distribution. Uses:
                                  #  - Linux: /etc/*-release, /usr/lib/os-release, /etc/openwrt_release
                                  #  - Mac|*BSD: sysctl kern.ostype kern.osrelease kern.osrevision kern.hostuuid
                                  #  - Mac: sw_vers
                                  #  - Solaris: uname -o
                                  #  - Windows: wmic os get /value
osInfo().platform                 #OS.platform()
osInfo().kernel                   #OS.release()
osInfo().arch                     #OS.arch()
osInfo().hostname                 #OS.hostname()
osInfo().distro                   #STR (e.g. 'Ubuntu')
osInfo().logofile                 #STR: normalized distro (e.g. 'ubuntu')
osInfo().release                  #STR (e.g. '18.10')
osInfo().codename                 #STR (e.g. 'cosmic')
osInfo().codepage                 #STR (e.g. 'UTF-8'). Uses:
                                  #  - Linux|Mac|*BSD: $LANG
                                  #  - Windows: chcp
osInfo().servicepack              #STR (Windows only)
osInfo().serial                   #STR
osInfo().build                    #STR (e.g. '18A391')

                                  ┌───────────────┐
                                  │   PROCESSES   │
                                  └───────────────┘

processes()->PROMISE_OBJ          #Processes. Uses:
                                  #  - Linux|Mac|*BSD|Solaris: ps -acxor, ps -o pid,ppid,vsz,rss,nice,etime,stat,tty,user,comm
                                  #  - Linux: cat /proc/stat
                                  #  - Windows: wmic process get /value
processes().all                   #NUM (e.g. 389)
processes().running               #NUM (e.g. 1)
processes().blocked               #NUM (e.g. 0)
processes().sleeping              #NUM (e.g. 290)
processes().unknown               #NUM (e.g. 0)
processes().list                  #OBJ_ARR
processes().list[*].pid           #NUM (e.g. 19171)
processes().list[*].parentPid     #NUM (e.g. 3810)
processes().list[*].name          #STR (e.g. "bash")
processes().list[*].pcpu          #NUM (e.g. 0)
processes().list[*].pcpuu         #NUM (e.g. 0)
processes().list[*].pcpus         #NUM (e.g. 0)
processes().list[*].pmem          #NUM (e.g. 0)
processes().list[*].priority      #NUM (e.g. 19)
processes().list[*].mem_vsz       #NUM (e.g. 23696)
processes().list[*].mem_rss       #NUM (e.g. 12992)
processes().list[*].nice          #NUM (e.g. 0)
processes().list[*].started       #STR (e.g. "2019-01-10 12:09:40")
processes().list[*].state         #STR (e.g. "sleeping")
processes().list[*].tty           #STR (e.g. "pts/4")
processes().list[*].user          #STR (e.g. "ether")
processes().list[*].command       #STR (e.g. "bash ARG")
processes().list[*].path          #STR (e.g. "bash")
processes().list[*].params        #STR (e.g. "ARG")

services('SERVICE,...')           #Daemons. Uses:
 ->PROMISE_OBJ                    #  - Linux|*BSD: service --status-all
                                  #  - Linux|Mac|*BSD: ps -caxo pcpu,pmem,pid,command, ps -o comm
                                  #  - Linux: cat /proc/stat
                                  #  - Windows: wmic service get /value
services('SERVICE').SERVICE.name  #STR (e.g. 'mongod')
services('SERVICE').SERVIC.running#BOOL
services('SERVICE').SRVC.startmode#STR
services('SERVICE').SERVICE.pids  #STR_ARR (e.g. ['8594', '8595'])
services('SERVICE').SERVICE.pcpu  #NUM (e.g. 11.40)
services('SERVICE').SERVICE.pmem  #NUM (e.g. 0.2)

processLoad('PROCESS_NAME')       #Processes CPU/MEM usage. Uses:
 ->PROMISE_OBJ                    #  - Linux|Mac: ps -axo
                                  #  - Linux: cat /proc/stat
                                  #  - Windows: wmic process get /value
processLoad('PROCESS').proc       #'PROCESS'
processLoad('PROCESS').pid        #NUM (e.g. 1562)
processLoad('PROCESS').cpu        #NUM (e.g. 0.5)
processLoad('PROCESS').mem        #NUM (e.g. 0.5)

                                  ┌───────────┐
                                  │   USERS   │
                                  └───────────┘

users()->PROMISE_OBJ_ARR          #Real users. Uses:
                                  #  - Linux|Mac|*BSD|Solaris: w, who
                                  #  - Windows: query user
users()[*].user                   #STR (e.g. "ether")
users()[*].tty                    #STR (e.g. ":1")
users()[*].date                   #STR (e.g. "2019-01-09")
users()[*].time                   #STR (e.g. "10:24")
users()[*].ip                     #STR (e.g. ":1")
users()[*].command                #STR (e.g. "/usr/lib/gdm3/gdm-x-session --run-script env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --session=ubuntu")

                                  ┌──────────────┐
                                  │   SOFTWARE   │
                                  └──────────────┘

shell()->PROMISE_STR              #STR (e.g. "/bin/bash")

versions()->PROMISE_OBJ           #Library versions.
versions().kernel                 #STR (e.g. "4.18.0-13-generic") using OS.release()
versions().node                   #STR (e.g. "11.6.0") using process.versions.node
versions().systemOpenSslLib       #STR (e.g. "OpenSSL") using `openssl version`
versions().systemOpenSsl          #STR (e.g. "1.1.1") using process.versions.openssl and `openssl vesion`
versions().v8                     #STR (e.g. "7.0.276.38-node.13") using process.versions.v8
versions().npm                    #STR (e.g. "6.5.0") using npm -v
versions().yarn                   #STR (e.g. "1.12.3") using yarn --version
versions().pm2                    #STR using pm2 -v
versions().gulp                   #STR using gulp --version
versions().grunt                  #STR using grunt --version
versions().git                    #STR (e.g. "2.19.1") using git --version (also checks XCode presence on Mac)
versions().tsc                    #STR using tsc --version
versions().mysql                  #STR using mysql -V
versions().redis                  #STR using redis-server --version
versions().mongodb                #STR (e.g. "4.0.5") using mongod --version
versions().nginx                  #STR using nginx -v
versions().php                    #STR (e.g. "7.1.19") using php -v
versions().docker                 #STR (e.g. "18.06.1-ce") using docker --version
versions().postfix                #STR (e.g. "3.2.2") using postconf -d | grep mail_version
versions().postgresql             #STR using postgres -V
versions().perl                   #STR (e.g. "5.26.2") using perl -v
versions().pip[3]                 #STR (e.g. "18.1") using pip[3] -V
versions().python[3]              #STR (e.g. "2.7.15+|3.6.7") using python[3] -V
versions().java                   #STR (e.g. "11.0.1") using java -version or (Mac) java_home -V
versions().gcc                    #STR (e.g. "8") using gcc -dumpversion|--version
versions().apache                 #STR using apachctl -v
versions().virtualbox             #STR using vboxmanage -v

                                  ┌────────────┐
                                  │   DOCKER   │
                                  └────────────┘

dockerContainers()->PROMISE_ARR   #Docker containers. Uses:
                                  #  - NET.createConnection() on '/var/run/docker.sock' (not Windows) or '\\.\pipe\docker_engine' (Windows)
                                  #  - run 'HTTP GET /containers/json'
dockerContainers()[*].id          #
dockerContainers()[*].name        #
dockerContainers()[*].image       #
dockerContainers()[*].imageID     #
dockerContainers()[*].command     #
dockerContainers()[*].created     #
dockerContainers()[*].state       #
dockerContainers()[*].ports       #
dockerContainers()[*].mounts      #
dockerContainers()[*].restartCount#
dockerContainers()[*].platform    #
dockerContainers()[*].driver      #
dockerContainers()[*].started     #
dockerContainers()[*].finished    #
dockerContainers()[*].createdAt   #
dockerContainers()[*].updatedAt   #
dockerContainers()[*].finishedAt  #

dockerContainerStats()            #Docker containers runtime info.
 ->PROMISE_OBJ                    #Uses: same but with 'HTTP GET /containers/ID/stats'
dockerContainerStats().mem_usage  #NUM
dockerContainerStats().mem_limit  #NUM
dockerContainerStats().mem_percent#NUM
dockerContainerStats().cpu_percent#NUM
dockerContainerStats().
 restartCount                     #NUM
dockerContainerStats().pids       #
dockerContainerStats().netIO      #
dockerContainerStats().blockIO    #
dockerContainerStats().cpu_stats  #
dockerContainerStats()
 .precpu_stats                    #
dockerContainerStats()
 .memory_stats                    #
dockerContainerStats().networks   #

dockerContainerProcesses()        #Processes inside Docker containers.
 ->PROMISE_ARR                    #Uses: same but with 'HTTP GET /containers/ID/top'
dockerContainerProcesses()[*].
 pid_host                         #
dockerContainerProcesses()[*].ppid#
dockerContainerProcesses()[*].pgid#
dockerContainerProcesses()[*].user#
dockerContainerProcesses()[*]
 .ruser                           #
dockerContainerProcesses()[*]
 .group                           #
dockerContainerProcesses()[*]
 .rgroup                          #
dockerContainerProcesses()[*].stat#
dockerContainerProcesses()[*].time#
dockerContainerProcesses()[*]
 .elapsed                         #
dockerContainerProcesses()[*].nice#
dockerContainerProcesses()[*].rss #
dockerContainerProcesses()[*].vsz #
dockerContainerProcesses()[*]
 .command                         #

dockerAll()->PROMISE_OBJ          #Uses dockerContainer() + dockerContainerStats() + dockerContainerProcesses()

dockerInfo()->PROMISE_OBJ         #
dockerInfo().ID                   #STR
dockerInfo().Containers           #NUM
dockerInfo().ContainersRunning    #NUM
dockerInfo().ContainersPaused     #NUM
dockerInfo().ContainersStopped    #NUM
dockerInfo().Images               #NUM
dockerInfo().Driver               #STR
dockerInfo().MemoryLimit          #BOOL
dockerInfo().SwapLimit            #BOOL
dockerInfo().KernelMemory         #BOOL
dockerInfo().CpuCfsPeriod         #BOOL
dockerInfo().CpuCfsQuota          #BOOL
dockerInfo().CPUShares            #BOOL
dockerInfo().CPUSet               #BOOL
dockerInfo().IPv4Forwarding       #BOOL
dockerInfo().BridgeNfIptables     #BOOL
dockerInfo().BridgeNfIp6tables    #BOOL
dockerInfo().Debug                #BOOL
dockerInfo().NFd                  #NUM
dockerInfo().OomKillDisable       #BOOL
dockerInfo().NGoroutines          #NUM
dockerInfo().SystemTime           #STR
dockerInfo().LoggingDriver        #STR
dockerInfo().CgroupDriver         #STR
dockerInfo().NEventsListener      #NUM
dockerInfo().KernelVersion        #STR
dockerInfo().OperatingSystem      #STR
dockerInfo().OSType               #STR
dockerInfo().Architecture         #STR
dockerInfo().NCPU                 #NUM
dockerInfo().MemTotal             #NUM
dockerInfo().DockerRootDir        #STR
dockerInfo().HttpProxy            #STR
dockerInfo().HttpsProxy           #STR
dockerInfo().NoProxy              #STR
dockerInfo().Name                 #STR
dockerInfo().Labels               #STR[]
dockerInfo().ExperimentalBuild    #BOOL
dockerInfo().ServerVersion        #STR
dockerInfo().ClusterStore         #STR
dockerInfo().ClusterAdvertise     #STR
dockerInfo().DefaultRuntime       #STR
dockerInfo().LiveRestoreEnabled   #BOOL
dockerInfo().Isolation            #STR
dockerInfo().InitBinary           #STR
dockerInfo().ProductLicense       #STR

                                  ┌────────────────┐
                                  │   VIRTUALBOX   │
                                  └────────────────┘

vboxInfo([BOOL])->PROMISE_OBJ     #Virtual box info, using vboxmanage
                                  #BOOL (def: false) is whether to include more info.
