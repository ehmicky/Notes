
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   MODERNIZR   ┃
                                  ┗━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                                #  - feature.js: less features
                                                #  - modernizr (prefer)

PRINCIPLE ==>                                   #  - Shim: add an unsupported API feature with plugin
                                                #  - Polyfill: JavaScript shim. e.g. add unsupported property by IE
                                                #  - Fallback:
                                                #     - instead of polyfill, add a simplified version of the feature
                                                #     - e.g. several CSS properties after another (ones not understood do not
                                                #       crash the engine)
                                                #     - only polyfill if important: best UX, but slower
                                                #Modernizr only test features, without doing user-agent sniffing.

VERSION ==>                                     #3.3.1
                                                #Can do custom builds with command line tool. Default build includes html5shiv
                                                #At loadtime:
                                                #  - tests each FEATURE
                                                #  - adds the following:
<html class="[no-]FEATURE">                     #For CSS selectors.
Modernizr.FEATURE[.SUBFEATURE]                  #BOOL. For JavaScript
Modernizr.on('FEATURE', FUNC(BOOL))             #For JavaScript

FEATURES ==>                                    #Check online doc

Modernizr.addTest("feature", BOOL[()])          #Create own FEATURE
Modernizr.addTest({ feature: BOOL[()] })        #Possible BOOL tests:
                                                #  - !!OBJ
                                                #  - OBJ && ( VAR in OBJ ) or VAR in createElement("TAG")
                                                #  - Modernizr.test[All]Props("cssProp")->BOOL:
                                                #     - check CSS prop exists
                                                #     - if "All", also check if prefixed version exists
                                                #  - Modernizr.hasEvent("EVENT"[, OBJ])->BOOL:
                                                #     - can OBJ.addEventListener("EVENT")
                                                #     - def OBJ: new <div>
                                                #  - Modernizr.atRule('@PROP')->BOOL:
                                                #     - can use CSS @PROP
Modernizr.testStyles("CSS", FUNC(ELEM, "CSS")   #Creates NUM (def: 1) ELEM <div id="ID"> (def: "modernizr[NUM]"), and appends
[, NUM[, "ID"_ARR]])                            #<style>CSS</style>

Modernizr.prefixed("jsOrCssProp"[, OBJ[, VAL]]) #Returns [PREFIX]STR for current browser (can be no PREFIX) (e.g. MozSTR), or
                                                #false if cannot find it.
                                                #If OBJ, look as OBJ property.
                                                #If VAL:
                                                #  - false: returns "jsOrCssProp", not OBJ.jsOrCssProp
                                                #  - VAL: returns OBJ.jsOrCssProp.bind(VAL)
Modernizr.prefixedCSS[Value](...)               #Same for CSS prop/value



