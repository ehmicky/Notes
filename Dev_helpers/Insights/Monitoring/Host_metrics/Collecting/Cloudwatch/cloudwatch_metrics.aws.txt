
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   CLOUDWATCH METRICS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2024-07-21

SUMMARY ==>                       #Metric: name, namespace, dimensions
                                  #Managed metrics: usage, quota
                                  #Metric data: single|histogram|aggregation, unit, timestamp, resolution
                                  #Simple query: time, aggregation, labels
                                  #Insight query: SQL-like, aggregation, dimensions filtering|grouping, sorting, slicing
                                  #Math query: math, undefined, time fields, bool logic
                                  #Search query: name|namespace|dimensions, tokenize, partial match, bool logic
                                  #Connectors: custom, CSV, RDS, Prometheus, OpenSearch
                                  #Aggregation: period, min|max, avg|sum|count, percentile [rank], outliers
                                  #Stream: Kinesis Firehose, all|filtered metrics, aggregation
                                  #Embedded metrics: logs, format, Node library, Lambda|EC2|ECS metadata

cdk-monitoring-constructs         #All the sections above named "... monitoring" are using it

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE_DOMAIN                    #'monitoring.amazonaws.com'

FORMAT ==>                        #Request: query parameter, with ?Action and ?Version, and ARR.members.NUM
                                  #Response: XML

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Req:
                                  #  - NextToken STR
                                  #  - MaxResults NUM (def: 100, max: 500)
                                  #     - except GetMetricData(): MaxDatapoints NUM (def: 1e5), based on METRIC_DATA_RES.Values length
                                  #Res: NextToken STR

THROTTLING ==>                    #ListMetrics(): 25/s (flexible)
                                  #PutMetricData(): 500/s (flexible)
                                  #GetMetricData():
                                  #  - 50 calls/s (flexible)
                                  #     - 10 calls/s if INSIGHT_QUERY
                                  #  - 4e5 DATAPOINT/s
                                  #     - twice less for DATAPOINTs in last 3h
                                  #     - 10 times more if INSIGHT_QUERY
                                  #GetMetricStatistics(): 400/s (flexible)

PRICING ==>                       #METRIC: 1$/3.33 custom METRICs
                                  #  - 3x cheaper after 1e4, 6x after 2.5e5, 15x after 1e6
                                  #API calls: 1$/1e5 calls
                                  #  - free: 1e6 calls/month
                                  #  - GetMetricData():
                                  #     - multiplied by numbers of METRICs requested
                                  #     - never free
                                  #AWS managed METRICs: free
                                  #  - only 10 free with high-Resolution
                                  #METRIC_STREAM: 1$/3e5 METRIC updates
                                  #  - multiplied by each 5 AdditionalStatistics
                                  #  - also cost of Kinesis

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

CloudWatchFullAccessV2            #AWS managed POLICY. Grants all CloudWatch PACTIONs: Metrics, Alarms, Dashboard, Logs, Observability
CloudWatchReadOnlyAccess          #Same but readonly

                                  ┌────────────┐
                                  │   METRIC   │
                                  └────────────┘

METRIC_LIST_REQ.MetricName
METRIC_LIST_REQ.Namespace
METRIC_LIST_REQ.Dimensions        #METRIC.*

METRIC_LIST.Metrics               #METRIC_ARR
METRIC                            #Timeseries, usually (but not necessarily):
                                  #  - about a AWS resource
                                  #  - measuring performance or availability (e.g. CPU usage)
                                  #Not logged with CloudTrail
METRIC.MetricName                 #'METRIC'
METRIC.Namespace                  #Prefixes 'METRIC', similar to a NAMEPATH

METRIC.Dimensions                 #DIMENSION_ARR
DIMENSION                         #Part of identifier, like MetricName|Namespace but:
                                  #  - has key + value
                                  #  - can have multiple
                                  #Cannot be omitted when identifying METRIC unless:
                                  #  - no other matching METRIC, i.e. no ambiguity
                                  #  - managed METRIC from some specific SERVICEs, like EC2
                                  #Max 30 per METRIC
DIMENSION.Name                    #'DVAR'
DIMENSION.Value                   #'DVAL'

METRIC_LIST_REQ.RecentlyActive    #Only METRICs with at least one METRIC_DATUM in last:
                                  #  - default: 2 weeks
                                  #  - 'PT3H': 3h

                                  ┌────────────────┐
                                  │   METRIC API   │
                                  └────────────────┘

ListMetrics()                     #Req: METRIC_LIST_REQ
                                  #Res: METRIC_LIST

                                  ┌────────────────┐
                                  │   METRIC IAC   │
                                  └────────────────┘

new Metric(OPTS)                  #CMETRIC. METRIC, with also related METRIC_DATUM.* (PERIOD, unit) and WIDGET info (label, color, account, region)
                                  #Is not a CSRESOURCE, not even a CONSTRUCT, i.e. does not create a RESOURCE
                                  #Instead, it is only used to simplify passing METRIC OBJs as arguments, e.g. to CloudWatch Alarms|Dashboard
CMETRIC.with(OPTS)->CMETRIC2      #

CKRESOURCE.metric                 #Like new Metric(OPTS) but already fills OPTS.metricName|namespace|dimensionsMap|account|region
 ('METRIC'[, OPTS])->CMETRIC      #For most CKRESOURCEs with METRICs
CKRESOURCE.metricMETRIC
 (OPTS)->CMETRIC                  #Same but also fills OPTS.metricName|statistic
SERVICEMetrics.METRICSTAT         #Underlying method used by CKRESOURCE.metricMETRIC()
 ([DOBJ])->CMETRIC_OPTS           #Returns CMETRIC_OPTS.namespace|metricName|statistic
                                  #If DOBJ, also returns OPTS.dimensionsMap DOBJ
                                  #Automatically generated for each AWS managed metrics
                                  #  - "canned metrics"
                                  #  - i.e. can be used for METRICs not available as CKRESOURCE.metricMETRIC(),
                                  #    which is manually generated instead

OPTS|CMETRIC[_STAT].metricName
OPTS|CMETRIC[_STAT].namespace     #METRIC.*
OPTS.dimensionsMap
CMETRIC.dimensions                #DOBJ
CMETRIC_STAT.dims                 #DIMENSION_ARR: name 'DVAR', value 'DVAL'

OPTS|CMETRIC[_STAT].account       #'ACCOUNT_ID', e.g. used in WIDGETs
OPTS|CMETRIC[_STAT].region        #'REGION', e.g. used in WIDGETs
CMETRIC.attachTo
 (CONSTRUCT)->CMETRIC2            #Set CMETRIC.account|region using CONTRUCT's CSTACK (unless agnostic)

                                  ┌───────────────────┐
                                  │   METRIC PULUMI   │
                                  └───────────────────┘

new XW.cloudwatch.Metric          #XMETRIC. Similar to CMETRIC but for Pulumi
 (OBJ[, REZ])                     #Combines METRIC|METRIC_DATUM|METRIC_ALARM|WOPTS, only their most used RPROPs.
                                  #Only in code: does not provision anything.
                                  #OBJ:
                                  #  - name|namespace|dimensions: like METRIC.*
                                  #  - unit: like METRIC_DATUM.*
                                  #  - period|statistic|extendedStatistic: like METRIC_ALARM.*
                                  #  - color|label|visible|yAxis: like WOPTS.*
XMETRIC.KEY                       #From OBJ.KEY, after defaults and validation
XMETRIC.withKEY(VAL)->XMETRIC     #Adds|merges XMETRIC.KEY VAL
XMETRIC.with(OBJ)->XMETRIC        #Same with multiple ones
XMETRIC.resource                  #REZ, used as ROPTS.parent when creating METRIC_ALARM

XW.SERVICE.metrics.METRIC         #Exposed by many SERVICEs.
 (OBJ)->XMETRIC                   #Wraps new XW.cloudwatch.Metric(OBJ), but with a given name|namespace|dimensions|unit
                                  #Not documented yet

                                  ┌───────────────────────────┐
                                  │   METRIC MONITORING IAC   │
                                  └───────────────────────────┘

CFACADE|CMONITORING
 .createMetricFactory()
 ->CMETRIC_FACTORY
new MetricFactory(PARENT_CONSTRUCT
 [, CMETRIC_FACTORY_OPTS])        #CMETRIC_FACTORY

CFACADE_OPTS.metricFactoryDefaults#OBJ: account|region|namespace|period
CMETRIC_FACTORY_OPTS              #Default CMETRIC_OPTS|CMATH_OPTS.* and CMATH_OPTS.searchAccount|searchRegion
 .globalDefaults                  #For account|region, def is same as PARENT_CONSTRUCT|CFACADE's CSTACK

CMETRIC_FACTORY                   #Like new Metric() but using positional arguments instead:
 .createMetric(...)->CMETRIC      #metricName, statistic, label, dimensionsMap, color, namespace, period, region, account

CMETRIC_FACTORY.toRate(ICMETRIC,  #CMETRIC is ICMETRIC but with CMETRIC.statistic 'Average' (already default value)
 RateComputationMethod.AVERAGE    #Also sets CMETRIC.label 'LABEL':
 [, BOOL])->CMETRIC               #  - depending on ICMETRIC.label:
                                  #     - STR -> 'STR (avg)'
                                  #     - undefined -> 'Rate (avg)'
                                  #  - if BOOL true (def: false), appends '(min: ${MIN}, max: ${MAX}, avg: ${AVG})'

                                  ┌─────────────┐
                                  │   MANAGED   │
                                  └─────────────┘

AWS MANAGED METRICS ==>           #Metrics automatically sent by many AWS SERVICEs
CUSTOM METRICS ==>                #Non-AWS managed METRIC

AWS/SERVICE                       #Namespace for most managed METRICs
                                  #Usually high timestamp resolution

AWS/Usage                         #Namespace for managed METRICs related to resource usage when limited by a quota
SERVICE_QUOTA(ARR)                #MATH_QUERY function returning ARR2. Quotas for a given resource.
                                  #ARR must be from a AWS/Usage/* METRIC
AWS/Usage/CallCount               #METRIC with resource usage
                                  #DVARs:
                                  #  - Service 'SERVICE'
                                  #  - Type 'API', Resource 'ACTION'
                                  #  - Type 'Resource', Resource 'ARN'
                                  #  - Class STR

                                  ┌─────────────────┐
                                  │   AGGREGATION   │
                                  └─────────────────┘

ISTAT                             #MIN|MAX|AVG|SUM|COUNT
                                  #Used by INSIGHT_QUERY and DEXPLORER.aggregateBy
ASTAT                             #Same but called Minimum, Maximum, Average, Sum, SampleCount
                                  #Used by AGGR_QUERY_REQ|METRIC_ALARM.Statistics, SIMPLE_QUERY.Stat
NSTAT                             #Like ASTAT, but no Average
                                  #Used by METRIC_DATUM.StatisticValues

EXTENDED STATISTICS ==>           #ESTAT|XSTAT cannot be used when DATAPOINTs:
                                  #  - are not single|discrete, i.e. were added by METRIC_DATUM.Values|StatisticValues
                                  #  - are negative
ESTAT                             #'pNUM' (percentile)
                                  #Used by AGGR_QUERY_REQ|METRIC_ALARM.ExtendedStatistics
XSTAT                             #ASTAT, ESTAT or one of:
                                  #  - TM(RANGE):
                                  #     - like Average but without outliers outside RANGE
                                  #     - "trimmed mean"
                                  #  - IQM:
                                  #     - same as TM(25%:75%)
                                  #     - "inter-quartile mean"
                                  #  - WM(RANGE):
                                  #     - like Average but outliers outside RANGE are clamped to min|max non-outliers
                                  #     - "Winsorized mean"
                                  #  - TC(RANGE):
                                  #     - like SampleCount but without outliers outside RANGE
                                  #     - "trimmed count"
                                  #  - TS(RANGE):
                                  #     - like Sum but without outliers outside RANGE
                                  #     - "trimmed sum"
                                  #  - PR(RANGE):
                                  #     - percentage of values within RANGE
                                  #     - "percentile rank"
                                  #  - tm|vm|tc|ts|prNUM: same as TM|VM|TC|TS|PR(:NUM%)
                                  #Used by METRIC_STREAM AdditionalStatistics, ${PROP('Stat')}, SEARCH(),
                                  #ANOMALY_DETECTOR.SingleMetricAnomalyDetector, DEXPLORER, WIDGET
RANGE                             #[NUM[%]]:[NUM2[%]]
                                  #Targets only values >NUM (def: min) and <=NUM2 (def: max)
                                  #If %, use percentiles instead

UNDEFINED ==>                     #A PERIOD with no METRIC_DATUM is aggregated to undefined
                                  #Also called "missing value"

                                  ┌─────────────────────┐
                                  │   AGGREGATION IAC   │
                                  └─────────────────────┘

Stats.MINIMUM|MAXIMUM|AVERAGE|SUM
 |SAMPLE_COUNT                    #'ASTAT'

Stats.IQM                         #'IQM'

Stats.percentile|p(NUM)->'pNUM'   #
Stats.trimmedMean|tm(NUM)->'tmNUM'#
Stats.trimmedMean|tm
 (NUM, NUM2)->'TM(NUM%:NUM2%)'    #
Stats.winsorizedMean|wm(...)->STR
Stats.trimmedCount|tc(...)->STR
Stats.trimmedSum|ts(...)->STR
Stats.percentileRank|pr(...)->STR #Same

                                  ┌──────────────┐
                                  │   DATA PUT   │
                                  └──────────────┘

NEW_METRIC_[E]DATA.MetricData     #METRIC_DATUM_ARR
                                  #Max 1e3, 1MB
                                  #Not logged with CloudTrail
METRIC_DATUM                      #1|n DATAPOINTs
                                  #If METRIC does not exist, creates it.
                                  #Kept for 15 months
DATAPOINT                         #Single value of a METRIC
                                  #1 datapoint with METRIC_DATUM.Value, multiple with METRIC_DATUM.Values|StatisticValues
                                  #To minimize number of requests, prefer the later, on a regular PERIOD

METRIC_DATUM.MetricName
NEW_METRIC_DATA.Namespace
METRIC_DATUM.Dimensions           #METRIC.*

METRIC_DATUM.Value                #NUM. Single DATAPOINT
METRIC_DATUM.Values|Counts        #NUM_ARR. Multiple DATAPOINTs, as histogram
                                  #Max 150
METRIC_DATUM.StatisticValues.NSTAT#NUM. Multiple DATAPOINTs, as aggregation

METRIC_DATUM.Unit                 #One of:
                                  #  - "[Micro|Milli]Seconds"
                                  #  - "Percent"
                                  #  - "Count[/Second]"
                                  #  - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
                                  #  - "None"

METRIC_DATUM.Timestamp            #DATE_NUM (def: now)
                                  #If >3h|24h ago, can take 2h|48h to show up
                                  #Min: 2 weeks earlier, max: 2h later
METRIC_DATUM.StorageResolution    #NUM of secs to round Timestamp.
                                  #Either 1s ("high") or 1m (def, "regular")
RESOLUTION                        #Timestamp rounding degrades with time:
                                  #  - before 3h: StorageResolution
                                  #  - after 3h: 1m
                                  #  - after 15d: 5m
                                  #  - after 63d: 1h

                                  ┌───────────────────┐
                                  │   DATA PUT AUTH   │
                                  └───────────────────┘

COND_KEY cloudwatch:namespace     #NEW_METRIC_DATA.Namespace. Only with PutMetricData()

                                  ┌──────────────────┐
                                  │   DATA PUT API   │
                                  └──────────────────┘

PutMetricData()                   #Req: NEW_METRIC_DATA
                                  #Res: X-Amzn-Failure-Message [S]

                                  ┌─────────────────────┐
                                  │   DATA PUT CONFIG   │
                                  └─────────────────────┘

ENVVAR
 AWS_DISABLE_REQUEST_COMPRESSION  #If true (def), compress HTTP request body with PutMetricData()
CONFIG.disable_request_compression#Uses Content-Encoding: gzip [C]

ENVVAR AWS_REQUEST_
 MIN_COMPRESSION_SIZE_BYTES
CONFIG.request_
 min_compression_size_bytes       #NUM (def: 10KB, min: 0, max: 10MB). Do not compress if lower

                                  ┌──────────────────┐
                                  │   DATA PUT SDK   │
                                  └──────────────────┘

COPTS.disableRequestCompression
COPTS
 .requestMinCompressionSizeBytes  #Like CONFIG.*

                                  ┌──────────────────┐
                                  │   DATA PUT IAC   │
                                  └──────────────────┘

CMETRIC_OPTS.statistic            #'XSTAT' (def: 'Average')
                                  #Can be case-insensitive
CMETRIC[_STAT].statistic          #Same but case-normalized. Also, if ISTAT -> ASTAT instead

CMETRIC[_OPTS].unit
CMETRIC_STAT.unitFilter           #STR. METRIC_DATUM.Unit

CMETRIC[_OPTS|STAT].period        #DURATION (def: 5m). PERIOD

Metric.grantPutMetricData
 (YGRANTABLE)->CGRANT             #Allow cloudwatch:PutMetricData on any RESOURCE

                                  ┌──────────────────┐
                                  │   DATA PUT SAM   │
                                  └──────────────────┘

CloudWatchPutMetricPolicy         #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION cloudwatch:PutMetricData
                                  #  - on Resource '*'

                                  ┌────────────┐
                                  │   ENTITY   │
                                  └────────────┘

NEW_METRIC_DATA.EntityMetricData  #NEW_METRIC_EDATA_ARR
                                  #METRIC_DATUMs with an associated TELEMETRY_ENTITY
                                  #Alternative to NEW_METRIC_DATA.MetricData, but can specify both too in same call
                                  #Max 2 items

NEW_METRIC_EDATA.Entity           #TELEMETRY_ENTITY. "Related telemetry". Like DIMENSIONs except:
                                  #  - strict static DVARs
                                  #  - DVALs target a RESOURCE
                                  #     - or a SERVICE, when no specific RESOURCE (e.g. S3 ListBuckets())
                                  #Also applies to CloudWatch logs (see its doc for LLEVENTS.entity)
                                  #If no log|metric with a given TELEMETRY_ENTITY in last 3h, cannot search it
                                  #Automatically set for metrics|logs sent by AWS services themselves
                                  #  - documented in their respective docs

TELEMETRY_ENTITY.KeyAttributes    #KEY_ATTRS. Required
                                  #Max 2KB values
KEY_ATTRS.Type                    #One of:
                                  #  - 'AWS::Resource': AWS RESOURCE
                                  #  - 'Resource': non-AWS RESOURCE
                                  #  - 'AWS::Service': AWS SERVICE
                                  #  - 'Service': non-AWS SERVICE, but hosted in AWS
                                  #  - 'RemoteService': non-AWS SERVICE, not hosted in AWS
KEY_ATTRS.ResourceType            #'RESTYPE'
                                  #Only with Type '*Resource'
KEY_ATTRS.Identifier              #PhysicalResourceId
                                  #If several, can set |-separated list
                                  #Only with Type '*Resource'
KEY_ATTRS.Name                    #'SERVICE'. If AWS, 'AWS::DynamoDB'. Else, 'ORIGIN' or name
                                  #Def: current 'ROLE'
                                  #Only with Type '*Service'
KEY_ATTRS.Environment             #STR, e.g. 'SERVICE.production'
                                  #Only with Type 'Service'

TELEMETRY_ENTITY.Attributes       #METRIC_ATTRS. Optional
                                  #Some METRIC_ATTRS are SERVICE-specific, documented in their respective docs
                                  #Max 10 items, max 2KB values
METRIC_ATTRS['AWS.Resource.ARN']  #RESOURCE's ARN
METRIC_ATTRS.PlatformType         #'SERVICE', like KEY_ATTRS.Name
METRIC_ATTRS.Host                 #'HOST'

NEW_METRIC_DATA                   #BOOL. Required when using NEW_METRIC_DATA.EntityMetricData
 .StrictEntityValidation          #If true, reject METRIC_DATUMs if NEW_METRIC_EDATA.Entity invalid
X-Amzn-Failure-Message: STR [S]   #Error 'CODE'
                                  #Only set if NEW_METRIC_DATA.StrictEntityValidation true

                                  ┌───────────────┐
                                  │   ENTITY UI   │
                                  └───────────────┘

EXPLORE RELATED ==>               #In UI, link metrics|logs to related RESOURCEs|SERVICEs
                                  #Also shows graph of their relations

                                  ┌─────────────────┐
                                  │   ENTITY AUTH   │
                                  └─────────────────┘

PACTION
 cloudwatch:ListEntitiesForMetric #Allows "Explore related" in UI

                                  ┌───────────┐
                                  │   QUERY   │
                                  └───────────┘

METRIC_DATA_REQS.MetricDataQueries#METRIC_DATA_REQ_ARR
                                  #Max 500
                                  #Max 1e4 METRICs being queried

METRIC_DATA_REQ|SIMPLE_QUERY      #PERIOD. NUM (in secs) (def: 1m).
 .Period                          #Granularity of result: each PERIOD returns a single value aggregating multiple DATAPOINTs
                                  #Must be a multiple of RESOLUTION
                                  #  - if RESOLUTION 1s, must be 1|5|10|30
                                  #Max: 1 day
METRIC_DATA_REQS.StartTime        #Matching METRIC_DATUM.Timestamp. Inclusive.
                                  #Rounded by PERIOD
                                  #Must be within last 3h if there is an INSIGHT_QUERY
METRIC_DATA_REQS.EndTime          #Matching METRIC_DATUM.Timestamp. Exclusive.
                                  #Rounded by PERIOD
METRIC_DATA_REQS.ScanBy           #'TimestampDescending' (def) or 'TimestampAscending'. Sorting order

METRIC_DATA_REQ.MetricStat        #SIMPLE_QUERY
                                  #Returns a single METRIC_DATA_RES
SIMPLE_QUERY.Metric               #METRIC
SIMPLE_QUERY.Stat                 #ASTAT applied on each PERIOD
SIMPLE_QUERY.Unit                 #Filter by METRIC_DATUM.Unit. Does not try to convert

METRIC_DATA_REQ.Expression        #'INSIGHT_QUERY|MATH_QUERY'. Advanced query
                                  #Cannot be used together with METRIC_DATA_REQ.MetricStat
                                  #Max 1 INSIGHT_QUERY per METRIC_DATA_REQS

METRIC_DATA_RESS.MetricDataResults#METRIC_DATA_RES_ARR
METRIC_DATA_RES                   #1 METRIC_DATA_REQ -> 1|n METRIC_DATA_RES depending on SIMPLE_QUERY|INSIGHT_QUERY|MATH_QUERY

METRIC_DATA_REQ|RES.Id            #'MVAR'
                                  #Either lowercase_underscored or camelCase
METRIC_DATA_RES.Values            #NUM_ARR. Each response value
METRIC_DATA_RES.Timestamps        #DATE_NUM_ARR. Same length as Values
METRIC_DATA_REQ.ReturnData        #BOOL (def: true).
                                  #If false, do not any return METRIC_DATA_RES, i.e. only used as input of another METRIC_DATA_REQ

METRIC_DATA_RES[S].Messages       #MESSAGE_DATA_ARR
MESSAGE_DATA                      #Error message
MESSAGE_DATA.Code                 #STR
MESSAGE_DATA.Value                #'MESSAGE'

METRIC_DATA_RES.StatusCode        #One of:
                                  #  - 'Complete': ok
                                  #  - 'PartialData': paginated
                                  #  - 'InternalError': error, but can retry
                                  #  - 'Forbidden': auth error

                                  ┌───────────────┐
                                  │   QUERY API   │
                                  └───────────────┘

GetMetricData()                   #Req: METRIC_DATA_REQS
                                  #Res: METRIC_DATA_RESS

                                  ┌───────────────────┐
                                  │   QUERY LOGGING   │
                                  └───────────────────┘

CLOUDTRAIL ==>                    #GetMetricData() is a CloudTrail DATA_EVENT

                                  ┌───────────────────────┐
                                  │   AGGREGATION QUERY   │
                                  └───────────────────────┘

AGGR_QUERY_REQ                    #Similar to METRIC_DATA_REQ using MetricStat, but simpler and can use ESTAT
AGGR_QUERY_RESS.Datapoints        #AGGR_QUERY_RES_ARR
                                  #Max 1440, otherwise error

AGGR_QUERY_REQ.MetricName
AGGR_QUERY_REQ.Namespace
AGGR_QUERY_REQ.Dimensions         #METRIC.*

AGGR_QUERY_REQ|RES.Unit           #Like SIMPLE_QUERY.*

AGGR_QUERY_REQ.Period             #Like METRIC_DATA_REQ.*
                                  #Each METRIC_DATA_RES aggregates multiple DATAPOINTs in a single PERIOD
AGGR_QUERY_REQ.StartTime|EndTime  #Like METRIC_DATA_REQS.*
AGGR_QUERY_RES.Timestamp          #'DATE'

AGGR_QUERY_REQ.Statistics         #'ASTAT'_ARR to populate in AGGR_QUERY_RES.*
AGGR_QUERY_RES.ASTAT              #NUM
AGGR_QUERY_REQ.ExtendedStatistics #'ESTAT'_ARR to populate in AGGR_QUERY_RES.ExtendedStatistics.*
                                  #Cannot be used with AGGR_QUERY_REQ.Statistics
                                  #Max 10
AGGR_QUERY_RES
 .ExtendedStatistics.ESTAT        #NUM

AGGR_QUERY_RESS.Label             #STR

                                  ┌───────────────────────────┐
                                  │   AGGREGATION QUERY API   │
                                  └───────────────────────────┘

GetMetricStatistics()             #Req: AGGR_QUERY_REQ
                                  #Res: AGGR_QUERY_RESS

                                  ┌────────────┐
                                  │   LABELS   │
                                  └────────────┘

METRIC_DATA_REQ|RES.Label         #LABEL. Description
                                  #Def: '${LABEL}'

METRIC_DATA_REQS                  #'+|-NNNN'. Timezone to use in ${*TIME*}
 .LabelOptions.Timezone           #Def: UTC

${...}                            #"Dynamic label"
                                  #Can be added to LABEL
                                  #Computed in each METRIC_DATA_RES, based on its Values|Timestamps ARR
                                  #Max 5 per Label

${LABEL}                          #Concatenates METRIC.Namespace|MetricName and DVAR|DVALs

${FIRST|LAST}                     #First|last value

${MIN|MAX}                        #
${SUM}                            #
${AVG}                            #
${DATAPOINT_COUNT}                #Length

${FIRST_LAST_RANGE}               #LAST - FIRST
${MIN_MAX_RANGE}                  #MAX - MIN

${FIRST|LAST_TIME}
${MIN|MAX_TIME}
${FIRST_LAST_TIME_RANGE}
${MIN|MAX_TIME_RANGE}             #Same but with timestamps

${FIRST|LAST_TIME_RELATIVE}
${MIN|MAX_TIME_RELATIVE}          #Same but with duration since timestamps

${PROP('Region')}                 #REGION

${PROP('MetricName')}             #'METRIC'
${PROP('Namespace')}              #NAMESPACE
${PROP('Dim.DVAR')}               #DVAL

${PROP('Period')}                 #PERIOD
${PROP('Stat')}                   #Current 'XSTAT'

                                  ┌────────────────┐
                                  │   LABELS IAC   │
                                  └────────────────┘

ICMETRIC[_OPTS|RENDER].label      #'LABEL'
CMETRIC.toString()->STR           #CMETRIC.label|metricName
CMATH.toString()->STR             #CMATH.label|expression

                                  ┌───────────────────┐
                                  │   INSIGHT QUERY   │
                                  └───────────────────┘

INSIGHT_QUERY                     #SQL-like expression to compute a query on METRIC_DATUMs
                                  #Returns ARR|ARR_ARR (one|multiple METRIC_DATA_RESs) depending on whether GROUP BY is used
                                  #Max 1e4 METRICs being matched
                                  #Syntax is following
                                  #Can be generated from AI prompts in the UI

SELECT ISTAT(NAME)                #Use METRIC with MetricName NAME and Namespace NAMESPACE
FROM NAMESPACE                    #Aggregate each PERIOD according to ISTAT
                                  #NAMESPACE can also be SCHEMA(NAMESPACE[, DVAR, ...])
                                  #  - same as NAMESPACE, but only for METRICs with exact same DVAR
                                  #  - must also have same number of DVARs, including none
WHERE DVAR [!]= DVAL [AND ...]    #Filter by DVAL
GROUP BY DVAR[, ...]              #Splits into multiple ARRs grouped by DVAR
                                  #Missing DVAR are named "Other"
ORDER BY ISTAT() [DESC|ASC]       #Sort ARRs created by GROUP BY
                                  #Def: ASC
LIMIT NUM                         #Only first NUM values
                                  #Def|max NUM: 500

QUOTING ==>                       #'-quote: around DVAL
                                  #"-quote:
                                  #  - around NAME|NAMESPACE|DVAR unless only [:alnum:]_ and not reserved word
                                  #  - reserved word: big list, documented online
                                  #\-escape: on ' " inside ' " quote

                                  ┌────────────────────────┐
                                  │   INSIGHT QUERY AUTH   │
                                  └────────────────────────┘

PACTION cloudwatch:GenerateQuery  #Allows generating INSIGHT_QUERYs from AI

                                  ┌────────────────┐
                                  │   MATH QUERY   │
                                  └────────────────┘

MATH_QUERY                        #DSL to compute a query on METRIC_DATUMs
                                  #While INSIGHT_QUERY is more focused on filtering|grouping|sorting|slicing,
                                  #MATH_QUERY is more focused on transforming and combining multiple METRICs|INSIGHT_QUERY
                                  #Return value must be either:
                                  #  - ARR: one METRIC_DATA_RES
                                  #  - ARR_ARR: multiple METRIC_DATA_RESs

MVAR                              #ARR. METRIC_DATA_RES with matching Id
mNUM                              #ARR. METRIC_DATA_RES number NUM

METRICS([STR])                    #ARR_ARR. All METRIC_DATA_RESs, except ones using MATH_QUERY
                                  #If STR, only ones with MVAR including STR
METRIC_COUNT(ARR_ARR)             #NUM. ARR_ARR.length

[NUM,...]                         #ARR
[ARR,...]                         #ARR_ARR
[ARR_ARR,...]                     #Concatenated ARR_ARR
VAL                               #NUM, ARR or ARR_ARR

BOOL                              #Actually 0|1
UNDEFINED ==>                     #Converted to 0
                                  #If division by 0, VAL ignored

VAL + - * / ^ VAL2                #VAL3
-VAL                              #VAL2
VAL == != <= >= < > VAL2          #VAL3
VAL && || VAL2                    #VAL3
VAL AND OR VAL2                   #Same

FIRST|LAST(ARR)                   #NUM

ABS(VAL)                          #VAL2
CEIL(VAL)                         #VAL2
FLOOR(VAL)                        #VAL2
LOG[10](VAL)                      #VAL2

MIN|MAX(ARR|ARR_ARR)              #VAL|ARR
SUM(ARR|ARR_ARR)                  #VAL|ARR
AVG(ARR|ARR_ARR)                  #VAL|ARR
STDDEV(ARR|ARR_ARR)               #VAL|ARR
DATAPOINT_COUNT(ARR|ARR_ARR)      #VAL|ARR. Length, after ARR_ARR flattening, excluding undefined

DIFF(ARR|ARR_ARR)                 #ARR|ARR_ARR. Difference with previous value.
DIFF_TIME(ARR|ARR_ARR)            #ARR|ARR_ARR. Difference with previous timestamp (in secs)
RATE(ARR|ARR_ARR)                 #ARR|ARR_ARR. Difference with previous value, divided by difference between timestamps (in secs)
RUNNING_SUM(ARR|ARR_ARR)          #ARR|ARR_ARR. Sum with all previous values

TIME_SERIES(NUM)                  #ARR of repeated value NUM
FILL(ARR|ARR_ARR, FILLER)         #ARR|ARR_ARR, but fills undefined according to FILLER:
                                  #  - NUM: repeated value
                                  #  - ARR: serial value
                                  #  - REPEAT: last non-undefined value
                                  #  - LINEAR: interpolation between last|next non-undefined value

SLICE(ARR_ARR, NUM[, NUM2])       #ARR_ARR, but only from index NUM (inclusive) to NUM2 (exclusive, def: end)
REMOVE_EMPTY(ARR_ARR)             #ARR_ARR, but without ARRs of length 0
SORT(ARR_ARR, FUNC,ASC|DESC[,NUM])#ARR_ARR, but sorted.
                                  #Sort using each FUNC(ARR) as key, with FUNC being MIN|MAX|SUM|AVG
                                  #If NUM, truncates to NUM values

PERIOD(ARR)                       #NUM. PERIOD
EPOCH(ARR)                        #ARR2. Timestamps of ARR, but converted to DATE_NUM
MINUTE(ARR)                       #ARR2. Timestamps of ARR, but only with the minute
HOUR(ARR)                         #Same with hour
DAY(ARR)                          #Same with day of the week
DATE(ARR)                         #Same with day of the month
MONTH(ARR)                        #Same with month
YEAR(ARR)                         #Same with year

IF(BOOL[_ARR],NUM|ARR[,NUM2|ARR2])#ARR3 with each element:
                                  #  - taken either from NUM|ARR or NUM2|ARR2
                                  #  - depending on BOOL[_ARR]
                                  #If some values are ARR and not others, scalar values are repeated
                                  #undefined in:
                                  #  - BOOL_ARR -> undefined
                                  #  - NUM|ARR -> 0
                                  #  - NUM2|ARR2 -> undefined
                                  #Def NUM2: undefined
                                  #Def ARR2: empty

                                  ┌────────────────────┐
                                  │   MATH QUERY IAC   │
                                  └────────────────────┘

new MathExpression(OPTS)          #CMATH. MATH_QUERY, with some related information (PERIOD, account|region, WIDGET label|color)
                                  #Like CMETRIC, is not a CONSTRUCT nor provisioned, but only meant as a helper to pass to other SERVICEs
CMATH.with(OPTS)->CMATH2          #

ICMETRIC                          #CMETRIC|CMATH
CMETRIC.toMetricConfig()->OBJ     #Different shape OBJ: metricStat CMETRIC_STAT, renderingProperties CMETRIC_RENDER
                                  #Meant to abstract difference between CMETRIC and CMATH
CMATH.toMetricConfig()->OBJ       #Different shape OBJ: mathExpression CMATH_STAT, renderingProperties CMATH_RENDER

OPTS|CMATH[_STAT].expression      #'MATH_QUERY'
OPTS|CMATH[_STAT]
 .usingMetrics.METRIC             #ICMETRIC. Each return value, i.e. each METRIC_DATA_RES
OPTS|CMATH[_STAT].period          #DURATION (def: 5m). PERIOD
                                  #Set to CMATH.usingMetrics.METRIC

OPTS|CMATH[_STAT].searchAccount   #'ACCOUNT_ID', e.g. used in WIDGETs
OPTS|CMATH[_STAT].searchRegion    #'REGION', e.g. used in WIDGETs

                                  ┌───────────────────────────────┐
                                  │   MATH QUERY MONITORING IAC   │
                                  └───────────────────────────────┘

CMETRIC_FACTORY                   #Like new MathExpression() but using positional arguments instead:
 .createMetricMath(...)->CMATH    #expression, usingMetrics, label, color, period, searchRegion, searchAccount

CMETRIC_FACTORY.toRate(ICMETRIC,  #Same as CMETRIC_FACTORY.toRate() above, but as a CMATH instead, using CMATH_OPTS:
 RateComputationMethod.AVERAGE,   #  - expression 'FILL(MVAR, 0)'
 BOOL, 'MVAR', true)->CMATH       #  - usingMetrics.MVAR CMETRIC (same as above)
                                  #  - color|period|searchRegion|searchAccount: like ICMETRIC
                                  #  - label 'LABEL' (same as above)

CMETRIC_FACTORY.multiplyMetric    #Uses CMATH_OPTS:
 (ICMETRIC, NUM, 'LABEL'[,'MVAR'])#  - expression 'NUM * MVAR'
 ->CMATH                          #  - usingMetrics.MVAR ICMETRIC
                                  #  - color|period|searchRegion|searchAccount: like ICMETRIC
                                  #  - label 'LABEL'
                                  #Def 'MVAR': 'm1'
CMETRIC_FACTORY.divideMetric(...)
 ->CMATH                          #Same with 'MVAR / NUM'

CMETRIC_FACTORY.toRate            #Uses CMATH_OPTS:
 (ICMETRIC, RateComputationMethod #  - expression '(MVAR * UNIT_NUM / PERIOD(MVAR))'
 .PER_SECOND|MINUTE|HOUR|DAY      #     - if BOOL2 true (def: false), use 'FILL(MVAR, 0)' instead
 [, BOOL[, 'MVAR'[, BOOL2]]])     #     - UNIT_NUM: 1|60|3600|86400
 ->CMATH                          #  - usingMetrics.MVAR ICMETRIC
                                  #  - color|period|searchRegion|searchAccount: like ICMETRIC
                                  #  - label 'LABEL':
                                  #     - depending on ICMETRIC.label:
                                  #        - 'Requests|Invocations|Transactions' -> 'TPS/UNIT'
                                  #        - STR -> 'STR/UNIT"
                                  #        - undefined -> 'Rate/UNIT'
                                  #     - UNIT is 's|m|h|d'
                                  #     - if BOOL true (def: false), appends '(min: ${MIN}, max: ${MAX})'
                                  #Def 'MVAR': 'm1'

                                  ┌──────────────────┐
                                  │   SEARCH QUERY   │
                                  └──────────────────┘

SEARCH('QUERY', 'XSTAT'[, PERIOD])#MATH_QUERY function returning ARR_ARR: METRICs mathing QUERY
                                  #QUERY: '[FILTERS] [TERMS]'
                                  #FILTERS: {NAMESPACE[, DVAR, ...]}
                                  #  - NAMESPACE: only METRICs with that Namespace
                                  #  - DVAR:
                                  #     - group METRICs by DVAL
                                  #     - STAT is applied on those groups
                                  #     - ignore METRICs without that DVAR
                                  #TERMS: list of TERM separated by:
                                  #  - space: same as AND
                                  #  - AND|OR|NOT
                                  #  - parenthesis
                                  #TERM: [TYPE=]["]...["]
                                  #  - include only METRICs with a matching MetricName|Namespace|DVAR|DVAL
                                  #  - unless "-quote:
                                  #     - partial match
                                  #     - tokenize with punctuation and camelCase
                                  #        - case insensitive, but only after tokenization
                                  #        - e.g. oneTwo -> oneTwo OR (one AND two)
                                  #           - oneTwo case-sensitive, one|two case-insensitive
                                  #  - can also use AND|OR|NOT|parenthesis in the value, e.g. TYPE = ("..." OR "...")
                                  #TYPE: value type among:
                                  #  - MetricName
                                  #  - Namespace
                                  #  - DVAR
                                  #"-quote:
                                  #  - required when using spaces or non-ASCII chars
                                  #  - must \-escape " \ ( )
                                  #Max 1e3 chars for QUERY

                                  ┌─────────────────────────────────┐
                                  │   SEARCH QUERY MONITORING IAC   │
                                  └─────────────────────────────────┘

CCSEARCH                          #CMATH + DMETRICS
                                  #To set to CCDMETRICS.metrics (see CloudWatch Dashboard doc)
                                  #CMATH uses CMATH_OPTS.expression "SEARCH('{NAMESPACE,DVAR,...} DVAR=VAL... TERMS', 'XSTAT', 'PERIOD')"
                                  #Also, fixes a current CDK bug when using SEARCH() + WIDGET with following workaround CMATH_OPTS:
                                  #  - usingMetrics {}
                                  #  - label default ' '
CCSEARCH.namespace                #'NAMESPACE'
CCSEARCH.dimensionsMap            #DOBJ
CCSEARCH.searchQuery              #'TERMS'
CCSEARCH.statistic                #'XSTAT'
CCSEARCH.label                    #'LABEL'. CMATH_OPTS.label
CCSEARCH.period                   #NUM. CMATH_OPTS.period
CCSEARCH.region                   #'REGION'. CMATH_OPTS.searchRegion
CCSEARCH.account                  #'ACCOUNT_ID'. CMATH_OPTS.searchAccount
CCSEARCH.position                 #'left' (def) or 'right'. Whether DMETRICS.left|right

CMETRIC_FACTORY                   #Like new MathExpression() but using positional arguments instead:
 .createMetricSearch(...)->CMATH  #query 'TERMS', dimensionsMap DOBJ, statistic 'XSTAT', namespace 'NAMESPACE', label, period, searchRegion, searchAccount
                                  #Used by CCSEARCH under-the-hood
                                  #Uses CMATH_OPTS:
                                  #  - expression "SEARCH('{NAMESPACE,DVAR,...} DVAR=VAL... TERMS', 'XSTAT', 'PERIOD')"
                                  #Also, fixes a current CDK bug when using SEARCH() + WIDGET with following workaround CMATH_OPTS:
                                  #  - usingMetrics {}
                                  #  - label default ' '

                                  ┌───────────────┐
                                  │   CONNECTOR   │
                                  └───────────────┘

LAMBDA('FUNCTION[:QUALIFIER]'     #MATH_QUERY function returning ARR_ARR
 [, ...ARGS])                     #Calls Lambda FUNC (CONNECTOR)
                                  #Goal: METRICs coming from an external source

LAMBDA FUNCTION ==>               #InvocationType 'RequestResponse'
                                  #Timeout 10s (4.5s if ALARM)
                                  #Must have TAG cloudwatch:datasource 'custom'

REQ.EventType                     #Either:
                                  #  - 'GetMetricData' (DATA_REQ|RES): called by LAMBDA()
                                  #  - 'DescribeGetMetricData' (MDATA_REQ|RES): metadata

DATA_REQ.GetMetricDataRequest     #DATA_REQQ
DATA_REQQ.Arguments               #ARGS_ARR passed to LAMBDA(). Max 20 items
DATA_REQQ.StartTime|EndTime       #DATE_NUM (in secs)
DATA_REQQ.Period                  #NUM (in secs, min 1m)

DATA_RES                          #Same as METRIC_DATA_RESS
[M]DATA_RES.Error                 #Same as MESSAGE_DATA

MDATA_REQ                         #None

MDATA_RES.DataSourceConnectorName #'NAME' to show in documentation
MDATA_RES.Description             #'MARKDOWN'. Documentation
MDATA_RES.ArgumentDefaults        #ARGS_ARR. Default values in UI

BUILT-IN CONNECTORS ==>           #Built-in ones:
                                  #  - CSV file on S3
                                  #  - RDS (SQL)
                                  #  - Prometheus (PromQL)
                                  #  - OpenSearch Service logs|traces
                                  #  - Azure Monitor
                                  #Created through the UI:
                                  #  - use a CloudFormation STACK provisioning Lambda FUNC, its ROLE, PERMISSION and LOG_GROUP
                                  #  - can associate a VPC

S3 CSV BUILT-IN CONNECTORS ==>    #Header: Timestamp, METRIC,...
                                  #Values: 'YYYY-MM-DDTHH:MM:SSZ', NUM,...

                                  ┌────────────────────┐
                                  │   CONNECTOR AUTH   │
                                  └────────────────────┘

PERMISSIONS ==>                   #Lambda FUNC must:
                                  #  - be assumable by lambda.datasource.cloudwatch.amazonaws.com
                                  #  - with COND_KEY aws:SourceAccount|SourceOrg*

                                  ┌────────────┐
                                  │   STREAM   │
                                  └────────────┘

METRIC_STREAM                     #Redirect all of an ACCOUNT's METRIC_DATUMs to a Kinesis FIREHOSE
                                  #Batch once per minute
                                  #Ignores METRICs if last METRIC_DATUM >2 days old
                                  #Can be sent out-of-order
                                  #Not logged with CloudTrail
METRIC_STREAM.Arn                 #METRIC_STREAM_ARN. 'arn:aws:cloudwatch:REGION:ACCOUNT_ID:metric-stream/METRIC_STREAM'
METRIC_STREAM.Name                #'METRIC_STREAM'
METRIC_STREAM.CreationDate        #'DATE'
METRIC_STREAM.LastUpdateDate      #'DATE'

METRIC_STREAM.FirehoseArn         #FIREHOSE_ARN

METRIC_STREAM.OutputFormat        #'json', 'opentelemetry0.7' or 'opentelemetry1.0'
                                  #See online doc for specific format

METRIC_STREAM.State               #'running' (def) or 'stopped'

METRIC_STREAM                     #METRIC_STREAM_FILTER_ARR
 .Include|ExcludeFilters          #Cannot use both IncludeFilters + ExcludeFilters
                                  #Max 1e4
METRIC_STREAM_FILTER              #Include|exclude METRICs with a given NAMESPACE
METRIC_STREAM_FILTER.Namespace    #NAMESPACE
METRIC_STREAM_FILTER.MetricNames  #'METRIC'_ARR

METRIC_STREAM
 .StatisticsConfigurations        #METRIC_STREAM_STAT_ARR
METRIC_STREAM_STAT                #Specify XSTATs to compute for specific METRICs
METRIC_STREAM_STAT                #'XSTAT'_ARR
 .AdditionalStatistics            #If OutputFormat 'opentelemetry0.7', can only use 'pNUM'
                                  #Always included: Min|Max|Sum|SampleCount
                                  #Max 20
METRIC_STREAM_STAT.IncludeMetrics #METRIC_STREAM_METRIC_ARR
                                  #Max 100
METRIC_STREAM_METRIC              #Specific METRIC targetted by METRIC_STREAM_STAT
METRIC_STREAM_METRIC.MetricName   #'METRIC'
METRIC_STREAM_METRIC.Namespace    #NAMESPACE

RESOURCE_TAGS.ResourceARN
RESOURCE_TAGS.Tags
METRIC_STREAM.Tags                #

QUICK SETUP ==>                   #In UI, sets up additional RESOURCEs to redirect from Kinesis to:
                                  #  - S3
                                  #  - third-party (Datadog, New Relic, Dynatrace, Splunk, SumoLogic)

                                  ┌─────────────────┐
                                  │   STREAM AUTH   │
                                  └─────────────────┘

METRIC_STREAM.RoleName            #'ROLE' assumed by FIREHOSE
                                  #ROLE must:
                                  #  - allow PACTIONs firehose:PutRecord[Batch]
                                  #  - have trust policy allowing Principal.Service 'streams.metrics.cloudwatch.amazonaws.com'
                                  #Current PRINCIPAL must have iam:PassRole PACTION

                                  ┌────────────────┐
                                  │   STREAM API   │
                                  └────────────────┘

PutMetricStream()                 #Req: METRIC_STREAM
                                  #  - no Arn, CreationDate, LastUpdateDate, State
                                  #  - RoleName -> RoleArn
                                  #Res: METRIC_STREAM
                                  #  - only Arn
StartMetricStreams()              #Req: METRIC_STREAM
                                  #  - only Name -> Names
                                  #Res: empty
                                  #Set METRIC_STREAM.State 'running'
StopMetricStreams()               #Req: METRIC_STREAM
                                  #  - only Name -> Names
                                  #Res: empty
                                  #Set METRIC_STREAM.State 'stopped'
GetMetricStream()                 #Req: METRIC_STREAM
                                  #  - only Name
                                  #Res: METRIC_STREAM
ListMetricStreams()               #Req: empty
                                  #Res: Entries METRIC_STREAM_ARR
                                  #  - no Include|ExcludeFilters, IncludeLinkedAccountsMetrics, RoleName, StatisticsConfigurations
DeleteMetricStream()              #Req: METRIC_STREAM
                                  #  - only Name
                                  #Res: empty

TagResource()
ListTagsForResource()
UntagResource()                   #AWS TAGS

                                  ┌────────────────┐
                                  │   STREAM IAC   │
                                  └────────────────┘

AWS::CloudWatch::MetricStream     #RESPROPs: Name, FirehoseArn, RoleArn ROLE_ARN, OutputFormat, IncludeFilters,
                                  #IncludeLinkedAccountsMetrics, ExcludeFilters, StatisticsConfigurations, Tags
                                  #RESATTRs: Arn, CreationDate, LastUpdateDate, State

                                  ┌────────────────────┐
                                  │   STREAM METRICS   │
                                  └────────────────────┘

AWS/CloudWatch/MetricStreams/*    #METRICs sent for METRIC_STREAM itself, with following names
MetricUpdate                      #NUM of METRIC_DATUMs updates
TotalMetricUpdate                 #MetricUpdate + NUM of groups of 5 AdditionalStatistics
PublishErrorRate                  #NUM% of unrecoverable errors sending to the FIREHOSE

DVAR MetricStreamName             #'METRIC_STREAM'
                                  #METRIC_STREAM is also sent as a METRIC_ENTITY

                                  ┌──────────────┐
                                  │   EMBEDDED   │
                                  └──────────────┘

EMBEDDED METRICS ==>              #CloudWatch Logs LLEVENT, where message is 'ROOT_JSON' with following format ("EMF")
                                  #Automatically calls PutMetricData() based on METRIC_DATUMs contained in log message
                                  #Goal: combining METRIC_DATUMs + LLEVENT
                                  #Difference with METRIC_FILTER: structured, i.e. producer specifies METRICs in LLEVENT directly

ROOT.*                            #Anything, i.e. actual message
ROOT.VARR                         #Can be used anywhere in ROOT._aws.** as dot-delimited 'VARR' value
ROOT._aws.Timestamp               #DATE_NUM

ROOT._aws.CloudWatchMetrics       #EMETRIC_META_ARR
EMETRIC_META.Namespace            #'NAMESPACE'

EMETRIC_META.Dimensions           #EDVARS_ARR. Each EDVARS creates a new METRIC (cartesian product)
                                  #Max 30
EDVARS                            #'DVAR'_ARR
                                  #Max 250
ROOT.DVAR                         #'DVAL'

EMETRIC_META.Metrics              #EMETRIC_ARR
                                  #Max 100
EMETRIC.Name                      #'METRIC'
ROOT.METRIC                       #NUM
                                  #Can also be NUM_ARR (max 100), which uses METRIC_DATUM.Values
EMETRIC.Unit|StorageResolution    #Like METRIC_DATUM.*. Optional

                                  ┌───────────────────┐
                                  │   EMBEDDED AUTH   │
                                  └───────────────────┘

CLOUDWATCH METRICS ==>            #METRICs sent for embedded metrics themselves

DVAR LogGroupName                 #'LOG_GROUP'

AWS/Logs/EMFParsingErrors         #NUM of LLEVENTs using invalid format for embedded metrics
AWS/Logs/EMFValidationErrors      #Same but with higher-level validation instead

                                  ┌──────────────────┐
                                  │   EMBEDDED SDK   │
                                  └──────────────────┘

CLIENT ==>                        #There are two possible clients (see their docs): @aws-lambda-powertools/metrics and aws-embedded-metrics

                                  ┌────────────────────┐
                                  │   EMBEDDED PROXY   │
                                  └────────────────────┘

CLOUDWATCH AGENT ==>              #TCP|UDP local daemon that forwards to CloudWatch Logs
                                  #Used by EC2 and ECS
ROOT._aws.logGroupName            #'LOG_GROUP'
ROOT._aws.logStreamName           #'LOG_STREAM'
