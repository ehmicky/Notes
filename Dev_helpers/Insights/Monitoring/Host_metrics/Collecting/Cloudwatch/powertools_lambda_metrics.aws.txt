
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POWERTOOLS_LAMBDA_METRICS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - aws-embedded-metrics (preferred on EC2 or ECS):
                                  #     - developed by AWS
                                  #     - has a Middy MIDWR
                                  #     - works on: locally, Lambda, EC2, ECS
                                  #     - also sends: RUNTIME, FUNC_VERSION.MemorySize|Version, 'LOG_GROUP', 'LOG_STREAM', X-Ray TraceId
                                  #  - @aws-lambda-powertools/metrics (preferred otherwise):
                                  #     - developed by AWS
                                  #     - simpler API
                                  #     - better Middy MIDWR
                                  #     - most maintained
                                  #     - works on: locally, Lambda
                                  #     - send ColdStart METRIC on FUNC_INSTANCE start

VERSION ==>                       #See AWS Lambda docs
                                  #Package '@aws-lambda-powertools/metrics'

                                  ┌──────────┐
                                  │   INIT   │
                                  └──────────┘

new Metrics([OPTS])               #MLOGGER

FUNC_VERSION
 .Environment.Variables.ENVVAR
process.env.ENVVAR                #Can use either to set ENVVARs

OPTS.customConfigService          #DOPTS. Dynamic OPTS

@MLOGGER.logMetrics([MOPTS])      #TypeScript DFUNC for the main HANDLER
                                  #Right away, calls:
                                  #  - MLOGGER.setThrowOnEmptyMetrics(MOPTS.throwOnEmptyMetrics) (def: false)
                                  #  - MLOGGER.setDefaultDimensions(MOPTS.defaultDimensions) (def: none)
                                  #At request start, calls:
                                  #  - MLOGGER.setFunctionName(NCONTEXT.functionName)
                                  #  - MLOGGER.captureColdStartMetric() if MOPTS.captureColdStartMetric true
                                  #At request end, calls:
                                  #  - MLOGGER.publishStoredMetrics()

logMetrics(MLOGGER[_ARR][, MOPTS])#Same but as Middy MDWR
 ->MIDDY_MDWR                     #cleanupMiddlewares() (see Middy doc) calls MLOGGER.publishStoredMetrics()
                                  #Imported from '@aws-lambda-powertools/metrics/middleware'

                                  ┌─────────────┐
                                  │   PUBLISH   │
                                  └─────────────┘

MLOGGER.publishStoredMetrics()    #Send METRICs using console.log(JSON.stringify(MLOGGER.serializeMetrics()))
                                  #Clears:
                                  #  - clearMetrics()
                                  #  - clearDimensions()
                                  #  - clearMetadata()
                                  #Does not clear:
                                  #  - 'NAMESPACE'
                                  #  - clearDefaultDimensions()
                                  #  - 'APP_NAME'
                                  #Automatically called by MLOGGER.addMetric() if >= max 100 ARR items in EMETRIC_META.Metrics or ROOT.METRIC

MLOGGER.serializeMetrics()
 ->ROOT_OBJ                       #Only one EMETRIC_META and one EMETRIC_META.Dimensions per serializeMetrics()

OPTS.singleMetric                 #BOOL (def: false). Calls publishStoredMetrics() after each MLOGGER.addMetric()
MLOGGER.singleMetric()->MLOGGER2  #MLOGGER2 uses OPTS.singleMetric true and re-uses MLOGGER's 'NAMESPACE', default DOBJ, 'APP_NAME'

ENVVAR POWERTOOLS_DEV=BOOL        #If false (def), discards any monkey patching on console.*
                                  #  - does so by using `node:console` under-the-hood
                                  #  - e.g. Lambda monkey patches console.* to prefix timestamp, REQ_ID and LEVEL
                                  #     - this is a problem since output is not JSON anymore then
                                  #     - i.e. should only be true in local development

                                  ┌─────────────┐
                                  │   METRICS   │
                                  └─────────────┘

OPTS.namespace
DOPTS.getNamespace()->'NAMESPACE'
ENVVAR
 POWERTOOLS_METRICS_NAMESPACE     #'NAMESPACE' (def: 'default_namespace')

MLOGGER.addDimensions(DOBJ)
MLOGGER.addDimension
 ('DVAR', 'DVAL')
MLOGGER.clearDimensions()         #DOBJ, per request
OPTS.defaultDimensions
MLOGGER.setDefaultDimensions(DOBJ)
MLOGGER.clearDefaultDimensions()  #DOBJ, per FUNC_INSTANCE

MLOGGER.addMetric('METRIC',       #Add a METRIC value
 'UNIT', NUM[_ARR][, NUM2])       #NUM2 is StorageResolution
                                  #Can send multiple values:
                                  #  - i.e. ROOT.METRIC will be ARR
                                  #  - either:
                                  #     - use NUM_ARR
                                  #     - call multiple times for same 'METRIC'
                                  #        - must be same 'UNIT'
MLOGGER.clearMetrics()            #
MLOGGER.setThrowOnEmptyMetrics
 (BOOL)                           #BOOL (def: false). Throw on serializeMetrics() without any addMetric()

MetricUnit.UNIT                   #'UNIT'
                                  #Same spelling, except /Second -> PerSecond and None -> NoUnit
MetricResolution.High|Standard    #1|60

MLOGGER.setTimestamp(DATE[_NUM])  #ROOT._aws.Timestamp (def: now)

MLOGGER.addMetadata('VAR', VAL)
MLOGGER.clearMetadata()           #Custom ROOT.*

OPTS.serviceName
DOPTS.getServiceName->'APP_NAME'
ENVVAR POWERTOOLS_SERVICE_NAME    #'APP_NAME' (def: 'service_undefined'). Used as default DVAR service

                                  ┌────────────────┐
                                  │   COLD START   │
                                  └────────────────┘

MLOGGER.captureColdStartMetric()  #On first usage (i.e. during cold start), publish a METRIC 'ColdStart' with UNIT 'Count' and NUM 1
                                  #It re-uses current 'NAMESPACE', default DOBJ and 'APP_NAME'
                                  #Is a noop after first usage, i.e. must be called only once per request
MLOGGER.setFunctionName
 ('FUNCTION')                     #Used as DVAR 'function_name', DVAL 'FUNCTION' on METRIC 'ColdStart'
