
                 
   STATSD-CLIENT  
                 



ALTERNATIVES ==>                  #  - statsd-client:
                                  #     - tags support
                                  #     - supports TCP|UDP|HTTP
                                  #  - hot-shots:
                                  #     - has a native module
                                  #     - most maintained
                                  #     - tags support
                                  #     - supports InfluxDB's telegraf syntax
                                  #     - supports dogstatsd "d" metrics, status checks, events
                                  #     - supports TCP|UDP|UDS|streams
                                  #     - can cache DNS (with UDP)
                                  #  - node-statsd: not maintained

VERSION ==>                       #0.4.7

new StatsdClient([OPTS])          #
CLIENT.close()                    #Close underlying socket

CLIENT.raw(STR)                   #Send raw statsd packets
CLIENT.counter
 ("MNAME", UINT[, TAGS])          #Send "c" metrics
CLIENT.increment
 ("MNAME"[, UINT[, TAGS]])        #Same as counter() except UINT def to 1
CLIENT.decrement
 ("MNAME"[, UINT[, TAGS]])        #Same as increment(), except use negative value
CLIENT.gauge
 ("MNAME", UINT[, TAGS])          #Send "g" metrics
CLIENT.gaugeDelta
 ("MNAME", UINT[, TAGS])          #Send "g" metrics prefixed with +|-
CLIENT.set
 ("MNAME", STR[, TAGS])           #Send "s" metrics
CLIENT.timing                     #Send "ms" metrics
 ("MNAME", NUM|DATE[, TAGS])      #If DATE, use Date.now() - DATE
CLIENT.histogram
 ("MNAME", UINT[, TAGS])          #Send "h" metrics
CLIENT.distribution
 ("MNAME", UINT[, TAGS])          #Send "d" metrics

OPTS.tags                         #TAGS merged to all.
TAGS                              #OBJ, added as "|#KEY:VAL,..."

OPTS.prefix                       #STR (def: ''). Prefix "STR." to all metrics MNAME
CLIENT.getChildClient(STR)
 ->CLIENT2                        #Clone CLIENT2 but appends STR to OPTS.prefix

                                  ┌────────────────┐
                                  │   TRANSPORTS   │
                                  └────────────────┘

UDP ==>                           #Default transport
OPTS.host                         #STR (def: 'localhost')
OPTS.port                         #STR (def: 8125)
OPTS.socketTimeout                #NUM (in ms, def: 1000). Buffer all packets and flush them every NUMms
                                  #If 0, only flushes on maxBufferSize
OPTS.maxBufferSize                #NUM (def: 1200). Force flushing if buffered more than NUM bytes
                                  #If 0, no buffering

TCP ==>                           #If OPTS.tcp true
OPTS.host
OPTS.port
OPTS.socketTimeout
OPTS.maxBufferSize                #Like UDP
OPTS.socketTimeoutsToClose        #NUM (def: 10). If nothing to flush for NUM successive flushes, close socket

HTTP ==>                          #When OPTS.host starts with "http[s]://"
                                  #Use PUT method
OPTS.host
OPTS.socketTimeout                #Like UDP
OPTS.maxBufferSize                #Like UDP but def 1e4
OPTS.headers                      #OBJ

                                  ┌─────────────┐
                                  │   HELPERS   │
                                  └─────────────┘

CLIENT.helpers.wrapCallback       #Wrap FUNC() so that when it called, before it is triggered, runs:
 (STR, FUNC(ERROR, ...)[, OPTS])  #  - CLIENT.increment("err|ok", 1) ("err" if ERROR)
 ->FUNC2                          #  - CLIENT.timing("time", UINT), where UINT is time spent since wrapCallback() was called
                                  #STR is OPTS.prefix

CLIENT.getExpressMiddleware       #Monkey patches RES.end() so it runs:
 (STR[, OPTS])->EXPR_MDW          #  - CLIENT.increment("response_code.STATUS")
                                  #  - CLIENT.timing("response_time", UINT)
                                  #STR is OPTS.prefix
OPTS.timeByUrl                    #BOOL (def: false).
                                  #Namespace metrics with route
OPTS.notFoundRouteName            #STR (def: 'unknown_express_route')
OPTS.onResponseEnd
 (CLIENT, UINT, REQ, RES)         #Called on RES end
