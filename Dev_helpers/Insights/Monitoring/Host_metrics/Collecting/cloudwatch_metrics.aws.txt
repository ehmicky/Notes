
                      
   CLOUDWATCH METRICS  
                      



VERSION ==>                       #2023-10-17

SUMMARY ==>                       #Metric: name, namespace, dimensions
                                  #Managed metrics: usage, quota
                                  #Metric data: single|histogram|aggregation, unit, timestamp, resolution
                                  #Simple query: time, aggregation, labels
                                  #Insight query: SQL-like, aggregation, dimensions filtering|grouping, sorting, slicing
                                  #Math query: math, undefined, time fields, bool logic
                                  #Search query: name|namespace|dimensions, tokenize, partial match, bool logic
                                  #Aggregation: period, min|max, avg|sum|count, percentile [rank], outliers
                                  #Stream: Kinesis Firehose, all|filtered metrics, aggregation
                                  #Embedded metrics: logs, format, Node library, Lambda|EC2|ECS metadata


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                    #'monitoring.amazonaws.com'

FORMAT ==>                        #Request: query parameter, with ?Action and ?Version, and ARR.members.NUM
                                  #Response: XML

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Req:
                                  #  - NextToken STR
                                  #  - MaxResults NUM (def: 100, max: 500)
                                  #     - except GetMetricData(): MaxDatapoints NUM (def: 1e5), based on METRIC_DATA_RES.Values length
                                  #Res: NextToken STR

THROTTLING ==>                    #ListMetrics(): 25/s (flexible)
                                  #PutMetricData(): 500/s (flexible)
                                  #GetMetricData():
                                  #  - 50 calls/s (flexible)
                                  #     - 10 calls/s if INSIGHT_QUERY
                                  #  - 4e5 DATAPOINT/s
                                  #     - twice less for DATAPOINTs in last 3h
                                  #     - 10 times more if INSIGHT_QUERY
                                  #GetMetricStatistics(): 400/s (flexible)

PRICING ==>                       #METRIC: 1$/3.33 custom METRICs
                                  #  - 3x cheaper after 1e4, 6x after 2.5e5, 15x after 1e6
                                  #API calls: 1$/1e5 calls
                                  #  - free: 1e6 calls/month
                                  #  - GetMetricData():
                                  #     - multiplied by numbers of METRICs requested
                                  #     - never free
                                  #AWS managed METRICs: free
                                  #  - only 10 free with high-Resolution
                                  #METRIC_STREAM: 1$/3e5 METRIC updates
                                  #  - multiplied by each 5 AdditionalStatistics
                                  #  - also cost of Kinesis

CloudWatchFullAccessV2            #AWS managed POLICY. Grants all CloudWatch PACTIONs: Metrics, Alarms, Dashboard, Logs, Observability
CloudWatchReadOnlyAccess          #Same but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListMetrics()                     #Req: METRIC_LIST_REQ
                                  #Res: METRIC_LIST

METRIC_LIST_REQ.MetricName
METRIC_LIST_REQ.Namespace
METRIC_LIST_REQ.Dimensions        #METRIC.*

METRIC_LIST.Metrics               #METRIC_ARR
METRIC                            #Timeseries, usually (but not necessarily):
                                  #  - about a AWS resource
                                  #  - measuring performance or availability (e.g. CPU usage)
                                  #Not logged with CloudTrail
METRIC.MetricName                 #'METRIC'
METRIC.Namespace                  #Prefixes 'METRIC', similar to a NAMEPATH

METRIC.Dimensions                 #DIMENSION_ARR
DIMENSION                         #Part of identifier, like MetricName|Namespace but:
                                  #  - has key + value
                                  #  - can have multiple
                                  #Cannot be omitted when identifying METRIC unless:
                                  #  - no other matching METRIC, i.e. no ambiguity
                                  #  - managed METRIC from some specific SERVICEs, like EC2
                                  #Max 30 per METRIC
DIMENSION.Name                    #'DVAR'
DIMENSION.Value                   #'DVAL'

METRIC_LIST_REQ.RecentlyActive    #Only METRICs with at least one METRIC_DATUM in last:
                                  #  - default: 2 weeks
                                  #  - 'PT3H': 3h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MANAGED            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS MANAGED METRICS ==>           #Metrics automatically sent by many AWS SERVICEs
CUSTOM METRICS ==>                #Non-AWS managed METRIC

AWS/SERVICE                       #Namespace for most managed METRICs
                                  #Usually high timestamp resolution

AWS/Usage                         #Namespace for managed METRICs related to resource usage when limited by a quota
SERVICE_QUOTA(ARR)                #MATH_QUERY function returning ARR2. Quotas for a given resource.
                                  #ARR must be from a AWS/Usage/* METRIC
AWS/Usage/CallCount               #METRIC with resource usage
                                  #DVARs:
                                  #  - Service 'SERVICE'
                                  #  - Type 'API', Resource 'ACTION'
                                  #  - Type 'Resource', Resource 'ARN'
                                  #  - Class STR

new XW.cloudwatch.Metric         ##Pulumi XMETRIC. Combines METRIC|METRIC_DATUM|METRIC_ALARM|WOPTS, only their most used RPROPs.
 (OBJ[, REZ])                    ##Only in code: does not provision anything.
                                 ##OBJ:
                                 ##  - name|namespace|dimensions: like METRIC.*
                                 ##  - unit: like METRIC_DATUM.*
                                 ##  - period|statistic|extendedStatistic: like METRIC_ALARM.*
                                 ##  - color|label|visible|yAxis: like WOPTS.*
                                 ##Not very useful
XMETRIC.KEY                      ##From OBJ.KEY, after defaults and validation
XMETRIC.withKEY(VAL)->XMETRIC    ##Adds|merges XMETRIC.KEY VAL
XMETRIC.with(OBJ)->XMETRIC       ##Same with multiple ones
XMETRIC.resource                 ##REZ, used as ROPTS.parent when creating METRIC_ALARM

XW.SERVICE.metrics.METRIC        ##With Pulumi, exposed by many SERVICEs.
 (OBJ)->XMETRIC                  ##Wraps new XW.cloudwatch.Metric(OBJ), but with a given name|namespace|dimensions|unit
                                 ##Not documented because not very useful


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AGGREGATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ISTAT                             #MIN|MAX|AVG|SUM|COUNT
                                  #Used by INSIGHT_QUERY and DEXPLORER.aggregateBy
ASTAT                             #Same but called Minimum, Maximum, Average, Sum, SampleCount
                                  #Used by AGGR_QUERY_REQ|METRIC_ALARM.Statistics, SIMPLE_QUERY.Stat
NSTAT                             #Like ASTAT, but no Average
                                  #Used by METRIC_DATUM.StatisticValues

EXTENDED STATISTICS ==>           #ESTAT|XSTAT cannot be used when DATAPOINTs:
                                  #  - are not single|discrete, i.e. were added by METRIC_DATUM.Values|StatisticValues
                                  #  - are negative
ESTAT                             #'pNUM' (percentile)
                                  #Used by AGGR_QUERY_REQ|METRIC_ALARM.ExtendedStatistics
XSTAT                             #ASTAT, ESTAT or one of:
                                  #  - 'pNUM': percentile
                                  #  - TM(RANGE):
                                  #     - like Average but without outliers outside RANGE
                                  #     - "trimmed mean"
                                  #  - IQM:
                                  #     - same as TM(25%:75%)
                                  #     - "inter-quartile mean"
                                  #  - WM(RANGE):
                                  #     - like Average but outliers outside RANGE are clamped to min|max non-outliers
                                  #     - "Winsorized mean"
                                  #  - TC(RANGE):
                                  #     - like SampleCount but without outliers outside RANGE
                                  #     - "trimmed count"
                                  #  - TS(RANGE):
                                  #     - like Sum but without outliers outside RANGE
                                  #     - "trimmed sum"
                                  #  - PR(RANGE):
                                  #     - percentage of values within RANGE
                                  #     - "percentile rank"
                                  #  - tm|vm|tc|ts|prNUM: same as TM|VM|TC|TS|PR(:NUM%)
                                  #Used by METRIC_STREAM AdditionalStatistics, ${PROP('Stat')}, SEARCH(),
                                  #ANOMALY_DETECTOR.SingleMetricAnomalyDetector, DEXPLORER, WIDGET
RANGE                             #[NUM[%]]:[NUM2[%]]
                                  #Targets only values >NUM (def: min) and <=NUM2 (def: max)
                                  #If %, use percentiles instead

UNDEFINED ==>                     #A PERIOD with no METRIC_DATUM is aggregated to undefined
                                  #Also called "missing value"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DATA PUT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricData()                   #Req: METRIC_DATA
                                  #Res: empty

METRIC_DATA.MetricData            #METRIC_DATUM_ARR
                                  #Max 1e3, 1MB
                                  #Not logged with CloudTrail
METRIC_DATUM                      #1|n DATAPOINTs
                                  #If METRIC does not exist, creates it.
                                  #Kept for 15 months
DATAPOINT                         #Single value of a METRIC
                                  #1 datapoint with METRIC_DATUM.Value, multiple with METRIC_DATUM.Values|StatisticValues
                                  #To minimize number of requests, prefer the later, on a regular PERIOD

METRIC_DATUM.MetricName
METRIC_DATA.Namespace
METRIC_DATUM.Dimensions           #METRIC.*
COND_KEY cloudwatch:namespace     #METRIC_DATA.Namespace. Only with PutMetricData()

METRIC_DATUM.Value                #NUM. Single DATAPOINT
METRIC_DATUM.Values|Counts        #NUM_ARR. Multiple DATAPOINTs, as histogram
                                  #Max 150
METRIC_DATUM.StatisticValues.NSTAT#NUM. Multiple DATAPOINTs, as aggregation

METRIC_DATUM.Unit                 #One of:
                                  #  - "[Micro|Milli]Seconds"
                                  #  - "Percent"
                                  #  - "Count[/Second]"
                                  #  - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
                                  #  - "None"

METRIC_DATUM.Timestamp            #DATE_NUM (def: now)
                                  #If >3h|24h ago, can take 2h|48h to show up
                                  #Min: 2 weeks earlier, max: 2h later
METRIC_DATUM.StorageResolution    #NUM of secs to round Timestamp.
                                  #Either 1s ("high") or 1m (def, "regular")
RESOLUTION                        #Timestamp rounding degrades with time:
                                  #  - before 3h: StorageResolution
                                  #  - after 3h: 1m
                                  #  - after 15d: 5m
                                  #  - after 63d: 1h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             QUERY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricData()                   #Req: METRIC_DATA_REQS
                                  #Res: METRIC_DATA_RESS

METRIC_DATA_REQS.MetricDataQueries#METRIC_DATA_REQ_ARR
                                  #Max 500
                                  #Max 1e4 METRICs being queried

METRIC_DATA_REQ|SIMPLE_QUERY      #PERIOD. NUM (in secs) (def: 1m).
 .Period                          #Granularity of result: each PERIOD returns a single value aggregating multiple DATAPOINTs
                                  #Must be a multiple of RESOLUTION
                                  #  - if RESOLUTION 1s, must be 1|5|10|30
                                  #Max: 1 day
METRIC_DATA_REQS.StartTime        #Matching METRIC_DATUM.Timestamp. Inclusive.
                                  #Rounded by PERIOD
                                  #Must be within last 3h if there is a INSIGHT_QUERY
METRIC_DATA_REQS.EndTime          #Matching METRIC_DATUM.Timestamp. Exclusive.
                                  #Rounded by PERIOD
METRIC_DATA_REQS.ScanBy           #'TimestampDescending|TimestampAscending'. Sorting order

METRIC_DATA_REQ.MetricStat         #SIMPLE_QUERY
                                   #Returns a single METRIC_DATA_RES
SIMPLE_QUERY.Metric                #METRIC
SIMPLE_QUERY.Stat                  #ASTAT applied on each PERIOD
SIMPLE_QUERY.Unit                  #Filter by METRIC_DATUM.Unit. Does not try to convert

METRIC_DATA_REQ.Expression        #'INSIGHT_QUERY|MATH_QUERY'. Advanced query
                                  #Cannot be used together with METRIC_DATA_REQ.MetricStat
                                  #Max 1 INSIGHT_QUERY per METRIC_DATA_REQS

METRIC_DATA_RESS.MetricDataResults#METRIC_DATA_RES_ARR
METRIC_DATA_RES                   #1 METRIC_DATA_REQ -> 1|n METRIC_DATA_RES depending on SIMPLE_QUERY|INSIGHT_QUERY|MATH_QUERY

METRIC_DATA_REQ|RES.Id            #'MVAR'
                                  #Either lowercase_underscored or camelCase
METRIC_DATA_RES.Values            #NUM_ARR. Each response value
METRIC_DATA_RES.Timestamps        #DATE_NUM_ARR. Same length as Values
METRIC_DATA_REQ.ReturnData        #BOOL (def: true).
                                  #If false, do not any return METRIC_DATA_RES, i.e. only used as input of another METRIC_DATA_REQ

METRIC_DATA_RES[S].Messages       #MESSAGE_DATA_ARR
MESSAGE_DATA                      #Error message
MESSAGE_DATA.Code                 #STR
MESSAGE_DATA.Value                #'MESSAGE'

METRIC_DATA_RES.StatusCode        #One of:
                                  #  - 'Complete': ok
                                  #  - 'PartialData': paginated
                                  #  - 'InternalError': error, but can retry
                                  #  - 'Forbidden': auth error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AGGREGATION QUERY       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricStatistics()             #Req: AGGR_QUERY_REQ
                                  #Res: AGGR_QUERY_RESS

AGGR_QUERY_REQ                    #Similar to METRIC_DATA_REQ using MetricStat, but simpler and can use ESTAT
AGGR_QUERY_RESS.Datapoints        #AGGR_QUERY_RES_ARR
                                  #Max 1440, otherwise error

AGGR_QUERY_REQ.MetricName
AGGR_QUERY_REQ.Namespace
AGGR_QUERY_REQ.Dimensions         #METRIC.*

AGGR_QUERY_REQ|RES.Unit           #Like SIMPLE_QUERY.*

AGGR_QUERY_REQ.Period             #Like METRIC_DATA_REQ.*
                                  #Each METRIC_DATA_RES aggregates multiple DATAPOINTs in a single PERIOD
AGGR_QUERY_REQ.StartTime|EndTime  #Like METRIC_DATA_REQS.*
AGGR_QUERY_RES.Timestamp          #'DATE'

AGGR_QUERY_REQ.Statistics         #'ASTAT'_ARR to populate in AGGR_QUERY_RES.*
AGGR_QUERY_RES.ASTAT              #NUM
AGGR_QUERY_REQ.ExtendedStatistics #'ESTAT'_ARR to populate in AGGR_QUERY_RES.ExtendedStatistics.*
                                  #Cannot be used with AGGR_QUERY_REQ.Statistics
                                  #Max 10
AGGR_QUERY_RES
 .ExtendedStatistics.ESTAT        #NUM

AGGR_QUERY_RESS.Label             #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LABELS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_DATA_REQ|RES.Label         #LABEL. Description
                                  #Def: '${LABEL}'

METRIC_DATA_REQS                  #'+|-NNNN'. Timezone to use in ${*TIME*}
 .LabelOptions.Timezone           #Def: UTC

${...}                            #"Dynamic label"
                                  #Can be added to LABEL
                                  #Computed in each METRIC_DATA_RES, based on its Values|Timestamps ARR
                                  #Max 5 per Label

${LABEL}                          #Concatenates METRIC.Namespace|MetricName and DVAR|DVALs

${FIRST|LAST}                     #First|last value

${MIN|MAX}                        #
${SUM}                            #
${AVG}                            #
${DATAPOINT_COUNT}                #Length

${FIRST_LAST_RANGE}               #LAST - FIRST
${MIN_MAX_RANGE}                  #MAX - MIN

${FIRST|LAST_TIME}
${MIN|MAX_TIME}
${FIRST_LAST_TIME_RANGE}
${MIN|MAX_TIME_RANGE}             #Same but with timestamps

${FIRST|LAST_TIME_RELATIVE}
${MIN|MAX_TIME_RELATIVE}          #Same but with duration since timestamps

${PROP('Region')}                 #REGION

${PROP('MetricName')}             #'METRIC'
${PROP('Namespace')}              #NAMESPACE
${PROP('Dim.DVAR')}               #DVAL

${PROP('Period')}                 #PERIOD
${PROP('Stat')}                   #Current 'XSTAT'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT QUERY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INSIGHT_QUERY                     #SQL-like expression to compute a query on METRIC_DATUMs
                                  #Returns ARR|ARR_ARR (one|multiple METRIC_DATA_RESs) depending on whether GROUP BY is used
                                  #Max 1e4 METRICs being matched
                                  #Syntax follows

SELECT ISTAT(NAME)                #Use METRIC with MetricName NAME and Namespace NAMESPACE
FROM NAMESPACE                    #Aggregate each PERIOD according to ISTAT
                                  #NAMESPACE can also be SCHEMA(NAMESPACE[, DVAR, ...])
                                  #  - same as NAMESPACE, but only for METRICs with exact same DVAR
                                  #  - must also have same number of DVARs, including none
WHERE DVAR [!]= DVAL [AND ...]    #Filter by DVAL
GROUP BY DVAR[, ...]              #Splits into multiple ARRs grouped by DVAR
                                  #Missing DVAR are named "Other"
ORDER BY ISTAT() [DESC|ASC]       #Sort ARRs created by GROUP BY
                                  #Def: ASC
LIMIT NUM                         #Only first NUM values
                                  #Def|max NUM: 500

QUOTING ==>                       #'-quote: around DVAL
                                  #"-quote:
                                  #  - around NAME|NAMESPACE|DVAR unless only [:alnum:]_ and not reserved word
                                  #  - reserved word: big list, documented online
                                  #\-escape: on ' " inside ' " quote


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MATH QUERY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATH_QUERY                        #DSL to compute a query on METRIC_DATUMs
                                  #While INSIGHT_QUERY is more focused on filtering|grouping|sorting|slicing,
                                  #MATH_QUERY is more focused on transforming and combining multiple METRICs|INSIGHT_QUERY
                                  #Return value must be either:
                                  #  - ARR: one METRIC_DATA_RES
                                  #  - ARR_ARR: multiple METRIC_DATA_RESs

MVAR                              #ARR. METRIC_DATA_RES with matching Id
mNUM                              #ARR. METRIC_DATA_RES number NUM

METRICS([STR])                    #ARR_ARR. All METRIC_DATA_RESs, except ones using MATH_QUERY
                                  #If STR, only ones with MVAR including STR
METRIC_COUNT(ARR_ARR)             #NUM. ARR_ARR.length

[NUM,...]                         #ARR
[ARR,...]                         #ARR_ARR
[ARR_ARR,...]                     #Concatenated ARR_ARR
VAL                               #NUM, ARR or ARR_ARR

BOOL                              #Actually 0|1
UNDEFINED ==>                     #Converted to 0
                                  #If division by 0, VAL ignored

VAL + - * / ^ VAL2                #VAL3
-VAL                              #VAL2
VAL == != <= >= < > VAL2          #VAL3
VAL && || VAL2                    #VAL3
VAL AND OR VAL2                   #Same

FIRST|LAST(ARR)                   #NUM

ABS(VAL)                          #VAL2
CEIL(VAL)                         #VAL2
FLOOR(VAL)                        #VAL2
LOG[10](VAL)                      #VAL2

MIN|MAX(ARR|ARR_ARR)              #VAL|ARR
SUM(ARR|ARR_ARR)                  #VAL|ARR
AVG(ARR|ARR_ARR)                  #VAL|ARR
STDDEV(ARR|ARR_ARR)               #VAL|ARR
DATAPOINT_COUNT(ARR|ARR_ARR)      #VAL|ARR. Length, after ARR_ARR flattening, excluding undefined

DIFF(ARR|ARR_ARR)                 #ARR|ARR_ARR. Difference with previous value.
DIFF_TIME(ARR|ARR_ARR)            #ARR|ARR_ARR. Difference with previous timestamp (in secs)
RATE(ARR|ARR_ARR)                 #ARR|ARR_ARR. Difference with previous value, divided by difference between timestamps (in secs)
RUNNING_SUM(ARR|ARR_ARR)          #ARR|ARR_ARR. Sum with all previous values

TIME_SERIES(NUM)                  #ARR of repeated value NUM
FILL(ARR|ARR_ARR, FILLER)         #ARR|ARR_ARR, but fills undefined according to FILLER:
                                  #  - NUM: repeated value
                                  #  - ARR: serial value
                                  #  - REPEAT: last non-undefined value
                                  #  - LINEAR: interpolation between last|next non-undefined value

SLICE(ARR_ARR, NUM[, NUM2])       #ARR_ARR, but only from index NUM (inclusive) to NUM2 (exclusive, def: end)
REMOVE_EMPTY(ARR_ARR)             #ARR_ARR, but without ARR of length 0
SORT(ARR_ARR, FUNC,ASC|DESC[,NUM])#ARR_ARR, but sorted.
                                  #Sort using each FUNC(ARR) as key, with FUNC being MIN|MAX|SUM|AVG
                                  #If NUM, truncates to NUM values

PERIOD(ARR)                       #NUM. PERIOD
EPOCH(ARR)                        #ARR2. Timestamps of ARR, but converted to DATE_NUM
MINUTE(ARR)                       #ARR2. Timestamps of ARR, but only with the minute
HOUR(ARR)                         #Same with hour
DAY(ARR)                          #Same with day of the week
DATE(ARR)                         #Same with day of the month
MONTH(ARR)                        #Same with month
YEAR(ARR)                         #Same with year

IF(BOOL[_ARR],NUM|ARR[,NUM2|ARR2])#ARR3 with each element:
                                  #  - taken either from NUM|ARR or NUM2|ARR2
                                  #  - depending on BOOL[_ARR]
                                  #If some values are ARR and not others, scalar values are repeated
                                  #undefined in:
                                  #  - BOOL_ARR -> undefined
                                  #  - NUM|ARR -> 0
                                  #  - NUM2|ARR2 -> undefined
                                  #Def NUM2: undefined
                                  #Def ARR2: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SEARCH QUERY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH('QUERY', 'XSTAT')          #MATH_QUERY function returning ARR_ARR: METRICs mathing QUERY
                                  #QUERY: '[FILTERS] [TERMS]'
                                  #FILTERS: {NAMESPACE[, DVAR, ...]}
                                  #  - NAMESPACE: only METRICs with that Namespace
                                  #  - DVAR:
                                  #     - group METRICs by DVAL
                                  #     - STAT is applied on those groups
                                  #     - ignore METRICs without that DVAR
                                  #TERMS: list of TERM separated by:
                                  #  - space: same as AND
                                  #  - AND|OR|NOT
                                  #  - parenthesis
                                  #TERM: [TYPE=]["]...["]
                                  #  - include only METRICs with a matching MetricName|Namespace|DVAR|DVAL
                                  #  - unless "-quote:
                                  #     - partial match
                                  #     - tokenize with punctuation and camelCase
                                  #        - case insensitive, but only after tokenization
                                  #        - e.g. oneTwo -> oneTwo OR (one AND two)
                                  #           - oneTwo case-sensitive, one|two case-insensitive
                                  #  - can also use AND|OR|NOT|parenthesis in the value, e.g. TYPE = ("..." OR "...")
                                  #TYPE: value type among:
                                  #  - MetricName
                                  #  - Namespace
                                  #  - DVAR
                                  #"-quote:
                                  #  - required when using spaces or non-ASCII chars
                                  #  - must \-escape " \ ( )
                                  #Max 1e3 chars for QUERY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricStream()                 #Req: METRIC_STREAM
                                  #  - no Arn, CreationDate, LastUpdateDate, State
                                  #  - RoleName -> RoleArn
                                  #Res: METRIC_STREAM
                                  #  - only Arn
StartMetricStreams()              #Req: METRIC_STREAM
                                  #  - only Name -> Names
                                  #Res: empty
                                  #Set METRIC_STREAM.State 'running'
StopMetricStreams()               #Req: METRIC_STREAM
                                  #  - only Name -> Names
                                  #Res: empty
                                  #Set METRIC_STREAM.State 'stopped'
GetMetricStream()                 #Req: METRIC_STREAM
                                  #  - only Name
                                  #Res: METRIC_STREAM
ListMetricStreams()               #Req: empty
                                  #Res: Entries METRIC_STREAM_ARR
                                  #  - no Include|ExcludeFilters, IncludeLinkedAccountsMetrics, RoleName, StatisticsConfigurations
DeleteMetricStream()              #Req: METRIC_STREAM
                                  #  - only Name
                                  #Res: empty

METRIC_STREAM                     #Redirect all of an ACCOUNT's METRIC_DATUMs to a Kinesis FIREHOSE
                                  #Batch once per minute
                                  #Can be sent out-of-order
                                  #Not logged with CloudTrail
METRIC_STREAM.Arn                 #METRIC_STREAM_ARN. 'arn:aws:cloudwatch:REGION:ACCOUNT_ID:metric-stream/METRIC_STREAM'
METRIC_STREAM.Name                #'METRIC_STREAM'
METRIC_STREAM.CreationDate        #'DATE'
METRIC_STREAM.LastUpdateDate      #'DATE'

METRIC_STREAM.FirehoseArn         #FIREHOSE_ARN
METRIC_STREAM.RoleName            #'ROLE' assumed by FIREHOSE
                                  #ROLE must:
                                  #  - allow PACTIONs firehose:PutRecord[Batch]
                                  #  - have trust policy allowing Principal.Service 'streams.metrics.cloudwatch.amazonaws.com'
                                  #Current PRINCIPAL must have iam:PassRole PACTION

METRIC_STREAM.OutputFormat        #'json' or 'opentelemetry0.7'
                                  #See online doc for specific format

METRIC_STREAM.State               #'running' (def) or 'stopped'

METRIC_STREAM                     #METRIC_STREAM_FILTER_ARR
 .Include|ExcludeFilters          #Cannot use both IncludeFilters + ExcludeFilters
                                  #Max 1e4
METRIC_STREAM_FILTER              #Include|exclude METRICs with a given NAMESPACE
METRIC_STREAM_FILTER.Namespace    #NAMESPACE
METRIC_STREAM_FILTER.MetricNames  #'METRIC'_ARR

METRIC_STREAM
 .StatisticsConfigurations        #METRIC_STREAM_STAT_ARR
METRIC_STREAM_STAT                #Specify XSTATs to compute for specific METRICs
METRIC_STREAM_STAT                #'XSTAT'_ARR
 .AdditionalStatistics            #If OutputFormat 'opentelemetry0.7', can only use 'pNUM'
                                  #Always included: Min|Max|Sum|SampleCount
                                  #Max 20
METRIC_STREAM_STAT.IncludeMetrics #METRIC_STREAM_METRIC_ARR
                                  #Max 100
METRIC_STREAM_METRIC              #Specific METRIC targetted by METRIC_STREAM_STAT
METRIC_STREAM_METRIC.MetricName   #'METRIC'
METRIC_STREAM_METRIC.Namespace    #NAMESPACE

TagResource()
ListTagsForResource()
UntagResource()
RESOURCE_TAGS.ResourceARN
RESOURCE_TAGS.Tags
METRIC_STREAM.Tags                #

AWS/CloudWatch/MetricStreams/*    #METRICs sent for METRIC_STREAM itself, with following names
                                  #DVAR: MetricStreamName 'METRIC_STREAM'
MetricUpdate                      #NUM of METRIC_DATUMs updates
TotalMetricUpdate                 #MetricUpdate + NUM of group of 5 AdditionalStatistics
PublishErrorRate                  #NUM% of unrecoverable errors sending to the FIREHOSE

QUICK SETUP ==>                   #In UI, sets up additional RESOURCEs to redirect from Kinesis to:
                                  #  - S3
                                  #  - third-party (Datadog, New Relic, Dynatrace, Splunk, SumoLogic)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EMBEDDED MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EMBEDDED METRICS ==>              #CloudWatch Logs LLEVENT, where message is 'ROOT_JSON' with following format ("EMF")
                                  #Automatically calls PutMetricData() based on METRIC_DATA contained in log message
                                  #Goal: combining METRIC_DATA + LLEVENT

ROOT.*                            #Anything, i.e. actual message
ROOT.VARR                         #Can be used anywhere in ROOT._aws.** as dot-delimited 'VARR' value
ROOT._aws.Timestamp               #DATE_NUM

ROOT._aws.CloudWatchMetrics       #EMETRIC_META_ARR
EMETRIC_META.Namespace            #'NAMESPACE'

EMETRIC_META.Dimensions           #EDVARS_ARR. Each EDVARS creates a new METRIC (cartesian product)
                                  #Max 30
EDVARS                            #'DVAR'_ARR
                                  #Max 250
ROOT.DVAR                         #'DVAL'

EMETRIC_META.Metrics              #EMETRIC_ARR
                                  #Max 100
EMETRIC.Name                      #'METRIC'
ROOT.METRIC                       #NUM
                                  #Can also be NUM_ARR (max 100), uses as METRIC_DATUM.Values
EMETRIC.Unit|StorageResolution    #Like METRIC_DATUM.*. Optional

CLOUDWATCH AGENT ==>              #TCP|UDP local daemon that forwards to CloudWatch Logs
                                  #Used by EC2 and ECS
ROOT._aws.logGroupName            #'LOG_GROUP'
ROOT._aws.logStreamName           #'LOG_STREAM'

CLOUDWATCH METRICS ==>            #METRICs sent for embedded metrics themselves
                                  #DVAR: LogGroupName 'LOG_GROUP'
AWS/Logs/EMFParsingErrors         #NUM of LLEVENTs using invalid format for embedded metrics
AWS/Logs/EMFValidationErrors      #Same but with higher-level validation instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EMBEDDED NODE MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #4.1.0
                                  #Named aws-embedded-metrics

metricScope(FUNC(MLOGGER)         #FUNC3(...) calls:
 ->FUNC2(...)[->>VAL])            #  - FUNC(createMetricsLogger())
 ->FUNC3(...)->>VAL               #  - FUNC2(...)
                                  #  - MLOGGER.flush()

createMetricsLogger()->MLOGGER    #

MLOGGER.*(...)->MLOGGER           #For all FUNCs, except flush()

MLOGGER.flush()->>                #Send metrics
                                  #Can only send one EMETRIC_META per flush()
                                  #Keeps:
                                  #  - MCONTEXT.namespace
                                  #  - MCONTEXT.properties
                                  #  - DOBJ
                                  #     - if MLOGGER.flushPreserveDimensions false: only default DOBJ
                                  #  - not MCONTEXT.metrics
                                  #  - not MCONTEXT.meta (except timestamp if setTimestamp() was used)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       EMBEDDED NODE ENV       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.environmentOverride          #Environment, among the following ones
ENVVAR AWS_EMF_ENVIRONMENT        #Def: automatically detects Lambda|ECS|EC2, otherwise use Agent

ENV 'Local'                       #Send metrics with console.log('ROOT_JSON')
                                  #If needed due to max 100 ARR items in EMETRIC_META.Metrics or ROOT.METRIC, calls console.log() multiple times

ENV 'Agent'                       #Send metrics to CloudWatch agent

ENV 'Lambda'                      #logGroupName|serviceName: 'FUNCTION'
                                  #serviceType: 'AWS::Lambda::Function'
                                  #Send metrics with console.log() like ENV 'Local'
ROOT.executionEnvironment         #'AWS_Lambda_RUNTIME'
ROOT.memorySize                   #'NUM' of FUNC_VERSION.MemorySize
ROOT.functionVersion              #'NUM' of FUNC_VERSION.Version
ROOT.logStreamId                  #'LOG_STREAM'
ROOT.traceId                      #ENVVAR _X_AMZN_TRACE_ID

ENV 'EC2'                         #serviceType: 'AWS::EC2::Instance'
                                  #Send metrics to CloudWatch agent
ROOT.imageId|instanceId|privateIP
 |instanceType|availabilityZone   #Instance identity fields
ROOT._aws.*                       #Instance identity fields

ENV 'ECS'                         #logGroupName|serviceName: default to 'IMAGE'
                                  #serviceType: 'AWS::ECS::Container'
                                  #Send metrics to CloudWatch agent
ROOT.createdAt|startedAt|image
 |cluster|taskArn                 #Instance identity fields
ROOT.containerId                  #'HOSTNAME'
ROOT._aws.FormattedImageName      #'IMAGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     EMBEDDED NODE CONFIG      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Configuration.VAR                 #CONF.VAR
                                  #Can be manually set

CONF.serviceType                  #'RESTYPE'. Used as default DVAR ServiceType
ENVVAR [AWS_EMF_]SERVICE_TYPE     #Def: 'Unknown'

CONF.serviceName                  #Resource 'NAME'. Used as default DVAR ServiceName
ENVVAR [AWS_EMF_]SERVICE_NAME     #Def: 'Unknown'

CONF.logGroupName                 #'LOG_GROUP'. Used as default DVAR LogGroup
ENVVAR AWS_EWF_LOG_GROUP_NAME     #Also set to ROOT._aws.logGroupName, if ENV ECS|EC2|Agent
                                  #Def: 'SERVICE_NAME-metrics'

CONF.logStreamName                #'LOG_STREAM_NAME'. Set to ROOT._aws.logStreamName
ENVVAR AWS_EWF_LOG_STREAM_NAME    #Only for ENV EC2|Agent

CONF.agentEndpoint                #'tcp|udp://HOST:PORT' of Cloudwatch agent
ENVVAR AWS_EMF_AGENT_ENDPOINT     #Only if ENV ECS|EC2|Agent
                                  #Def: 'tcp://0.0.0.0:25888'

CONF.debuggingLoggingEnabled
ENVVAR
 AWS_EMF_ENABLE_DEBUG_LOGGING     #BOOL (def: false). Prints debugging logs with console.log()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     EMBEDDED NODE METRICS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.namespace
ENVVAR AWS_EWF_NAMESPACE
MCONTEXT.namespace                #'NAMESPACE' (def: 'aws-embedded-metrics')
MCONTEXT|MLOGGER
 .setNamespace('NAMESPACE')       #

MCONTEXT|MLOGGER                  #Set all DOBJs. DOBJ is { DVAR: DVAL, ... }
 .setDimensions(DOBJ[_ARR])       #Can only use DOBJ_ARR (not DOBJ) with MCONTEXT
MCONTEXT|MLOGGER.resetDimensions()#Same as setDimensions([])
MCONTEXT|MLOGGER                  #Add a new DOBJ
 .putDimensions(DOBJ)             #Remove existing DOBJs with exact same DVARs
MCONTEXT                          #Set default DOBJ
 .setDefaultDimensions(DOBJ)      #[re]setDimensions() (but not putDimensions()) remove default DOBJ, unless using last argument BOOL true
MCONTEXT.getDimensions()->DOBJ_ARR#

MCONTEXT.metrics                  #MAP where key is 'METRIC' and value is MVALUES
MVALUES.values                    #NUM_ARR
MVALUES.addValue(NUM)             #
MVALUES.unit                      #'UNIT' (def: 'None')
MVALUES.storageResolution         #NUM (def: 60)
MCONTEXT|MLOGGER.putMetric        #NUM2 is StorageResolution
 ('METRIC', NUM[, 'UNIT'[, NUM2]])#If 'METRIC' already exists, appended to MVALUES.values NUM_ARR

Unit.UNIT                         #'UNIT'
                                  #Same spelling, except /Second -> PerSecond
StorageResolution.High|Standard   #1|60

MCONTEXT.properties               #OBJ set to ROOT.*
MCONTEXT|MLOGGER
 .setProperty('VAR', VAL)         #

MCONTEXT.meta                     #OBJ set to ROOT._aws.*
MCONTEXT|MLOGGER
 .setTimestamp(DATE|DATE_NUM)     #Set to ROOT._aws.Timestamp DATE_NUM (def: now)
