
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   CLOUDWATCH_DASHBOARD   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See CloudWatch doc

SUMMARY ==>                       #Dashboard: time, position, size, sharing
                                  #Text widget: markdown
                                  #Logs widget: CloudWatch Logs QUERY, table|timeseries|bar|pie
                                  #Metrics widget in dashboard: timeseries|bar|pie|gauge|singleValue, stacked, sparkline, alarm history
                                  #Metrics widget: x|y axis limits, aggregated|insight|math query, title|legend|annotations, color, size
                                  #Explorer widget: filtering, aggregation, combining, splitting
                                  #Alarm widget: filtering, sorting
                                  #Custom widget: function, params, HTML|JSON|Markdown

cdk-monitoring-constructs         #All the sections above named "... monitoring" are using it

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE_DOMAIN
FORMAT ==>
PAGINATION ==>                    #See CloudWatch doc

THROTTLING ==>                    #DASHBOARD: 10/s
                                  #WIDGET: 20/s

PRICING ==>                       #Main cost: 3$/month per 1 custom DASHBOARD
                                  #Free: 3/month, if <= 50 METRICs
                                  #API calls:
                                  #  - DASHBOARD: 1$/month per 1e5 calls
                                  #  - WIDGET: 1$/month per 5e4 calls
                                  #  - free: 1e6 calls/month (same free tier as METRIC* API calls)

                                  ┌───────────────┐
                                  │   DASHBOARD   │
                                  └───────────────┘

DASHBOARD                         #Set of UI graphs
                                  #Not REGION-specific
                                  #Refresh rate can be set in UI: 10s or 1|2|5|15m
DASHBOARD.DashboardArn            #DASHBOARD_ARN. 'arn:aws:cloudwatch::ACCOUNT_ID:dashboard/DASHBOARD'
DASHBOARD.DashboardName           #'DASHBOARD'
                                  #'CloudWatch-Default': special name, showing DASHBOARD in UI home page
DASHBOARD.LastModified            #'DATE'
                                  #UI has list of recent DASHBOARDs, and also favorite ones

DASHBOARD.Size                    #NUM (in bytes) of DBODY
DASHBOARD.DashboardBody           #DBODY

DASHBOARD_FAILURE                 #API error
DASHBOARD_FAILURE.Message         #'ERROR'
DASHBOARD_FAILURE.DataPath        #'VAR'

AUTOMATIC DASHBOARD ==>           #AWS managed DASHBOARD for each SERVICE
CloudWatch                        #AWS managed POLICY to view automatic DASHBOARD
 AutomaticDashboardsAccess        #Must be combined with CloudWatchReadOnly|FullAccess

                                  ┌───────────────────┐
                                  │   DASHBOARD API   │
                                  └───────────────────┘

PutDashboard()                    #Req: DASHBOARD
                                  #  - no DashboarArn, LastModified, Size
                                  #Res: DashboardValidationMessages DASHBOARD_FAILURE_ARR
GetDashboard()                    #Req: DASHBOARD
                                  #  - only DashboardName
                                  #Res: DASHBOARD
                                  #  - no LastModified, Size
ListDashboards()                  #Req: DASHBOARD
                                  #  - only DashboardName -> DashboardNamePrefix
                                  #Res: DashboardEntries DASHBOARD_ARR
                                  #  - no DashboardBody
DeleteDashboards()                #Req: DASHBOARD
                                  #  - only DashboardName -> DashboardNames ARR
                                  #Res: empty

                                  ┌───────────────────┐
                                  │   DASHBOARD IAC   │
                                  └───────────────────┘

AWS::CloudWatch::Dashboard        #RESPROPs: DashboardName, DashboardBody 'DBODY'

new Dashboard
 (...CARGS[, CDASHBOARD_OPTS])    #CDASHBOARD. CKRESOURCE wrapping DASHBOARD
CDASHBOARD.dashboardArn
CDASHBOARD[_OPTS].dashboardName   #DASHBOARD.*

                                  ┌──────────┐
                                  │   BODY   │
                                  └──────────┘

DBODY                             #'OBJ_JSON' defining a DASHBOARD content

DBODY.start|end                   #'DATE'|DURATION of first|last METRIC_DATUM
                                  #In the UI, can link DWIDGETs, so their start|end are always same
DBODY.periodOverride              #Either 'inherit' or 'auto' (def)
                                  #If 'auto', DWIDGET.properties.PERIOD might change to adapt to DBODY.start|end

DBODY.widgets                     #DWIDGET_ARR
                                  #In the UI, can show animation of DWIDGET getting its DATAPOINTs over time
                                  #Max 500
DWIDGET.type                      #'text|log|metric|explorer|alarm|custom'
DWIDGET.properties                #DTEXT|DLOG|DMETRICS|DEXPLORER|DALARM|DCUSTOM

DWIDGET.x|y                       #NUM position on a 24x1000 grid
                                  #Def: next space available
DWIDGET.width|height              #NUM size on a 24x1000 grid
                                  #Def: 6x6

                                  ┌──────────────┐
                                  │   BODY IAC   │
                                  └──────────────┘

CDASHBOARD_OPTS
 .start|end|periodOverride        #DBODY.*
CDASHBOARD_OPTS.defaultInterval   #DURATION. DBODY.start as '-DURATION'

CDASHBOARD_OPTS.widgets           #CDWIDGET_ARR_ARR. DBODY.widgets
                                  #DWIDGET.x|y is automatically computed
new Spacer|*Widget([OPTS])        #CDWIDGET
OPTS.width|height                 #DWIDGET.*

new Column|Row(CDWIDGET,...)      #CDWIDGET laying out other CWIDGETs vertically|horizontally
                                  #By default, CDASHBOARD_OPTS.widgets ARR_ARR is a Column of Rows
                                  #  - or multiple Rows if overflows 24 spaces

new Spacer([OPTS])                #Empty space. Def size: 1x1

                                  ┌─────────────────────────┐
                                  │   BODY MONITORING IAC   │
                                  └─────────────────────────┘

CFACADE[_OPTS].dashboardFactory   #CDASHBOARD_FACTORY. Can be:
                                  #  - def: automatically created using DefautDashboardFactory
                                  #  - new DefaultDashboardFactory(): to pass custom CDASHBOARD_OPTs
                                  #  - new DynamicDashboardFactory(): to use different setup than the 3 default DASHBOARDs
new DefaultDashboardFactory       #CDASHBOARD_FACTORY. Set of 3 CDASHBOARDs with CDASHBOARD_TYPEs:
 (...CARGS, OPTS)                 #  - 'Detail': main one
                                  #  - 'Summary': same but only the most important WIDGETs
                                  #  - 'Alarms': meant for DALARMs
                                  #     - with CFACADE, gets the ones created by CMONITORING.addAlarm()
                                  #Calls new Dashboard(OPTS) each time with:
                                  #  - OPTS.dashboardName -> OPTS.dashboardNamePrefix
                                  #     - def with CFACADE: 'CFACADE'
                                  #  - OPTS.defaultInterval -> OPTS.detailDashboardRange DURATION (def: 8h)
                                  #     - no OPTS.start|end
                                  #  - OPTS.periodOverride (def: 'auto') -> OPTS.detailDashboardPeriodOverride (def: 'inherit')
                                  #  - OPTS.widgets -> CSEGMENT
                                  #  - no OPTS.variables
                                  #'Summary' has different OPTS:
                                  #  - OPTS.detail* -> OPTS.summary*
                                  #  - OPTS.summaryDashboardRange default: 14d
new DynamicDashboardFactory       #Same but with custom CDASHBOARD_TYPEs:
 (...CARGS, OPTS)                 #  - only .addDynamicSegment(), not .addSegment()
                                  #  - no OPTS.create*Dashboard
                                  #  - OPTS.dashboardConfigs OBJ_ARR:
                                  #     - name 'CDASHBOARD_TYPE'
                                  #     - range|renderingPreference|periodOverride

CDASHBOARD_FACTORY
 .getDashboard('CDASHBOARD_TYPE')
 ->CDASHBOARD                     #
OPTS                              #BOOL (def: true|false|false)
 .create[Summary|Alarm]Dashboard  #If false, do not create CDASHBOARD for the specific CDASHBOARD_TYPE

CFACADE|CDASHBOARD_FACTORY
 .addDynamicSegment(CDSEGMENT)    #Add CWIDGETs using CDSEGMENT.widgetsForDashboard('CDASHBOARD_TYPE')->CWIDGET_ARR
CFACADE|CDASHBOARD_FACTORY        #Add CWIDGETs using CSSEGMENT_OPTS.segment CSSEGMENT, with CSSEGMENT.widgets|summaryWidgets|alarmWidgets()->CWIDGET_ARR
 .addSegment(CSSEGMENT_OPTS)      #for each CDASHBOARD_TYPE
                                  #Can also pass CSSEGMENT_OPTS.overrideProps.addToDetail|Summary|AlarmDashboard false to ignore one
CSEGMENT                          #CDSEGMENT|CSSEGMENT, i.e. defines both widgetsForDashboard() and widgets|summaryWidgets|alarmWidgets()

CFACADE.addWidget
 (CWIDGET[, BOOL[, BOOL2]])       #Calls CFACADE.addSegment(new SingleWidgetDashboardSegment()), i.e. add a single CWIDGET
 ->CFACADE                        #BOOL is addToSummaryDashboard (def: false), BOOL2 is addToAlarmDashboard (def: false)
new SingleWidgetDashboardSegment  #CSEGMENT with a single CWIDGET
 (CWIDGET[,'CDASHBOARD_TYPE'_ARR])#Def 'CDASHBOARD_TYPE'_ARR: all

                                  ┌───────────────┐
                                  │   VARIABLES   │
                                  └───────────────┘

DBODY.variables                   #DWAR_ARR
DWAR                              #UI element that allows setting DBODY|DWIDGET[.properties].* or DVALs
DWAR.id                           #'DWAR'. Max 32 chars, [[:alnum:]-_]
DWAR.label                        #STR (def: DWAR.pattern). Display name, max 30 chars
DWAR.type                         #'property' (DWAR.property) or 'pattern' (DWAR.pattern)
DWAR.property                     #'VAR'
DWAR.pattern                      #'REGEXP' matching any VARs
DWAR.defaultValue                 #STR
                                  #Can be '__FIRST' to use first item from DWAR.values|search (in alphabetical order)
DWAR.visible                      #BOOL (def: true). If false, cannot be edited in UI, but can still be edited in URL
DWAR.inputType                    #'input', 'select' or 'radio'. UI element type

DWAR.values                       #DOPT_ARR or DSOPT
                                  #Only with DWAR.inputType 'select|radio'
DOPT.value                        #STR
DOPT.label                        #STR. Display name
DSOPT.search                      #SEARCH() 'QUERY'
DSOPT.populateFrom                #'DVAR' from DWAR.search used as values

                                  ┌───────────────────┐
                                  │   VARIABLES IAC   │
                                  └───────────────────┘

CDASHBOARD_OPTS.variables         #CDWAR_ARR. DBODY.variables

new DashboardVariable(OPTS)       #CDWAR
OPTS
 .id|label|type|inputType|visible #DWAR.*
OPTS.value                        #STR. DWAR.property|pattern
OPTS.defaultValue                 #DWAR.defaultValue, either:
                                  #  - DefaultValue.FIRST: '__FIRST'
                                  #  - DefaultValue.value(STR)

OPTS.values                       #CDVALS. DWAR.values
Values.fromValues
 (DOPT_ARR)->CDVALS               #
Values.fromSearch(DSOPT.search,
 DSOPT.populateFrom)->CDVALS      #

Values.fromSearchComponents
 (CDSOPT)->CDVALS                 #
CDSOPT.populateFrom               #STR. DSOPT.populateFrom
CDSOPT.namespace                  #'NAMESPACE' used in DSOPT.search as FILTERS
CDSOPT.dimensions                 #'DVAR'_ARR used in DSOPT.search as FILTERS
CDSOPT.metricName                 #'METRIC' used in DSOPT.search as 'MetricName=METRIC' TERM

                                  ┌──────────┐
                                  │   TEXT   │
                                  └──────────┘

DTEXT                             #Widget showing text

DTEXT.markdown                    #'MARKDOWN'

DTEXT.background                  #'solid' (def) or 'transparent'

                                  ┌──────────────┐
                                  │   TEXT IAC   │
                                  └──────────────┘

new TextWidget(OPTS)              #DTEXT. Def size: 6x2
OPTS.markdown|background          #DTEXT.*

                                  ┌─────────────────────────┐
                                  │   TEXT MONITORING IAC   │
                                  └─────────────────────────┘

new HeaderWidget                  #new TextWidget() with:
 (STR[, NUM[, STR2[, NUM2]]])     #  - OPTS.markdown '# STR'
                                  #     - NUM is number of # (def: 1)
                                  #     - can append '\n\nSTR2'
                                  #  - no OPTS.background
                                  #  - width 24
                                  #  - height 1
                                  #     - if STR2 set, adds NUM2 (def: 1)
CFACADE
 .addLarge|Medium|SmallHeader
 (STR[, ...])->CFACADE            #new HeaderWidget(STR, 1|2|3, ...)
new MonitoringHeaderWidget(OPTS)  #new HeaderWidget(OPTS.title, 3, OPTS.description, OPTS.descriptionHeight)
                                  #Can also add to Markdown:
                                  #  - '[...](OPTS.goToLinkUrl)'
                                  #  - 'OPTS.family **...**'

new KeyValueTableWidget           #new TextWidget() with:
 (['KEY', 'VAL']_ARR)             #  - OPTS.markdown is Markdown table with two rows: one with KEYs, one with VALs
                                  #  - width|height 24*3

                                  ┌─────────────────────────────┐
                                  │   TEXT URL MONITORING IAC   │
                                  └─────────────────────────────┘

CFACADE
 .createAwsConsoleUrlFactory()
 ->CURL_FACTORY
new AwsConsoleUrlFactory(OPTS)    #CURL_FACTORY
OPTS.awsAccountId                 #'ACCOUNT_ID'
OPTS.awsAccountRegion             #'REGION'

CURL_FACTORY.getAwsConsoleUrl()
 ->'URL'_TK                       #Returns 'https://REGION.console.aws.amazon.com'
CURL_FACTORY.getSERVICEUrl()      #Returns SERVICE-specific UI URL
 ->'URL'_TK                       #See full list at: https://github.com/cdklabs/cdk-monitoring-constructs/blob/main/lib/common/url/AwsConsoleUrlFactory.ts

                                  ┌──────────┐
                                  │   LOGS   │
                                  └──────────┘

DLOG                              #Widget showing CloudWatch Logs QUERY (see its doc)

DLOG.query                        #'QUERY_STRING'
source 'LOG_GROUP'                #COMMAND that must start QUERY_STRING
                                  #Can be done several times

DLOG.view                         #'table' (def), 'bar'
                                  #If grouping `by bin()`, also: 'timeSeries', 'pie'

DLOG.title                        #STR
DLOG.region                       #REGION

                                  ┌──────────────┐
                                  │   LOGS IAC   │
                                  └──────────────┘

new LogQueryWidget(OPTS)          #DLOG. Def size: 6x6

OPTS.logGroupNames                #'LOG_GROUP'. `source ...` in DLOG.query
OPTS.queryString                  #'QUERY_STRING'. DLOG.query, as STR
OPTS.queryLines                   #Same but as 'COMMAND'_ARR, joined with '|'

OPTS.view                         #'table' (def), 'bar', 'pie', 'stackedarea|line' (i.e. 'timeseries' with WIDGET.stacked true|false)

OPTS.title                        #DLOG.*
OPTS.region                       #'REGION' (def: Aws.REGION). DLOG.region

                                  ┌─────────────────────────┐
                                  │   LOGS MONITORING IAC   │
                                  └─────────────────────────┘

CXMONITORING_OPTS                 #When using CFACADE.monitorLog(CXMONITORING_OPTS)
CXMONITORING_OPTS.pattern         #'REGEXP'. Adds a DLOG (size: 18x7+) with 'QUERY_STRING':
                                  #    fields @timestamp, @logStream, @message
                                  #  | filter @message like /REGEXP/
                                  #  | sort @timestamp desc
CXMONITORING_OPTS.limit           #NUM (def: 10). Prepends '| limit NUM' to 'QUERY_STRING'

                                  ┌─────────────┐
                                  │   METRICS   │
                                  └─────────────┘

DMETRICS                          #Widget showing METRICs

DMETRICS.period
DMETRICS.stat
DMETRICS.region
DMETRICS.timezone
DMETRICS.liveData
DMETRICS.stacked
DMETRICS.title
DMETRICS.legend
DMETRICS.yAxis.left|right.min|max
DMETRICS
 .annotations.horizontal|vertical #Like WIDGET.*
DMETRICS.metrics                  #Like WIDGET.* except:
                                  #  - if using WOPTS.expression, must:
                                  #     - put WOPTS in an ARR of length 1
                                  #     - only use WOPTS.expression|id|label
                                  #  - can use WOPTS.region REGION
                                  #Max 2500 per DASHBOARD

DMETRICS.view                     #'timeSeries' (def), 'table', 'bar', 'pie', 'gauge' or 'singleValue'
DMETRICS.sparkline                #BOOL (def: false)
                                  #Show the timeseries in background behind the value
                                  #Only with view 'singleValue'
DMETRICS.annotations.alarms       #ALARM_ARN. Show ALARMs history as comments

DMETRICS.table                    #DTABLE, when DMETRICS.view 'table'
DTABLE.layout                     #'horizontal' (def) or 'vertical'
DTABLE.showTimeSeriesData         #BOOL (def: true). Shows one column per PERIOD
DTABLE.summaryColumns             #STR_ARR (def: all), among 'MIN', 'MAX', 'SUM', 'AVG'
                                  #Show those columns
DTABLE.stickySummary              #BOOL (def: false). Make summaryColumns sticky

DMETRICS.setPeriodToTimeRange     #BOOL (def: false). Set DMETRICS.period as end - start
DMETRICS.singleValueFullPrecision #BOOL (def: false). Show more decimals for FLOATs

DMETRICS.accountId                #ACCOUNT_ID

DMETRICS.yAxis.left|right.label   #LABEL
DMETRICS
 .yAxis.left|right.showUnits      #BOOL (def: true)

                                  ┌─────────────────┐
                                  │   METRICS IAC   │
                                  └─────────────────┘

new GraphWidget(OPTS)             #DMETRICS with DMETRICS.view 'timeSeries' (def), 'bar' or 'pie'. Def size: 6x6
OPTS.start|end|liveData|view|title
 |stacked|setPeriodToTimeRange    #DMETRICS.*
OPTS.left|right                   #ICMETRIC_ARR. DMETRICS.metrics, labeled on left|right vertical axis
OPTS.period                       #DURATION. DMETRICS.period
OPTS.statistic                    #'XSTAT'. DMETRICS.stat
OPTS.region                       #'REGION' (def: Aws.REGION). DMETRICS.region
OPTS.legendPosition               #STR. DMETRICS.legend.position
OPTS.left|rightYAxis              #OBJ. DMETRICS.yAxis.left|right
OPTS.left|rightAnnotations        #WANNOT_ARR, with WANNOT.yAxis 'left|right'. DMETRICS.annotations.horizontal
OPTS.verticalAnnotations          #WANNOT_ARR, except WANNOT.value -> WANNOT.date. DMETRICS.annotations.vertical
CALARM.toAnnotation()->WANNOT     #DMETRICS.annotations.horizontal. Only WANNOT.label|value

new AlarmWidget(OPTS)             #DMETRICS with DMETRICS.view 'timeSeries' and DMETRICS.annotations.alarms
OPTS.title|region|leftYAxis       #Like GraphWidget
OPTS.alarm                        #ICALARM. DMETRICS.annotations.alarms (single item)

new GaugeWidget(OPTS)             #DMETRICS with DMETRICS.view 'gauge'. Def size: 6x6
OPTS.start|end|liveData|title
 |setPeriodToTimeRange|period
 |statistic|region|legendPosition #Like GraphWidget
OPTS.metrics                      #ICMETRIC_ARR. DMETRICS.metrics
OPTS.leftYAxis                    #OBJ (def min|max: 100). DMETRICS.yAxis.left
OPTS.annotations                  #WANNOT_ARR. DMETRICS.annotations.horizontal

new SingleValueWidget(OPTS)       #DMETRICS with DMETRICS.view 'singleValue'. Def size: 6x3
OPTS.start|end|title|period|region
 |setPeriodToTimeRange            #Like GraphWidget
OPTS.sparkline                    #DMETRICS.*
OPTS.metrics                      #ICMETRIC_ARR. DMETRICS.metrics
OPTS.fullPrecision                #BOOL. DMETRICS.singleValueFullPrecision

new TableWidget(OPTS)             #DMETRICS with DMETRICS.view 'table'. Def size: 6x6
OPTS.start|end|liveData|title
 |setPeriodToTimeRange|period
 |statistic|region                #Like GraphWidget
OPTS.metrics|fullPrecision        #Like SingleValueWidgetProps
OPTS.title                        #DMETRICS.*
OPTS.showUnitsInLabel             #DMETRICS.yAxis.left.showUnits
OPTS.thresholds                   #ARR (def: []) of either:
                                  #  - TableThreshold.below|above(WANNOT.value[, WANNOT.color])
                                  #  - TableThreshold.between(NUM, NUM2[, WANNOT.color])
                                  #DEMTRICS.annotations.horizontal
OPTS.layout                       #DTABLE.*
OPTS.hideNonSummaryColumns        #BOOL (def: false). DTABLE.showTimeSeriesData, but inverted
OPTS.columns                      #DTABLE.summaryColumns
OPTS.sticky                       #DTABLE.stickySummary

ICMETRIC[_OPTS|RENDER].color      #'#XXXXXX'. WOPTS.color
Color.BLUE|BROWN|GREEN|GREY|ORANGE
 |PINK|PURPLE|RED                 #'#XXXXXX', for WOPTS|WANNOT.color

                                  ┌──────────────────────────────┐
                                  │   CONSTANTS MONITORING IAC   │
                                  └──────────────────────────────┘

*Width                            #DWIDGET.Width
FullWidth                         #24
ThreeQuarters|Half|QuarterWidth   #18|12|6
HalfQuarterWidth                  #3
TwoThirds|ThirdWidth              #16|8
SixthWidth                        #4
DefaultAlarmWidgetWidth           #6. AlarmWidget

*Height                           #DWIDGET.Height
DefaultGraphWidgetHeight          #5. GraphWidget, in CDASHBOARD_TYPE 'Detail'
DefaultSummaryWidgetHeight        #6. GraphWidget, in CDASHBOARD_TYPE 'Summary'
DefaultTwoLinerGraph
 WidgetHalfHeight                 #3. GraphWidget, when it is using Columns, and spawning 1 row
DefaultTwoLinerGraphWidgetHeight  #6. GraphWidget, when it is using Columns, and spawning 2 rows
DefaultAlarmWidgetHeight          #4. AlarmWidget
DefaultLogWidgetHeight            #7. LogQueryWidget

*Axis*                            #WIDGET.yAxis.left|right.*
                                  #Unless documented otherwise, all use min 0, showUnits false
PercentageAxisFromZero[ToHundred] #label '%', min 0[, max 100]
PercentageAxisUpToHundred         #label '%', min undefined, max 100
TimeAxisMillis|Seconds|Minutes
 FromZero                         #label 'ms|sec|min'
CountAxisFromZero|One             #label 'Count', min 0|1
RateAxisFromZero[ToOne]           #label 'Rate', max 0|1
BooleanAxisFromZeroToOne          #label '1 = True', max 1
SizeAxis[Kilo|Mega|Giga]
 BytesFromZero                    #label 'bytes|kB|MB|GB'
MegabyteMillisecondAxisFromZero   #label 'MB*ms'
CurrencyAxisUsdFromZero           #label 'USD'

                                  ┌───────────────────────────────────┐
                                  │   METRICS CUSTOM MONITORING IAC   │
                                  └───────────────────────────────────┘

CCMONITORING_OPTS.metricGroups    #CCDMETRICS_ARR. DMETRICSs to display, using new GraphWidget|SingleValueWidget(), in CCMONITORING
                                  #Cannot set GRAPH_WIDGET_OPTS.start|end|liveData|period|statistic|region
                                  #nor SINGLE_VALUE_WIDGET_OPTS.sparkline|fullPrecision

CMONITORING_OPTS|CCDMETRICS
 .addToSummaryDashboard           #BOOL (def: false). Whether to display if CDASHBOARD_TYPE 'Summary'

CCDMETRICS.title                  #GRAPH_WIDGET_OPTS.title
CCDMETRICS.graphWidgetWidth       #GRAPH_WIDGET_OPTS.width
                                  #Def depends on number of CCDMETRICS: 1 -> 24, 2 -> 12, 3 -> 8, 4+ -> 6
CMONITORING_OPTS.height           #GRAPH_WIDGET_OPTS.height
                                  #Def: 5 with CDASHBOARD_TYPE 'Detail', 6 otherwise
CCDMETRICS
 .graphWidgetSetPeriodToTimeRange #GRAPH_WIDGET_OPTS.setPeriodToTimeRange
CCDMETRICS.graphWidgetLegend      #GRAPH_WIDGET_OPTS.legendPosition
CCDMETRICS.graphWidget[Right]Axis #GRAPH_WIDGET_OPTS.left|rightYAxis
CCDMETRICS
 .horizontal[Right]Annotations    #GRAPH_WIDGET_OPTS.left|rightAnnotations
CCDMETRICS.verticalAnnotations    #GRAPH_WIDGET_OPTS.verticalAnnotations

CCDMETRICS.graphWidgetType        #Among:
                                  #  - 'Line' (def), 'Bar', 'Pipe': GRAPH_WIDGET_OPTS.view 'timeSeries|bar|pie'
                                  #  - 'StackedArea': GRAPH_WIDGET_OPTS.stacked true
                                  #  - 'SingleValue': SingleValueWidget instead of GraphWidget
CCDMETRICS.metrics                #ARR of either:
                                  #  - ICMETRIC
                                  #  - CCDALARM (see CloudWatch Alarms doc)
                                  #  - CCDETECTOR (see CloudWatch Alarms doc)
                                  #  - CCSEARCH (see CloudWatch Metrics doc)
                                  #Defines each GRAPH_WIDGET_OPTS.left|right or SINGLE_VALUE_WIDGET.metrics

                                  ┌───────────────────────────────────┐
                                  │   METRICS ALARMS MONITORING IAC   │
                                  └───────────────────────────────────┘

CCDALARM                          #ICMETRIC + DMETRICS + METRIC_ALARM + DALARM
                                  #Creates one of each for each CCDALARM.addAlarm.*
                                  #To set to CCDMETRICS.metrics (see above)
                                  #Uses CALARM_FACTORY.addAlarm() and CXALARM_FACTORY Custom.Custom under the hood (see CloudWatch Alarms doc)
CCDALARM.metric                   #ICMETRIC
CCDALARM.addAlarm.SEVERITY        #CXALARM_OPTS except:
                                  #  - disambiguator always 'SEVERITY'
                                  #  - treatMissingData -> treatMissingDataOverride
                                  #  - alarmDescription -> additionalDescription (def: 'Threshold of THRESHOLD has been breached')
CCDALARM|CMONITORING_OPTS         #STR prepended to METRIC_ALARM.AlarmName and DALARM.title (joined with -)
 .alarmFriendlyName               #Must be [:alnum:]-_ only
CCDALARM.position                 #'left' (def) or 'right'. WANNOT.yAxis.left|right
CMONITORING_OPTS|CXMONITORING_OPTS
 .useCreatedAlarms.consume        #FUNC(CXALARM_ARR). Event called after initialization

CFACADE|CMONITORING
 .createWidgetFactory()
 ->CDALARM_FACTORY                #CDALARM_FACTORY
new DefaultWidgetFactory()        #Used by CCDALARM under-the-hood

CDALARM_FACTORY                   #new AlarmWidget() with:
 .createAlarmDetailWidget         #  - alarm CXALARM.alarm
 (CXALARM)->DMETRICS              #  - title CXALARM.alarmLabel
CMONITORING.addAlarm(CXALARM)     #  - width|height 6*4

CFACADE.createdAlarms()
 ->CXALARM_ARR                    #All CXALARM used to create AlarmWidgets
CFACADE
 .createdAlarmsWithDisambiguator
 ('SEVERITY')->CXALARM_ARR
CFACADE.createdAlarmsWithTag
 ('CALARM_GROUP')->CXALARM_ARR    #Same but filtered

CXALARM.annotation                #WANNOT. DMETRICS.annotations.horizontal, i.e. UI guidelines of an ALARM on a GraphWidget()
                                  #Added automatically when using CXMONITORING_OPTS.addMALARMAlarm or CCDALARM.addAlarm
                                  #Can customize more using CXALARM_GOPTS.annotationStrategy.createAnnotation (not documented yet)
CXALARM_OPTS
 .overrideAnnotationLabel         #WANNOT.label (def: guessed)
CXALARM_OPTS
 .overrideAnnotationColor         #WANNOT.color
CXALARM_OPTS
 .overrideAnnotationVisibility    #WANNOT.visible
CXALARM_OPTS.fillAlarmRange       #BOOL (def: false). If true, sets WANNOT.fill 'above|below', based on ALARM.ComparisonOperator

                                  ┌──────────────────┐
                                  │   WIDGET IMAGE   │
                                  └──────────────────┘

WIDGET_IMAGE_REQ.MetricWidget     #'WIDGET'
WIDGET_IMAGE_REQ.OutputFormat     #Either:
                                  #  - 'png' (def): response is normal XML, with WIDGET_IMAGE
                                  #  - 'image/png': response is PNG directly

WIDGET_IMAGE                      #Individual graph of METRICs (outside of a DASHBOARD)
                                  #Is a CloudTrail DATA_ACTION
WIDGET_IMAGE.MetricWidgetImage    #'PNG_BASE64'. Image of the graph

                                  ┌──────────────────────┐
                                  │   WIDGET IMAGE API   │
                                  └──────────────────────┘

GetMetricWidgetImage()            #Req: WIDGET_IMAGE_REQ
                                  #Res: WIDGET_IMAGE

                                  ┌─────────────────────────────────┐
                                  │   WIDGET IMAGE MONITORING IAC   │
                                  └─────────────────────────────────┘

CDASHBOARD_FACTORY_OPTS           #One of DashboardRenderingPreference.*:
 .renderingPreference             #  - INTERACTIVE_ONLY (def): keep as is
                                  #  - BITMAP_ONLY: use BitmapWidgetRenderingSupport
                                  #  - INTERACTIVE_AND_BITMAP: 2 CDASHBOARDs, one normal, one with BitmapWidgetRenderingSupport

new BitmapWidgetRenderingSupport  #Transform a CWIDGET into a CWIDGET2 that displays it as a PNG image
 (...CARGS).asBitmap(CWIDGET)     #Pro: faster, con: computed at synth-time, i.e. not interactive
 ->CWIDGET2                       #Uses a CustomWidget under-the-hood that calls GetMetricWidgetImage() and returns it as `<img>`

                                  ┌─────────────────┐
                                  │   WIDGET MAIN   │
                                  └─────────────────┘

WIDGET                            #JSON defining a graph for specific METRICs

WIDGET.metrics                    #WMETRIC_ARR
                                  #Max 500
WMETRIC                           #METRIC
                                  #ARR with positional elements
                                  #Each WMETRIC[*] can use '.' to re-use last WMETRIC's value
WMETRIC[0]                        #ACCOUNT_ID, optional
WMETRIC[0]                        #NAMESPACE
WMETRIC[1]                        #'METRIC'
WMETRIC[2|4|...]                  #DVAR
WMETRIC[3|5|...]                  #DVAL

WMETRIC[-1]                       #WOPTS
WOPTS.label                       #LABEL shown in WIDGET.legend. Def: '${LABEL}'
WOPTS.yAxis                       #'left' (def) or 'right'. Where to show ordinate axis
WOPTS.color                       #'#XXXXXX'

WOPTS|WIDGET.period               #PERIOD (def: 5m)
WOPTS|WIDGET.stat                 #'XSTAT' applied to values for each PERIOD

WOPTS.expression                  #MATH_QUERY|INSIGHT_QUERY applied to values
WOPTS.id                          #'MVAR' to use in another WMETRIC[-1].expression
WOPTS.visible                     #BOOL (def: true)
                                  #Same goal as METRIC_DATA_REQ.ReturnData

WIDGET.region                     #REGION

WIDGET.start|end                  #'DATE'|DURATION of first|last METRIC_DATUM
                                  #Def: '-PT3H' and '-PT0H'
WIDGET.timezone                   #'+NNNN' (def: '+0000')
WIDGET.liveData                   #BOOL (def: false)
                                  #If true, includes most recent data even if part of ongoing PERIOD

WIDGET.view                       #'timeSeries' (def), 'bar' or 'pie'
                                  #Graph type
WIDGET.stacked                    #BOOL (def: false)
                                  #Timeseries: stacked or separate lines

WIDGET.height                     #NUM (in px, def: 400)
                                  #Max 2000
WIDGET.width                      #NUM (in px, def: 600)
                                  #Max 2000
WIDGET.theme                      #'light' (def) or 'dark'

WIDGET.title                      #STR. Shown on top
WIDGET.legend.position            #'bottom' (def), 'right' or 'hidden'
                                  #Where legends are shown
WIDGET.yAxis.left|right.min|max   #NUM. Min|max limits for ordinate axis

WIDGET
 .annotations.horizontal|vertical #WANNOT[D]_ARR
WANNOTD                           #Annotation pair, with shading in-between
                                  #WANNOT_ARR with two elements:
                                  #  - WANNOT (upper band): no fill
                                  #  - WANNOT2 (lower band): only value|label
WANNOT                            #Comment on a specific DATAPOINT, shown either on left|right (horizontal) or below (vertical)
WANNOT.value                      #NUM (if horizontal) or 'DATE' (if vertical) for position
WANNOT.label
WANNOT.color
WANNOT.yAxis
WANNOT.visible                    #Like WOPTS.*
WANNOT.fill                       #'none' (def) or 'above|below'. Grey vertical line.

                                  ┌──────────────┐
                                  │   EXPLORER   │
                                  └──────────────┘

DEXPLORER                         #Widget showing multiple METRICs graphs interactively

DEXPLORER.metrics                 #DXMETRIC_ARR
                                  #Specify which METRICs to show
DXMETRIC.metricName               #'METRIC'
DXMETRIC.resourceType             #'RESTYPE' publishing the METRIC

DEXPLORER.labels                  #FILTER_ARR
                                  #Filter which METRICs to show
FILTER.key                        #PROP_KEY
FILTER.value                      #VAL

DEXPLORER.aggregateBy             #AGGR_BY
                                  #Combine multiple METRICs sharing same PROP_KEY values
AGGR_BY.key                       #PROP_KEY
AGGR_BY.func                      #'ISTAT'

DEXPLORER.splitBy                 #PROP_KEY_ARR
                                  #Split multiple METRICs into different graphs

PROP_KEY                          #Either:
                                  #  - 'TAG'
                                  #  - EC2: Architecture, Hypervisor, CoreCount, ImageId, InstanceId, InstanceLifecycle,
                                  #    InstanceType, InstanceFamily, InstanceSize, Affinity, AvailabilityZone, Tenancy,
                                  #    Platform, RootDeviceType SecurityGroups, State, SubnetId, VirtualizationType, VpcId
                                  #  - Lambda: FunctionName, Runtime, Language, MemorySize, Version, SecurityGroupIds,
                                  #    SubnetIds, SubnetIdCount, VpcId, Timeout

DEXPLORER.period                  #PERIOD (def: 5m)
DXMETRIC.stat                     #'XSTAT' to aggregate values per PERIOD

DEXPLORER.title                   #STR (def: 'Explorer')
DEXPLORER.widgetOptions           #DCONF
DCONF.view
DCONF.stacked
DCONF.legend.position             #Like WIDGET.*
DCONF.rowsPerPage                 #NUM
DCONF.widgetsPerRow               #NUM

                                  ┌──────────────────┐
                                  │   EXPLORER IAC   │
                                  └──────────────────┘

new ConcreteWidget
 (OPTS.width, OPTS.height)        #CWIDGET. WIDGET, for the ones not supported by CDK (e.g. EXPLORER)
CWIDGET.toJson()->WIDGET_ARR      #Must inherit ConcretWidget and override this

                                  ┌───────────┐
                                  │   ALARM   │
                                  └───────────┘

DALARM                            #Widget showing ALARMs

DALARM.alarms                     #ALARM_ARN_ARR
                                  #If single ALARM_ARN, UI shows its timeseries. Otherwise, shows only its StateValue.
                                  #Max 100

DALARM.states                     #STR_ARR (def: any). Filter by StateValue.
DALARM.sortBy                     #One of:
                                  #  - 'default' (def): by AlarmName
                                  #  - 'timestamp': by AlarmConfigurationUpdatedTimestamp
                                  #  - 'stateUpdatedTimestamp': by StateValue, then AlarmConfigurationUpdatedTimestamp

DALARM.title                      #STR

                                  ┌───────────────┐
                                  │   ALARM IAC   │
                                  └───────────────┘

new AlarmStatusWidget(OPTS)       #DALARM. Def size: 6x3
OPTS.alarms                       #CALARM_ARR. DALARM.alarms
OPTS.states|sortBy                #DALARM.*
OPTS.title                        #STR (def: 'Alarm Status'). DALARM.title

                                  ┌──────────────────────────┐
                                  │   ALARM MONITORING IAC   │
                                  └──────────────────────────┘

new AlarmMatrixWidget(OPTS)       #new AlarmStatusWidget(OPTS) with:
                                  #  - no OPTS.states|sortBy
                                  #  - width 24
                                  #  - height: enough for 6 CALARMs per row, but min 2, max 8

                                  ┌────────────┐
                                  │   CUSTOM   │
                                  └────────────┘

DWIDGET                           #Custom widget, using a Lambda FUNCTION response

DWIDGET.endpoint                  #FUNCTION_ARN
                                  #customWidget* is the recommended FUNCTION name prefix
DWIDGET.params                    #Custom OBJ to pass to every invocation

DWIDGET.updateOn.WHEN             #BOOL (def: false). When to refresh on, among WHEN:
                                  #  - 'refresh': on regular intervals
                                  #  - 'resize'
                                  #  - 'timeRange': on start|end changes

REQ                               #Lambda request payload
REQ.widgetContext                 #DREQ

REQ.*                             #User parameters
DREQ.params                       #DWIDGET.params, i.e. author parameters
DREQ.forms.all.NAME               #Value of HTML input NAME within the DWIDGET HTML

DREQ.dashboardName                #'DASHBOARD'
DREQ.widgetId                     #'WIDGET'

DREQ.height
DREQ.width
DREQ.theme
DREQ.title                        #Like WIDGET.*

DREQ.period                       #PERIOD NUM
DREQ.isAutoPeriod                 #BOOL
DREQ.timeRange                    #DRANGE
DRANGE[.zoom].start|end           #DATE_NUM, with|without zooming
DRANGE.relativeStart              #Now - DRANGE.start
DRANGE.mode                       #'absolute|relative'
DREQ.linkCharts                   #BOOL. Whether start|end are linked in UI

DREQ.accountId                    #ACCOUNT_ID

DREQ.locale                       #'LOCALE' (e.g. 'en')
DREQ.timezone                     #DTIMEZONE
DTIMEZONE.label                   #'TIMEZONE' (e.g. 'UTC')
DTIMEZONE.offsetISO               #'+HH:MM'
DTIMEZONE.offsetInMinutes         #NUM

REQ.describe                      #BOOL. When true, should return custom widget documentation as 'MARKDOWN'
                                  #MARKDOWN should contain ```yaml block with example REQ.* OBJ (user parameters)

RES                               #Must be one of:
                                  #  - HTML (no JavaScript)
                                  #  - JSON
                                  #  - { markdown: 'MARKDOWN' }

<cwdb-action>                     #Special HTML tag to create a button either:
                                  #  - calling a Lambda FUNCTION, potentially replacing current content
                                  #  - creating a popup
action="STR"                      #Whether to:
                                  #  - "call": call a Lambda FUNCTION
                                  #  - "html": display HTML
endpoint="FUNCTION_ARN"           #
event="STR"                       #Among "click", "dblclick" or "mouseenter"
confirmation="STR"                #Add a confirmation step, with message STR
display="STR"                     #Whether to use a "popup" or not ("widget")

                                  ┌────────────────┐
                                  │   CUSTOM IAC   │
                                  └────────────────┘

new CustomWidget(OPTS)            #DWIDGET. Def size: 6x6
OPTS.params|title                 #DWIDGET.*
OPTS.updateOn*                    #BOOL (def: true). DWIDGET.updateOn.*
OPTS.functionArn                  #FUNCTION_ARN. DWIDGET.endpoint

                                  ┌─────────────┐
                                  │   SHARING   │
                                  └─────────────┘

LINK ==>                          #Can share DASHBOARD with link created from the UI
                                  #Can email it from the UI
SSO ==>                           #Can also use SSO instead, allowing specific providers, from the UI

PERMISSIONS ==>                   #To share, must be able to:
                                  #  - cloudwatch:GetDashboard on specific DASHBOARD
                                  #  - iam:CreatePolicy
                                  #  - iam:CreateRole|AttachRolePolicy|PassRole on ROLE 'service-role/CWDBSharing'
                                  #  - cognito-idp:* and cognito-identity:*
                                  #Viewers get following permissions automatically:
                                  #  - cloudwatch:GetMetricData on all METRICs
                                  #  - cloudwatch:DescribeAlarms|GetInsightRuleReport on METRIC_ALARMs|IRULE_REPORTs of the DASHBOARD at sharing time
                                  #  - ec2:DescribeTags on all resources
                                  #Can add additional permissions for viewers to see:
                                  #  - COMPOSITE_ALARMs: cloudwatch:DescribeAlarms on them
                                  #  - DLOG: logs:FilterLogEvents|StartQuery|StopQuery|GetLogRecord on the LOG_GROUPs
                                  #  - DCUSTOM: lambda:InvokeFunction on the Lambda FUNCTIONs

                                  ┌─────────────────────────┐
                                  │   MAIN MONITORING IAC   │
                                  └─────────────────────────┘


cdk-monitoring-constructs         #Version 8.3.1
                                  #Peer dependencies: aws-cdk-lib, constructs

cdk-watchful                      #Former project, deprecated in favor of cdk-monitoring-constructs

new MonitoringFacade              #CFACADE. CDASHBOARDs + CMONITORINGs
 (...CARGS, CFACADE_OPTS)         #To customize CDASHBOARD, see CFACADE_OPTS.dashboardFactory above

new Monitoring                    #CMONITORING. Base class of CXMONITORING and CCMONITORING
 (CFACADE[, CMONITORING_OPTS])    #CSEGMENT with both WIDGETs and METRICs
CFACADE.createdMonitorings()
 ->CMONITORING_ARR                #

                                  ┌─────────────────────────┐
                                  │   AUTO MONITORING IAC   │
                                  └─────────────────────────┘

CFACADE.monitorScope              #Applies CFACADE.monitor*() on all instances of each supported SERVICE-specific class
 (PARENT_CONSTRUCT[, OPTS])       #Uses CDK ASPECTS under-the-hood
 ->CFACADE                        #Some SERVICEs (EC2, ElasticCache, Billing) have global NODEs, without PARENT_CONSTRUCT
                                  #  - if present, WIDGETs for those will always be added,
                                  #    unless disabled with OPTS.ec2|elasticCache|billing.enabled false

OPTS.SERVICE.enabled              #BOOL (def: true)

OPTS.SERVICE.props                #CXMONITORING_OPTS
                                  #Automatically fills instance-related CXMONITORING_OPTS.*
                                  #  - e.g. CXMONITORING_OPTS.lambdaFunction ICANYFUNC
                                  #Also sets CXMONITORING_OPTS.alarmFriendlyName using the instance's NID

                                  ┌────────────────────────────┐
                                  │   BUILTIN MONITORING IAC   │
                                  └────────────────────────────┘

CFACADE.monitor*                  #CXMONITORING. Add a CMONITORING builtin for a specific SERVICE
 (CXMONITORING_OPTS)->CFACADE     #* name depends of the SERVICE. Documented separately in each SERVICE

new *Monitoring(PARENT_CONSTRUCT, #Same but must manually call CFACADE.addSegment(CXMONITORING)
 CXMONITORING_OPTS)               #Goal is to customize CXMONITORING:
                                  #  - must `extend` from it
                                  #  - to add|remove WIDGETs: redefine CXMONITORING.widgets|summaryWidgets()->CWIDGET_ARR
                                  #  - to add METRICs: redefine constructor, initializing METRICs there
                                  #  - to add ALARMs + DALARMs:
                                  #     - redefine constructor, initializing ALARMs + DALARMs there
                                  #     - can use CXALARM_FACTORY + CMONITORING.addAlarm()
                                  #        - should then pass CXALARM.annotation to related WIDGETs

CXMONITORING_OPTS.*               #Must usually pass main instances using SERVICE-specific options
                                  #E.g. with Lambda: CXMONITORING_OPTS.lambdaFunction ICANYFUNC
CXMONITORING_OPTS.*               #BOOL (def: false). Some METRICs|WIDGETs|ALARMs must be enabled using SERVICE-specific options
                                  #E.g. with Lambda: CXMONITORING_OPTS.lambdaInsightsEnabled BOOL

CXMONITORING_OPTS                 #CXALARM_OPTS. Add Alarm + AlarmWidget() for a given METRIC
 .addMALARMAlarm.SEVERITY         #Available MALARMs are SERVICE-specific, and documented in each SERVICE

CXMONITORING_OPTS                 #'MARKDOWN' used as title (first row TextWidget)
 .humanReadableName               #Def: SERVICE-specific, but is usually either the name of main instance (e.g. 'FUNCTION') or of its CDK 'CONSTRUCT'

CXMONITORING_OPTS                 #RateComputationMethod.AVERAGE|PER_SECOND|MINUTE|HOUR|DAY
 .rateComputationMethod           #Def: AVERAGE, i.e. per PERIOD
                                  #Used when a METRIC is a rate, only when SERVICE has such METRICs
CXMONITORING_OPTS                 #BOOL2 (def: true). When a METRIC is a rate/s, fill missing METRIC_DATUMs with 0
 .fillTpsWithZeroes               #Only for SERVICEs which have such METRICs

CXMONITORING.*Metric              #Builtin CMETRIC
                                  #Available ones depends on the SERVICE
                                  #E.g. with Lambda: CXMONITORING.throttlesCountMetric for METRIC 'Throttles' (count)
CXMONITORING.*AlarmFactory        #Builtin CXALARM_FACTORY
                                  #Available ones depends on the SERVICE
                                  #E.g. with Lambda: CXMONITORING.errorLambdaFactory (using ErrorAlarmFactory)
CXMONITORING.*Annotations         #Builtin ARR of CXALARM.annotation, for a given WIDGET and 1+ METRICs
                                  #Available ones depends on the SERVICE
                                  #E.g. with Lambda: CXMONITORING.latencyAnnotations (for METRICs Duration, p50|90|99)
CXMONITORING.*Url                 #SERVICE-specific 'URL' to UI (see CURL_FACTORY)
                                  #Available ones depends on the SERVICE
                                  #Wraps the first row TextWidget using `[...](URL)`
                                  #E.g. with Lambda: CXMONITORING.functionUrl 'https://REGION.console.aws.amazon.com/lambda/home?region=REGION#/functions/FUNCTION'

                                  ┌───────────────────────────┐
                                  │   CUSTOM MONITORING IAC   │
                                  └───────────────────────────┘

CFACADE.monitorCustom
 (CCMONITORING_OPTS)->CFACADE     #CCMONITORING. Like CXMONITORING but without using builtin SERVICE-specific ones
new CustomMonitoring              #Unlike customizing CXMONITORING, is its own section in the DASHBOARD,
 (PARENT_CONSTRUCT,               #instead of inside a specific CXMONITORING's section
 CCMONITORING_OPTS)               #See CCMONITORING.metricGroups for how to setup WIDGETs

CCMONITORING_OPTS                 #Like CXMONITORING_OPTS.humanReadableName, except default (in priority):
 .humanReadableName               #  - CCMONITORING_OPTS.alarmFriendlyName
                                  #     - which itself defaults to the two next options
                                  #  - CCMONITORING_OPTS.fallbackConstructName STR
                                  #  - CCMONITORING_OPTS.namedConstruct CONSTRUCT, using 'CONSTRUCT' CDK name

CCMONITORING_OPTS.description     #'MARKDOWN' used as second row TextWidget
                                  #Only with CDASHBOARD_TYPE 'Detail'
CCMONITORING_OPTS
 .descriptionWidgetHeight         #NUM (def: 1)
