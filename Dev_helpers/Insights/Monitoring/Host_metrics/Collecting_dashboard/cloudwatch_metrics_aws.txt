
                      
   CLOUDWATCH METRICS  
                      



TODO ==>
  - go through TODO per service doc
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
  - Container and Lambda Insights
  - all "???"
  - user guide
  - Lambda + CloudWatch:
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/lambda-monitoring.html
  - Systems Manager:
     - SERVICE_LINKED_ROLEs:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-service-linked-roles.html#service-linked-role-permissions-opsitem

VERSION ==>                   #2023-02-09

SUMMARY ==>                   #Metric: name, namespace, dimensions
                              #Managed metrics: usage, quota
                              #Metric data: single|histogram|aggregation, unit, timestamp, resolution
                              #Simple query: time, aggregation, labels
                              #Insight query: SQL-like, aggregation, dimensions filtering|grouping, sorting, slicing
                              #Math query: math, undefined, time fields, bool logic
                              #Search query: name|namespace|dimensions, tokenize, partial match, bool logic
                              #Aggregation: period, min|max, avg|sum|count, percentile [rank], outliers
                              #Stream: Kinesis Firehose, all|filtered metrics, aggregation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #'monitoring.amazonaws.com'

FORMAT ==>                    #Request: query parameter, with ?Action and ?Version, and ARR.members.NUM
                              #Response: XML
                              #Request ID: RES.ResponseMetadata.RequestId

PAGINATION ==>                #Req:
                              #  - NextToken STR
                              #  - MaxResults NUM (def: 100, max: 500)
                              #     - except GetMetricData(): MaxDatapoints NUM (def: 1e5), based on METRIC_DATA_RES.Values length
                              #Res: NextToken STR

PRICING ==>                   #METRIC:
                              #  - 1$/month per 3.33 custom METRICs
                              #  - cheaper if many: 1$/month per 10|20|50 custom METRICs if >1e4|25e4|100e4
                              #API calls:
                              #  - 1$/month per 1e5 calls
                              #  - free: 1e6 calls/month
                              #  - GetMetricData():
                              #     - multiplied by numbers of METRICs requested
                              #     - never free
                              #METRIC_STREAM:
                              #  - 1$ per 3e5 METRIC updates
                              #  - multiplied by each 5 AdditionalStatistics
                              #  - also cost of Kinesis


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListMetrics()                 #Req: METRIC_LIST_REQ
                              #Res: METRIC_LIST

METRIC_LIST_REQ.MetricName
METRIC_LIST_REQ.Namespace
METRIC_LIST_REQ.Dimensions    #METRIC.*

METRIC_LIST_REQ               #Either
 .RecentlyActive              #  - not defined (def)
                              #  - 'PT3H': only METRICs with METRIC_DATUM from last 3h

METRIC_LIST.Metrics           #METRIC_ARR
                              #Only METRICs with at least one METRIC_DATUM in last 2 weeks
METRIC                        #Timeseries.
                              #Usually (but not necessarily):
                              #  - about a AWS resource
                              #  - measuring performance or availability (e.g. CPU usage)
METRIC.MetricName             #'METRIC'
METRIC.Namespace              #Prefixes 'METRIC', similar to an ARN_PATH

METRIC.Dimensions             #DIMENSION_ARR
DIMENSION                     #Part of identifier, like MetricName|Namespace but:
                              #  - has key + value
                              #  - can have multiple
                              #Max 30 per METRIC
DIMENSION.Name                #'DVAR'
DIMENSION.Value               #'DVAL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MANAGED            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS MANAGED METRICS ==>       #Metrics automatically sent by many AWS SERVICEs
CUSTOM METRICS ==>            #Non-AWS managed METRIC

AWS/SERVICE                   #Namespace for most managed METRICs

AWS/Usage                     #Namespace for managed METRICs related to resource usage when limited by a quota
                              #High timestamp resolution
SERVICE_QUOTA(ARR)            #METRIC_MATH function returning ARR2. Quotas for a given resource.
                              #ARR must be from a AWS/Usage/* METRIC
AWS/Usage/CallCount           #METRIC with resource usage
                              #DVARs:
                              #  - Service 'SERVICE'
                              #  - Resource 'ACTION|ARN'
                              #  - Type 'API|Resource'
                              #  - Class STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AGGREGATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ISTAT                         #MIN|MAX|AVG|SUM|COUNT
                              #Used by METRIC_INSIGHT and DEXPLORER.aggregateBy
STAT                          #Minimum, Maximum, Sum or SampleCount (count)
                              #Used by METRIC_DATUM.StatisticValues
ASTAT                         #STAT or Average
                              #Used by METRIC_AGGR_REQ|METRIC_ALARM.Statistics
ESTAT                         #'pNUM' (percentile)
                              #Used by METRIC_AGGR_REQ|METRIC_ALARM.ExtendedStatistics
XSTAT                         #ASTAT, ESTAT or one of:
                              #  - 'pNUM': percentile
                              #  - TM(RANGE):
                              #     - like Average but without outliers outside RANGE
                              #     - "trimmed mean"
                              #  - IQM:
                              #     - same as TM(25%:75%)
                              #     - "inter-quartile mean"
                              #  - WM(RANGE):
                              #     - like Average but outliers outside RANGE are clamped to min|max non-outliers
                              #     - "Winsorized mean"
                              #  - TC(RANGE):
                              #     - like SampleCount but without outliers outside RANGE
                              #     - "trimmed count"
                              #  - TS(RANGE):
                              #     - like Sum but without outliers outside RANGE
                              #     - "trimmed sum"
                              #  - PR(RANGE):
                              #     - percentage of values within RANGE
                              #     - "percentile rank"
                              #  - tm|vm|tc|ts|prNUM: same as TM|VM|TC|TS|PR(:NUM%)
                              #Used by METRIC_STREAM AdditionalStatistics, ANOMALY_DETECTOR.SingleMetricAnomalyDetector, DEXPLORER, WIDGET
RANGE                         #[NUM[%]]:[NUM2[%]]
                              #Targets only values >NUM (def: min) and <=NUM2 (def: max)
                              #If %, use percentiles instead

TODO: which one for ???
  - METRIC_STAT.Stat
  - ${PROP('Stat')}
  - SEARCH()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DATA PUT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricData()               #Req: METRIC_DATA
                              #Res: empty

METRIC_DATA.MetricData        #METRIC_DATUM_ARR
                              #Max 1e3
                              #Max 1MB
METRIC_DATUM                  #1|n datapoints
                              #If METRIC does not exist, creates it.
                              #Kept for 15 months
DATAPOINT                     #Single value of a METRIC
                              #1 datapoint with METRIC_DATUM.Value, multiple with METRIC_DATUM.Values|StatisticalValues
                              #To minimize number of requests, prefer the later, on a regular PERIOD

METRIC_DATUM.MetricName
METRIC_DATA.Namespace
METRIC_DATUM.Dimensions       #METRIC.*

METRIC_DATUM.Value            #NUM. Single DATAPOINT
METRIC_DATUM.Values|Counts    #NUM_ARR. Multiple DATAPOINTs, as histogram
                              #Max 150
METRIC_DATUM.StatisticValues  #STAT_SET. Multiple DATAPOINTs, as aggregation
STAT_SET.STAT                 #NUM

METRIC_DATUM.Unit             #One of:
                              #  - "[Micro|Milli]Seconds"
                              #  - "Percent"
                              #  - "Count[/Second]"
                              #  - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
                              #  - "None"

METRIC_DATUM.Timestamp        #DATE_NUM (def: now)
                              #If >3h|24h ago, can take 2h|48h to show up
                              #Min: 2 weeks earlier, max: 2h later
METRIC_DATUM.StorageResolution#NUM of secs to round Timestamp.
                              #Either 1s ("high") or 1m (def, "regular")
RESOLUTION                    #Timestamp rounding degrades with time:
                              #  - before 3h: StorageResolution
                              #  - after 3h: 1m
                              #  - after 15d: 5m
                              #  - after 63d: 1h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             QUERY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricData()               #Req: METRIC_DATA_REQS
                              #Res: METRIC_DATA_RESS

METRIC_DATA_REQS              #METRIC_DATA_REQ_ARR
 .MetricDataQueries           #Max 500

METRIC_DATA_RESS
 .MetricDataResults           #METRIC_DATA_RES_ARR
METRIC_DATA_RES               #1 METRIC_DATA_REQ -> 1|n METRIC_DATA_RES depending on METRIC_STAT|METRIC_INSIGHT|METRIC_MATH
METRIC_DATA_RES.StatusCode    #One of:
                              #  - 'Complete': ok
                              #  - 'PartialData': paginated
                              #  - 'InternalError': error, but can retry
                              #  - 'Forbidden': auth error

METRIC_STAT[_REQ].Period      #PERIOD. NUM (in secs) (def: 1m).
                              #Granularity of result: each PERIOD returns a single value aggregating multiple DATAPOINTs
                              #Must be a multiple of RESOLUTION
                              #  - if RESOLUTION 1s, must be 1|5|10|30
METRIC_DATA_REQS.StartTime    #Matching METRIC_DATUM.Timestamp. Inclusive.
                              #Rounded by PERIOD
                              #Must be within last 3h if there is a METRIC_INSIGHT
METRIC_DATA_REQS.EndTime      #Matching METRIC_DATUM.Timestamp. Exclusive.
                              #Rounded by PERIOD
METRIC_DATA_REQS.ScanBy       #'TimestampDescending|TimestampAscending'. Sorting order

METRIC_DATA_REQ.MetricStat    #METRIC_STAT. Simple query
                              #Returns a single METRIC_DATA_RES
METRIC_STAT.Metric            #METRIC
METRIC_STAT.Stat              #STAT applied on each PERIOD
METRIC_STAT.Unit              #Filter by METRIC_DATUM.Unit. Does not try to convert

METRIC_DATA_REQ.Expression    #'METRIC_INSIGHT' or 'METRIC_MATH'. Advanced query
                              #Cannot be used together with METRIC_DATA_REQ.MetricStat
                              #Max 1 METRIC_INSIGHT per METRIC_DATA_REQS

METRIC_DATA_REQ|RES.Id        #'MVAR'
                              #Either lowercase_underscored or camelCase
METRIC_DATA_RES.Values        #NUM_ARR. Each response value
METRIC_DATA_RES.Timestamps    #DATE_NUM_ARR. Same length as Values
METRIC_DATA_REQ.ReturnData    #BOOL (def: true).
                              #If false, do not any return METRIC_DATA_RES, i.e. only used as input of another METRIC_DATA_REQ

METRIC_DATA_RES[S].Messages   #MESSAGE_DATA_ARR
MESSAGE_DATA                  #Error message
MESSAGE_DATA.Code             #STR
MESSAGE_DATA.Value            #'MESSAGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AGGREGATION QUERY       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricStatistics()         #Req: METRIC_AGGR_REQ
                              #Res: METRIC_AGGR_RESS

METRIC_AGGR_REQ               #Similar to METRIC_DATA_REQ using MetricStat, but simpler and can use ESTAT
METRIC_AGGR_RESS.Datapoints   #METRIC_AGGR_RES_ARR
                              #Max 1440, otherwise error

METRIC_AGGR_REQ.MetricName
METRIC_AGGR_REQ.Namespace
METRIC_AGGR_REQ.Dimensions    #METRIC.*

METRIC_AGGR_REQ|RES.Unit      #Like METRIC_STAT.*

METRIC_AGGR_REQ.Period        #Like METRIC_STAT_REQ.*
                              #Each METRIC_STAT_RES aggregates multiple DATAPOINTs in a single PERIOD
METRIC_AGGR_REQ
 .StartTime|EndTime           #Like METRIC_STAT_REQS.*
METRIC_AGGR_RES.Timestamp     #'DATE'

METRIC_AGGR_REQ.Statistics    #'ASTAT'_ARR to populate in METRIC_AGGR_RES.*
METRIC_AGGR_RES.ASTAT         #NUM
METRIC_AGGR_REQ               #'ESTAT'_ARR to populate in METRIC_AGGR_RES.ExtendedStatistics.*
 .ExtendedStatistics          #Cannot be used with:
                              #  - METRIC_AGGR_REQ.Statistics
                              #  - negative DATAPOINTs
                              #  - METRIC_DATUM.Values|StatisticValues
                              #Max 10
METRIC_AGGR_RES
 .ExtendedStatistics.ESTAT    #NUM

METRIC_AGGR_RESS.Label        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LABELS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_DATA_REQ|RES.Label     #LABEL. Description
                              #Def: '${LABEL}'

METRIC_DATA_REQS              #'+|-NNNN'. Timezone to use in ${*TIME*}
 .LabelOptions.Timezone       #Def: UTC

${...}                        #"Dynamic label"
                              #Can be added to LABEL
                              #Computed in each METRIC_DATA_RES, based on its Values|Timestamps ARR
                              #Max 5 per Label

${LABEL}                      #Concatenates METRIC.Namespace|MetricName and DVAR|DVALs

${FIRST|LAST}                 #First|last value

${MIN|MAX}                    #
${SUM}                        #
${AVG}                        #
${DATAPOINT_COUNT}            #Length

${FIRST_LAST_RANGE}           #LAST - FIRST
${MIN_MAX_RANGE}              #MAX - MIN

${FIRST|LAST_TIME}
${MIN|MAX_TIME}
${FIRST_LAST_TIME_RANGE}
${MIN|MAX_TIME_RANGE}         #Same but with timestamps

${FIRST|LAST_TIME_RELATIVE}
${MIN|MAX_TIME_RELATIVE}      #Same but with duration since timestamps

${PROP('Region')}             #REGION

${PROP('MetricName')}         #'METRIC'
${PROP('Namespace')}          #NAMESPACE
${PROP('Dim.DVAR')}           #DVAL

${PROP('Period')}             #PERIOD
${PROP('Stat')}               #Current STAT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT QUERY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_INSIGHT                #SQL-like expression to compute a query on METRIC_DATUMs
                              #Syntax follows
                              #Returns ARR|ARR_ARR (one|multiple METRIC_DATA_RESs) depending on whether GROUP BY is used

SELECT ISTAT(NAME)            #Use METRIC with MetricName NAME and Namespace NAMESPACE
FROM NAMESPACE                #Aggregate each PERIOD according to ISTAT
                              #NAMESPACE can also be SCHEMA(NAMESPACE[, DVAR, ...])
                              #  - same as NAMESPACE, but only for METRICs with exact same DVAR
                              #  - must also have same Dimension count, including 0
WHERE DVAR [!]= DVAL [AND ...]#Filter by DVAL
GROUP BY DVAR[, ...]          #Splits into multiple ARRs grouped by DVAR
                              #Missing DVAR are named "Other"
ORDER BY ISTAT() [DESC|ASC]   #Sort ARRs created by GROUP BY
                              #Def: ASC
LIMIT NUM                     #Only first NUM values
                              #Def|max NUM: 500

QUOTING ==>                   #'-quote: around DVAL
                              #"-quote:
                              #  - around NAME|NAMESPACE|DVAR unless only [:alnum:]_ and not reserved word
                              #  - reserved word: big list, documented online
                              #\-escape: on ' " inside ' " quote


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MATH QUERY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_MATH                   #DSL to compute a query on METRIC_DATUMs
                              #While METRIC_INSIGHT is more focused on filtering|grouping|sorting|slicing,
                              #METRIC_MATH is more focused on transforming and combining multiple METRICs|METRIC_INSIGHT
                              #Return value must be either:
                              #  - ARR: one METRIC_DATA_RES
                              #  - ARR_ARR: multiple METRIC_DATA_RESs

MVAR                          #ARR. METRIC_DATA_RES with matching Id
mNUM                          #ARR. METRIC_DATA_RES number NUM

METRICS([STR])                #ARR_ARR. All METRIC_DATA_RESs, except ones using METRIC_MATH
                              #If STR, only ones with MVAR including STR
METRIC_COUNT(ARR_ARR)         #NUM. ARR_ARR.length

[NUM,...]                     #ARR
[ARR,...]                     #ARR_ARR
[ARR_ARR,...]                 #Concatenated ARR_ARR
VAL                           #NUM, ARR or ARR_ARR

BOOL                          #Actually 0|1
UNDEFINED ==>                 #Converted to 0
                              #If division by 0, VAL ignored
                              #Also called "missing value"

VAL + - * / ^ VAL2            #VAL3
-VAL                          #VAL2
VAL == != <= >= < > VAL2      #VAL3
VAL && || VAL2                #VAL3
VAL AND OR VAL2               #Same

FIRST|LAST(ARR)               #NUM

ABS(VAL)                      #VAL2
CEIL(VAL)                     #VAL2
FLOOR(VAL)                    #VAL2
LOG[10](VAL)                  #VAL2

MIN|MAX(ARR|ARR_ARR)          #VAL|ARR
SUM(ARR|ARR_ARR)              #VAL|ARR
AVG(ARR|ARR_ARR)              #VAL|ARR
STDDEV(ARR|ARR_ARR)           #VAL|ARR
DATAPOINT_COUNT(ARR|ARR_ARR)  #VAL|ARR. Length, after ARR_ARR flattening, excluding undefined

DIFF(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value.
DIFF_TIME(ARR|ARR_ARR)        #ARR|ARR_ARR. Difference with previous timestamp (in secs)
RATE(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value, divided by difference between timestamps (in secs)
RUNNING_SUM(ARR|ARR_ARR)      #ARR|ARR_ARR. Sum with all previous values

TIME_SERIES(NUM)              #ARR of repeated value NUM
FILL(ARR|ARR_ARR, FILLER)     #ARR|ARR_ARR, but fills undefined according to FILLER:
                              #  - NUM: repeated value
                              #  - ARR: serial value
                              #  - REPEAT: last non-undefined value
                              #  - LINEAR: interpolation between last|next non-undefined value

SLICE(ARR_ARR, NUM[, NUM2])   #ARR_ARR, but only from index NUM (inclusive) to NUM2 (exclusive, def: end)
REMOVE_EMPTY(ARR_ARR)         #ARR_ARR, but without ARR of length 0
SORT(ARR_ARR, FUNC, ASC|DESC  #ARR_ARR, but sorted.
 [, NUM])                     #Sort using each FUNC(ARR) as key, with FUNC being MIN|MAX|SUM|AVG
                              #If NUM, truncates to NUM values

PERIOD(ARR)                   #NUM. PERIOD
EPOCH(ARR)                    #ARR2. Timestamps of ARR, but converted to DATE_NUM
MINUTE(ARR)                   #ARR2. Timestamps of ARR, but only with the minute
HOUR(ARR)                     #Same with hour
DAY(ARR)                      #Same with day of the week
DATE(ARR)                     #Same with day of the month
MONTH(ARR)                    #Same with month
YEAR(ARR)                     #Same with year

IF(BOOL[_ARR],                #ARR3 with each element:
 NUM|ARR[, NUM2|ARR2])        #  - taken either from NUM|ARR or NUM2|ARR2
                              #  - depending on BOOL[_ARR]
                              #If some values are ARR and not others, scalar values are repeated
                              #undefined in:
                              #  - BOOL_ARR -> undefined
                              #  - NUM|ARR -> 0
                              #  - NUM2|ARR2 -> undefined
                              #Def NUM2: undefined
                              #Def ARR2: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SEARCH QUERY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH('QUERY', 'STAT')       #METRIC_MATH function returning ARR_ARR: METRICs mathing QUERY
                              #QUERY: '[FILTERS] [TERMS]'
                              #FILTERS: {NAMESPACE[, DVAR, ...]}
                              #  - NAMESPACE: only METRICs with that Namespace
                              #  - DVAR:
                              #     - group METRICs by DVAL
                              #     - STAT is applied on those groups
                              #     - ignore METRICs without that DVAR
                              #TERMS: list of TERM separated by:
                              #  - space: same as AND
                              #  - AND|OR|NOT
                              #  - parenthesis
                              #TERM: [TYPE=]["]...["]
                              #  - include only METRICs with a matching MetricName|Namespace|DVAR|DVAL
                              #  - unless "-quote:
                              #     - partial match
                              #     - tokenize with punctuation and camelCase
                              #        - case insensitive, but only after tokenization
                              #        - e.g. oneTwo -> oneTwo OR (one AND two)
                              #           - oneTwo case-sensitive, one|two case-insensitive
                              #  - can also use AND|OR|NOT|parenthesis in the value, e.g. TYPE = ("..." OR "...")
                              #TYPE: value type among:
                              #  - MetricName
                              #  - Namespace
                              #  - DVAR
                              #"-quote:
                              #  - required when using spaces or non-ASCII chars
                              #  - must \-escape " \ ( )
                              #Max 1e3 chars for QUERY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricStream()             #Req: METRIC_STREAM
                              #  - no Arn, CreationDate, LastUpdateDate, State
                              #  - RoleName -> RoleArn
                              #Res: METRIC_STREAM
                              #  - only Arn
StartMetricStreams()          #Req: METRIC_STREAM
                              #  - only Name -> Names
                              #Res: empty
                              #Set METRIC_STREAM.State 'running'
StopMetricStreams()           #Req: METRIC_STREAM
                              #  - only Name -> Names
                              #Res: empty
                              #Set METRIC_STREAM.State 'stopped'
GetMetricStream()             #Req: METRIC_STREAM
                              #  - only Name
                              #Res: METRIC_STREAM
ListMetricStreams()           #Req: empty
                              #Res: Entries METRIC_STREAM_ARR
                              #  - no Include|ExcludeFilters, IncludeLinkedAccountsMetrics, RoleName, StatisticsConfigurations
DeleteMetricStream()          #Req: METRIC_STREAM
                              #  - only Name
                              #Res: empty

METRIC_STREAM                 #Redirect all of an ACCOUNT's METRIC_DATUMs to a Kinesis FIREHOSE
METRIC_STREAM.Arn             #METRIC_STREAM_ARN. 'arn:aws:cloudwatch:REGION:ACCOUNT_ID:metric-stream/METRIC_STREAM'
METRIC_STREAM.Name            #'METRIC_STREAM'
METRIC_STREAM.CreationDate    #'DATE'
METRIC_STREAM.LastUpdateDate  #'DATE'

METRIC_STREAM.FirehoseArn     #FIREHOSE_ARN
METRIC_STREAM.RoleName        #'ROLE' assumed by FIREHOSE
                              #Must allow firehose:PutRecord[Batch] PACTIONs
                              #Current PRINCIPAL must have iam:PassRole PACTION

METRIC_STREAM.OutputFormat    #'json' or 'opentelemetry0.7'

METRIC_STREAM.State           #'running' (def) or 'stopped'

METRIC_STREAM
 .Include|ExcludeFilters      #METRIC_STREAM_FILTER_ARR
METRIC_STREAM_FILTER          #Include|exclude METRICs with a given NAMESPACE
METRIC_STREAM_FILTER.Namespace#NAMESPACE

METRIC_STREAM
 .StatisticsConfigurations    #METRIC_STREAM_STAT_ARR
METRIC_STREAM_STAT            #Specify XSTATs to compute for specific METRICs
METRIC_STREAM_STAT            #'XSTAT'_ARR
 .AdditionalStatistics        #If OutputFormat 'opentelemetry0.7', can only use 'pNUM'
                              #Always included: Min|Max|Sum|SampleCount
                              #Max 20
METRIC_STREAM_STAT            #METRIC_STREAM_METRIC_ARR
 .IncludeMetrics              #Max 100
METRIC_STREAM_METRIC          #Specific METRIC targetted by METRIC_STREAM_STAT
METRIC_STREAM_METRIC
 .MetricName                  #'METRIC'
METRIC_STREAM_METRIC
 .Namespace                   #NAMESPACE

TagResource()
ListTagsForResource()
UntagResource()
RESOURCE_TAGS.ResourceARN
RESOURCE_TAGS.Tags
METRIC_STREAM.Tags            #

cloudwatch:                   #STR_ARR CONDITION_KEY
 requestManagedResourceARNs   #ListManagedInsightRules, PutManagedInsightRules

cloudwatch:AlarmActions       #STR_ARR CONDITION_KEY
                              #PutCompositeAlarm, PutMetricAlarm

cloudwatch:                   #STR_ARR CONDITION_KEY
 requestInsightRuleLogGroups  #PutInsightRule

cloudwatch:namespace          #STR CONDITION_KEY
                              #PutMetricData
