
              
   CLOUDWATCH  
              



TODO ==>
  - go through TODO per service doc
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
  - Container and Lambda Insights
  - read user guide
  - all "???"
  - Lambda + CloudWatch:
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/lambda-monitoring.html
  - Systems Manager:
     - SERVICE_LINKED_ROLEs:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-service-linked-roles.html#service-linked-role-permissions-opsitem

VERSION ==>                   #2013-02-22

SUMMARY ==>                   #???
                              #Check stats/metrics (e.g. performance), and send alarms


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #'monitoring.amazonaws.com'

FORMAT ==>                    #Request: query parameter, with ?Action and ?Version, and ARR.members.NUM
                              #Response: XML
                              #Request ID: RES.ResponseMetadata.RequestId

PAGINATION ==>                #Req:
                              #  - NextToken STR
                              #  - MaxResults NUM (def: 100, max: 500)
                              #     - except GetMetricData(): MaxDatapoints NUM (def: 1e5), based on METRIC_DATA_RES.Values length
                              #Res: NextToken STR

PRICING ==>                   #METRIC:
                              #  - 1$/month per 3.33 custom METRICs
                              #  - if >1e4 custom METRICs cheaper: 1$/month per 10|20|50 custom METRICs if >24e4, 75e4, 100e4 of them
                              #Main API calls:
                              #  - for METRIC[_DATUM|AGGR], WIDGET, IRULE_REPORT, DASHBOARD: 1$/month per 1e5 calls
                              #  - WIDGET: twice more expensive
                              #  - free: 1e6 calls/month
                              #  - GetMetricData(), IRULE_REPORT:
                              #     - multiplied by numbers of METRICs requested
                              #     - never free
                              #METRIC_STREAM:
                              #  - 1$ per 3e5 METRIC updates
                              #  - multiplied by each 5 AdditionalStatistics
                              #  - also cost of Kinesis
                              #ALARM:
                              #  - 1$/month per 10 ALARMs
                              #     - free: 10/month
                              #  - multiplied by each METRIC insight query ???
                              #  - high StorageResolution: 3 times more expensive
                              #  - ANOMALY_DETECTOR: 3 times more expensive
                              #COMPOSITE_ALARM:
                              #  - 1$/month per 2 COMPOSITE_ALARMs
                              #IRULE_REPORT:
                              #  - 1$ per 2 IRULEs
                              #     - free: 1 IRULE/month
                              #  - 1$ per 5e7|3e7 matching events for Logs|DynamoDB
                              #     - free: 1e6 matching events/month
                              #DASHBOARD:
                              #  - 3$/month per 1 DASHBOARD
                              #  - free: 3/month, if <= 50 METRICs
                              #Cross-account???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListMetrics()                 #Req: METRIC_LIST_REQ
                              #Res: METRIC_LIST

METRIC_LIST_REQ.MetricName
METRIC_LIST_REQ.Namespace
METRIC_LIST_REQ.Dimensions    #METRIC.*

METRIC_LIST_REQ               #Either
 .RecentlyActive              #  - not defined (def)
                              #  - 'PT3H': only METRICs with METRIC_DATUM from last 3h

METRIC_LIST.Metrics           #METRIC_ARR
                              #Only METRICs with at least one METRIC_DATUM in last 2 weeks
METRIC                        #Timeseries.
                              #Usually (but not necessarily):
                              #  - about a AWS resource
                              #  - measuring performance or availability (e.g. CPU usage)
METRIC.MetricName             #'METRIC'
METRIC.Namespace              #Prefixes 'METRIC', similar to an ARN_PATH

METRIC.Dimensions             #DIMENSION_ARR
DIMENSION                     #Part of identifier, like MetricName|Namespace but:
                              #  - has key + value
                              #  - can have multiple
                              #Max 30 per METRIC
DIMENSION.Name                #'DVAR'
DIMENSION.Value               #'DVAL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        MANAGED METRICS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS MANAGED METRICS ==>       #Metrics automatically sent by many AWS SERVICEs
CUSTOM METRICS ==>            #Non-AWS managed METRIC

AWS/SERVICE                   #Namespace for managed METRICs

AWS/Usage                     #Namespace for managed METRICs related to resource usage when limited by a quota
SERVICE_QUOTA(ARR)            #METRIC_MATH function, returning ARR2. Quotas for a given resource.
                              #ARR must be from a AWS/Usage/* METRIC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AGGREGATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ISTAT                         #MIN|MAX|AVG|SUM|COUNT
                              #Used by METRIC_INSIGHT and DEXPLORER.aggregateBy
STAT                          #Minimum, Maximum, Sum or SampleCount (count)
                              #Used by METRIC_DATUM.StatisticValues
ASTAT                         #STAT or Average
                              #Used by METRIC_AGGR_REQ|METRIC_ALARM.Statistics
ESTAT                         #'pNUM' (percentile)
                              #Used by METRIC_AGGR_REQ|METRIC_ALARM.ExtendedStatistics
XSTAT                         #ASTAT, ESTAT or one of:
                              #  - 'pNUM': percentile
                              #  - TM(RANGE):
                              #     - like Average but without outliers outside RANGE
                              #     - "trimmed mean"
                              #  - IQM:
                              #     - same as TM(25%:75%)
                              #     - "inter-quartile mean"
                              #  - WM(RANGE):
                              #     - like Average but outliers outside RANGE are clamped to min|max non-outliers
                              #     - "Winsorized mean"
                              #  - TC(RANGE):
                              #     - like SampleCount but without outliers outside RANGE
                              #     - "trimmed count"
                              #  - TS(RANGE):
                              #     - like Sum but without outliers outside RANGE
                              #     - "trimmed sum"
                              #  - PR(RANGE):
                              #     - percentage of values within RANGE
                              #     - "percentile rank"
                              #  - tm|vm|tc|ts|prNUM: same as TM|VM|TC|TS|PR(:NUM%)
                              #Used by METRIC_STREAM AdditionalStatistics, ANOMALY_DETECTOR.SingleMetricAnomalyDetector, DEXPLORER, WIDGET
RANGE                         #[NUM[%]]:[NUM2[%]]
                              #Targets only values >NUM (def: min) and <=NUM2 (def: max)
                              #If %, use percentiles instead

TODO: which one for ???
  - METRIC_STAT.Stat
  - ${PROP('Stat')}
  - SEARCH()

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC DATA PUT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricData()               #Req: METRIC_DATA
                              #Res: empty

METRIC_DATA.MetricData        #METRIC_DATUM_ARR
                              #Max 1e3
                              #Max 1MB
METRIC_DATUM                  #1|n datapoints
                              #If METRIC does not exist, creates it.
                              #Kept for 15 months
DATAPOINT                     #Single value of a METRIC
                              #1 datapoint with METRIC_DATUM.Value, multiple with METRIC_DATUM.Values|StatisticalValues
                              #To minimize number of requests, prefer the later, on a regular PERIOD

METRIC_DATUM.MetricName
METRIC_DATA.Namespace
METRIC_DATUM.Dimensions       #METRIC.*

METRIC_DATUM.Value            #NUM. Single DATAPOINT
METRIC_DATUM.Values|Counts    #NUM_ARR. Multiple DATAPOINTs, as histogram
                              #Max 150
METRIC_DATUM.StatisticValues  #STAT_SET. Multiple DATAPOINTs, as aggregation
STAT_SET.STAT                 #NUM

METRIC_DATUM.Unit             #One of:
                              #  - "[Micro|Milli]Seconds"
                              #  - "Percent"
                              #  - "Count[/Second]"
                              #  - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
                              #  - "None"

METRIC_DATUM.Timestamp        #DATE_NUM (def: now)
                              #If >3h|24h ago, can take 2h|48h to show up
                              #Min: 2 weeks earlier, max: 2h later
METRIC_DATUM.StorageResolution#NUM of secs to round Timestamp.
                              #Either 1s ("high") or 1m (def, "regular")
RESOLUTION                    #Timestamp rounding degrades with time:
                              #  - before 3h: StorageResolution
                              #  - after 3h: 1m
                              #  - after 15d: 5m
                              #  - after 63d: 1h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC DATA GET        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricData()               #Req: METRIC_DATA_REQS
                              #Res: METRIC_DATA_RESS

METRIC_DATA_REQS              #METRIC_DATA_REQ_ARR
 .MetricDataQueries           #Max 500

METRIC_DATA_RESS
 .MetricDataResults           #METRIC_DATA_RES_ARR
METRIC_DATA_RES               #1 METRIC_DATA_REQ -> 1|n METRIC_DATA_RES depending on METRIC_STAT|METRIC_INSIGHT|METRIC_MATH
METRIC_DATA_RES.StatusCode    #One of:
                              #  - 'Complete': ok
                              #  - 'PartialData': paginated
                              #  - 'InternalError': error, but can retry
                              #  - 'Forbidden': auth error

METRIC_STAT[_REQ].Period      #PERIOD. NUM (in secs) (def: 1m).
                              #Granularity of result: each PERIOD returns a single value aggregating multiple DATAPOINTs
                              #Must be a multiple of RESOLUTION
                              #  - if RESOLUTION 1s, must be 1|5|10|30
METRIC_DATA_REQS.StartTime    #Matching METRIC_DATUM.Timestamp. Inclusive.
                              #Rounded by PERIOD
                              #Must be within last 3h if there is a METRIC_INSIGHT
METRIC_DATA_REQS.EndTime      #Matching METRIC_DATUM.Timestamp. Exclusive.
                              #Rounded by PERIOD
METRIC_DATA_REQS.ScanBy       #'TimestampDescending|TimestampAscending'. Sorting order

METRIC_DATA_REQ.MetricStat    #METRIC_STAT. Simple query
                              #Returns a single METRIC_DATA_RES
METRIC_STAT.Metric            #METRIC
METRIC_STAT.Stat              #STAT applied on each PERIOD
METRIC_STAT.Unit              #Filter by METRIC_DATUM.Unit. Does not try to convert

METRIC_DATA_REQ.Expression    #'METRIC_INSIGHT' or 'METRIC_MATH'. Advanced query
                              #Cannot be used together with METRIC_DATA_REQ.MetricStat
                              #Max 1 METRIC_INSIGHT per METRIC_DATA_REQS

METRIC_DATA_REQ|RES.Id        #'MVAR'
                              #Either lowercase_underscored or camelCase
METRIC_DATA_RES.Values        #NUM_ARR. Each response value
METRIC_DATA_RES.Timestamps    #DATE_NUM_ARR. Same length as Values
METRIC_DATA_REQ.ReturnData    #BOOL (def: true).
                              #If false, do not any return METRIC_DATA_RES, i.e. only used as input of another METRIC_DATA_REQ

METRIC_DATA_RES[S].Messages   #MESSAGE_DATA_ARR
MESSAGE_DATA                  #Error message
MESSAGE_DATA.Code             #STR
MESSAGE_DATA.Value            #'MESSAGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      METRIC AGGREGATION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricStatistics()         #Req: METRIC_AGGR_REQ
                              #Res: METRIC_AGGR_RESS

METRIC_AGGR_REQ               #Similar to METRIC_DATA_REQ using MetricStat, but simpler and can use ESTAT
METRIC_AGGR_RESS.Datapoints   #METRIC_AGGR_RES_ARR
                              #Max 1440, otherwise error

METRIC_AGGR_REQ.MetricName
METRIC_AGGR_REQ.Namespace
METRIC_AGGR_REQ.Dimensions    #METRIC.*

METRIC_AGGR_REQ|RES.Unit      #Like METRIC_STAT.*

METRIC_AGGR_REQ.Period        #Like METRIC_STAT_REQ.*
                              #Each METRIC_STAT_RES aggregates multiple DATAPOINTs in a single PERIOD
METRIC_AGGR_REQ
 .StartTime|EndTime           #Like METRIC_STAT_REQS.*
METRIC_AGGR_RES.Timestamp     #'DATE'

METRIC_AGGR_REQ.Statistics    #'ASTAT'_ARR to populate in METRIC_AGGR_RES.*
METRIC_AGGR_RES.ASTAT         #NUM
METRIC_AGGR_REQ               #'ESTAT'_ARR to populate in METRIC_AGGR_RES.ExtendedStatistics.*
 .ExtendedStatistics          #Cannot be used with:
                              #  - METRIC_AGGR_REQ.Statistics
                              #  - negative DATAPOINTs
                              #  - METRIC_DATUM.Values|StatisticValues
                              #Max 10
METRIC_AGGR_RES
 .ExtendedStatistics.ESTAT    #NUM

METRIC_AGGR_RESS.Label        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC LABELS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_DATA_REQ|RES.Label     #LABEL. Description
                              #Def: '${LABEL}'

METRIC_DATA_REQS              #'+|-NNNN'. Timezone to use in ${*TIME*}
 .LabelOptions.Timezone       #Def: UTC

${...}                        #"Dynamic label"
                              #Can be added to LABEL
                              #Computed in each METRIC_DATA_RES, based on its Values|Timestamps ARR
                              #Max 5 per Label

${LABEL}                      #Concatenates METRIC.Namespace|MetricName and DVAR|DVALs

${FIRST|LAST}                 #First|last value

${MIN|MAX}                    #
${SUM}                        #
${AVG}                        #
${DATAPOINT_COUNT}            #Length

${FIRST_LAST_RANGE}           #LAST - FIRST
${MIN_MAX_RANGE}              #MAX - MIN

${FIRST|LAST_TIME}
${MIN|MAX_TIME}
${FIRST_LAST_TIME_RANGE}
${MIN|MAX_TIME_RANGE}         #Same but with timestamps

${FIRST|LAST_TIME_RELATIVE}
${MIN|MAX_TIME_RELATIVE}      #Same but with duration since timestamps

${PROP('Region')}             #REGION

${PROP('MetricName')}         #'METRIC'
${PROP('Namespace')}          #NAMESPACE
${PROP('Dim.DVAR')}           #DVAL

${PROP('Period')}             #PERIOD
${PROP('Stat')}               #Current STAT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC INSIGHT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_INSIGHT                #SQL-like expression to compute a query on METRIC_DATUMs
                              #Syntax follows
                              #Returns ARR|ARR_ARR (one|multiple METRIC_DATA_RESs) depending on whether GROUP BY is used

SELECT ISTAT(NAME)            #Use METRIC with MetricName NAME and Namespace NAMESPACE
FROM NAMESPACE                #Aggregate each PERIOD according to ISTAT
                              #NAMESPACE can also be SCHEMA(NAMESPACE[, DVAR, ...])
                              #  - same as NAMESPACE, but only for METRICs with exact same DVAR
                              #  - must also have same Dimension count, including 0
WHERE DVAR [!]= DVAL [AND ...]#Filter by DVAL
GROUP BY DVAR[, ...]          #Splits into multiple ARRs grouped by DVAR
                              #Missing DVAR are named "Other"
ORDER BY ISTAT() [DESC|ASC]   #Sort ARRs created by GROUP BY
                              #Def: ASC
LIMIT NUM                     #Only first NUM values
                              #Def|max NUM: 500

QUOTING ==>                   #'-quote: around DVAL
                              #"-quote:
                              #  - around NAME|NAMESPACE|DVAR unless only [:alnum:]_ and not reserved word
                              #  - reserved word: big list, documented online
                              #\-escape: on ' " inside ' " quote


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METRIC MATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_MATH                   #DSL to compute a query on METRIC_DATUMs
                              #While METRIC_INSIGHT is more focused on filtering|grouping|sorting|slicing,
                              #METRIC_MATH is more focused on transforming and combining multiple METRICs|METRIC_INSIGHT
                              #Return value must be either:
                              #  - ARR: one METRIC_DATA_RES
                              #  - ARR_ARR: multiple METRIC_DATA_RESs

MVAR                          #ARR. METRIC_DATA_RES with matching Id
mNUM                          #ARR. METRIC_DATA_RES number NUM

METRICS([STR])                #ARR_ARR. All METRIC_DATA_RESs, except ones using METRIC_MATH
                              #If STR, only ones with MVAR including STR
METRIC_COUNT(ARR_ARR)         #NUM. ARR_ARR.length

[NUM,...]                     #ARR
[ARR,...]                     #ARR_ARR
[ARR_ARR,...]                 #Concatenated ARR_ARR
VAL                           #NUM, ARR or ARR_ARR

BOOL                          #Actually 0|1
UNDEFINED ==>                 #Converted to 0
                              #If division by 0, VAL ignored
                              #Also called "missing value"

VAL + - * / ^ VAL2            #VAL3
-VAL                          #VAL2
VAL == != <= >= < > VAL2      #VAL3
VAL && || VAL2                #VAL3
VAL AND OR VAL2               #Same

FIRST|LAST(ARR)               #NUM

ABS(VAL)                      #VAL2
CEIL(VAL)                     #VAL2
FLOOR(VAL)                    #VAL2
LOG[10](VAL)                  #VAL2

MIN|MAX(ARR|ARR_ARR)          #VAL|ARR
SUM(ARR|ARR_ARR)              #VAL|ARR
AVG(ARR|ARR_ARR)              #VAL|ARR
STDDEV(ARR|ARR_ARR)           #VAL|ARR
DATAPOINT_COUNT(ARR|ARR_ARR)  #VAL|ARR. Length, after ARR_ARR flattening, excluding undefined

DIFF(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value.
DIFF_TIME(ARR|ARR_ARR)        #ARR|ARR_ARR. Difference with previous timestamp (in secs)
RATE(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value, divided by difference between timestamps (in secs)
RUNNING_SUM(ARR|ARR_ARR)      #ARR|ARR_ARR. Sum with all previous values

TIME_SERIES(NUM)              #ARR of repeated value NUM
FILL(ARR|ARR_ARR, FILLER)     #ARR|ARR_ARR, but fills undefined according to FILLER:
                              #  - NUM: repeated value
                              #  - ARR: serial value
                              #  - REPEAT: last non-undefined value
                              #  - LINEAR: interpolation between last|next non-undefined value

SLICE(ARR_ARR, NUM[, NUM2])   #ARR_ARR, but only from index NUM (inclusive) to NUM2 (exclusive, def: end)
REMOVE_EMPTY(ARR_ARR)         #ARR_ARR, but without ARR of length 0
SORT(ARR_ARR, FUNC, ASC|DESC  #ARR_ARR, but sorted.
 [, NUM])                     #Sort using each FUNC(ARR) as key, with FUNC being MIN|MAX|SUM|AVG
                              #If NUM, truncates to NUM values

PERIOD(ARR)                   #NUM. PERIOD
EPOCH(ARR)                    #ARR2. Timestamps of ARR, but converted to DATE_NUM
MINUTE(ARR)                   #ARR2. Timestamps of ARR, but only with the minute
HOUR(ARR)                     #Same with hour
DAY(ARR)                      #Same with day of the week
DATE(ARR)                     #Same with day of the month
MONTH(ARR)                    #Same with month
YEAR(ARR)                     #Same with year

IF(BOOL[_ARR],                #ARR3 with each element:
 NUM|ARR[, NUM2|ARR2])        #  - taken either from NUM|ARR or NUM2|ARR2
                              #  - depending on BOOL[_ARR]
                              #If some values are ARR and not others, scalar values are repeated
                              #undefined in:
                              #  - BOOL_ARR -> undefined
                              #  - NUM|ARR -> 0
                              #  - NUM2|ARR2 -> undefined
                              #Def NUM2: undefined
                              #Def ARR2: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC SEARCH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH('QUERY', 'STAT')       #METRIC_MATH function returning ARR_ARR: METRICs mathing QUERY
                              #QUERY: '[FILTERS] [TERMS]'
                              #FILTERS: {NAMESPACE[, DVAR, ...]}
                              #  - NAMESPACE: only METRICs with that Namespace
                              #  - DVAR:
                              #     - group METRICs by DVAL
                              #     - STAT is applied on those groups
                              #     - ignore METRICs without that DVAR
                              #TERMS: list of TERM separated by:
                              #  - space: same as AND
                              #  - AND|OR|NOT
                              #  - parenthesis
                              #TERM: [TYPE=]["]...["]
                              #  - include only METRICs with a matching MetricName|Namespace|DVAR|DVAL
                              #  - unless "-quote:
                              #     - partial match
                              #     - tokenize with punctuation and camelCase
                              #        - case insensitive, but only after tokenization
                              #        - e.g. oneTwo -> oneTwo OR (one AND two)
                              #           - oneTwo case-sensitive, one|two case-insensitive
                              #  - can also use AND|OR|NOT|parenthesis in the value, e.g. TYPE = ("..." OR "...")
                              #TYPE: value type among:
                              #  - MetricName
                              #  - Namespace
                              #  - DVAR
                              #"-quote:
                              #  - required when using spaces or non-ASCII chars
                              #  - must \-escape " \ ( )
                              #Max 1e3 chars for QUERY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC STREAM         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricStream()             #Req: METRIC_STREAM
                              #  - no Arn, CreationDate, LastUpdateDate, State
                              #  - RoleName -> RoleArn
                              #Res: METRIC_STREAM
                              #  - only Arn
StartMetricStreams()          #Req: METRIC_STREAM
                              #  - only Name -> Names
                              #Res: empty
                              #Set METRIC_STREAM.State 'running'
StopMetricStreams()           #Req: METRIC_STREAM
                              #  - only Name -> Names
                              #Res: empty
                              #Set METRIC_STREAM.State 'stopped'
GetMetricStream()             #Req: METRIC_STREAM
                              #  - only Name
                              #Res: METRIC_STREAM
ListMetricStreams()           #Req: empty
                              #Res: Entries METRIC_STREAM_ARR
                              #  - no Include|ExcludeFilters, IncludeLinkedAccountsMetrics, RoleName, StatisticsConfigurations
DeleteMetricStream()          #Req: METRIC_STREAM
                              #  - only Name
                              #Res: empty

METRIC_STREAM                 #Redirect all of an ACCOUNT's METRIC_DATUMs to a Kinesis FIREHOSE
METRIC_STREAM.Arn             #METRIC_STREAM_ARN. 'arn:aws:cloudwatch:REGION:ACCOUNT_ID:metric-stream/METRIC_STREAM'
METRIC_STREAM.Name            #'METRIC_STREAM'
METRIC_STREAM.CreationDate    #'DATE'
METRIC_STREAM.LastUpdateDate  #'DATE'

METRIC_STREAM.FirehoseArn     #FIREHOSE_ARN
METRIC_STREAM.RoleName        #'ROLE' assumed by FIREHOSE
                              #Must allow firehose:PutRecord[Batch] PACTIONs
                              #Current PRINCIPAL must have iam:PassRole PACTION

METRIC_STREAM.OutputFormat    #'json' or 'opentelemetry0.7'

METRIC_STREAM.State           #'running' (def) or 'stopped'

METRIC_STREAM
 .Include|ExcludeFilters      #METRIC_STREAM_FILTER_ARR
METRIC_STREAM_FILTER          #Include|exclude METRICs with a given NAMESPACE
METRIC_STREAM_FILTER.Namespace#NAMESPACE

METRIC_STREAM
 .StatisticsConfigurations    #METRIC_STREAM_STAT_ARR
METRIC_STREAM_STAT            #Specify XSTATs to compute for specific METRICs
METRIC_STREAM_STAT            #'XSTAT'_ARR
 .AdditionalStatistics        #If OutputFormat 'opentelemetry0.7', can only use 'pNUM'
                              #Always included: Min|Max|Sum|SampleCount
                              #Max 20
METRIC_STREAM_STAT            #METRIC_STREAM_METRIC_ARR
 .IncludeMetrics              #Max 100
METRIC_STREAM_METRIC          #Specific METRIC targetted by METRIC_STREAM_STAT
METRIC_STREAM_METRIC
 .MetricName                  #'METRIC'
METRIC_STREAM_METRIC
 .Namespace                   #NAMESPACE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM UPDATE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SetAlarmState()               #Req: ALARM
                              #  - only AlarmName, StateReason, StateReasonData, StateValue
                              #Res: empty
EnableAlarmActions()          #Req: ALARM
                              #  - only AlarmName -> AlarmNames ARR
                              #Res: empty
                              #Set ActionsEnabled true
DisableAlarmActions()         #Req: ALARM
                              #  - only AlarmName -> AlarmNames ARR
                              #Res: empty
                              #Set ActionsEnabled false

ALARM                         #Poller for METRICs.
                              #Trigger actions when a specific condition changes.
                              #Max 5000
ALARM.AlarmArn                #ALARM_ARN. 'arn:aws:cloudwatch:REGION:ACCOUNT_ID:alarm:ALARM'
ALARM.AlarmName               #'ALARM'
ALARM.AlarmDescription        #STR
ALARM.AlarmConfiguration
 UpdatedTimestamp             #'DATE'

ALARM.ActionsEnabled          #BOOL (def: true). To disable ALARM

ALARM.StateValue              #One of:
                              #  - "OK": no feedback
                              #  - "INSUFFICIENT_DATA":
                              #     - pending feedback
                              #     - initial state when creating an ALARM
                              #  - "ALARM": feedback
                              #Can be manually set, for testing.
ALARM.StateReason             #STR. Description of StateValue
ALARM.StateReasonData         #'JSON'. Data related to StateValue
ALARM.StateTransitioned
 Timestamp                    #'DATE' of last StateValue change
ALARM.StateUpdatedTimestamp   #'DATE' of last StateValue|EvaluationState change

ALARM.AlarmActions            #ARN_ARR. Trigger action when StateValue becomes 'ALARM'
                              #ARN can be:
                              #  - METRIC_ALARM:
                              #     - "arn:aws:automate:REGION:ec2:stop|terminate|reboot|recover"
                              #     - "arn:aws:swf:REGION:ACCOUNT_ID:action/actions/AWS_EC2.InstanceId.Stop|Terminate|Reboot|Recover/1.0"
                              #     - "arn:aws:autoscaling:REGION:ACCOUNT_ID:scalingPolicy:POLICY_MID:autoScalingGroupName/AUTO_SCALING_GROUP:policyName/POLICY"
                              #     - "arn:aws:sns:REGION:ACCOUNT_ID:TOPIC:autoScalingGroupName/AUTO_SCALING_GROUP:policyName/POLICY"
                              #     - "arn:aws:ssm-incidents::ACCOUNT_ID:responseplan/RESPONSE_PLAN"
                              #  - COMPOSITE_ALARM:
                              #     - SNS_TOPIC_ARN
                              #  - both:
                              #     - "arn:aws:ssm:REGION:ACCOUNT_ID:opsitem:SEVERITY[#CATEGORY=CATEGORY]"
ALARM.InsufficientDataActions #Same for StateValue 'INSUFICIENT_DATA'
ALARM.OKDataActions           #Same for StateValue 'OK'

AWSServiceRole                #SERVICE_LINKED_ROLE used by CloudWatch to perform EC2 ALARM.*Actions
 ForCloudWatchEvents          #Allows ec2:Stop|Terminate|RecoverInstances() and ec2:DescribeInstances*()
                              #Created by the first PutMetricAlarm() using EC2 actions
                              #  - i.e. that call requires iam:CreateServiceLinkedRole() PACTION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ALARM LIST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DescribeAlarms()              #Req: ALL_ALARMS_REQ
                              #Res: ALL_ALARMS
DeleteAlarms()                #Req: ALL_ALARMS_REQ
                              #  - only AlarmNames
                              #Res: empty

ALL_ALARMS_REQ.AlarmTypes     #'MetricAlarm|CompositeAlarm'_ARR (def: ['MetricAlarm'])
ALL_ALARMS_REQ.AlarmNames     #'ALARM'_ARR
ALL_ALARMS_REQ.AlarmNamePrefix#STR. Filter by 'ALARM' starting with STR
ALL_ALARMS_REQ.ActionPrefix   #STR. Filter by ALARM.*Actions starting with STR
ALL_ALARMS_REQ.StateValue     #STR. Filter by ALARM.StateValue

ALL_ALARMS_REQ                #'ALARM'. Filter by parent COMPOSITE_ALARM
 .ParentsOfAlarmName          #Cannot use any other ALL_ALARMS_REQ.*
                              #Only ALL_ALARMS.*.AlarmArn|Name is returned
ALL_ALARMS_REQ                #'ALARM'. Filter by children ALARM
 .ChildrenOfAlarmName         #Cannot use any other ALL_ALARMS_REQ.*
                              #Only ALL_ALARMS.*.AlarmArn|Name|StateValue|StateUpdatedTimestamp is returned

ALL_ALARMS.MetricAlarms       #METRIC_ALARM_ARR
ALL_ALARMS.CompositeAlarms    #COMPOSITE_ALARM_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM METRIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricAlarm()              #Req: METRIC_ALARM
                              #  - no AlarmArn,  AlarmConfigurationUpdatedTimestamp, *State*
                              #Res: empty
DescribeAlarmsForMetric()     #Req: METRIC_ALARM
                              #  - only Dimensions, ExtendedStatistic, MetricName, Namespace, Period, Statistic, Unit
                              #Res: MetricAlarms METRIC_ALARM_ARR

METRIC_ALARM                  #Simple ALARM
METRIC_ALARM.*                #Any from ALARM.*

METRIC_ALARM.MetricName
METRIC_ALARM.Namespace
METRIC_ALARM.Dimensions       #Like METRIC.*
METRIC_ALARM.Unit             #METRIC_DATUM.Unit
METRIC_ALARM.Period
METRIC_ALARM.Statistic
METRIC_ALARM.ExtendedStatistic#Like METRIC_AGGR_REQ.*

METRIC_ALARM.Metrics          #METRIC_DATA_REQ_ARR returning the values to evaluate
                              #Advanced alternative to METRIC_ALARM.MetricName|Period|Statistic
                              #Exactly one METRIC_DATA_REQ.ReturnData must be true
                              #  - it is used to change the StateValue
                              #Max 10 with MetricStat + 10 with Expression

METRIC_ALARM
 .ComparisonOperator          #'Greater|LessThan[OrEqualTo]Threshold'
METRIC_ALARM.Threshold        #NUM. Change StateValue based on VAL OP Threshold
                              #  - VAL is each METRIC response values (after PERIOD aggregation)
                              #  - OP is ComparisonOperator

METRIC_ALARM.EvaluationPeriods#NUM of periods with same evaluation before changing StateValue
                              #Def: 1
METRIC_ALARM.DatapointsToAlarm#NUM of DATAPOINTs with same evaluation before changing StateValue
                              #Def: 1
METRIC_ALARM.Evaluate         #Do not change StateValue if there are not enough DATAPOINTs to be statistically significant.
 LowSampleCountPercentile     #Only with ESTAT
                              #Either 'evaluate' (false, def) or 'ignore' (true)
METRIC_ALARM.TreatMissingData #How undefined values are handled among:
                              #  - 'missing' (def)
                              #  - 'ignore': filter out
                              #  - 'breaching': always 'ALARM'
                              #  - 'notBreaching': always 'OK'

METRIC_ALARM.EvaluationState  #'PARTIAL_DATA' when METRIC response values are being paginated


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ALARM COMPOSITE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutCompositeAlarm()           #Req: COMPOSITE_ALARM
                              #  - no AlarmArn,  AlarmConfigurationUpdatedTimestamp, *State*
                              #  - no ActionsSuppressedBy, ActionsSuppressedReason
                              #Res: empty

COMPOSITE_ALARM               #Combination of multiple ALARMs
                              #Max 100 ALARMs. Each ALARM can be used by max 150 COMPOSITE_ALARMs
COMPOSITE_ALARM.*             #Any from ALARM.*

COMPOSITE_ALARM.AlarmRule     #STR. Compute StateValue based on underlying ALARMs StateValues.
                              #'[NOT] ALARM_STATE [AND|OR ...]'
                              #  - can use parenthesis
                              #  - max 500 ALARM_STATEs, 1e4 chars
                              #ALARM_STATE can be:
                              #  - OK|INSUFFICIENT_DATA|ALARM('ALARM'|ALARM_ARN): true|false if has that StateValue
                              #  - TRUE|FALSE: meant for testing
                              #Final result true|false -> StateValue 'ALARM|OK'

COMPOSITE_ALARM               #'ALARM'|ALARM_ARN.
 .ActionsSuppressor           #If that ALARM StateValue is 'ALARM', do not trigger COMPOSITE_ALARM.*Actions
COMPOSITE_ALARM               #NUM (in secs, def: 0)
 .ActionsSuppressorWaitPeriod #Duration for ActionsSuppressor to suppress *Actions, when its StateValue is not 'ALARM'
COMPOSITE_ALARM.Actions       #NUM (in secs, def: 0)
 SuppressorExtensionPeriod    #Additional duration for ActionsSuppressor to suppress *Actions, once its StateValue is not 'ALARM' anymore
COMPOSITE_ALARM               #When ActionsSuppressor is active, the main reason:
 .ActionsSuppressedBy         #  - 'Alarm': normal
                              #  - 'WaitPeriod': ActionsSuppressorWaitPeriod
                              #  - 'ExtensionPeriod': ActionsSuppressorExtensionPeriod
COMPOSITE_ALARM
 .ActionsSuppressedReason     #STR. Additional reason for ActionsSupressedBy


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM HISTORY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DescribeAlarmHistory()        #Req: ALARM_HISTORY_ITEM
                              #  - no HistoryData, HistorySummary
                              #  - AlarmType -> AlarmTypes ARR
                              #  - Timestamp -> StartDate|EndDate 'DATE'
                              #  - also ScanBy 'TimestampDescending|TimestampAscending': sorting order
                              #Res: AlarmHistoryItems ALARM_HISTORY_ITEM_ARR

ALARM_HISTORY_ITEM            #History of ALARMs change of propertis, including StateValue
                              #Only kept for 2 weeks
ALARM_HISTORY_ITEM.AlarmName  #'ALARM'
ALARM_HISTORY_ITEM.AlarmType  #'MetricAlarm|CompositeAlarm'

ALARM_HISTORY_ITEM.Timestamp  #'DATE'

ALARM_HISTORY_ITEM            #One of:
 .HistoryItemType             #  - 'StateUpdate': StateValue change
                              #  - 'ConfigurationUpdate'
                              #  - 'Action'
ALARM_HISTORY_ITEM
 .HistorySummary              #STR. Description
ALARM_HISTORY_ITEM.HistoryData#'JSON'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ANOMALY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutAnomalyDetector()          #Req: ANOMALY_DETECTOR
                              #  - no StateValue
                              #Res: empty
DescribeAnomalyDetectors()    #Req: ANOMALY_DETECTOR
                              #  - only AnomalyDetectorTypes
                              #Res: AnomalyDetectors ANOMALY_DETECTOR_ARR
DeleteAnomalyDetector()       #Req: ANOMALY_DETECTOR
                              #  - only MetricMathAnomalyDetector, SingleMetricAnomalyDetector
                              #Res: empty

ANOMALY_DETECTOR              #Guess expected values of a METRIC using machine learning
                              #Generates upper|lower threshold
                              #  - can differ per time of day, etc.
                              #Shown in graphs
                              #Based on last 2 weeks of METRIC_DATUMs
ANOMALY_DETECTOR.Configuration#ANOMALY_DETECTOR_CONF

ANOMALY_DETECTOR.StateValue   #Whether training:
                              #  - 'PENDING_TRAINING': not started
                              #  - 'TRAINED_INSUFFICIENT_DATA': ongoing
                              #  - 'TRAINED': done
ANOMALY_DETECTOR_CONF         #RANGE_ARR
 .ExcludedTimeRanges          #Max 10
RANGE                         #Specific time range to exclude for training
RANGE.StartTime|EndTime       #'DATE'
ANOMALY_DETECTOR_CONF
 .MetricTimezone              #STR. Def: UTC

ANOMALY_DETECTOR
 .SingleMetricAnomalyDetector #SIMPLE_DETECTOR
SIMPLE_DETECTOR               #Single METRIC, aggregated per PERIOD with XSTAT
SIMPLE_DETECTOR.MetricName
SIMPLE_DETECTOR.Namespace
SIMPLE_DETECTOR.Dimensions    #Like METRIC.*
SIMPLE_DETECTOR.Stat          #'XSTAT'

ANOMALY_DETECTOR
 .MetricMathAnomalyDetector   #MATH_DETECTOR
MATH_DETECTOR                 #Advanced alternative to SIMPLE_DETECTOR, using METRIC_MATH|METRIC_INSIGHT
MATH_DETECTOR
 .MetricDataQueries           #METRIC_DATA_REQ_ARR. Like METRIC_ALARM.Metrics

ANOMALY_DETECTION_BAND        #METRIC_MATH function using ANOMALY_DETECTOR
 (ARR[, NUM])                 #ANOMALY_DETECTOR specified either:
                              #  - SIMPLE_DETECTOR: using same MetricName
                              #  - MATH_DETECTOR: parent
                              #  - otherwise: automatically created
                              #Returns an ARR_ARR with two elements: upper|lower threshold
                              #NUM (def: 2) is number of standard deviations between mean and each threshold
                              #Cannot be used with:
                              #  - METRICS|SEARCH()
                              #  - StorageResolution 1
                              #When using multiple METRICs:
                              #  - max 10 METRICs
                              #  - must all have same PERIOD
                              #Max 1 per METRIC_MATH
METRIC_ALARM.ThresholdMetricId#'MVAR' of a METRIC_DATA_RES using ANOMALY_DETECTION_BAND
                              #Alternative to METRIC_ALARM.Threshold: use ANOMALY_DETECTOR's upper|lower threshold
                              #instead of single static value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DASHBOARD           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDashboard()                #Req: DASHBOARD
                              #  - no DashboarArn, LastModified, Size
                              #Res: DashboardValidationMessages DASHBOARD_FAILURE_ARR
GetDashboard()                #Req: DASHBOARD
                              #  - only DashboardName
                              #Res: DASHBOARD
                              #  - no LastModified, Size
ListDashboards()              #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNamePrefix
                              #Res: DashboardEntries DASHBOARD_ARR
                              #  - no DashboardBody
DeleteDashboards()            #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNames ARR
                              #Res: empty

DASHBOARD                     #Set of UI graphs
                              #Not REGION-specific
DASHBOARD.DashboardArn        #DASHBOARD_ARN. 'arn:aws:cloudwatch::ACCOUNT_ID:dashboard/DASHBOARD'
DASHBOARD.DashboardName       #'DASHBOARD'
DASHBOARD.LastModified        #'DATE'

DASHBOARD.Size                #NUM (in bytes) of DBODY
DASHBOARD.DashboardBody       #DBODY

DASHBOARD_FAILURE             #API error
DASHBOARD_FAILURE.Message     #'ERROR'
DASHBOARD_FAILURE.DataPath    #'VAR'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DASHBOARD BODY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DBODY                         #JSON defining a DASHBOARD content

DBODY.start|end               #'DATE'|DURATION of first|last METRIC_DATUM
DBODY.periodOverride          #Either 'inherit' or 'auto' (def)
                              #If 'auto', DWIDGET.properties.PERIOD might change to adapt to DBODY.start|end

DBODY.widgets                 #DWIDGET_ARR
                              #Max 500
DWIDGET.type                  #'text|log|metric|explorer|alarm'
DWIDGET.properties            #DTEXT|DLOG|DMETRICS|DEXPLORER|DALARM

DWIDGET.x|y                   #NUM position on a 24x1000 grid
                              #Def: next space available
DWIDGET.width|height          #NUM size on a 24x1000 grid
                              #Def: 6x6


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DASHBOARD TEXT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEXT                         #Widget showing text

DTEXT.markdown                #'MARKDOWN'

DTEXT.background              #'solid' (def) or 'transparent'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DASHBOARD LOGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DLOG                          #Widget showing CloudWatch Logs query

DLOG.query                    #STR. CloudWatch Logs query

DLOG.view                     #'table' (def), 'timeSeries', 'bar' or 'pie'

DLOG.title                    #STR
DLOG.region                   #REGION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DASHBOARD METRICS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DMETRICS                      #Widget showing METRICs

DMETRICS.period
DMETRICS.stat
DMETRICS.region
DMETRICS.timezone
DMETRICS.liveData
DMETRICS.stacked
DMETRICS.title
DMETRICS.legend
DMETRICS.yAxis
 .left|right.min|max
DMETRICS.annotations
 .horizontal|vertical         #Like WIDGET.*
DMETRICS.metrics              #Like WIDGET.* except:
                              #  - if using WOPTS.expression, must:
                              #     - put WOPTS in an ARR of length 1
                              #     - only use WOPTS.expression|id|label
                              #  - can use WOPTS.region REGION

DMETRICS.view                 #'timeSeries' (def), 'bar', 'pie', 'gauge' or 'singleValue'
DMETRICS.sparkline            #BOOL (def: false).
                              #Show a small timeseries next to value
                              #Only with view 'singleValue'
DMETRICS.annotations.alarms   #ALARM_ARN. Show ALARMs history as comments

DMETRICS.yAxis
 .left|right.label            #LABEL
DMETRICS.yAxis
 .left|right.showUnits        #BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            WIDGET             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricWidgetImage()        #Req: WIDGET_IMAGE_REQ
                              #Res: WIDGET_IMAGE

WIDGET_IMAGE_REQ.MetricWidget #'WIDGET'
WIDGET_IMAGE_REQ.OutputFormat #Either:
                              #  - 'png' (def): response is normal XML, with WIDGET_IMAGE
                              #  - 'image/png': response is PNG directly

WIDGET_IMAGE                  #Individual graph of METRICs (outside of a DASHBOARD)
WIDGET_IMAGE.MetricWidgetImage#'PNG_BASE64'. Image of the graph

WIDGET                        #JSON defining a graph for specific METRICs

WIDGET.metrics                #WMETRIC_ARR
                              #Max 100
WMETRIC                       #METRIC.
                              #ARR with positional elements
                              #Each WMETRIC[*] can use '.' to re-use last WMETRIC's value
WMETRIC[0]                    #NAMESPACE
WMETRIC[1]                    #'METRIC'
WMETRIC[2|4|...]              #DVAR
WMETRIC[3|5|...]              #DVAL

WMETRIC[-1]                   #WOPTS
WOPTS.label                   #LABEL shown in WIDGET.legend. Def: '${LABEL}'
WOPTS.yAxis                   #'left' (def) or 'right'. Where to show ordinate axis
WOPTS.color                   #'XXXXXX'

WOPTS|WIDGET.period           #PERIOD (def: 5m)
WOPTS|WIDGET.stat             #'XSTAT' applied to values for each PERIOD

WOPTS.expression              #METRIC_MATH|METRIC_INSIGHT applied to values
WOPTS.id                      #'MVAR' to use in another WMETRIC[-1].expression
WOPTS.visible                 #BOOL (def: true)
                              #Same goal as METRIC_DATA_REQ.ReturnData

WIDGET.region                 #REGION

WIDGET.start|end              #'DATE'|DURATION of first|last METRIC_DATUM
                              #Def: '-PT3H' and '-PT0H'
WIDGET.timezone               #'+NNNN' (def: '+0000')
WIDGET.liveData               #BOOL (def: false)
                              #If true, includes most recent data even if part of ongoing PERIOD

WIDGET.view                   #'timeSeries' (def), 'bar' or 'pie'
                              #Graph type
WIDGET.stacked                #BOOL (def: false)
                              #Timeseries: stacked or separate lines

WIDGET.height                 #NUM (in px, def: 400)
                              #Max 2000
WIDGET.width                  #NUM (in px, def: 600)
                              #Max 2000
WIDGET.theme                  #'light' (def) or 'dark'

WIDGET.title                  #STR. Shown on top
WIDGET.legend.position        #'bottom' (def), 'right' or 'hidden'
                              #Where legends are shown
WIDGET.yAxis
 .left|right.min|max          #NUM. Min|max limits for ordinate axis

WIDGET.annotations
 .horizontal|vertical         #WANNOT[D]_ARR
WANNOTD                       #Annotation pair, with shading in-between
                              #WANNOT_ARR with two elements:
                              #  - WANNOT (upper band): no fill
                              #  - WANNOT2 (lower band): only value|label
WANNOT                        #Comment on a specific DATAPOINT, shown either on left|right (horizontal) or below (vertical)
WANNOT.value                  #NUM (if horizontal) or 'DATE' (if vertical) for position
WANNOT.label
WANNOT.color
WANNOT.yAxis
WANNOT.visible                #Like WOPTS.*
WANNOT.fill                   #'none' (def) or 'above|below'. Grey vertical line.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      DASHBOARD EXPLORER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEXPLORER                     #Widget showing multiple METRICs graphs interactively

DEXPLORER.metrics             #DXMETRIC_ARR
                              #Specify which METRICs to show
DXMETRIC.metricName           #'METRIC'
DXMETRIC.resourceType         #Resource publishing the METRIC
                              #Same format as CloudFormation, e.g. 'AWS::SERVICE::RESOURCE_TYPE'

DEXPLORER.labels              #FILTER_ARR
                              #Filter which METRICs to show
FILTER.key                    #PROP_KEY
FILTER.value                  #VAL

DEXPLORER.aggregateBy         #AGGR_BY
                              #Combine multiple METRICs sharing same PROP_KEY values
AGGR_BY.key                   #PROP_KEY
AGGR_BY.func                  #'ISTAT'

DEXPLORER.splitBy             #PROP_KEY_ARR
                              #Split multiple METRICs into different graphs

PROP_KEY                      #Either:
                              #  - 'TAG'
                              #  - EC2: Architecture, Hypervisor, CoreCount, ImageId, InstanceId, InstanceLifecycle,
                              #    InstanceType, InstanceFamily, InstanceSize, Affinity, AvailabilityZone, Tenancy,
                              #    Platform, RootDeviceType SecurityGroups, State, SubnetId, VirtualizationType, VpcId
                              #  - Lambda: FunctionName, Runtime, Language, MemorySize, Version, SecurityGroupIds,
                              #    SubnetIds, SubnetIdCount, VpcId, Timeout

DEXPLORER.period              #PERIOD (def: 5m)
DXMETRIC.stat                 #'XSTAT' to aggregate values per PERIOD

DEXPLORER.title               #STR (def: 'Explorer')
DEXPLORER.widgetOptions       #DCONF
DCONF.view
DCONF.stacked
DCONF.legend.position         #Like WIDGET.*
DCONF.rowsPerPage             #NUM
DCONF.widgetsPerRow           #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DASHBOARD ALARM        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DALARM                        #Widget showing ALARMs
DALARM.alarms                 #ALARM_ARN_ARR
                              #Max 100
DALARM.states                 #STR_ARR (def: any). Filter by StateValue.
DALARM.sortBy                 #One of:
                              #  - 'default' (def): by AlarmName
                              #  - 'timestamp': by AlarmConfigurationUpdatedTimestamp
                              #  - 'stateUpdatedTimestamp': by StateValue, then AlarmConfigurationUpdatedTimestamp
DALARM.title                  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagResource()                 #Req: ANY_TAGS
                              #Res: empty
UntagResource()               #Req: ANY_TAGS
                              #  - Tags -> TagKeys 'TAG'_ARR
                              #Res: empty
ListTagsForResource()         #Req: ANY_TAGS
                              #  - only ResourceARN
                              #Res: ANY_TAGS
                              #  - no ResourceARN

ANY_TAGS                      #
ANY_TAGS.ResourceARN          #RESOURCE_ARN, among METRIC_STREAM|ALARM|IRULE
ANY_TAGS.Tags                 #

RESOURCE.Tags                 #Can be specified in PutRESOURCE() request but not returned in any responses


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT RULE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutInsightRule()              #Req: IRULE
                              #  - only Definition|Name|State -> RuleDefinition|RuleName|RuleState
                              #Res: empty
EnableInsightRules()          #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures IFAILURE_ARR
DisableInsightRules()         #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures FAILURE_ARR
DescribeInsightRules()        #Req: empty
                              #Res: InsightRules IRULE_ARR
DeleteInsightRules()          #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures IFAILURE_ARR

IRULE                         #"Contributor insight rule"
IRULE.Definition              #
IRULE.ManagedRule             #
IRULE.Name                    #
IRULE.Schema                  #
IRULE.State                   #

IFAILURE                      #
IFAILURE.ExceptionType        #
IFAILURE.FailureCode          #
IFAILURE.FailureDescription   #
IFAILURE.FailureResource      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     INSIGHT RULE MANAGED      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListManagedInsightRules()     #Req: MANAGED_IRULE
                              #  - only ResourceARN
                              #Res: ManagedRules MANAGED_IRULE_ARR
PutManagedInsightRules()      #Req: ManagedRules MANAGED_IRULE_ARR
                              #Res: Failures IFAILURE_ARR

MANAGED_IRULE                 #
MANAGED_IRULE.ResourceARN     #'arn:aws:cloudwatch:REGION:ACCOUNT_ID:insight-rule/IRULE'???
MANAGED_IRULE.TemplateName    #

MANAGED_IRULE.RuleState       #RULE_STATE
RULE_STATE                    #
RULE_STATE.RuleName           #
RULE_STATE.State              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INSIGHT RULE REPORT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetInsightRuleReport()        #Req: IRULE_REPORT_REQ
                              #Res: IRULE_REPORT

IRULE_REPORT_REQ              #
IRULE_REPORT_REQ.EndTime      #
IRULE_REPORT_REQ
 .MaxContributorCount         #
IRULE_REPORT_REQ.Metrics      #
IRULE_REPORT_REQ.OrderBy      #
IRULE_REPORT_REQ.Period       #
IRULE_REPORT_REQ.RuleName     #
IRULE_REPORT_REQ.StartTime    #

IRULE_REPORT                  #
IRULE_REPORT.AggregateValue   #
IRULE_REPORT
 .AggregationStatistic        #
IRULE_REPORT
 .ApproximateUniqueCount      #
IRULE_REPORT.KeyLabels        #

IRULE_REPORT.Contributors     #CONTRIBUTOR_ARR
CONTRIBUTOR                   #
CONTRIBUTOR
 .ApproximateAggregateValue   #
CONTRIBUTOR.Keys              #

CONTRIBUTOR.Datapoints        #CDATAPOINT_ARR
CDATAPOINT                    #
CDATAPOINT.ApproximateValue   #
CDATAPOINT.Timestamp          #

IRULE_REPORT.MetricDatapoints #CSDATAPOINT_ARR
CSDATAPOINT                   #
CSDATAPOINT.Average           #
CSDATAPOINT
 .MaxContributorValue         #
CSDATAPOINT.Maximum           #
CSDATAPOINT.Minimum           #
CSDATAPOINT.SampleCount       #
CSDATAPOINT.Sum               #
CSDATAPOINT.Timestamp         #
CSDATAPOINT.UniqueContributors#

INSIGHT_RULE_METRIC() in METRIC_MATH???
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-GraphReportData.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     METRIC CROSS-ACCOUNT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LINKING ACCOUNTS ==>          #Allowing one ACCOUNT ("monitoring") to access CloudWatch of another ACCOUNT ("sharing|source")

AWSServiceRole                #SERVICE_LINKED_ROLE to create in monitoring ACCOUNT
 ForCloudWatchCrossAccount    #Used by CloudWatch to assume CloudWatch-CrossAccountSharingRole
                              #Can be done from the UI
CloudWatch-CrossAccountAccess #AWS managed POLICY used by AWSServiceRoleForCloudWatchCrossAccount
                              #Allows sts:AssumeRole() on CloudWatch-CrossAccountSharing* ROLEs
CloudWatch-                   #SERVICE_LINKED_ROLE to create in source ACCOUNT
 CrossAccountSharingRole      #Assumed by CloudWatch in monitoring ACCOUNT

METRIC_LIST_REQ
 .IncludeLinkedAccounts       #BOOL (def: false). Include METRICs from source ACCOUNTs
METRIC_STREAM
 .IncludeLinkedAccountsMetrics#Same

METRIC_LIST_REQ.OwningAccount
METRIC_DATA_REQ.AccountId     #ACCOUNT_ID of the source ACCOUNT
WMETRIC|WOPTS.accountId       #ACCOUNT_ID of the source ACCOUNT
                              #Only inside DBODY
METRIC_LIST.OwningAccounts    #ACCOUNT_ID_ARR of each source ACCOUNT for each METRIC

METRIC_MATH                   #When cross-account, cannot use: INSIGHT_RULE_METRIC|ANOMALY_DETECTION_BAND|SERVICE_QUOTA()
:aws.AccountId                #Can be used as SEARCH() TYPE
                              #  - ACCOUNT_ID when cross-account
                              #  - value can be "LOCAL" (current ACCOUNT_ID)

${PROP('AccountId')}          #Dynamic label. Source ACCOUNT_ID
${PROP('AccountLabel')}       #Dynamic label. Source ACCOUNT label
