
              
   CLOUDWATCH  
              



TODO ==>
  - Lambda + CloudWatch:
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/lambda-monitoring.html

VERSION ==>                   #2013-02-22

SUMMARY ==>                   #???
                              #Check stats/metrics (e.g. performance), and send alarms


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #'monitoring.amazonaws.com'

FORMAT ==>                    #Request: query parameter, with ?Action and ?Version, and ARR.members.NUM
                              #Response: JSON
                              #Request ID: RES.ResponseMetadata.RequestId

PAGINATION ==>                #Req:
                              #  - NextToken STR
                              #  - Max*:
                              #     - with GetMetricData(): MaxDatapoints NUM (def: 1e5)
                              #     - otherwise: MaxResults NUM (def: 100, max: 500)
                              #Res: NextToken STR

PRICING ==>                   #METRIC:
                              #  - 1$/month per 3.33 custom METRICs
                              #  - if >1e4 custom METRICs cheaper: 1$/month per 10|20|50 custom METRICs if >24e4, 75e4, 100e4 of them
                              #Main API calls:
                              #  - for METRIC[_DATUM|AGGR], WIDGET, IRULE_REPORT, DASHBOARD: 1$/month per 1e5 calls
                              #  - WIDGET: twice more expensive
                              #  - free: 1e6 calls/month
                              #  - GetMetricData(), IRULE_REPORT:
                              #     - multiplied by numbers of METRICs requested
                              #     - never free
                              #METRIC_STREAM:
                              #  - 1$ per 3e5 METRIC updates
                              #  - multiplied by each 5 AdditionalStatistics
                              #  - also cost of Kinesis
                              #ALARM:
                              #  - 1$/month per 10 ALARMs
                              #     - free: 10/month
                              #  - multiplied by each METRIC insight query ???
                              #  - high StorageResolution: 3 times more expensive
                              #  - ANOMALY_DETECTOR: 3 times more expensive
                              #COMPOSITE_ALARM:
                              #  - 1$/month per 2 COMPOSITE_ALARMs
                              #IRULE_REPORT:
                              #  - 1$ per 2 IRULEs
                              #     - free: 1 IRULE/month
                              #  - 1$ per 5e7|3e7 matching events for Logs|DynamoDB
                              #     - free: 1e6 matching events/month
                              #DASHBOARD:
                              #  - 3$/month per 1 DASHBOARD
                              #  - free: 3/month, if <= 50 METRICs
                              #Cross-account???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListMetrics()                 #Req: METRIC_LIST_REQ
                              #Res: METRIC_LIST

METRIC_LIST_REQ.MetricName
METRIC_LIST_REQ.Namespace
METRIC_LIST_REQ.Dimensions    #METRIC.*

METRIC_LIST_REQ               #Either
 .RecentlyActive              #  - not defined (def)
                              #  - 'PT3H': only METRICs with METRIC_DATUM from last 3h

METRIC_LIST.Metrics           #METRIC_ARR
                              #Only METRICs with at least one METRIC_DATUM
METRIC                        #Timeseries.
                              #Usually (but not necessarily):
                              #  - about a AWS resource
                              #  - measuring performance or availability (e.g. CPU usage)
METRIC.MetricName             #'METRIC'
METRIC.Namespace              #Prefixes 'METRIC', similar to an ARN_PATH

METRIC.Dimensions             #DIMENSION_ARR
DIMENSION                     #Part of identifier, like MetricName|Namespace but:
                              #  - has key + value
                              #  - can have multiple
                              #Max 30 per METRIC
DIMENSION.Name                #'DVAR'
DIMENSION.Value               #'DVAL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        MANAGED METRICS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS MANAGED METRICS ==>       #Metrics automatically sent by many AWS SERVICEs
CUSTOM METRICS ==>            #Non-AWS managed METRIC

AWS/SERVICE                   #Namespace for managed METRICs

AWS/Usage                     #Namespace for managed METRICs related to resource usage when limited by a quota
SERVICE_QUOTA(ARR)            #METRIC_MATH function, returning ARR2. Quotas for a given resource.
                              #ARR must be from a AWS/Usage/* METRIC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     METRIC CROSS-ACCOUNT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LINKING ACCOUNTS ==>          #From one (monitoring) to another (source)
                              #Done from the UI?

METRIC_LIST_REQ
 .IncludeLinkedAccounts       #BOOL (def: false). Include METRICs from source ACCOUNTs

METRIC_LIST_REQ.OwningAccount
METRIC_DATA_REQ.AccountId     #ACCOUNT_ID of the source ACCOUNT
METRIC_LIST.OwningAccounts    #ACCOUNT_ID_ARR of each source ACCOUNT for each METRIC

METRIC_MATH                   #When cross-account, cannot use: INSIGHT_RULE_METRIC|ANOMALY_DETECTION_BAND|SERVICE_QUOTA()
:aws.AccountId                #Can be used as SEARCH() TYPE
                              #  - ACCOUNT_ID when cross-account
                              #  - value can be "LOCAL" (current ACCOUNT_ID)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC DATA PUT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricData()               #Req: METRIC_DATA
                              #Res: empty

METRIC_DATA.MetricData        #METRIC_DATUM_ARR
                              #Max 1e3
                              #Max 1MB
METRIC_DATUM                  #Single datapoint on a METRIC.
                              #If METRIC does not exist, creates it.
                              #Kept for 2 weeks

METRIC_DATUM.MetricName
METRIC_DATA.Namespace
METRIC_DATUM.Dimensions       #METRIC.*

METRIC_DATUM.Value            #NUM. Discrete, individual value
                              #To minimize number of requests, prefer:
                              #  - METRIC_DATUM.Values|StatisticValues
                              #  - on a regular PERIOD
METRIC_DATUM.Values|Counts    #NUM_ARR. Histogram value
                              #Max 150

METRIC_DATUM.StatisticValues  #STAT_SET. Aggregated value
STAT_SET.Minimum|Maximum      #NUM
STAT_SET.Sum                  #NUM
STAT_SET.SampleCount          #NUM of underlying individual values

METRIC_DATUM.Unit             #One of:
                              #  - "[Micro|Milli]Seconds"
                              #  - "Percent"
                              #  - "Count[/Second]"
                              #  - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
                              #  - "None"

METRIC_DATUM.Timestamp        #DATE_NUM (def: now)
                              #Min: 2 weeks earlier, max: 2h later
                              #  - if >3h|24h ago, can take 2h|48h to show up
METRIC_DATUM.StorageResolution#NUM of secs to round Timestamp.
                              #Either 1s ("high") or 1m (def, "regular")
RESOLUTION                    #In addition to StorageResolution, Timestamp rounding degrades with time:
                              #  - after 3h: 1m
                              #  - after 15d: 5m
                              #  - after 63d: 1h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC DATA GET        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricData()               #Req: METRIC_DATA_REQS
                              #Res: METRIC_DATA_RESS

METRIC_DATA_REQS              #METRIC_DATA_REQ_ARR
 .MetricDataQueries           #Max 500

METRIC_DATA_RESS
 .MetricDataResults           #METRIC_DATA_RES_ARR
METRIC_DATA_RES.StatusCode    #One of:
                              #  - 'Complete': ok
                              #  - 'PartialData': paginated
                              #  - 'InternalError': error, but can retry
                              #  - 'Forbidden': auth error

METRIC_STAT[_REQ].Period      #PERIOD. NUM (in secs).
                              #Granularity of result: each PERIOD returns a single aggregated value.
                              #Must be a multiple of RESOLUTION
                              #  - if RESOLUTION 1s, must be 1|5|10|30
METRIC_DATA_REQS.StartTime    #Matching METRIC_DATUM.Timestamp. Inclusive.
                              #Rounded by PERIOD
METRIC_DATA_REQS.EndTime      #Same for end. Exclusive
METRIC_DATA_REQS.ScanBy       #'TimestampDescending|TimestampAscending'. Sorting order

METRIC_DATA_REQ.MetricStat    #METRIC_STAT. Simple query
METRIC_STAT.Metric            #METRIC
METRIC_STAT.Stat              #'STAT' applied on each PERIOD
METRIC_STAT.Unit              #Filter by METRIC_DATUM.Unit. Does not try to convert

METRIC_DATA_REQ.Expression    #'METRIC_INSIGHT' or 'METRIC_MATH'. Advanced query
                              #Cannot be used together with METRIC_DATA_REQ.MetricStat

METRIC_DATA_REQ|RES.Id        #'MVAR'
                              #Either lowercase_underscored or camelCase
METRIC_DATA_RES.Values        #NUM_ARR. Each response value
METRIC_DATA_RES.Timestamps    #DATE_NUM_ARR. Same length as Values
METRIC_DATA_REQ.ReturnData    #BOOL (def: true).
                              #If false, METRIC_DATA_RES.Values|Timestamps only include METRIC_DATA_REQ values,
                              #not individual values???

METRIC_DATA_RES[S].Messages   #MESSAGE_DATA_ARR
MESSAGE_DATA                  #Error message
MESSAGE_DATA.Code             #STR
MESSAGE_DATA.Value            #'MESSAGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC LABELS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_DATA_REQ|RES.Label     #STR. Description
                              #Def: automatically generated

METRIC_DATA_REQS
 .LabelOptions.Timezone       #

${...}                        #"Dynamic label"
                              #Can be added to METRIC_DATA_REQ.Label
                              #Computed based in each METRIC_DATA_RES, based on its Values|Timestamps
                              #Max 5 per Label

${AVG}                        #The average of the values in the time range currently shown in the graph.
${DATAPOINT_COUNT}            #The number of data points in the time range that is currently shown in the graph.
${FIRST}                      #The oldest of the metric values in the time range that is currently shown in the graph.
${FIRST_LAST_RANGE}           #The difference between the metric values of the oldest and newest data points that are currently shown in the graph.
${FIRST_LAST_TIME_RANGE}      #The absolute time range between the oldest and newest data points that are currently shown in the graph.
${FIRST_TIME}                 #The timestamp of the oldest data point in the time range that is currently shown in the graph.
${FIRST_TIME_RELATIVE}        #The absolute time difference between now and the timestamp of the oldest data point in the time range that is currently shown in the graph.
${LABEL}                      #The representation of the default label for a metric.
${LAST}                       #The most recent of the metric values in the time range that is currently shown in the graph.
${LAST_TIME}                  #The timestamp of the newest data point in the time range that is currently shown in the graph.
${LAST_TIME_RELATIVE}         #The absolute time difference between now and the timestamp of the newest data point in the time range that is currently shown in the graph.
${MAX}                        #The maximum of the values in the time range currently shown in the graph.
${MAX_TIME}                   #The timestamp of the data point that has the highest metric value, of the data points that are currently shown in the graph.
${MAX_TIME_RELATIVE}          #The absolute time difference between now and the timestamp of the data point with the highest value, of those data points that are currently shown in the graph.
${MIN}                        #The minimum of the values in the time range currently shown in the graph.
${MIN_MAX_RANGE}              #The difference in metric values between the data points with the highest and lowest metric values, of those data points that are currently shown in the graph.
${MIN_MAX_TIME_RANGE}         #The absolute time range between the data points with the highest and lowest metric values, of those data points that are currently shown in the graph.
${MIN_TIME}                   #The timestamp of the data point that has the lowest metric value, of the data points that are currently shown in the graph.
${MIN_TIME_RELATIVE}          #The absolute time difference between now and the timestamp of the data point with the lowest value, of those data points that are currently shown in the graph.
${PROP('AccountId')}          #The AWS account ID of the metric.
${PROP('AccountLabel')}       #The label specified for the source account that owns this metric, in CloudWatch cross-account observabiility.
${PROP('Dim.dimension_name')} #The value of the specified dimension. Replace dimension_name with the case-sensitive name of your dimension.
${PROP('MetricName')}         #The name of the metric.
${PROP('Namespace')}          #The namespace of the metric.
${PROP('Period')}             #The period of the metric, in seconds.
${PROP('Region')}             #The AWS Region where the metric is published.
${PROP('Stat')}               #The metric statistic that is being graphed.
${SUM}                        #The sum of the values in the time range currently shown in the graph.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        METRIC INSIGHT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_INSIGHT                #SQL-like expression to compute a query on METRIC_DATUMs
                              #Syntax follows

SELECT STAT(NAME)             #Use METRIC with MetricName NAME and Namespace NAMESPACE
FROM NAMESPACE                #Aggregate each PERIOD according to STAT
                              #NAMESPACE can also be SCHEMA(NAMESPACE[, DVAR, ...])
                              #  - same as NAMESPACE, but only for METRICs with exact same DVAR
                              #  - must also have same Dimension count, including 0
WHERE DVAR [!]= DVAL [AND ...]#Filter by DVAL
GROUP BY DVAR[, ...]          #Splits into multiple ARRs grouped by DVAR
                              #Missing DVAR are named "Other"
ORDER BY STAT() [DESC|ASC]    #Sort ARRs created by GROUP BY
                              #Def: ASC
LIMIT NUM                     #Only first NUM values
                              #Def|max NUM: 500

STAT                          #MIN|MAX|AVG|SUM|COUNT

QUOTING ==>                   #'-quote: around DVAL
                              #"-quote:
                              #  - around NAME|NAMESPACE|DVAR unless only [:alnum:]_ and not reserved word
                              #  - reserved word: big list, documented online
                              #\-escape: on ' " inside ' " quote


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METRIC MATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METRIC_MATH                   #DSL to compute a query on METRIC_DATUMs
                              #While METRIC_INSIGHT is more focused on filtering|grouping|sorting|slicing,
                              #METRIC_MATH is more focused on transforming and combining multiple METRICs
                              #Return value must be either:
                              #  - ARR: one METRIC_DATA_RES
                              #  - ARR_ARR: multiple METRIC_DATA_RESs

MVAR                          #ARR. METRIC_DATA_RES with matching Id
mNUM                          #ARR. METRIC_DATA_RES number NUM

METRICS([STR])                #ARR_ARR. All METRIC_DATA_RESs, except ones using METRIC_MATH
                              #If STR, only ones with MVAR including STR
METRIC_COUNT(ARR_ARR)         #NUM. ARR_ARR.length

[NUM,...]                     #ARR
[ARR,...]                     #ARR_ARR
[ARR_ARR,...]                 #Concatenated ARR_ARR
VAL                           #NUM, ARR or ARR_ARR

BOOL                          #Actually 0|1
UNDEFINED ==>                 #Converted to 0
                              #If division by 0, VAL ignored
                              #Also called "missing value"

VAL + - * / ^ VAL2            #VAL3
-VAL                          #VAL2
VAL == != <= >= < > VAL2      #VAL3
VAL && || VAL2                #VAL3
VAL AND OR VAL2               #Same

FIRST|LAST(ARR)               #NUM

ABS(VAL)                      #VAL2
CEIL(VAL)                     #VAL2
FLOOR(VAL)                    #VAL2
LOG[10](VAL)                  #VAL2

MIN|MAX(ARR|ARR_ARR)          #VAL|ARR
SUM(ARR|ARR_ARR)              #VAL|ARR
AVG(ARR|ARR_ARR)              #VAL|ARR
STDDEV(ARR|ARR_ARR)           #VAL|ARR
DATAPOINT_COUNT(ARR|ARR_ARR)  #VAL|ARR. Length, after ARR_ARR flattening, excluding undefined

DIFF(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value.
DIFF_TIME(ARR|ARR_ARR)        #ARR|ARR_ARR. Difference with previous timestamp (in secs)
RATE(ARR|ARR_ARR)             #ARR|ARR_ARR. Difference with previous value, divided by difference between timestamps (in secs)
RUNNING_SUM(ARR|ARR_ARR)      #ARR|ARR_ARR. Sum with all previous values

TIME_SERIES(NUM)              #ARR of repeated value NUM
FILL(ARR|ARR_ARR, FILLER)     #ARR|ARR_ARR, but fills undefined according to FILLER:
                              #  - NUM: repeated value
                              #  - ARR: serial value
                              #  - REPEAT: last non-undefined value
                              #  - LINEAR: interpolation between last|next non-undefined value

SLICE(ARR_ARR, NUM[, NUM2])   #ARR_ARR, but only from index NUM (inclusive) to NUM2 (exclusive, def: end)
REMOVE_EMPTY(ARR_ARR)         #ARR_ARR, but without ARR of length 0
SORT(ARR_ARR, FUNC, ASC|DESC  #ARR_ARR, but sorted.
 [, NUM])                     #Sort using each FUNC(ARR) as key, with FUNC being MIN|MAX|SUM|AVG
                              #If NUM, truncates to NUM values

PERIOD(ARR)                   #NUM. PERIOD
EPOCH(ARR)                    #ARR2. Timestamps of ARR, but converted to DATE_NUM
MINUTE(ARR)                   #ARR2. Timestamps of ARR, but only with the minute
HOUR(ARR)                     #Same with hour
DAY(ARR)                      #Same with day of the week
DATE(ARR)                     #Same with day of the month
MONTH(ARR)                    #Same with month
YEAR(ARR)                     #Same with year

IF(BOOL[_ARR],                #ARR3 with each element:
 NUM|ARR[, NUM2|ARR2])        #  - taken either from NUM|ARR or NUM2|ARR2
                              #  - depending on BOOL[_ARR]
                              #If some values are ARR and not others, scalar values are repeated
                              #undefined in:
                              #  - BOOL_ARR -> undefined
                              #  - NUM|ARR -> 0
                              #  - NUM2|ARR2 -> undefined
                              #Def NUM2: undefined
                              #Def ARR2: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC SEARCH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEARCH('QUERY', 'STAT')       #METRIC_MATH function returning ARR_ARR: METRICs mathing QUERY
                              #QUERY: '[FILTERS] [TERMS]'
                              #FILTERS: {NAMESPACE[, DVAR, ...]}
                              #  - NAMESPACE: only METRICs with that Namespace
                              #  - DVAR:
                              #     - group METRICs by DVAL
                              #     - 'STAT' is Average|Min|... applied on those groups
                              #     - ignore METRICs without that DVAR
                              #TERMS: list of TERM separated by:
                              #  - space: same as AND
                              #  - AND|OR|NOT
                              #  - parenthesis
                              #TERM: [TYPE=]["]...["]
                              #  - include only METRICs with a matching MetricName|Namespace|DVAR|DVAL
                              #  - unless "-quote:
                              #     - partial match
                              #     - tokenize with punctuation and camelCase
                              #        - case insensitive, but only after tokenization
                              #        - e.g. oneTwo -> oneTwo OR (one AND two)
                              #           - oneTwo case-sensitive, one|two case-insensitive
                              #  - can also use AND|OR|NOT|parenthesis in the value, e.g. TYPE = ("..." OR "...")
                              #TYPE: value type among:
                              #  - MetricName
                              #  - Namespace
                              #  - DVAR
                              #"-quote:
                              #  - required when using spaces or non-ASCII chars
                              #  - must \-escape " \ ( )
                              #Max 1e3 chars for QUERY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC STATS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricStatistics()         #Req: METRIC_AGGR_REQ
                              #Res: METRIC_AGGR

METRIC_AGGR_REQ.MetricName
METRIC_AGGR_REQ.Namespace
METRIC_AGGR_REQ.Dimensions    #METRIC.*
METRIC_AGGR_REQ
 .StartTime|EndTime           #'DATE' (def: last hour)
METRIC_AGGR_REQ.Period        #NUM (in secs, def: 60, must be multiple of 60)
                              #On which periods the Statistics in applied (e.g. averages of every 10 mins)
METRIC_AGGR_REQ.Statistics    #STR_ARR
METRIC_AGGR_REQ
 .ExtendedStatistics          #
METRIC_AGGR_REQ.Unit          #METRIC_DATUM.Unit

METRIC_AGGR                   #
METRIC_AGGR.Label             #STR

METRIC_AGGR.Datapoints        #DATAPOINT_ARR
DATAPOINT                     #
DATAPOINT.Minimum|Maximum|
 Sum|SampleCount              #Like STAT_SET.*
DATAPOINT.Average             #NUM
DATAPOINT.Timestamp           #'DATE'
DATAPOINT.Unit                #METRIC_DATUM.Unit
DATAPOINT.ExtendedStatistics  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRIC STREAM         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricStream()             #Req: METRIC_STREAM_ENTRY
                              #  - no Arn, CreationDate, LastUpdateDate, State
                              #  - RoleName -> RoleArn
                              #Res: METRIC_STREAM_ENTRY
                              #  - only Arn
StartMetricStreams()          #Req: METRIC_STREAM_ENTRY
                              #  - only Name -> Names
                              #Res: empty
StopMetricStreams()           #Req: METRIC_STREAM_ENTRY
                              #  - only Name -> Names
                              #Res: empty
GetMetricStream()             #Req: METRIC_STREAM_ENTRY
                              #  - only Name
                              #Res: METRIC_STREAM_ENTRY
                              #  - no Tags
ListMetricStreams()           #Req: empty
                              #Res: Entries METRIC_STREAM_ENTRY_ARR
                              #  - no ExcludeFilters, IncludeFilters, IncludeLinkedAccountsMetrics, RoleName, StatisticsConfigurations, Tags
DeleteMetricStream()          #Req: METRIC_STREAM_ENTRY
                              #  - only Name
                              #Res: empty

METRIC_STREAM_ENTRY           #
METRIC_STREAM_ENTRY.Arn       #
METRIC_STREAM_ENTRY
 .CreationDate                #
METRIC_STREAM_ENTRY
 .FirehoseArn                 #
METRIC_STREAM_ENTRY
 .IncludeLinkedAccountsMetrics#
METRIC_STREAM_ENTRY
 .LastUpdateDate              #
METRIC_STREAM_ENTRY.Name      #
METRIC_STREAM_ENTRY
 .OutputFormat                #
METRIC_STREAM_ENTRY.RoleName  #
METRIC_STREAM_ENTRY.State     #
METRIC_STREAM_ENTRY.Tags      #

METRIC_STREAM_ENTRY
 .Include|ExcludeFilters      #METRIC_STREAM_FILTER_ARR
METRIC_STREAM_FILTER          #
METRIC_STREAM_FILTER.Namespace#STR

METRIC_STREAM_ENTRY
 .StatisticsConfigurations    #METRIC_STAT_ARR
METRIC_STAT                   #
METRIC_STAT
 .AdditionalStatistics        #STR_ARR

METRIC_STAT.IncludeMetrics    #METRIC_STAT_METRIC_ARR
METRIC_STAT_METRIC            #
METRIC_STAT_METRIC.MetricName #STR
METRIC_STAT_METRIC.Namespace  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            WIDGET             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricWidgetImage()        #Req: WIDGET_IMAGE_REQ
                              #Res: WIDGET_IMAGE

WIDGET_IMAGE_REQ.MetricWidget #
WIDGET_IMAGE_REQ.OutputFormat #

WIDGET_IMAGE                  #
WIDGET_IMAGE.MetricWidgetImage#


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM UPDATE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SetAlarmState()               #Req: ALARM
                              #  - only AlarmName, StateReason, StateReasonData, StateValue
                              #Res: empty
EnableAlarmActions()          #Req: ALARM
                              #  - only AlarmName -> AlarmNames ARR
                              #Res: empty
DisableAlarmActions()         #Req: ALARM
                              #  - only AlarmName -> AlarmNames ARR
                              #Res: empty

ALARM                         #
                              #Max 5000
ALARM.ActionsEnabled          #BOOL (def: true). To disable ALARM
ALARM.AlarmActions            #
ALARM.AlarmArn                #
ALARM.AlarmConfiguration
 UpdatedTimestamp             #
ALARM.AlarmDescription        #STR
ALARM.AlarmName               #'ALARM'
ALARM.StateReason             #STR
ALARM.StateReasonData         #'JSON'
ALARM.StateTransitioned
 Timestamp                    #
ALARM.StateUpdatedTimestamp   #
ALARM.StateValue              #One of:
                              #  - "OK": no feedback
                              #  - "INSUFFICIENT_DATA": pending feedback
                              #  - "ALARM": feedback
                              #Can be manually set, for testing.
ALARM                         #ARN_ARR. Trigger action when StateValue changes.
 .OK|InsufficientDataActions  #ARN can be:
                              #  - SNS_TOPIC_ARN
                              #  - "arn:aws:automate:REGION:ec2:stop|terminate"
ALARM.Tags                    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ALARM LIST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DescribeAlarms()              #Req: ALL_ALARMS_REQ
                              #Res: ALL_ALARMS
DeleteAlarms()                #Req: ALL_ALARMS_REQ
                              #  - only AlarmNames
                              #Res: empty

ALL_ALARMS_REQ.ActionPrefix   #STR
ALL_ALARMS_REQ.AlarmNamePrefix#STR
ALL_ALARMS_REQ.AlarmNames     #'ALARM'_ARR
ALL_ALARMS_REQ.AlarmTypes     #
ALL_ALARMS_REQ
 .Children|ParentsOfAlarmName #
ALL_ALARMS_REQ.StateValue     #

ALL_ALARMS.MetricAlarms       #METRIC_ALARM_ARR
                              #  - no Tags
ALL_ALARMS.CompositeAlarms    #COMPOSITE_ALARM_ARR
                              #  - no Tags


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM METRIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/

PutMetricAlarm()              #Req: METRIC_ALARM
                              #  - no AlarmArn,  AlarmConfigurationUpdatedTimestamp, *State*
                              #Res: empty
DescribeAlarmsForMetric()     #Req: METRIC_ALARM
                              #  - only Dimensions, ExtendedStatistic, MetricName, Namespace, Period, Statistic, Unit
                              #Res: MetricAlarms METRIC_ALARM_ARR

METRIC_ALARM                  #
METRIC_ALARM.*                #Any from ALARM.*
METRIC_ALARM.MetricName
METRIC_ALARM.Namespace        #
METRIC_ALARM.Dimensions       #Like METRIC.*
METRIC_ALARM
 .ComparisonOperator          #'Greater|LessThan[OrEqualTo]Threshold'. Together with Threshold, triggers "ALARM" state.
METRIC_ALARM.Threshold        #NUM
METRIC_ALARM.ThresholdMetricId#
METRIC_ALARM.EvaluationPeriods#NUM of periods before ComparisonOperator + Threshold can change state
METRIC_ALARM.Period           #NUM
METRIC_ALARM.DatapointsToAlarm#
METRIC_ALARM.Evaluate
 LowSampleCountPercentile     #
METRIC_ALARM.EvaluationState  #
METRIC_ALARM.ExtendedStatistic#
METRIC_ALARM.Metrics          #METRIC_DATA_REQ_ARR
                              #Max 10 with MetricStat + 10 with Expression
METRIC_ALARM.Statistic        #'SampleCount|Average|Sum|Minimum|Maximum'
METRIC_ALARM.TreatMissingData #
METRIC_ALARM.Unit             #METRIC_DATUM.Unit


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ALARM COMPOSITE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutCompositeAlarm()           #Req: COMPOSITE_ALARM
                              #  - no AlarmArn,  AlarmConfigurationUpdatedTimestamp, *State*
                              #  - no ActionsSuppressedBy, ActionsSuppressedReason
                              #Res: empty

COMPOSITE_ALARM               #
COMPOSITE_ALARM.*             #Any from ALARM.*
COMPOSITE_ALARM.AlarmRule     #
COMPOSITE_ALARM
 .ActionsSuppressedBy         #
COMPOSITE_ALARM
 .ActionsSuppressedReason     #
COMPOSITE_ALARM
 .ActionsSuppressor           #
COMPOSITE_ALARM.Actions
 SuppressorExtensionPeriod    #
COMPOSITE_ALARM
 .ActionsSuppressorWaitPeriod #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ALARM HISTORY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DescribeAlarmHistory()        #Req: ALARM_HISTORY_ITEM
                              #  - no HistoryData, HistorySummary
                              #  - AlarmType -> AlarmTypes ARR
                              #  - Timestamp -> StartDate|EndDate
                              #  - also ScanBy
                              #Res: AlarmHistoryItems ALARM_HISTORY_ITEM_ARR

ALARM_HISTORY_ITEM            #Only kept for 2 weeks
ALARM_HISTORY_ITEM.AlarmName  #'ALARM'
ALARM_HISTORY_ITEM.AlarmType  #
ALARM_HISTORY_ITEM.HistoryData#STR
ALARM_HISTORY_ITEM
 .HistoryItemType             #'ConfigurationUpdate|StateUpdate|Action'
ALARM_HISTORY_ITEM
 .HistorySummary              #STR
ALARM_HISTORY_ITEM.Timestamp  #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ANOMALY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutAnomalyDetector()          #Req: ANOMALY_DETECTOR
                              #  - no StateValue
                              #Res: empty
DescribeAnomalyDetectors()    #Req: ANOMALY_DETECTOR
                              #  - only AnomalyDetectorTypes
                              #Res: AnomalyDetectors ANOMALY_DETECTOR_ARR
DeleteAnomalyDetector()       #Req: ANOMALY_DETECTOR
                              #  - only MetricMathAnomalyDetector, SingleMetricAnomalyDetector
                              #Res: empty

ANOMALY_DETECTOR              #
ANOMALY_DETECTOR.StateValue   #

ANOMALY_DETECTOR.Configuration#ANOMALY_DETECTOR_CONF
ANOMALY_DETECTOR_CONF         #
ANOMALY_DETECTOR_CONF
 .MetricTimezone              #
ANOMALY_DETECTOR_CONF
 .ExcludedTimeRanges          #RANGE_ARR
RANGE                         #
RANGE.StartTime|EndTime       #

ANOMALY_DETECTOR
 .MetricMathAnomalyDetector   #MATH_DETECTOR
MATH_DETECTOR                 #
MATH_DETECTOR
 .MetricDataQueries           #METRIC_DATA_REQ_ARR

ANOMALY_DETECTOR
 .SingleMetricAnomalyDetector #SINGLE_DETECTOR
SINGLE_DETECTOR               #
SINGLE_DETECTOR.Dimensions    #
SINGLE_DETECTOR.MetricName    #
SINGLE_DETECTOR.Namespace     #
SINGLE_DETECTOR.Stat          #

ANOMALY_DETECTION_BAND in METRIC_MATH
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#using-anomaly-detection-on-metric-math


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT RULE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutInsightRule()              #Req: IRULE
                              #  - only Definition|Name|State -> RuleDefinition|RuleName|RuleState
                              #  - only Tags
                              #Res: empty
EnableInsightRules()          #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures IFAILURE_ARR
DisableInsightRules()         #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures FAILURE_ARR
DescribeInsightRules()        #Req: empty
                              #Res: InsightRules IRULE_ARR
                              #  - no Tags
DeleteInsightRules()          #Req: IRULE
                              #  - only Name -> RuleNames ARR
                              #Res: Failures IFAILURE_ARR

IRULE                         #
IRULE.Definition              #
IRULE.ManagedRule             #
IRULE.Name                    #
IRULE.Schema                  #
IRULE.State                   #
IRULE.Tags                    #

IFAILURE                      #
IFAILURE.ExceptionType        #
IFAILURE.FailureCode          #
IFAILURE.FailureDescription   #
IFAILURE.FailureResource      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     INSIGHT RULE MANAGED      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListManagedInsightRules()     #Req: MANAGED_RULE
                              #  - only ResourceARN
                              #Res: ManagedRules MANAGED_RULE_ARR
PutManagedInsightRules()      #Req: ManagedRules MANAGED_RULE_ARR
                              #Res: Failures IFAILURE_ARR

MANAGED_RULE                  #
MANAGED_RULE.ResourceARN      #
MANAGED_RULE.TemplateName     #

MANAGED_RULE.RuleState        #RULE_STATE
RULE_STATE                    #
RULE_STATE.RuleName           #
RULE_STATE.State              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INSIGHT RULE REPORT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetInsightRuleReport()        #Req: IRULE_REPORT_REQ
                              #Res: IRULE_REPORT

IRULE_REPORT_REQ              #
IRULE_REPORT_REQ.EndTime      #
IRULE_REPORT_REQ
 .MaxContributorCount         #
IRULE_REPORT_REQ.Metrics      #
IRULE_REPORT_REQ.OrderBy      #
IRULE_REPORT_REQ.Period       #
IRULE_REPORT_REQ.RuleName     #
IRULE_REPORT_REQ.StartTime    #

IRULE_REPORT                  #
IRULE_REPORT.AggregateValue   #
IRULE_REPORT
 .AggregationStatistic        #
IRULE_REPORT
 .ApproximateUniqueCount      #
IRULE_REPORT.KeyLabels        #

IRULE_REPORT.Contributors     #CONTRIBUTOR_ARR
CONTRIBUTOR                   #
CONTRIBUTOR
 .ApproximateAggregateValue   #
CONTRIBUTOR.Keys              #

CONTRIBUTOR.Datapoints        #CDATAPOINT_ARR
CDATAPOINT                    #
CDATAPOINT.ApproximateValue   #
CDATAPOINT.Timestamp          #

IRULE_REPORT.MetricDatapoints #CSDATAPOINT_ARR
CSDATAPOINT                   #
CSDATAPOINT.Average           #
CSDATAPOINT
 .MaxContributorValue         #
CSDATAPOINT.Maximum           #
CSDATAPOINT.Minimum           #
CSDATAPOINT.SampleCount       #
CSDATAPOINT.Sum               #
CSDATAPOINT.Timestamp         #
CSDATAPOINT.UniqueContributors#

INSIGHT_RULE_METRIC() in METRIC_MATH???
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-GraphReportData.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DASHBOARD           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDashboard()                #Req: DASHBOARD
                              #  - no DashboarArn, LastModified, Size
                              #Res: DashboardValidationMessages DASHBOARD_FAILURE_ARR
GetDashboard()                #Req: DASHBOARD
                              #  - only DashboardName
                              #Res: DASHBOARD
                              #  - no LastModified, Size
ListDashboards()              #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNamePrefix
                              #Res: DashboardEntries DASHBOARD_ARR
                              #  - no DashboardBody
DeleteDashboards()            #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNames ARR
                              #Res: empty

DASHBOARD                     #
DASHBOARD.DashboardArn        #
DASHBOARD.DashboardBody       #
DASHBOARD.DashboardName       #
DASHBOARD.LastModified        #
DASHBOARD.Size                #

DASHBOARD_FAILURE             #
DASHBOARD_FAILURE.DataPath    #
DASHBOARD_FAILURE.Message     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagResource()                 #Req: ANY_TAGS
                              #Res: empty
UntagResource()               #Req: ANY_TAGS
                              #  - Tags -> TagKeys 'TAG'_ARR
                              #Res: empty
ListTagsForResource()         #Req: ANY_TAGS
                              #  - only ResourceARN
                              #Res: ANY_TAGS
                              #  - no ResourceARN

ANY_TAGS                      #
ANY_TAGS.ResourceARN          #
ANY_TAGS.Tags                 #
