
                        
   CLOUDWATCH_DASHBOARD  
                        



VERSION ==>                   #See CloudWatch doc

SUMMARY ==>                   #Dashboard: time, position, size
                              #Text widget: markdown
                              #Logs widget
                              #Metrics widget in dashboard: timeseries|bar|pie|gauge|singleValue, stacked, sparkline, alarm history
                              #Metrics widget: x|y axis limits, aggregated|insight|math query, title|legend|annotations, color, size
                              #Explorer widget: filtering, aggregation, combining, splitting
                              #Alarm widget: filtering, sorting


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



SERVICE_DOMAIN
FORMAT ==>
PAGINATION ==>                #See CloudWatch doc

THROTTLING ==>                #DASHBOARD: 10/s
                              #WIDGET: 20/s

PRICING ==>                   #Main cost: 3$/month per 1 custom DASHBOARD
                              #Free: 3/month, if <= 50 METRICs
                              #API calls:
                              #  - DASHBOARD: 1$/month per 1e5 calls
                              #  - WIDGET: 1$/month per 5e4 calls
                              #  - free: 1e6 calls/month (same free tier as METRIC* API calls)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DASHBOARD           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDashboard()                #Req: DASHBOARD
                              #  - no DashboarArn, LastModified, Size
                              #Res: DashboardValidationMessages DASHBOARD_FAILURE_ARR
GetDashboard()                #Req: DASHBOARD
                              #  - only DashboardName
                              #Res: DASHBOARD
                              #  - no LastModified, Size
ListDashboards()              #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNamePrefix
                              #Res: DashboardEntries DASHBOARD_ARR
                              #  - no DashboardBody
DeleteDashboards()            #Req: DASHBOARD
                              #  - only DashboardName -> DashboardNames ARR
                              #Res: empty

DASHBOARD                     #Set of UI graphs
                              #Not REGION-specific
DASHBOARD.DashboardArn        #DASHBOARD_ARN. 'arn:aws:cloudwatch::ACCOUNT_ID:dashboard/DASHBOARD'
DASHBOARD.DashboardName       #'DASHBOARD'
                              #'CloudWatch-Default': special name, showing DASHBOARD in UI home page
DASHBOARD.LastModified        #'DATE'

DASHBOARD.Size                #NUM (in bytes) of DBODY
DASHBOARD.DashboardBody       #DBODY

DASHBOARD_FAILURE             #API error
DASHBOARD_FAILURE.Message     #'ERROR'
DASHBOARD_FAILURE.DataPath    #'VAR'

AUTOMATIC DASHBOARD ==>       #AWS managed DASHBOARD for each SERVICE
CloudWatch                    #AWS managed POLICY to view automatic DASHBOARD
 AutomaticDashboardsAccess    #Must be combined with CloudWatchReadOnly|FullAccess


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BODY              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DBODY                         #JSON defining a DASHBOARD content

DBODY.start|end               #'DATE'|DURATION of first|last METRIC_DATUM
                              #In the UI, can link DWIDGETs, so their start|end are always same
DBODY.periodOverride          #Either 'inherit' or 'auto' (def)
                              #If 'auto', DWIDGET.properties.PERIOD might change to adapt to DBODY.start|end

DBODY.widgets                 #DWIDGET_ARR
                              #Max 500
DWIDGET.type                  #'text|log|metric|explorer|alarm'
DWIDGET.properties            #DTEXT|DLOG|DMETRICS|DEXPLORER|DALARM

DWIDGET.x|y                   #NUM position on a 24x1000 grid
                              #Def: next space available
DWIDGET.width|height          #NUM size on a 24x1000 grid
                              #Def: 6x6


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEXT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DTEXT                         #Widget showing text

DTEXT.markdown                #'MARKDOWN'

DTEXT.background              #'solid' (def) or 'transparent'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DLOG                          #Widget showing CloudWatch Logs query

DLOG.query                    #STR. CloudWatch Logs query

DLOG.view                     #'table' (def), 'timeSeries', 'bar' or 'pie'

DLOG.title                    #STR
DLOG.region                   #REGION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRICS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DMETRICS                      #Widget showing METRICs

DMETRICS.period
DMETRICS.stat
DMETRICS.region
DMETRICS.timezone
DMETRICS.liveData
DMETRICS.stacked
DMETRICS.title
DMETRICS.legend
DMETRICS.yAxis
 .left|right.min|max
DMETRICS.annotations
 .horizontal|vertical         #Like WIDGET.*
DMETRICS.metrics              #Like WIDGET.* except:
                              #  - if using WOPTS.expression, must:
                              #     - put WOPTS in an ARR of length 1
                              #     - only use WOPTS.expression|id|label
                              #  - can use WOPTS.region REGION
                              #Max 2500 per DASHBOARD

DMETRICS.view                 #'timeSeries' (def), 'bar', 'pie', 'gauge' or 'singleValue'
DMETRICS.sparkline            #BOOL (def: false).
                              #Show the timeseries in background behind the value
                              #Only with view 'singleValue'
DMETRICS.annotations.alarms   #ALARM_ARN. Show ALARMs history as comments

DMETRICS.yAxis
 .left|right.label            #LABEL
DMETRICS.yAxis
 .left|right.showUnits        #BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            WIDGET             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetMetricWidgetImage()        #Req: WIDGET_IMAGE_REQ
                              #Res: WIDGET_IMAGE

WIDGET_IMAGE_REQ.MetricWidget #'WIDGET'
WIDGET_IMAGE_REQ.OutputFormat #Either:
                              #  - 'png' (def): response is normal XML, with WIDGET_IMAGE
                              #  - 'image/png': response is PNG directly

WIDGET_IMAGE                  #Individual graph of METRICs (outside of a DASHBOARD)
WIDGET_IMAGE.MetricWidgetImage#'PNG_BASE64'. Image of the graph

WIDGET                        #JSON defining a graph for specific METRICs

WIDGET.metrics                #WMETRIC_ARR
                              #Max 500
WMETRIC                       #METRIC.
                              #ARR with positional elements
                              #Each WMETRIC[*] can use '.' to re-use last WMETRIC's value
WMETRIC[0]                    #NAMESPACE
WMETRIC[1]                    #'METRIC'
WMETRIC[2|4|...]              #DVAR
WMETRIC[3|5|...]              #DVAL

WMETRIC[-1]                   #WOPTS
WOPTS.label                   #LABEL shown in WIDGET.legend. Def: '${LABEL}'
WOPTS.yAxis                   #'left' (def) or 'right'. Where to show ordinate axis
WOPTS.color                   #'XXXXXX'

WOPTS|WIDGET.period           #PERIOD (def: 5m)
WOPTS|WIDGET.stat             #'XSTAT' applied to values for each PERIOD

WOPTS.expression              #MATH_QUERY|INSIGHT_QUERY applied to values
WOPTS.id                      #'MVAR' to use in another WMETRIC[-1].expression
WOPTS.visible                 #BOOL (def: true)
                              #Same goal as METRIC_DATA_REQ.ReturnData

WIDGET.region                 #REGION

WIDGET.start|end              #'DATE'|DURATION of first|last METRIC_DATUM
                              #Def: '-PT3H' and '-PT0H'
WIDGET.timezone               #'+NNNN' (def: '+0000')
WIDGET.liveData               #BOOL (def: false)
                              #If true, includes most recent data even if part of ongoing PERIOD

WIDGET.view                   #'timeSeries' (def), 'bar' or 'pie'
                              #Graph type
WIDGET.stacked                #BOOL (def: false)
                              #Timeseries: stacked or separate lines

WIDGET.height                 #NUM (in px, def: 400)
                              #Max 2000
WIDGET.width                  #NUM (in px, def: 600)
                              #Max 2000
WIDGET.theme                  #'light' (def) or 'dark'

WIDGET.title                  #STR. Shown on top
WIDGET.legend.position        #'bottom' (def), 'right' or 'hidden'
                              #Where legends are shown
WIDGET.yAxis
 .left|right.min|max          #NUM. Min|max limits for ordinate axis

WIDGET.annotations
 .horizontal|vertical         #WANNOT[D]_ARR
WANNOTD                       #Annotation pair, with shading in-between
                              #WANNOT_ARR with two elements:
                              #  - WANNOT (upper band): no fill
                              #  - WANNOT2 (lower band): only value|label
WANNOT                        #Comment on a specific DATAPOINT, shown either on left|right (horizontal) or below (vertical)
WANNOT.value                  #NUM (if horizontal) or 'DATE' (if vertical) for position
WANNOT.label
WANNOT.color
WANNOT.yAxis
WANNOT.visible                #Like WOPTS.*
WANNOT.fill                   #'none' (def) or 'above|below'. Grey vertical line.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXPLORER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEXPLORER                     #Widget showing multiple METRICs graphs interactively

DEXPLORER.metrics             #DXMETRIC_ARR
                              #Specify which METRICs to show
DXMETRIC.metricName           #'METRIC'
DXMETRIC.resourceType         #Resource publishing the METRIC
                              #Same format as CloudFormation, e.g. 'AWS::SERVICE::RESOURCE_TYPE'

DEXPLORER.labels              #FILTER_ARR
                              #Filter which METRICs to show
FILTER.key                    #PROP_KEY
FILTER.value                  #VAL

DEXPLORER.aggregateBy         #AGGR_BY
                              #Combine multiple METRICs sharing same PROP_KEY values
AGGR_BY.key                   #PROP_KEY
AGGR_BY.func                  #'ISTAT'

DEXPLORER.splitBy             #PROP_KEY_ARR
                              #Split multiple METRICs into different graphs

PROP_KEY                      #Either:
                              #  - 'TAG'
                              #  - EC2: Architecture, Hypervisor, CoreCount, ImageId, InstanceId, InstanceLifecycle,
                              #    InstanceType, InstanceFamily, InstanceSize, Affinity, AvailabilityZone, Tenancy,
                              #    Platform, RootDeviceType SecurityGroups, State, SubnetId, VirtualizationType, VpcId
                              #  - Lambda: FunctionName, Runtime, Language, MemorySize, Version, SecurityGroupIds,
                              #    SubnetIds, SubnetIdCount, VpcId, Timeout

DEXPLORER.period              #PERIOD (def: 5m)
DXMETRIC.stat                 #'XSTAT' to aggregate values per PERIOD

DEXPLORER.title               #STR (def: 'Explorer')
DEXPLORER.widgetOptions       #DCONF
DCONF.view
DCONF.stacked
DCONF.legend.position         #Like WIDGET.*
DCONF.rowsPerPage             #NUM
DCONF.widgetsPerRow           #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALARM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DALARM                        #Widget showing ALARMs

DALARM.alarms                 #ALARM_ARN_ARR
                              #If single ALARM_ARN, UI shows its timeseries. Otherwise, shows only its StateValue.
                              #Max 100

DALARM.states                 #STR_ARR (def: any). Filter by StateValue.
DALARM.sortBy                 #One of:
                              #  - 'default' (def): by AlarmName
                              #  - 'timestamp': by AlarmConfigurationUpdatedTimestamp
                              #  - 'stateUpdatedTimestamp': by StateValue, then AlarmConfigurationUpdatedTimestamp

DALARM.title                  #STR
