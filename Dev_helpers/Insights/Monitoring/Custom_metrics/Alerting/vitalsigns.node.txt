
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   VITALSIGNS   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

new VITALSIGNS([OBJ])         #Returns VITALS
                              #Version 0.3.0
                              #OBJ:
                              #  - autoCheck NUM: fires VITALS.isHealthy() every NUM ms

VITALS.monitor(MONITOR[, OBJ])#Adds a new MONITOR, which tracks a specific stat and can be:
                              #  - OBJ2|FUNC(OBJ)->OBJ2, with OBJ2:
                              #     - name MONITOR_STR
                              #     - report REPORT_OBJ|FUNC2()->REPORT_OBJ
                              #        - when retrieving REPORT_OBJ, all members being FUNC() are replaced by return value,
                              #          providing FUNC2() is used
                              #     - destroy(): fired by VITALS.destroy()
                              #  - REPORT_OBJ
                              #  - MODULE_STR
                              #OBJ are passed to FUNC(OBJ)->OBJ2, but can also include OBJ.name MONITOR_STR
                              #Default MONITOR_MODULE with REPORT_OBJ2 and options OBJ:
                              #  - "cpu":
                              #     - usage: CPU usage, sampled every OBJ.updateTime (def: 5000) for OBJ.sampleTime (def: 1000)
                              #       uses OS.cpus()
                              #     - loadAvg1|5|15: uses OS.loadavg()
                              #  - "mem":
                              #     - free: amount of available memory (uses OS.freemem())
                              #       Printed unit can be chosen with OBJ.units "|KB|MB|GB|TB|PB" (def: "")
                              #     - process: amount of memory used by Node (uses PROCESS.memoryUsage().heapTotal)
                              #       Can choose printed unit too
                              #  - "tick":
                              #     - perSec: number of event loop ticks per seconds
                              #     - avgMs|maxMs: for a single event loop tick
                              #     - every is according to samples with OBJ:
                              #        - window (def: 10000): max sampling time
                              #        - batch (def: 1000): max number of ticks in sampling time
                              #        - freq (def: 50, in ms): time between two sampling times
                              #  - "uptime":
                              #     - sys: how long system has been up (OS.uptime())
                              #     - proc: how long Node has been up (process.uptime())

VITALS.unhealthyWhen
(MONITOR_STR, VAR_STR)[.not]
.equals|greater|lessThan(NUM) #Makes VITALS.isHealthy() fails if MONITOR's REPORT_OBJ.VAR doesn't meet condition.
VITALS.isHealthy()            #

VITALS.getReport()            #Returns { MONITOR: REPORT_OBJ ... }, with extra member REPORT_OBJ.healthy = VITALS.isHealthy()
VITALS.express                #Express MIDWR endpoint that:
                              #  - sends VITALS.getReport() as JSON 
                              #  - with status code 200|503 according to VITALS.isHealthy()
VITALS.getFailed()            #Gets last isHealthy() failure messages as STR_ARR: one for each MONITOR that failed ([] if none)
VITALS.on("healthCheck",      #Fired by VITALS.isHealthy()
FUNC(BOOL, OBJ, STR_ARR))     #BOOL is isHealthy(), OBJ getReport(), STR_ARR getFailed()
VITALS.on("healthChange", 
FUNC(BOOL, OBJ, STR_ARR))     #Same but only fired by VITALS.isHealthy() when return value changes since last time.

VITALS.destroy()              #
