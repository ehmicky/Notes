
                   
   CLOUDWATCH_LOGS  
                   



TODO ==>
  - CloudTrail: see unfinished "CloudWatch logs" chapter
  - CloudWatch metrics:
     - embedded metrics: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html
     - best practices: https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html
  - CloudWatch dashboard:
     - DLOG
  - Lambda:
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - Insights:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-metrics.html (second half of page)
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Troubleshooting.html
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-example-event.html

GOAL ==>                      #Aggregates logs to single place, with rotation, and possibility to create CloudWatch alarms when log line match pattern

VERSION ==>                   #2023-07-17


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #logs.amazonaws.com
                              #Can use HTTP[S]

FORMAT ==>                    #JSON
                              #Uses REQ.Action|Version

REQ_ID                        #x-amzn-RequestId [S]

PAGINATION ==>                #REQ.limit NUM (def|max: 50) + REQ|RES.nextToken except:
                              #  - def|max 1e4: StartQuery()
                              #  - def|max 1e4 or 1MB: FilterLogEvents()
                              #  - def|max 1e4 and use RES.nextBackwardToken|nextForwardToken: GetLogEvents()
                              #  - def|max 1e3 and use REQ.maxResults: DescribeQueries|QueryDefinitions()
                              #  - no pagination: DescribeAccountPolicies(), GetLogGroupFields(), TestMetricFilter()

PRICING ==>                   #  - 0.5$/GB read
                              #  - 0.03$/GB stored
                              #  - GetLogEvents(): same price as out traffic on EC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutLogEvents()                #Req: LLEVENTS
                              #  - no LLEVENT.ingestionTime
                              #Res: LLEVENTS_NEW
GetLogEvents()                #Req: LLEVENTS_REQ
                              #  - no filterPattern, logStreamNamePrefix
                              #Res: events LLEVENT_ARR
FilterLogEvents()             #Req: LLEVENTS_REQ
                              #  - logStreamName STR -> logStreamNames STR_ARR + logStreamNamePrefix STR
                              #  - no startFromHead
                              #Res: events LLEVENT_ARR, searchedLogStreams LLEVENTS_RES_ARR

LLEVENTS                      #
LLEVENTS[_REQ].logGroupName   #'LOG_GROUP'
LLEVENTS_REQ
 .logGroupIdentifier          #'LOG_GROUP'|LOG_GROUP_ARN
LLEVENTS[_REQ|RES]
 .logStreamName               #'LOG_STREAM'

LLEVENTS_REQ.startTime|endTime#DATE_NUM. Filter by LLEVENT.timestamp
LLEVENTS_REQ.startFromHead    #BOOL (def: true). asc|desc sorting order.
                              #Always sorted by LLEVENT.timestamp

LLEVENTS_REQ.filterPattern    #'FILTER_PATTERN', either:
                              #  - STR:
                              #     - pattern triggering metric
                              #     - can be '' for any log event
                              #  - [VAR[=|>|<|>=|<=|!=VAL],...]:
                              #     - for tab-delimited log lines, when a field equals VAL
                              #     - VAR can be '...' at beginning, middle or end
                              #STR and VAL can use globbing

LLEVENTS_REQ.unmask           #BOOL. If false (def), sensitive data are masked
                              #If true, requires PACTION Unmask

LLEVENTS.logEvents            #LLEVENT_ARR
LLEVENT                       #Log message
LLEVENT.timestamp             #DATE_NUM of event being logged
LLEVENT.ingestionTime         #DATE_NUM of LLEVENT itelf
LLEVENT.message               #STR

LLEVENTS_RES
 .searchedCompletely          #BOOL. Whether all LLEVENTs in LOG_STREAM were searched

LLEVENTS_NEW
 .rejectedLogEventsInfo       #LLEVENTS_REJECT
LLEVENTS_REJECT
 .expiredLogEventEndIndex     #NUM
LLEVENTS_REJECT
 .tooNewLogEventStartIndex    #NUM
LLEVENTS_REJECT
 .tooOldLogEventEndIndex      #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogStream()             #Req: LOG_STREAM
                              #  - only logStreamName, logGroupName
                              #Res: empty
DescribeLogStreams()          #Req: LOG_STREAM
                              #  - only logStreamName, logGroupName
                              #Res: LogStreams LOG_STREAM_ARR
                              #  - no LogGroupName
DeleteLogStream()             #Req: LOG_STREAM
                              #  - only logStreamName, logGroupName
                              #Res: empty

LOG_STREAM                    #Series of LLEVENTs
                              #Deleted if empty for 2 months
LOG_STREAM.arn                #LOG_STREAM_ARN
LOG_STREAM.logStreamName      #'LOG_STREAM'
LOG_STREAM.creationTime       #DATE_NUM
LOG_STREAM.lastIngestionTime  #DATE_NUM
LOG_STREAM.firstEventTimestamp#DATE_NUM
LOG_STREAM.lastEventTimestamp #DATE_NUM

LOG_STREAM.storedBytes        #NUM

LOG_STREAM.uploadSequenceToken#STR???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogGroup()              #Req:
                              #  - only logGroupName
                              #Res: empty
PutRetentionPolicy()          #Req:
                              #  - only logGroupName, retentionInDays
                              #Res: empty
DeleteRetentionPolicy()       #Req:
                              #  - only logGroupName
                              #Res: empty
DescribeLogGroups()           #Req:
                              #  - only logGroupName -> logGroupNamePrefix STR
                              #Res: logGroups LOG_GROUP_ARR
GetLogGroupFields()           #???
DeleteLogGroup()              #Req:
                              #  - only logGroupName
                              #Res: empty

LOG_GROUP                     #Group of LOG_STREAMs with shared settings
LOG_GROUP.arn                 #LOG_GROUP_ARN
LOG_GROUP.logGroupName        #'LOG_GROUP'
LOG_GROUP.creationTime        #DATE_NUM

LOG_GROUP.retentionInDays     #NUM among 1|3|5, 7|14, 30|60|90|120|150|180, 365|400|545|731, 1827|3653
                              #Delete LLEVENTs after NUM days

LOG_GROUP.storedBytes         #NUM

LOG_STREAM|METRIC_FILTER
 .logGroupName                #'LOG_GROUP'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricFilter()             #Req: METRIC_FILTER
                              #Res: empty
DescribeMetricFilters()       #Req:
                              #  - only logGroupName
                              #  - only filterName -> filterNamePrefix STR
                              #Res: metricFilters METRIC_FILTER_ARR
DeleteMetricFilter()          #Req: METRIC_FILTER
                              #  - only filterName, logGroupName
                              #Res: empty

METRIC_FILTER                 #Create METRIC_DATA from LLEVENTs
METRIC_FILTER.filterName      #'METRIC_FILTER'

METRIC_FILTER|TEST_FILTER_REQ
 .filterPattern               #'FILTER_PATTERN'

METRIC_FILTER
 .metricTransformations       #METRIC_TRANSFORM_ARR
METRIC_TRANSFORM.metricName   #'METRIC'
METRIC_TRANSFORM
 .metricNamespace             #'NAMESPACE'
METRIC_TRANSFORM.metricValue  #STR, e.g. '1'

LOG_GROUP.metricFilterCount   #NUM

TestMetricFilter()            #Req: TEST_FILTER_REQ
                              #Res: matches TEST_FILTER_RES_ARR

TEST_FILTER_REQ
 .logEventMessages            #STR_ARR

TEST_FILTER_RES.eventMessage  #STR
TEST_FILTER_RES.eventNumber   #NUM
TEST_FILTER_RES
 .extractedValues             #{ VAR: STR, ... }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             QUERY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


StartQuery()                  #
DescribeQueries()             #
StopQuery()                   #
GetQueryResults()             #
GetLogRecord()                #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       QUERY DEFINITION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutQueryDefinition()          #
DescribeQueryDefinitions()    #
DeleteQueryDefinition()       #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SUBSCRIPTION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutSubscriptionFilter()       #
DescribeSubscriptionFilters() #
DeleteSubscriptionFilter()    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DESTINATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDestination()              #
DescribeDestinations()        #
DeleteDestination()           #
PutDestinationPolicy()        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EXPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateExportTask()            #
DescribeExportTasks()         #
CancelExportTask()            #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              KMS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AssociateKmsKey()             #
DisassociateKmsKey()          #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY RESOURCE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutResourcePolicy()           #
DescribeResourcePolicies()    #
DeleteResourcePolicy()        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY ACCOUNT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutAccountPolicy()            #
DescribeAccountPolicies()     #
DeleteAccountPolicy()         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    POLICY DATA PROTECTION     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDataProtectionPolicy()     #
GetDataProtectionPolicy()     #
DeleteDataProtectionPolicy()  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListTagsForResource()         #
TagResource()                 #
UntagResource()               #
