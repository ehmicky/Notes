
                   
   CLOUDWATCH_LOGS  
                   



TODO ==>
  - CloudTrail: see unfinished "CloudWatch logs" chapter
  - CloudWatch metrics:
     - embedded metrics: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html
     - best practices: https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html
  - CloudWatch dashboard:
     - DLOG
  - Lambda:
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - Insights:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-metrics.html (second half of page)
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Troubleshooting.html
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-example-event.html

GOAL ==>                      #Aggregates logs to single place, with rotation, and possibility to create CloudWatch alarms when log line match pattern

VERSION ==>                   #2013/02/22

PRICING ==>                   #  - 0.5$/GB/month read
                              #  - 0.03$/GB/month stored
                              #  - GetLogEvents(): same price as out traffic on EC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


API ==>                       #  - ARR is actually VAR.member.NUM instead of VAR.NUM in REST API
                              #  - Domains: logs.REGION.amazonaws.com
                              #  - CLI: logs
                              #JSON not XML

PAGINATION ==>                #GetLogEvents:
                              #  - Use Limit NUM (def: 10000 log events or 1MB), NextToken STR as request variable
                              #  - Use NextBackward|ForwardToken STR in response body
                              #DescribeLogGroups|LogStreams|MetricFilters:
                              #  - Use Limit NUM (def: 10000 log events or 1MB), NextToken STR as request variable
                              #  - Use NextToken STR in response body
                              #PutLogEvents:
                              #  - Use SequenceToken STR as request variable
                              #  - Use NextToken STR in response body

LIMIT ==>                     #  - 40KB PutMetricData() request
                              #  - 10 dimensions per metric
                              #  - 5000 alarms
                              #  - metric data kept for two weeks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutLogEvents()                #Req: LLEVENTS
                              #  - no LLEVENT.IngestionTime
                              #Res: empty
GetLogEvents()                #Req:
                              #  - no LogEvents
                              #  - LLEVENT.Timestamp -> StartTime|EndTime DATE_NUM
                              #  - StartFromHead BOOL???
                              #Res: Events LLEVENT_ARR

LLEVENTS                      #
LLEVENTS.LogGroupName         #'LOG_GROUP'
LLEVENTS.LogStreamName        #'LOG_STREAM'

LLEVENTS.LogEvents            #LLEVENT_ARR
LLEVENT                       #Log message
LLEVENT.Timestamp             #DATE_NUM of event being logged
LLEVENT.IngestionTime         #DATE_NUM of LLEVENT itelf
LLEVENT.Message               #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogStream()             #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: empty
DescribeLogStreams()          #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: LogStreams LOG_STREAM_ARR
                              #  - no LogGroupName
DeleteLogStream()             #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: empty

LOG_STREAM                    #Series of LLEVENTs
                              #Deleted if empty for 2 months
LOG_STREAM.Arn                #LOG_STREAM_ARN
LOG_STREAM.LogStreamName      #'LOG_STREAM'
LOG_STREAM.CreationTime       #DATE_NUM
LOG_STREAM.LastIngestionTime  #DATE_NUM
LOG_STREAM.FirstEventTimestamp#DATE_NUM
LOG_STREAM.LastEventTimestamp #DATE_NUM

LOG_STREAM.StoredBytes        #NUM

LOG_STREAM.UploadSequenceToken#STR???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogGroup()              #Req:
                              #  - only LogGroupName
                              #Res: empty
PutRetentionPolicy()          #Req:
                              #  - only LogGroupName, RetentionInDays
                              #Res: empty
DeleteRetentionPolicy()       #Req:
                              #  - only LogGroupName
                              #Res: empty
DescribeLogGroups()           #Req:
                              #  - only LogGroupName -> LogGroupNamePrefix STR
                              #Res: LogGroups LOG_GROUP_ARR
DeleteLogGroup()              #Req:
                              #  - only LogGroupName
                              #Res: empty

LOG_GROUP                     #Group of LOG_STREAMs with shared settings
LOG_GROUP.Arn                 #LOG_GROUP_ARN
LOG_GROUP.LogGroupName        #'LOG_GROUP'
LOG_GROUP.CreationTime        #DATE_NUM

LOG_GROUP.RetentionInDays     #NUM among 1|3|5|7|14|30|60|90|120|150|180|365|400|545|731|1827|3653
                              #Delete LLEVENTs after NUM days

LOG_GROUP.StoredBytes         #NUM

LOG_STREAM|METRIC_FILTER
 .LogGroupName                #'LOG_GROUP'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricFilter()             #Req: METRIC_FILTER
                              #Res: empty
DescribeMetricFilters()       #Req:
                              #  - only LogGroupName
                              #  - only FilterName -> FilterNamePrefix STR
                              #Res: MetricFilters METRIC_FILTER_ARR
TestMetricFilter()            #Req:
                              #  - FilterPattern STR
                              #  - LogEventMessages STR_ARR
                              #Res: Matches OBJ_ARR:
                              #  - EventMessage STR
                              #  - EventNumber NUM
                              #  - ExtractedValues:
                              #     - VAR: STR
DeleteMetricFilter()          #Req: METRIC_FILTER
                              #  - only FilterName, LogGroupName
                              #Res: empty

METRIC_FILTER                 #Create METRIC_DATA from LLEVENTs
METRIC_FILTER.FilterName      #'METRIC_FILTER'

METRIC_FILTER.FilterPattern   #Either:
                              #  - STR: pattern triggering metric (can be "" for any log event)
                              #  - [VAR[=|>|<|>=|<=|!=VAL],...]: for tab-delimited log lines, when a field equals VAL
                              #     - VAR can be "..." at beginning, middle or end
                              #STR and VAL can use globbing

METRIC_FILTER
 .MetricTransformations       #METRIC_TRANSFORM_ARR
METRIC_TRANSFORM.MetricName   #'METRIC'
METRIC_TRANSFORM
 .MetricNamespace             #'NAMESPACE'
METRIC_TRANSFORM.MetricValue  #STR, e.g. '1'

LOG_GROUP.MetricFilterCount   #NUM
