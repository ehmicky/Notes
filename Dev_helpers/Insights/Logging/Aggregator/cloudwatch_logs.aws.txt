
                   
   CLOUDWATCH_LOGS  
                   



VERSION ==>                   #2023-09-20

SUMMARY ==>                   #Log group: prefix, stream, retention, tags
                              #Events: timestamp, message, encryption
                              #Live tail: CLI, UI, Pulumi
                              #Filter pattern: variables, string/JSON/TSV, test
                              #Metric filter: pattern, default value
                              #Query: saved, aliases, aggregation, expressions, CloudWatch dashboard
                              #Query fields: message VARR, LLEVENT.*, service-specific
                              #Query command: alias, fields|display|parse, filter|sort|limit, dedup, pattern
                              #Vended logs: LOG_STREAM|S3|Kinesis, policy
                              #Subscription: pattern, Lambda|Kinesis, distribution, cross-account
                              #Export: S3
                              #Mask: unmask, account-wide, policy, LOG_GROUP|S3|Kinesis destination, identifier types


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #logs.amazonaws.com
                              #Can use HTTP[S]

FORMAT ==>                    #JSON
                              #Uses REQ.Action|Version

REQ_ID                        #x-amzn-RequestId [S]

PAGINATION ==>                #REQ.limit NUM (def|max: 50) + REQ|RES.nextToken except:
                              #  - def 1e4, max 1e5: StartQuery()
                              #  - def|max 1e4 or 1MB: FilterLogEvents()
                              #  - def|max 1e4 and use RES.nextBackwardToken|nextForwardToken: GetLogEvents()
                              #  - def|max 1e3 and use REQ.maxResults: DescribeQueryDefinitions()
                              #  - no pagination: DescribeAccountPolicies(), GetLogGroupFields(), TestMetricFilter()
                              #  - pagination but never used due to limit: DescribeExportTasks(), DescribeQueries(),
                              #    DescribeResourcePolicies()

THROTTLING ==>                #800/s (REGION-specific, soft): PutLogEvents()
                              #25/s (REGION-specific): GetLogEvents()
                              #10/s (REGION-specific): FilterLogEvents()
                              #50/s (soft): CreateLogStream()
                              #5/s (soft): Describe|DeleteLogStream(), *LogGroup()
                              #5/s (not soft): all others

PRICING ==>                   #New LLEVENTs: 1$/2GB
                              #  - free: 5GB
                              #  - 25% more expensive if DATA_POLICY
                              #  - vended logs:
                              #     - to LOG_STREAM: same price
                              #        - 2x cheaper after 10TB, 5x after 30TB, 10x after 50TB
                              #     - to S3|Kinesis: x2 cheaper
                              #        - 3x cheaper after 10TB, 6.5x after 30TB, 10x after 50TB
                              #All LLEVENTs (LOG_GROUP.storedBytes): 1$/33GB
                              #  - free: 5GB
                              #  - including vended logs stored in LOG_STREAM (but not in S3|Kinesis)
                              #Traffic out: same as EC2
                              #QUERY: 1$/200GB read (QUERY_STATS.bytesScanned)
                              #  - free: 5GB
                              #Live tail: 1$/100 minutes
                              #  - free: 30h/month

CloudWatchLogsFullAccess      #AWS managed POLICY allowing logs:*
CloudWatchLogsReadOnlyAccess  #Same but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          API METRICS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLOUDWATCH METRICS ==>        #
AWS/Logs|Usage/CallCount      #NUM of API calls
AWS/Logs/ErrorCount           #NUM of failed API calls
AWS/Logs/ThrottleCount        #NUM of throttled API calls

DVAR Service                  #Always 'Logs'
                              #With AWS/Logs|Usage/*Count
DVAR Type                     #Always 'API'
                              #With AWS/Logs|Usage/*Count
DVAR Resource                 #'ACTION'
                              #With AWS/Logs|Usage/*Count
DVAR Account metrics          #BOOL. Make METRIC not ACTION-specific, i.e. opposite to DVAR Resource
                              #With AWS/Logs|Usage/*Count
DVAR Class                    #Always 'None'
                              #With AWS/Logs|Usage/*Count

DVAR LogGroupName             #'LOG_GROUP'
                              #With all except AWS/Logs/*Count|LogEventsWithFindings


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogGroup()              #Req:
                              #  - only logGroupName, kmsKeyId
                              #Res: empty
PutRetentionPolicy()          #Req:
                              #  - only logGroupName, retentionInDays
                              #Res: empty
DeleteRetentionPolicy()       #Req:
                              #  - only logGroupName
                              #Res: empty
DescribeLogGroups()           #Req LOG_GROUP_REQ
                              #Res: logGroups LOG_GROUP_ARR
                              #  - no tags
                              #  - only arn|logGroupName|creationTime if logGroupNamePattern used
DeleteLogGroup()              #Req:
                              #  - only logGroupName
                              #Res: empty

LOG_GROUP                     #Group of LOG_STREAMs
                              #Max 1e6 per REGION
LOG_GROUP.arn                 #LOG_GROUP_ARN. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP
LOG_GROUP.logGroupName        #'LOG_GROUP'. Max 512 chars, [[:alnum:]_-/.#]
                              #Can include a NAMEPATH, often starting|using slashes
                             ##With Pulumi, can use RPROPS.namePrefix
LOG_GROUP_REQ
 .logGroupNamePrefix          #STR. Filter logGroupName that start with STR
LOG_GROUP_REQ
 .logGroupNamePattern         #STR. Filter logGroupName that include STR, case-insensitively
LOG_GROUP.creationTime        #DATE_NUM

LOG_GROUP.retentionInDays     #NUM (def: none) of days before deleting LLEVENTs, among:
                              #  - 1|3|5 days
                              #  - 1-2 weeks
                              #  - 1-6 months
                              #  - 1|1.5|2-10 years

LOG_GROUP.storedBytes         #Total NUM of bytes stored

cw ls groups                 ##Like `aws cli describe-log-groups` but only print LOG_GROUP.logGroupName


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogStream()             #Req: LOG_STREAM
                              #  - only logStreamName, logGroupName
                              #Res: empty
DescribeLogStreams()          #Req: LOG_STREAM_REQ
                              #Res: LogStreams LOG_STREAM_ARR
                              #  - no logGroupName
DeleteLogStream()             #Req: LOG_STREAM
                              #  - only logStreamName, logGroupName
                              #Res: empty

LOG_STREAM                    #Series of LLEVENTs
                              #Deleted if empty for 2 months
LOG_STREAM.arn                #LOG_STREAM_ARN. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP:log-stream:LOG_STREAM
LOG_STREAM.logStreamName      #'LOG_STREAM'. Max 512 chars, no : or *
LOG_STREAM_REQ
 .logStreamNamePrefix         #STR
LOG_STREAM.creationTime       #DATE_NUM
LOG_STREAM.firstEventTimestamp#DATE_NUM of earliest LLEVENT
LOG_STREAM.lastIngestionTime  #DATE_NUM of latest LLEVENT starting processing
LOG_STREAM.lastEventTimestamp #DATE_NUM of latest LLEVENT finishing processing

LOG_STREAM[_REQ]
 |METRIC_FILTER.logGroupName  #'LOG_GROUP'
LOG_STREAM_REQ
 .logGroupIdentifier          #'LOG_GROUP'|LOG_GROUP_ARN

LOG_STREAM_REQ.orderBy        #'LogStreamName' (def) or 'LastEventTime'
LOG_STREAM_REQ.descending     #BOOL (def: false). Sorting order

cw ls streams LOG_GROUP      ##Like `aws cli describe-log-streams` but only print LOG_GROUP.logStreamName


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutLogEvents()                #Req: LLEVENTS
                              #  - no LLEVENT.eventId|ingestionTime
                              #Res: LLEVENTS_NEW
GetLogEvents()                #Req: LLEVENTS_REQ
                              #  - no filterPattern, logStreamNamePrefix
                              #Res: events LLEVENT_ARR
                              #  - no LLEVENT.eventId
FilterLogEvents()             #Req: LLEVENTS_REQ
                              #  - logStreamName STR -> logStreamNames STR_ARR + logStreamNamePrefix STR
                              #  - no startFromHead
                              #Res: events LLEVENT_ARR, searchedLogStreams LLEVENTS_RES_ARR

LLEVENTS.logEvents            #LLEVENT_ARR
                              #Not logged by CloudTrail
                              #Max 1e4. Max 1MB
LLEVENT                       #Log message
                              #CloudWatch Logs storing LLEVENTs internally is called "archiving" by AWS documentation
                              #Max 256KB
LLEVENT.eventId               #MID

LLEVENT.message               #STR

LLEVENT.ingestionTime         #DATE_NUM of LLEVENT itelf
LLEVENT.timestamp             #DATE_NUM of event being logged
                              #Max 14d before ingestionTime, and 2h after it
                              #LLEVENTS.logEvents is sorted by LLEVENT.timestamp
                              #  - in request, must be sorted, with a max 24h span
LLEVENTS_REQ.startTime|endTime#DATE_NUM. Filter by LLEVENT.timestamp
LLEVENTS_REQ.startFromHead    #BOOL (def: true). asc|desc sorting order.
                              #Always sorted by LLEVENT.timestamp

LLEVENTS_NEW
 .rejectedLogEventsInfo       #LLEVENTS_REJECT. LLEVENTs that failed
LLEVENTS_REJECT
 .tooOldLogEventEndIndex      #NUM of LLEVENTs with a timestamp >14d older than ingestionTime
LLEVENTS_REJECT
 .tooNewLogEventStartIndex    #NUM of LLEVENTs with a timestamp >2h newer than ingestionTime
LLEVENTS_REJECT
 .expiredLogEventEndIndex     #NUM of LLEVENTs beyond LOG_GROUP.retentionInDays

LLEVENTS[_REQ|RES]
 .logStreamName               #'LOG_STREAM'
LLEVENTS_RES
 .searchedCompletely          #BOOL. Whether all LLEVENTs in LOG_STREAM were searched

LLEVENTS[_REQ].logGroupName   #'LOG_GROUP'
LLEVENTS_REQ
 .logGroupIdentifier          #'LOG_GROUP'|LOG_GROUP_ARN

LLEVENTS_REQ.filterPattern    #'FILTER_PATTERN'

CLOUDWATCH METRICS ==>        #
AWS/Logs/IncomingLogEvents    #NUM of new LLEVENTs
AWS/Logs/IncomingBytes        #NUM. Size of new LLEVENTs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAIL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIVE TAIL ==>                 #View LLEVENTs, in CLI or UI console
                              #Meant for debugging
                              #Requires PACTION logs:Start|StopLiveTail
                              #Max 15 ongoing sessions (soft limit)

tail LOG_GROUP                #Tail LLEVENTs in CLI
--follow                      #Whether to tail or not (def)
--log-stream-names
--log-stream-name-prefix
--filter-pattern              #Like FilterLogEvents()
--since DATE|DURATION         #Like FilterLogEvents() startTime
                              #DURATION is NUM + s|m|h|d|w
                              #Def: 10m
--format                      #STR among:
                              #  - detailed (def): long LLEVENT.timestamp|logStreamName|message
                              #  - short: short LLEVENT.timestamp|message
                              #  - json: only LLEVENT.message, as JSON

LIVE TAIL ==>                 #Tail LLEVENTs in UI console
                              #Can filter by LOG_GROUPs (max 10), LOG_STREAMs or FILTER_PATTERNs
                              #Can highlight specific words

PULUMI ==>                   ##`pulumi logs` shows LLEVENTs

cw ...                       ##Version 4.1.3
--endpoint=URL
--profile=PROFILE
--region=REGION
--no-color                   ##Like aws cli
--no-version-check           ##Unless set, check for updates

cw tail                      ##Similar to `aws cli tail`
 [LOG_GROUP[:LOG_STREAM]...] ##By default, only prints LLEVENT.message
                             ##Def LOG_GROUP: stdin (newline-separated)
                             ##LOG_STREAM can be just the prefix
                             ##Pros:
                             ##  - polls with FilterLogEvents(), i.e. cheaper, every 250ms
                             ##  - can filter by FilterLogEvents() endTime
                             ##  - can tail multiple LOG_GROUPs
                             ##  - can print LLEVENT.id
                             ##Cons:
                             ##  - third-party
                             ##  - installed as OS package
                             ##  - print JSON as single line
                             ##  - does not have the general features that `aws cli` offers (authentication, history, etc.)

--follow|-f                  ##Whether to tail or not (def)
--start|-b "DATE|DURATION"   ##Like FilterLogEvents() startTime
                             ##"DATE" is "[YYYY-MM-DD][T][HH[:MM[:SS]]]"
                             ##"DURATION" is NUM + m|h|d, which can concatenated, e.g. "4h30m"
--end|-e "DATE"              ##Same but for FilterLogEvents() endTime
--local|-l                   ##Use local timezone instead of UTC
--event-id|-i                ##Print LLEVENT.id
--timestamp|-t               ##Print LLEVENT.timestamp
--stream-name|-s             ##Print LLEVENTS.logStreamName
--group-name|-n              ##Print LLEVENTS.logGroupName
--retry|-r                   ##Retry on network errors
--grep|-g STR                ##Like FilterLogEvents() filterPattern
--grepv|-v REGEXP            ##Inverted match against LLEVENT.message
--query|-q STR               ##Like `aws cli --query`, i.e. applies JMESPath
                             ##If cannot apply for a given LLEVENT, ignored


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        FILTER PATTERN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FILTER_PATTERN                #Filter LLEVENTs by their message
                              #One of the following syntaxes
                              #Max 1KB

ANY MATCH ==>                 #
''                            #Matches anything

STRING MATCH ==>              #Does not create $FVARs
VAL                           #Can use GLOB_REGEXP
                              #Case-sensitive
                              #Must "-quote non-[:alnum:]
VAL ...                       #Includes all of VALs
?VAL ...                      #Includes any of VALs
-VAL ...                      #Does not include VAL

JSON MATCH ==>                #Set each JSON field as $FVAR
{ $.VARR OP VAL }             #VARR: 1|many of .VAR, ['VAR'] or [NUM]
                              #VAL: STR, "STR" or NUM
                              #  - can include GLOB_REGEXP
{ $.VARR = != VAL }           #
{ $.VARR > >= < <= NUM }      #
{ $.VARR is null|true|false } #Same as = "null|true|false"
{ $.VARR not exists }         #Is undefined
{ ... || ... }
{ ... && ... }
{ (...) }                     #

WHITESPACE-DELIMITED MATCH ==>#For example, *.tsv
                              #Fields can []-quote or "-quote whitespaces
[FVAR, ...]                   #Set each field as $FVAR
[FVAR OP VAL, ...]            #VAL can use GLOB_REGEXP
                              #OP: = != > >= < <=
                              #Default OP VAL: = * (always match)
[FVAR [OP VAL] || ..., ...]
[FVAR [OP VAL] && ..., ...]   #
[..., ...]                    #FVAR can be named ... in any position
                              #This sets each field as $NUM FVAR (1-based)
[wNUM [OP VAL], ...]          #FVAR can be named wNUM to match field at position NUM
                              #Last wNUM cannot use OP VAL
                              #  - can workaround this by adding a dummy wNUM at end
[]                            #Same as [...]

GLOB_REGEXP                   #Either:
                              #  - globbing: only *
                              #  - %REGEXP%
                              #     - only visible ASCII, and no ! " ' ` % & ( ) : < > ~
                              #     - can use \ ? * + {,} [] | ^ $ . \d \D \s \S \w \W \xXX
                              #     - max 5 FILTER_PATTERNs with REGEXP per LOG_GROUP
                              #     - max 2 REGEXPs per FILTER_PATTERN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METRIC MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricFilter()             #Req: METRIC_FILTER
                              #  - no creationTime
                              #Res: empty
DescribeMetricFilters()       #Req: METRIC_FILTER|METRIC_TRANSFORM
                              #  - only logGroupName, metricName, metricNamespace
                              #  - only filterName -> filterNamePrefix STR
                              #Res: metricFilters METRIC_FILTER_ARR
DeleteMetricFilter()          #Req: METRIC_FILTER
                              #  - only filterName, logGroupName
                              #Res: empty

METRIC_FILTER                 #Create CloudWatch METRIC_DATA from LLEVENTs
                              #Max 100 per LOG_GROUP
METRIC_FILTER.filterName      #'METRIC_FILTER'
METRIC_FILTER.creationTime    #DATE_NUM

METRIC_FILTER.filterPattern   #'FILTER_PATTERN'

METRIC_FILTER
 .metricTransformations       #METRIC_TRANSFORM_ARR. METRIC_DATA being created
METRIC_TRANSFORM.metricName   #'METRIC'. METRIC.MetricName
METRIC_TRANSFORM
 .metricNamespace             #'NAMESPACE'. METRIC.Namespace
METRIC_TRANSFORM.dimensions   #OBJ. METRIC.Dimensions
                              #Max 3 DVARs
                              #If >1e3 different DVALs in an hour, METRIC_FILTER automatically disabled
                              #DVAL include $FVAR
METRIC_TRANSFORM.metricValue  #STR. METRIC_DATUM.Value
                              #Can include $FVAR
METRIC_TRANSFORM.defaultValue #STR. METRIC_DATUM.Value
                              #Emitted when METRIC_FILTER.filterPattern does not match
                              #Goals:
                              #  - knowing frequency when filterPattern matches or not
                              #  - prevent undefined PERIODs, i.e. with no METRIC_DATA
METRIC_TRANSFORM.unit         #STR. METRIC_DATUM.Unit

LOG_GROUP.metricFilterCount   #NUM of METRIC_FILTERs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METRIC TEST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TestMetricFilter()            #Req: TEST_FILTER_REQ
                              #Res: matches TEST_FILTER_RES_ARR

TEST_FILTER_REQ               #Try a METRIC_FILTER against test LLEVENTs
TEST_FILTER_REQ               #STR_ARR of test LLEVENT.message
 .logEventMessages            #Max 50
TEST_FILTER_REQ.filterPattern #'FILTER_PATTERN'

TEST_FILTER_RES.eventMessage  #STR. Value in logEventMessages
TEST_FILTER_RES.eventNumber   #NUM. Index in logEventMessages
TEST_FILTER_RES
 .extractedValues             #{ $FVAR: STR, ... } matched by FILTER_PATTERN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          QUERY MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


StartQuery()                  #Req: QUERY
                              #  - logGroupIdentifiers -> logGroupIdentifiers + logGroupName[s] STR[_ARR]
                              #  - no queryId, createTime, status
                              #Res: QUERY
                              #  - only queryId
                              #Paginates QUERY_RESULTS.results for GetQueryResults()
DescribeQueries()             #Req: QUERY
                              #  - only logGroupIdentifiers -> logGroupName STR
                              #  - only status
                              #Res: queries QUERY_ARR
                              #  - logGroupIdentifiers -> logGroupName STR
                              #  - no startTime|endTime
StopQuery()                   #Req: QUERY
                              #  - only queryId
                              #Res: QUERY
                              #  - only status -> success BOOL
GetQueryResults()             #Req: QUERY
                              #  - only queryId
                              #Res: QUERY_RESULTS

QUERY                         #Advanced search|query for LLEVENTs
                              #Called "Logs Insights"
                              #60m timeout. Once complete, deleted after 7d
                              #Max 30 running at once
QUERY.queryId                 #QUERY_MID
QUERY.createTime              #DATE_NUM

QUERY.queryString             #'QUERY_STRING'

QUERY.logGroupIdentifiers     #'LOG_GROUP'|LOG_GROUP_ARN_ARR
                              #Max 50

QUERY.startTime|endTime       #DATE_NUM, filtering by LLEVENT.timestamp

QUERY_RESULTS.results         #QUERY_RESULT_ARR_ARR
                              #Each QUERY_RESULT_ARR is a LLEVENT
                              #Each QUERY_RESULT is a FIELD
QUERY_RESULT.field            #'FIELD'
QUERY_RESULT.value            #STR

QUERY[_RESULTS].status        #STR among:
                              #  - Scheduled
                              #  - Running
                              #  - Complete
                              #  - Failed, Cancelled, Timeout
                              #  - Unknown

QUERY_RESULTS.statistics      #QUERY_STATS
QUERY_STATS.recordsMatched    #NUM of LLEVENTs matched
QUERY_STATS.recordsScanned    #NUM of LLEVENTs read
QUERY_STATS.bytesScanned      #NUM of bytes read, from QUERY_STATS.recordsScanned

CLOUDWATCH DASHBOARD ==>      #Can run|display QUERY in CloudWatch DASHBOARD's DLOG (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       QUERY DEFINITION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutQueryDefinition()          #Req: QUERYDEF
                              #  - no lastModified
                              #  - only one with clientToken
                              #Res: QUERYDEF
                              #  - only queryDefinitionId
DescribeQueryDefinitions()    #Req: QUERYDEF
                              #  - only name -> queryDefinitionNamePrefix STR
                              #Res: queryDefinitions QUERYDEF_ARR
DeleteQueryDefinition()       #Req: QUERYDEF
                              #  - only queryDefinitionId
                              #Res: success BOOL

QUERYDEF                      #Saved 'QUERY_STRING'. Also called "saved query"
                              #Must be either:
                              #  - manually retrieved, then run separately with StartQuery()
                              #  - used through UI console
                              #Not logged by CloudTrail
                              #Max 1e3 per REGION
QUERYDEF.queryDefinitionId    #QUERYDEF_MID
QUERYDEF.name                 #'QUERYDEF'
                              #Can include a NAMEPATH, shown as folders in UI console
QUERYDEF.lastModified         #DATE_NUM
QUERYDEF.clientToken          #STR. Idempotence

QUERYDEF.queryString          #'QUERY_STRING'

QUERYDEF.logGroupNames        #'LOG_GROUP'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         QUERY FIELDS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetLogGroupFields()           #Req: QUERY_FIELDS_REQ
                              #Res: logGroupFields QUERY_FIELD_ARR
GetLogRecord()                #Req: QUERY_RECORD_REQ
                              #Res: QUERY_RECORD_RES

QUERY_FIELDS_REQ              #Retrieves|parses names of all FIELDs of specific LLEVENTs
QUERY_FIELDS_REQ
 .logGroupIdentifier          #'LOG_GROUP'|LOG_GROUP_ARN
QUERY_FIELDS_REQ.logGroupName #'LOG_GROUP'
QUERY_FIELDS_REQ.time         #DATE_NUM. Filter for LLEVENTs 8m before|after DATE_NUM.
                              #If not specified, filter for LLEVENTs in last 15m

QUERY_FIELD.name              #'FIELD'
QUERY_FIELD.percent           #NUM of LLEVENTs with that FIELD not undefined

QUERY_RECORD_REQ              #Retrieves|parses names + values of all FIELDs of a single LLEVENT
QUERY_RECORD_REQ
 .logRecordPointer            #STR. LLEVENT's @ptr

QUERY_RECORD_RES.logRecord    #{ FIELD: STR, ... }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         QUERY SYNTAX          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUERY_STRING                  #The syntax is the next chapters
                              #Keywords are case-insensitive
                              #Max 10KB

#COMMENT                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          QUERY FIELD          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FIELD                         #One of the following
`FIELD`                       #Quoting needed unless only [[:alnum:].@]

VARR                          #If LLEVENT.message 'OBJ|ARR_JSON', OBJ|ARR.VARR
                              #VARR: 1|many of .VAR, .NUM
                              #Max 200 per LLEVENT, 1000 per LOG_GROUP

@message                      #LLEVENT.message
@ingestionTime                #LLEVENT.ingestionTime
@timestamp                    #LLEVENT.timestamp
@log                          #'ACCOUNT_ID:LOG_GROUP'
@logStream                    #'LOG_STREAM'

@ptr                          #LLEVENT_MID. Always output in QUERY_RESULTs

SERVICE-SPECIFIC ==>          #A few SERVICEs define their own


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         QUERY COMMAND         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COMMAND | ...                 #Pipe COMMANDs
fields|parse|sort|stats ...
 as FIELD,...                 #Alias, i.e. rename COMMAND's outputs

COMMAND                       #One of the following

fields FIELD_EXPR,...         #Output those FIELDs, in each LLEVENT
display FIELD,...             #Only keep those FIELDs, in each LLEVENT

parse FIELD "..."             #String matching, extracting each * as a FIELD2
parse FIELD /.../             #REGEXP matching, extracting each (?<FIELD2>...)

filter BOOL_EXPR              #Only keep LLEVENTs where BOOL_EXPR is true
sort FIELD asc|desc           #Sort by FIELD
limit NUM                     #Only keep first NUM LLEVENTs

dedup FIELD,...               #Ignore LLEVENTs with same FIELDs values as previous LLEVENTs
                              #"previous" is based on sort order
                              #Undefined values are not considered duplicates
                              #Must be either last COMMAND, or before `limit` as a last COMMAND

pattern STR_EXPR              #Automatically detect shared patterns. Produces FIELDs:
                              #  - @pattern STR: common substring, with * for variable parts
                              #     - can be used with parse COMMAND
                              #  - @sampleCount NUM: total of matching LLEVENTs
                              #  - @ratio NUM: percentage of matching LLEVENTs
                              #  - @severityLabel 'Error|Warning|Info|Debug': log severity


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       QUERY AGGREGATION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


stats AFUNC(...),...          #COMMAND that groups by STR_EXPR and outputs FIELDs from aggregate AFUNCs
 by STR_EXPR,...              #UI shows results as charts:
                              #  - bar chart: always
                              #  - if group by bin(): line chart, stacked area chart, pie chart
                              #AFUNCs follow

count([*])->NUM               #NUM of LLEVENTs
count(FIELD)->NUM             #NUM of LLEVENTs where FIELD is not undefined
count_distinct(FIELD)->NUM    #Approximate NUM of LLEVENTs with unique FIELDs

avg(NUM_FIELD)->NUM           #
sum(NUM_FIELD)->NUM           #
stddev(NUM_FIELD)->NUM        #

min|max(FIELD)->VAL           #
pct(FIELD, NUM)->VAL          #Percentile value

sortsFirst|Last(FIELD)->VAL   #First|last value, in current sorting order
earliest|latest(FIELD)->VAL   #First|last value, in @timestamp sorting order


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       QUERY EXPRESSION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPR                          #Can use the following

VAL = != VAL2                 #

ispresent(FIELD)->BOOL        #true unless undefined
coalesce(FIELD,...)->FIELD    #First FIELD not undefined

(...)                         #
BOOL and or BOOL2
not BOOL                      #
VAL [not] in ARR              #

NUM < <= > >= NUM2            #
greatest|least(NUM,...)->NUM  #

NUM + - * / ^ % NUM2          #
abs(NUM)->NUM                 #
ceil|floor(NUM)->NUM          #
log(NUM)->NUM                 #
sqrt(NUM)->NUM                #

STR like /REGEXP/             #BOOL. REGEXP match
STR =~ /REGEXP/               #Must use (?FLAGS), not /REGEXP/FLAGS
STR like STR2                 #BOOL. Has substring
strcontains(STR, STR2)->0|1   #Same as 0|1

strlen(STR)->NUM              #Length in Unicode codepoints
isempty(FIELD)->0|1           #1 if undefined or empty STR
isblank(FIELD)->0|1           #1 if undefined, empty STR or only whitespaces
concat(STR,...)->STR2         #
toupper|tolower(STR)->STR2    #
[l|r]trim(STR[, 'CHARS'])->STR#
substr(STR, NUM[, NUM2])->STR2#Substring at index NUM, for NUM2 chars (def: all)
replace
 (FIELD, STR, STR2)->STR3     #

toMillis
 ('DATE'_FIELD)->DATE_NUM     #
fromMillis
 (DATE_NUM)->'DATE'_FIELD     #
datefloor|dateceil            #Rounding down|up.
 ('DATE', 'PERIOD')->'DATE'   #PERIOD is NUM followed by y|q|mo|w|d|h|m|s|ms, yr|qtr|mon|hr|min|sec|msec
                              #or year|quarter|month|week|day|hour|minute|second|millisecond
bin('PERIOD')->'DATE'         #Same as datefloor(@timestamp, 'PERIOD')

isValidIp[V4|6](FIELD)->BOOL  #
isIp[V4|6]InSubnet
 (FIELD, "CIDR")->BOOL        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RESOURCE POLICY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutResourcePolicy()           #Req: RESOURCE_POLICY
                              #  - no lastUpdatedTime
                              #Res: resourcePolicy RESOURCE_POLICY
DescribeResourcePolicies()    #Req: empty
                              #Res: resourcePolicies RESOURCE_POLICY_ARR
DeleteResourcePolicy()        #Req: RESOURCE_POLICY
                              #  - only policyName
                              #Res: empty

RESOURCE_POLICY               #Resource-based POLICY on LOG_GROUP|LOG_STREAM
                              #Not logged by CloudTrail
                              #Max 10 per REGION
RESOURCE_POLICY.policyName    #'RESOURCE_POLICY'
RESOURCE_POLICY
 .lastUpdatedTime             #DATE_NUM

RESOURCE_POLICY               #IAM 'POLICY'
 .policyDocument              #Max 5KB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VENDED LOGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VENDED LOGS ==>               #When another SERVICE calls PutLogEvents()
                              #Enabled|disabled in those SERVICEs
                              #  - requires PACTION logs:Create|Update|Get|List|DeleteLogDelivery

VENDED LOGS TO LOG_STREAM ==> #Some vended logs are done directly to a LOG_STREAM called /aws/vendedlogs/SERVICE
                              #Must use a RESOURCE_POLICY.policyDocument with:
                              #  - Principal.Service 'delivery.logs.amazonaws.com'
                              #  - PACTION logs:PutLogEvents|CreateLogStream
                              #  - COND_KEY aws:SourceArn LOG_GROUP_ARN
                              #  - COND_KEY aws:SourceAccount ACCOUNT_ID
                              #Some SERVICEs (e.g. CloudTrail) require specifying a ROLE_ARN instead of RESOURCE_POLICY.policyDocument

VENDED LOGS TO S3 ==>         #Some vended logs are sent to a S3 BUCKET, at BUCKET/AWSLogs/account-ID/ACCOUNT_ID/*, every 5m
                              #Uses a LOG_GROUP internally
                              #Must use a BUCKET POLICY with:
                              #  - Principal.Service 'delivery.logs.amazonaws.com'
                              #  - PACTION s3:GetBucketAcl on BUCKET, s3:PutObject on BUCKET/AWSLogs/account-ID/*
                              #     - also some kms:* if using S3-KMS (see its doc)
                              #  - COND_KEY aws:SourceArn LOG_GROUP_ARN
                              #  - COND_KEY aws:SourceAccount ACCOUNT_ID
                              #  - COND_KEY s3:x-amz-acl 'bucket-owner-full-control' (only for s3:PutObject)

VENDED LOGS TO KINESIS ==>    #Some vended logs are sent to a Kinesis FIREHOSE
                              #Uses a LOG_GROUP internally
                              #Requires PACTION firehose:TagDeliveryStream
AWSServiceRoleForLogDelivery  #SERVICE_LINKED_ROLE used for Kinesis FIREHOSE
                              #Automatically created, if PACTION iam:CreateServiceLinkedRole
                              #Trust policy allows 'delivery.logs.amazonaws.com' to sts:AssumeRole
AWSServiceRoleForLogDelivery  #AWS managed POLICY used by AWSServiceRoleForLogDelivery
 Policy                       #Allows PACTIONs firehose:PutRecord[Batch]|ListTagsForDeliveryStream
                              #  - providing Firehose delivery stream has TAG LogDeliveryEnabled 'true'
                              #     - automatically setup by AWS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SUBSCRIPTION MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutSubscriptionFilter()       #Req: SUBSCRIPTION
                              #  - no creationTime
                              #Res: empty
DescribeSubscriptionFilters() #Req: SUBSCRIPTION
                              #  - only filterName -> filterNamePrefix STR
                              #  - only logGroupName
                              #Res: subscriptionFilters SUBSCRIPTION_ARR
DeleteSubscriptionFilter()    #Req: SUBSCRIPTION
                              #  - only filterName, logGroupName
                              #Res: empty

SUBSCRIPTION                  #Send a LOG_GROUP's LLEVENTs to a Lambda FUNCTION or Kinesis STREAM|FIREHOSE
                              #On delivery failure due to 5** or throttling, retry for up to 24h
                              #Max 2 per LOG_GROUP
SUBSCRIPTION.filterName       #'SUBSCRIPTION'
SUBSCRIPTION.creationTime     #DATE_NUM

SUBSCRIPTION.logGroupName     #'LOG_GROUP'

SUBSCRIPTION.filterPattern    #'FILTER_PATTERN'

SUBSCRIPTION.destinationArn   #ARN of either Lambda FUNCTION, Kinesis STREAM|FIREHOSE or DESTINATION

SUBSCRIPTION.roleArn          #ROLE_ARN used to write LLEVENTs onto SUBSCRIPTION.destinationArn
                              #Requires PACTION iam:PassRole
                              #If using a DESTINATION, should use DESTINATION.roleArn instead
                              #  - unless logs come from another SERVICE, in which case:
                              #     - both SUBSCRIPTION|DESTINATION.roleArn must be used
                              #     - SUBSCRIPTION.roleArn must grant PACTION logs:PutLogEvents instead

CLOUDWATCH METRICS ==>        #
AWS/Logs/ForwardedLogEvents   #NUM of LLEVENTs sent by SUBSCRIPTION
AWS/Logs/ForwardedBytes       #NUM. Size of LLEVENTs sent by SUBSCRIPTION
AWS/Logs/DeliveryErrors       #NUM of LLEVENTs which failed to be delivered by SUBSCRIPTION
AWS/Logs/DeliveryThrottling   #NUM of LLEVENTs which were throttled when being delivered by SUBSCRIPTION
DVAR FilterName               #'SUBSCRIPTION'
DVAR DestinationType          #'lambda|kinesis|firehose'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     SUBSCRIPTION PAYLOAD      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPAYLOAD                      #Sent to the SUBSCRIPTION destination
                              #Is OBJ_JSON that is base64'd and gzip'd
SPAYLOAD.owner                #ACCOUNT_ID
SPAYLOAD.logGroup             #'LOG_GROUP'
SPAYLOAD.logStream            #'LOG_STREAM'
SPAYLOAD.subscriptionFilters  #'SUBSCRIPTION'_ARR
SPAYLOAD.messageType          #Either:
                              #  - 'DATA_MESSAGE': usual one
                              #  - 'CONTROL_MESSAGE': ping
SPAYLOAD.logEvents            #LLEVENT_ARR
                              #Only message, timestamp, and id LLEVENT_MID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SUBSCRIPTION LAMBDA      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSION ==>                #Must use LAMBDA FUNC_VERSION.Role, not SUBSCRIPTION.roleArn
                              #Use a LAMBDA PERMISSION policy with:
                              #  - Principal.Service 'logs.amazonaws.com'
                              #  - PACTION lambda:InvokeFunction
                              #  - COND_KEY aws:SourceArn LOG_GROUP_ARN
                              #  - COND_KEY aws:SourceAccount ACCOUNT_ID

INVOCATION ==>                #InvocationType 'Event'
REQ.awslogs.data              #'SPAYLOAD_JSON_GZIP_BASE64'
RES                           #None

LOG_GROUP.on[Decoded]Event
 ('FUNC', EFUNC, RPROPS,
 KROPTS)
 ->LOG_GROUP_EVENT_SUBSCRIPTIN
new LogGroupEventSubscription##With Pulumi, Lambda SUBSCRIPTION.
 ('FUNC', LOG_GROUP, EFUNC,  ##Child of CW.lambda.EventSubscription (see its doc)
 KROPTS)                     ##If `Decoded`, decode base64 + gzip + JSON from PAYLOAD
RPROPS.filterPattern         ##Forwarded to SUBSCRIPTION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     SUBSCRIPTION KINESIS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSIONS ==>               #Must use SUBSCRIPTION.roleArn
                              #Use a trust policy for Principal.Service 'logs.amazonaws.com'
                              #  - COND_KEY aws:SourceArn arn:aws:logs:REGION:ACCOUNT_ID:*
                              #Use a ROLE policy to allow PACTION kinesis:PutRecord

SUBSCRIPTION.distribution     #Whether to group:
                              #  - 'ByLogStream': by LOG_STREAM
                              #  - 'Random': randomly, i.e. uniform distribution of LLEVENTs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:  SUBSCRIPTION CROSS-ACCOUNT   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDestination()              #Req: DESTINATION
                              #  - no arn, creationTime, accessPolicy, forceUpdate
                              #Res: destination DESTINATION
                              #  - no tags, forceUpdate
PutDestinationPolicy()        #Req: DESTINATION
                              #  - only destinationName, accessPolicy, forceUpdate
                              #Res: empty
DescribeDestinations()        #Req: DESTINATION
                              #  - only destinationName -> destinationNamePrefix STR
                              #Res: destinations DESTINATION_ARR
                              #  - no tags, forceUpdate
DeleteDestination()           #Req: DESTINATION
                              #  - only destinationName
                              #Res: empty

DESTINATION                   #SUBSCRIPTION.destinationArn that can be used in a different ACCOUNT
                              #Can only be Kinesis STREAM|FIREHOSE, not Lambda FUNCTION
                              #Must be in same REGION as LOG_GROUP
                              #A test SPAYLOAD is sent on DESTINATION creation
DESTINATION.arn               #DESTINATION_ARN. arn:aws:logs:REGION:ACCOUNT_ID:destination:DESTINATION
DESTINATION.destinationName   #'DESTINATION'
DESTINATION.creationTime      #DATE_NUM

DESTINATION.targetArn         #Kinesis STREAM|FIREHOSE_ARN

DESTINATION.roleArn           #Like SUBSCRIPTION.roleArn, but for DESTINATION.targetArn
DESTINATION.accessPolicy      #Resource-based 'POLICY' to allow DESTINATION to be used as SUBSCRIPTION.roleArn
                              #E.g. can restrict which ACCOUNTs can send to DESTINATION
                              #Must have:
                              #  - PACTION logs:PutSubscriptionFilter
                              #  - Resource DESTINATION_ARN
                              #Max 5KB
DESTINATION.forceUpdate       #BOOL (def: false). Allow upserting.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EXPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateExportTask()            #Req: EXPORT
                              #  - no taskId, executionInfo, status
                              #Res: EXPORT
                              #  - only taskId
DescribeExportTasks()         #Req: EXPORT
                              #  - only taskId, statusCode
                              #Res: exportTasks EXPORT_ARR
                              #  - no logStreamNamePrefix
CancelExportTask()            #Req: EXPORT
                              #  - only taskId
                              #Res: empty

EXPORT                        #Export LOG_GROUP to S3 OBJECTs
                              #24h timeout
                              #Max 1 at a time per ACCOUNT
EXPORT.taskId                 #EXPORT_MID
EXPORT.taskName               #'EXPORT'
EXPORT
 .executionInfo.creationTime  #DATE_NUM

EXPORT.logGroupName           #'LOG_GROUP'
EXPORT.logStreamNamePrefix    #STR. Only if 'LOG_STREAM' start with STR
EXPORT.from|to                #DATE_NUM. Filter by LLEVENT.timestamp

EXPORT.destination            #S3 'BUCKET'
                              #Must be in same REGION as LOG_GROUP
EXPORT.destinationPrefix      #STR. Prefix to all S3 OBJECTs

PERMISSIONS ==>               #Must allow:
                              #  - Principal.Service 'logs.amazonaws.com'
                              #  - PACTION s3:GetBucketAcl on BUCKET, s3:PutObject on OBJECTs
                              #     - also some kms:* if using S3-KMS (see its doc)
                              #  - COND_KEY aws:SourceArn LOG_GROUP_ARN
                              #  - COND_KEY aws:SourceAccount ACCOUNT_ID
                              #  - COND_KEY s3:x-amz-acl 'bucket-owner-full-control' (only for s3:PutObject)

EXPORT.status.code            #STR among:
                              #  - PENDING
                              #  - RUNNING
                              #  - PENDING_CANCEL, CANCELLED
                              #  - COMPLETED, FAILED
EXPORT.status.message         #STR
EXPORT
 .executionInfo.completionTime#DATE_NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              KMS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AssociateKmsKey()             #Req: KMS_ASSOC
                              #Res: empty
DisassociateKmsKey()          #Req: KMS_ASSOC
                              #  - no kmsKeyId
                              #Res: empty

KMS_ASSOC                     #Sets default KMS_KEY_ID for LOG_GROUP|QUERY_RES
                              #Not logged by CloudTrail
KMS_ASSOC.kmsKeyId            #KMS_KEY_ID
KMS_ASSOC.logGroupName        #'LOG_GROUP'
KMS_ASSOC.resourceIdentifier  #Either:
                              #  - LOG_GROUP_ARN
                              #  - 'arn:aws:logs:REGION:ACCOUNT_ID:query-result:*'

LOG_GROUP.kmsKeyId            #KMS_KEY_ID used to encrypt LLEVENTs at rest
                              #Default: automatically managed
QUERY_RES.encryptionKey       #KMS_KEY_ID used to encrypt QUERY_RESULTs at rest
                              #Default: automatically managed

PERMISSIONS ==>               #Must allow:
                              #  - Principal.Service 'logs.amazonaws.com'
                              #  - PACTIONs kms:[Re]Encrypt*|Decrypt*|GenerateDataKey*|Describe*
                              #  - COND_KEY aws:SourceArn KMS_ACCOC.resourceIdentifier
                              #  - COND_KEY aws:SourceAccount ACCOUNT_ID
                              #  - COND_KEY kms:EncryptionContext:aws:logs:arn LOG_GROUP_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MASK MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutDataProtectionPolicy()     #Req: DATA_POLICY
                              #  - no lastUpdatedTime
                              #Res: DATA_POLICY
GetDataProtectionPolicy()     #Req: DATA_POLICY
                              #  - only logGroupIdentifier
                              #Res: DATA_POLICY
DeleteDataProtectionPolicy()  #Req: DATA_POLICY
                              #  - only logGroupIdentifier
                              #Res: empty

DATA_POLICY                   #Mask sensitive data in LLEVENTs of a LOG_GROUP with ***
                              #Not logged by CloudTrail
DATA_POLICY.logGroupIdentifier#'LOG_GROUP'|LOG_GROUP_ARN
DATA_POLICY.lastUpdatedTime   #DATE_NUM

DATA_POLICY.policyDocument    #'MASK_POLICY'
                              #Max 30KB

LOG_GROUP.dataProtectionStatus#STR. Whether LOG_GROUP has a DATA_POLICY, among:
                              #  - DISABLED
                              #  - ACTIVATED
                              #  - DELETED, ARCHIVED

LLEVENTS_REQ|QUERY_RECORD_REQ #BOOL (def: false). If true, do not mask.
 .unmask                      #Requires PACTION logs:Unmask
                              #  - this also allows not masking in UI console

unmask                        #QUERY COMMAND to not mask
unmask(FIELD)->STR            #Same for a single FIELD


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         MASK ACCOUNT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutAccountPolicy()            #Req: ADATA_POLICY
                              #  - no lastUpdatedTime, accountId
                              #Res: accountPolicy ADATA_POLICY
DescribeAccountPolicies()     #Req: ADATA_POLICY
                              #  - only policyName, policyType
                              #  - only accountId -> accountIdentifiers ACCOUNT_ID_ARR
                              #     - only when using a monitoring ACCOUNT with CloudWatch cross-account observability
                              #Res: accountPolicies ADATA_POLICY_ARR
DeleteAccountPolicy()         #Req: ADATA_POLICY
                              #  - only policyName, policyType
                              #Res: empty

ADATA_POLICY                  #Like DATA_POLICY but for all LOG_GROUPs in an ACCOUNT
                              #Requires DATA_POLICY-related PACTIONs too
                              #Not logged by CloudTrail
ADATA_POLICY.policyName       #'ADATA_POLICY'
ADATA_POLICY.lastUpdatedTime  #DATE_NUM

ADATA_POLICY.accountId        #ACCOUNT_ID
ADATA_POLICY.policyType       #Always 'DATA_PROTECTION_POLICY'
ADATA_POLICY.scope            #Always 'ALL'

ADATA_POLICY.policyDocument   #'MASK_POLICY'

LOG_GROUP.inheritedProperties #'ACCOUNT_DATA_PROTECTION' if LOG_GROUP has a ADATA_POLICY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MASK POLICY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MASK_POLICY                   #'OBJ_JSON'
                              #Max 30KB
MASK_POLICY.Version           #Always '2021-06-01'
MASK_POLICY.Name              #'MASK_POLICY'
MASK_POLICY.Description       #STR

MASK_POLICY.Statements        #MASK_STATEMENT_ARR
                              #Must have 1 item, with MASK_OP.Deidentify|Audit
MASK_STATEMENT.Sid            #'MASK_STATEMENT'
MASK_STATEMENT.Operation      #MASK_OP

MASK_OP.Deidentify.MaskConfig #Always empty OBJ
                              #Applies the masking


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MASK DESTINATION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MASK_OP                       #MASK_DESTINATION
 .Audit.FindingsDestination   #Send masked values to a destination
                              #Requires PACTIONs logs:CreateLogDelivery
MASK_DESTINATION              #Send to a 'LOG_GROUP'
 .CloudWatchLogs.LogGroup     #Requires PACTIONs logs:PutResourcePolicy|DescribeResourcePolicies|DescribeLogGroups
MASK_DESTINATION.S3.Bucket    #Send to a 'BUCKET'
                              #Requires PACTIONs s3:PutBucketPolicy|GetBucketPolicy
MASK_DESTINATION
 .Firehose.DeliveryStream     #Send to a Kinesis STREAM_ARN
                              #Requires PACTION firehose:TagDeliveryStream

MPAYLOAD                      #Payload sent to MASK_DESTINATION
MPAYLOAD.auditTimestamp       #'DATE'
MPAYLOAD.resourceArn          #LOG_GROUP_ARN
MPAYLOAD.dataIdentifiers      #DDATAID_ARR
DDATAID.name                  #'DATAID'
DDATAID.count                 #NUM of masked values
DDATAID.detections            #DDATAID_VAL_ARR
DDATAID_VAL.start|end         #NUM. Byte position in LLEVENT.message

AWS/Logs/LogEventsWithFindings#CloudWatch METRIC. NUM of LLEVENTs with masked values
                              #Requires MASK_OP.Audit


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MASK IDENTIFIERS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MASK_STATEMENT.DataIdentifier #DATAID_ARN_ARR. Defines what to mask
                              #Must be the same for each MASK_STATEMENT
                              #Always arn:aws:dataprotection::aws:data-identifier/DATAID
                              #DATAIDs are automatically managed by AWS, listed below
                              #Some are COUNTRY-specific
                              #Some require a keyword nearby, with|without space, _ or -
                              #  - see online for the list of keywords

AwsSecretKey                  #SECRET_ACCESS_KEY
OpenSshPrivateKey             #
PgpPrivateKey                 #
PkcsPrivateKey                #
PuttyPrivateKey               #

Name                          #Full name. Only latin alphabet
DateOfBirth                   #

EmailAddress                  #
PhoneNumber-COUNTRY           #COUNTRY: BR, DE, ES, FR, GB, IT, US
IpAddress                     #

Address                       #Address
ZipCode-US                    #Zip code
PostalCode-CA                 #Zip code
CepCode-BR                    #Zip code
LatLong                       #GPS coordinates

BankAccountNumber-COUNTRY     #COUNTRY: DE, ES, FR, GB, IT
                              #Does not mask account numbers known to be used for testing
CreditCardNumber              #
CreditCardExpiration          #
CreditCardSecurityCode        #

PassportNumber                #COUNTRY: CA, DE, ES, FR, GB, IT, US
NationalIdentificationNumber  #National ID
 -COUNTRY                     #COUNTRY: DE, ES, IT
InseeCode-FR                  #National ID
NieNumber-ES                  #National ID for foreigners
PermanentResidenceNumber-CA   #National ID for foreigners
IndividualTaxIdentication     #Tax ID
 Number-COUNTRY               #COUNTRY: BR, DE, ES, FR, GB
TaxId                         #Tax ID
                              #COUNTRY: DE, ES, FR, GB
NifNumber-ES                  #Tax ID
CpfCode-BR                    #Tax ID
RgNumber-BR                   #Tax ID
DriversLicense-COUNTRY        #COUNTRY: AT, AU, BE, BG, CA, CY, CZ, DE, DK, EE, ES, FI, FR, GB, GR, HR, HU, IE, IT, LT, LU, LV, MT, NL, PL, PT, RO, SE, SI, SK, US
ElectoralRollNumber-GB        #Voter ID
Ssn-ES|US                     #Social security ID
NationalInsuranceNumber-GB    #Insurance ID
SocialInsuranceNumber-CA      #Insurance ID
Cnpj-BR                       #Company ID

HealthInsuranceCardNumber-EU  #EU health number
HealthInsuranceNumber-FR      #FR health number
NhsNumber-GB                  #GB health number
PersonalHealthNumber-CA       #CA health number
HealthInsuranceClaimNumber-US #HICN number
HealthcareProcedureCode-US    #HCPCS code
MedicareBeneficiaryNumber-US  #MBN number
NationalProviderId-US         #NPI number
DrugEnforcementAgencyNumber-US#DEA number
NationalDrugCode-US           #NDC number

VehicleIdentificationNumber   #ISO 3779|3780


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListTagsForResource()         #Req: RESOURCE_TAGS
                              #  - only resourceArn
                              #Res: RESOURCE_TAGS
                              #  - no resourceArn
TagResource()                 #Req: RESOURCE_TAGS
                              #Res: empty
UntagResource()               #Req: RESOURCE_TAGS
                              #  - tags -> tagKeys STR_ARR
                              #Res: empty

RESOURCE_TAGS                 #Not logged by CloudTrail
RESOURCE_TAGS.resourceArn     #LOG_GROUP|DESTINATION_ARN
RESOURCE_TAGS.tags            #TAGS

LOG_GROUP|DESTINATION.tags    #TAGS
