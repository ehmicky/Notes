
                   
   CLOUDWATCH_LOGS  
                   



TODO ==>
  - CloudTrail: see unfinished "CloudWatch logs" chapter
  - CloudWatch metrics:
     - embedded metrics: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html
     - best practices: https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html
  - CloudWatch dashboard:
     - DLOG
  - Lambda:
     - https://docs.aws.amazon.com/lambda/latest/dg/urls-monitoring.html
     - https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html
     - https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html
     - ENVVAR AWS_LAMBDA_LOG_GROUP_NAME, AWS_LAMBDA_LOG_STREAM_NAME
     - Insights:
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-metrics.html (second half of page)
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Troubleshooting.html
        - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-example-event.html

GOAL ==>                      #Aggregates logs to single place, with rotation, and possibility to create CloudWatch alarms when log line match pattern

VERSION ==>                   #2023-07-17


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                #logs.amazonaws.com
                              #Can use HTTP[S]

FORMAT ==>                    #JSON
                              #Uses REQ.Action|Version

REQ_ID                        #x-amzn-RequestId [S]

PAGINATION ==>                #REQ.limit NUM (def|max: 50) + REQ|RES.nextToken except:
                              #  - def|max 1e4: StartQuery()
                              #  - def|max 1e4 or 1MB: FilterLogEvents()
                              #  - def|max 1e4 and use RES.nextBackwardToken|nextForwardToken: GetLogEvents()
                              #  - def|max 1e3 and use REQ.maxResults: DescribeQueries|QueryDefinitions()
                              #  - no pagination: DescribeAccountPolicies(), GetLogGroupFields(), TestMetricFilter()

PRICING ==>                   #  - 0.5$/GB read
                              #  - 0.03$/GB stored
                              #  - GetLogEvents(): same price as out traffic on EC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutLogEvents()                #Req: LLEVENTS
                              #  - no LLEVENT.IngestionTime
                              #Res: ???
GetLogEvents()                #Req:
                              #  - no LogEvents
                              #  - LLEVENT.Timestamp -> StartTime|EndTime DATE_NUM
                              #  - StartFromHead BOOL???
                              #Res: Events LLEVENT_ARR

LLEVENTS                      #
LLEVENTS.LogGroupName         #'LOG_GROUP'
LLEVENTS.LogStreamName        #'LOG_STREAM'

LLEVENTS.LogEvents            #LLEVENT_ARR
LLEVENT                       #Log message
LLEVENT.Timestamp             #DATE_NUM of event being logged
LLEVENT.IngestionTime         #DATE_NUM of LLEVENT itelf
LLEVENT.Message               #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogStream()             #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: empty
DescribeLogStreams()          #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: LogStreams LOG_STREAM_ARR
                              #  - no LogGroupName
DeleteLogStream()             #Req: LOG_STREAM
                              #  - only LogStreamName, LogGroupName
                              #Res: empty

LOG_STREAM                    #Series of LLEVENTs
                              #Deleted if empty for 2 months
LOG_STREAM.Arn                #LOG_STREAM_ARN
LOG_STREAM.LogStreamName      #'LOG_STREAM'
LOG_STREAM.CreationTime       #DATE_NUM
LOG_STREAM.LastIngestionTime  #DATE_NUM
LOG_STREAM.FirstEventTimestamp#DATE_NUM
LOG_STREAM.LastEventTimestamp #DATE_NUM

LOG_STREAM.StoredBytes        #NUM

LOG_STREAM.UploadSequenceToken#STR???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLogGroup()              #Req:
                              #  - only LogGroupName
                              #Res: empty
PutRetentionPolicy()          #Req:
                              #  - only LogGroupName, RetentionInDays
                              #Res: empty
DeleteRetentionPolicy()       #Req:
                              #  - only LogGroupName
                              #Res: empty
DescribeLogGroups()           #Req:
                              #  - only LogGroupName -> LogGroupNamePrefix STR
                              #Res: LogGroups LOG_GROUP_ARR
DeleteLogGroup()              #Req:
                              #  - only LogGroupName
                              #Res: empty

LOG_GROUP                     #Group of LOG_STREAMs with shared settings
LOG_GROUP.Arn                 #LOG_GROUP_ARN
LOG_GROUP.LogGroupName        #'LOG_GROUP'
LOG_GROUP.CreationTime        #DATE_NUM

LOG_GROUP.RetentionInDays     #NUM among 1|3|5, 7|14, 30|60|90|120|150|180, 365|400|545|731, 1827|3653
                              #Delete LLEVENTs after NUM days

LOG_GROUP.StoredBytes         #NUM

LOG_STREAM|METRIC_FILTER
 .LogGroupName                #'LOG_GROUP'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutMetricFilter()             #Req: METRIC_FILTER
                              #Res: empty
DescribeMetricFilters()       #Req:
                              #  - only LogGroupName
                              #  - only FilterName -> FilterNamePrefix STR
                              #Res: MetricFilters METRIC_FILTER_ARR
DeleteMetricFilter()          #Req: METRIC_FILTER
                              #  - only FilterName, LogGroupName
                              #Res: empty

METRIC_FILTER                 #Create METRIC_DATA from LLEVENTs
METRIC_FILTER.FilterName      #'METRIC_FILTER'

METRIC_FILTER|TEST_FILTER_REQ #Either:
 .FilterPattern               #  - STR:
                              #     - pattern triggering metric
                              #     - can be '' for any log event
                              #  - [VAR[=|>|<|>=|<=|!=VAL],...]:
                              #     - for tab-delimited log lines, when a field equals VAL
                              #     - VAR can be '...' at beginning, middle or end
                              #STR and VAL can use globbing

METRIC_FILTER
 .MetricTransformations       #METRIC_TRANSFORM_ARR
METRIC_TRANSFORM.MetricName   #'METRIC'
METRIC_TRANSFORM
 .MetricNamespace             #'NAMESPACE'
METRIC_TRANSFORM.MetricValue  #STR, e.g. '1'

LOG_GROUP.MetricFilterCount   #NUM

TestMetricFilter()            #Req: TEST_FILTER_REQ
                              #Res: Matches TEST_FILTER_RES_ARR

TEST_FILTER_REQ
 .LogEventMessages            #STR_ARR

TEST_FILTER_RES.EventMessage  #STR
TEST_FILTER_RES.EventNumber   #NUM
TEST_FILTER_RES
 .ExtractedValues             #{ VAR: STR, ... }

PutLogEvents
GetLogEvents
FilterLogEvents

GetLogRecord

CreateLogStream
DescribeLogStreams
DeleteLogStream

CreateLogGroup
PutRetentionPolicy
DeleteRetentionPolicy
DescribeLogGroups
GetLogGroupFields
DeleteLogGroup

PutMetricFilter
DescribeMetricFilters
DeleteMetricFilter
TestMetricFilter

PutDestination
DescribeDestinations
DeleteDestination
PutDestinationPolicy

StartQuery
DescribeQueries
StopQuery
GetQueryResults

PutQueryDefinition
DescribeQueryDefinitions
DeleteQueryDefinition

PutSubscriptionFilter
DescribeSubscriptionFilters
DeleteSubscriptionFilter

CreateExportTask
DescribeExportTasks
CancelExportTask

AssociateKmsKey
DisassociateKmsKey

PutResourcePolicy
DescribeResourcePolicies
DeleteResourcePolicy

PutAccountPolicy
DescribeAccountPolicies
DeleteAccountPolicy

PutDataProtectionPolicy
GetDataProtectionPolicy
DeleteDataProtectionPolicy

ListTagsForResource
TagResource
UntagResource
