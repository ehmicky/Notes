
              
   CLOUDTRAIL  
              



TO DOCUMENT ==>
  - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/logging_cw_api_calls.html
  - IAM: https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html
  - Glacier: https://docs.aws.amazon.com/amazonglacier/latest/dev/audit-logging.html
  - S3:
     - https://docs.aws.amazon.com/AmazonS3/latest/userguide/cloudtrail-logging.html
     - https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html
     - see common fields with NPAYLOAD (https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-content-structure.html)
     - JOBs: https://docs.aws.amazon.com/AmazonS3/latest/userguide/batch-ops-examples-event-bridge-cloud-trail.html
  - go through todo list in "new service" doc

Already read in user guide:
  - What is AWS CloudTrail
     - CloudTrail concepts
        - How does CloudTrail behave regionally and globally
        - Global service events
  - Working with CloudTrail
     - Viewing events with CloudTrail Event history
     - Viewing CloudTrail Insights events
     - Creating a trail for your AWS account
     - Creating a trail for an organization
     - Getting and viewing your CloudTrail log files
     - Configuring Amazon SNS notifications for CloudTrail
     - Using AWS CloudTrail with interface VPC endpoints
  - Working with CloudTrail Lake
     - CloudTrail Lake supported Regions
     - Create an event data store
     - Manage event data store lifecycles
     - Create an integration with an event source outside of AWS
     - View Lake dashboards
     - Learning resources
     - Managing CloudTrail Lake by using the AWS CLI
     - Supported CloudWatch metrics
  - CloudTrail log files
     - Create multiple trails
     - Logging management events
     - Logging data events
     - Logging Insights events for trails
     - Managing data consistency in CloudTrail
     - Receiving CloudTrail log files from multiple Regions
     - Receiving CloudTrail log files from multiple accounts
     - Validating CloudTrail log file integrity
  - Settings
  - Security
     - Identity and Access Management
        - Amazon SNS topic policy for CloudTrail
  - Log event reference
  - FaQ:
     - Services and Region support
     - Applying a trail to all Regions
     - Multiple trails

VERSION ==>                       #2023-08-01


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_DOMAIN                    #'cloudtrail'
                                  #Except for PutAuditEvents: 'cloudtrail-data'
                                  #  - including in PACTION and SDK|CLI

FORMAT ==>                        #JSON
                                  #Request: ?Action and ?Version
                                  #  - except AUDIT_EVENTs: REST

PAGINATION ==>                    #REQ|RES.NextToken STR
                                  #REQ.MaxResults NUM (def|max: 1e3, 50 with LookupEvents(), none with TRAIL)
                                  #No pagination with RESOURCE_TAGS|PUBLIC_KEY

PRICING ==>                       #TRAIL: first free

AWSCloudTrail_FullAccess          #AWS managed POLICY, granting:
                                  #  - cloudtrail:* on anything
                                  #  - iam:ListRoles|GetRolePolicy|GetUser: on any ROLE|USER
                                  #  - iam:PassRole: on any ROLE, if SERVICE_DOMAIN 'cloudtrail.amazonaws.com'
                                  #  - s3:ListAllMyBuckets|GetBucketLocation|GetBucketPolicy: on any BUCKET
                                  #  - s3:CreateBucket|PutBucketPolicy|PutBucketPublicAccessBlock: on BUCKET 'aws-cloudtrail-logs*'
                                  #  - sns:ListTopics: on any TOPIC
                                  #  - sns:CreateTopic|*TopicAttributes|AddPermission: on TOPIC 'aws-cloudtrail-logs*'
                                  #  - logs:CreateLogGroup: on LOG_GROUP 'aws-cloudtrail-logs*'
                                  #  - kms:CreateKey|ListKeys|CreateAlias|ListAliases: on any KMS_KEY|ALIAS
                                  #  - lambda:ListFunctions: on any FUNCTION
                                  #  - dynamodb:List[Global]Tables: on any TABLE
                                  #Make sure the reason behind those PACTIONs is documented in the rest of this doc???
AWSCloudTrail_ReadOnlyAccess      #Same but readonly, and only for CloudTrail PACTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TRAIL MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateTrail()                     #Req: TRAIL
                                  #  - no TrailARN, HomeRegion, HasCustomEventSelectors, HasInsightSelectors, SnsTopicARN
                                  #  - LogFileValidationEnabled -> EnableLogFileValidation
                                  #Res: TRAIL
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, TagsList
UpdateTrail()                     #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, SnsTopicARN, TagsList
                                  #  - LogFileValidationEnabled -> EnableLogFileValidation
                                  #Res: TRAIL
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, TagsList
GetTrail()                        #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: Trail TRAIL
                                  #  - no TagsList
ListTrails()                      #Req: empty
                                  #Res: Trails TRAIL_ARR
                                  #  - only TrailARN, Name, HomeRegion
DescribeTrails()                  #Req: TRAIL_REQ
                                  #Response: trailList TRAIL_ARR
                                  #  - no TagsList
DeleteTrail()                     #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: empty

TRAIL                             #Logs any AWS API calls to a S3 BUCKET
                                  #A few SERVICEs do not log all their ACTIONs, or sometimes none
                                  #From both user and SERVICE_DOMAINs
                                  #If not created explicitely, a TRAIL is implicitely used but:
                                  #  - with default settings
                                  #  - only accessible through the UI console, and only with LookupEvents()
                                  #Only for current REGION
                                  #Max 5 per REGION

TRAIL.TrailARN                    #TRAIL_ARN. arn:aws:cloudtrail:REGION:ACCOUNT_ID:trail/TRAIL
TRAIL.Name                        #'TRAIL'. Max 128 chars, [[:alnum:]._-]
TRAIL_REQ.trailNameList           #ARR of 'TRAIL'|TRAIL_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         TRAIL REGION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL.HomeRegion                  #'REGION' of TRAIL

TRAIL.IsMultiRegionTrail          #BOOL (def: false, recommended: true). Whether to log SERVICEs from other REGIONs.
DATASTORE.MultiRegionEnabled      #For TRAIL, it duplicates it across REGIONs ("shadow TRAIL").
CHANNEL_SOURCE.ApplyToAllRegions  #Shadow TRAILs can be used for CloudTrail ACTIONs but:
                                  #  - only readonly ones
                                  #  - only use current REGION
                                  #LOG_FILE|DIGEST_FILE:
                                  #  - processed in own REGION, by shadow TRAIL
                                  #     - including signing with PUBLIC_KEY, which is REGION-specific
                                  #     - including REGION shown in filename
                                  #  - but sent to a single LOG_BUCKET, in a single REGION
                                  #     - same for SNS notification
TRAIL_REQ.includeShadowTrails     #BOOL (def: true)

TRAIL.IncludeGlobalServiceEvents  #BOOL (def: true). Whether to log global SERVICEs (e.g. IAM, STS (if v1Token), CloudFront)
                                  #If using TRAILs:
                                  #  - in multiple REGIONs but with TRAIL.IsMultiRegionTrail false
                                  #  - then should set IncludeGlobalServiceEvents to false in all TRAILs but one, to avoid duplicated EVENTs
                                  #  - if TRAIL.IsMultiRegionTrail true though, no issue
                                  #Global SERVICEs are:
                                  #  - processed in TRAIL's HomeRegion
                                  #  - shown as REGION us-east-1 in LOG_FILE
                                  #  - shown as REGION where it occurred in EVENT.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ORG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RegisterOrganization              #Req: ORG_ADMIN
 DelegatedAdmin()                 #  - DelegatedAdminAccountId -> MemberAccountId
                                  #Res: empty
DeregisterOrganization            #Req: ORG_ADMIN
 DelegatedAdmin()                 #Res: empty

ORG_ADMIN.DelegatedAdminAccountId #ACCOUNT_ID. Give same permissions as ORG's management ACCOUNT, for CloudTrail only
                                  #Requires PACTIONs organizations:[De]registerDelegatedAdministrator|ListAWSServiceAccessForOrganization
                                  #Max 3 per ORG

TRAIL.IsOrganizationTrail         #BOOL (def: false). Log SERVICEs from all ACCOUNTs in ORG
DATASTORE.OrganizationEnabled     #Work similarly to TRAIL.IsMultiRegionTrail:
                                  #  - use shadow TRAILs, which are ACCOUNT-specific
                                  #  - LOG_FILE|DIGEST_FILE processed in own ACCOUNT, but sent to single LOG_BUCKET
                                  #Requires PACTION organizations:ListAWSServiceAccessForOrganization
TRAIL_PREFIX/AWSLogs/ORG
 /ACCOUNT_ID/...                  #Instead of TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/... if TRAIL.IsOrganizationTrail true

LOG_VALIDATION_REQ.AccountId      #ACCOUNT_ID. Noop unless TRAIL.IsOrganizationTrail true

AWSServiceRoleForCloudTrail       #SERVICE_LINKED_ROLE used by TRAIL.IsOrganizationTrail, DATASTORE.OrganizationEnabled and ORG_ADMIN.DelegatedAdminAccountId
                                  #Created automatically by ACTIONs setting those properties
                                  #  - providing has PACTIONs iam:CreateServiceLinkedRole|GetRole and organizations:EnableAWSServiceAccess
                                  #Can only be assumed by SERVICE_DOMAIN 'cloudtrail.amazonaws.com'
CloudTrailServiceRolePolicy       #POLICY used by AWSServiceRoleForCloudTrail, which allows PACTIONs:
                                  #  - cloudtrail:*
                                  #  - organizations:ListAWSServiceAccessForOrganization|ListAccounts|DescribeOrganization|DescribeAccount
                                  #  - organizations:ListDelegatedAdministrators, if PRINCIPAL 'cloudtrail.amazonaws.com'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         TRAIL STATUS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


StartLogging|StopLogging()        #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: empty
                                  #Sets TRAIL_STATUS.IsLogging
GetTrailStatus()                  #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: TRAIL_STATUS

TRAIL_STATUS.IsLogging            #BOOL (def: false). Whether TRAIL is enabled.
TRAIL_STATUS.StartLoggingTime     #Most recent DATE_NUM, if IsLogging true
TRAIL_STATUS.StopLoggingTime      #Most recent DATE_NUM, if IsLogging false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LOG FILE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL.S3BucketName                #S3 'LOG_BUCKET' to store LOG_FILE
                                  #Can be in a different REGION|ACCOUNT than TRAIL
                                  #Can use S3 to encrypt, archive|rotate, etc.
TRAIL.S3KeyPrefix                 #'TRAIL_PREFIX' (def: none). Max 200 chars

PERMISSIONS ==>                   #Must allow PACTIONs to Principal.Service 'cloudtrail.amazonaws.com':
                                  #  - s3:PutObject on arn:aws:s3:::LOG_BUCKET/TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/*
                                  #     - COND_KEY aws:SourceArn TRAIL_ARN
                                  #     - COND_KEY s3:x-amz-acl 'bucket-owner-full-control'
                                  #  - s3:GetBucketAcl on arn:aws:s3:::LOG_BUCKET
                                  #     - COND_KEY aws:SourceArn TRAIL_ARN

TRAIL|DATASTORE.KmsKeyId          #S3 KMS_KEY_MID|ARN x-amz-server-side-encryption-aws-kms-key-id [C|S]
                                  #Requires some kms:* PACTIONs (see S3 doc)

LOG DELIVERY ==>                  #LOG_FILE created every 5 mins
TRAIL_STATUS.LatestDeliveryTime   #DATE_NUM
TRAIL_STATUS.LatestDeliveryError  #Last log delivery 'ERROR', due to issue with LOG_BUCKET

TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail
 /REGION/YYYY/MM/DD/
 ACCOUNT_ID_CloudTrail_REGION_
 YYYYMMDDTHHMMZ_RANDOM.json.gz    #'LOG_FILE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          LOG FIELDS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOG_FILE                          #Some of the fields are optional (missing or null)
LOG_FILE.Records                  #LOG_EVENT_ARR

LOG_EVENT.eventVersion            #Current: '1.09'
LOG_EVENT.eventID                 #EVENT_MID
LOG_EVENT.eventTime               #'DATE'
LOG_EVENT.eventSource             #'SERVICE_DOMAIN'
LOG_EVENT.apiVersion              #SERVICE's version
LOG_EVENT.awsRegion               #'REGION'

LOG_EVENT.eventName               #'ACTION'
LOG_EVENT.eventType               #STR, among:
                                  #  - 'AwsApiCall': normal ACTION
                                  #  - 'AwsConsoleAction': ACTION from UI console
                                  #  - 'AwsConsoleSignIn': ACTION 'ConsoleLogin|CheckMfa'
                                  #  - 'AwsServiceEvent': service EVENT
                                  #  - 'AwsCloudTrailInsight': INSIGHT
                                  #  - 'ActivityLog': audit EVENT
LOG_EVENT.readOnly                #BOOL. Whether is readonly ACTION
LOG_EVENT.eventCategory           #STR among:
                                  #  - 'Data': data EVENT
                                  #  - 'Management': management EVENT
                                  #  - 'Insight': INSIGHT EVENT
                                  #  - 'ActivityAuditLog': audit EVENT
                                  #  - 'ConfigurationItem': AWS Config items
                                  #  - 'Evidence': Audit manager
LOG_EVENT.managementEvent         #BOOL. Whether is management EVENT

LOG_EVENT.recipientAccountId      #ACCOUNT_ID that received the EVENT
LOG_EVENT.sharedEventID           #MID that is shared by EVENTs created in each ACCOUNT of a cross-ACCOUNT call
LOG_EVENT.sourceIPAddress         #'IP'. If from a SERVICE, either 'SERVICE_DOMAIN' or 'AWS Internal/INTERNAL_ID'
LOG_EVENT.userAgent               #STR of User-Agent [C]. Can also be:
                                  #  - 'signin.amazonaws.com': UI console, as USER
                                  #  - 'console.amazonaws.com': UI console, as root
                                  #  - 'lambda.amazonaws.com': inside a Lambda FUNCTION
                                  #  - 'AWS Internal/INTERNAL_ID'
LOG_EVENT
 .sessionCredentialFromConsole    #'BOOL'. Whether done from UI console

LOG_EVENT.requestID               #REQ_ID
LOG_EVENT.requestParameters       #PARAMS_OBJ
                                  #Truncate over 100KB
LOG_EVENT.responseElements        #RESP_OBJ
                                  #Truncate over 100KB
LOG_EVENT.errorCode               #'CODE|ERROR'. Some SERVICEs show them in LOG_EVENT.responseElements instead
LOG_EVENT.errorMessage            #Truncate over 1KB
LOG_EVENT.additionalEventData     #OBJ. Used for some information not present in PARAMS|RESP.
                                  #Called CLOUDTRAIL_METADATA in my doc
                                  #Truncate over 28KB
LOG_EVENT.serviceEventDetails     #OBJ. Similar to LOG_EVENT.additionalEventData but when LOG_EVENT.eventType 'AwsServiceEvent'.
                                  #Called CLOUDTRAIL_SMETADATA in my doc
                                  #Truncate over 100KB

LOG_EVENT.resources               #LOG_RESOURCE_ARR. ARNs of resources impacted by EVENT
LOG_RESOURCE.ARN                  #ARN
LOG_RESOURCE.type                 #'RESTYPE'
LOG_RESOURCE.accountId            #ACCOUNT_ID

LOG_EVENT.userIdentity            #IDENTITY that created the EVENT
IDENTITY|ISSUER.type              #One of:
                                  #  - 'Root': ROOT
                                  #  - 'IAMUser': USER
                                  #  - 'Role': ROLE
                                  #  - 'AssumedRole': ASSUMED_ROLE
                                  #  - 'SAMLUser': SAML_ROLE
                                  #  - 'WebIdentityUser': WEB_ID_ROLE
                                  #  - 'FederatedUser': FEDERATED_USER
                                  #  - 'IdentityCenterUser': Identity center
                                  #  - 'AWSAccount': another ACCOUNT, i.e. cross-ACCOUNT call
                                  #  - 'AWSService': SERVICE_DOMAIN
                                  #  - 'Directory': AWS WorkDocs|QuickSight
                                  #  - 'Unknown'
IDENTITY|ISSUER.arn               #IDENTITY ARN, e.g. ROLE_ARN
IDENTITY|ISSUER.principalId       #IDENTITY ID, e.g. ROLE_MID
                                  #With:
                                  #  - 'SAMLUser': SAML_ROLE.NameQualifier + SAML_ROLE.Subject
                                  #  - 'WebIdentityUser': WEB_ID_ROLE.Provider + APP_ID + USER_ID
IDENTITY|ISSUER.userName          #'IDENTITY' name, among:
                                  #  - 'IAMUser': 'USER'
                                  #  - 'Role': 'ROLE'
                                  #  - 'SAMLUser': SAML_ROLE.Subject
                                  #  - 'WebIdentityUser': USER_ID
                                  #  - 'Root|Directory': 'ACCOUNT_ALIAS' (if defined)
IDENTITY|ISSUER.identityProvider  #Only with:
                                  #  - 'SAMLUser': SAML_ROLE.NameQualifier
                                  #  - 'WebIdentityUser': Web_ID_ROLE.Provider
IDENTITY|ISSUER.accountId         #ACCOUNT_ID
IDENTITY.accessKeyId              #ACCESS_KEY_ID. Sometimes empty
IDENTITY.invokedBy                #'SERVICE_DOMAIN', if LOG_EVENT.eventType 'AwsServiceEvent'

IDENTITY.sessionContext           #SESSION_CONTEXT. Only if type 'AssumedRole|SAMLUser|WebIdentityUser|FederatedUser'
SESSION_CONTEXT.sessionIssuer     #ISSUER who granted TEMP_CREDS:
                                  #  - ROLE if 'AssumedRole|SAMLUser|WebIdentityUser'
                                  #  - ROOT|USER if 'FederatedUser'
SESSION_CONTEXT.sourceIdentity    #STR. ASSUMED_ROLE_USER.SourceIdentity
SESSION_CONTEXT.attributes        #SESSION_ATTRS
SESSION_ATTRS.creationDate        #'DATE'
SESSION_ATTRS.mfaAuthenticated    #'BOOL'

IDENTITY.webIdFederationData      #FEDERATION_DATA. Only if type 'WebIdentityUser'
FEDERATION_DATA.federatedProvider #'DOMAIN'
FEDERATION_DATA.attributes        #'APP_ID:USER_ID'

LOG_EVENT.tlsDetails              #TLS_DETAILS
TLS_DETAILS.tlsVersion            #'TLSv1.X'
TLS_DETAILS.cipherSuite           #STR, e.g. 'ECDHE-RSA-AES128-GCM-SHA256'
TLS_DETAILS
 .clientProvidedHostHeader        #Host [C], e.g. 'SERVICE_DOMAIN'

LOG_EVENT.addendum                #LOG_ADDENDUM. Describes why EVENT was updated by AWS after creation, or is missing
LOG_ADDENDUM.reason               #STR among:
                                  #  - 'SERVICE_OUTAGE': missing EVENT due to outage of AWS SERVICE
                                  #  - 'DELIVERY_DELAY': delayed EVENT due to network speed|issue
                                  #  - 'UPDATED_DATA': missing|incorrect EVENT field was updated
LOG_ADDENDUM.updatedFields        #'PROP'_ARR, if reason 'UPDATED_DATA'
LOG_ADDENDUM.originalEventID      #Original's EVENT.eventID, if reason 'UPDATED_DATA'
LOG_ADDENDUM.originalRequestID    #Original's EVENT.requestID, if reason 'UPDATED_DATA'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENTS LOOKUP         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LookupEvents()                    #Req: EVENTS_REQ
                                  #Res: Events EVENT_ARR

EVENTS_REQ                        #List LOG_EVENTs
                                  #Only management|INSIGHT EVENTs
                                  #Max 2/s per REGION
EVENTS_REQ.StartTime|EndTime      #DATE_NUM. Filter by EVENT.EventTime
                                  #Def|min StartTime: 90 days ago
EVENTS_REQ.EventCategory          #Either default ('management') or 'insight'. Filter by LOG_EVENT.eventCategory.

EVENTS_REQ.LookupAttributes       #EVENT_ATTR_ARR
EVENT_ATTR.AttributeKey           #'PROP' to filter on, of EVENT[_RESOURCE] (except CloudTrailEvent|EventTime)
EVENT_ATTR.AttributeValue         #STR

EVENT.CloudTrailEvent             #'LOG_EVENT_JSON'
EVENT.EventTime
EVENT.EventId
EVENT.EventSource
EVENT.EventName
EVENT.ReadOnly                    #LOG_EVENT.*
EVENT.Username
EVENT.AccessKeyId                 #IDENTITY.*

EVENT.Resources                   #EVENT_RESOURCE_ARR
EVENT_RESOURCE.ResourceType       #LOG_RESOURCE.type, as 'RESOURCE' only, e.g. 'AWS::EC2::Instance' -> 'Instance'
EVENT_RESOURCE.ResourceName       #LOG_RESOURCE.arn, as 'NAME'|MID only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOG INTEGRITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL.LogFileValidationEnabled    #BOOL (def: false). Enables digest delivery

DIGEST DELIVERY ==>               #DIGEST_FILE created every 1h
TRAIL_STATUS
 .LatestDigestDeliveryTime        #DATE_NUM
TRAIL_STATUS
 .LatestDigestDeliveryError       #Last log delivery 'ERROR', due to issue with LOG_BUCKET

TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail-Digest
 /REGION/YYYY/MM/DD/ACCOUNT_ID_
 CloudTrail-Digest_REGION_TRAIL_  #'DIGEST_FILE'
 REGION_YYYYMMDDTHHMMSSZ.json.gz  #First 2 REGIONs are of the LOG_BUCKET, last is TRAIL's HomeRegion

DIGEST_FILE                       #List of LOG_FILEs for a given period
                                  #Meant to ensure their integrity
DIGEST_FILE.awsAccountId          #ACCOUNT_ID
DIGEST_FILE.digestStartTime       #'DATE'
DIGEST_FILE.digestEndTime         #'DATE' (1h later)
DIGEST_FILE.oldestEventTime       #'DATE' of first EVENT
                                  #Can be < digestStartTime if digest delivery was slow
                                  #null if DIGEST_FILE.logFiles empty
DIGEST_FILE.newestEventTime       #'DATE' of last EVENT
                                  #null if DIGEST_FILE.logFiles empty
DIGEST_FILE.digestS3Bucket
DIGEST_FILE.digestS3Object        #'BUCKET|OBJECT' where DIGEST_FILE is located

DIGEST_FILE.logFiles              #DIGEST_LOG_FILE_ARR. Can be empty.
DIGEST_LOG_FILE.s3Bucket
DIGEST_LOG_FILE.s3Object          #'BUCKET|OBJECT' where OBJECT_FILE is located
DIGEST_LOG_FILE.hashValue         #'SHA256_HEX' of uncompressed LOG_FILE
                                  #Goal: ensure LOG_FILE's integrity
DIGEST_LOG_FILE.hashAlgorithm     #Always 'SHA-256'
DIGEST_LOG_FILE.oldestEventTime   #'DATE' of first EVENT
DIGEST_LOG_FILE.newestEventTime   #'DATE' of last EVENT. Also LOG_FILE's timestamp


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DIGEST INTEGRITY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ListPublicKeys()                  #Req: PUBLIC_KEY
                                  #  - only ValidityStart|EndTime -> Start|EndTime (def: now)
                                  #Res: PublicKeyList PUBLIC_KEY_ARR

PUBLIC_KEY                        #Used to validate x-amz-meta-signature [S]
PUBLIC_KEY.Value                  #Public key as 'BASE64', DER-encoded PKCS#1
PUBLIC_KEY.Fingerprint            #'HEX' of fingerprint
PUBLIC_KEY.ValidityStart|EndTime  #DATE_NUM where public key might have been used

x-amz-meta-signature: STR [S]     #'HEX'. RSA signature of DIGEST_FILE, with AWS private key
                                  #When retrieving DIGEST_FILE on S3
                                  #Goal: ensure integrity of DIGEST_FILE itself
                                  #STR being signed is newline-concatenation of:
                                  #  - DIGEST_FILE.digestEndTime
                                  #  - BUCKET/OBJECT of DIGEST_FILE.digestS3Bucket|Object
                                  #  - 'SHA256_HEX' of uncompressed DIGEST_FILE
                                  #  - DIGEST_FILE.previousDigestHashValue
x-amz-meta-signature-algorithm:
 STR [S]
DIGEST_FILE
 .digestSignatureAlgorithm        #Always 'SHA256withRSA'
DIGEST_FILE
 .digestPublicKeyFingerprint      #PUBLIC_KEY.Fingerprint

DIGEST_FILE                       #DIGEST.digestS3Bucket|Object of last DIGEST_FILE
 .previousDigestS3Bucket|Object   #Goal: ensure the full list of DIGEST_FILEs is complete, with no missing DIGEST_FILE
                                  #When [re]setting TRAIL.LogFileValidationEnabled true, an initial DIGEST_FILE is created,
                                  #with DIGEST_FILE.previous* null
DIGEST_FILE
 .previousDigestHashValue         #'SHA256_HEX' of last uncompressed DIGEST_FILE
DIGEST_FILE
 .previousDigestHashAlgorithm     #Always 'SHA-256'
DIGEST_FILE
 .previousDigestSignature         #Like x-amz-meta-signature [S] but for previous DIGEST_FILE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INTEGRITY VALIDATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ValidateLogs()                    #Req: LOG_VALIDATION_REQ
                                  #Res: LOG_VALIDATION_RES

LOG_VALIDATION_REQ                #Validate LOG_FILEs|DIGEST_FILEs in a time period, using hashes and signatures
                                  #CLI-only
LOG_VALIDATION_REQ.TrailArn       #TRAIL_ARN
LOG_VALIDATION_REQ.StartTime      #'DATE'
LOG_VALIDATION_REQ.EndTime        #'DATE' (def: now)
LOG_VALIDATION_REQ
 .S3Bucket|S3Prefix               #'BUCKET|OBJECT' of DIGEST_FILE (def: last one)
LOG_VALIDATION_REQ.Verbose        #BOOL. Whether to print LOG_VALIDATION_RES_LINEs.
                                  #If false (def), only for main DIGEST_FILE.

LOG_VALIDATION_RES                #TSV output:
                                  #  - one LOG_VALIDATION_RES_LINE per DIGEST_FILE|LOG_FILE
                                  #  - DIGEST_FILE.oldest|newestEventTime
                                  #  - NUM of DIGEST_FILEs|LOG_FILEs [in]valid
LOG_VALIDATION_RES_LINE[0]        #'Digest file' or 'Log file'
LOG_VALIDATION_RES_LINE[1]        #'s3://LOG_BUCKET/OBJECT'
LOG_VALIDATION_RES_LINE[2]        #'valid' or 'INVALID: ...'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SNS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL.SnsTopicARN                 #SNS_TOPIC_ARN to send on log delivery, with SNS_PAYLOAD
                                  #Must allow PACTION SNS:Publish on the TOPIC
                                  #  - for Principal.Service 'cloudtrail.amazonaws.com'
                                  #  - should add COND_KEY aws:SourceArn TRAIL_ARN
                                  #  - also kms:GenerateDataKey*|Decrypt, if TOPIC uses KMS
TRAIL.SnsTopicName                #Same but as 'SNS_TOPIC'

SNS_PAYLOAD.s3Bucket              #'LOG_BUCKET'
SNS_PAYLOAD.s3ObjectKey           #'LOG_FILE'_ARR

TRAIL_STATUS
 .LatestNotificationError
TRAIL_STATUS
 .LatestNotificationTime          #Same as LatestDelivery* but for SNS notifications


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTORS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutEventSelectors()               #Req: SELECTORS
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: SELECTORS
                                  #  - no TrailName
GetEventSelectors()               #Req: SELECTORS
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: SELECTORS
                                  #  - no TrailName

SELECTORS                         #Filter which EVENTs are logged by a TRAIL
                                  #Def: one ADVANCED_SELECTOR, filtering for eventCategory 'Management' only
SELECTORS.TrailARN                #TRAIL_ARN
SELECTORS.TrailName               #'TRAIL'

SELECTORS.EventSelectors          #SELECTOR_ARR, or'd
                                  #Max 5
SELECTOR.ReadWriteType            #Whether to log ACTIONs that are:
                                  #  - 'ReadOnly': e.g. Get|List*()
                                  #  - 'WriteOnly': not read-only
                                  #  - 'All' (def)

SELECTOR.IncludeManagementEvents  #BOOL (def: true). Whether to log management EVENTs
                                  #Those are from MANAGEMENT_ACTIONs, i.e. ones triggered directly by AWS users, usually not called frequently
                                  #Those can also be "service EVENTs":
                                  #  - i.e. DEPENDENT_ACTION or SERVICE_ASYNC_ACTION
                                  #  - "non-API events": service EVENTs + IAM 'ConsoleLogin'
SELECTOR                          #'SERVICE_DOMAIN'_ARR (def: empty) to exclude.
 .ExcludeManagementEventSources   #Only for management EVENTs
                                  #Only for SERVICEs generating lots of EVENTs: 'kms|rdsdata.amazonaws.com'

SELECTOR.DataResources            #DATA_RESOURCE_ARR (def: empty). Which data EVENTs to include
                                  #Those are from DATA_ACTIONs, i.e. ones triggered indirectly by AWS users' users, usually called frequently
                                  #  - documented in each SERVICE's doc
                                  #When using SELECTOR (as opposed to ADVANCED_SELECTOR), can only log:
                                  #  - S3 OBJECTs
                                  #  - Lambda FUNCTIONs
                                  #  - DynamoDB TABLEs
                                  #Max 250 among all SELECTORS.EventSelectors
DATA_RESOURCE.Type                #'RESTYPE'
DATA_RESOURCE.Values              #ARN_ARR
                                  #If there is an ARN_PATH, can use it if trailing slash
                                  #  - e.g. arn:aws:s3:::BUCKET/[PREFIX/] to target multiple OBJECTs
                                  #Can also be arn:aws:SERVICE for all supported RESOURCEs of that SERVICE

SELECTORS|CHANNEL_SOURCE|DATASTORE#ADVANCED_SELECTOR_ARR, or'd
 .AdvancedEventSelectors          #Cannot use both SELECTORs and ADVANCED_SELECTORs
                                  #Max 2KB per STR in FIELD_SELECTOR.*
ADVANCED_SELECTOR.Name            #STR. Description. Max 1000 chars
ADVANCED_SELECTOR.FieldSelectors  #FIELD_SELECTOR_ARR
                                  #Max 500 among all SELECTORS.AdvancedEventSelectors
FIELD_SELECTOR.Field              #STR. Available name and their values:
                                  #  - eventName 'ACTION,...'
                                  #  - readOnly BOOL: true|false|def is like SELECTOR.ReadWriteType 'ReadOnly|WriteOnly|All'
                                  #  - eventCategory STR: LOG_EVENT.eventCategory
                                  #  - eventSource 'SERVICE_DOMAIN': like SELECTOR.ExcludeManagementEventSources
                                  #  - resources.type 'RESTYPE': like DATA_RESOURCE.Type
                                  #  - resources.ARN ARN: like DATA_RESOURCE.Values
FIELD_SELECTOR.Equals             #STR_ARR
                                  #Only possible one with FIELD_SELECTOR.Field 'readOnly|eventCategory|resources.type'
FIELD_SELECTOR.NotEquals          #STR_ARR
                                  #Only possible one with FIELD_SELECTOR.Field 'eventSource'
FIELD_SELECTOR
 .[Not]Starts|EndsWith            #STR_ARR

TRAIL.HasCustomEventSelectors     #BOOL. True if there are SELECTORS.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutInsightSelectors()             #Req: INSIGHT
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: INSIGHT
                                  #  - no TrailName
GetInsightSelectors()             #Req: INSIGHT
                                  #  - only TrailName + TrailARN -> TrailName
                                  #Res: INSIGHT
                                  #  - no TrailName

INSIGHT                           #Logs unusual ACTIONs to INSIGHT_FILE
                                  #Checks for big changes from the "baseline"
                                  #  - average/minute, in last 7d
                                  #  - on the first minute that deviates
                                  #  - but INSIGHT_FILE created every 30m
                                  #  - one EVENT for start, another for end
                                  #Per ACTION
                                  #Only for management EVENTs
                                  #Impacted by SELECTORS filtering
                                  #  - e.g. if InsightType 'ApiCallRateInsight', SELECTOR.ReadWriteType must not be 'WriteOnly'
INSIGHT.TrailARN                  #TRAIL_ARN
INSIGHT.TrailName                 #'TRAIL'

INSIGHT.InsightSelectors          #INSIGHT_SELECTOR_ARR
INSIGHT_SELECTOR.InsightType      #Counts only ACTIONs that:
                                  #  - 'ApiErrorRateInsight': failed
                                  #  - 'ApiCallRateInsight': are not readonly

TRAIL.HasInsightSelectors         #BOOL. Whether there are INSIGHT_SELECTORs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INSIGHT FILE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail-Insight
 /REGION/YYYY/MM/DD/ACCOUNT_ID_
 CloudTrail-Insight_REGION_
 YYYYMMDDTHHMMZ_RANDOM.json.gz    #'INSIGHT_FILE'

INSIGHT_FILE                      #
INSIGHT_FILE.eventVersion
INSIGHT_FILE.eventID
INSIGHT_FILE.eventTime
INSIGHT_FILE.eventType
INSIGHT_FILE.awsRegion
INSIGHT_FILE.recipientAccountId   #Like LOG_FILE.*
INSIGHT_FILE.sharedEventID        #MID shared by both 'Start' and 'End' EVENTs

INSIGHT_FILE.insightDetails       #INSIGHT_DETAILS
INSIGHT_DETAILS.eventSource
INSIGHT_DETAILS.eventName         #Like LOG_FILE.*
INSIGHT_DETAILS.state             #'Start|End'
INSIGHT_DETAILS.insightType       #INSIGHT_SELECTOR.InsightType
INSIGHT_DETAILS.insightContext    #INSIGHT_CONTEXT

INSIGHT_CONTEXT.statistics        #INSIGHT_STATS
INSIGHT_STATS.baseline.average    #NUM. Baseline average/minute
INSIGHT_STATS.baselineDuration    #NUM (in mins)
INSIGHT_STATS.insight.average     #Same but for current rate
INSIGHT_STATS.insightDuration     #For state 'Start', it is first minute only. For 'End', it is since 'Start'

INSIGHT_CONTEXT.attributions      #INSIGHT_ATTRS_ARR
                                  #Top value of some of EVENT's properties, for both baseline and current
INSIGHT_ATTRS.attribute           #STR among:
                                  #  - 'userIdentityArn': IDENTITY.arn
                                  #  - 'userAgent': LOG_EVENT.userAgent
                                  #  - 'errorCode': LOG_EVENT.errorCode
INSIGHT_ATTRS.baseline            #INSIGHT_ATTR_ARR of top values, for baseline
                                  #Max 5. Sorted.
INSIGHT_ATTRS.insight             #Same but for current
INSIGHT_ATTR.value                #STR. E.g. IDENTITY.arn for 'userIdentityArn'
INSIGHT_ATTR.average              #NUM. Average/minute


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DATA STORE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateEventDataStore()            #Req: DATASTORE
                                  #  - no EventDataStoreArn, CreatedTimestamp, UpdatedTimestamp, Status
                                  #  - Status 'STARTING_INGESTION' -> StartIngestion BOOL
                                  #Res: DATASTORE
UpdateEventDataStore()            #Req: DATASTORE
                                  #  - no CreatedTimestamp, UpdatedTimestamp, Status, TagsList
                                  #  - EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no TagsList
StartEventDataStoreIngestion()    #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
                                  #Sets DATASTORE.Status 'STARTING_INGESTION'
StopEventDataStoreIngestion()     #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
                                  #Sets DATASTORE.Status 'STOPPING_INGESTION'
GetEventDataStore()               #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no TagsList
ListEventDataStores()             #Req: empty
                                  #Res: EventDataStores DATASTORE_ARR
                                  #  - no TagsList
DeleteEventDataStore()            #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
RestoreEventDataStore()           #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no TagsList

DATASTORE                         #Like TRAIL but accessed through SQL QUERYs
                                  #Stores EVENTs in ORC format, i.e. no LOG_FILE
                                  #Can also add audit EVENTs (partner|custom data)
                                  #Features related to DATASTORE|CHANNEL|AUDIT_EVENTs are called "CloudTrail lake"
                                  #DATASTORE.AdvancedEventSelectors must allow only one LOG_EVENT.eventCategory
                                  #  - cannot be 'Insight'
                                  #  - if 'Management|Data': automatically filled
                                  #  - allows 'ActivityAuditLog': audit EVENTs
DATASTORE.EventDataStoreArn       #DATASTORE_ARN. 'arn:aws:cloudtrail:REGION:ACCOUNT_ID:eventdatastore/DATASTORE'
DATASTORE.Name                    #'DATASTORE'
DATASTORE.CreatedTimestamp        #DATE_NUM
DATASTORE.UpdatedTimestamp        #DATE_NUM

DATASTORE.Status                  #One of:
                                  #  - 'CREATED'
                                  #  - 'STARTING_INGESTION', then 'ENABLED'
                                  #  - 'STOPPING_INGESTING', then 'STOPPED_INGESTION'
                                  #  - 'PENDING_DELETION'

DATASTORE                         #BOOL (def: true). Do not allow deleting DATASTORE
 .TerminationProtectionEnabled    #If false, deleting DATATORE waits 7 days to complete,
                                  #during which deletion can be undone with RestoreEventDataStore()
DATASTORE.RetentionPeriod         #NUM. Delete audit EVENTs after NUM days.
                                  #Def: 90, min: 7 days, max: 7 years

AWS/CloudTrail/HourlyDataIngested #CloudWatch METRIC with bytes/hour processed by DATASTORE
AWS/CloudTrail/TotalDataRetained  #CloudWatch METRIC with total bytes, updated daily


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CHANNEL MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateChannel()                   #Req: CHANNEL
                                  #  - no Source, SourceConfig, IngestionStatus
                                  #Res: CHANNEL
                                  #  - no SourceConfig, IngestionStatus
UpdateChannel()                   #Req: CHANNEL
                                  #  - no Source, SourceConfig, IngestionStatus, Tags
                                  #Res: CHANNEL
                                  #  - no SourceConfig, IngestionStatus, Tags
GetChannel()                      #Req: CHANNEL
                                  #  - only ChannelArn -> Channel
                                  #Res: CHANNEL
                                  #  - no Tags
ListChannels()                    #Req: empty
                                  #Res: Channels CHANNEL_ARR
                                  #  - only ChannelArn, Name
DeleteChannel()                   #Req: CHANNEL
                                  #  - only ChannelArn -> Channel
                                  #Res: empty

CHANNEL                           #Target for PutAuditEvents() to add audit EVENTs
CHANNEL.ChannelArn                #CHANNEL_ARN. 'aws:aws:cloudtrail:REGION:ACCOUNT_ID:channel/CHANNEL'
CHANNEL.Name                      #'CHANNEL'

CHANNEL.Source                    #'CHANNEL_SOURCE', either:
                                  #  - name of a known partner
                                  #     - e.g. 'GitHub' (Audit log), 'Snyk', 'LaunchDarkly'
                                  #     - calls PutAuditEvents() either:
                                  #        - "direct integration": externally
                                  #        - "solution integration": from inside current ACCOUNT
                                  #  - 'Custom'
                                  #1 CHANNEL_SOURCE can only have 1 CHANNEL
CHANNEL.SourceConfig              #CHANNEL_SOURCE

CHANNEL.Destinations              #CHANNEL_DEST_ARR
                                  #Max 200
CHANNEL_DEST.Type|Location        #STR
CHANNEL_DEST.Type
 'EVENT_DATA_STORE'               #Redirects to CHANNEL_DEST.Location DATASTORE_ARN
CHANNEL_DEST.Type 'AWS_SERVICE'   #"Service-linked CHANNEL", for CHANNEL_REST.Location 'SERVICE'
                                  #PACTION *Channel -> *ServiceLinkedChannel

CHANNEL.IngestionStatus           #CHANNEL_STATUS
CHANNEL_STATUS
 .LatestIngestionAttemptEventID   #Last EVENT.eventID being processed
CHANNEL_STATUS
 .LatestIngestionAttemptTime      #DATE_NUM of last EVENT processing start
CHANNEL_STATUS
 .LatestIngestionSuccessEventID
CHANNEL_STATUS
 .LatestIngestionSuccessTime      #Same for successful processing
CHANNEL_STATUS
 .LatestIngestionErrorCode        #'CODE'. Same for failed processing

https://docs.aws.amazon.com/awscloudtrail/latest/userguide/viewing-service-linked-channels.html???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUDIT EVENT PUT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /PutAuditEvents              #Req: AUDIT_EVENTS_REQ
PutAuditEvents()                  #  - query parameters: channelArn, externalId
                                  #Res: AUDIT_EVENTS_RES

AUDIT_EVENTS_REQ                  #Add audit EVENTs to a DATASTORE through a CHANNEL
                                  #"Audit EVENTs" are custom LOG_EVENTs
                                  #PutAuditEvents() is a DATA_ACTION
AUDIT_EVENTS_REQ.channelArn       #CHANNEL_ARN

AUDIT_EVENTS_REQ.auditEvents      #AUDIT_EVENT_ARR
                                  #Max 100. Max 1MB.
AUDIT_EVENT.id                    #'AUDIT_EVENT'
AUDIT_EVENT.eventData             #'AUDIT_EVENT_DATA_JSON'
                                  #Max 256KB
AUDIT_EVENT.eventDataChecksum     #'SHA256_BASE64' of AUDIT_EVENT.eventData

AUDIT_EVENTS_RES.successful       #SUCCESS_AUDIT_EVENT_ARR
SUCCESS_AUDIT_EVENT.id            #'AUDIT_EVENT'
SUCCESS_AUDIT_EVENT.eventID       #EVENT.EventId

AUDIT_EVENTS_RES.failed           #FAILED_AUDIT_EVENT_ARR
FAILED_AUDIT_EVENT.id             #'AUDIT_EVENT'
FAILED_AUDIT_EVENT.errorCode      #'CODE'
FAILED_AUDIT_EVENT.errorMessage   #'ERROR'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       AUDIT EVENT DATA        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOG_INFO.*                        #Different shape for audit EVENT, described here
LOG_INFO.auditData                #AUDIT_EVENT_DATA

LOG_EVENT.metadata                #LOG_CHANNEL. Automatically generated, with information about CHANNEL used
LOG_CHANNEL.channelARN            #CHANNEL_ARN
LOG_CHANNEL.ingestionTime         #'DATE' when processed by CHANNEL

LOG_INFO.eventVersion|eventID
 |eventTime|awsRegion|eventType
 |eventCategory|recipientAccountId
 |addendum|metadata               #Automatically generated
LOG_INFO.apiVersion|readOnly
 |managementEvent|sharedEventID
 |sessionCredentialFromConsole
 |serviceEventDetails|resources
 |tlsDetails                      #Missing

AUDIT_EVENT_DATA.version          #Required. Like LOG_EVENT.eventVersion, but CHANNEL-specific
AUDIT_EVENT_DATA.UID              #Required. Like LOG_EVENT.requestID, but CHANNEL-specific
AUDIT_EVENT_DATA
 .eventTime|eventSource|eventName #Required
AUDIT_EVENT_DATA.userIdentity     #Required, but only has type|principalId
                                  #Also has details OBJ: CHANNEL-specific auth info
AUDIT_EVENT_DATA
 .recipientAccountId              #Must be CHANNEL's ACCOUNT_ID
AUDIT_EVENT_DATA.sourceIPAddress
 |userAgent|requestParameters
 |responseElements|errorCode
 |errorMessage|additionalEventData#Optional


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CHANNEL POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutResourcePolicy()               #Req: RESOURCE_POLICY
                                  #Res: RESOURCE_POLICY
GetResourcePolicy()               #Req: RESOURCE_POLICY
                                  #  - only ResourceArn
                                  #Res: RESOURCE_POLICY
DeleteResourcePolicy()            #Req: RESOURCE_POLICY
                                  #  - only ResourceArn
                                  #Res: empty

RESOURCE_POLICY.ResourceArn       #CHANNEL_ARN
RESOURCE_POLICY.ResourcePolicy    #IAM 'POLICY'
                                  #Resource-based POLICY on CHANNEL, with resource-level permissions
                                  #Only for PACTION PutAuditEvents
                                  #With partner CHANNEL_SOURCEs, should check Service.Principal ACCOUNT_ID
                                  #Min 1 PRINCIPAL. Max 8KB, 20 STATEMENTs, 50 PRINCIPALs

AUDIT_EVENTS_REQ.externalId       #STR, used like COND_KEY sts:ExternalId
CONF_KEY cloudtrail:ExternalId    #Should be used with partner CHANNEL_SOURCEs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


StartImport()                     #Req: IMPORT
                                  #  - no CreatedTimestamp, UpdatedTimestamp, ImportStatus, ImportStatistics
                                  #Res: IMPORT
                                  #  - no ImportStatistics
GetImport()                       #Req: IMPORT
                                  #  - only ImportId
                                  #Res: IMPORT
ListImports()                     #Req: IMPORT
                                  #  - only Destination STR, ImportStatus
                                  #Res: Imports IMPORT_ARR
                                  #  - no StartEventTime, EndEventTime, ImportSource, ImportStatistics
ListImportFailures()              #Req: IMPORT
                                  #  - only ImportId
                                  #Res: Failures IMPORT_FAILURE_ARR
StopImport()                      #Req: IMPORT
                                  #  - only ImportId
                                  #Res: IMPORT

IMPORT.ImportId                   #'IMPORT'
IMPORT.CreatedTimestamp           #DATE_NUM
IMPORT.UpdatedTimestamp           #DATE_NUM
IMPORT.StartEventTime             #DATE_NUM
IMPORT.EndEventTime               #DATE_NUM

IMPORT.ImportSource.S3            #IMPORT_S3
IMPORT_S3.S3BucketRegion          #'REGION'
IMPORT_S3.S3LocationUri           #STR
IMPORT_S3.S3BucketAccessRoleArn   #ROLE_ARN

IMPORT.Destinations               #STR_ARR

IMPORT.ImportStatus               #STR
IMPORT.ImportStatistics           #IMPORT_STATS
IMPORT_STATS.EventsCompleted      #NUM
IMPORT_STATS.PrefixesCompleted    #NUM
IMPORT_STATS.PrefixesFound        #NUM
IMPORT_STATS.FilesCompleted       #NUM
IMPORT_STATS.FailedEntries        #NUM

IMPORT_FAILURE.ErrorMessage       #STR
IMPORT_FAILURE.ErrorType          #STR
IMPORT_FAILURE.LastUpdatedTime    #DATE_NUM
IMPORT_FAILURE.Location           #STR
IMPORT_FAILURE.Status             #STR

https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-copy-trail-to-lake-eds.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             QUERY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


StartQuery()                      #Req: QUERY
                                  #  - no QueryId, EventDataStore, QueryResultRows, DeliveryStatus, QueryStatus, ErrorMessage, QueryStatistics
                                  #  - QueryString -> QueryStatement
                                  #Res: QUERY
                                  #  - only QueryId
DescribeQuery()                   #Req: QUERY
                                  #  - only QueryId, QueryAlias
                                  #Res: QUERY
                                  #  - no QueryAlias, EventDataStore, QueryParameters, QueryResultRows
ListQueries()                     #Req: QUERY
                                  #  - only QueryId, QueryStatus, EventDataStore
                                  #  - CreationTime -> StartTime + Endtime DATE_NUM
                                  #Res: Queries QUERY_ARR
                                  #  - only QueryId, CreationTime, QueryStatus
CancelQuery()                     #Req: QUERY
                                  #  - only QueryId
                                  #Res: QUERY
                                  #  - only QueryId, QueryStatus
                                  #Set QUERY.QueryStatus 'CANCELLED'
GetQueryResults()                 #Req: QUERY
                                  #  - only QueryId
                                  #  - MaxResults -> MaxQueryResults
                                  #Res: QUERY
                                  #  - no QueryId, QueryAlias, EventDataStore, QueryString, QueryParameters, DeliveryS3Uri, DeliveryStatus

QUERY                             #Can be across multiple REGIONs|ACCOUNTs
QUERY.QueryId                     #QUERY_MID
QUERY.QueryAlias                  #STR
QUERY.EventDataStore              #DATASTORE_ARN
QUERY_STATS.CreationTime          #DATE_NUM

QUERY.QueryString                 #STR
QUERY.QueryParameters             #STR_ARR
QUERY.QueryResultRows             #OBJ_ARR_ARR
                                  #Deleted 7 days after creation

QUERY.DeliveryS3Uri               #STR
QUERY.DeliveryStatus              #STR

QUERY.QueryStatus                 #STR
QUERY.ErrorMessage                #STR

QUERY.QueryStatistics             #QUERY_STATS
QUERY_STATS.EventsMatched         #NUM
QUERY_STATS.EventsScanned         #NUM
QUERY_STATS.BytesScanned          #NUM
QUERY_STATS.ExecutionTimeInMillis #NUM (in ms)

DASHBOARD ==>                     #UI console includes dashboards with pre-saved common QUERYs:
                                  #  - "Overview":
                                  #     - USER|REGION|SERVICEs with most EVENTs
                                  #     - most throttled|errored ACTIONs
                                  #     - only management EVENTs
                                  #  - "Management events": ACTION ConsoleLogin, IAM errors, delete ACTIONs, top errors per USER
                                  #  - "S3 data events": top OBJECT|USER|ACTIONs

StartQuery|GetQueryResults() sometimes require PACTIONs kms:Decrypt|GenerateDataKey?

https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-create-edit-query.html
https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-limitations.html
https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-lake-cli.html#lake-cli-start-query (and next chapters)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    QUERY RESULTS VALIDATE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudtrail/verify-query-results.html

VerifyQueryResults()              #Req: QUERY_VERIFY_REQ
                                  #Res: QUERY_VERIFY_RES

QUERY_VERIFY_REQ                  #CLI-only
QUERY_VERIFY_REQ.LocalExportPath  #Local '/PATH'
QUERY_VERIFY_REQ
 .S3Bucket|S3Prefix               #Same but as 'BUCKET|OBJECT'

QUERY_VERIFY_RES                  #???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AddTags()                         #Req: RESOURCE_TAGS
                                  #Res: empty
ListTags()                        #Req: RESOURCE_TAGS
                                  #  - only ResourceId -> ResourceIdList ARN_ARR
                                  #Res: ResourceTagList RESOURCE_TAGS_ARR
RemoveTags()                      #Req: RESOURCE_TAGS
                                  #Res: empty

RESOURCE_TAGS.ResourceId          #TRAIL_ARN|CHANNEL_ARN|DATASTORE_ARN
                                  #CHANNEL|DATASTORE can use ABAC, but not TRAIL
RESOURCE_TAGS.TagsList            #TAG_PAIRS

TRAIL.TagsList
CHANNEL.Tags
DATASTORE.TagsList                #TAG_PAIRS. Requires PACTION AddTags


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLOUDWATCH           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAIL.CloudWatchLogsLogGroupArn   #STR
TRAIL.CloudWatchLogsRoleArn       #STR

TRAIL_STATUS.LatestCloudWatchLogs
 DeliveryError                    #'ERROR'
TRAIL_STATUS.LatestCloudWatchLogs
 DeliveryTime                     #DATE_NUM

https://docs.aws.amazon.com/awscloudtrail/latest/userguide/monitor-cloudtrail-log-files-with-cloudwatch-logs.html
