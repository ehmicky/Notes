
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   CLOUDTRAIL   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2024-11-22

SUMMARY ==>                       #Trail: free default, multi-region, org-wide, global SERVICEs
                                  #Log file: S3, delivery, SNS, integrity, lookup, CloudWatch Logs
                                  #Event fields: metadata, request|response, service-specific, resources, auth
                                  #Selectors: readonly vs write, management vs data, ACTION
                                  #Insight: baseline change, selectors, failed vs write, top attributions
                                  #CloudTrail Lake: data store, retention period, billing mode, channel, custom, service-linked channel, partner, policy, import
                                  #Query: SQL, dashboard, saved, S3 delivery, results integrity, AI

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE_DOMAIN                    #'cloudtrail'
                                  #Except for PutAuditEvents(): 'cloudtrail-data'
                                  #  - including in PACTION and SDK|CLI

FORMAT ==>                        #JSON
                                  #Request: ?Action and ?Version
                                  #  - except PutAuditEvents(): REST

PAGINATION ==>                    #REQ|RES.NextToken STR
                                  #REQ.MaxResults NUM (def|max: 1e3, 2e4 with ListInsightsMetricData, 50 with LookupEvents(), none with TRAIL)
                                  #No pagination with RESOURCE_TAGS|PUBLIC_KEY

THROTTLING ==>                    #Max 10 requests per second, except:
                                  #  - PutAuditEvents(): 100 requests per second
                                  #  - StartQuery|CancelQuery(): 3 requests per second
                                  #  - LookupEvents(): 2 requests per second
                                  #  - write ACTIONs: 1 request per second

PRICING ==>                       #TRAIL:
                                  #  - 1$/5e4 management EVENTs
                                  #     - free: first copy of each management EVENT (with a given EVENT_MID)
                                  #     - INSIGHT: 17% more expensive (not part of free tier)
                                  #  - 1$/1e6 data|network EVENTs
                                  #  - also, S3 costs
                                  #Shadow TRAILs: charged too
                                  #DATASTORE:
                                  #  - EXTENDABLE_RETENTION_PRICING:
                                  #     - 1$/1.3GB input (new EVENTs)
                                  #     - 33% cheaper if eventCategory 'Insight|ActivityAuditLog|ConfigurationItem|Evidence'
                                  #     - also, S3 costs: 1$/43GB (all EVENTs)
                                  #        - free: first year for each EVENT
                                  #           - i.e. completely free if RetentionPeriod 1 year (default)
                                  #        - see TotalPaidStorageBytes
                                  #  - FIXED_RETENTION_PRICING:
                                  #     - 1$/400MB input
                                  #     - after 5TB: 2.5x cheaper, 25TB: 5x cheaper
                                  #     - no S3 costs
                                  #     - i.e. better if >25TB/month and|or RetentionPeriod > 1 year
                                  #  - free for 30 days: up to 5GB (not for S3 costs)
                                  #QUERY: 1$/200GB scanned (QUERY_STATS.BytesScanned)
                                  #  - free for 30 days: up to 5GB

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AWSCloudTrail_FullAccess          #AWS managed POLICY, granting:
                                  #  - cloudtrail:* on anything
                                  #  - iam:ListRoles|GetRolePolicy|GetUser: on any ROLE|USER
                                  #  - iam:PassRole: on any ROLE, if SERVICE_DOMAIN 'cloudtrail.amazonaws.com'
                                  #  - s3:ListAllMyBuckets|GetBucketLocation|GetBucketPolicy: on any BUCKET
                                  #  - s3:CreateBucket|PutBucketPolicy|PutBucketPublicAccessBlock: on BUCKET 'aws-cloudtrail-logs*'
                                  #  - sns:ListTopics: on any TOPIC
                                  #  - sns:CreateTopic|*TopicAttributes|AddPermission: on TOPIC 'aws-cloudtrail-logs*'
                                  #  - logs:CreateLogGroup: on LOG_GROUP 'aws-cloudtrail-logs*'
                                  #  - kms:CreateKey|ListKeys|CreateAlias|ListAliases: on any KMS_KEY|ALIAS
                                  #  - lambda:ListFunctions: on any FUNCTION
                                  #  - dynamodb:List[Global]Tables: on any TABLE
AWSCloudTrail_ReadOnlyAccess      #Same but readonly, and only for CloudTrail PACTIONs

                                  ┌────────────────┐
                                  │   TRAIL MAIN   │
                                  └────────────────┘

TRAIL                             #Logs any AWS API calls to a S3 BUCKET
                                  #Some SERVICEs do not log all their ACTIONs, or sometimes none
                                  #From both user and SERVICE_ACTIONs
                                  #If not created explicitly, a TRAIL is implicitely used but:
                                  #  - default settings
                                  #  - can only LookupEvents()
                                  #Only for current REGION
                                  #Max 5 per REGION

TRAIL.TrailARN                    #TRAIL_ARN. arn:aws:cloudtrail:REGION:ACCOUNT_ID:trail/TRAIL
TRAIL.Name                        #'TRAIL'. Max 128 chars, [[:alnum:]._-]
TRAIL_REQ.trailNameList           #ARR of 'TRAIL'|TRAIL_ARN

                                  ┌────────────────────┐
                                  │   TRAIL MAIN API   │
                                  └────────────────────┘

CreateTrail()                     #Req: TRAIL
                                  #  - no TrailARN, HomeRegion, HasCustomEventSelectors, HasInsightSelectors, SnsTopicARN
                                  #  - LogFileValidationEnabled -> EnableLogFileValidation
                                  #Res: TRAIL
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, TagsList
UpdateTrail()                     #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, SnsTopicARN, TagsList
                                  #  - LogFileValidationEnabled -> EnableLogFileValidation
                                  #Res: TRAIL
                                  #  - no HomeRegion, HasCustomEventSelectors, HasInsightSelectors, TagsList
GetTrail()                        #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: Trail TRAIL
                                  #  - no TagsList
ListTrails()                      #Req: empty
                                  #Res: Trails TRAIL_ARR
                                  #  - only TrailARN, Name, HomeRegion
DescribeTrails()                  #Req: TRAIL_REQ
                                  #Response: trailList TRAIL_ARR
                                  #  - no TagsList
DeleteTrail()                     #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: empty

                                  ┌────────────────────┐
                                  │   TRAIL MAIN IAC   │
                                  └────────────────────┘

AWS::CloudTrail::Trail            #RESPROPs: TrailName
                                  #RESATTRs: Arn

new Trail(...ARGS[, OPTS])        #CTRAIL. CKRESOURCE wrapping TRAIL
CTRAIL.trailArn
OPTS.trailName                    #TRAIL.*

                                  ┌──────────────────┐
                                  │   TRAIL REGION   │
                                  └──────────────────┘

TRAIL.HomeRegion                  #'REGION' of TRAIL

TRAIL.IsMultiRegionTrail          #BOOL (def: false, recommended: true). Whether to log SERVICEs from other REGIONs.
DATASTORE.MultiRegionEnabled      #For TRAIL, it duplicates it across REGIONs ("shadow TRAIL").
CHANNEL_SOURCE.ApplyToAllRegions  #Shadow TRAILs can be used for CloudTrail ACTIONs but:
                                  #  - only readonly ones
                                  #  - only for its own REGION
                                  #LOG_FILE|DIGEST_FILE:
                                  #  - processed in own REGION, by shadow TRAIL
                                  #     - including signing with PUBLIC_KEY, which is REGION-specific
                                  #     - including REGION shown in filename
                                  #  - but sent to a single LOG_BUCKET, in a single REGION
                                  #     - same for SNS notification
TRAIL_REQ.includeShadowTrails     #BOOL (def: true)

TRAIL.IncludeGlobalServiceEvents  #BOOL (def: true). Whether to log global SERVICEs (e.g. IAM, STS (if v1Token), CloudFront)
                                  #If using TRAILs:
                                  #  - in multiple REGIONs but with TRAIL.IsMultiRegionTrail false
                                  #  - then should set IncludeGlobalServiceEvents to false in all TRAILs but one, to avoid duplicated EVENTs
                                  #  - if TRAIL.IsMultiRegionTrail true though, no issue
                                  #Global SERVICEs are:
                                  #  - processed in TRAIL's HomeRegion
                                  #  - shown as REGION us-east-1 in LOG_FILE
                                  #  - shown as REGION where it occurred in EVENT.*

                                  ┌──────────────────────┐
                                  │   TRAIL REGION IAC   │
                                  └──────────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: IsMultiRegionTrail, IncludeGlobalServiceEvents
AWS::CloudTrail::EventDataStore   #Includes RESPROPs: MultiRegionEnabled

CTRAIL_OPTS.isMultiRegionTrail    #BOOL (def: true). TRAIL.IsMultiRegionTrail
CTRAIL_OPTS
 .includeGlobalServiceEvents      #BOOL (def: true). TRAIL.IncludeGlobalServiceEvents

                                  ┌─────────┐
                                  │   ORG   │
                                  └─────────┘

ORG_ADMIN.DelegatedAdminAccountId #ACCOUNT_ID. Give same permissions as ORG's management ACCOUNT, for CloudTrail only
                                  #Max 3 per ORG

TRAIL.IsOrganizationTrail         #BOOL (def: false). Log SERVICEs from all ACCOUNTs in ORG
DATASTORE.OrganizationEnabled     #Work similarly to TRAIL.IsMultiRegionTrail:
                                  #  - use shadow TRAILs, which are ACCOUNT-specific
                                  #  - LOG_FILE|DIGEST_FILE processed in own ACCOUNT, but sent to single LOG_BUCKET
TRAIL_PREFIX/AWSLogs/ORG
 /ACCOUNT_ID/...                  #Instead of TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/... if TRAIL.IsOrganizationTrail true

                                  ┌──────────────┐
                                  │   ORG AUTH   │
                                  └──────────────┘

PACTION organizations:
[De]registerDelegatedAdministrator#Required for ORG_ADMIN.DelegatedAdminAccountId
PACTION organizations:
ListAWSServiceAccess
 ForOrganization                  #Required for ORG_ADMIN.DelegatedAdminAccountId, TRAIL.IsOrganizationTrail or DATASTORE.OrganizationEnabled

AWSServiceRoleForCloudTrail       #SERVICE_LINKED_ROLE used by TRAIL.IsOrganizationTrail, DATASTORE.OrganizationEnabled and ORG_ADMIN.DelegatedAdminAccountId
                                  #Created automatically by ACTIONs setting those properties
                                  #  - providing has PACTIONs iam:CreateServiceLinkedRole|GetRole and organizations:EnableAWSServiceAccess
                                  #Can only be assumed by SERVICE_DOMAIN 'cloudtrail.amazonaws.com'
CloudTrailServiceRolePolicy       #POLICY used by AWSServiceRoleForCloudTrail, which allows PACTIONs:
                                  #  - cloudtrail:*
                                  #  - organizations:ListAWSServiceAccessForOrganization|ListAccounts|DescribeOrganization|DescribeAccount
                                  #  - organizations:ListDelegatedAdministrators, if PRINCIPAL 'cloudtrail.amazonaws.com'

                                  ┌─────────────┐
                                  │   ORG API   │
                                  └─────────────┘

RegisterOrganization              #Req: ORG_ADMIN
 DelegatedAdmin()                 #  - DelegatedAdminAccountId -> MemberAccountId
                                  #Res: empty
DeregisterOrganization            #Req: ORG_ADMIN
 DelegatedAdmin()                 #Res: empty

                                  ┌─────────────┐
                                  │   ORG CLI   │
                                  └─────────────┘

aws validate-logs --account-id    #ACCOUNT_ID. Noop unless TRAIL.IsOrganizationTrail true

                                  ┌─────────────┐
                                  │   ORG IAC   │
                                  └─────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: IsOrganizationTrail
AWS::CloudTrail::EventDataStore   #Includes RESPROPs: OrganizationEnabled

CTRAIL_OPTS.isOrganizationTrail   #TRAIL.*
CTRAIL_OPTS.orgId                 #'ORG_ID'

                                  ┌──────────────────┐
                                  │   TRAIL STATUS   │
                                  └──────────────────┘

TRAIL_STATUS.IsLogging            #BOOL (def: false). Whether TRAIL is enabled.
TRAIL_STATUS.StartLoggingTime     #Most recent DATE_NUM, if IsLogging true
TRAIL_STATUS.StopLoggingTime      #Most recent DATE_NUM, if IsLogging false

                                  ┌──────────────────────┐
                                  │   TRAIL STATUS API   │
                                  └──────────────────────┘

StartLogging|StopLogging()        #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: empty
                                  #Sets TRAIL_STATUS.IsLogging
GetTrailStatus()                  #Req: TRAIL
                                  #  - Name + TrailARN -> Name
                                  #Res: TRAIL_STATUS

                                  ┌──────────────────────┐
                                  │   TRAIL STATUS IAC   │
                                  └──────────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: IsLogging

TRAIL_STATUS.isLogging            #Def true with CTRAIL

                                  ┌──────────────┐
                                  │   LOG FILE   │
                                  └──────────────┘

TRAIL.S3BucketName                #S3 'LOG_BUCKET' to store LOG_FILE
                                  #Can be in a different REGION|ACCOUNT than TRAIL
                                  #Can use S3 to encrypt, archive|rotate, etc.
TRAIL.S3KeyPrefix                 #'TRAIL_PREFIX' (def: none). Max 200 chars

TRAIL|DATASTORE.KmsKeyId          #S3 KMS_KEY_MID|ARN x-amz-server-side-encryption-aws-kms-key-id [C|S]

LOG DELIVERY ==>                  #LOG_FILE created every 5 mins
                                  #Sometimes delivers same LOG_EVENT twice
TRAIL_STATUS.LatestDeliveryTime   #DATE_NUM
TRAIL_STATUS.LatestDeliveryError  #Last log delivery 'ERROR', due to issue with LOG_BUCKET

TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail
 /REGION/YYYY/MM/DD/
 ACCOUNT_ID_CloudTrail_REGION_
 YYYYMMDDTHHMMZ_RANDOM.json.gz    #'LOG_FILE'

                                  ┌───────────────────┐
                                  │   LOG FILE AUTH   │
                                  └───────────────────┘

PERMISSIONS ==>                   #Must allow PACTIONs to Principal.Service 'cloudtrail.amazonaws.com':
                                  #  - s3:PutObject on arn:aws:s3:::LOG_BUCKET/TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/*
                                  #     - COND_KEY aws:SourceArn TRAIL_ARN
                                  #     - COND_KEY s3:x-amz-acl 'bucket-owner-full-control'
                                  #  - s3:GetBucketAcl on arn:aws:s3:::LOG_BUCKET
                                  #     - COND_KEY aws:SourceArn TRAIL_ARN
                                  #If using KMS, requires some kms:* PACTIONs too (see S3 doc)

                                  ┌──────────────────┐
                                  │   LOG FILE CLI   │
                                  └──────────────────┘

trailscraper                      #Version 0.8.1
--verbose                         #

trailscraper download             #Download LOG_FILE
                                  #Requires PACTIONs s3::ListBucket
--org-id                          #ORG_ID
                                  #Can be specified multiple times
--account-id                      #ACCOUNT_ID
                                  #Can be specified multiple times
--region                          #'REGION'
--bucket                          #S3 'BUCKET'
--prefix                          #S3 'PREFIX' (including trailing slash)
--log-dir                         #Output 'DIR' (def: '~/.trailscraper/logs')
                                  #Filename is same as LOG_FILE's
--from                            #'DATE' or 'DURATION' (def: '-1days')
                                  #Year|month|day, not hour|minute|seconds
                                  #Format: see `dateparser` Python package
--to                              #'DATE', 'DURATION' or 'now' (def)
--wait                            #BOOL (def: false). Wait until LOG_EVENTs after --to are found
--parallelism                     #NUM (def 10) of files to download in parallel

                                  ┌──────────────────┐
                                  │   LOG FILE IAC   │
                                  └──────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: S3BucketName, S3KeyPrefix
AWS::CloudTrail::
 Trail|EventDataStore             #Includes RESPROPs: KMSKeyId

CTRAIL_OPTS.bucket                #ICBUCKET. TRAIL.S3BucketName
                                  #Def: new one
                                  #  - CBUCKET_OPTS.enforceSSL true
                                  #  - allows PACTIONs to cloudtrail.amazonaws.com:
                                  #     - s3:PutObject, with COND_KEY s3:x-amz-acl 'bucket-owner-full-control'
                                  #     - s3:GetBucketAcl
                                  #  - no COND_KEY aws:SourceArn
CTRAIL_OPTS.s3KeyPrefix           #TRAIL.*
CTRAIL_OPTS.encryptionKey         #KMS ICKEY. TRAIL.KmsKeyId

CLOUDTRAIL PROCESSING LIBRARY ==> #Java library that allows running code on each new LOG_EVENT
                                  #Uses a SQS QUEUE
                                  #Could also achieve this using S3 Object Lambda, S3 Batch, or S3 NOTIFICATIONS_LAMBDA
                                  #Not documented yet

                                  ┌─────────────────────┐
                                  │   LOG FILE PULUMI   │
                                  └─────────────────────┘

AUTOMATIC BUCKET POLICY           #With AWSX, TRAIL automatically creates a BUCKET POLICY

                                  ┌───────────────────┐
                                  │   LOG FILE LINT   │
                                  └───────────────────┘

cdk-nag
 CloudTrailEncryptionEnabled      #Validate TRAIL.KmsKeyId is set

                                  ┌────────────────┐
                                  │   LOG FIELDS   │
                                  └────────────────┘

LOG_FILE                          #Some of the fields are optional
                                  #Max 50MB
LOG_FILE.Records                  #LOG_EVENT_ARR

LOG_EVENT                         #Max 256KB
LOG_EVENT.eventVersion            #Current: '1.11'
LOG_EVENT.eventID                 #EVENT_MID
LOG_EVENT.eventTime               #'DATE'
LOG_EVENT.eventSource             #'SERVICE_DOMAIN'
LOG_EVENT.apiVersion              #SERVICE's version
LOG_EVENT.awsRegion               #'REGION'

LOG_EVENT.eventName               #'ACTION'
LOG_EVENT.eventType               #STR, among:
                                  #  - 'AwsApiCall': normal ACTION
                                  #  - 'AwsConsoleAction': ACTION from UI console
                                  #  - 'AwsConsoleSignIn': ACTION 'ConsoleLogin|CheckMfa'
                                  #  - 'AwsServiceEvent': service EVENT
                                  #  - 'AwsVpceEvents': network EVENT
                                  #  - 'AwsCloudTrailInsight': INSIGHT
                                  #  - 'ActivityLog': audit EVENT
LOG_EVENT.readOnly                #BOOL. Whether is readonly ACTION
LOG_EVENT.eventCategory           #STR among:
                                  #  - 'Data': data EVENT
                                  #  - 'Management': management EVENT
                                  #  - 'NetworkActivity': network EVENT
                                  #  (TRAIL-only)
                                  #  - 'Insight': INSIGHT EVENT
                                  #  (DATASTORE-only)
                                  #  - 'ActivityAuditLog': audit EVENT
                                  #  - 'ConfigurationItem': AWS Config items
                                  #  - 'Evidence': Audit manager
LOG_EVENT.managementEvent         #BOOL. Whether is management EVENT

LOG_EVENT.recipientAccountId      #ACCOUNT_ID that received the EVENT
LOG_EVENT.sharedEventId           #MID that is shared by EVENTs created in each ACCOUNT of a cross-ACCOUNT call
LOG_EVENT.sourceIPAddress         #'IP'. If from a SERVICE, either 'SERVICE_DOMAIN' or 'AWS Internal/INTERNAL_ID'
LOG_EVENT.userAgent               #STR of User-Agent [C]. Can also be:
                                  #  - 'signin.amazonaws.com': UI console, as USER
                                  #  - 'console.amazonaws.com': UI console, as root
                                  #  - 'lambda.amazonaws.com': inside a Lambda FUNCTION
                                  #  - 'AWS Internal/INTERNAL_ID'
LOG_EVENT
 .sessionCredentialFromConsole    #'BOOL'. Whether done from UI console

LOG_EVENT.requestID               #REQ_ID
LOG_EVENT.requestParameters       #PARAMS_OBJ
                                  #Truncate over 100KB
LOG_EVENT.responseElements        #RESP_OBJ|null
                                  #Truncate over 100KB
                                  #Some SERVICEs do not send it
LOG_EVENT.errorCode               #'CODE'. Some SERVICEs show it in LOG_EVENT.responseElements instead
LOG_EVENT.errorMessage            #Same with 'ERROR'
                                  #Truncate over 1KB
LOG_EVENT.additionalEventData     #OBJ. Used for some information not present in PARAMS|RESP.
                                  #Called CLOUDTRAIL_METADATA in my doc
                                  #Truncate over 28KB
LOG_EVENT.serviceEventDetails     #OBJ. Similar to LOG_EVENT.additionalEventData but when LOG_EVENT.eventType 'AwsServiceEvent'.
                                  #Called CLOUDTRAIL_SMETADATA in my doc
                                  #Truncate over 100KB

LOG_EVENT.vpcEndpointId           #VPC_MID
LOG_EVENT.vpcEndpointAccountId    #ACCOUNT_ID

LOG_EVENT.resources               #LOG_RESOURCE_ARR. ARNs of resources impacted by EVENT
                                  #Only with data EVENTs
LOG_RESOURCE.ARN                  #ARN
LOG_RESOURCE.ARNPrefix            #ARN start, for some data EVENTs
LOG_RESOURCE.type                 #'RESTYPE'
LOG_RESOURCE.accountId            #ACCOUNT_ID

LOG_EVENT.userIdentity            #IDENTITY that created the EVENT
IDENTITY|ISSUER.type              #One of:
                                  #  - 'Root': ROOT
                                  #  - 'IAMUser': USER
                                  #  - 'Role': ROLE
                                  #  - 'AssumedRole': ASSUMED_ROLE
                                  #  - 'SAMLUser': SAML_ROLE
                                  #  - 'WebIdentityUser': WEB_ID_ROLE
                                  #  - 'FederatedUser': FEDERATED_USER
                                  #  - 'IdentityCenterUser': Identity center
                                  #  - 'AWSAccount': another ACCOUNT, i.e. cross-ACCOUNT call
                                  #  - 'AWSService': SERVICE_DOMAIN
                                  #  - 'Directory': AWS WorkDocs|QuickSight
                                  #  - 'Unknown'
IDENTITY|ISSUER.arn               #IDENTITY ARN, e.g. ROLE_ARN
IDENTITY|ISSUER.principalId       #IDENTITY ID, e.g. ROLE_MID
                                  #With:
                                  #  - 'SAMLUser': SAML_ROLE.NameQualifier + SAML_ROLE.Subject
                                  #  - 'WebIdentityUser': WEB_ID_ROLE.Provider + APP_ID + USER_ID
IDENTITY|ISSUER.userName          #'IDENTITY' name, among:
                                  #  - 'IAMUser': 'USER'
                                  #  - 'Role': 'ROLE'
                                  #  - 'SAMLUser': SAML_ROLE.Subject
                                  #  - 'WebIdentityUser': USER_ID
                                  #  - 'Root|Directory': 'ACCOUNT_ALIAS' (if defined)
IDENTITY|ISSUER.identityProvider  #Only with:
                                  #  - 'SAMLUser': SAML_ROLE.NameQualifier
                                  #  - 'WebIdentityUser': Web_ID_ROLE.Provider
IDENTITY|ISSUER.accountId         #ACCOUNT_ID
IDENTITY.accessKeyId              #ACCESS_KEY_ID. Sometimes empty

IDENTITY.invokedBy                #'SERVICE_DOMAIN'
                                  #Only if LOG_EVENT.eventType 'AwsServiceEvent'
IDENTITY.inScopeOf                #SERVICE_CREDS_INFO about the SERVICE making the request
                                  #Only if LOG_EVENT.eventType 'AwsServiceEvent'
SERVICE_CREDS_INFO.sourceArn      #RESOURCE_ARN making the request
SERVICE_CREDS_INFO.issuerType     #'RESTYPE' of sourceArn
SERVICE_CREDS_INFO.sourceAccount  #ACCOUNT_ID owning sourceArn
SERVICE_CREDS_INFO
 .credentialsIssuedTo             #RESOURCE_ARN receiving the CREDS

IDENTITY.sessionContext           #SESSION_CONTEXT. Only if type 'AssumedRole|SAMLUser|WebIdentityUser|FederatedUser'
SESSION_CONTEXT.sessionIssuer     #ISSUER who granted CREDS:
                                  #  - ROLE if 'AssumedRole|SAMLUser|WebIdentityUser'
                                  #  - ROOT|USER if 'FederatedUser'
SESSION_CONTEXT.sourceIdentity    #STR. ASSUMED_ROLE_USER.SourceIdentity
SESSION_CONTEXT.attributes        #SESSION_ATTRS
SESSION_CONTEXT.assumedRoot       #BOOL. Whether used ASSUME_ROOT_REQ. Only with ACTION AssumeRoot()
SESSION_ATTRS.creationDate        #'DATE'
SESSION_ATTRS.mfaAuthenticated    #'BOOL'

IDENTITY.webIdFederationData      #FEDERATION_DATA. Only if type 'WebIdentityUser'
FEDERATION_DATA.federatedProvider #'DOMAIN'
FEDERATION_DATA.attributes        #'APP_ID:USER_ID'

LOG_EVENT.tlsDetails              #See aws_network doc

LOG_EVENT.addendum                #LOG_ADDENDUM. Describes why EVENT was updated by AWS after creation, or is missing
LOG_ADDENDUM.reason               #STR among:
                                  #  - 'SERVICE_OUTAGE': missing EVENT due to outage of AWS SERVICE
                                  #  - 'DELIVERY_DELAY': delayed EVENT due to network speed|issue
                                  #  - 'UPDATED_DATA': missing|incorrect EVENT field was updated
LOG_ADDENDUM.updatedFields        #'PROP'_ARR, if reason 'UPDATED_DATA'
LOG_ADDENDUM.originalEventID      #Original's EVENT.eventID, if reason 'UPDATED_DATA'
LOG_ADDENDUM.originalRequestID    #Original's EVENT.requestID, if reason 'UPDATED_DATA'

                                  ┌───────────────────┐
                                  │   EVENTS LOOKUP   │
                                  └───────────────────┘

EVENTS_REQ                        #List LOG_EVENTs
                                  #Only management|INSIGHT EVENTs
                                  #Max 2/s per REGION
EVENTS_REQ.StartTime|EndTime      #DATE_NUM. Filter by EVENT.EventTime
                                  #Def|min StartTime: 90 days ago
EVENTS_REQ.EventCategory          #Either default ('management') or 'insight'. Filter by LOG_EVENT.eventCategory.

EVENTS_REQ.LookupAttributes       #EVENT_ATTR_ARR
EVENT_ATTR.AttributeKey           #'PROP' to filter on, of EVENT[_RESOURCE] (except CloudTrailEvent|EventTime)
EVENT_ATTR.AttributeValue         #STR

EVENT.CloudTrailEvent             #'LOG_EVENT_JSON'
EVENT.EventTime
EVENT.EventId
EVENT.EventSource
EVENT.EventName
EVENT.ReadOnly                    #LOG_EVENT.*
EVENT.Username
EVENT.AccessKeyId                 #IDENTITY.*

EVENT.Resources                   #EVENT_RESOURCE_ARR
EVENT_RESOURCE.ResourceType       #LOG_RESOURCE.type, as 'RESOURCE' only, e.g. 'AWS::EC2::Instance' -> 'Instance'
EVENT_RESOURCE.ResourceName       #LOG_RESOURCE.arn, as 'NAME'|MID only

                                  ┌───────────────────────┐
                                  │   EVENTS LOOKUP API   │
                                  └───────────────────────┘

LookupEvents()                    #Req: EVENTS_REQ
                                  #Res: Events EVENT_ARR

                                  ┌───────────────────────┐
                                  │   EVENTS LOOKUP CLI   │
                                  └───────────────────────┘

trailscraper select               #List LOG_EVENTs, printed as ALL_LOG_EVENTS
                                  #Compared to LookupEvents():
                                  #  - pro: can use offline download of LOG_FILEs
                                  #  - con: much fewer filtering options
--log-dir
--from
--to                              #Like `trailscraper download`
--use-cloudtrail-api              #Call LookupEvents()
                                  #Def: use --log-dir instead, after `trailscraper download`
--filter-assumed-role-arn         #ROLE_ARN that performed LOG_EVENT
                                  #I.e. Filter by LOG_EVENT.userIdentity.sessionContext.sessionIssuer.arn,
                                  #with LOG_EVENT.userIdentity.type 'AssumedRole'
                                  #Can be specified multiple times

ALL_LOG_EVENTS                    #JSON_OBJ: Records LOG_EVENT_ARR

trailscraper last-event-timestamp #Print most recent LOG_EVENT.eventTime
--log-dir                         #Like `trailscraper download`

                                  ┌───────────────────────────┐
                                  │   POLICY GENERATION CLI   │
                                  └───────────────────────────┘

trailscraper generate             #Print IAM POLICY_DOC allowing all actions from a list of LOG_EVENTs
                                  #Must pass ALL_LOG_EVENTS as stdin
                                  #STATEMENT:
                                  #  - Action: LOG_EVENT.eventSource|eventName
                                  #     - maps some often-used PACTIONs that do not match same name,
                                  #       e.g. 's3:CreateMultipartUpload' -> 's3:PutObject', or ApiGateway
                                  #  - Resource: LOG_EVENT.Resources[*].ARN

trailscraper guess                #Transform IAM POLICY_DOC to add all ACTIONs on same SERVICE + resource
                                  #E.g. s3:PutObject -> s3:PutObject|GetObject|ListObjects|...
                                  #Must pass POLICY DOC as stdin
--only                            #STR. Only ACTIONs starting with STR
                                  #Among: 'Create', 'Put', 'Update', 'List', 'Describe', 'Get', 'Delete', 'Attach', 'Detach'
                                  #Can be specified multiple times

                                  ┌───────────────────┐
                                  │   LOG INTEGRITY   │
                                  └───────────────────┘

TRAIL.LogFileValidationEnabled    #BOOL (def: false). Enables digest delivery

DIGEST DELIVERY ==>               #DIGEST_FILE created every 1h
TRAIL_STATUS
 .LatestDigestDeliveryTime        #DATE_NUM
TRAIL_STATUS
 .LatestDigestDeliveryError       #Last log delivery 'ERROR', due to issue with LOG_BUCKET

TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail-Digest
 /REGION/YYYY/MM/DD/ACCOUNT_ID_
 CloudTrail-Digest_REGION_TRAIL_  #'DIGEST_FILE'
 REGION_YYYYMMDDTHHMMSSZ.json.gz  #First 2 REGIONs are of the LOG_BUCKET, last is TRAIL's HomeRegion

DIGEST_FILE                       #List of LOG_FILEs for a given period
                                  #Meant to ensure their integrity
DIGEST_FILE.awsAccountId          #ACCOUNT_ID
DIGEST_FILE.digestStartTime       #'DATE'
DIGEST_FILE.digestEndTime         #'DATE' (1h later)
DIGEST_FILE.oldestEventTime       #'DATE' of first EVENT
                                  #Can be < digestStartTime if digest delivery was slow
                                  #null if DIGEST_FILE.logFiles empty
DIGEST_FILE.newestEventTime       #'DATE' of last EVENT
                                  #null if DIGEST_FILE.logFiles empty
DIGEST_FILE.digestS3Bucket
DIGEST_FILE.digestS3Object        #'BUCKET|OBJECT' where DIGEST_FILE is located

DIGEST_FILE.logFiles              #DIGEST_LOG_FILE_ARR. Can be empty.
DIGEST_LOG_FILE.s3Bucket
DIGEST_LOG_FILE.s3Object          #'BUCKET|OBJECT' where OBJECT_FILE is located
DIGEST_LOG_FILE.hashValue         #'SHA256_HEX' of uncompressed LOG_FILE
                                  #Goal: ensure LOG_FILE's integrity
DIGEST_LOG_FILE.hashAlgorithm     #Always 'SHA-256'
DIGEST_LOG_FILE.oldestEventTime   #'DATE' of first EVENT
DIGEST_LOG_FILE.newestEventTime   #'DATE' of last EVENT. Also LOG_FILE's timestamp

                                  ┌───────────────────────┐
                                  │   LOG INTEGRITY IAC   │
                                  └───────────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: EnableLogFileValidation BOOL

CTRAIL_OPTS.enableFileValidation  #BOOL (def: true). TRAIL.LogFileValidationEnabled

                                  ┌────────────────────────┐
                                  │   LOG INTEGRITY LINT   │
                                  └────────────────────────┘

cdk-nag
CloudTrailLogFileValidationEnabled#Validate TRAIL.LogFileValidationEnabled is true

AwsCommunity::CloudTrail::
 LogValidationEnabled             #HOOK. Validate TRAIL.LogFileValidationEnabled is true

                                  ┌──────────────────────┐
                                  │   DIGEST INTEGRITY   │
                                  └──────────────────────┘

PUBLIC_KEY                        #Used to validate x-amz-meta-signature [S] and QUERY_RESULTS_SIGN
PUBLIC_KEY.Value                  #Public key as 'BASE64', DER-encoded PKCS#1
PUBLIC_KEY.Fingerprint            #'HEX' of fingerprint
PUBLIC_KEY.ValidityStart|EndTime  #DATE_NUM where public key might have been used

x-amz-meta-signature: STR [S]     #'HEX'. RSA signature of DIGEST_FILE, with AWS private key
                                  #When retrieving DIGEST_FILE on S3
                                  #Goal: ensure integrity of DIGEST_FILE itself
                                  #STR being signed is newline-concatenation of:
                                  #  - DIGEST_FILE.digestEndTime
                                  #  - BUCKET/OBJECT of DIGEST_FILE.digestS3Bucket|Object
                                  #  - 'SHA256_HEX' of uncompressed DIGEST_FILE
                                  #  - DIGEST_FILE.previousDigestHashValue
x-amz-meta-signature-algorithm:
 STR [S]
DIGEST_FILE
 .digestSignatureAlgorithm        #Always 'SHA256withRSA'
DIGEST_FILE
 .digestPublicKeyFingerprint      #PUBLIC_KEY.Fingerprint

DIGEST_FILE                       #DIGEST.digestS3Bucket|Object of last DIGEST_FILE
 .previousDigestS3Bucket|Object   #Goal: ensure the full list of DIGEST_FILEs is complete, with no missing DIGEST_FILE
                                  #When [re]setting TRAIL.LogFileValidationEnabled true, an initial DIGEST_FILE is created,
                                  #with DIGEST_FILE.previous* null
DIGEST_FILE
 .previousDigestHashValue         #'SHA256_HEX' of last uncompressed DIGEST_FILE
DIGEST_FILE
 .previousDigestHashAlgorithm     #Always 'SHA-256'
DIGEST_FILE
 .previousDigestSignature         #Like x-amz-meta-signature [S] but for previous DIGEST_FILE

                                  ┌──────────────────────────┐
                                  │   DIGEST INTEGRITY API   │
                                  └──────────────────────────┘

ListPublicKeys()                  #Req: PUBLIC_KEY
                                  #  - only ValidityStart|EndTime -> Start|EndTime (def: now)
                                  #Res: PublicKeyList PUBLIC_KEY_ARR

                                  ┌────────────────────────┐
                                  │   INTEGRITY VALIDATE   │
                                  └────────────────────────┘

OUTPUT ==>                        #One LOG_VALIDATION_RES_LINE per DIGEST_FILE|LOG_FILE, as TSV
                                  #Then:
                                  #  - DIGEST_FILE.oldest|newestEventTime
                                  #  - NUM of DIGEST_FILEs|LOG_FILEs [in]valid
LOG_VALIDATION_RES_LINE[0]        #'Digest file' or 'Log file'
LOG_VALIDATION_RES_LINE[1]        #'s3://LOG_BUCKET/OBJECT'
LOG_VALIDATION_RES_LINE[2]        #'valid' or 'INVALID: ...'

                                  ┌────────────────────────────┐
                                  │   INTEGRITY VALIDATE CLI   │
                                  └────────────────────────────┘

aws cloudtrail validate-logs      #Validate LOG_FILEs|DIGEST_FILEs in a time period, using hashes and signatures
                                  #CLI-only

--trail-arn                       #TRAIL_ARN
--start-time                      #'DATE'
--end-time                        #'DATE' (def: now)
--s3-bucket
--s3-prefix                       #'BUCKET|OBJECT' of DIGEST_FILE (def: last one)
--verbose                         #BOOL. Whether to print LOG_VALIDATION_RES_LINEs.
                                  #If false (def), only for main DIGEST_FILE.

                                  ┌─────────┐
                                  │   SNS   │
                                  └─────────┘

TRAIL.SnsTopicARN                 #SNS_TOPIC_ARN to send on log delivery, with SNS_PAYLOAD
TRAIL.SnsTopicName                #Same but as 'SNS_TOPIC'

SNS_PAYLOAD.s3Bucket              #'LOG_BUCKET'
SNS_PAYLOAD.s3ObjectKey           #'LOG_FILE'_ARR

TRAIL_STATUS
 .LatestNotificationError
TRAIL_STATUS
 .LatestNotificationTime          #Same as LatestDelivery* but for SNS notifications

                                  ┌──────────────┐
                                  │   SNS AUTH   │
                                  └──────────────┘

PERMISSIONS ==>                   #Must allow:
                                  #  - Principal.Service 'cloudtrail.amazonaws.com'
                                  #  - PACTION sns:Publish on the TOPIC
                                  #  - COND_KEY aws:SourceArn TRAIL_ARN
                                  #  - also PACTION kms:GenerateDataKey*|Decrypt, if TOPIC uses KMS

                                  ┌─────────────┐
                                  │   SNS IAC   │
                                  └─────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: SnsTopicName
                                  #Includes RESATTRs: SnsTopicArn

CTRAIL_OPTS.snsTopic              #CTOPIC. TRAIL.SnsTopicName
                                  #Automatically allows sns:Publish to cloudtrail.amazonaws.com
CTRAIL.trailSnsTopicArn           #'TOPIC_ARN'_CSATTR. TRAIL.SnsTopicARN

                                  ┌─────────────────────┐
                                  │   CLOUDWATCH LOGS   │
                                  └─────────────────────┘

TRAIL.CloudWatchLogsLogGroupArn   #LOG_GROUP_ARN. Send LOG_EVENTs to CloudWatch Logs
                                  #Must be same ACCOUNT
                                  #LOG_EVENTs >256KB silently ignored
                                  #TRAIL is sent as a logging TELEMETRY_ENTITY

TRAIL_STATUS.LatestCloudWatchLogs
 DeliveryTime                     #DATE_NUM
TRAIL_STATUS.LatestCloudWatchLogs
 DeliveryError                    #'ERROR'

                                  ┌──────────────────────────┐
                                  │   CLOUDWATCH LOGS AUTH   │
                                  └──────────────────────────┘

TRAIL.CloudWatchLogsRoleArn       #ROLE_ARN used to send to CloudWatch Logs
                                  #Used instead of CloudWatch Logs RESOURCE_POLICY.policyDocument
                                  #Trust policy must use Principal.Service 'cloudtrail.amazonaws.com'
                                  #Must allow:
                                  #  - PACTION logs:PutLogEvents|CreateLogStream
                                  #  - on LOG_STREAMs:
                                  #     - 'ACCOUNT_ID_CloudTrail_REGION*'
                                  #     - 'ORG_*', if TRAIL.IsOrganizationTrail true

                                  ┌─────────────────────────┐
                                  │   CLOUDWATCH LOGS IAC   │
                                  └─────────────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: CloudWatchLogsLogGroupArn, CloudWatchLogsRoleArn

CTRAIL_OPTS.sendToCloudWatchLogs  #BOOL. If false (def), ignore CTRAIL_OPTS.cloudWatchLogGroup
CTRAIL.logGroup                   #ICLOG_GROUP (def: new one). TRAIL.CloudWatchLogsLogGroupArn
CTRAIL_OPTS.cloudWatchLogGroup    #Automatically creates TRAIL.CloudWatchLogsRoleArn
CTRAIL_OPTS
 .cloudWatchLogsRetention         #CLOG_GROUP_OPTS.retention (def: 1y), when using default CTRAIL_OPTS.cloudWatchLogGroup

                                  ┌────────────────────────────┐
                                  │   CLOUDWATCH LOGS PULUMI   │
                                  └────────────────────────────┘

TRAIL.CloudWatchLogsLogGroupArn   #With Pulumi AWSX, specifying this automatically creates LOG_GROUP
                                  #Can use skipDestroy

                                  ┌──────────────────────────┐
                                  │   CLOUDWATCH LOGS LINT   │
                                  └──────────────────────────┘

cdk-nag
 CloudTrailCloudWatchLogsEnabled  #Validate TRAIL.CloudWatchLogsLogGroupArn is set

                                  ┌───────────────┐
                                  │   SELECTORS   │
                                  └───────────────┘

SELECTORS                         #Filter which EVENTs are logged by a TRAIL
                                  #Def: one ADVANCED_SELECTOR, filtering for eventCategory 'Management' only
SELECTORS.TrailARN                #TRAIL_ARN
SELECTORS.TrailName               #'TRAIL'

SELECTORS.EventSelectors          #SELECTOR_ARR, or'd
                                  #Max 5
SELECTOR.ReadWriteType            #Whether to log ACTIONs that are:
                                  #  - 'ReadOnly': e.g. Get|List*()
                                  #  - 'WriteOnly': not read-only
                                  #  - 'All' (def)

SELECTOR.IncludeManagementEvents  #BOOL (def: true). Whether to log management EVENTs
                                  #Those are from MANAGEMENT_ACTIONs, i.e. ones triggered directly by AWS users, usually not called frequently
                                  #Those can also be "service EVENTs":
                                  #  - i.e. DEPENDENT_ACTION or SERVICE_ASYNC_ACTION
                                  #  - "non-API events": service EVENTs + IAM 'ConsoleLogin'
SELECTOR                          #'SERVICE_DOMAIN'_ARR (def: empty) to exclude
 .ExcludeManagementEventSources   #Only for management EVENTs
                                  #Only for SERVICEs generating lots of EVENTs: 'kms|rdsdata.amazonaws.com'

SELECTOR.DataResources            #DATA_RESOURCE_ARR (def: empty). Which data EVENTs to include
                                  #Those are from DATA_ACTIONs, i.e. ones triggered indirectly by AWS users' users, usually called frequently
                                  #  - documented in each SERVICE's doc
                                  #When using SELECTOR (as opposed to ADVANCED_SELECTOR), can only log:
                                  #  - S3 OBJECTs
                                  #  - Lambda FUNCTIONs
                                  #  - DynamoDB TABLEs
                                  #Max 250 among all SELECTORS.EventSelectors
DATA_RESOURCE.Type                #'RESTYPE'
DATA_RESOURCE.Values              #ARN_ARR
                                  #If there is a NAMEPATH, can use it if trailing slash
                                  #  - e.g. arn:aws:s3:::BUCKET/[NAMEPATH/] to target multiple OBJECTs
                                  #Can also be arn:aws:SERVICE for all supported RESOURCEs of that SERVICE
                                  #  - for S3: 'arn:aws:s3:::'

NETWORK EVENTS ==>                #API calls made from a VPC
                                  #Requires using ADVANCED_SELECTOR with FIELD_SELECTOR {Field: 'eventCategory', Equals ['NetworkActivity']}
                                  #Only for: cloudtrail, EC2, KMS, secrets manager

SELECTORS|CHANNEL_SOURCE|DATASTORE#ADVANCED_SELECTOR_ARR, or'd
 .AdvancedEventSelectors          #Cannot use both SELECTORs and ADVANCED_SELECTORs
                                  #Max 2KB per STR in FIELD_SELECTOR.*
ADVANCED_SELECTOR.Name            #STR. Description. Max 1000 chars
ADVANCED_SELECTOR.FieldSelectors  #FIELD_SELECTOR_ARR
                                  #Max 500 among all SELECTORS.AdvancedEventSelectors
FIELD_SELECTOR.Field              #STR. Available name and their values:
                                  #  - eventCategory STR: LOG_EVENT.eventCategory
                                  #  - eventName 'ACTION,...'
                                  #     - only with data|management|network EVENTs
                                  #  - eventType STR: LOG_EVENT.eventType
                                  #     - only with data|management EVENTs
                                  #  - readOnly BOOL: true|false|def is like SELECTOR.ReadWriteType 'ReadOnly|WriteOnly|All'
                                  #     - only with data|management EVENTs
                                  #  - eventSource 'SERVICE_DOMAIN': like SELECTOR.ExcludeManagementEventSources
                                  #     - only with data|management|network EVENTs
                                  #  - sessionCredentialFromConsole: like LOG_EVENT.sessionCredentialFromConsole
                                  #     - only with data|management EVENTs
                                  #  - userIdentity.arn: like IDENTITY.arn
                                  #     - only with data|management EVENTs
                                  #  - resources.type 'RESTYPE': like DATA_RESOURCE.Type
                                  #     - only with data EVENTs
                                  #  - resources.ARN ARN: like DATA_RESOURCE.Values
                                  #     - only with data EVENTs
                                  #  - errorCode 'CODE': LOG_EVENT.errorCode
                                  #     - only with network EVENTs
                                  #  - vpcEndpointId STR: LOG_EVENT.vpcEndpointId
                                  #     - only with network EVENTs
FIELD_SELECTOR.Equals             #STR_ARR
                                  #Only possible one with FIELD_SELECTOR.Field 'readOnly|eventCategory|resources.type'
FIELD_SELECTOR.NotEquals          #STR_ARR
                                  #Only possible one with FIELD_SELECTOR.Field 'eventSource'
FIELD_SELECTOR
 .[Not]Starts|EndsWith            #STR_ARR

TRAIL.HasCustomEventSelectors     #BOOL. True if there are SELECTORS.

                                  ┌───────────────────┐
                                  │   SELECTORS API   │
                                  └───────────────────┘

PutEventSelectors()               #Req: SELECTORS
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: SELECTORS
                                  #  - no TrailName
GetEventSelectors()               #Req: SELECTORS
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: SELECTORS
                                  #  - no TrailName

                                  ┌───────────────────┐
                                  │   SELECTORS IAC   │
                                  └───────────────────┘

AWS::CloudTrail::Trail            #Includes RESPROPs: EventSelectors
AWS::CloudTrail::
 Trail|EventDataStore             #Includes RESPROPs: AdvancedEventSelectors

CTRAIL_OPTS.managementEvents      #SELECTOR.ReadWriteType. SELECTOR with IncludeManagementEvents true and no DATA_RESOURCE
                                  #Can be NONE, i.e. no SELECTOR

CTRAIL.addEventSelector
 ('RESTYPE', 'ARN'_ARR[, OPTS])   #SELECTOR with a single DATA_RESOURCE
OPTS.readWriteType
 |excludeManagementEventSources   #SELECTOR.*
OPTS.includeManagementEvents      #SELECTOR.*
                                  #Def: false if CTRAIL_OPTS.managementEvents NONE, true otherwise
CTRAIL
 .logAllS3DataEvents([OPTS])      #Same but with RESTYPE 'AWS::S3::Object' and 'arn:aws:s3:::' ARN (i.e. any OBJECT)
CTRAIL.addS3EventSelector         #Same but with RESTYPE 'AWS::S3::Object' and OBJECT_ARN
 (OBJ_ARR[, OPTS])                #OBJ_ARR:
                                  #  - bucket ICBUCKET
                                  #  - objectPrefix 'PREFIX' (def: any)
CTRAIL
 .logAllLambdaDataEvents([OPTS])  #Same but with RESTYPE 'AWS::Lambda::Function' and 'arn:aws:lambda' ARN (i.e. any FUNCTION)
CTRAIL.addLambdaEventSelector
 (ICANYFUNC_ARR[, OPTS])          #Same but with RESTYPE 'AWS::Lambda::Function' and FUNCTION_ARN

                                  ┌──────────────────┐
                                  │   INSIGHT MAIN   │
                                  └──────────────────┘

INSIGHT                           #Logs unusual ACTIONs to INSIGHT_FILE
                                  #Checks for big changes from the "baseline"
                                  #  - average/minute, in last 7d
                                  #  - on the first minute that deviates
                                  #  - but INSIGHT_FILE created every 30m
                                  #  - one EVENT for start, another for end
                                  #Per ACTION
                                  #Use either:
                                  #  - 1 source TRAIL, output to S3
                                  #  - 1 source DATASTORE, output to another DATASTORE2
                                  #Only for management EVENTs
                                  #Impacted by SELECTORS filtering
                                  #  - e.g. if InsightType 'ApiCallRateInsight', SELECTOR.ReadWriteType must not be 'WriteOnly'

INSIGHT.TrailARN                  #TRAIL_ARN
INSIGHT.TrailName                 #'TRAIL'

INSIGHT.EventDataStoreArn         #Source DATASTORE_ARN
INSIGHT.EventDataStore            #Source DATASTORE_MID
INSIGHT.InsightsDestination       #Destination DATASTORE_ARN

INSIGHT.InsightSelectors          #INSIGHT_SELECTOR_ARR
INSIGHT_SELECTOR.InsightType      #Counts only ACTIONs that:
                                  #  - 'ApiErrorRateInsight': failed
                                  #  - 'ApiCallRateInsight': are not readonly

TRAIL.HasInsightSelectors         #BOOL. Whether there are INSIGHT_SELECTORs

                                  ┌──────────────────────┐
                                  │   INSIGHT MAIN API   │
                                  └──────────────────────┘

PutInsightSelectors()             #Req: INSIGHT
                                  #  - TrailName + TrailARN -> TrailName
                                  #Res: INSIGHT
                                  #  - no TrailName
GetInsightSelectors()             #Req: INSIGHT
                                  #  - only TrailName + TrailARN -> TrailName
                                  #  - only EventDataStore + EventDataStoreArn -> EventDataStore
                                  #Res: INSIGHT
                                  #  - no TrailName

                                  ┌──────────────────────┐
                                  │   INSIGHT MAIN IAC   │
                                  └──────────────────────┘

AWS::CloudTrail::
 Trail|EventDataStore             #Includes RESPROPs: InsightSelectors
AWS::CloudTrail::EventDataStore   #Includes RESPROPs: InsightsDestination

CTRAIL_OPTS.insightTypes          #INSIGHT_SELECTORs. Must be ARR of InsightType.API_ERROR_RATE|API_CALL_RATE

                                  ┌──────────────────┐
                                  │   INSIGHT FILE   │
                                  └──────────────────┘

TRAIL_PREFIX/AWSLogs
 /ACCOUNT_ID/CloudTrail-Insight
 /REGION/YYYY/MM/DD/ACCOUNT_ID_
 CloudTrail-Insight_REGION_       #'INSIGHT_FILE'
 YYYYMMDDTHHMMZ_RANDOM.json.gz    #Only with TRAIL, not DATASTORE

INSIGHT_FILE                      #
INSIGHT_FILE.eventVersion
INSIGHT_FILE.eventID
INSIGHT_FILE.eventTime
INSIGHT_FILE.eventType
INSIGHT_FILE.awsRegion
INSIGHT_FILE.recipientAccountId   #Like LOG_FILE.*
INSIGHT_FILE.sharedEventID        #MID shared by both 'Start' and 'End' EVENTs

INSIGHT_FILE.insightDetails       #INSIGHT_DETAILS
INSIGHT_DETAILS.eventSource
INSIGHT_DETAILS.eventName         #Like LOG_FILE.*
INSIGHT_DETAILS.state             #'Start|End'
INSIGHT_DETAILS.insightType       #INSIGHT_SELECTOR.InsightType
INSIGHT_DETAILS.insightContext    #INSIGHT_CONTEXT

INSIGHT_CONTEXT.statistics        #INSIGHT_STATS
INSIGHT_STATS.baseline.average    #NUM. Baseline average/minute
INSIGHT_STATS.baselineDuration    #NUM (in mins)
INSIGHT_STATS.insight.average     #Same but for current rate
INSIGHT_STATS.insightDuration     #For state 'Start', it is first minute only. For 'End', it is since 'Start'

INSIGHT_CONTEXT.attributions      #INSIGHT_ATTRS_ARR
                                  #Top value of some of EVENT's properties, for both baseline and current
INSIGHT_ATTRS.attribute           #STR among:
                                  #  - 'userIdentityArn': IDENTITY.arn
                                  #  - 'userAgent': LOG_EVENT.userAgent
                                  #  - 'errorCode': LOG_EVENT.errorCode
INSIGHT_ATTRS.baseline            #INSIGHT_ATTR_ARR of top values, for baseline
                                  #Max 5. Sorted.
INSIGHT_ATTRS.insight             #Same but for current
INSIGHT_ATTR.value                #STR. E.g. IDENTITY.arn for 'userIdentityArn'
INSIGHT_ATTR.average              #NUM. Average/minute

                                  ┌───────────────────┐
                                  │   INSIGHT COUNT   │
                                  └───────────────────┘

INSIGHT_COUNT_REQ                 #Count number of INSIGHT EVENTs
INSIGHT_COUNT_REQ.StartTime       #DATE_NUM (def: 90 days before now)
INSIGHT_COUNT_REQ.EndTime         #DATE_NUM (def: now)
INSIGHT_COUNT_REQ.Period          #60, 300 or 3600 (def). Like CloudWatch METRIC_DATA_REQ.Period
                                  #RESOLUTION degrades like CloudWatch METRIC_DATUMs
INSIGHT_COUNT_REQ.DataType        #On missing value:
                                  #  - 'NonZeroData' (def): ignore
                                  #  - 'FillWithZeros': set as zero

INSIGHT_COUNT_REQ|RES.InsightType #STR. INSIGHT_SELECTOR.InsightType
INSIGHT_COUNT_REQ|RES.ErrorCode   #Error 'CODE', when InsightType is 'ApiErrorRateInsight'

INSIGHT_COUNT_REQ|RES.EventSource
INSIGHT_COUNT_REQ|RES.EventName   #Like EVENT.*

INSIGHT_COUNT_RES.Values
INSIGHT_COUNT_RES.Timestamps      #Like CloudWatch METRIC_DATA_RES.*

                                  ┌────────────────────────┐
                                  │   INSIGHT COUNT AUTH   │
                                  └────────────────────────┘

PACTION cloudtrail:LookupEvents   #Used by ListInsightsMetricData() instead

                                  ┌───────────────────────┐
                                  │   INSIGHT COUNT API   │
                                  └───────────────────────┘

ListInsightsMetricData()          #Req: INSIGHT_COUNT_REQ
                                  #Res: INSIGHT_COUNT_RES

                                  ┌───────────────────────────┐
                                  │   INSIGHT COUNT METRICS   │
                                  └───────────────────────────┘

AWS/CloudTrail/
 HourlyEventsAnalyzed             #NUM of INSIGHT EVENTs, hourly

                                  ┌────────────────┐
                                  │   DATA STORE   │
                                  └────────────────┘

DATASTORE                         #Like TRAIL but accessed through SQL QUERYs
                                  #Stores EVENTs internally:
                                  #  - in ORC format
                                  #  - no S3|LOG_FILE
                                  #Can also add audit EVENTs (partner|custom data)
                                  #Features related to DATASTORE|CHANNEL|AUDIT_EVENTs are called "CloudTrail lake"
                                  #DATASTORE.AdvancedEventSelectors must allow only one LOG_EVENT.eventCategory
                                  #  - if 'Management|Data|NetworkActivity': automatically filled
                                  #  - can be 'ActivityAuditLog': audit EVENTs
                                  #  - can be 'Insight'
                                  #Max 10 per REGION
DATASTORE.EventDataStoreArn       #DATASTORE_ARN. 'arn:aws:cloudtrail:REGION:ACCOUNT_ID:eventdatastore/DATASTORE'
DATASTORE.Name                    #'DATASTORE'
DATASTORE.CreatedTimestamp        #DATE_NUM
DATASTORE.UpdatedTimestamp        #DATE_NUM

DATASTORE.Status                  #One of:
                                  #  - 'CREATED'
                                  #  - 'STARTING_INGESTION', then 'ENABLED'
                                  #  - 'STOPPING_INGESTING', then 'STOPPED_INGESTION'
                                  #  - 'PENDING_DELETION'

DATASTORE.PartitionKeys           #PARTITION_KEY_ARR
                                  #Groups used to split the EVENTs internally
PARTITION_KEY.name                #STR. Seems to always be 'region', 'year', 'month' and 'day'
PARTITION_KEY.type                #'string' or 'bigint'

DATASTORE                         #BOOL (def: true). Do not allow deleting DATASTORE
 .TerminationProtectionEnabled    #If false, deleting DATATORE waits 7 days to complete,
                                  #during which deletion can be undone with RestoreEventDataStore()
DATASTORE.RetentionPeriod         #NUM. Delete audit EVENTs after NUM days.
                                  #Depending on DATASTORE.BillingMode:
                                  #  - 'EXTENDABLE_RETENTION_PRICING': def 1 year, max 10 years
                                  #  - 'FIXED_RETENTION_PRICING': def|max 7 years
                                  #Min 7 days
                                  #Decreasing default value does not change S3 cost, but increasing does
DATASTORE.BillingMode             #'EXTENDABLE_RETENTION_PRICING' (def) or 'FIXED_RETENTION_PRICING'
                                  #Pricing option (see above)

                                  ┌────────────────────┐
                                  │   DATA STORE API   │
                                  └────────────────────┘

CreateEventDataStore()            #Req: DATASTORE
                                  #  - no EventDataStoreArn, CreatedTimestamp, UpdatedTimestamp, Status, PartitionKeys
                                  #  - Status 'STARTING_INGESTION' -> StartIngestion BOOL
                                  #Res: DATASTORE
                                  #  - no PartitionKeys
UpdateEventDataStore()            #Req: DATASTORE
                                  #  - no CreatedTimestamp, UpdatedTimestamp, Status, PartitionKeys, TagsList
                                  #  - EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no PartitionKeys, TagsList
StartEventDataStoreIngestion()    #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
                                  #Sets DATASTORE.Status 'STARTING_INGESTION'
StopEventDataStoreIngestion()     #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
                                  #Sets DATASTORE.Status 'STOPPING_INGESTION'
GetEventDataStore()               #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no TagsList
ListEventDataStores()             #Req: empty
                                  #Res: EventDataStores DATASTORE_ARR
                                  #  - no BillingMode, PartitionKeys, TagsList
DeleteEventDataStore()            #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: empty
RestoreEventDataStore()           #Req: DATASTORE
                                  #  - only EventDataStoreArn -> EventDataStore
                                  #Res: DATASTORE
                                  #  - no PartitionKeys, TagsList

                                  ┌────────────────────┐
                                  │   DATA STORE IAC   │
                                  └────────────────────┘

AWS::CloudTrail::EventDataStore   #RESPROPs:
                                  #  - Name, TerminationProtectionEnabled, RetentionPeriod, BillingMode
                                  #  - IngestionEnabled BOOL
                                  #RESATTRs: EventDataStoreArn, CreatedTimestamp, UpdatedTimestamp, Status

                                  ┌────────────────────────┐
                                  │   DATA STORE METRICS   │
                                  └────────────────────────┘

AWS/CloudTrail/HourlyDataIngested #Bytes/hour processed by DATASTORE
AWS/CloudTrail/TotalDataRetained  #Total bytes, uncompressed, updated daily
AWS/CloudTrail/TotalStorageBytes  #Total bytes, compressed
AWS/CloudTrail/                   #Total bytes, compressed, excluding the first year
 TotalPaidStorageBytes            #Only if DATASTORE.BillingMode 'EXTENDABLE_RETENTION_PRICING'

                                  ┌──────────────────┐
                                  │   CHANNEL MAIN   │
                                  └──────────────────┘

CHANNEL                           #Target for PutAuditEvents() to add audit EVENTs
                                  #Max 25
CHANNEL.ChannelArn                #CHANNEL_ARN. 'aws:aws:cloudtrail:REGION:ACCOUNT_ID:channel/CHANNEL_MID'
CHANNEL.Name                      #'CHANNEL'

CHANNEL.Source                    #'CHANNEL_SOURCE', either:
                                  #  - 'Custom'
                                  #  - 'CloudTrail': service-linked CHANNEL
                                  #  - 'CHANNEL_PARTNER'
                                  #1 CHANNEL_SOURCE can only have 1 CHANNEL
CHANNEL.SourceConfig              #CHANNEL_SOURCE

CHANNEL.Destinations              #CHANNEL_DEST_ARR
                                  #Max 200
CHANNEL_DEST.Type|Location        #STR
CHANNEL_DEST.Type
 'EVENT_DATA_STORE'               #Redirects to CHANNEL_DEST.Location DATASTORE_ARN

CHANNEL_DEST.Type 'AWS_SERVICE'   #"Service-linked CHANNEL", to receive management EVENTs from CHANNEL_DEST.Location 'SERVICE'
                                  #PACTION *Channel -> *ServiceLinkedChannel
                                  #Automatically sets CHANNEL.SourceConfig, based on SERVICE

CHANNEL_PARTNER                   #Let an external service call PutAuditEvents() either:
                                  #  - "direct integration": externally
                                  #  - "solution integration": from inside current ACCOUNT
                                  #E.g. 'GitHub' (Audit log), 'Snyk', 'LaunchDarkly'

CHANNEL.IngestionStatus           #CHANNEL_STATUS
CHANNEL_STATUS
 .LatestIngestionAttemptEventID   #Last EVENT.eventID being processed
CHANNEL_STATUS
 .LatestIngestionAttemptTime      #DATE_NUM of last EVENT processing start
CHANNEL_STATUS
 .LatestIngestionSuccessEventID
CHANNEL_STATUS
 .LatestIngestionSuccessTime      #Same for successful processing
CHANNEL_STATUS
 .LatestIngestionErrorCode        #'CODE'. Same for failed processing

                                  ┌──────────────────────┐
                                  │   CHANNEL MAIN API   │
                                  └──────────────────────┘

CreateChannel()                   #Req: CHANNEL
                                  #  - no Source, SourceConfig, IngestionStatus
                                  #Res: CHANNEL
                                  #  - no SourceConfig, IngestionStatus
UpdateChannel()                   #Req: CHANNEL
                                  #  - no Source, SourceConfig, IngestionStatus, Tags
                                  #  - ChannelArn -> Channel ARN|MID
                                  #Res: CHANNEL
                                  #  - no SourceConfig, IngestionStatus, Tags
GetChannel()                      #Req: CHANNEL
                                  #  - only ChannelArn -> Channel ARN|MID
                                  #Res: CHANNEL
                                  #  - no Tags
ListChannels()                    #Req: empty
                                  #Res: Channels CHANNEL_ARR
                                  #  - only ChannelArn, Name
DeleteChannel()                   #Req: CHANNEL
                                  #  - only ChannelArn -> Channel ARN|MID
                                  #Res: empty

                                  ┌──────────────────────┐
                                  │   CHANNEL MAIN IAC   │
                                  └──────────────────────┘

AWS::CloudTrail::Channel          #RESPROPs: Name, Source, Destinations
                                  #RESATTRs: ChannelArn

                                  ┌─────────────────────┐
                                  │   AUDIT EVENT PUT   │
                                  └─────────────────────┘

AUDIT_EVENTS_REQ                  #Add audit EVENTs to a DATASTORE through a CHANNEL
                                  #"Audit EVENTs" are custom LOG_EVENTs
                                  #PutAuditEvents() is a DATA_ACTION itself
AUDIT_EVENTS_REQ.channelArn       #CHANNEL_ARN

AUDIT_EVENTS_REQ.auditEvents      #AUDIT_EVENT_ARR
                                  #Max 100. Max 1MB.
AUDIT_EVENT.id                    #'AUDIT_EVENT'
AUDIT_EVENT.eventData             #'AUDIT_EVENT_DATA_JSON'
AUDIT_EVENT.eventDataChecksum     #'SHA256_BASE64' of AUDIT_EVENT.eventData

AUDIT_EVENTS_RES.successful       #SUCCESS_AUDIT_EVENT_ARR
SUCCESS_AUDIT_EVENT.id            #'AUDIT_EVENT'
SUCCESS_AUDIT_EVENT.eventID       #EVENT.EventId

AUDIT_EVENTS_RES.failed           #FAILED_AUDIT_EVENT_ARR
FAILED_AUDIT_EVENT.id             #'AUDIT_EVENT'
FAILED_AUDIT_EVENT.errorCode      #'CODE'
FAILED_AUDIT_EVENT.errorMessage   #'ERROR'

                                  ┌─────────────────────────┐
                                  │   AUDIT EVENT PUT API   │
                                  └─────────────────────────┘

POST /PutAuditEvents              #Req: AUDIT_EVENTS_REQ
PutAuditEvents()                  #  - query parameters: channelArn, externalId
                                  #Res: AUDIT_EVENTS_RES

                                  ┌──────────────────────┐
                                  │   AUDIT EVENT DATA   │
                                  └──────────────────────┘

LOG_INFO.*                        #Different shape for audit EVENT, described here
LOG_INFO.auditData                #AUDIT_EVENT_DATA

LOG_EVENT.metadata                #LOG_CHANNEL. Automatically generated, with information about CHANNEL used
LOG_CHANNEL.channelARN            #CHANNEL_ARN
LOG_CHANNEL.ingestionTime         #'DATE' when processed by CHANNEL

LOG_INFO.eventVersion|eventID
 |eventTime|awsRegion|eventType
 |eventCategory|recipientAccountId
 |addendum|metadata               #Automatically generated
LOG_INFO.apiVersion|readOnly
 |managementEvent|sharedEventID
 |sessionCredentialFromConsole
 |serviceEventDetails|resources
 |tlsDetails                      #Missing

AUDIT_EVENT_DATA.version          #Required. Like LOG_EVENT.eventVersion, but CHANNEL-specific
AUDIT_EVENT_DATA.UID              #Required. Like LOG_EVENT.requestID, but CHANNEL-specific
AUDIT_EVENT_DATA
 .eventTime|eventSource|eventName #Required
AUDIT_EVENT_DATA.userIdentity     #Required, but only has type|principalId
                                  #Also has details OBJ: CHANNEL-specific auth info
AUDIT_EVENT_DATA
 .recipientAccountId              #Must be CHANNEL's ACCOUNT_ID
AUDIT_EVENT_DATA.sourceIPAddress
 |userAgent|requestParameters
 |responseElements|errorCode
 |errorMessage|additionalEventData#Optional

                                  ┌────────────┐
                                  │   IMPORT   │
                                  └────────────┘

IMPORT                            #Copy LOG_FILEs to a DATASTORE
                                  #Ignores DATASTORE's ADVANCED_SELECTORS
IMPORT.ImportId                   #'IMPORT'
IMPORT.CreatedTimestamp           #DATE_NUM
IMPORT.UpdatedTimestamp           #DATE_NUM

IMPORT.ImportSource.S3            #IMPORT_S3. Where LOG_FILEs are located
IMPORT_S3.S3LocationUri           #'URI' to either:
                                  #  - s3://BUCKET/TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/CloudTrail[-Digest|Insight]
                                  #  - s3://BUCKET -> BUCKET/TRAIL_PREFIX/AWSLogs/ACCOUNT_ID/CloudTrail
IMPORT_S3.S3BucketRegion          #'REGION'

IMPORT.Destinations               #DATASTORE_ARN_ARR

IMPORT.Start|EndEventTime         #DATE_NUM, filtering by LOG_EVENT.eventTime
                                  #StartTime should be < DATASTORE.CreatedTimestamp to avoid duplicated LOG_EVENTs,
                                  #if it uses service-linked CHANNELs

IMPORT.ImportStatus               #STR among:
                                  #  - 'INITIALIZING'
                                  #  - 'IN_PROGRESS', 'STOPPED'
                                  #  - 'COMPLETED', 'FAILED'
IMPORT.ImportStatistics           #IMPORT_STATS
IMPORT_STATS.FilesCompleted       #NUM of LOG_FILEs done
IMPORT_STATS.PrefixesFound        #NUM of S3 prefixes (i.e. number of recorded days) started
IMPORT_STATS.PrefixesCompleted    #NUM of S3 prefixes done
IMPORT_STATS.EventsCompleted      #NUM of LOG_EVENTs done
IMPORT_STATS.FailedEntries        #NUM of LOG_EVENTs failed

IMPORT_FAILURE.ErrorType          #STR
IMPORT_FAILURE.ErrorMessage       #'ERROR'
IMPORT_FAILURE.Location           #'OBJECT'
IMPORT_FAILURE.LastUpdatedTime    #IMPORT.UpdatedTimestamp
IMPORT_FAILURE.Status             #STR among: 'RETRY', 'SUCCEEDED', 'FAILED'

                                  ┌─────────────────┐
                                  │   IMPORT AUTH   │
                                  └─────────────────┘

IMPORT_S3.S3BucketAccessRoleArn   #ROLE_ARN used to read BUCKET
                                  #Must allow PACTIONs:
                                  #  - s3:GetObject on URI/*
                                  #     - with COND_KEY aws:SourceArn DATASTORE_ARN
                                  #  - s3:ListBucket|GetBucketAcl on BUCKET
                                  #     - with COND_KEY aws:SourceArn DATASTORE_ARN
                                  #  - kms:GenerateDataKey|Decrypt, if using S3-KMS
                                  #Trust policy must allow Principal.Service 'cloudtrail.amazonaws.com' to sts:AssumeRole
                                  #  - with COND_KEY aws:SourceArn DATASTORE_ARN

                                  ┌────────────────┐
                                  │   IMPORT API   │
                                  └────────────────┘

StartImport()                     #Req: IMPORT
                                  #  - no CreatedTimestamp, UpdatedTimestamp, ImportStatus, ImportStatistics
                                  #Res: IMPORT
                                  #  - no ImportStatistics
GetImport()                       #Req: IMPORT
                                  #  - only ImportId
                                  #Res: IMPORT
ListImports()                     #Req: IMPORT
                                  #  - only Destination STR, ImportStatus
                                  #Res: Imports IMPORT_ARR
                                  #  - no StartEventTime, EndEventTime, ImportSource, ImportStatistics
ListImportFailures()              #Req: IMPORT
                                  #  - only ImportId
                                  #Res: Failures IMPORT_FAILURE_ARR
StopImport()                      #Req: IMPORT
                                  #  - only ImportId
                                  #Res: IMPORT

                                  ┌───────────────────┐
                                  │   QUERY REQUEST   │
                                  └───────────────────┘

QUERY                             #SQL query on LOG_EVENTs of a DATASTORE
                                  #Unlike LookupEvents(), can be across multiple REGIONs|ACCOUNTs
                                  #Can save QUERYs in UI console
                                  #Max 10 ongoing QUERYs
                                  #Times out after 1h
QUERY.QueryId                     #QUERY_MID
QUERY_STATS.CreationTime          #DATE_NUM

QUERY.EventDataStore              #DATASTORE_ARN

QUERY.QueryString                 #'SQL'
                                  #Only 'SELECT' statement
                                  #FROM is DATASTORE
                                  #COLs are LOG_EVENT.*
                                  #  - def name for `select FUNC(...)`: "_colNUM"
                                  #Can use:
                                  #  - all FUNCs from Presto
                                  #     - including count()
                                  #  - as
                                  #  - and|or|not
                                  #  - = <> !=, in, is [not] null, is [not] distinct from
                                  #  - < <= > >=, between, greatest|least()
                                  #  - like 'GLOB'
                                  #  - left|right|inner join, on
                                  #  - where
                                  #  - order by
                                  #  - limit
                                  #  - union [all], except, intersect
                                  #Uses Presto under the hood (see its doc)
                                  #Max 1e4 chars

QUERY.QueryParameters             #'VAL'_ARR. Positional arguments to substitute as '?' in 'QUERY'
                                  #Max 10

QUERY.QueryAlias                  #'QUERY_ALIAS'. Pre-saved common QUERYs:
                                  #  - "Overview":
                                  #     - USER|REGION|SERVICEs with most EVENTs
                                  #     - most throttled|errored ACTIONs
                                  #     - only management EVENTs
                                  #  - "Management events": ACTION ConsoleLogin, IAM errors, delete ACTIONs, top errors per USER
                                  #  - "S3 data events": top OBJECT|USER|ACTIONs

                                  ┌───────────────────────┐
                                  │   QUERY REQUEST API   │
                                  └───────────────────────┘

StartQuery()                      #Req: QUERY
                                  #  - no QueryId, EventDataStore, QueryResultRows, DeliveryStatus, QueryStatus, ErrorMessage, QueryStatistics
                                  #  - QueryString -> QueryStatement
                                  #Res: QUERY
                                  #  - only QueryId
DescribeQuery()                   #Req: QUERY
                                  #  - only QueryId, QueryAlias
                                  #Res: QUERY
                                  #  - no QueryAlias, EventDataStore, QueryParameters, QueryResultRows
ListQueries()                     #Req: QUERY
                                  #  - only QueryId, QueryStatus, EventDataStore
                                  #  - CreationTime -> StartTime + Endtime DATE_NUM
                                  #Res: Queries QUERY_ARR
                                  #  - only QueryId, CreationTime, QueryStatus
CancelQuery()                     #Req: QUERY
                                  #  - only QueryId
                                  #Res: QUERY
                                  #  - only QueryId, QueryStatus
                                  #Set QUERY.QueryStatus 'CANCELLED'
GetQueryResults()                 #Req: QUERY
                                  #  - only QueryId
                                  #  - MaxResults -> MaxQueryResults
                                  #Res: QUERY
                                  #  - no QueryId, QueryAlias, EventDataStore, QueryString, QueryParameters, DeliveryS3Uri, DeliveryStatus
                                  #  - QueryStatistics: only BytesScanned
                                  #  - pagination: QueryStatistics.[Total]ResultsCount

                                  ┌──────────────┐
                                  │   QUERY AI   │
                                  └──────────────┘

QUERY_AI_REQ                      #AI prompt to generate a QUERY
                                  #Not for audit EVENTs
QUERY_AI_REQ.EventDataStores      #DATASTORE_ARN_ARR. Must be a single item
QUERY[_AI_REQ].Prompt             #STR
                                  #Min 3 chars, max 500 chars

QUERY_AI_RES.QueryStatement       #QUERY.QueryString
QUERY_AI_RES.QueryAlias           #QUERY.QueryAlias, as an alternative

                                  ┌───────────────────┐
                                  │   QUERY AI AUTH   │
                                  └───────────────────┘

PACTION cloudtrail:GenerateQuery  #Required to do GenerateQuery() from the UI

                                  ┌──────────────────┐
                                  │   QUERY AI API   │
                                  └──────────────────┘

GenerateQuery()                   #Req: QUERY_AI_REQ
                                  #Res: QUERY_AI_RES

                                  ┌────────────────────────┐
                                  │   QUERY RESULTS MAIN   │
                                  └────────────────────────┘

QUERY.QueryResultRows             #Results as OBJ_ARR_ARR
                                  #Each OBJ is a `select VAL`, each OBJ_ARR is a ROW
                                  #Deleted 7 days after creation

QUERY.DeliveryS3Uri               #'s3://BUCKET' storing QUERY.QueryResultRows
                                  #If not specified, not stored in S3, but QUERY.QueryResultsRows still available
AWSLogs/ACCOUNT_ID/CloudTrail-Lake
 /Query/YYYY/MM/DD/QUERY_MID/     #'QUERY_RESULTS_FILE', when using QUERY.DeliveryS3Uri
 result_NUM.csv.gz                #NUM spreads results over multiple files, max 1TB each, if total is >1TB
QUERY.DeliveryStatus              #STR among:
                                  #  - PENDING
                                  #  - SUCCESS
                                  #  - CANCELLED
                                  #  - FAILED[_SIGNING_FILE], ACCESS_DENIED[_SIGNING_FILE], RESOURCE_NOT_FOUND
                                  #  - UNKNOWN

QUERY.QueryStatus                 #STR among:
                                  #  - QUEUED
                                  #  - RUNNING
                                  #  - FINISHED
                                  #  - CANCELLED
                                  #  - FAILED, TIMED_OUT
QUERY.ErrorMessage                #'ERROR'

QUERY.QueryStatistics             #QUERY_STATS
QUERY_STATS.EventsMatched         #NUM of LOG_EVENTs being returned
QUERY_STATS.EventsScanned         #NUM of LOG_EVENTs filtered by `where` clause
QUERY_STATS.BytesScanned          #NUM of bytes read in the DATASTORE, i.e. from EventsScanned
QUERY_STATS.ExecutionTimeInMillis #NUM of ms the QUERY has been running

                                  ┌──────────────────────┐
                                  │   QUERY RESULTS UI   │
                                  └──────────────────────┘

QUERY RESULTS SUMMARY ==>         #Can use AI to show natural language summary of QUERY results
                                  #Not for audit EVENTs
                                  #QUERY.QueryResultRows max 250KB per QUERY, 3MB per month

                                  ┌────────────────────────┐
                                  │   QUERY RESULTS AUTH   │
                                  └────────────────────────┘

PERMISSIONS ==>                   #QUERY.DeliveryS3Uri requires same permissions as ones for a TRAIL's BUCKET

PACTION cloudtrail:
 GetQueryResults|
 GenerateQueryResultsSummary      #Allows query results summary with AI

                                  ┌────────────────────────────┐
                                  │   QUERY RESULTS VALIDATE   │
                                  └────────────────────────────┘

OUTPUT ==>                        #One QUERY_VERIFY_RES_LINE per QUERY_RESULTS_FILE|QUERY_RESULTS_SIGN, as TSV
QUERY_VERIFY_RES_LINE[0]          #'Query result file' or 'Sign file'
QUERY_VERIFY_RES_LINE[1]          #'s3://LOG_BUCKET/OBJECT'
QUERY_VERIFY_RES_LINE[2]          #'Successfully ...' or 'ValidationError: ...'

result_sign.json                  #'QUERY_RESULTS_SIGN'. Sibling to result_NUM.csv.gz, ensuring its integrity
QUERY_RESULTS_SIGN.version        #Currently '1.0'
QUERY_RESULTS_SIGN.region         #'REGION'
QUERY_RESULTS_SIGN
 .queryCompleteTime               #'DATE' of creation of QUERY_RESULTS

QUERY_RESULTS_SIGN.files          #QUERY_RESULTS_FILE_ARR
QUERY_RESULTS_FILE.fileName       #'result_NUM.csv.gz'
QUERY_RESULTS_FILE.fileHashValue  #'SHA256_HEX' of QUERY_RESULTS_FILE's contents
                                  #Goal: ensure integrity of QUERY_RESULTS_FILE
QUERY_RESULTS_SIGN.hashAlgorithm  #Always 'SHA-256'

QUERY_RESULTS_SIGN.hashSignature  #'HEX'. RSA signature of QUERY_RESULTS_SIGN, with AWS private key
                                  #STR being signed is space-concatenation of each QUERY_RESULTS_FILE.fileHashValue
                                  #Goal: ensure integrity of QUERY_RESULTS_SIGN itself
QUERY_RESULTS_SIGN
 .signatureAlgorithm              #Always 'SHA256withRSA'
QUERY_RESULTS_SIGN
 .publicKeyFingerprint            #PUBLIC_KEY.Fingerprint

                                  ┌────────────────────────────────┐
                                  │   QUERY RESULTS VALIDATE CLI   │
                                  └────────────────────────────────┘

aws cloudtrail                    #Check integrity of QUERY_RESULTS_FILEs using QUERY_RESULTS_SIGN
 verify-query-results             #CLI-only

--s3-bucket
--s3-prefix                       #'BUCKET|OBJECT' to QUERY_RESULTS_SIGN
--local-export-path               #Same as local '/PATH'

                                  ┌───────────────┐
                                  │   DASHBOARD   │
                                  └───────────────┘

TRAIL_DASHBOARD                   #Like CloudWatch DASHBOARDs, but for CloudTrail QUERYs
                                  #Max 10, except if Type 'MANAGED'
TRAIL_DASHBOARD.DashboardArn      #TRAIL_DASHBOARD_ARN. 'arn:aws:cloudtrail:REGION:ACCOUNT_ID:dashboard/DASHBOARD'
TRAIL_DASHBOARD.DashboardId       #TRAIL_DASHBOARD_MID
TRAIL_DASHBOARD.Name              #'TRAIL_DASHBOARD'
                                  #Only [:alnum:]_-
TRAIL_DASHBOARD.CreatedTimestamp  #DATE_NUM
TRAIL_DASHBOARD.UpdatedTimestamp  #DATE_NUM

TRAIL_DASHBOARD
 .TerminationProtectionEnabled    #BOOL (def: true). Do not allow deleting

TRAIL_DASHBOARD.Status            #One of: 'CREATING', 'CREATED', 'UPDATING', 'UPDATED', 'DELETING'

                                  ┌────────────────────┐
                                  │   DASHBOARD AUTH   │
                                  └────────────────────┘

PACTION cloudtrail:StartQuery     #Must be allowed using a RESOURCE_POLICY on DATASTORE with:
                                  #  - Principal.Service 'cloudtrail.amazonaws.com'
                                  #  - COND_KEY AWS:SourceArn TRAIL_DASHBOARD_ARN
                                  #     - including for 'AWSCloudTrail-Highlights'
                                  #  - COND_KEY AWS:SourceAccount ACCOUNT_ID

                                  ┌───────────────────┐
                                  │   DASHBOARD API   │
                                  └───────────────────┘

CreateDashboard()                 #Req: TRAIL_DASHBOARD
                                  #  - no DashboardId, *Timestamp, LastRefresh*, Status, QueryAlias
                                  #  - no Type -> use Name 'AWSCloudTrail-Highlights' instead
                                  #Res: TRAIL_DASHBOARD
                                  #  - no *Timestamp, DashboardArn, DashboardId, LastRefresh*, Status
UpdateDashboard()                 #Req: TRAIL_DASHBOARD
                                  #  - no Name, *Timestamp, LastRefresh*, Status, QueryAlias, TagsList
                                  #Res: TRAIL_DASHBOARD
                                  #  - no DashboardId, LastRefresh*, Status, TagsList
ListDashboards()                  #Req: TRAIL_DASHBOARD
                                  #  - only Name -> NamePrefix, Type
                                  #Res: Dashboards TRAIL_DASHBOARD_ARR
                                  #  - only DashboardArn, Type
GetDashboard()                    #Req: TRAIL_DASHBOARD
                                  #  - only DashboardId
                                  #Res: TRAIL_DASHBOARD
                                  #  - no DashboardId, Name, TagsList
DeleteDashboard()                 #Req: TRAIL_DASHBOARD
                                  #  - only DashboardId
                                  #Res: empty

                                  ┌───────────────────┐
                                  │   DASHBOARD IAC   │
                                  └───────────────────┘

AWS::CloudTrail::Dashboard        #RESPROPs: Name, TerminationProtectionEnabled

                                  ┌───────────────────────┐
                                  │   DASHBOARD REFRESH   │
                                  └───────────────────────┘

TRAIL_DASHBOARD.LastRefreshId     #STR identifying the last refresh

TRAIL_DASHBOARD
 .LastRefreshFailureReason        #'ERROR'

TRAIL_DASHBOARD.RefreshSchedule   #REFRESH. Automatically refreshes the dashboard with a new QUERY at regular intervals
                                  #Regardless, can do manually with StartDashboardRefresh()
REFRESH.Status                    #'ENABLED' or 'DISABLED' (def)
REFRESH.Frequency                 #{Value: NUM, Unit: 'HOURS|DAYS'}
                                  #Must be 1|6|12|24h or 1d
REFRESH.TimeOfDay                 #'HH:MM' (def: '00:00'). When to run
                                  #If Frequency.Unit 'HOURS', only uses the 'MM' part

                                  ┌────────────────────────────┐
                                  │   DASHBOARD REFRESH AUTH   │
                                  └────────────────────────────┘

PACTION                           #If TRAIL_DASHBOARD.RefreshSchedule, must be allowed using a RESOURCE_POLICY on TRAIL_DASHBOARD to:
 cloudtrail:StartDashboardRefresh #  - Principal.Service 'cloudtrail.amazonaws.com'
                                  #  - COND_KEY AWS:SourceArn TRAIL_DASHBOARD_ARN
                                  #  - COND_KEY AWS:SourceAccount ACCOUNT_ID

                                  ┌───────────────────────────┐
                                  │   DASHBOARD REFRESH API   │
                                  └───────────────────────────┘

StartDashboardRefresh()           #Req: TRAIL_DASHBOARD
                                  #  - only DashboardId
                                  #  - only one with QueryParameterValues
                                  #Res: TRAIL_DASHBOARD
                                  #  - only LastRefreshId -> RefreshId

                                  ┌───────────────────────────┐
                                  │   DASHBOARD REFRESH IAC   │
                                  └───────────────────────────┘

AWS::CloudTrail::Dashboard        #Includes RESPROPs: RefreshSchedule

                                  ┌──────────────────────┐
                                  │   DASHBOARD WIDGET   │
                                  └──────────────────────┘

TRAIL_DASHBOARD.Widgets           #TRAIL_WIDGET_ARR
                                  #Max 10 items

TRAIL_WIDGET.QueryStatement       #QUERY.QueryString

TRAIL_WIDGET.QueryAlias           #QUERY.QueryAlias
                                  #Max 256 chars, [:alnum:]._-

TRAIL_WIDGET.QueryParameterValues
 .QUERY_PARAM                     #Like QUERY.QueryParameters, except only specific QUERY_PARAMs are allowed
TRAIL_WIDGET.QueryParameters      #'QUERY_PARAM'_ARR. Same except values are automatically computed
QUERY_PARAM $EventDataStoreId$    #DATASTORE_MID. Required if Type 'MANAGED'
QUERY_PARAM $StartTime|EndTime$   #'DATE'
QUERY_PARAM $Period$              #'second|minute|hour|day'

TRAIL_WIDGET
 .ViewProperties.VIEW_PROP        #STR
VIEW_PROP View                    #One of: 'Table', 'PieChart', 'BarChart', 'LineChart'
VIEW_PROP Title                   #STR
VIEW_PROP Height|Width            #NUM (in inches)
VIEW_PROP ValueColumn             #'VAR'. Use LOG_EVENT.VAR as values
                                  #Only with View 'PieChart|BarChart'
VIEW_PROP YAxisColumn|XAxisColumn #'VAR'. USe LOG_EVENT.VAR as axis values
                                  #Only with View 'LineChart'
VIEW_PROP LabelColumn             #'VAR'. Use LOG_EVENT.VAR as labels
                                  #Only with View 'PieChart|BarChart'
VIEW_PROP FilterColumn            #BOOL 'VAR'. Exclude if LOG_EVENT.VAR false
                                  #Only with View 'PieChart|BarChart|LineChart'
VIEW_PROP Orientation             #'Horizontal' or 'Vertical' (def)
                                  #Only with View 'BarChart'

                                  ┌──────────────────────────┐
                                  │   DASHBOARD WIDGET IAC   │
                                  └──────────────────────────┘

AWS::CloudTrail::Dashboard        #RESPROPs: Widgets
                                  #  - no TRAIL_WIDGET.QueryAlias

                                  ┌───────────────────────┐
                                  │   DASHBOARD MANAGED   │
                                  └───────────────────────┘

TRAIL_DASHBOARD.Type              #Either:
                                  #  - 'CUSTOM'
                                  #  - 'MANAGED':
                                  #      - Name 'AWSCloudTrail-MANAGED_TRAIL_DASHBOARD' which must be explicitely set
                                  #      - pre-defined readonly properties and TRAIL_WIDGETs

MANAGED DASHBOARDS ==>            #
Highlights                        #REFRESH.Frequency to 6h: must be explicitely set
                                  #Only last 24h
                                  #TRAIL_WIDGETs:
                                  #  - LOG_EVENT calls: total, failed, throttled, delete, cross-ACCOUNT, DynamoDB
                                  #  - SERVICEs count

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

RESOURCE_POLICY.ResourceArn       #CHANNEL_ARN|DATASOURCE_ARN|TRAIL_DASHBOARD_ARN
RESOURCE_POLICY.ResourcePolicy    #IAM 'POLICY'
                                  #Resource-based POLICY on CHANNEL|DATASOURCE|TRAIL_DASHBOARD, with resource-level permissions
                                  #Only for PACTIONs:
                                  #  - Resource CHANNEL_ARN: PutAuditEvents
                                  #  - Resource DATASOURCE_ARN: GetEventDataStore|*Query*
                                  #  - Resource TRAIL_DASHBOARD_ARN: StartDashboardRefresh
                                  #With partner CHANNEL_SOURCEs, should check Service.Principal ACCOUNT_ID
                                  #Min 1 PRINCIPAL. Max 8KB, 20 STATEMENTs, 50 PRINCIPALs
                                  #Can be cross-ACCOUNT

AUDIT_EVENTS_REQ.externalId       #STR, used like COND_KEY sts:ExternalId
COND_KEY cloudtrail:ExternalId    #Should be used with partner CHANNEL_SOURCEs

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

PutResourcePolicy()               #Req: RESOURCE_POLICY
                                  #Res: RESOURCE_POLICY
GetResourcePolicy()               #Req: RESOURCE_POLICY
                                  #  - only ResourceArn
                                  #Res: RESOURCE_POLICY
DeleteResourcePolicy()            #Req: RESOURCE_POLICY
                                  #  - only ResourceArn
                                  #Res: empty

                                  ┌────────────────┐
                                  │   POLICY IAC   │
                                  └────────────────┘

AWS::CloudTrail::ResourcePolicy   #RESPROPs: ResourceArn, ResourcePolicy

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

RESOURCE_TAGS.ResourceId          #TRAIL_ARN|CHANNEL_ARN|DATASTORE_ARN|TRAIL_DASHBOARD_ARN
RESOURCE_TAGS.TagsList            #TAG_PAIRS

TRAIL.TagsList
CHANNEL.Tags
DATASTORE.TagsList
TRAIL_DASHBOARD.TagsList          #TAG_PAIRS

                                  ┌──────────────┐
                                  │   TAGS API   │
                                  └──────────────┘

AddTags()                         #Req: RESOURCE_TAGS
                                  #Res: empty
ListTags()                        #Req: RESOURCE_TAGS
                                  #  - only ResourceId -> ResourceIdList ARN_ARR
                                  #Res: ResourceTagList RESOURCE_TAGS_ARR
RemoveTags()                      #Req: RESOURCE_TAGS
                                  #Res: empty

                                  ┌──────────────┐
                                  │   TAGS IAC   │
                                  └──────────────┘

AWS::CloudTrail::Trail
 |EventDataStore|Channel|Dashboard#Includes RESPROPs: Tags
