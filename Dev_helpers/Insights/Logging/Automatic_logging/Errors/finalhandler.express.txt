
                
   FINALHANDLER  
                



VERSION ==>                       #2.0.0

FINALHANDLER(REQ, RES[, OPTS])    #Sends a HTTP response meant when server could not handle request
 ->NEXT([ERROR])                  #Automatically handles REQ: wait for it be finished, unpipe it, resume it if paused
                                  #Noop if response headers already sent

STATUS NUM ==>                    #If no ERROR: 404
                                  #If ERROR: ERROR.status[Code], RES.statusCode, or 500

HEADERS ==>                       #Content-Type: text/html; charset=utf-8 [C]
                                  #Content-Length [C]
                                  #Content-Security-Policy: default-src 'none' [C]
                                  #X-Content-Type-Options: nosniff [C]
                                  #Unsets Content-Encoding|Language|Range [S]
                                  #Sets ERROR.headers HEADERS_OBJ (providing ERROR.status[Code] exists)

BODY ==>                          #If no ERROR: 'Cannot HTTP_METHOD /PATH'
                                  #If ERROR: ERROR.stack
                                  #No body if HTTP_METHOD HEAD

OPTS.env                          #STR. Def: ENVVAR NODE_ENV, or 'development'
                                  #If 'production', use 'STATUS' message instead of ERROR.stack (see STATUSES doc)

OPTS.onerror                      #FUNC(ERROR, REQ, RES) (def: none) called on NEXT(ERROR)
