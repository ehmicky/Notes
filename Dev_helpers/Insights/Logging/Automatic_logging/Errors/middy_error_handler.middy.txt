
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   MIDDY_ERROR_HANDLER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #Part of Middy (see its doc)

                                  ┌─────────────┐
                                  │   HANDLER   │
                                  └─────────────┘

@middy/error-handler              #

ERROR-HANDLER([OPTS])->MIDDY_MDWR #Main 'onError' STEP logic
                                  #Sets RES
                                  #Uses normalizeHttpResponse()
                                  #No early response, i.e. other 'onError' STEPs still run
                                  #Should be the last 'onError' STEP

EXCEPTION_VAL                     #MIDDY_REQ.error
                                  #Can be anything, but should try to use MIDDY_HTTP_ERROR
EXCEPTION_VAL.statusCode          #STATUS_NUM (def: 500). Used as RES.statusCode
EXCEPTION_VAL.headers             #HEADERS_OBJ (def: none). Merged to RES.headers (higher priority)
EXCEPTION_VAL.message             #'MESSAGE' (def: none). Used as RES.body
                                  #Also sets Content-Type [S] with either:
                                  #  - 'text/plain'
                                  #  - 'application/json' (guessed by trying to parse)
EXCEPTION_VAL.expose              #BOOL (def: false if EXCEPTION_VAL.statusCode 5**)
                                  #Always false if no EXCEPTION_VAL.statusCode
                                  #If false:
                                  #  - MIDDY_REQ.error transformed to an {statusCode, message} OBJ
                                  #  - RES.statusCode 500
                                  #  - RES.body OPTS.fallbackMessage (def: undefined)

OPTS.logger                       #FUNC(EXCEPTION_VAL) (def: console.error) or false, to call

                                  ┌───────────────────┐
                                  │   ERROR LOGGING   │
                                  └───────────────────┘

@middy/error-logger               #

ERROR-LOGGER([OPTS])->MIDDY_MDWR  #

OPTS.logger                       #FUNC(MIDDY_REQ) (def: console.error) or false
                                  #Called in 'onError' STEP
                                  #No early response, i.e. other 'onError' STEPs still run
                                  #Should be the first 'onError' STEP
