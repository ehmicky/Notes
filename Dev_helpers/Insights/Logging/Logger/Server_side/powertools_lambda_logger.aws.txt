
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POWERTOOLS_LAMBDA_LOGGER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See Lambda docs
                                  #Meant for AWS Lambda

new Logger([OPTS])

LOGGER.isColdStart()->BOOL        #Returns true once, then false
                                  #I.e. whether FUNC_INSTANCE's cold start

OPTS.customConfigService          #CCONFIG. ???

LOGGER.LEVEL(STR|OBJ[, ...])      #Prints using console.LEVEL(...)
                                  #OBJ is { message STR, ... }

OPTS.logLevel                     #'LEVEL' (def: CCONFIG.getLogLevel()->STR, or ENVVAR POWERTOOLS_LOG_LEVEL)
                                  #Can be 'TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'SILENT', 'CRITICAL'
                                  #Always overridden by ENVVAR AWS_LAMBDA_LOG_LEVEL (which is set by FUNC_LOGGING.ApplicationLogLevel)
LOGGER.setLogLevel('LEVEL')       #
LOGGER.level                      #LEVEL_NUM: 6|8|12|16|20|24|28 from TRACE to SILENT
OPTS.sampleRateValue              #NUM (def: CCONFIG.getSampleRateValue()->NUM, or ENVVAR POWERTOOLS_LOGGER_SAMPLE_RATE, or 0)
                                  #Percentage, from 0 to 1
                                  #Randomly sets LEVEL to DEBUG for NUM% of LOGGERs

OPTS.serviceName                  #'SERVICE' (def: CCONFIG.getServiceName()->STR, or ENVVAR POWERTOOLS_SERVICE_NAME, or 'service_undefined')
                                  #???
OPTS.persistentKeys               #OBJ. ???
OPTS.environment                  #'ENVIRONMENT' (def: CCONFIG.getCurrentEnvironment()->STR, or ENVVAR ENVIRONMENT)
                                  #???
OPTS.logFormatter                 #???
OPTS.logRecordOrder               #???

ENVVAR POWERTOOLS_DEV=1           #Indent JSON
OPTS.jsonReplacerFn               #FUNC('VAR', VAL)

LDATA.awsRegion ENVVAR AWS_REGION
LDATA.environment OPTS.environment
LDATA.serviceName OPTS.serviceName
LDATA.sampleRateValue OPTS.sampleRateValue

LOGGER.getLogEvent()->BOOL
ENVVAR
 POWERTOOLS_LOGGER_LOG_EVENT=1    #???

