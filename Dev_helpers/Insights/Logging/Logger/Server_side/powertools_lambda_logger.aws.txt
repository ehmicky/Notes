
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POWERTOOLS_LAMBDA_LOGGER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See Lambda docs
                                  #Meant for AWS Lambda

new Logger([OPTS])                #LOGGER
LOGGER.createChild([OPTS])
 ->LOGGER2                        #Inherits LOGGER OPTS, ALOG_OBJ and NCONTEXT
OPTS.customConfigService          #CCONFIG. Provides dynamic OPTS

LOGGER.injectLambdaContext        #DFUNC is TypeScript decorator for the main HANDLER
 ([NOPTS])->DFUNC                 #At start: calls LOGGER.addContext(NCONTEXT) + LOGGER.logEventIfEnabled(REQ)
                                  #At end: calls LOGGER.resetKeys(), providing NOPTS.resetKeys true
injectLambdaContext
 (LOGGER[_ARR][, NOPTS])          #Same but as Middy MDWR
 ->MIDDY_MDWR                     #Imported from '@aws-lambda-powertools/logger/middleware'

LOGGER.LEVEL                      #Prints using console.*(...)
 ('MESSAGE'|ALOG_OBJ[, EXTRA...]) #ALOG_OBJ must include ALOG_OBJ.message
                                  #EXTRA is ALOG_OBJ, ERROR or STR

OPTS.persistentKeys               #ALOG_OBJ
LOGGER.append[Persistent]Keys
 (ALOG_OBJ)                       #
LOGGER.remove[Persistent]Keys
 ('ALOG_VAR'_ARR)                 #
LOGGER
 .getPersistentLogAttributes()
 ->ALOG_OBJ                       #
LOGGER.resetKeys()                #Delete all ALOG_OBJ.* added by .appendKeys() (not by .appendPersistentKeys() nor OPTS.persistentKeys)
                                  #Meant to be called at end of each request
                                  #I.e. persistent ALOG_OBJ is cross-request, non-persistent is for a single request

OPTS.logRecordOrder               #'ALOG_VAR'_ARR (def: none). ALOG fields order when logged
                                  #Missing ones are still logged, but ordered last

ALOG                              #OBJ printed by LOGGER
                                  #Serialized as JSON
                                  #Handles BIGINT
                                  #Ignores cycles
                                  #Ignores empty values: '', null, undefined
                                  #Serializes ERROR as ERROR_OBJ: name, message, stack, cause, location 'LINE:COL'|''
ALOG_OBJ                          #OBJ merged to ALOG with lower priority
                                  #Priority order:
                                  #  - ALOG.* documented below
                                  #  - OPTS.persistentKeys
                                  #  - LOGGER.append*Keys(ALOG_OBJ)
                                  #  - LOGGER.level(ALOG_OBJ)
                                  #  - EXTRA ALOG_OBJ

ALOG.message                      #'MESSAGE'

OPTS.logLevel                     #'LEVEL'
CCONFIG.getLogLevel()->'LEVEL'    #Can be 'TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'SILENT', 'CRITICAL'
ENVVAR POWERTOOLS_LOG_LEVEL       #  - corresponds to console.LEVEL(...)
ALOG.level                        #  - 'TRACE' -> console.log()
                                  #  - 'ERROR|CRITICAL' -> console.error()
                                  #Always overridden by ENVVAR AWS_LAMBDA_LOG_LEVEL (which is set by FUNC_LOGGING.ApplicationLogLevel)
LOGGER.setLogLevel('LEVEL')       #
LOGGER.getLevelName()->'LEVEL'    #
LOGGER.level                      #Same as NUM: 6|8|12|16|20|24|28 from TRACE to SILENT

ALOG.timestamp                    #'YYYY-MM-DDTHH:MM:SS.SSSZ'
ENVVAR TZ                         #'TIMEZONE' (def: 'UTC') to use in ALOG.timestamp
ALOG.extra                        #STR, when EXTRA is STR
ALOG.error                        #ERROR_OBJ, when EXTRA is ERROR
ALOG.xray_trace_id                #STR, using ENVVAR _X_AMZN_TRACE_ID
ALOG.service
OPTS.serviceName
CCONFIG.getServiceName()
 ->'SERVICE'
ENVVAR POWERTOOLS_SERVICE_NAME    #'SERVICE' (def: 'service_undefined')

ALOG.sampling_rate
CCONFIG.getSampleRateValue()->NUM
ENVVAR                            #NUM (def: 0)
 POWERTOOLS_LOGGER_SAMPLE_RATE    #Percentage, from 0 to 1
OPTS.sampleRateValue              #Randomly sets LEVEL to DEBUG for NUM% of LOGGERs
LOGGER
 .refreshSampleRateCalculation()  #Reperforms random selection in case LEVEL changed

LOGGER.addContext(NCONTEXT)       #Adds ALOG.function_*|cold_start
ALOG.function_arn                 #'FUNC_VERSION_ARN'
ALOG.function_name                #'FUNCTION'
AALOG.function_version            #VERSION_NUM
ALOG.function_request_id          #'REQ_ID'
ALOG.function_memory_size         #NUM (in MB). FUNC_VERSION.MemorySize

LOGGER.isColdStart()->BOOL        #Returns true once, then false. I.e.:
                                  #  - whether FUNC_INSTANCE's cold start
                                  #  - should be called only once
ALOG.cold_start                   #BOOL

OPTS.logFormatter                 #FUNC. Customize ALOG.*
                                  #Not documented yet
AALOG                             #ALOG fields only available when using OPTS.logFormatter

ENVVAR AWS_REGION
AALOG.awsRegion                   #'REGION'
AALOG.environment
CCONFIG.getCurrentEnvironment()
 ->STR
ENVVAR ENVIRONMENT
OPTS.environment                  #STR. E.g. production, stage, etc.

ENVVAR POWERTOOLS_DEV=1           #Indent JSON
OPTS.jsonReplacerFn               #FUNC passed to JSON.stringify(VAL, FUNC)

LOGGER.logEventIfEnabled(REQ)     #Calls LOGGER.info('Lambda invocation event')
LOGGER.logEventIfEnabled
 (..., BOOL)
NOPTS.logEvent
LOGGER.shouldLogEvent()->BOOL
LOGGER.getLogEvent()->BOOL
ENVVAR
 POWERTOOLS_LOGGER_LOG_EVENT=0|1  #If false (def), LOGGER.logEventIfEnabled() is noop
ALOG.event                        #REQ, when using LOGGER.logEventIfEnabled()
