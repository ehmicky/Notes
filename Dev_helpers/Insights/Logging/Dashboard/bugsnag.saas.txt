
           
   BUGSNAG  
           



PRICING ==>                       #  - free: 10 events per hour
                                  #  - 30$/month: 200 events per hour
                                  #  - 60$/month: 200 events per hour, custom filters, releases, event data request
                                  #  - enterprise


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENDPOINT                          #https://api.bugsnag.com
                                  #Some have different ENDPOINT: documented there.
MIME                              #'application/json[; version=VERSION]'
                                  #Parameters in query for GET, request body for others
                                 C#Mean field can be created with POST
                                 U#Mean field can be updated with PATCH
                                 R#Mean field is not available on POST|PATCH
X-Version: VERSION [C]            #Must be used

TIMESTAMP                         #'YYYY-MM-DDTHH:MM:SSZ'
TIME                              #TIMESTAMP or NUMh|NUMd (last hours|days)

RATE LIMITING ==>                 #For each 1 minute.
                                  #Sends 429 + X-RateLimit-Limit [S], X-RateLimit-Remaining [S], Retry-After [S]

PAGINATION ==>                    #
URL?offset=ID                     #
URL?per_page=NUM                  #Def: 30
Link: <URL?offset=ID&per_page=
 NUM>; rel="next" [S]             #
X-Total-Count: NUM [S]            #

?filters                          #Filtering. Uses an OBJ:
                                  #  - key is 'VARR'
                                  #  - value is OBJ_ARR:
                                  #     - type 'eq|ne'
                                  #     - value VAL
                                  #URL encoded as several ?filters[VARR][][type|value]=VAL

RESP.errors                       #'MESSAGE'_ARR. Defined on every response error.
RESP.code                         #ERROR_NUM

?sort=VAR                         #Def: 'created_at'
?direction=desc|asc               #Def: 'desc'

ERROR STATUS CODES ==>            #4** or 5**
                                  #Common: 400, 403, 404, 408 (too long response), 429


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTHENTICATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTHENTICATION ==>                #Either:
                                  #  - Authorization: token TOKEN [C]
                                  #  - URL?auth_token=TOKEN
                                  #  - HTTP basic authentication with USER@DOMAIN.TLD and PASSWORD
                                  #     - not recommended

TOKEN                             #Generated in UI and is ORGANIZATION|USER-scoped
                                  #Meant for API calls
API_KEY                           #Generated in UI and is PROJECT-scoped
                                  #Meant for error reporting

DELETE
 /organizations/ID/auth_token     #Regenerate ORGANIZATION TOKEN
DELETE /projects/ID/api_key       #Regenerate PROJECT API_KEY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



ORGANIZATION                      #Group of users

GET /user/organizations           #List current user's ORGANIZATIONs
?admin=BOOL                       #If true, filter ORGANIZATION where current user is an admin

GET /organizations/ID             #
POST /organizations/ID            #
PATCH /organizations/ID           #
DELETE /organizations/ID          #

ORGANIZATION.id                   #'ID'
ORGANIZATION.name               CU#STR
ORGANIZATION.slug                 #STR
ORGANIZATION.creator              #USER
ORGANIZATION.billing_emails      U#'EMAIL'_ARR
ORGANIZATION.invoice_address    RU#STR. Address to print on invoices
ORGANIZATION.auto_upgrade        U#BOOL. Automatically upgrade pricing plan when more events.
ORGANIZATION.created_at           #TIMESTAMP
ORGANIZATION.updated_at           #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /projects/ID/collaborators    #
GET /organizations/ID/
 collaborators                    #
?q=STR                            #Filter by USER.name|email

POST /organizations/ID/           #Like POST /organizations/ID/collaborators but for several USERs
 collaborators/bulk_invite        #Request body is OBJ: emails 'EMAIL'_ARR, project_ids ARR, admin BOOL

GET /projects/ID/collaborators/ID #
GET /organizations/ID/
 collaborators/ID                 #
POST /organizations/ID/
 collaborators                    #
PATCH /organizations/ID/
 collaborators/ID                 #
DELETE /organizations/ID/
 collaborators/ID                 #

USER.id                           #'ID'
USER.name                        C#STR
USER.project_ids                CU#PROJECT_ID_ARR
USER.email                       C#'EMAIL'
USER.password                   RC#STR
USER.password_updated_on          #TIMESTAMP
USER.two_factor_enabled           #BOOL
USER.two_factor_enabled_on        #TIMESTAMP
USER.recovery_codes_renaming      #NUM. For 2FA
USER.pending_invitation           #BOOL. Wait for email confirmation
USER.is_admin                   CU#BOOL
                                  #Called 'admin' on POST|PATCH
USER.paid_for                     #BOOL. False if did not pay current month and is locked
USER.show_time_in_utc             #BOOL. Display time in UTC or local
USER.heroku                       #BOOL
USER.last_request_at              #TIMESTAMP
USER.created_at                   #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROJECTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT                           #App|website

GET /organizations/ID/projects    #
?q=STR                            #Search PROJECT.name

GET /projects/ID                  #
POST /projects/ID                 #
PATCH /projects/ID                #
DELETE /projects/ID               #

PROJECT.id                        #'ID'
PROJECT.name                     U#STR
PROJECT.slug                      #STR
PROJECT.api_key                   #'APIKEY'
PROJECT.collaborators_ids       RU#USER_ID_ARR
PROJECT.language                  #STR. Programming language
PROJECT.type                    RC#STR. Programming language or framework
                                  #Among:
                                  #  - js|node|go|java|dotnet|php
                                  #  - android|ios|osx
                                  #  - heroku|wordpress
                                  #  - angular|backbone|bottle|django|ember|eventmachine|express|flask|laravel|rails|react|reactnative|restify|silex|sinatra|symfony|tornado|unity|vue
PROJECT.releases_stages           #'STAGE_ENT'_ARR that have received events.
PROJECT.resolve_on_deploy        U#BOOL. If true, mark ERRORs as fixed after using deploy tracking API to notify a new deploy
                                  #Only if language not 'javascript'
PROJECT.ignore_browser_versions  U#Ignore ERRORs from those browsers. OBJ:
                                  #  - key is 'chrome|ie|firefox|safari|android|uc|opera|opera_mini|samsung|blackberry|sogou|other'
                                  #  - value is NUM (mean <NUM), 'ignore_all' or 'ignore_none'
                                  #Only if language 'javascript'
PROJECT.ignore_old_browsers     CU#BOOL. Ignore ERRORs from old browsers.
PROJECT.url_whitelist            U#'DOMAIN'_ARR. Ignore ERRORs from other domains
PROJECT.discarded_errors         U#ARR of ERROR.name to ignore
PROJECT.global_grouping          U#ARR of ERROR.name to group by 'ERROR_CLASS' instead of by stack location
PROJECT.location_grouping        U#ARR of ERROR.name to group by 'CONTEXT' instead of by stack location
PROJECT.discarded_app_versions   U#ARR of versions to ignore, among 'SEMVER_VERSION_RANGE' or 'TAG'
PROJECT.html_url                  #'https://app.bugsnag.com/ORGANIZATION/PROJECT
PROJECT.open_error_count          #NUM of opened ERROR
PROJECT.collaborators_count       #NUM of USER
PROJECT.custom_event_fields_used  #NUM of CUSTOM_FILTER
PROJECT.is_full_view              #false for endpoints that return fewer PROJECt.* fields
PROJECT.created_at                #TIMESTAMP
PROJECT.updated_at                #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RELEASE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RELEASE                           #App|website release
                                  #Automatically created from looking at all EVENT.app.version

GET /projects/ID/releases         #
?release_stage=STAGE_ENV          #
?base=TIME                        #Filter by RELEASE.release_time

GET /projects/ID/releases/ID      #

RELEASE.id                        #'ID'
RELEASE.project_id                #PROJECT.id
RELEASE.release_source            #Among 'event|session|api|deploy|error|error_incomplete_build|unknown_source'
RELEASE.app_version               #'VERSION'
RELEASE.build_label               #STR. Build number
RELEASE.builder_name              #STR. CI tool
RELEASE.app_version_code          #STR (Android)
RELEASE.app_bundle_version        #STR (iOS)
RELEASE.release_stage.name        #'STAGE_ENV'
RELEASE.metadata                  #Custom OBJ
RELEASE.release_time              #TIMESTAMP

RELEASE.source_control            #SOURCE_CONTROL used
SOURCE_CONTROL.service            #'github|github-enterprise|gitlab|gitlab-onpremise|bitbucket|bitbucket-server'
SOURCE_CONTROL.revision           #'HASH'
SOURCE_CONTROL.commit_url         #'URL'
SOURCE_CONTROL.
 diff_url_to_previous             #'URL'

RELEASE.errors_seen_count         #NUM of ERRORs
RELEASE.errors_introduced_count   #NUM of new ERRORs
RELEASE.total_sessions_count      #NUM of SESSIONs
RELEASE.unhandled_sessions_count  #NUM of SESSIONs with ERRORs
RELEASE.sessions_count_in_last_24h#NUM of SESSIONs in last day


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BUILD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUILD                             #App|website CI build.

POST /                            #ENDPOINT https://build.bugsnag.com
                                  #Response 200 OBJ: status 'ok', warnings STR_ARR

BUILD.apiKey                      #'API_KEY'
BUILD.appVersion
BUILD.builderName
BUILD.appVersionCode
BUILD.appBundleVersion
BUILD.releaseStage
BUILD.metadata                    #Like RELEASE.*
BUILD.source_control              #BUILD_SOURCE_CONTROL
BUILD_SOURCE_CONTROL.provider     #'github|github-enterprise|gitlab|gitlab-onpremise|bitbucket|bitbucket-server'
BUILD_SOURCE_CONTROL.repository   #'URL'
BUILD_SOURCE_CONTROL.revision     #'HASH'

BUILD.autoAssignRelease           #BOOL (def: false). Automatically assign new EVENTs to this BUILD.
                                  #Not recommended


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT                             #Single error being notified

GET /projects/ID/events           #
GET /projects/ID/errors/ID/events #
?base=TIME                        #Filter by EVENT.received_at
?full_reports=BOOL                #Return all EVENT.* fields

GET /errors/ID/latest_event       #
GET /projects/ID/events/ID        #
DELETE /projects/ID/events/ID     #

EVENT.id                          #'ID'
EVENT.error_id                    #ERROR.id
EVENT.exceptions                 C#OBJ_ARR of exception objects:
                                 C#  - message 'ERROR_MESSAGE'
                                 C#  - errorClass 'ERROR_CLASS'. Like ERROR.name in JavaScript
                                 C#  - stacktrace STACKTRACE_ARR: stack trace lines:
                                 C#     - file STR
                                 C#     - method STR: function name
                                 C#     - lineNumber NUM
                                 C#     - columNumber NUM
                                 C#     - code OBJ: code sample. Key is line number, value is source STR
                                 C#     - inProject BOOL: third-party or not
                                 C#     - sourceControlLink 'URL': URL to source code in GitHub/etc.
                                 C#     - sourceControlName 'github|etc.'
                                 C#     - machoUUID STR
                                RC#  - type 'nodejs|browserjs|expojs|android|cocoa'
EVENT.threads                    C#OBJ_ARR of ongoing threads where event happened:
                                 C#  - id NUM
                                 C#  - name STR
                                 C#  - stracktrace STACKTRACE_ARR
                                 C#  - error_reporting_thread BOOL: this thread reported the EVENT
                                  #    Called errorReportingThread on POST
                                RC#  - type 'browserJs|android|cocoa'
EVENT.request                   RC#HTTP request related to the error. OBJ:
                                  #  - httpMethod STR
                                  #  - url STR
                                  #  - headers OBJ
                                  #  - referer STR: Referer [C]
                                  #  - clientIp STR
EVENT.severity                   C#'info|warning|error' (def: 'error')
EVENT.severityReason            RC#OBJ:
                                  #  - type STR among:
                                  #     - 'handledException': normal reporting
                                  #     - 'unhandledException': uncaught exception
                                  #     - 'userCallbackSetSeverity': when we override EVENT.severity ourselves
                                  #     - 'userSpecifiedSeverity'
                                  #     - 'log'
                                  #     (JavaScript only)
                                  #     - 'unhandledPromiseRejection': unhandled promise
                                  #     (Node.js only)
                                  #     - 'callbackErrorIntercept': error inside onError()
                                  #     (PHP only)
                                  #     - 'unhandledError'
                                  #     - 'handledError'
                                  #     (Ruby only)
                                  #     - 'errorClass'
                                  #     (Go only)
                                  #     - 'unhandledPanic'
                                  #     - 'handledPanic'
                                  #     (Python only)
                                  #     - 'userContextSetSeverity'
                                  #     (iOS only)
                                  #     - 'signal'
                                  #     - 'outOfMemory'
                                  #     (Android only)
                                  #     - 'strictMode'
                                  #     - 'anrError'
                                  #  - attributes OBJ:
                                  #     (type 'log')
                                  #     - level STR
                                  #     (PHP only, type 'unhandledError')
                                  #     - errorType STR
                                  #     (Ruby only, type 'errorClass')
                                  #     - errorClass STR
                                  #     (iOS only, type 'signal')
                                  #     - signal STR
                                  #     (Android only, type 'strictMode')
                                  #     - violationType STR
EVENT.unhandled                  C#BOOL. Whether this was an uncaught exception or unhandled promise
EVENT.context                    C#'CONTEXT'. Arbitrary namespace to group EVENTs
EVENT.groupingHash              RC#STR. Group EVENTs with same groupingHash into same ERROR
EVENT.user                      RC#OBJ:
                                  #  - id 'ID'
                                  #  - name STR
                                  #  - email STR
EVENT.app                        C#OBJ:
                                 C#  - id STR: application unique ID
                                 C#  - releaseStage 'STAGE_ENV', e.g. 'production' (def), 'staging|event'
                                 C#  - version|versionCode|bundleVersion: like RELEASE.*
                                 C#  - codeBundleId STR: for CodePush (mobile framework)
                                 C#  - bundleUUUID STR
                                 C#  - dsymUUIDs STR_ARR (LLVM only)
                                 C#  - type STR: custom subpart of the application
                                 C#  - duration NUM: how many milliseconds application ran
                                 C#  - durationInForeground NUM
                                 C#  - inForeground BOOL: whether application was in foreground
                                 C#  - binaryArch 'x86|x86_64|arm32|arm64'
EVENT.device                    RC#OBJ:
                                  #  - id STR
                                  #  - osName STR (e.g. 'android')
                                  #  - osVersion STR
                                  #  - browserName STR (e.g. 'Chrome')
                                  #  - browserVersion STR (e.g. '61.0.3163.100')
                                  #  - freeMemory|totalMemory NUM: RAM in bytes
                                  #  - freeDisk NUM
                                  #  - hostname STR
                                  #  - manufacturer STR (e.g. 'LGE')
                                  #  - model STR (e.g. 'Nexus 6P')
                                  #  - modelNumber STR (e.g. '600')
                                  #  - isDevice BOOL
                                  #  - appOwnership STR (e.g. 'standalone')
                                  #  - jailbroken BOOL: whether mobile device is root
                                  #  - orientation 'portrait|landscape'
                                  #  - time TIMESTAMP
                                  #  - runtimeVersions OBJ:
                                  #     - versions of platforms|libraries.
                                  #     - available keys:
                                  #        - (Android only)
                                  #        - androidApiLevel
                                  #        - (Python only)
                                  #        - python
                                  #        - bottle celery django flask tornado
                                  #        - (iOS only)
                                  #        - swift
                                  #        - clangVersion cocos2dx osBuild
                                  #        - (Ruby only)
                                  #        - ruby
                                  #        - delayedJob eventMachine jruby mailman que rack rails rake resque shoryoken sidekiq sinatra
                                  #        - (.NET only)
                                  #        - dotnet
                                  #        - dotnetClr
                                  #        - (Unity only)
                                  #        - unity
                                  #        - unityScriptingBackend dotnetApiCompatibility dotnetScriptingRuntime
                                  #        - (Expo only)
                                  #        - expoApp expoSdk
                                  #        - (Go only)
                                  #        - go
                                  #        - gin martini negroni revel
                                  #        - (Java only)
                                  #        - javaVersion javaType
                                  #        - springBoot springFramework
                                  #        - (PHP only)
                                  #        - php
                                  #        - laravel lumen magento silex symfony wordpress
                                  #        - (Node.js only)
                                  #        - node
                                  #        - (Reactive native only)
                                  #        - reactNative reactNativeJsEngine
                                  #  (Android only)
                                  #  - cpuAbi ['x86_64']
EVENT._metadata                  C#Custom OBJ. Values are any VAL.
                                 C#Keys decide where to show in UI:
                                 C#  - user|app|device|request: those specific tabs
                                 C#  - any other: custom tab
EVENT.breadcrumbs                C#BREADCRUMB_ARR of previous actions:
                                 C#  - name STR
                                 C#  - timestamp TIMESTAMP
                                 C#  - metadata OBJ: custom
                                 C#  - type:
                                  #     - 'user': user UI action
                                  #     - 'navigation': browsing
                                  #     - 'state': change app state
                                  #     - 'request': network request
                                  #     - 'process': CPU task
                                  #     - 'log': console log
                                  #     - 'error': other error reported
                                  #     - 'manual': custom
EVENT.session                   RC#OBJ:
                                  #  - id STR
                                  #  - startedAt TIMESTAMP
                                  #  - events.[un]handled: NUM of EVENTs
EVENT.is_full_report              #BOOL. Whether all EVENT.* fields are returned
EVENT.received_at                 #TIMESTAMP

POST /                            #ENDPOINT https://notify.bugsnag.com
                                  #Create EVENTs
PAYLOAD.events                    #EVENT_ARR (see above)
PAYLOAD.apiKey                    #'API_KEY'
PAYLOAD.payloadVersion            #'5'.
                                  #Should also use Bugsnag-Payload-Version: 5 [C]
PAYLOAD.notifier                  #SESSION.notifier


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ERROR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ERROR                             #Group of EVENTs

GET /projects/ID/errors           #
?base=TIME                        #Filter by ERROR.last_seen

GET /projects/ID/errors/ID        #
DELETE /projects/ID/errors/ID     #
DELETE /projects/ID/errors        #

PATCH /projects/ID/errors/ID      #
?error_ids=ID_ARR                 #Update several ERRORs

ERROR.id                          #'ID'
ERROR.project_id                  #PROJECT.id
ERROR.events                      #NUM of EVENTs
ERROR.unthrottled_occurence_count #NUM of EVENTs regardless of filtering
ERROR.grouping_reason             #Why EVENTs were grouped:
                                  #  - guessed from stack trace location (def):
                                  #     - 'frame-inner': top stack line
                                  #     - 'js-blob': STACKTRACE.file
                                  #     - 'js-location': STACKTRACE.lineNumber|columnNumber
                                  #     - 'js-tag': <script> tag line
                                  #     - 'js-html': <script> tag
                                  #     - 'js-eval': eval() 'ERROR_CLASS'
                                  #     - 'js-codebase': surrounding code
                                  #  - 'context-inner': 'CONTEXT' when using PROJECT.location_grouping
                                  #  - 'error_class-inner': 'ERROR_CLASS' when using PROJECT.global_grouping
                                  #  - 'user_defined': EVENT.groupingHash
ERROR.grouping_fields             #OBJ:
                                  #  - line_number NUM
                                  #  - error_class 'ERROR_CLASS'
ERROR.assigned_collaborator_id   U#USER.id
ERROR.users                       #NUM of real users affected
ERROR.message                     #'MESSAGE'.
ERROR.error_class                 #'ERROR_CLASS'
ERROR.context                     #'CONTEXT'
ERROR.release_stages              #'STAGE_ENV'_ARR
ERROR.original_severity           #EVENT.severity
ERROR.[overriden_]severity       U#EVENT.severity but can be updated
ERROR.status                      #Among:
                                  #  - 'new': introduced in last 24 hours
                                  #  - 'open'
                                  #  - 'in_progress'
                                  #  - 'for_review': awaiting for triage
                                  #  - 'fixed': ignored until next release
                                  #  - 'snoozed': ignored for an amount of time
                                  #  - 'ignored': always ignored
ERROR.operation                  U#Perform an action among:
                                  #  - 'open|snooze|fix|ignore': set ERROR.status
                                  #  - 'override_severity': set ERROR.severity
                                  #  - 'assign': [un]set ERROR.assigned_collaborator_id
                                  #  - 'create_issue|link_issue|unlink_issue': [un]set ERROR.created_issue
                                  #  - 'delete': delete and do not ignore future ones
                                  #  - 'discard': delete and ignore future ones
ERROR.reopen_rules               U#Automatically update status from 'snoozed' to 'open'. OBJ:
                                  #  - reopen_if 'n_additional_occurrences|n_occurrences_in_m_hours|occurs_after'
                                  #  (if 'n_additional_occurrences')
                                  #  - occurrence_threshold NUM: reopen after reached NUM total EVENTs
                                  #  - additional_occurences NUM: reopen after reached NUM additional EVENTs
                                  #  (if 'n_occurrences_in_m_hours')
                                  #  - hours NUM, occurences NUM2: reopen after NUM2 additional EVENTs during NUM hours
                                  #  (if 'occurs_after')
                                  #  - seconds NUM, reopen_after TIMESTAMP: reopen at TIMESTAMP (or after NUM seconds) if there was any additional EVENT
ERROR.comment_count               #NUM of COMMENTs
ERROR.created_issue               #Support ticket. OBJ:
                                  #  - id 'ID'
                                  #  - url 'URL'
                                  #  - key STR
                                  #  - number NUM
                                  #  - type STR (e.g. 'jira')
ERROR.issue_url                 RU#'URL'
ERROR.verify_issue_url          RU#BOOL. Confirm the issue URL exists.
ERROR.issue_title               RU#STR
ERROR.missing_dsyms               #'UUID'_ARR of missing dSYMs (iOS|macOS only)
ERROR.first_seen|last_seen        #TIMESTAMP
ERROR.first_seen|last_seen
 _unfiltered                      #TIMESTAMP regardless of filtering


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         EVENT_FIELDS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_FIELD                       #Filter or group EVENTs shown in the UI ("custom filter")

GET /projects/ID/event_fields     #

POST /projects/ID/event_fields    #
PATCH /projects/ID/event_fields/ID#
DELETE
 /projects/ID/event_fields/ID     #

EVENT_FIELD.display_id            #STR. Used in UI
EVENT_FIELD.custom                #BOOL. Created by system or user
EVENT_FIELD.reindex_in_progress   #BOOL. Whether is being calculated.
EVENT_FIELD.reindex_percentage    #0-100
EVENT_FIELD.reindex            RCU#BOOL. Whether should recalculate
EVENT_FIELD.path               RCU#'VARR' inside EVENT.*

EVENT_FIELD.filter_options      CU#EVENT_FILTER
EVENT_FILTER.name               CU#STR
EVENT_FILTER.aliases            CU#Alternative names STR_ARR
EVENT_FILTER.description        CU#STR. Used in UI
EVENT_FILTER.values             CU#OBJ_ARR: id 'VAR', name STR
EVENT_FILTER.match_types        CU#ARR of 'eq|ne'
EVENT_FILTER.hint_text          CU#STR shown in popover
EVENT_FILTER.hint_url           CU#'URL' shown in popover


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PIVOTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PIVOT                             #Group EVENTs shown in the "Timeline" UI, for each EVENT_FILTER

GET /projects/ID/pivots           #
GET /projects/ID/errors/ID/pivots #
?pivots=ID_ARR                    #ARR of PIVOT.id
?summary_size                     #NUM (def: 10). Length of PIVOT.summary.list

PIVOT.event_field_display_id      #EVENT_FIELD.display_id

EVENT_FILTER.pivot_options      CU#EVENT_GROUP
PIVOT.name
EVENT_GROUP.name                CU#STR
EVENT_GROUP.fields              CU#OBJ: id 'VARR', name STR
EVENT_GROUP.values              CU#BOOL. Whether to show count of EVENTs or values
PIVOT.summary                     #List of top values OBJ:
                                  #  - list OBJ_ARR: events 'NUM', value STR
                                  #  - no_value NUM
                                  #  - other NUM
EVENT_GROUP.average             CU#BOOL. Whether to show average or total
PIVOT.average                     #Average NUM
EVENT_GROUP.cardinality         CU#BOOL. Whether to remove duplicates
PIVOT.cardinality                 #NUM of unique EVENTs
EVENT_GROUP.summary             CU#BOOL. Whether shown in dashboard summary


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PIVOT VALUE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PIVOT_VALUE                       #Individual value of a PIVOT

GET /projects/ID/pivots
 /EVENT_FIELD.display_id/values   #
?base=TIME                        #Filter by EVENT.received_at

PIVOT_VALUE.event_field_value     #EVENT_FIELD value
PIVOT_VALUE.fields                #OBJ_ARR of EVENT_GROUP.fields
PIVOT_VALUE.events                #NUM of EVENTs
PIVOT_VALUE.proportion            #0-1 percentage of EVENTs matching this EVENT_FIELD
PIVOT_VALUE.first_seen|last_seen  #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TRENDS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /projects/ID/trend            #Returns number of EVENTs grouped by buckets OBJ_ARR:
GET /projects/ID/errors/ID/trend  #  - from|to TIMESTAMP
                                  #  - events_count NUM
?buckets_count=NUM                #Max 50
?resolution=STR                   #By time instead, among '1m|5m|30m|2h|12h'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EVENT DATA REQUEST       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_DATA_REQUEST                #Request raw EVENTs information.
                                  #Done with a long job which eventually gives a download URL.

POST /organizations/ID
 /event_data_requests             #
POST /projects/ID
 /event_data_requests             #
GET /organizations/ID
 /event_data_requests/ID          #
GET /projects/ID
 /event_data_requests/ID          #

EVENT_DATA_REQUEST.id             #'ID'
EVENT_DATA_REQUEST.url            #Download 'URL'
EVENT_DATA_REQUEST.status         #Among:
                                  #  - 'PREPATING'
                                  #  - 'AWAITING_CONFIRMATION'
                                  #  - 'ACCEPTED'
                                  #  - 'IN_PROGRESS'
                                  #  - 'COMPLETED', 'EXPIRED'
EVENT_DATA_REQUEST.filters        #OBJ like ?filters above
EVENT_DATA_REQUEST.report_type    #Among:
                                  #  - 'gdpr': remove some fields
                                  #  - not defined: include all fields
EVENT_DATA_REQUEST.total          #NUM of EVENTs
EVENT_DATA_REQUEST.created_at     #TIMESTAMP
EVENT_DATA_REQUEST.completed_at   #TIMESTAMP
EVENT_DATA_REQUEST.expires_at     #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    EVENT DELETION REQUEST     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_DELETION_REQUEST            #Request raw EVENTs deletion.

POST /projects/ID
 /event_data_deletions            #
POST /projects/ID
 /event_data_deletions/confirm    #
GET /projects/ID
 /event_data_deletions/ID         #

EVENT_DELETION_REQUEST.id         #'ID'
EVENT_DELETION_REQUEST.status     #Among:
                                  #  - 'PREPATING'
                                  #  - 'AWAITING_CONFIRMATION'
                                  #  - 'ACCEPTED'
                                  #  - 'IN_PROGRESS'
                                  #  - 'COMPLETED', 'EXPIRED'
EVENT_DELETION_REQUEST.total      #NUM of EVENTs
EVENT_DELETION_REQUEST.
 skip_confirmation                #BOOL. No confirmation.
EVENT_DELETION_REQUEST.filters    #OBJ like ?filters above
EVENT_DELETION_REQUEST.created_at #TIMESTAMP
EVENT_DELETION_REQUEST.
 completed_at                     #TIMESTAMP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SESSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SESSION                           #User session
                                  #Used to calculate|display per-release stability score
                                  #  - can set thresholds in UI

POST /                            #ENDPOINT is https://sessions.bugsnag.com
                                  #Start several sessions
                                  #Respond with 202 and response OBJ: status 'accepted'

SESSION.sessions                  #OBJ_ARR:
                                  #  - id STR
                                  #  - startedAt TIMESTAMP
                                  #  - user: id STR, name STR, email STR
SESSION.sessionCounts             #Number of sessions started recently. OBJ:
                                  #  - startedAt TIMESTAMP
                                  #  - sessionsStarted NUM
SESSION.notifier                  #User-agent OBJ:
                                  #  - name STR (e.g. 'Bugsnag Ruby')
                                  #  - version STR
                                  #  - url 'URL'
SESSION.app                       #Like EVENT.app, but only type|releaseStage|version|versionCode|bundleVersion|codeBundleId
SESSION.device                    #Like EVENT.device, but only hostname|manufacturer|model|modelNumber|jailbroken|osName|osVersion|userAgent|runtimeVersions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         FEATURE FLAGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FEATURE FLAGS ==>                 #Mark that releases has specific feature flags

CLIENT.addFeatureFlag
 ('NAME', 'VARIANT')              #
CLIENT.addFeatureFlags(OBJ_ARR)   #OBJ: name STR, variant STR
CLIENT.clearFeatureFlag('NAME')   #
CLIENT.clearFeatureFlags()        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          JAVASCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@bugsnag/js                       #BUGSNAG_JS
VERSION ==>                       #7.17.3

BUGSNAG_JS.start(OPTS)->CLIENT    #

OPTS.apiKey                       #'API_KEY'
OPTS.endpoints                    #OBJ. Default value:
                                  #  - notify: 'https://notify.bugsnag.com'
                                  #  - sessions: 'https://sessions.bugsnag.com'

OPTS.appVersion                   #STR. EVENT.app.version
OPTS.appType                      #STR. EVENT.app.type

OPTS.releaseStage                 #'STAGE_ENV' (def: ENVVAR NODE_ENV, or 'development' if windows.location.host is localhost, or 'production')
OPTS.enabledReleaseStages         #'STAGE_ENV'_ARR (def: undefined). Only send EVENT if matching
OPTS.context                      #'CONTEXT' (def: LOCATION.pathname in browsers)
OPTS.metadata                     #OBJ. EVENT._metadata

OPTS.user                         #OBJ (def: none). EVENT.user

OPTS.logger                       #OBJ with debug|info|warn|error(STR) (def: console) called on internal warnings

OPTS.enabledBreadcrumbTypes       #STR_ARR. Allowed BREADCRUMB.type (def: all)
OPTS.maxBreadcrumbs               #NUM (def: 25)
CLIENT.leaveBreadcrumb
 (BREADCRUMB.name
 BREADCRUMB.metadata,
 BREADCRUMB.type)                 #Add a BREADCRUMB

OPTS.onError                      #FUNC(EVENT)[_ARR]->PROMISE[_BOOL]. Called on CLIENT.notify()
                                  #Can modify EVENT
                                  #Return false to skip EVENT
OPTS.onSession                    #Same for SESSION and CLIENT.startSession()
OPTS.onBreadcrumb                 #Same for BREADCRUMB and CLIENT.leaveBreadcrumb()
OPTS.onUncaughtException          #FUNC(ERROR, EVENT)
                                  #Def: process.exit(1) + console.error()
OPTS.onUnhandledRejection         #FUNC(ERROR, EVENT)
                                  #Def: console.error()

OPTS.enabledErrorTypes            #OBJ with values BOOL and key unhandledExceptions|unhandledRejections
                                  #Call CLIENT.notify() on either of them
                                  #Def: both true
OPTS.autoDetectErrors             #BOOL (def: true). Like both OPTS.enabledErrorTypes

OPTS.sendCode                     #BOOL (def: true). Whether to set STACKFRAME.code

OPTS.redactedKeys                 #'VAR'|REGEXP_ARR (def: ['password']) to remove from EVENT.*

OPTS.projectRoot                  #SOURCE_MAP.projectRoot (def: process.cwd()). Also used for STACKFRAME.inProject
                                  #Node.js only
OPTS.hostname                     #STR (def: os.hostname()). EVENT.device.hostname
                                  #Node.js only
OPTS.agent                        #Custom HTTPS AGENT
                                  #Node.js only

OPTS.maxEvents                    #Max NUM EVENTs (def: 10) per browser session
                                  #Browser only
OPTS.generateAnonymousId          #BOOL (def: true)
                                  #Set device.id
                                  #Browser only
OPTS.collectUserIp                #BOOL (def: true).
                                  #Browser only
OPTS.trackInlineScripts           #BOOL (def: true)
                                  #Handle errors in inline <script>
                                  #Browser only

OPTS.plugins                      #PLUGIN_ARR. Basically functions that call FUNC(CLIENT) during CLIENT construction.
                                  #See internal code for how to add plugins

CLIENT.notify                     #Call POST / (ENDPOINT https://notify.bugsnag.com), i.e. create EVENT
 (ERROR|'MESSAGE'[, FUNC]         #Automatically called on uncaught exception, or manually called
 [, FUNC2(ERROR, EVENT)])         #Do add more attributes to EVENT.*, use OPTS.onError
                                  #FUNC is OPTS.onError
                                  #FUNC2 is on completion
                                  #Guesses almost EVENT fields:
                                  #  - exceptions (all fields)
                                  #  - threads: not set at all
                                  #  - request:
                                  #     (browser only)
                                  #     - url LOCATION.href
                                  #     (Express only)
                                  #     - all fields
                                  #  - severity 'error' if unhandled true, 'warning' otherwise
                                  #  - severityReason:
                                  #     - type:
                                  #        - 'unhandledException' if uncaught exception
                                  #        - 'unhandledPromiseRejection' if unhandled rejection
                                  #        - 'userCallbackSetSeverity' if onError() modified EVENT
                                  #        - 'callbackErrorIntercept' if error inside onError()
                                  #        - 'handledException' otherwise
                                  #  - unhandled BOOL
                                  #  - context OPTS.context
                                  #  - groupingHash: not set
                                  #  - user OPTS.user
                                  #  - app:
                                  #     - releaseStage OPTS.releaseStage
                                  #     - version OPTS.appVersion
                                  #     - type OPTS.appType (def: 'browser|node')
                                  #     - duration NUM: since require() time
                                  #  - device:
                                  #     - time
                                  #     (Node.js only)
                                  #     - hostname OPTS.hostname
                                  #     - runtimeVersions.node process.versions.node
                                  #     - osName STR (OS.platform|arch())
                                  #     - osVersion STR (OS.release())
                                  #     - freeMemory NUM (OS.freemem())
                                  #     (mobile|Node.js only)
                                  #     - totalMemory NUM (OS.totalmem())
                                  #     (browser only)
                                  #     - id STR (UUID set using localStorage)
                                  #     - locale NAVIGATOR.browserLanguage|systemLanguage|userLanguage|language
                                  #     - userAgent NAVIGATOR.userAgent
                                  #     (mobile only)
                                  #     - manufacturer|model STR
                                  #     - isDevice BOOL
                                  #     - appOwnership STR
                                  #     - orientation STR
                                  #  - metadata OPTS.metadata
                                  #  - breadcrumbs:
                                  #     (browser only)
                                  #     - automatically create a BREADCRUMB on:
                                  #        - 'user' on WINDOW 'click' event
                                  #        - 'navigation' on WINDOW 'load|DOMContentLoaded|hashchange|pagehide|pageshow' event
                                  #          or HISTORY replaceState|pushState
                                  #        - 'request' on HTTP requests
                                  #        - 'log' on console.*
                                  #        - 'error' on previous CLIENT.notify()
                                  #        - 'state': Bugsnag load
                                  #  - session
                                  #Parse|get ERROR.stack using ERROR-STACK-PARSER or STACK-GENERATOR (from Stacktrace.js)
                                  #Guesses PAYLOAD.notifier

OPTS.autoTrackSessions            #BOOL (def: true). Automatically call startSession() (browser|Express only)
OPTS.sessionSummaryInterval       #NUM of ms for SESSION.sessionCounts (def: 10000)
CLIENT.startSession()             #Start a new SESSION.sessions
                                  #Call POST / (on https://sessions.bugsnag.com)
                                  #Guesses all fields
CLIENT.
 pauseSession|resumeSession()     #Stop EVENTs being attributed to current SESSION

@bugsnag/plugin-express           #Automatically do startSession() on 'request'
Bugsnag.getPlugin('express')      #Automatically do notify() on uncaught exception inside 'request'
 ->OBJ                            #Sets EVENT:
                                  #  - request|metadata:
                                  #     - url
                                  #     - httpMethod|headers: REQ.*
                                  #     - referer: REQ.headers
                                  #     - clientIp: REQ.ip|connection.remoteAddress
                                  #  - metadata:
                                  #     - httpVersion|path|headers|params|query|body|connection: REQ.*
                                  #Set REQ.busgnag CLIENT
OBJ.requestHandler                #MIDDLEWARE for each request
OBJ.errorHandler                  #MIDDLEWARE for error handling at end

AWS LAMBDA ==>                    #There is a AWS Lambda plugin
REACT ==>                         #There is a React client
REACT-NATIVE ==>                  #There is a React-native client
ELECTRON ==>                      #There is an Electron client
VUE ==>                           #There is a Vue client
ANGULAR ==>                       #There is an Angular client
KOA ==>                           #There is a Koa client
RESTIFY ==>                       #There is a Restify client

BUGSNAG-BUILD-REPORTER-NODE       #Node.js/CLI library for POST / https://build.bugsnag.com


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     JAVASCRIPT SOURCE MAP     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOURCE_MAP                        #JavaScript source map

POST /                            #ENDPOINT is https://upload.bugsnag.com
                                  #Empty response 200
                                  #Can also use library bugsnag-source-maps

SOURCE_MAP.apiKey                 #'API_KEY'
SOURCE_MAP.appVersion             #EVENT.notifier.version
SOURCE_MAP.minifiedUrl            #'URL' to minified JavaScript file
SOURCE_MAP.minifiedFile           #Local 'PATH' to minified JavaScript file
SOURCE_MAP.URL                    #'PATH' to non-minified JavaScript file
SOURCE_MAP.sourceMap              #'URL' to source map file
SOURCE_MAP.projectRoot            #'PATH'
SOURCE_MAP.sources                #'PATH'_ARR
