
           
   CODECOV  
           



ALTERNATIVES ==>                  #  - istanbul HTML reporter
                                  #  - codecov (prefered):
                                  #     - more than just LCOV
                                  #     - good CI integration
                                  #     - REST API
                                  #     - badges
                                  #     - notifications
                                  #     - PR comments
                                  #     - GitHub status
                                  #     - config validation
                                  #     - "flags"
                                  #     - free for public repos
                                  #  - coveralls
                                  #     - seems like not so much maintained anymore and losing traction
                                  #     - LCOV-only
                                  #     - good CI integration
                                  #     - REST API
                                  #     - badges
                                  #     - notifications
                                  #     - PR comments
                                  #     - GitHub status (PR only)
                                  #     - free for public repos

GOAL ==>                          #SaaS online code coverage reporting.

CODECOV ENTERPRISE ==>            #On-premise


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Repository-specific:
                                  #  - ROOT/[dev|.github/][**/][.]codecov.yml
                                  #All repositories: in web UI

curl --data-binary @CONF_PATH
 https://codecov.io/validate      #Validate CONF

CONFIDENTIAL VALUES ==>           #Can encrypt them using server-side key from web UI (Settings > YAML)
                                  #then use "secret:ENCRYPTED" in CONF

ENVVAR CODECOV_TOKEN
CONF.codecov.token
-t ACCESS_TOKEN
-t @ACCESS_TOKEN_FILE             #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UPLOADING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CODE COVERAGE UPLOAD ==>          #Supports many code coverage formats, including LCOV
                                  #However should prefer nyc 'json' reporter output (coverage.json)
                                  #Can upload several at times, e.g. through single API request or through running several
                                  #times in single CI job
                                  #Uploads following information:
                                  #  - repository token, slug
                                  #  - Git commit, branch, PR, tag
                                  #  - CI build, job, URL, name
                                  #  - FLAGs
                                  #  - upload name
                                  #  - CONF path
                                  #  - which ENVVARs to show

bash <(curl -s                    #Bash code coverage upload
 https://codecov.io/bash)         #Last commit 2021-03-09
                                  #Can set CLI flags with ENVVAR CODECOV_FLAGS too
-f FILE                           #Code coverage file. Can use 'GLOB' or '!GLOB'
-s DIR                            #Searches for code coverage files in DIR. Project root always included
-R DIR                            #Root project (def: Git root)
-c                                #Clean current code coverage files first
-q FILE                           #Write upload file (for debugging)

codecov                           #Node.js code coverage upload. Fewer features, i.e. prefer Bash


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CI               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CI ==>                            #Automatically use CI ENVVARs to fill in:
                                  #  - repository token, slug
                                  #  - CI build, job, name
                                  #  - Git commit, branch, PR, tag
                                  #  - which ENVVARs to show
CONF.ci                           #'DOMAIN'_ARR for non-supported CI providers

MERGING SEVERAL CI JOBS ==>       #Can be run across several CI jobs: codecov polls CI until done, then merges reports.
SNOTIFY.countdown                 #NUM (def: null). Wait NUM secs before starting polling
SNOTIFY.delay                     #NUM (def: 60). Polling frequency in secs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        FILE SELECTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.[flags.FLAG.]paths|ignore    #'GLOB'_ARR of covered files to include|exclude. Can use **

CONF.flags.FLAG.joined            #BOOL. If false (def: true), do not compare other commits with reports coming from those commits.

CONF.fixes                        #'BEFORE::AFTER'_ARR that transforms:
                                  #  - file paths in code coverage file (BEFORE)
                                  #  - to file paths in covered files (i.e. sources) (AFTER)
                                  #So that source files are shown correctly
                                  #BEFORE can be empty (i.e. "any"). AFTER can be empty.
                                  #Can use globbing

CONF.codecov.branch               #Default LBRANCH (def: 'master') shown in UI
CONF.codecov.strict_yaml_branch   #LBRANCH of the CONF to use (def: current LBRANCH)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        COVERAGE LOGIC         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.coverage.precision           #NUM (def: 2). Rounding precision for coverage percentage
CONF.coverage.round               #'down' (def), 'up' or 'nearest'. Rounding for coverage percentage.
CONF.coverage.range               #STR (def: '70...90'). Range of red..green colors.

CONF.coverage.parsers             #PARSERS
PARSERS.gcov.branch_detection     #BRANCH_DETECTION
PARSERS.javascript.enable_partials#BOOL (def: false). Branch-level instead of only line-level coverage.
                                  #Only works with JSON reporter, not LCOV
BRANCH_DETECTION.conditional      #BOOL (def: true)
BRANCH_DETECTION.loop             #BOOL (def: true)
BRANCH_DETECTION.method           #BOOL (def: false)
BRANCH_DETECTION.macro            #BOOL (def: false)

DIFF/COMPARE ==>                  #Available in web UI

CHROME EXTENSION ==>              #Allows seeing code coverage from GitHub


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR CODECOV_NAME
-n NAME                           #Upload name

ENVVAR CODECOV_ENV
-e ENVVAR,...                     #Show these ENVVARs in web UI
-B LBRANCH                        #Git branch
-C COMMIT                         #Git commit
-N PARENT_COMMIT                  #Git parent commit (def: guessed)
-T TAG                            #Git tag
-P PR_NUM                         #
-b CI_JOB_NUM                     #
-X recursesubs                    #Allow git submodules


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FLAGS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-F 'FLAG,...'                     #Tag report with a specific "flag". Used in UI as filters.
                                  #E.g. different environment, type of testing, etc.
                                  #FLAG must be only a-zA-Z0-9_
CONF.flags.FLAG.branches          #LBRANCH_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NOTIFICATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-Z                                #Exit code 1 if failure

CONF.codecov.notify               #SNOTIFY
SNOTIFY.require_ci_to_pass        #BOOL (def: true)
                                  #Do not notify if CI failed
SNOTIFY.after_n_builds            #NUM. Wait for NUM builds before notifying. Only if SNOTIFY.require_ci_to_pass false

CONF.coverage.notify              #NOTIFY
NOTIFY.TYPE.NAME                  #TYPE_NOTIFY
TYPE_NOTIFY.threshold             #0-100 (def: any), min decrease|increase to notify
TYPE_NOTIFY.message               #STR (def: "Coverage {{changed}} for {{owner}}/{{repo}}")
TYPE_NOTIFY.only_pulls            #BOOL (def: false). Only for PRs
TYPE_NOTIFY.branches              #LBRANCH[_REGEXP][_ARR] (def: '*')
TYPE_NOTIFY.flags                 #Only on following 'FLAG'[_ARR]
TYPE_NOTIFY.paths                 #Whitelists|blacklists 'GLOB'_ARR of covered files. Can use '!GLOB'
TYPE_NOTIFY.layout                #'PART,...' (def: 'reach, diff') to show in comment:
                                  #  - reach: graph
                                  #  - diff: text diff
                                  #  - flags: flags differences
                                  #  - files: files differences

WEBHOOKS_NOTIFY.url               #HTTP POST
GITTER_NOTIFY.url                 #'URL'
SLACK_NOTIFY.url                  #'URL'
EMAIL_NOTIFY.to                   #'EMAIL_ADDRESS'[_ARR]. Does not seem to work.
NOTIFY.irc|hipchat                #Others


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PR COMMENTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.comment                      #PR comments
CONF.comment false                #Disable PR comments (def: true)
CONF.comment.behavior             #STR:
                                  #  - default (def): updates single comment, recreates it if deleted
                                  #  - once: updates single comment
                                  #  - new: recreates new comment always
                                  #  - spammy: new comment each time
CONF.comment.require_changes      #BOOL (def: false). Only update PR comment when coverage changes
CONF.comment.require_base         #BOOL (def: false)
CONF.comment.require_head         #BOOL (def: true)
CONF.comment.branches|layout      #Like TYPE_NOTIFY.*

TEAM BOT ==>                      #Alternative to using the GitHub integration (prefered) for PR comments.
                                  #GitHub user created for sole purpose of this
CONF.codecov.bot                  #The GitHub user name


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMMIT STATUS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.coverage.status              #STATUS. Commit status
STATUS.TYPE                       #TYPE_STATUS. TYPE can be:
                                  #  - project: whole code
                                  #  - patch: only lines updated by PR|commit
                                  #  - changes: only lines not updated by PR|commit
                                  #By default project|patch are enabled, changes is not
TYPE_STATUS.NAME                  #STATUS_SETTINGS
                                  #Each STATUS_SETTINGS shows a different PR status
TYPE_STATUS.default               #Default STATUS_SETTINGS
STATUS_SETTINGS false             #Disables

STATUS_SETTINGS.target            #'NUM%' to use as a base coverage.
                                  #Def: 'auto', i.e. use base commit
STATUS_SETTINGS.threshold         #Minimum 'NUM%' decrease (def: 0) to allow from base coverage
STATUS_SETTINGS.base              #Compare against:
                                  #  - 'auto' (def): 'pr' if PR, 'parent' otherwise
                                  #  - 'pr': PR base
                                  #  - 'parent': parent commit
STATUS_SETTINGS.if_no_uploads     #'error' (def) or 'success'
STATUS_SETTINGS.if_not_found      #'error' or 'success' (def)
STATUS_SETTINGS.if_ci_failed      #'error' (def) or 'success'
STATUS_SETTINGS.
 only_pulls|paths|branches|flags  #Like TYPE_NOTIFY.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST API ==>                      #https://codecov.io/api/gh/USER/REPO
                                  #Authorization:
                                  #  - ?access_token=ACCESS_TOKEN
                                  #Resources:
                                  #  - Teams
                                  #     - Users
                                  #  - Repositories:
                                  #     - Branches|PR
                                  #        - Commits
                                  #  - Code coverage upload
                                  #  - SVG graphs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BADGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BADGES ==>                        #Either:
                                  #  - https://codecov.io/gh/USER/REPO/branch/LBRANCH/graph/badge.svg
                                  #  - https://img.shields.io/covecov/c/github/USER/REPO[/LBRANCH].svg
                                  #Should link to https://codecov.io/gh/USER/REPO[branch/LBRANCH]

SVG GRAPHS ==>                    #Can get public URLs from web UI or REST API


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         GITHUB ACTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


codecov/codecov-action            #3.1.0
                                  #Downloads https://codecov.io/bash then execute it
                                  #Uses ./codecov.yml
with.token                        #-t ACCESS_TOKEN (required for private repos)
with.file                         #-f FILE
with.files                        #-f FILE,...
with.directory                    #-s DIR
with.working-directory            #cwd
with.path_to_write_report         #-q FILE
with.flags                        #-F 'FLAG,...'
with.name                         #-n NAME
with.dry-run                      #-d (dry run)
with.fail_ci_if_error             #BOOL (def: false). -Z
with.env_vars                     #-e ENVVAR,...
with.verbose                      #BOOL. -v
with.move_coverage_to_trash       #-c
with.commit_parent                #-N PARENT_COMMIT
with.root_dir                     #-N DIR
with.aws_curl_args                #-A ARGS
with.codecov_curl_args            #-U ARGS
with.functionalities              #-X STR,...
with.override*                    #
