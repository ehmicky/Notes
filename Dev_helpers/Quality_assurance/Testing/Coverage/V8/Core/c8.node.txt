
      
   C8  
      



ALTERNATIVES ==>                  #  - c8 (prefered): run it with NODE_V8_COVERAGE
                                  #  - eywek v8-coverage:
                                  #     - run it using INSPECTOR core module
                                  #     - does almost same otherwise

VERSION ==>                       #7.2.0

CONFIG ==>                        #Either:
                                  #  - CLI --OPT
                                  #  - PACKAGE.c8 OBJ
                                  #  - [.../].c8rc[.json]

/* c8 ignore start|stop */        #Comment to disable
                                  #Must use /* */ not //
/* c8 ignore next [NUM] */        #Comment to disable next line|branch

c8 ...                            #Do:
                                  #  - create v8 coverage files by running Node with ENVVAR NODE_V8_COVERAGE
                                  #  - merge all v8 coverage files
                                  #  - convert to ISTANBUL_FILECOV (with V8-TO-ISTANBUL)
                                  #     - translate positions using source maps
                                  #  - convert to ISTANBUL_COVEMAP (with ISTANBUL-LIB-COVERAGE)
                                  #  - run reporters (with ISTANBUL-LIB-REPORT)
                                  #  - check coverage

CONF ==>                          #Can be:
                                  #  - [.../].c8rc|.nycrc[.json]
                                  #  - --config|-c 'JSON_FILE'
                                  #  - PACKAGE.c8 OBJ
                                  #  - CLI flags
                                  #Case is dasherized in both JSON file and CLI flags

--reporter|r 'FORMAT'
--report[s]-dir|o 'DIR'
--exclude|x 'GLOB'
--include|n 'GLOB'
--exclude-node-modules
--exclude-after-remap
--extension|e '.EXT'
--extends 'PATH.json'
--skip-full
--all                             #Like nyc|Istanbul, including defaults
--src                             #Source directory. Can be several times. Def: current directory
--allow-external                  #Allow files outsides source directories (def: false)

--temp-directory PATH             #Def: --report-dir
--[no-]clean                      #BOOL (def: true). Remove temp-directory after run.
--resolve DIR                     #Base directory for files
--[no-]omit-relative              #Def: true

--check-coverage                  #Exit code 1 if fails. Does report too.
--branches|functions|lines|
 statements NUM                   #
--100                             #Same as --branches|functions|lines|statements 100
--per-file                        #Def: false

--wrapper-length NUM              #Size of header injected by either require() (62, def) or import() (0)
                                  #Used to shift position offsets

c8 report                         #Same but without running and instrumenting Node.js first

c8 check-coverage                 #Report + check-coverage.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        V8-TO-ISTANBUL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #9.0.1
                                  #Convert V8 FILECOV file to Istanbul FILECOV
                                  #Adds line-wise coverage (V8 otherwise is only branch-wise and file-wise)

V8-TO-ISTANBUL('./SOURCE_FILE.js' #NUM is --wrapper-length
 [, NUM][, OPTS]                  #Apply source maps if available, either inline or external source map:
 [, FUNC(PATH)->BOOL])->CSCRIPT   #OPTS
                                  #  - source STR, originalSource STR, sourceMap.sourcemap SOURCEMAP: otherwise, use fs.readFileSync()
                                  #FUNC(): if false, ignore file
CSCRIPT.load()->PROMISE           #Must be done before applyCoverage()
CSCRIPT.applyCoverage(V8_FILECOV) #
CSCRIPT.toIstanbul()
 ->ISTANBUL_FILECOV               #
CSCRIPT.destroy()                 #Removes WASM-related data
