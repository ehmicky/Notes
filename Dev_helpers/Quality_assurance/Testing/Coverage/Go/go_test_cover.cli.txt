
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   GO_TEST_COVER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See Go language
RELATED DOCUMENTATION ==>         #See Go language

TESTING ==>                       #See go_test documentation

                                  ┌────────────┐
                                  │   FORMAT   │
                                  └────────────┘

PATH.out                          #First line is:
                                  #  mode: set|count|atomic
                                  #Then each line describes a block|FUNC branch:
                                  #  MODULE_PATH/FILENAME.go:START_LINE.START_COL,END_LINE.END_COL NUM NUM2
                                  #    NUM is number of statements
                                  #    NUM2 is number of hits (max 1 if mode "set")

                                  ┌──────────┐
                                  │   CORE   │
                                  └──────────┘

go test
-cover                            #Enables test coverage
                                  #Instrument source code to add counting statements to do it.
                                  #Only instruments in-between lines, i.e. does not separate single-line statements like FUNC() && FUNC2()
                                  #Show summary test coverage percentage in output.
-coverpkg IMPORT_PATHS            #Limit test coverage to those PACKAGEs (def: all)
-covermode STR                    #How lines are counted in test coverage:
                                  #  - "set" (def): only keeps track on wheter line was hit
                                  #  - "count": also keeps track of how many times line was hit
                                  #  - "atomic" (def if -race): like "count" but works in parallel tests. Slower
                                  #Implies -cover
-coverprofile PATH.out            #Write test coverage file

testing.CoverMode()->STR          #Returns "" if -cover not set
testing.Coverage()->FLOAT64       #Current coverage percentage. 0 if -cover not set

                                  ┌────────────┐
                                  │   REPORT   │
                                  └────────────┘

go tool cover                     #Report detailed test coverage from PATH.out
-func PATH.out                    #Report as text
-html PATH.out                    #Report as HTML
-o PATH                           #Def: stdout with -func, opening browser with -html

                                  ┌────────────────┐
                                  │   INSTRUMENT   │
                                  └────────────────┘

go tool cover -mode=STR FILE.go   #Instruments source code
                                  #Used by go test -cover, i.e. useful for debugging
                                  #STR is -covermode
-var VAR                          #Instrumentation variable name (def: "GoCover")
