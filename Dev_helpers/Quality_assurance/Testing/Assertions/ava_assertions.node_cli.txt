
                  
   AVA_ASSERTIONS  
                  



ALTERNATIVES ==>                  #See chai doc

VERSION ==>                       #Part of Ava (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXCEPTIONS ==>                    #Assertions only report: they do not throw (i.e. control flow continues)
                                  #However following exceptions are handled silently, i.e. it's just like if assertions were throwing

CONF.failWithoutAssertions        #BOOL (def: true): fail tests with no assertions

OTHER ASSERTION LIBRARY ==>       #Can use other assertion library (e.g. core Node.js assert)
                                  #However CONF.failWithoutAssertions must be false

TEST.*(..., 'ASSERT_TITLE')       #For any assertion.
 ->BOOL                           #Def 'ASSERT_TITLE': none
                                  #Is printed to console by default reporter
                                  #BOOL is whether passed, which can be used as TypeScript type guard

TEST.*.skip(...)                  #For any assertion, skip it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENHANCEMENTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.compileEnhancements          #BOOL (def: true).
                                  #Automatically uses POWER-ASSERT (see its doc) with TEST.assert()
                                  #Only with built-in assertion library
                                  #TEST must be named t

STACK TRACES ==>                  #Stack trace are automatically cleaned (using both CLEAN-STACK and STACK-UTILS.clean(), see their doc)
                                  #Also source maps are handled (using NODE-SOURCE-MAP-SUPPORT.install(), see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DRY RUN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



TEST.try(['TRY_TITLE', ]
 FUNC(TEST2, ARGS...)[_ARR],
 ARGS...)->PROMISE_ATTEMPT[_ARR]  #Dry run all assertions inside FUNC()
ATTEMPT.commit([OPTS])            #Perform the assertions (no dry run)
                                  #OPTS:
                                  #  - retainLogs BOOL (def: true): whether to print logs
ATTEMPT.discard([OPTS])           #Discard the ATTEMPT (i.e. was only dry run)
                                  #OPTS: retainLogs BOOL (def: false)
ATTEMPT.title                     #'TRY_TITLE'
ATTEMPT.passed                    #BOOL
ATTEMPT.errors                    #ERROR_ARR
ATTEMPT.logs                      #STR_ARR. Assertions output.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.pass()                       #
TEST.fail()                       #

TEST.is|not(VAL, VAL2)            #Object.is()
TEST.[not]deepEqual(VAL, VAL2)    #Deep ==
TEST.like(VAL, VAL2)              #Deep == or is subset


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.truthy|falsy(VAL)            #== true|false
TEST.true|false(VAL)              #=== true|false
TEST.assert(VAL)                  #== true


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.[not]regex(STR, REGEXP)      #REGEXP.test()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.throws(FUNC[, OBJ])->ERROR   #FUNC() throws or rejects an ERROR matching OBJ:
                                  #  - instanceOf TYPE
                                  #  - name STR: ERROR.name
                                  #  - message STR|REGEXP|FUNC(STR)->BOOL: ERROR.message
                                  #  - is ERROR
                                  #  - code STR|NUM (ERROR.code)
TEST.notThrows(FUNC)              #FUNC() does not throw nor reject

TEST.throwsAsync
 (ASYNC_FUNC|PROMISE[, VAL])
 ->PROMISE2_ERROR                 #Must await return value
TEST.notThrowsAsync
 (ASYNC_FUNC|PROMISE)
 ->PROMISE2_ERROR                 #Must await return value
