
                   
   JEST ASSERTIONS  
                   



ALTERNATIVES ==>                                #See chai

VERSION ==>                                     #Part of Jest monorepo (see its doc), package 'expect'
                                                #Generic assertions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.toBe(VAL2)                               #Object.is()
EXPECT.toStrictEqual(VAL2)                      #=== VAL2
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeInstanceOf(TYPE)                     #instanceof TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NULL|UNDEFINED         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_BOOL.toBeTruthy|Falsy()                  #== true|false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_NUM.toBeNaN()                            #Object.is(NaN)

EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)   #< > <= >= NUM
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])             #== Math.round(NUM, NUM2)
                                                #Def NUM2: 2

EXPECT_BIGINT.*                                 #Like EXPECT_NUM.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring
EXPECT_STR.toHaveLength(NUM)                    #STR.length === 0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARRAY|OBJECT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_ARR.toContain(VAL)                       #Any ARR element.toBe(VAL)
EXPECT_ARR.toContainEqual(VAL)                  #Any ARR element.toEqual(VAL)
EXPECT_ARR.toHaveLength(NUM)                    #ARR.length === 0

EXPECT_OBJ.toHaveProperty                       #OBJ.VARR !== undefined
 ('VARR'|'VAR'_ARR[, VAL])                      #If VAL, OBJ.VARR.toEqual(VAL)
EXPECT_OBJ|ARR.toMatchObject(OBJ2|ARR2)         #OBJ2|ARR2 is a subset of OBJ|ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_FUNC.toThrow([TYPE], [STR|REGEXP])       #Def TYPE is Error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROMISE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_PROMISE.resolves|rejects.*(...)          #PROMISE should be resolved|rejected
 ->PROMISE2                                     #The resolved|rejected value should EXPECT(VAL).*(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEEP ASSERTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEEP ASSERTIONS ==>                             #Assertions that can either be used:
                                                #  - top-level, e.g. EXPECT.toEqual(expect.any(TYPE))
                                                #  - nested level, e.g. EXPECT.toEqual({ ..., VAR: expect.any(TYPE) })

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
                                                #Can also do the reverse (i.e. assymetricMatch(...) on the expected value) but not both.

EXPECT.toEqual(expect.anything())               #!== undefined|null
EXPECT.toEqual(expect.any(TYPE))                #instanceof TYPE

EXPECT_STR.toEqual
 (expect.stringMatching(REGEXP|'REGEXP'))       #REGEXP.test(STR)
EXPECT_STR.toEqual
 (expect.stringContaining(STR))                 #Is substring

EXPECT_NUM.toEqual(expect.closeTo(...))         #Like EXPECT_NUM.toBeCloseTo()

EXPECT_ARR.toEqual(expect.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.

EXPCT_OBJ.toEqual(expect.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())
EXPECT_OBJ|ARR.toEqual(expect.[not]empty())     #=== {}|[]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PLAN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect.assertions(NUM)                          #Exactly NUM EXPECT.*() (except EXCEPT.[has]assertions()) are called in current
                                                #test (including before|afterEach())
expect.hasAssertions()                          #Same for more than 0 EXPECT.*()

BABEL-JEST-ASSERTIONS ==>                      ##Babel plugin that adds expect.assertions|hasAssertions() to every test


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



JEST-DOM ==>                                   ##1.0.0

EXPECT_ELEM.toBeInDOM()                        ##Check ELEM !== undefined
EXPECT_ELEM.toHaveTextContent(STR)             ##
EXPECT_ELEM.toHaveAttribute('ATTR')            ##
EXPECT_ELEM.toHaveClass('CLASS')               ##


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect.extend({                                 #Add custom expect(VAL).FUNC(...)
  FUNC(VAL, ...)->[PROMISE_]OBJ,                #OBJ:
  ...                                           #  - pass BOOL
})                                              #  - message()->'ERROR'
                                                #     - should be set even if pass true, but with negative error message (for not.FUNC(...))
                                                #`this`:
                                                #  - isNot BOOL ("not.FUNC(...)")
                                                #  - equals(VAL, VAL2): like toEqual()
                                                #  - expand BOOL: whether --expand was used
                                                #  - utils JEST_UTIL (package jest-matcher-utils)
                                                #FUNC can be async

JEST_UTIL.matcherHint('FUNC', VAL, VAL2[, OPTS])#Returns 'expect(VAL).FUNC(VAL2)' in red|green colors
 ->STR                                          #OPTS:
                                                #  - isNot BOOL (def: false): 'expect(VAL).not.FUNC(VAL2)'
                                                #  - isDirectExpectCall (def: false): 'expect.FUNC(VAL2)'
                                                #  - secondArgument STR: 'expect(VAL).FUNC(VAL2, STR)'
                                                #  - comment STR: 'expect(VAL).FUNC(VAL2) // STR'
                                                #  - expectedColor|receivedColor|secondArgumentColor CHALK (def: CHALK.green|red|green)
JEST_UTIL.printWithType(STR, VAL[, FUNC])->STR  #Returns 'STR:\nTYPE: VAL'
                                                #FUNC is serializer (def: returns as is)
JEST_UTIL.stringify(VAL[, NUM])->STR            #Calls PRETTY-FORMAT(VAL) (see its doc)
                                                #NUM is maxDepth (def: 10)
JEST_UTIL.printExpected|Received(VAL)->STR      #Same but:
                                                #  - in green|red
                                                #  - highlights trailing whitespaces

JEST_UTIL.pluralize(STR, NUM)->STR              #Prepend NUM as English word, and append "s" (unless 1)

JEST_UTIL.ensureActualIsNumber(VAL[, 'FUNC'])   #Asserts VAL is a NUM, with nice error message
JEST_UTIL.ensureExpectedIsNumber(VAL[, 'FUNC']) #Same but with error message for expected VAL
JEST_UTIL.ensureNumber(VAL, VAL2[, 'FUNC'])     #ensureExpectedIsNumber() + ensureActualIsNumber()
JEST_UTIL.ensureNoExpected(VAL[, 'FUNC'])       #Asserts VAL === undefined, with nice error message

JEST_UTIL.isError(ERROR)->BOOL                  #

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual() (including using deep assertions)
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()
