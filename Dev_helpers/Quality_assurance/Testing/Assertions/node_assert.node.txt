
                                  ┏━━━━━━━━━━━━━━━━━┓
                                  ┃   NODE_ASSERT   ┃
                                  ┗━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See chai

VERSION ==>                       #Part of Node.js core

                                  ┌──────────┐
                                  │   BASE   │
                                  └──────────┘

T.assert.*                20.16.0*#Same as ASSERT.* except works with T.plan(NUM)

ASSERT                            #Throws ERROR or ASSERTIONERROR with message 'MESSAGE' if fails.
ASSERT.*(..., 'MESSAGE'|ERROR)    #Can be always passed as last argument (except ifError()). Def:
                                  #  - [not]equal|ok(): 'VAL ==|!= VAL2'
                                  #  - [not]DeepEqual(): 'VAL [not]DeepEqual VAL2'
                                  #  - fail(): 'Failed'
                                  #  - strictEqual(): diff
                                  #  - others: sentence

ASSERTIONERROR.actual|expected    #VAL
                                  #With *equal|ok|ifError()
                                  #Does a colored diff
                                  #Only actual with *throws|*rejects()
ASSERTIONERROR.operator           #'==' (equal|ok()) or '!=' (notEqual()), 'fail' (fail()),
                                  #'throw|doesNotThrow|reject|doesNotReject', 'FUNC' (others)

ASSERT.strict.*(...)              #Same as ASSERT.*(...) except:
                                  #  - use === instead of ==
                                  #  - when arguments are OBJ, prints an OBJ diff instead of showing them in full
require('assert/strict')   15.0.0*#Same as ASSERT.strict

                                  ┌─────────────┐
                                  │   GENERIC   │
                                  └─────────────┘

ASSERT.fail()                     #Always fails

ASSERT.[not]equal(VAL, VAL2)      #VAL == VAL2
                               14*#or both NaN
ASSERT.[not]strictEqual
 (VAL, VAL2)                      #Object.is(VAL, VAL2)
ASSERT.[not]deepStrictEqual
 (VAL, VAL2)                      #UTIL.isDeepStrictEqual()

                                  ┌──────────┐
                                  │   NULL   │
                                  └──────────┘

ASSERT.ifError(VAL)               #VAL === null

                                  ┌─────────────┐
                                  │   BOOLEAN   │
                                  └─────────────┘

ASSERT[.ok](VAL)                  #VAL === true

                                  ┌────────────┐
                                  │   STRING   │
                                  └────────────┘

ASSERT.[doesNot]match
 (STR, REGEXP)                    #REGEXP.test(STR)

                                  ┌──────────────┐
                                  │   FUNCTION   │
                                  └──────────────┘

ASSERT.throws|doesNotThrow        #Function throws
 (FUNC()[, VAL])                  #VAL can be:
                                  #  - TYPE|ERROR: instanceof
                                  #  - FUNC(ERROR)->BOOL
                                  #  - REGEXP: against ERROR.message
                                  #  - OBJ: deep ==

                                  ┌─────────────┐
                                  │   PROMISE   │
                                  └─────────────┘

ASSERT.rejects|doesNotReject      #PROMISE rejection
 (PROMISE[()][, VAL])->PROMISE2   #Fails if FUNC()->PROMISE throws before returning the PROMISE
                                  #Fails if not using a PROMISE[()]
                                  #PROMISE2 is resolved if test passed
