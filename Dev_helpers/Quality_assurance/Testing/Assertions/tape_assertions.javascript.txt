
                   
   TAPE_ASSERTIONS  
                   



ALTERNATIVES ==>                  #See chai doc

VERSION ==>                       #Part of Tape (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXCEPTIONS ==>                    #Assertions only report: they do not throw (i.e. control flow continues)
                                  #This helps reporting several failed assertions per test
                                  #However this means following assertions might crash (and exceptions are not handled)

TEST.*(...[, 'ASSERT_TITLE'])     #All assertions can specify ASSERT_TITLE as last argument. Def:
                                  #  - TEST.fail|pass|skip(): '(unnamed assert)'
                                  #  - TEST.error(): ERROR.message
                                  #  - others: 'should be ...'

TOPTS.objectPrintDepth            #NUM (def: 5)
                                  #When stringifying assertions' expected|actual VAL
NODE_TAPE_OBJECT_PRINT_DEPTH      #Same as ENVVAR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.fail()                       #
TEST.pass()                       #

TEST.equal(VAL, VAL2)             #Object.is()
                                  #Aliases: TEST.equals|isEqual|is|strictEqual[s]()
TEST.notEqual(VAL, VAL2)          #!Object.is()
                                  #Aliases: TEST.notEquals|isNotEqual|doesNotEqual|isInequal|isNot|not|notStrictEqual[s]()
TEST.looseEqual(VAL, VAL2)        #==
                                  #Aliases: TEST.looseEquals()
TEST.notLooseEqual(VAL, VAL2)     #!=
                                  #Aliases: TEST.notLooseEquals()
TEST.deepEqual(VAL, VAL2)         #Deep ===
                                  #Aliases: TEST.deepEquals|isEquivalent|same()
TEST.notDeepEqual(VAL, VAL2)      #Deep !==
                                  #Aliases: TEST.notDeepEquals|[is]notEquivalent|[is]notDeeply|notSame|isNotDeepEqual|isInequivalent()
TEST.deepLooseEqual(VAL, VAL2)    #Deep ==
                                  #Aliases: TEST.looseEqual[s]()
TEST.notDeepLooseEqual(VAL, VAL2) #Deep !=
                                  #Aliases: TEST.notLooseEqual[s]()

TEST.error(ERROR)                 #== false (i.e. undefined)
                                  #Aliases: TEST.ifErr[or]()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.ok(VAL)                      #== true
                                  #Aliases: TEST.true|assert()
TEST.notOk(VAL)                   #== false
                                  #Aliases: TEST.false()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.match|doesNotMatch
 (STR, REGEXP)                    #REGEXP.test(STR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.throws(FUNC[, REGEXP|TYPE])  #FUNC() throws
                                  #ERROR.message matches REGEXP or ERROR instanceof TYPE
TEST.doesNotThrow
 (FUNC[, REGEXP|TYPE])            #Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CUSTOM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.assertion(FUNC(...), ...)    #Calls FUNC.call(TEST, ...)
