
                   
   DENO_ASSERTIONS  
                   



ALTERNATIVES ==>                  #See chai doc

VERSION ==>                       #Part of Deno
                                  #Browser compatible


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/assertion_error.ts    #
AssertionError                    #Same as Error. Used by assert*()
                                  #assert*() does not add ERROR.* properties, it modifies ERROR.message|stack instead

assert*(..., 'MESSAGE')           #Appends a custom error message
                                  #Including assertSnapshot()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/fail.ts               #
fail(['MESSAGE'])                 #Always fail

std/asserts/unimplemented.ts      #
unimplemented(['MESSAGE'])        #Same but prefixes 'Unimplemented' to MESSAGE. Meant for stubs

std/asserts/unreachable.ts        #
unreachable(['MESSAGE'])          #Same but meant for unreachable code

std/asserts/
 assert_[not_]strict_equals.ts    #
assert[Not]StrictEquals(VAL, VAL2)#Object.is()

std/asserts/assert_[not_]equals.ts#
assert[Not]Equals(VAL, VAL2)      #Object.is(), but deep over OBJ|ARR:
std/asserts/equal.ts              #  - Including SYMs, but not inherited|non-enumerable props
equal(VAL, VAL2)->BOOL            #  - Must have same keys
                                  #  - Handles cycles
                                  #Works with REGEXP|URL|DATE

std/asserts/
 assert_less|greater[_or_equal].ts#< <= > >=

std/asserts/
 assert_[not_]instance_of.ts      #
assert[Not]InstanceOf(VAL, TYPE)  #VAL instanceof TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NULL|UNDEFINED         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/assert_exists.ts      #
assertExists(VAL)                 #== null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/assert[_false].ts     #
assert[False](BOOL)               #== true|false
                                  #Is a TypeScript type guard


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/
 assert_almost_equals.ts          #
assertAlmostEquals
 (NUM, NUM2[, NUM3])              #Object.is() but within NUM3 (def: 1e-7) diff for rounding error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/
 assert_string_includes.ts        #
assertStringIncludes(STR, STR2)   #STR.includes(STR2)

std/asserts/assert_[not_]match.ts #
assert[Not]Match(STR, REGEXP)     #REGEXP.test(STR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARRAY|OBJECT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/assert_object_match.ts#
assertObjectMatch(OBJ, OBJ2)      #Has same keys, deeply over OBJ|ARR|MAP|SET

std/asserts/
 assert_array_includes.ts         #
assertArrayIncludes(ARR, ARR2)    #ARR.includes(each VAL is equal())


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/asserts/assert_is_error.ts    #
assertIsError
 (VAL[, ERROR_CLASS               #VAL instanceof ERROR_CLASS (def: Error)
 [, 'MESSAGE'|REGEXP]])           #If 'MESSAGE', ERROR.message must include it

std/asserts/assert_throws.ts      #
assertThrows(FUNC()[, ...])
 ->ERROR                          #... is same as assertIsError(VAL, ...)

std/asserts/assert_rejects.ts     #
assertRejects(FUNC()->>[, ...])
 ->>ERROR                         #Same but async


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           JEST-LIKE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/expect/expect.ts              #As above, but using Jest API
expect(..., 'MESSAGE')            #Append a custom error message

expect(VAL)
EXPECT.not...
EXPECT.toBe(VAL2)
EXPECT.toStrictEqual(VAL2)
EXPECT.toEqual(VAL2)
EXPECT.toBeInstanceOf(TYPE)
EXPECT.toBeDefined|Undefined()
EXPECT.toBeNull()
EXPECT_BOOL.toBeTruthy|Falsy()
EXPECT_NUM.toBeNaN()
EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])
EXPECT_STR.toMatch(REGEXP)
EXPECT_STR.toContain(STR2)
EXPECT_STR.toHaveLength(NUM)
EXPECT_ARR.toContain(VAL)
EXPECT_ARR.toContainEqual(VAL)
EXPECT_ARR.toHaveLength(NUM)
EXPECT_OBJ.toHaveProperty('VARR'|'VAR'_ARR[, VAL])
EXPECT_OBJ|ARR.toMatchObject(OBJ2|ARR2)
EXPECT_FUNC.toThrow([Error|ERROR|STR|REGEXP])
EXPECT_PROMISE.resolves|rejects.*(...)->>
EXPECT.toEqual(expect.anything())
EXPECT.toEqual(expect.any(TYPE))
EXPECT_STR.toEqual(expect.stringMatching(REGEXP|'REGEXP'))
EXPECT_STR.toEqual(expect.stringContaining(STR))
EXPECT_NUM.toEqual(expect.closeTo(...))
EXPECT_ARR.toEqual(expect.arrayContaining(ARR2))
EXPECT.addEqualityTesters(FUNC_ARR)
expect.extend({
  FUNC(VAL, ...)->[>]OBJ,
  ...
})                                #Like Jest

EXPECT_BIGINT.*
OBJ[SERIALIZABLE_PROPERTIES]
expect.assertions(NUM)
expect.hasAssertions()
EXPECT_ELEM.*
EXPECT.to*Snapshot(...)           #Unlike Jest, not implemented
