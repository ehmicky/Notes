
                   
   DENO_ASSERTIONS  
                   



ALTERNATIVES ==>                  #See chai doc
                                  #TODO ???

VERSION ==>                       #Part of Deno test (see its doc)

AssertionError                    #Same as Error. Used by assert*()
                                  #assert*() does not add ERROR.* properties, it modifies ERROR.message|stack instead

assert(..., 'MESSAGE')            #Appends a custom error message


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fail(['MESSAGE'])                 #Always fail
unimplemented(['MESSAGE'])        #Same but prefixes 'Unimplemented' to MESSAGE. Meant for stubs
unreachable()                     #Same but meant for unreachable code

assert[False](BOOL)               #== true|false
                                  #Is a TypeScript type guard
equal(VAL, VAL2)->BOOL            #Object.is()
                                  #Works with REGEXP|URL|DATE
                                  #Deep over OBJ|ARR:
                                  #  - Including SYMs, but not inherited|non-enumerable props
                                  #  - Must have same keys
                                  #  - Handles cycles
assert[Not]Equals(VAL, VAL2)      #equal(VAL, VAL2)
assertObjectMatch(OBJ, OBJ2)      #Has same keys, deeply over OBJ|ARR|MAP|SET
assert[Not]StrictEquals(VAL, VAL2)     #Object.is()
assertExists(VAL)                 #== null
assertAlmostEquals
 (NUM, NUM2[, NUM3])              #Object.is() but within NUM3 (def: 1e-7) diff for rounding error
assert[Not]InstanceOf(VAL, TYPE)       #VAL instanceof TYPE
assertStringIncludes(STR, STR2)   #STR.includes(STR2)
assertArrayIncludes(ARR, ARR2)    #ARR.includes(each VAL is equal())
assert[Not]Match(STR, REGEXP)     #REGEXP.test(STR)
assertIsError                     #VAL instanceof ERROR_CLASS (def: Error)
 (VAL[, ERROR_CLASS[, 'MESSAGE']])#If 'MESSAGE', ERROR.message must include it
assertThrows(FUNC()[, ...])->ERROR#... is same as assertIsError(VAL, ...)
assertRejects(FUNC()->>[, ...])->>ERROR#Same but async
