
                                  ┏━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DENO_ASSERTIONS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See chai doc

VERSION ==>                       #Part of Deno
                                  #Browser compatible

                                  ┌────────────┐
                                  │   COMMON   │
                                  └────────────┘

@std/assert/assertion-error       #
AssertionError                    #Same as Error. Used by assert*()
                                  #assert*() does not add ERROR.* properties, it modifies ERROR.message|stack instead

assert*|fail|un*(..., 'MESSAGE')  #Appends a custom error message
                                  #Including assertSnapshot()

                                  ┌─────────────┐
                                  │   GENERIC   │
                                  └─────────────┘

@std/assert/fail                  #
fail()                            #Always fail

@std/assert/unstable-never       !#
assertNever(VAL)                  #Like fail() except shows VAL in error message

@std/assert/unimplemented         #
unimplemented()                   #Same but prefixes 'Unimplemented' to MESSAGE. Meant for stubs

@std/assert/unreachable           #
unreachable()                     #Same but meant for unreachable code

@std/assert/[not-]strict-equals   #
assert[Not]StrictEquals(VAL, VAL2)#Object.is()

@std/assert/[not-]equals          #
assert[Not]Equals(VAL, VAL2)      #Object.is(), but deep over OBJ|ARR:
@std/assert/equal                 #  - Including SYMs, but not inherited|non-enumerable props
equal(VAL, VAL2)->BOOL            #  - Must have same keys
                                  #  - Handles cycles
                                  #Works with REGEXP|URL|DATE

std/assert/less|greater[-or-equal]
assertLess|Greater[OrEqual]
 (VAL, VAL2)                      #< <= > >=

std/assert/[not-]instance-of
assert[Not]InstanceOf(VAL, TYPE)  #VAL instanceof TYPE

                                  ┌────────────────────┐
                                  │   NULL|UNDEFINED   │
                                  └────────────────────┘

@std/assert/exists                #
assertExists(VAL)                 #== null

                                  ┌─────────────┐
                                  │   BOOLEAN   │
                                  └─────────────┘

@std/assert/assert|false          #
assert[False](BOOL)               #== true|false
                                  #Is a TypeScript type guard

                                  ┌────────────┐
                                  │   NUMBER   │
                                  └────────────┘

@std/assert/almost-equals         #
assertAlmostEquals
 (NUM, NUM2[, NUM3])              #Object.is() but within NUM3 (def: 1e-7 * NUM2) diff for rounding error

                                  ┌────────────┐
                                  │   STRING   │
                                  └────────────┘

@std/assert/string-includes       #
assertStringIncludes(STR, STR2)   #STR.includes(STR2)

@std/assert/[not-]match           #
assert[Not]Match(STR, REGEXP)     #REGEXP.test(STR)

                                  ┌──────────────────┐
                                  │   ARRAY|OBJECT   │
                                  └──────────────────┘

@std/assert/object-match          #
assertObjectMatch(OBJ, OBJ2)      #Has same keys, deeply over OBJ|ARR|MAP|SET

@std/assert/array-includes        #
assertArrayIncludes(ARR, ARR2)    #ARR.includes(each VAL is equal())

                                  ┌──────────────┐
                                  │   FUNCTION   │
                                  └──────────────┘

@std/assert/is-error              #
assertIsError
 (VAL[, ERROR_CLASS               #VAL instanceof ERROR_CLASS (def: Error)
 [, 'MESSAGE'|REGEXP]])           #If 'MESSAGE', ERROR.message must include it

@std/assert/throws                #
assertThrows(FUNC()[, ...])
 ->ERROR                          #... is same as assertIsError(VAL, ...)

@std/assert/rejects               #
assertRejects(FUNC()->>[, ...])
 ->>ERROR                         #Same but async

                                  ┌───────────────┐
                                  │   JEST-LIKE   │
                                  └───────────────┘

@std/expect/expect                #As above, but using Jest API
expect(..., 'MESSAGE')            #Append a custom error message

expect(VAL)
EXPECT.not...
EXPECT.toBe(VAL2)
EXPECT.toStrictEqual(VAL2)
EXPECT.toEqual(VAL2)
EXPECT.toBeInstanceOf(TYPE)
EXPECT.toBeDefined|Undefined()
EXPECT.toBeNull()
EXPECT_BOOL.toBeTruthy|Falsy()
EXPECT_NUM.toBeNaN()
EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])
EXPECT_STR.toMatch(REGEXP)
EXPECT_STR.toContain(STR2)
EXPECT_STR.toHaveLength(NUM)
EXPECT_ARR.toContain(VAL)
EXPECT_ARR.toContainEqual(VAL)
EXPECT_ARR.toHaveLength(NUM)
EXPECT_OBJ.toHaveProperty('VARR'|'VAR'_ARR[, VAL])
EXPECT_OBJ|ARR.toMatchObject(OBJ2|ARR2)
EXPECT_FUNC.toThrow([Error|ERROR|STR|REGEXP])
EXPECT_PROMISE.resolves|rejects.*(...)->>
EXPECT.toEqual(expect.not.*)
EXPECT.toEqual(expect.anything())
EXPECT.toEqual(expect.any(TYPE))
EXPECT_STR.toEqual(expect.stringMatching(REGEXP|'REGEXP'))
EXPECT_STR.toEqual(expect.stringContaining(STR))
EXPECT_NUM.toEqual(expect.closeTo(...))
EXPECT_ARR.toEqual(expect.arrayContaining(ARR2))
EXPECT_OBJ.toEqual(expect.objectContaining(OBJ2))
expect.assertions()
expect.hasAssertions()
EXPECT.addEqualityTesters(FUNC_ARR)
expect.extend({
  FUNC(VAL, ...)->[>]OBJ,
  ...
})                                #Like Jest

EXPECT_BIGINT.*
OBJ[SERIALIZABLE_PROPERTIES]
expect.assertions(NUM)
EXPECT_ELEM.*
EXPECT.to*Snapshot(...)           #Unlike Jest, not implemented
