
              
   PHANTOMCSS  
              


ALTERNATIVES ==>                  #See argus-eyes

VERSION ==>                       #1.0.0
                                  #Image diff testing:
                                  #  - inside a Casper script, take a screenshot
                                  #  - compare with previously taken screenshots

PHANTOMCSS.init|update(CONF)      #Initialize
CONF.casper                       #CASPER
CONF.libraryRoot                  #Should point to node_modules/phantomcss/ (def: '.')

                                  ┌────────────────┐
                                  │   SCREENSHOT   │
                                  └────────────────┘

PHANTOMCSS.screenshot(OBJ)        #Takes the screenshot and place it in the correct folders.
                                  #Must be inside CASPER script.
                                  #OBJ is { 'FILENAME': OBJ2|'SELECTOR' }, with OBJ2:
                                  #  - selector 'SELECTOR' or OBJ3: top|left|width|height NUM
                                  #  - ignore 'SELECTOR':
                                  #     - set DOM element to visibility: hidden
                                  #     - can use CONF.hideElements, added to any "ignore"
                                  #  - wait NUM (in ms):
                                  #     - wait before taking screenshot
                                  #     - def: 250
PHANTOMCSS.screenshot
('SELECTOR'|OBJ3,'FILENAME'[,NUM])#Shortcut


CONF.screenshotRoot               #'DIR' containing baseline screenshots, i.e. first ones:
                                  #  - def: './screenshots'
                                  #  - using CONF.rebase true, creates new baseline screenshots.
CONF.comparisonResultRoot         #'DIR':
                                  #  - containing last screenshots
                                  #     - FILE.diff.png is the screenshot
                                  #     - FILE.png is the baseline screenshot it was compared against
                                  #  - def: same as screenshotRoot
                                  #  - using CONF.cleanupComparisonImages true, cleans up directory at each compareAll(),
                                  #    unless CONF.onComplete has been defined

CONF.addIteratorToImage           #BOOL. If true (def), add counter to filename
CONF.prefixCount                  #BOOL: put count number in filename at the end (false, def) or the beginning (true)
CONF.baseline|diffImage|
failureImageSuffix                #STR (def: '', '.diff', '.fail')
CONF.fileNameGetter('DIR', 'FILE')
->'PATH.png'                      #Custom output filename


PHANTOMCSS.turnOffAnimations()    #Injects <style> with '* { transition: none !important; animation: none !important }'


REPORTING ==>                     #Def: use CASPER.test.pass|fail|info() and console.log()
CONF.onNewImage(OBJ)              #Fired when screenshot is taken.
                                  #OBJ:
                                  #  - filename 'FILE'

                                  ┌────────────────┐
                                  │   COMPARISON   │
                                  └────────────────┘

PHANTOMCSS.compareFiles           #Compare images using resemble.js
('FILE.png', 'FILE.diff.png')     #If differences, put difference file as FILE.fail.png in FAILURE_DIR and in FILE.diff.png's directory
                                  #Must use PHANTOMCSS.waitForTests(VAL) on return VAL (must not be done for other compareAll())
PHANTOMCSS.compareAll(REGEXP      #Use compareFiles('FILE.png', 'FILE.diff.png') on all 'FILE.diff.png'_ARR:
[, 'FILE.diff.png'_ARR][,REGEXP2])#  - def: all of them
                                  #  - REGEXP[2] whitelists|blacklists files
PHANTOMCSS.compareSession()       #Same as compareAll(false)
PHANTOMCSS.compareExplicit
('FILE.diff.png'_ARR)             #Same as compareAll(false, 'FILE.diff.png'_ARR)
PHANTOMCSS.compareMatched
(REGEXP2, REGEXP)                 #Same as compareAll(REGEXP, false, REGEXP2)


CONF.failedComparisonsRoot        #'FAILURE_DIR' containing difference comparison images (def: './failures')

CONF.mismatchTolerance            #FLOAT (0-1) (def: 0.05): below this, do not create comparison images
CONF.outputSettings               #OBJ. See Resemble.js (def: null)
                                  #Will always use ignoreAntialiasing() mode
CONF.addLabelToFailedImage        #BOOL. If true (def), add filename as title on the comparison image

CONF.waitTimeout                  #How long to wait for images to load (def: 1 minute)


PHANTOMCSS.getExitStatus()->NUM   #Number of difference images produced.

REPORTING ==>                     #Fired on compare*()
                                  #Def: use CASPER.test.pass|fail|info() and console.log()
CONF.onPass(OBJ)                  #When no differences. OBJ:
                                  #  - filename 'FILE'
                                  #  - success true
CONF.onFail(OBJ)                  #Def:
                                  #OBJ:
                                  #  - filename 'FILE'
                                  #  - fail true
                                  #  - failFile 'FILE'
                                  #  - mismatch FLOAT
CONF.onTimeout()                  #Fired when images took too long to load
                                  #Same OBJ as onFail(), without mismatch
CONF.onComplete(OBJ_ARR, NUM,NUM2)#OBJ_ARR: any possible option of onPass|Fail|Timeout|NewImage()
                                  #NUM are fails, NUM2 errors
