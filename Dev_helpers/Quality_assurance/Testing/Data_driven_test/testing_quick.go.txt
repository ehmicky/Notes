
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   TESTING_QUICK   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See Go language
RELATED DOCUMENTATION ==>         #See Go language

TESTING ==>                       #See go_test documentation

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

import "testing/quick"            #Data-driven testing with random inputs

quick.Check
 (FUNC(VAL...)->BOOL, *CONFIG)    #Runs FUNC(VAL...) with random inputs many times.
 [->ERROR]                        #Returns ERROR if any BOOL was false
quick.CheckError                  #quick.Check()'s ERROR type
CHECK_ERROR.Count                 #NUM of arguments that passed before failing
CHECK_ERROR.In                    #[]VAL arguments that failed

quick.CheckEqual
 (FUNC(VAL...)->VAL2,
 FUNC2(VAL3...)->VAL4, *CONFIG)
 [->ERROR]                        #Same but calling two functions and checking that their return values are equal
quick.CheckEqualError             #
CHECK_EQUAL_ERROR.Out1|Out2       #[]VAL arguments that failed in FUNC|FUNC2

quick.SetupError                  #ERROR type when quick.Check[Equal]() are called with wrong arguments

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

quick.Config                      #Options
CONFIG.Rand                       #*rand.RAND. Randomness source (def: rand.NewSource() using current time-ns as seed)

go test -quickchecks FLOAT64      #Number of iterations (def: 100)
CONFIG.MaxCount                   #INT. Set number of iterations to a specific number.
CONFIG.MaxCountScale              #FLOAT64. Multiply number of iterations by FLOAT64

                                  ┌───────────────┐
                                  │   CUSTOMIZE   │
                                  └───────────────┘

quick.Value
 (reflect.TYPE, *rand.RAND)
 ->reflect.VALUE,OK               #Low-level API used by quick.Check[Equal] to retrieve a random value from a specific type
quick.Generator                   #INTERFACE to apply on any reflect.TYPE in order to customize quick.Value()
GENERATOR.Generate
 (*rand.RAND, INT)->reflect.VALUE #INT is size hint (always 50)
CONFIG.Values
 ([]reflect.VALUE, *rand.RAND)    #Customize how random values are generated
