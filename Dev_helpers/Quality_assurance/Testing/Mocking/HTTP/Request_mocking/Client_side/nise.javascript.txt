
        
   NISE  
        



ALTERNATIVES ==>                  #  - nise (prefer):
                                  #     - more features
                                  #     - better XMLHttpRequest mocking
                                  #  - jasmine-ajax:
                                  #     - Jasmine-specific

VERSION ==>                       #5.1.1
                                  #Mocks XMLHttpRequest (client-side)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NISE.fakeXhr.
 useFakeXMLHttpRequest()->FAKEXHR #Mocks XMLHttpRequest
NISE.fakeXhr.fakeXMLHttpRequestFor
 (WINDOW)->FAKEXHR                #Same but for specific WINDOW
NISE.fakeXhr.xhr.XMLHttpRequest   #Unmocked XMLHttpRequest
FAKEXHR.restore()                 #

FAKEXHR.addFilter
 (FUNC(...)->BOOL)                #Don't mock request made to XHR.open(...) if BOOL true
FAKEXHR.useFilters                #BOOL (def: false). Turns on FAKEXHR.addFilter()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REQUEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKEXHR.onCreate = FUNC(XHR)      #When a request is sent.
                                  #Must set up XHR then use XHR.respond(...)
XHR                               #Same members as real XHR except also ones below
XHR.url                           #
XHR.responseUrl                   #
XHR.method                        #
XHR.requestHeaders                #OBJ
XHR.requestBody                   #STR
XHR.username|password             #
XHR.async                         #BOOL

XHR.getResponseHeader('VAR')->VAL #
XHR.getAllResponseHeaders()->OBJ  #

XHR.setStatus(NUM)                #
XHR.setResponseHeaders(OBJ)       #
XHR.setResponseBody(STR)          #
XHR.respond(UINT, OBJ, STR)       #Respond to a request. UINT is status code, OBJ is headers, STR is body.
XHR.error()                       #Simulate a network error.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESPONSE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NISE.fakeServer.create([OPTS])    #Calls NISE.fakeXhr.useFakeXMLHttpRequest()
 ->FAKESERVER                     #FAKESERVER is a higher-level API above XHR
FAKESERVER.configure(OPTS)        #
FAKESERVER.restore()              #

NISE.fakeServerWithClock.         #Same but using @sinonjs/fake-timers (see its doc), calls:
 create(...)                      #  - install() on first XHR.send()
                                  #  - uninstall() on either FAKESERVER.respond|restore()
                                  #  - CLOCK.tick() to automatically advance any setTimeout|Interval()

FAKESERVER.respondWith            #Do XHR.respond() to requests matching METHOD and PATH.
 ([['METHOD', ]PATH, ]VAL)        #Response is according to VAL:
                                  #  - [UINT, OBJ, STR]: XHR.respond(...)
                                  #  - STR|ARRBUFFER: same as [200, {}, STR|ARRBUFFER]
                                  #  - FUNC(XHR):
                                  #     - must call XHR.respond()
                                  #     - if REGEXP, also pass parenthesis groups as additional arguments
                                  #PATH can be STR|REGEXP or FUNC(STR)->BOOL
                                  #XHR not matching anything will get [404, {}, '']
                                  #Responses are queued until FAKESERVER.respond() is called.
                                  #Must be called before actual requests.
FAKESERVER.respond()              #
FAKESERVER.respondAll()           #Like FAKESERVER.respond() except can be done again
OPTS|FAKESERVER|XHR.autoRespond   #If true (def: false), calls respond() OPTS|FAKESERVER|XHR.autoRespondAfter (def: 10) after XHR.send()
OPTS|FAKESERVER.respondImmediately#If true (def: false), calls respond() right away after XHR.send()

OPTS|FAKESERVER.logger            #FUNC(STR) logging request and responses for debugging

OPTS|FAKESERVER.fakeHTTPMethods   #If true (def: false), use { _method 'METHOD' } from request payload
                                  #of POST requests when present


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TRACKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKESERVER.requests               #XHR_ARR
FAKESERVER.getRequest(NUM)->XHR   #
FAKESERVER.first|second|third|
 lastRequest                      #XHR
FAKESERVER.requestCount           #NUM
FAKESERVER.requested
 [One|Twice|Thrice]               #BOOL

FAKESERVER.resetBehavior()        #Remove all FAKESERVER.respondWith()
FAKESERVER.resetHistory()         #Remove all FAKESERVER.requests
FAKESERVER.reset()                #Both
