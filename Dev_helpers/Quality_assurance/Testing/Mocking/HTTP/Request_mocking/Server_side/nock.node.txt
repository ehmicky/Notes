
        
   NOCK  
        



ALTERNATIVES ==>              #  - interceptors (preferred for low-level)
                              #     - mocks fetch(), http.request(), XHR, WebSocket
                              #     - can mock in subprocess
                              #     - works in browser
                              #     - low-level: spy on REQ|RES, change REQ.headers, mock RES
                              #  - nock (preferred for high-level)
                              #     - uses interceptors under-the-hood
                              #     - higher-level: filtering|routing, transforming, assertions, recording, snapshots

VERSION ==>                   #14.0.0-beta.13


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BASIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOMAIN                        #STR|URL|REGEXP. Protocol optional if REGEXP. Can include ':PORT'

NOCK(DOMAIN[, OPTS])->SCOPE   #Mocks fetch(), HTTP.request(), XHR
                              #Uses interceptors under-the-hood (see its doc)
                              #Filter for requests matching DOMAIN
OPTS.conditionally            #FUNC()->BOOL. Filter requests
OPTS.filteringScope           #FUNC('DOMAIN')->BOOL. Filter for requests matching this DOMAIN
OPTS.reqheaders               #OBJ. Filter for requests with those request headers
                              #Header values can be 'VAL'[()]|REGEXP
OPTS.badheaders               #OBJ. Inverse of OPTS.reqheaders
OPTS.allowUnmocked            #BOOL. When no SCOPE matches, whether should:
                              #  - do the real request (true)
                              #  - throw NetConnectNotAllowedError (false, def)

SCOPE.clone()->SCOPE2         #

NOCK.enable|disableNetConnect #Same as allowUnmocked but:
 ([DOMAIN|FUNC(DOMAIN)->BOOL])#  - check if any SCOPE with same DOMAIN matches instead
                              #  - defaults to true

NOCK.cleanAll()               #Removes all past SCOPE.*
NOCK.restore()                #Restore original fetch(), HTTP.request() and CLIENTREQUEST functions.
NOCK.activate()               #Revert restore()

ENVVAR NOCK_OFF=true          #Disable nock


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REQUEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCOPE.HTTP_METHOD             #Create a PATHSCOPE for this specific PATH and request BODY
 (PATH[, BODY])->PATHSCOPE    #PATH:
                              #  - can be STR|REGEXP|FUNC('PATH')->BOOL
                              #  - includes ?QUERY if any
                              #BODY can be:
                              #  - STR|BUFFER
                              #  - REGEXP
                              #  - FUNC(STR|JSON_VAL)->BOOL
                              #  - OBJ:
                              #     - deep equality
                              #     - values can be STR|REGEXP
SCOPE.intercept
 (PATH, 'HTTP_METHOD'[, BODY])
 ->PATHSCOPE                  #Same
MOCK.removeInterceptor(OBJ)   #Destroy a PATCHSCOPE. OBJ:
                              #  - proto STR
                              #  - method STR
                              #  - hostname STR
                              #  - path STR

SCOPE.filteringPath
 (FUNC('PATH')->'PATH')
 ->SCOPE                      #Transform request PATH
SCOPE.filteringPath
 (REGEXP, 'PATH')->SCOPE      #Transform request PATH if they match REGEXP

SCOPE.query(QUERY)            #Filter for requests with those QUERY variables.
                              #QUERY can be:
                              #  - 'QUERY'
                              #  - OBJ|SEARCHPARAMS:
                              #     - can be deep
                              #     - values can be ARR
                              #  - BOOL[(OBJ)]

SCOPE.matchHeader
 ('VAR', 'VAL'[()]|REGEXP)
 ->SCOPE                      #Filter for requests with that request header
SCOPE.basicAuth(OBJ)
 ->SCOPE                      #Filter for requests using HTTP basic authentication with OBJ.user|pass STR

SCOPE.filtertingRequestBody
 (FUNC('BODY')->'BODY')
 ->SCOPE                      #Transform request body
SCOPE.filtertingRequestBody
 (REGEXP, 'BODY')->SCOPE      #Transform request body if they match REGEXP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESPONSE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PATHSCOPE                     #Fake response

PATHSCOPE.reply[WithFile]     #Specify reply:
 (NUM[, VAL[, OBJ]])->SCOPE   #  - NUM: error code
                              #  - VAL:
                              #     - response body
                              #     - can be:
                              #        - STR
                              #        - OBJ
                              #        - FUNC(URL, REQUEST_BODY[, FUNC2]):
                              #           - returns VAL|ISTREAM (or use FUNC2(ERROR, VAL|ISTREAM))
                              #           - this.req is REQ
                              #        - 'FILE_PATH': only if "WithFile"
                              #  - OBJ:
                              #     - response headers
                              #     - values are STR[(REQ, RES, REQUEST_BODY)]:
                              #        - REQUEST_BODY is BUFFER|ISTREAM|undefined
                              #Can also use a single argument FUNC(URL, REQUEST_BODY[, FUNC2])->[NUM, VAL, OBJ]
SCOPE.defaultReplyHeaders(OBJ)
 ->SCOPE                      #Set default response headers. Same OBJ as PATHSCOPE.reply()
SCOPE.replyContentLength()
 ->SCOPE                      #Set default Content-Length [S]. Does not work with STREAMs
SCOPE.replyDate([DATE])->SCOPE#Set default Date [S]
PATHSCOPE.replyWithError(VAL) #Specify reply that fires 'error' event on request (not HTTP error). VAL can be:
                              #  - OBJ: JSON response body
                              #  - STR: text response body

PATHSCOPE.times(NUM)          #Destroys PATHSCOPE after reply[WithFile]() has been called NUM times (def: 1)
 ->PATHSCOPE                  #I.e. must set up once for each request
PATHSCOPE.once|twice|thrice()
 ->PATHSCOPE                  #Same as PATCHSCOPE.times(1|2|3). Considered "fired" when fired 1|2|3 times.
PATHSCOPE.persist([BOOL])     #Same as PATCHSCOPE.times(Infinity). Considered "fired" when fired once.
 ->PATHSCOPE                  #Can use false to undo

PATHSCOPE.delay(DELAY)        #Delay response. DELAY can be:
 ->PATHSCOPE                  #  - OBJ: head|body NUM (in ms)
                              #  - NUM: same as OBJ.head
PATHSCOPE.delayConnection(NUM)
 ->PATHSCOPE                  #Same as delay({ head: NUM })
PATHSCOPE.delayBody(NUM)
 ->PATHSCOPE                  #Same as delay({ body: NUM })

PATHSCOPE.
 abortPendingRequests()
 ->PATHSCOPE                  #Abort pending replies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCOPE.done()                  #Throw exception if some PATHSCOPE have not been fired
SCOPE.isDone()->BOOL          #Returns whether all PATHSCOPE have been fired
NOCK|SCOPE.pendingMocks()
 ->STR_ARR                    #Returns PATHSCOPEs not isDone() as 'METHOD DOMAIN:PORT/PATH'

SCOPE.isActive()->BOOL        #Returns whether all PATHSCOPEs have been fired or use persist|optionally()
NOCK|SCOPE.activeMocks()
 ->STR_ARR                    #Same as pendingMocks() but with isActive()

PATHSCOPE.optionally()
 ->PATHSCOPE                  #Make next reply*() not count for SCOPE.done|isDone|pendingMocks()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCOPE.on('request',
 FUNC(REQ, SCOPE, BODY))      #
SCOPE.on('replied',
 FUNC(REQ, SCOPE))            #
NOCK.emitter.on
 ('no match', FUNC(REQ))      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RECORD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NOCK.recorder.rec([OPTS])     #Record requests.
                              #Disables mocking and asserting.
OPTS.dont_print               #BOOL. If false (def), print to console each request
OPTS.logging                  #FUNC(STR) (def: console.log)
OPTS.use_separator            #BOOL (def: true). Separate each line with '<<<<<<-- cut here -->>>>>>'
OPTS.output_objects           #BOOL (def: false). Whether to print as STR or as OBJ_ARR (same format as play())
OPTS
 .enable_reqheaders_recording #BOOL (def: false). Whether to record reqheader

NOCK.recorder.play()->OBJ_ARR #OBJ: scope, method, path, body, status, response, headers, reqheader
NOCK.loadDefs
 ('FILE_PATH')->OBJ_ARR       #Retrieve from JSON file that stored OBJ_ARR
NOCK.define(OBJ_ARR)
 ->SCOPE_ARR                  #Converts to SCOPE
NOCK.recorder.load
 ('FILE_PATH')->SCOPE_ARR     #loadDefs() + define()
NOCK.recorder.clear()         #Clears previous recording requests.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SNAPSHOT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NOCKBACK ==>                  #HTTP request|response snapshots
                              #Not documented yet
