
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   INTERCEPTORS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See nock

VERSION ==>                       #0.36.5

                                  ┌──────────┐
                                  │   BASE   │
                                  └──────────┘

INTERCEPTOR                       #Base class for all mocks

INTERCEPTOR.apply()               #Start mocking, globally
                                  #If already called, noop
INTERCEPTOR.dispose()             #Stop mocking, globally
                                  #Noop if already done
                                  #Also calls INTERCEPTOR.removeAllListeners()
INTERCEPTOR.readyState            #One of:
                                  #  - 'INACTIVE': initial
                                  #  - 'APPLYING|APPLIED': start|end of apply()
                                  #  - 'DISPOSING|DISPOSED': start|end of dispose()

INTERCEPTOR
 .on|once('EVENT', FUNC(...))
 ->INTERCEPTOR
INTERCEPTOR.off('EVENT')
 ->INTERCEPTOR
INTERCEPTOR.removeAllListeners()
 ->INTERCEPTOR                    #Like EVENT_EMITTER.*

                                  ┌──────────┐
                                  │   HTTP   │
                                  └──────────┘

new FetchInterceptor()            #HTTP_INTERCEPTOR that mocks fetch()
new ClientRequestInterceptor()    #HTTP_INTERCEPTOR that mocks http.request()
new XMLHttpRequestInterceptor()   #HTTP_INTERCEPTOR that mocks XMLHttpRequest

HTTP_INTERCEPTOR
 .on('request', FUNC(REQ_INFO))
 ->INTERCEPTOR                    #On HTTP request
REQ_INFO.request                  #REQ, like fetch() (even when mocking http.request() or XHR)
                                  #Can directly modify, but only REQ.headers
                                  #If reading body, should call REQ.clone() first
REQ_INFO.requestId                #STR. 13 random hex chars
REQ_INFO.controller               #CONTROLLER
CONTROLLER.respondWith(RES)       #Mocks response without network error (which includes 4**|5**)
CONTROLLER.errorWith(RES)         #Mocks network error response (no status code)

HTTP_INTERCEPTOR
 .on('response', FUNC(RES_INFO))
 ->INTERCEPTOR                    #On HTTP response
RES_INFO.request[Id]              #Like REQ_INFO.*
RES_INFO.response                 #RES, like fetch() (even when mocking http.request() or XHR)
RES_INFO.isMockedResponse         #BOOL. Whether CONTROLLER.* called

HTTP_INTERCEPTOR
 .on('unhandledException',        #On unhandled exception within request handler
 FUNC(UE_INFO))->INTERCEPTOR      #Those also emit 'response' with 500, unless 'unhandledException' either:
                                  #  - calls CONTROLLER.*
                                  #  - throw an exception (including re-throwing UE_INFO.error)
UE_INFO.request[Id]|controller    #Like REQ_INFO.*
UE_INFO.error                     #VAL

                                  ┌───────────────┐
                                  │   WEBSOCKET   │
                                  └───────────────┘

new WebSocketInterceptor()        #WS_INTERCEPTOR that mocks WebSocket

WS_INTERCEPTOR.on
 ('connection', FUNC(WS_INFO))
 ->INTERCEPTOR                    #On WebSocket connection
WS_INFO.client                    #WS_CLIENT
WS_INFO.server
WS_SERVER.socket                  #WS_SERVER

WS_CLIENT|WS_SERVER
 .add|removeEventListener         #Like DOM WebSocket
 |send|close(...)                 #EVENT.preventDefault() can be called

WS_SERVER.connect()               #Completes connection

WS_CLIENT.id                      #Like REQ_INFO.requestId
WS_CLIENT.url                     #URL
WS_INFO.info.protocols            #STR_ARR|undefined, like in DOM

                                  ┌───────────┐
                                  │   BATCH   │
                                  └───────────┘

new BatchInterceptor(OPTS)        #INTERCEPTOR combining multiple ones
OPTS.interceptors                 #INTERCEPTOR2_ARR
OPTS.name                         #'INTERCEPTOR'

import('@mswjs/interceptors
 /presets/node')->>INTERCEPTOR_ARR#ClientRequestInterceptor + FetchInterceptor + XMLHttpRequestInterceptor
import('@mswjs/interceptors
 /presets/browser')
 ->>INTERCEPTOR_ARR               #FetchInterceptor + XMLHttpRequestInterceptor

                                  ┌────────────────┐
                                  │   SUBPROCESS   │
                                  └────────────────┘

new RemoteHttpResolver(OPTS)      #INTERCEPTOR catching HTTP requests from a subprocess
OPTS.process                      #SUBPROCESS (from node:child_process)
                                  #Communicates using Node.js IPC

new RemoteHttpInterceptor(OPTS)   #INTERCEPTOR in the subprocess
OPTS.interceptors                 #INTERCEPTOR2_ARR
