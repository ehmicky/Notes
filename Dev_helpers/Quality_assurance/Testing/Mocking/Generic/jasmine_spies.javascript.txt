
                 
   JASMINE_SPIES  
                 



ALTERNATIVES ==>                                #See Sinon

VERSION ==>                                     #Part of Jasmine (see its doc)
                                                #Spies and function mocks.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPIES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.createSpy(['FUNC'][, FUNC])->SPYFUNC    #Creates a SPYFUNC.
                                                #FUNC is original function (def: empty). It is only used with SPYFUNC.and.callThrough()
                                                #'FUNC' defaults to FUNC.name
JASMINE.createSpyObj('OBJ', 'FUNC'_ARR|OBJ
 [, 'PROP'_ARR|OBJ])->OBJ                       #Like createSpy() but with an OBJ with function members or non-function members.
spyOnAllFunctions(OBJ[, BOOL])->OBJ             #Like createSpyObj() but on all OBJ function members.
                                                #If BOOL true (def: false), include non-enumerable members
spyOn(OBJ, 'FUNC')->SPYFUNC                     #Like createSpy() but with OBJ.FUNC, and SPYFUNC is assigned to OBJ.FUNC
spyOnProperty(OBJ, 'PROP'[,'get|set'])->SPYFUNC #Same but for a OBJ.PROP using a property descriptor get|set()

SPYFUNC.and.identity                            #'FUNC'

spyOnGlobalErrorsAsync
 (FUNC(SPYFUNC)->PROMISE)->PROMISE              #Replace the default SPYFUNC handling uncaught exceptions and unhandled promises


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPYFUNC.and.stub()                              #Mocks: do nothing (def)
SPYFUNC.and.callThrough()                       #Mocks: call original function
SPYFUNC.and.returnValue(VAL)                    #Mocks: return VAL
SPYFUNC.and.returnValues(VAL...)                #Mocks: return VAL, then VAL2, etc.
SPYFUNC.and.resolveWith(VAL)                    #Mocks: return PROMISE which resolves with VAL
SPYFUNC.and.rejectWith(VAL)                     #Mocks: return PROMISE which rejects with VAL
SPYFUNC.and.callFake(FUNC)                      #Mocks: call FUNC with same arguments
SPYFUNC.and.throwError(VAL)                     #Mocks: throw VAL
SPYFUNC.and.CUSTOM(...)                         #Mocks: custom.
                                                #Must do JASMINE.addSpyStrategy('CUSTOM', FUNC(...)->FUNC2) in beforeEach()

SPYFUNC.withArgs(...).and....                   #Same but only mocks when calling with arguments ...
                                                #If arguments matches no withArgs(...), an error will be thrown

JASMINE.setDefaultSpyStrategy
 (FUNC(SPYFUNC.and)->SPYFUNC.and.*(...))        #Calls SPYFUNC.and.*(...) on all future SPYFUNC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_SPYFUNC.toHaveBeenCalled()               #SPYFUNC has been fired
EXPECT_SPYFUNC.toHaveSpyInteractions()          #Same
EXPECT_SPYFUNC.toHaveBeenCalledWith(VAL...)     #SPYFUNC has been called exactly with arguments VAL... (using toEqual())
EXPECT_SPYFUNC.toHaveBeenCalledTimes(NUM)       #SPYFUNC has been called NUM times
EXPECT_SPYFUNC.toHaveBeenCalledOnceWith(VAL...) #
EXPECT_SPYFUNC.toHaveBeenCalledBefore(SPYFUNC2) #SPYFUNC has been fired before SPYFUNC2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TRACKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPYFUNC.calls                                   #CALLS
CALLS.any()->BOOL                               #True if SPYFUNC has been fired
CALLS.count()->NUM                              #Number of times SPYFUNC has been fired
CALLS.argsFor(NUM)->ARR                         #Arguments called for the NUMth time SPYFUNC was fired
CALLS.thisFor(NUM)->OBJ                         #Same for `this`
CALLS.allArgs()->ARR_ARR                        #Same for all SPYFUNC invocation
CALLS.all()->OBJ_ARR                            #Same but with { object this, invocationOrder NUM, args ARR, returnValue VAL }
CALLS.first|mostRecent()->OBJ                   #Same but only for the first|last SPYFUNC invocation

CALLS.reset()                                   #Resets CALLS
CALLS.saveArgumentsByValue()                    #Saves arguments by shallow copy not by reference
