
             
   DENO_MOCK  
             



ALTERNATIVES ==>                  #See Sinon
                                  #TODO

VERSION ==>                       #Part of Deno test (see its doc)

std/testing/mock.ts               #Entrypoint (std library)

spy()->SPY
spy([FUNC])->SPY                  #Spy on FUNC (def: noop) without changing it
spy(OBJ, 'FUNC')->SPY             #Spy on OBJ.FUNC and sets it to SPY
stub(OBJ, 'FUNC'[, FUNC2])->SPY   #Like spy(...) but mocks with FUNC2 (def: noop)

SPY.original                      #Underlying FUNC
SPY.fake                          #Mock FUNC2 (with stub())
SPY.restore()                     #Remove spying
SPY.restored                      #BOOL. True if SPY.restore() called

mockSession()->ID                 #
restore([ID])                     #Call SPY.restore() on all SPYs created since mockSession() (def: all)
mockSession[Async](FUNC)->FUNC    #Make FUNC(...) call restore() at the end

SPY.calls                         #CALL_ARR made while spying
CALL.args                         #ARR
CALL.self                         #VAL used as this
CALL.returned                     #VAL returned
CALL.error                        #VAL thrown (if any)

returnsArg(NUM)->FUNC             #Returns a FUNC() that returns argument number NUM
returnsArgs([NUM[, NUM2]])->FUNC  #Returns a FUNC() that returns arguments ARR.
                                  #NUM[2] is start|end (def: all args)
returnsThis(ITERABLE)->FUNC       #Returns a FUNC() that returns `this`
returnsNext(ITERABLE)->FUNC       #Returns a FUNC() where each call returns ITERABLE.next()
resolvesNext(ASYNC_ITERABLE)->FUNC#Same but async

assertSpyCalls(SPY, NUM)          #Asserts that SPY.calls.length === NUM
assertSpyCallArg
 (SPY, NUM, NUM2, VAL)->VAL       #Asserts that SPY.calls[NUM].args[NUM2] is VAL, using assertEquals()
assertSpyCallArgs
 (SPY, NUM[, NUM2[, NUM3]], ARR)  #Asserts that SPY.calls[NUM].args match ARR, using assertEquals()
 ->ARR                            #NUM2|3 is start|end (def: all args)

assertSpyCall(SPY, NUM[, EXPECT]) #Asserts that SPY.calls[NUM] matches EXPECT, using assertEquals()
assertSpyCallAsync(...)->>        #Same but async
EXPECT.args|self|returned         #Like CALL.*
EXPECT.error.Class                #ERROR_CLASS
EXPECT.error.msgIncludes          #'MESSAGE'
