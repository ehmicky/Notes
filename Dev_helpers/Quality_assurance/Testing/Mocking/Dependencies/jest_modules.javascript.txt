
                
   JEST_MODULES  
                



VERSION ==>                       #Package within Jest monorepo (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RPATH                             #Argument to require(), i.e. can be 'MODULE', 'PATH', etc.

JEST.createMockFromModule(RPATH)  #Like require(RPATH) but calls MOCK.mockImplementation(function () {})
                                  #on every function deep member

MOCKFILE                          #RPATH_DIR/../[.../]__mocks__/RPATH_FILENAME meant to mock require(RPATH)
                                  #For node modules or core Node.js modules, should be ROOTS/__mocks__/MODULE.js
                                  #Automatically used by require(RPATH) if RPATH is a non-core Node.js module

JEST.mock                         #Mock future calls to require(RPATH):
 (RPATH[, FUNC()->VAL][, OPTS])   #  - if FUNC()->VAL, return VAL
 ->JEST                           #  - if a MOCKFILE exists, use it
                                  #  - otherwise JEST.createMockFromModule()
                                  #OPTS:
                                  #  - virtual BOOL: if false (def), throw error if RPATH does not exist
JEST.setMock(RPATH, VAL)          #Same as JEST.mock(RPATH, FUNC()->VAL)
JEST.unmock(RPATH)                #Reverse JEST.mock()

JEST.mocked(VAL[, BOOL])->VAL     #For a VAL already mocked, return it but adding TypeScript type information
                                  #BOOL is whether to do it deeply

BABEL-PLUGIN-JEST-HOIST ==>       #Babel plugin automatically included by babel-jest, which hoists every JEST.[un]mock(...) to
                                  #top-level scope
JEST.do[nt]Mock(...)              #Same as JEST.[un]mock(...) except prevents babel-plugin-jest-hoist

CONF.moduleNameMapper.REGEXP      #RPATH2. Replaces require(RPATH) (if it matches REGEXP) by require(RPATH2)

JEST.enable|disableAutomock()     #Automatically calls JEST.mock() on every require(RPATH) except:
                                  #  - core Node.js modules
                                  #  - modules mocked through CONF.moduleNameWrapper
                                  #  - any RPATH matching CONF.unmockedModulePathPatterns 'REGEXP'_ARR (def: [])
CONF.automock                     #Def: false|disabled

require.requireActual|Mock(...)   #Like require(...) but forces using [un]mocked version


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CUSTOM REQUIRE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JEST.resetModules()               #Resets require() caching
CONF.resetModules                 #BOOL. If true (def: false), calls JEST.resetModules() between every test
JEST.isolateModules(FUNC())       #Sandboxes require() inside inside FUNC(), i.e. their cache is cleaned at end of FUNC()

CONF.moduleFileExtensions         #'EXT'_ARR that are optional in require() (def: ['js', 'json', 'node', 'jsx', 'ts', 'tsx'])
CONF.moduleDirectories            #Directories searched on ancestors by require() (def: ['node_modules'])
CONF.modulePaths                  #Additional directories searched by require() (def: [])
CONF.modulePathIgnorePatterns     #'FILE|DIR'_ARR to not allow in require() (def: [])
CONF.browser                      #BOOL (def: false). Use package.json 'browser' field on require()

CONF.resolver                     #Custom require() handler
                                  #Must be FUNC(RPATH, OBJ)->PATH
                                  #OBJ are CONF-related: basedir STR, rootDir ARR, extensions 'EXT'_ARR,
                                  #moduleDirectory 'DIR'_ARR, paths ARR, browser BOOL
