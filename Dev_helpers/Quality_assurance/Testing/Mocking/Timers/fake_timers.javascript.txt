
               
   FAKE_TIMERS  
               


ALTERNATIVES ==>                  #  - @sinonjs/fake-timers (prefer):
                                  #     - lots of functions mocked
                                  #     - more features
                                  #  - jasmine-timers: Jasmine-specific
                                  #  - jest timers: Jest-specific

VERSION ==>                       #8.0.1
                                  #Node and browser
                                  #Mocks setTimeout, setInterval(), etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKETIMERS.install([OPTS])->CLOCK #Mocks:
                                  #  - set|clearTimeout|Immediate|Interval(), request|cancelAnimationFrame(), Date() (or 'FUNC'...),
                                  #    performance.now(), process.nextTick(), queueMicrotask(), request|cancelIdleCallback(), process.hrtime[.bigint]()
                                  #  - so they are synchronous and are advanced with CLOCK.tick(NUM)
                                  #OPTS:
                                  #  - now DATE[_NUM] (def: 0)
                                  #  - toFake 'FUNC'_ARR (def: all except 'nextTick')
                                  #  - loopLimit NUM (def: 1000): maximum number of iterations with CLOCK.runAll()
                                  #  - shouldAdvanceTime BOOL (def: false):
                                  #     - using OPTS.advanceTimeDelta NUM (def: 20)
                                  #     - calls (non-mocked) setInterval(() => CLOCK.tick(NUM), NUM)
                                  #     - i.e. CLOCK will somewhat follow real time (with NUM increments)
                                  #  - loopLimit NUM (def: 1000): if CLOCK.run*() loops more, throw error
CLOCK.uninstall()                 #Removes mocking
CLOCK.reset()                     #Cancels current async tasks
                                  #Also resets OPTS.now

FAKETIMERS.createClock
 ([OPTS.now][, OPTS.loopLimit])   #Same as FAKETIMERS.install() but does not mock
 ->CLOCK                          #Instead, use CLOCK.setTimeout|...()

FAKETIMERS.withGlobal(OBJ)
 ->FAKETIMERS2                    #Use a different global object


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ADVANCE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLOCK.tick(NUM|'[HH:][MM:]SS')    #Must be positive

CLOCK.next()                      #Do CLOCK.tick() until the first timer's callback
CLOCK.runToFrame()                #Do CLOCK.next() until the first requestAnimationFrame()'s callback
CLOCK.runAll()                    #Do CLOCK.next() until the last timer's callback
CLOCK.runToLast()                 #Same except if new timers were adding after the last timer, still stops at that last timer
CLOCK.runMicrotasks()             #Run all process.nextTick()

CLOCK.setSystemTime(DATE)->CLOCK  #Change current DATE returned by performance.now() and Date()
                                  #Does not impact other functions

CLOCK.countTimers()->NUM          #NUM of setImmediate|Timeout|Interval() or requestAnimationFrame()

CLOCK.tickAsync(...)->PROMISE
CLOCK.nextAsync(...)->PROMISE
CLOCK.runAllAsync(...)->PROMISE
CLOCK.runToLastAsync(...)->PROMISE#Same but return a PROMISE resolved on next tick
