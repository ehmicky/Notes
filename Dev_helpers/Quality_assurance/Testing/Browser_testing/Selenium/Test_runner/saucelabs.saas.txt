
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   SAUCELABS   ┃
                                  ┗━━━━━━━━━━━━━━━┛

GOAL ==>                        #Online service that runs JavaScript or Selenium code on several browsers+OS.
                                #Tests should be exactly same whether run on local WebDriver servers than on SauceLabs, except
                                #for WD.remote() and WD.init()

WEBDRIVER ==>                   #Must connect to WebDriver server at ondemand.saucelabs.com[:4444] with HTML Authentication:
                                #  - username: SauceLabs accounts USERNAME
                                #  - password: SauceLabs account ACCESS_KEY
                                #With wd.js:
                                #  - WD.remote("ondemand.saucelabs.com", 80, USERNAME, ACCESS_KEY, "promiseChain")
                                #  - can also use ENVVAR SAUCE_USERNAME and SAUCE_ACCESS_KEY

SAUCELABS VS BROWSERSTACK ==>   #Advantages of SauceLabs:
                                #  - pricing:
                                #     - cheaper manual testing
                                #     - free for open source
                                #  - browsers+OS:
                                #     - support for Linux
                                #     - support for Android 4.3
                                #     - support for Appium (app automation)
                                #  - features:
                                #     - saved screencast
                                #     - status images
                                #     - better support for updating passed|failed tests
                                #     - make jobs/sessions public, or restricted using a token
                                #     - slightly better sessions info REST API, including for bugs
                                #     - slightly better unit testing REST API
                                #Advantages of BrowserStack:
                                #  - pricing: automated tests include nearly-unlimited minutes
                                #  - browsers+OS: more support for Opera
                                #  - easier testing of local folders, but Karma solves the problem

                                  ┌───────────┐
                                  │   EXTRA   │
                                  └───────────┘

OTHER FUNCTIONS ==>             #  - Account management, where test time can be shared, and time over charged or blocked.
                                #  - Manual testing:
                                #     - browse using any browser+OS VMs.
                                #     - Can share live session with other registered users.
                                #     - Can take screenshots and fill bug reports.
                                #     - Limited to only 20mins sessions.
                                #     - Can be launched with Chrome|Firefox extension "Sauce Launcher"
                                #     - to test local files, see local testing below

https://saucelabs.com/tests/    #Contains info about "job" (i.e. test) whose id is SESSIONID, including:
SESSIONID                       #  - ./selenium-server.log
                                #  - ./log.json: SauceLabs log
                                #  - ./logcat.log: with Android
                                #  - ./video_SESSIONID.flv: screencast
                                #  - ./NNNNscreenshot.png: screenshots
<script src="https://
saucelabs.com/job|video-embed/
SESSIONID.js[?auth=....]"       #Replace <script> by <iframe> containing https://saucelabs.com/tests/SESSIONID or screencast

STATUS IMAGE ==>                #Image showing latest build:
                                #  https://saucelabs.com/buildstatus/[browser-matrix/]USERNAME[.svg][?auth=TOKEN]
                                #Should:
                                #  - use alt="Sauce Test Status"
                                #  - wrap in a <a href="https://saucelabs.com/u/USERNAME[?auth=TOKEN]">
                                #    where TOKEN is same as above, with SESSIONID being ""

                                  ┌──────────────────────────┐
                                  │   DESIRED CAPABILITIES   │
                                  └──────────────────────────┘

CAPAB_OBJ ==>                   #When creating a session, following extra CAPAB_OBJ are available:
browserName                     #browser+OS combination. Can be copied from https://saucelabs.com/platforms
platform                        #In a nutshell (as of June 2014):
version                         #  - platform: "Linux" (including for Android), "Windows XP|7|8[.1]", "OS X 10.6|8|9"
deviceName                      #    (including iPad|iphone)
                                #  - browserName:
                                #     - "chrome" (all desktop OS)
                                #     - "firefox" (all desktop OS but "Mac OS X 10.8")
                                #     - "internet explorer" (only Windows)
                                #     - "opera" (Linux or Windows 7|XP)
                                #     - "safari" (only Windows 7 or Mac OS X)
                                #     - "android", "ipad", "iphone"
                                #     - "Lynx" (manual testing only)
                                #  - version: for iOS|Android, OS version, for others browser version
                                #  - deviceName: only for Android (not iOS)
selenium-version                #STR

tags                            #STR_ARR: for filtering tests
name                            #STR: name of the test (déf: "unnamed job")
build                           #STR: version of the app (usually use Travis build ID with Travis)
custom-data                     #OBJ (JSON, 64KB limited)
passed                          #BOOL: doesn't make sense to set it in session init, so should update it using:
                                #  - REST API USERNAME/jobs/SESSIONID - PUT
                                #  - "wd.js" BROWSER.sauceJobStatus(BOOL)
                                #  - "saucelabs" SAUCELABS.updateJob(SESSIONID, OBJ)

screen-resolution               #"WIDTHxHEIGHT": available for specific OS:
                                #  - Windows XP/7/OSX 10.6 "800x600"
                                #  - Windows XP/7/OSX 10.6/8 "1440x900", "1920x1200"
                                #  - Windows XP/7/8/8.1/OSX 10.6/8 "1024x768", "1280x1024"
device-orientation              #"portrait" (def) or "orientation": for mobile

record-video                    #BOOL (def: true): create automatically a screencast (slower)
video-upload-on-pass            #BOOL (def: true): if false, disable screencast postprocessing+uploading for passed tests
                                #(faster)
record-screenshots              #BOOL (def: true): create automatically screenshots at each step
record-logs                     #BOOL (def: true)
capture-html                    #BOOL (def: false): create automatically HTML snapshots at each step
                                #I don't know where to get those spapshots.
sauce-advisor                   #BOOL (def: true): analyze tests to give advice

max-duration                    #NUM (def: 30*60s): job timeout
command-timeout                 #NUM (def: 5*60s): Selenium command timeout
idle-timeout                    #NUM (def: 1.5*60s): timeout between two commands starts

prerun                          #{ executable FILE, args STR_ARR, background BOOL }: run an executable on the VW before
                                #starting the tests
timezone                        #STR
disable-popup-handler           #BOOL (def: true): Sauce tools to automatically close popups
public                          #STR: make jobs visible to anyone on the internet with "public", without logs with "public
                                #restricted", with team only with "team", with share buttons with "share" or "private" (def)

                                  ┌──────────────┐
                                  │   REST API   │
                                  └──────────────┘

REST API ==>                    #For:
                                #  - getting info on jobs
                                #  - running unit testing
                                #Calls:
                                #  - https://[USERNAME:ACCESS_KEY@]saucelabs.com/rest/v1/...
                                #    (can also use BROWSER.sauceRestRoot with wd.js)
                                #  - can also use wrapper Node.js package "saucelabs":
                                #      - new require("saucelabs")({username USERNAME, password ACCESS_KEY}) -> SAUCELABS
                                #      - "returns VAL" mean use a final CALLBACK(ERROR, VAL)) and USERNAME is already filled in
                                #Authentication:
                                #  - use USERNAME:ACCESS_KEY@
                                #  - or end with ?auth=TOKEN:
                                #      - TOKEN is CRYPTO.createHmac("md5", USERNAME:ACCESS_TOKEN[:YYYY-MM-DD[-HH]]).
                                #        update(SESSIONID).digest("hex")
                                #        SESSIONID is "" if REST API method is not SESSIONID-specific
                                #      - Can use "saucelabs" package methods:
                                #         - SAUCELABS.generateToken(USERNAME:ACCESS_TOKEN, DATE, SESSIONID) -> TOKEN
                                #         - SAUCELABS.createPublicLink(SESSIONID[, DATE[, BOOL]])
                                #           -> https://USERNAME/jobs/SESSIONID?auth=ACCESS_TOKEN
                                #           (true if use hours in DATE)

users/USERNAME                  #  - id USERNAME
SAUCELABS.getAccountDetails()   #  - access_key ACCESS_KEY
                                #  - name STR (real name), email STR
                                #  - [mac_][manual_]minutes NUM_STR
                                #  - can_run_manual BOOL
                                #  - suscribed BOOL
                                #  - user_type STR (e.g. "free")
users/USERNAME/concurrency      #  - timestamp NUM
                                #  - concurrency:
                                #     - USERNAME:
                                #        - current|remaining:
                                #           - overall|mac|manual NUM (number jobs at once)
USERNAME/activity               #  - totals:
SAUCELABS.getUserActivity       #     - in_progress|queued|all NUM (number of jobs)
([DATE[, DATE2]])               #  - subaccounts: { USERNAME: { in_progress ... } ... } }
                                #GET variables: start|end
users/USERNAME/usage            #  - username USERNAME
                                #  - usage ARR2_ARR, where ARR is [ DATE_STR, [ NUM, NUM2 ] ] (jobs and minutes).
                                #GET variables: start|end "YYYY-MM-DD"

USERNAME/jobs                   #Returns all jobs as JOB_OBJ_ARR with members:
SAUCELABS.getJobs()             #  - id SESSIONID
                                #  - owner STR
                                #  - status STR (e.g. "complete")
                                #  - error STR
                                #  - name STR
                                #  - browser STR
                                #  - browser_[short_]version STR
                                #  - os STR
                                #  - build STR
                                #  - tags STR_ARR.
                                #  - passed BOOL
                                #  - creation|start|end_time NUM
                                #  - video|log_url URL
                                #  - public STR
                                #  - custom-data OBJ
                                #  - proxied BOOL
                                #  - commands_not_successful NUM
                                #  - breakpointed BOOL
                                #GET variables:
                                #  - limit NUM
                                #  - full BOOL: if false, only returns id STR (déf: false for REST API, true for SAUCELABS.*)
                                #  - skip NUM (most recent)
                                #  - to|from NUM
                                #  - format "json|csv"
USERNAME/jobs/SESSIONID
SAUCELABS.showJob(SESSIONID)    #Same for a single job
USERNAME/jobs/SESSIONID - PUT   #JOB_OBJ but only for following members: name, tags, public, passed, build,
SAUCELABS.updateJob(SSIONID,OBJ)#custom-data. Returns new JOB_OBJ
BROWSER.sauceJobUpdate(OBJ)     #"wd.js"-specific functions
BROWSER.sauceJobStatus(BOOL)    #Same as BROWSER.sauceJobUpdate({ passed: BOOL })
USERNAME/jobs/SESSIONID - DELETE#
USERNAME/jobs/SSIONID/stop - PUT
SAUCELABS.stopJob(SSIONID[,OBJ])#Stops a running job. Returns deleted JOB_OBJ

USERNAME/jobs/SESSIONID/assets  #  - sauce-log STR (filename)
                                #  - selenium-log STR
                                #  - video STR
                                #  - screenshots STR_ARR
USERNAME/jobs/SESSIONID/assets/
FILE                            #Download it
USERNAME/jobs/SESSIONID/assets
- DELETE                        #

info/status                     #  - wait_time DOUBLE
SAUCELABS.getServiceStatus()    #  - service_operational BOOL
                                #  - status_message STR
                                #Availability of SauceLabs
info/browsers/webdriver         #OBJ_ARR with members:
SAUCELABS.getWebDriverBrowsers()#  - api_name: like CAPAB_OBJ browserName
                                #  - short_version: like CAPAB_OBJ version
                                #  - os: like CAPAB_OBJ os
                                #  - long_name|version: longer version of api_name|short_verion

bugs/types                      #OBJ_ARR where OBJ has members:
                                #  - id BUG_ID
                                #  - name STR
                                #  - description STR
                                #For manual testing bugs
bugs/types/BUG_ID               #OBJ_ARR where OBJ is:
                                #  - id STR
                                #  - name STR
                                #  - type STR
bugs/details/BUG_ID             #  - Description STR
                                #  - Title STR
                                #  - Screenshot|Video|BugEmbedURL STR
                                #  - CreationTime NUM
                                #  - Job STR
                                #  - OS STR
                                #  - Browser STR
bugs/query/ids=[BUG_ID...]      #Returns same but as array

                                  ┌──────────────────┐
                                  │   UNIT TESTING   │
                                  └──────────────────┘

USERNAME/js-tests - POST        #For unit testing, i.e. without Selenium.
                                #  - url STR|FILE (FILE -> see local testing below)
                                #  - framework "qunit|jasmine|YUI Test|mocha"
                                #  - platforms [ [ OS, BROWSER_NAME, VERSION ] ... ]
                                #  - any CAPAB_OBJ member
                                #Response:
                                #  - "js tests" JSTESTID_ARR
                                #Also sets WINDOW.global_test_results OBJ:
                                #  - passed|failed|total NUM (test cases)
                                #  - duration NUM (sec)
                                #  - tests OBJ_ARR:
                                #     - name STR
                                #     - result BOOL
                                #     - message STR
                                #     - duration NUM
                                #CAPAB_OBJ max-timeout is 3*60s by def.
USERNAME/js-tests/status - POST #  - "js tests" JSTESTID_ARR
                                #Response:
                                #  - completed BOOL (must pool it)
                                #  - "js tests" OBJ_ARR:
                                #     - id JSTESTID
                                #     - job_id SESSIONID
                                #     - platform [ [ OS, BROWSER_NAME, VERSION ] ... ]
                                #     - url STR: "https://saucelabs.com/jobs/SESSIONID"
                                #     [- status "test session in progress"]
                                #     - result:
                                #        - durationSec DOUBLE
                                #        - passed BOOL
                                #        - suites SUITE_OBJ_ARR (test suites)
                                #           - description STR
                                #           - durationSec DOUBLE
                                #           - passed BOOL
                                #           - specs OBJ_ARR (test cases)
                                #              - description STR
                                #              - durationSec DOUBLE
                                #              - failed|passed|totalCount NUM
                                #              - passed BOOL
                                #              - skipped BOOL
                                #           - suites SUITE_OBJ_ARR (sub-test suites)

                                  ┌───────────────────┐
                                  │   LOCAL TESTING   │
                                  └───────────────────┘


sc -u USERNAME -k ACCESS_KEY    #Command line, must be downloaded from website.
                                #Executing it will give access to local servers to SauceLabs testing tools.
                                #Does not give access to local folders unless on a running local server (as opposed to
                                #BrowserStackLocal -f DIR)
                                #Can also use ENVVAR SAUCE_USERNAME|ACCESS_KEY
                                #Some options (domains, proxies, etc.) are missing: cf online doc.
-f FILE                         #Touch file when tunnel is ready
-a HOST:PORT:USERNAME:PASSWORD  #Basic authentication on local server
-s USERNAME ACCESS_KEY          #Share tunnel to subaccounts (credentials are parent account ones)
                                #Must also use CAPAB_OBJ parent_tunnel USERNAME
-i ID                           #Provide a tunnel identifier if need to create several tunnels


new SAUCETUNNEL(USERNAME,       #Node module (2.0.6) launching binary sc (shipped with the module) with command line STR_ARR
ACCESS_KEY, ID, true, STR_ARR)  #Another module called sauce-connect-launcher do the same thing, but download the binary
                                #instead of shipping it.
                                #Returns TUNNEL
TUNNEL.start(FUNC(BOOL))        #BOOL if success
TUNNEL.stop([FUNC()])           #


REST API ==>                    #Has the following methods for local testing.
                                ##Can also use website instead for the same actions.
/USERNAME/tunnels
getActiveTunnels()              #Returns TUNNELID_ARR
/USERNAME/tunnels/TUNNELID      #Returns OBJ: id, owner, host, creation_time NUM, status "running|terminated",
getTunnel(TUNNELID)             #direct_domains, ssh_port, domain_names STR_ARR, shared_tunnel BOOL, tunnel_identifier,
                                #no_ssl_bump_domains, metadata.command
/USERNAME/tunnels/TUNNELID
- DELETE
deleteTunnel(TUNNELID)          #Returns OBJ: id, result BOOL


EXTRA PARAMETERS ==>            #Using local testing can require the following extra parameters:
                                #  - CAPAB_OBJ:
                                #     - tunnel-identifier STR
