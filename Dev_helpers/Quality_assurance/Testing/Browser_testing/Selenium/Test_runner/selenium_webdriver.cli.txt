
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SELENIUM WEBDRIVER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━┛

SERVER ==>                    #  - specific to one/several browsers or for online services (e.g. SauceLabs)
                              #  - launches browser and controls it using a REST API ("Webdriver wire protocol"):
                              #     - browser must be available locally in $PATH
                              #     - communicates over HTTP with client, so can be in a different place (e.g. SauceLabs or on 
                              #       mobile)
                              #     - to run headlessly (automatic for SauceLabs and PhantomJS), use:
                              #         xvfb-run --server-args="-screen 0, WIDTHxHEIGHTx24" SERVER_COMMAND 
                              #       instead of just SERVER_COMMAND
                              #  - available:
                              #     - selenium-standalone: natively includes ChromeDriver, ghostdriver, FirefoxDriver,
                              #       OperaDriver, InternetExplorerDriver, SafariDriver
                              #        - Node module selenium-standalone installs binary start-selenium, which starts with:
                              #            selenium-standalone install
                              #            selenium-standalone start -- -role hub
                              #     - PhantomJS: phantomjs --webdriver=8080 --webdriver-selenium-grid-hub=http://127.0.0.1:4444
                              #     - ChromeDriver
                              #     - FirefoxDriver 
                              #     - OperaDriver
                              #     - InternetExplorerDriver (Windows only)
                              #     - SafariDriver
                              #     - Appium (iOS/Android native/hybrid/web app)

CLIENT ==>                    #  - a client in a specific language ("webdriver language bindings") communicates with the server
                              #  - JavaScript client: selenium-webdriver (official), WebdriverJS or wd 
                              #    (maintained by SauceLabs). This doc is for wd and selenium-webdriver.

MOCHA ==>                     #To use with Mocha:
                              #  - use -t 0
                              #  - make it|before|after[Each]() return BROWSER 
                              #  - use chai-as-promised and CHAI-AS-PROMISED.transferPromiseness
                              #  - only browser.init() once, but refesh page for each test case
                              #Which means:
                              #  CHAI-AS-PROMISED.transferPromiseness = WD.transferPromiseness;
                              #  var browser = WD.remote(...);
                              #  before(function() { return browser.init(...); });
                              #  after(function() { return browser.quit(); });
                              #  describe(STR, function() {
                              #    beforeEach(function() { return browser.get( URL ); });
                              #    it( STR, function() { return browser...should.eventually|become(...) });
                              #  });

                                  ┌──────────────────────────┐
                                  │   DESIRED CAPABILITIES   │
                                  └──────────────────────────┘

CAPAB_OBJ ==>                 #Options of webdrivers drivers ("Desired Capabilities"). Possible members are:

ALL ==>                       #
browserName                   #"chrome", "firefox", "phantomjs", "opera", "safari", "internet explorer", "android", "iPhone" 
                              #"iPad"
version                       #STR
platform                      #  - selenium WebDriver: "WINDOWS", "XP", "VISTA", "MAC", "LINUX", "UNIX", "ANDROID"
                              #  - sauceLabs: "Windows NT", "Mac OS X", "Linux" (also sometimes the ones above)

'webdriver.remote.sessionId'  #SESSIONID
javascriptEnabled             #Déf: true
cssSelectorsEnabled           #Déf: true (read-only) (not present on latest iOS)
takesScreenshot               #Déf: true (read-only)

NOT OPERA, SAFARI, IOS ==>    #
handlesAlert                  #Can interact with popups (déf: true, except PhantomJS) (read-only)

NOT OPERA, IE, SAFARI ==>     #
locationContextEnabled        #(déf: true, except PhantomJS and iOS latest versions)
webStorageEnabled             #Can use *LocalStorage* (déf: true, except PhantomJS and iOS latest versions)

NOT OPERA, IE, SAFARI ==>     #
acceptSslCerts                #Accept all SSL certs (déf: true, except PhantomJS)
rotatable                     #Can rotate orientation (déf: true only for Android)
browserConnectionEnabled      #Can get|set browser internet connection (déf: true on Firefox, Android, false on others)
applicationCacheEnabled       #Can interact with application cache (true on Firefox, Android, false on others)

NOT OPERA, ANDROID, SAFARI ==>#
nativeEvents                  #Use native events instead of simulation (false on Firefox, true on others)

NOT OPERA, IE, SAFARI, 
ANDROID ==>                   #
databaseEnabled               #Can interact with IndexedDB (true on Firefox, iOS early versions, false on others)

ONLY PHANTOMJS, OPERA, IE ==> #
proxy                         #Déf PhantomJS: { proxyType: "direct" }
                              #Déf Opera: { proxyType: "UNSPECIFIED", autodetect: false }
                              #Déf IE: { http|sslProxy: "127.0.0.1:4443", proxyType: "manual" }
                              #Other members (at least for Opera): http|ftp|ssl|socks|noProxy, socksUsername|Password,
                              #proxyAutoconfigUrl

ONLY IE ==>                   #
elementScrollBehavior         #Whether to scroll to elements top "0" (déf) or bottom "1"
unexpectedAlertBehavior       #For unhandled alert: "accept", "ignore" or "dismiss" (déf)
ignoreProtectedModeSettings   #Déf: false.
initialBrowserUrl             #Déf: "http://localhost:17643/"
ignoreZoomSettings            #Don't check zoom initial level is 100%. Déf: false.
enablePersistentHover         #Continuously fire mouse events to simulate mouse hovering (Déf: true)
enableElementCacheCleanup     #Déf: true.
requireWindowFocus            #Déf: false.
browserAttachTimeout          #Connection to IE timeout. Déf: 0.
ie.forceCreateProcessApi      #Déf: false.
ie.browserCommandLineSwitches #Command line switches (ie.forceCreateProcessApi must be true) (Déf: "")
ie.ensureCleanSession         #Clears cache, cookies, history, saved form data at init. (Déf: false)
ie.usePerProcessProxy         #Déf: false

ONLY OPERA ==>
opera.binary                  #Déf: "/usr/bin/opera"
opera.launcher                #Déf: "/home/ether/.launcher/launcher-linux-amd64"
opera.runner                  #Déf: "com.opera.core.systems.runner.launcher.OperaLauncherRunner"
opera.arguments.VAR           #Déf: { pd: "/tmp/DIR", debugproxy: "127.0.0.1:12558" }
opera.product                 #Déf: "Opera Desktop"
opera.host                    #Déf: "127.0.0.1"
opera.port                    #Déf: 12558
opera.idle                    #Déf: false
opera.detach                  #Déf: false
opera.autostart               #Déf: true
opera.no_restart              #Déf: false
opera.no_quit                 #Déf: false
opera.backend                 #Déf: "software"
opera.logging.level           #Déf: "INFO"
opera.profile.base64          #Binary as Base64

ONLY CHROME ==>
takesHeapScreenshot           #True all. Only Chrome
chrome                        #{ userDataDir DIR }. Only Chrome

ONLY SAFARI ==>
secureSsl                     #True all.

ONLY IOS LATEST VERSIONS ==>  #
warnings                      #
safari                        #True

ONLY PHANTOMJS ==>
driverName                    #Déf: "ghostdriver". Only PhantomJS
driverVersion                 #Only PhantomJS
