
                  
   BROWSERSTACK   
                  


SAUCELABS VS BROWSERSTACK ==> #Advantages of SauceLabs:
                              #  - pricing:
                              #     - cheaper manual testing
                              #     - free for open source
                              #  - browsers+OS: 
                              #     - support for Linux
                              #     - support for Android 4.3
                              #     - support for Appium (app automation)
                              #  - features:
                              #     - saved screencast
                              #     - status images
                              #     - better support for updating passed|failed tests
                              #     - make jobs/sessions public, or restricted using a token
                              #     - slightly better sessions info REST API, including for bugs
                              #     - slightly better unit testing REST API
                              #Advantages of BrowserStack:
                              #  - pricing: automated tests include nearly-unlimited minutes
                              #  - browsers+OS: more support for Opera
                              #  - easier testing of local folders, but Karma solves the problem

                                  ┌────────────┐
                                  │   MANUAL   │
                                  └────────────┘

MANUAL TESTING ==>            #Can be:
                              #  - on the website 
                              #  - using the direct URL http://[USERNAME:ACCESS_KEY@]www.browserstack.com/start#... 
                              #    where ... are GET parameters:
                              #     - url URL|FILE (FILE -> see local testing below)
                              #     - os|browser[_version]
                              #     - full_screen BOOL (def: false)
                              #     - resolution WIDTHxHEIGHT
                              #     - scale to fit BOOL (def: true)
                              #     - speed: 1 for fast speed (def), 2 for high quality
                              #     - start BOOL (def: false): autostart mode
                              #     - src STR: tracking parameter
                              #  - using Chrome extension BrowserStack Loader
                              #Can capture bugs with screenshots.

                                  ┌─────────────────┐
                                  │   SCREENSHOTS   │
                                  └─────────────────┘

SCREENSHOTS API ==>           #http://[USERNAME:ACCESS_KEY@]www.browserstack.com/screenshots
                              #Can also use website.
                              #Generated screenshots are available under:
                              #  http://www.browserstack.com/screenshots/SESSIONID/[thumb_]OS_BROWSER_VERSION.jpg|png
                              #where OS and BROWSER are abbreviated versions.
screenshots - POST            #  - url URL|FILE (FILE -> see local testing below)
                              #  - os|browser[_version], device
                              #  - orientation "portrait|landscape"
                              #  - mac|win_res: see online for available ones
                              #  - quality "Original|Compressed"
                              #  - wait_time NUM: time to wait before taking screenshot (2|5|10|15|20|60)
                              #  - callback_url URL: send screenshot to URL instead
                              #Response:
                              #  - job_id SESSIONID
                              #  - POST data, except os|browser[_version], url
                              #  - screenshots OBJ_ARR:
                              #     - os|browser[_version]
                              #     - url URL (not of the screenshots)
                              #     - state "pending|done"
                              #     - id SCREENSHOTID
screenshots/SESSIONID.json    #Same as response above except screenshots also has members:
                              #  - thumb|image_url URL
                              #  - created_at DATE_STR
screenshots/browsers.json     #OBJ_ARR:
                              #  - os|browser[_version]
                              #  - device

screenshooter                 #Command line using the REST API (Ruby Gem)
                              #Provide credentials:
                              #  - ENVVAR BROWSERSTACK_USERNAME|TOKEN
                              #  - or ~/.browserstack, with content USERNAME:ACCESS_KEY
screenshooter shoot FILE      #FILE is YAML:
                              #  - url URL
                              #  - browsers OBJ:
                              #     - browser|os[_version]
                              #When done, returns URL of the collection
screenshooter shoot -u URL ...
-b FILE                       #
-w                            #wait_time of 2
-o                            #Open screenshots in preferred browser
screenshooter browsers list   #
screenshooter browsers search 
STR                           #

                                  ┌─────────────────┐
                                  │   E2E TESTING   │
                                  └─────────────────┘

TIMEOUTS ==>                  #Will timeout:
                              #  - 1.5mins without activity
                              #  - 2.5mins without commands received
                              #  - 5 mins of connection (automated testing, see below)
                              #  - 2 hours of same session (1 hours with automated testing)

SELENIUM TESTING ==>          #  - Connect to "hub.browserstack.com" (port 80)
                              #  - use CAPAB_OBJ browserstack.user|key USERNAME|ACCESS_KEY 
                              #    (my account: mickaelhebert1, WggzfN2vtsSwsSsRGPxQ)
                              #  - use other CAPAB_OBJ

CAPAB_OBJ ==>                 #Combinations can be seen at http://www.browserstack.com/automate/node#setting-os-and-browser
DESKTOP ==>
browser[_version]             #"IE", "Firefox", "Safari", "Chrome", "Opera" (lowercase with unit test API)
                              #browser_version is NUM.NUM2
os[_version]                  #"Windows" "XP|7|8|8.1", "OS X" "Snow Leopard|Lion|Mountain Lion|Mavericks" (no Linux)

MOBILE ==>
os, device                    #"ios" "iPhone|iPad NUM", "android" "DEVICE"
browser                       #"iPad|iPhone|Android"
deviceOrientation             #"portrait|landscape"

resolution                    #"NUMxNUM2" (see online for the possible ones)

project                       #STR: sets of build (tested project)
build                         #STR: sets of tests (one execution of tests)
name                          #STR: single test (test suite/file)

browserstack.debug            #Automatic screenshots


REST API FOR INFO ==>         #https://[USERNAME:ACCESS_KEY@]www.browserstack.com/automate/
                              #On list, can use GET parameters limit NUM and status "running|done|failed"
                              #Can also use website.

plan.json                     #  - parallel_sessions_running NUM
                              #  - parallel_sessions_max_allowed NUM
                              #  - automate_plan STR
recycle_key.json - PUT        #Create a new ACCESS_KEY

browsers.json                 #OBJ_ARR: browser[_version], os[_version], device

projects.json                 #OBJ_ARR:
                              #  - automation_project:
                              #     - user_id NUM
                              #     - name (CAPAB_OBJ "project")
                              #     - id PROJECTID
                              #     - group_id PROJECTGROUPID
                              #     - created|updated_at DATE_STR
projects/PROJECTID.json       #  - project:
                              #     - same as above
                              #     - builds OBJ_ARR (one for each build):
                              #        - automation_build:
                              #           - user_id NUM
                              #           - name (CAPAB_OBJ "build")
                              #           - hashed_id BUILDID
                              #           - automation_project_id PROJECTID
                              #           - group_id GROUPPROJECTID
                              #           - created|updated_at DATE_STR
                              #           - duration NUM
                              #           - status "done|running|failed"
                              #           - id, tags, delta: not sure what they are
builds.json                   #OBJ_ARR:
                              #  - automation_build:
                              #     - hashed_id BUILDID
                              #     - name ("build")
                              #     - duration NUM
                              #     - status "done|running|failed"
builds/BUILDID/sessions.json  #OBJ_ARR (one for each test):
                              #  - automation_session:
                              #     - os|browser[_version], device
                              #     - build|project_name ("build|project")
                              #     - hashed_id SESSIONID
                              #     - name ("test")
                              #     - duration NUM
                              #     - status "done|running|failed"
                              #     - logs URL (Selenium server logs)
                              #     - reason STR: to stop, e.g. "CLIENT_STOPPED_SESSION"
builds/BUILDID/sessions/      
SESSIONID.json                #Same as above
builds/BUILDID/sessions/      #Can only change:
SESSIONID.json - PUT          #  - status "completed|error" (change to status "done|error")
builds/BUILDID/sessions/
SESSIONID/logs                #Returns logs as STR

                                  ┌──────────────────┐
                                  │   UNIT TESTING   │
                                  └──────────────────┘

REST API FOR UNIT TESTING ==> #http://[USERNAME:ACCESS_KEY@]api.browserstack.com/3/
                              #If error, response { message STR, errors OBJ_ARR }
                              #Can also use JavaScript bindings browserstack (Node module 1.0.1):
                              #  - BROWSERSTACK.createClient(OBJ) -> CLIENT:
                              #     - username|password 
                              #     - version (def: 3)
                              #     - server (def: { host: "api.browserstack.com", port: 80 })
                              #  - CLIENT.FUNC(...) use a final CALLBACK(ERROR, VAL) (in this doc says "returns VAL")

worker - POST                 #Starts a session loading a HTML page.
CLIENT.createWorker(OBJ)      #GET parameters:
                              #  - all CAPAB_OBJ members
                              #     - With CLIENT.createWorker() can use browser_versions "latest"
                              #     - browser is in lowercase
                              #  - url URL|FILE (FILE -> see local testing below)
                              #  - timeout NUM: for connecting (def: 300, 0 is not unlim)
                              #Returns when HTML starts loading:
                              #  - id WORKERID
                              #  - url URL
                              #Does not stop the session, so should do it (need to pool CLIENT.getWorker(WORKERID).status or
                              #emit an event on the page)
worker - DELETE               #
CLIENT.terminateWorker        #Stops session
(WORKERID)                    #Returns { time UINT } (how long it ran)
worker/WORKERID               #Returns {} if terminated. Otherwise:
CLIENT.getWorker(WORKERID)    #  - status "queue|running"
                              #  - browser|os[_version]
                              #  - id WORKERID
                              #  - browser_url: BrowserStack website URL of the session
workers                       #
CLIENT.getWorkers()           #Same but all as OBJ_ARR ([] if none running)
worker/WORKERID/screenshot.
json|xml|png                  #Get a screenshot/snapshot of current state
CLIENT.takeScreenshot(WORKRID)#Returns raw content for png, { url URL } for json|xml (online link)

browsers?flat=true            #OBJ_ARR with members device, os[_version], browser[_version]
CLIENT.getBrowsers()          #GET parameters: all BOOL (beta browsers)
CLIENT.getLatest([BROWSERSTR])#Returns latest browser_version STR|OBJ_ARR

status                        #If run out of time { message STR }. Otherwise:
CLIENT.getApiStatus()         #  - used|total_available_time NUM
                              #  - running_sessions|sessions_limit NUM


browserstack-runner           #Command line (Node module 0.1.14) wrapping the REST API
                              #Launches sessions, but does not stop them.
                              #Uses a config file is at ./browserstack.json (or ENVVAR BROWSERSTACK_JSON) that can be 
                              #generated with browserstack-runner init and has members:
                              #  - username|key (or ENVVAR BROWSERSTACK_USERNAME|KEY)
                              #  - test_framework "qunit|jasmine[2]|mocha"
                              #  - test_path FILE_ARR (launches BrowserStackLocal automatically)
                              #  - browsers CAPAB_OBJ_ARR
                              #  - timeout NUM
--verbose                     #

                                  ┌───────────────────┐
                                  │   LOCAL TESTING   │
                                  └───────────────────┘

BrowserStackLocal ACCESS_KEY  #Command line to run to allow unit test of files hosted on local servers (not only URL):
HOST[,PORT[,SSL]]             #  - Must a local running server, not just "localhost" with no running server.
[,HOST2,PORT2,SSL2]...        #  - However, can use -f DIR instead of HOST,PORT,SSL to create a temporary server at 
                              #      http://USERNAME.browserstack.com/ 
                              #    pointing to local folder DIR (can only be used by BrowserStack REST API and services)
                              #    It seems it is necessary to relaunch the binary when files changed
                              #Must download binary from website
                              #HOST2, etc.: try those ones if first doesn't work.
                              #PORT déf: 80. SSL is 0|1 (déf: 1)
                              #Can use Chrome extension BrowserStack Local too to do it (can do it from the website)
-v                            #Verbose
-force                        #Kill other running instances
-onlyAutomate                 #Works only for Automate, not Manual testing or Screenshots
-localIdentifier ID           #When using several local connections. URL will be the same, but client will need to specify
                              #a local|tunnelIdentifier
-proxyHost|Port|User|Pass     #When accessing a local server through a proxy
-skipCheck                    #Connects to an offline server


new BROWSERSTACKTUNNEL-WRAPPER#Alternative to the binary, using Node module (1.3.0) (cannot use -f DIR)
(OBJ)                         #Returns a BROWSERSTACKTUNNEL.
                              #  - key ACCESS_KEY
                              #  - hosts OBJ_ARR: name, port, sslFlag
                              #  - osx|linux32|64|win32Bin FILE (otherwise in déf. bin directory)
                              #  - tunnelIdentifier STR
                              #  - skipCheck BOOL
                              #  - v BOOL
                              #  - proxyUser|Pass|Port|Host (can also use ENVVAR PROXY_USER, etc.)
BROWSERSTACK.start(FUNC(EROR))#Starts a local connection (like using BrowserStackLocal binary)
BROWSERSTACK.stop(FUNC(ERROR))#


EXTRA PARAMETERS ==>          #Running using BrowserStackLocal [can] require those extra parameters:
                              #  - CAPAB_OBJ: 
                              #     - browserstack.local true
                              #     - browserstack.localIdentifier ID
                              #  - manual testing direct URL GET parameters:
                              #     - local true
                              #     - host_ports "HOST,PORT,etc."
                              #     - folder DIR
                              #     - use_cmd_local true: use running BrowserStackLocal instead of launching it (like the ones
                              #       above do)
                              #  - www.browserstack.com/screenshots - POST: should use POST parameter local: true
                              #  - browserstack-runner config file:
                              #     - proxy { host, port, username, password }
                              #     - can also use ENVVAR TUNNEL_ID (def: ENVVAR TRAVIS_JOB_ID)
