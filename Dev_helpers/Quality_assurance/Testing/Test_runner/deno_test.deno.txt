
             
   DENO_TEST  
             



VERSION ==>                       #See Deno

deno test [UPATH|DIR...]          #Run tests
 [-- ARG...]                      #Evaluate the given modules, run all tests declared with 'Deno.test()' and report results to standard output.
                                  #Directory arguments are expanded to all contained files matching the glob {*_,*.,}test.{js,mjs,ts,mts,jsx,tsx}
--trace-ops                       #Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.
--doc                             #Type-check code blocks in JSDoc and Markdown
--fail-fast[=NUM]                 #Stop after N errors. Defaults to stopping after first failure.
--allow-none                      #Don't return error code if no test files are found
--shuffle[=NUM]                   #Shuffle the order in which the tests are run
--parallel                        #Run test files in parallel
ENVVAR DENO_JOBS                  #NUM of parallel files with --parallel. Def: NUM of CPUs

--no-run                          #Cache modules, but don't run files
--filter GLOB                     #Run files with this string or pattern in the bench name

Deno.test(['TITLE', ]             #Top-level test
 [TOPTS, ][FUNC(T)[->>]])         #'TITLE' is TOPTS.name (def: FUNC.name)
                                  #FUNC is TOPTS.fn

T.step(...)->>BOOL                #Nested test. Same arguments as Deno.test(...) except must use either TOPTS or 'TITLE'|FUNC
                                  #>BOOL awaits nested test completion and returns whether it failed
                                  #  - can be used to serialize|parallelize order
T.parent                          #T2. Only with nested tests.

TOPTS.fn                          #FUNC(T)[->>]

TOPTS|T.name                      #'TITLE'
T.origin                          #'URL'

TOPTS.ignore                      #BOOL (def: false). Exclude test
TOPTS.only                        #BOOL (def: false). Only include this test
                                  #Not with nested tests.

TOPTS.permissions                 #Like PERMISSIONS.request(). Either:
                                  #  - OBJ:
                                  #     - key is read|write|...
                                  #     - value is one of:
                                  #        - STR_ARR|BOOL: depending on PERMISSION type
                                  #        - 'inherit': same as process
                                  #  - 'inherit' (def)
                                  #  - 'none'
                                  #Not with nested tests.

TOPTS.sanitizeExit                #If true (def), process exits fail test instead
TOPTS.sanitizeResources           #If true (def), fail test if it opens a RESOURCE without closing it
TOPTS.sanitizeOps                 #If true (def), fail test if it starts an OP or microtask without awaiting it
