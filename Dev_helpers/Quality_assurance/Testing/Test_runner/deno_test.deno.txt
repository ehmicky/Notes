
             
   DENO_TEST  
             



ALTERNATIVES ==>                  #See Mocha. TODO???

VERSION ==>                       #See Deno

deno test [UPATH|DIR...]          #Run tests.
 [-- ARG...]                      #If DIR, use DIR/**/[..._|.]test.EXT, with EXT js[x]|mjs|ts[x]|mts
                                  #Def DIR: '.'
                                  #ARG... are passed as argv

--allow-none                      #Exit code 0 if no test files found
--no-run                          #Only cache files, do not run tests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.test(['TITLE', ]             #Top-level test
 [TOPTS, ][FUNC(T)[->>]])         #'TITLE' is TOPTS.name (def: FUNC.name)
                                  #FUNC is TOPTS.fn
TOPTS|T.name                      #'TITLE'
TOPTS.fn                          #FUNC(T)[->>]

T.step(...)->>BOOL                #Nested test. Same arguments as Deno.test(...) except must use either TOPTS or 'TITLE'|FUNC
                                  #>BOOL awaits nested test completion and returns whether it failed
                                  #  - can be used to serialize|parallelize order
T.parent                          #T2. Only with nested tests.

T.origin                          #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORCHESTRATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test [UPATH|DIR...]          #If DIR, use DIR/**/[..._|.]test.EXT, with EXT js[x]|mjs|ts[x]|mts
                                  #Def DIR: '.'

--filter GLOB                     #Filter by test 'TITLE'

TOPTS.ignore                      #BOOL (def: false). Exclude test
TOPTS.only                        #BOOL (def: false). Only include this test
                                  #Not with nested tests.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--fail-fast[=NUM]                 #Stop after NUM (def: 1) test failure. Enabled by default.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--trace-ops                       #Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORT ==>                        #TAP on stdout


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--parallel                        #Run test files in parallel
ENVVAR DENO_JOBS                  #NUM of parallel files with --parallel. Def: NUM of CPUs

--shuffle[=NUM]                   #Shuffle the order in which the tests are run


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--doc                             #Type-check code blocks in JSDoc and Markdown


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SANITIZE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOPTS.permissions                 #Like PERMISSIONS.request(). Either:
                                  #  - OBJ:
                                  #     - key is read|write|...
                                  #     - value is one of:
                                  #        - STR_ARR|BOOL: depending on PERMISSION type
                                  #        - 'inherit': same as process
                                  #  - 'inherit' (def)
                                  #  - 'none'
                                  #Not with nested tests.

TOPTS.sanitizeExit                #If true (def), process exits fail test instead
TOPTS.sanitizeResources           #If true (def), fail test if it opens a RESOURCE without closing it
TOPTS.sanitizeOps                 #If true (def), fail test if it starts an OP or microtask without awaiting it
