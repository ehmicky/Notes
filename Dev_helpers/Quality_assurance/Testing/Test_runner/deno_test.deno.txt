
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   DENO_TEST   ┃
                                  ┗━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See Mocha

VERSION ==>                       #See Deno

ASSERTIONS ==>                    #See deno assertions
DIFF TESTING ==>                  #See deno snapshots
GENERIC MOCKING ==>               #See deno mock
TIMERS MOCKING ==>                #See deno time
TEST COVERAGE ==>                 #See deno coverage
TYPESCRIPT TESTS TESTING ==>      #See deno test types
BENCHMARKS ==>                    #See deno bench

testing/bdd                       #BDD. std library

node:test                         #Can be used instead of Deno libraries

                                  ┌──────────┐
                                  │   TEST   │
                                  └──────────┘

Deno.test(['TITLE', ]             #Top-level test
 [TOPTS, ][FUNC(T)[->>]])         #'TITLE' is TOPTS.name (def: FUNC.name)
                                  #FUNC is TOPTS.fn
BDD.test|it(...)                  #Like Deno.test(...)
TOPTS|T.name                      #'TITLE'
TOPTS.fn                          #FUNC(T)[->>]

TEST FAILURE ==>                  #Throwing an ERROR. Prints its ERROR.message|stack normally

T.step(...)->>BOOL                #Nested test. Same arguments as Deno.test(...) except must use either TOPTS or 'TITLE'|FUNC
                                  #>BOOL awaits nested test completion and returns whether it failed
                                  #  - must be awaited
                                  #  - can be used to parallelize, but only if TOPTS.sanitize* false
T.parent                          #T2. Only with nested tests.

BDD.describe(...)->SUITE          #Like Deno.test(...) except only for parent tests.
                                  #Tests declared within FUNC() are automatically children:
                                  #  - they do not return >BOOL
                                  #  - no parent T
BDD.it|describe(SUITE, ...)
TOPTS.suite                       #Parent SUITE, even if not within SUITE's FUNC(), to avoid identation

T.origin                          #import.meta.url of top-level test file

                                  ┌───────────────────┐
                                  │   ORCHESTRATION   │
                                  └───────────────────┘

TOPTS.before|afterAll|Each        #FUNC()[->>] run before|after all|each test of the SUITE
                                  #Only with describe(...)
BDD.beforeEach|afterEach
BDD.before[All]|after[All]        #Same for all tests for all files

this                              #T. Only with it|before*|after*(...)

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

--[no-]config|-c CONF_FILE        #See Deno doc

                                  ┌───────────────┐
                                  │   SELECTION   │
                                  └───────────────┘

deno test [UPATH|DIR...]          #Run tests.
 [-- ARG...]                      #If DIR, use DIR/**/[..._|.]test.EXT or DIR/**/__tests__/**/*.EXT, with EXT js[x]|mjs|ts[x]|mts
                                  #Def DIR: '.'
                                  #ARG... are passed as Deno.args
--permit-no-files                 #Exit code 0 if no test files found. Only when targetting DIRs
--ignore=PATH,...                 #Ignore files. Only for ones targetted from DIRs
CONFIG.exclude
CONFIG.test.include|exclude       #'UPATH|DIR_GLOB'_ARR to include|exclude

--no-run                          #Only cache files, do not run tests

--filter=GLOB|/REGEXP/            #Filter by test 'TITLE'
                                  #Only targets top-level tests 'TITLE', which also include their children

TOPTS.ignore                      #BOOL (def: false). Exclude test
Deno.test.ignore(...)
BDD.it|describe.ignore|skip(...)  #Same

TOPTS.only                        #BOOL (def: false). Only include this test
                                  #Not with nested tests.
Deno.test.only(...)
BDD.it|describe.only(...)         #Same but works on nested tests.

                                  ┌───────────────┐
                                  │   EXECUTION   │
                                  └───────────────┘

--fail-fast[=NUM]                 #Stop after NUM (def: 1) test failure

--watch
--no-clear-screen                 #See Deno doc

ENVVAR DENO_SLOW_TEST_TIMEOUT=NUM #Every NUM secs (def: 60), print a message if a long test is still running

                                  ┌───────────┐
                                  │   DEBUG   │
                                  └───────────┘

--inspect[-brk|wait][=HOSTNAME]   #See Deno doc

                                  ┌─────────────────┐
                                  │   ENVIRONMENT   │
                                  └─────────────────┘

--unstable-*
--quiet|-q
--v8-flags
--seed=NUM
--location=URL
--import-map=IMPORT_MAP_FILE
--no-remote
--cached-only
--reload|-r
--no-npm
--[no-]node-modules-dir[=DIR]
--unsafely-ignore-certificate
  -errors[=HOSTNAME,...]
--cert                            #See Deno doc

--allow-*
--no-prompt                       #See Deno doc
TOPTS.permissions                 #Like WORKER OPTS.deno.permissions
                                  #Not with nested tests.

TOPTS.sanitizeExit                #If true (def), process exits fail test instead
TOPTS.sanitizeResources           #If true (def), fail test if it opens an I/O resource without closing it
TOPTS.sanitizeOps                 #If true (def), fail test if it starts an OP or microtask without awaiting it

                                  ┌───────────────┐
                                  │   REPORTING   │
                                  └───────────────┘

--reporter=REPORTER               #Among:
                                  #  - 'pretty' (def): based on TAP, but prettified
                                  #  - 'tap'
                                  #  - 'dot'
                                  #  - 'junit'
                                  #On stdout
--junit-path=PATH                 #

--hide-stacktraces                #Do not print ERROR stack traces

                                  ┌─────────────────┐
                                  │   PARALLELISM   │
                                  └─────────────────┘

--parallel                        #Run test files in parallel. Def: serial
                                  #Tests within a file are always serial, unless using Promise.all() on child tests
                                  #Test files all run in same process, whether parallel|serial
ENVVAR DENO_JOBS                  #NUM of parallel files at once with --parallel. Def: NUM of CPUs

--shuffle[=NUM]                   #Shuffle the order in which the tests are run. NUM is seed.
                                  #Reason: catch dependencies between tests

                                  ┌───────────┐
                                  │   JSDOC   │
                                  └───────────┘

--doc                             #Runs ```js[x]|ts[x] code blocks in JSDoc|Markdown
                                  #Those can contain assertions

                                  ┌────────────────┐
                                  │   TYPESCRIPT   │
                                  └────────────────┘

--[no-]check[=STR]                #See Deno doc
