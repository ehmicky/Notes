
             
   DENO_TEST  
             



TODO:
  - document std/test/types
  - alternatives comparison

ALTERNATIVES ==>                  #See Mocha.

VERSION ==>                       #See Deno

ASSERTIONS ==>                    #See deno assertions
DIFF TESTING ==>                  #See deno snapshots
GENERIC MOCKING ==>               #See deno mock
TIMERS MOCKING ==>                #See deno time
TEST COVERAGE ==>                 #See deno coverage
TYPESCRIPT TESTS TESTING ==>      #See deno test types

testing/bdd.ts                    #BDD. std library


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.test(['TITLE', ]             #Top-level test
 [TOPTS, ][FUNC(T)[->>]])         #'TITLE' is TOPTS.name (def: FUNC.name)
                                  #FUNC is TOPTS.fn
BDD.it(...)                       #Like Deno.test(...)
TOPTS|T.name                      #'TITLE'
TOPTS.fn                          #FUNC(T)[->>]

TEST FAILURE ==>                  #Throwing an ERROR. Prints its ERROR.message|stack normally

T.step(...)->>BOOL                #Nested test. Same arguments as Deno.test(...) except must use either TOPTS or 'TITLE'|FUNC
                                  #>BOOL awaits nested test completion and returns whether it failed
                                  #  - must be awaited
                                  #  - can be used to parallelize, but only if TOPTS.sanitize* false
T.parent                          #T2. Only with nested tests.

BDD.describe(...)->SUITE          #Like Deno.test(...) except only for parent tests.
                                  #Tests declared within FUNC() are automatically children:
                                  #  - they do not return >BOOL
                                  #  - no parent T
BDD.it|describe(SUITE, ...)
TOPTS.suite                       #Parent SUITE, even if not within SUITE's FUNC(), to avoid identation

T.origin                          #import.meta.url of top-level test file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORCHESTRATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOPTS.before|afterAll|Each        #FUNC()[->>] run before|after all|each test of the SUITE
                                  #Only with describe(...)
BDD.before|afterAll|Each          #Same for all tests for all files

this                              #T. Only with it|before*|after*(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--[no-]config|-c CONF_FILE        #See Deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test [UPATH|DIR...]          #Run tests.
 [-- ARG...]                      #If DIR, use DIR/**/[..._|.]test.EXT, with EXT js[x]|mjs|ts[x]|mts
                                  #Def DIR: '.'
                                  #ARG... are passed as Deno.args
--allow-none                      #Exit code 0 if no test files found. Only when targetting DIRs
--ignore=PATH,...                 #Ignore files. Only for ones targetted from DIRs
CONFIG.test.files.include|exclude #'UPATH|DIR'_ARR to include|exclude

--no-run                          #Only cache files, do not run tests

--filter=GLOB|/REGEXP/            #Filter by test 'TITLE'
                                  #Only targets top-level tests 'TITLE', which also include their children

TOPTS.ignore                      #BOOL (def: false). Exclude test
BDD.it|describe.ignore|skip(...)  #Same

TOPTS.only                        #BOOL (def: false). Only include this test
                                  #Not with nested tests.
BDD.it|describe.only(...)         #Same but works on nested tests.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--fail-fast[=NUM]                 #Stop after NUM (def: 1) test failure

--watch
--no-clear-screen                 #See Deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--inspect[-brk|wait][=HOSTNAME]   #See Deno doc

--trace-ops                       #Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENVIRONMENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--unstable
--quiet|-q
--v8-flags
--seed=NUM
--location=URL
--import-map=IMPORT_MAP_FILE
--lock-write
--no-remote
--cached-only
--reload|-r
--no-npm
--[no-]node-modules-dir[=DIR]
--unsafely-ignore-certificate
  -errors[=HOSTNAME,...]
--cert                            #See Deno doc

--allow-*
--no-prompt                       #See Deno doc
TOPTS.permissions                 #Like PERMISSIONS.request(). Either:
                                  #  - OBJ:
                                  #     - key is read|write|...
                                  #     - value is one of:
                                  #        - STR_ARR|BOOL: depending on PERMISSION type
                                  #        - 'inherit': same as process
                                  #  - 'inherit' (def)
                                  #  - 'none'
                                  #Not with nested tests.

TOPTS.sanitizeExit                #If true (def), process exits fail test instead
TOPTS.sanitizeResources           #If true (def), fail test if it opens a RESOURCE without closing it
TOPTS.sanitizeOps                 #If true (def), fail test if it starts an OP or microtask without awaiting it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORT ==>                        #Based on TAP, but prettified.
                                  #On stdout. Cannot configure.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--parallel                        #Run test files in parallel. Def: serial
                                  #Tests within a file are always serial, unless using Promise.all() on child tests
                                  #Test files all run in same process, whether parallel|serial
ENVVAR DENO_JOBS                  #NUM of parallel files at once with --parallel. Def: NUM of CPUs

--shuffle[=NUM]                   #Shuffle the order in which the tests are run. NUM is seed.
                                  #Reason: catch dependencies between tests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--[no-]check[=STR]                #See Deno doc

--doc                             #Type-check ```js[x]|ts[x] code blocks in JSDoc|Markdown
