
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   GO_TEST   ┃
                                  ┗━━━━━━━━━━━━━┛

VERSION ==>                       #See Go language
RELATED DOCUMENTATION ==>         #See Go language

SNAPSHOT TESTING ==>              #See go_examples documentation
DATA-DRIVEN TESTING ==>           #See testing_quick documentation
TEST COVERAGE ==>                 #See go_test_cover documentation
BENCHMARKING ==>                  #See go_test_bench documentation

                                  ┌───────────┐
                                  │   TESTS   │
                                  └───────────┘

TEST FILES ==>                    #Must export Test*|Example*|Benchmark*()
                                  #Each FUNC is run in its own goroutine
TestNAME(*testing.T)              #Test function

import "testing"                  #
testing.T                         #Test function utilities

T.Name()->"TestNAME"              #

T.Helper()                        #Make function as test helper, i.e. file|line information not printed

                                  ┌────────────────┐
                                  │   ASSERTIONS   │
                                  └────────────────┘

T.Fail()                          #Mark test as failed. Keep current FUNC|goroutine going.
T.Failed()->BOOL                  #
T.FailNow()                       #Run T.Fail(), then exit current FUNC|goroutine (not others)

                                  ┌───────────────────┐
                                  │   ORCHESTRATION   │
                                  └───────────────────┘

T.Cleanup(FUNC())                 #Run FUNC() when test exits.
                                  #Last added is called first.

TestMain(*testing.M)              #When defined:
                                  #  - must explicitly call M.Run() to run other Test*(), i.e. allow beforeAll logic
                                  #  - must explicitly call os.Exit(EXIT_CODE_INT), i.e. allow afterAll logic
M.Run()->EXIT_CODE_INT            #

T.Run("NAME2", FUNC(*T))->BOOL    #Runs a sub-test, for nesting|grouping tests.
                                  #Done in a goroutine.
                                  #Blocks until complete (unless parallel)
                                  #BOOL is whether failed
                                  #  - if parallel, until T.Parallel() was called
                                  #With -run|bench, sub-test name is PARENT_NAME/NAME2
                                  #  - running only a specific sub-test also runs its parent once

                                  ┌───────────────┐
                                  │   SELECTION   │
                                  └───────────────┘

go test [IMPORT_PATHS]            #If IMPORT_PATHS is omitted:
                                  #  - current PACKAGE
                                  #  - no caching
                                  #  - imply -v
-run REGEXP                       #Only run tests whose "TestNAME" partially matches REGEXP
                                  #"" means ".*"

testdata/**                       #Always ignored, i.e. good for fixtures

T.SkipNow()                       #Mark test as skipped, then exit current FUNC|goroutine (not others)
T.Skipped()->BOOL                 #

go test -short                    #
testing.Short()->BOOL             #Returns whether -short CLI flag is set
                                  #To use in long tests, to T.Skip() them when that flag is set

                                  ┌───────────────┐
                                  │   EXECUTION   │
                                  └───────────────┘

go test [IMPORT_PATHS] [ARG...]   #Build TEST_BINARY using go_build *.go *_test.go
                                  #  - i.e. TEST_BINARY includes the source BINARY
                                  #Then executes TEST_BINARY ARG...
                                  #  - cached:
                                  #     - if files or CLI flags changed, not cached
                                  #     - convention to disable caching: using -count=1
-test.FLAG                        #Under the hood, CLI flags are passed to TEST_BINARY as -test.*
                                  #They can be specified to go test either as -* or as -test.*
                                  #Any -FLAG can be set after IMPORT_PATHS too, so should not be any conflicts
                                  #  - to distinguish, can prepend -args to ARG...
-c                                #Do not execute TEST_BINARY
-o PATH                           #TEST_BINARY's location.
                                  #Def: BINARY.test
-ANY_GO_RUN_FLAG                  #Note: -i implied -c

-list REGEXP                      #Prints all exported functions whose name partially match REGEXP

go test -failfast                 #Stops on first test failure

                                  ┌───────────────┐
                                  │   REPORTING   │
                                  └───────────────┘

DEFAULT REPORTING ==>             #Prints test summary to stdout (redirects any stderr to stdout instead)
                                  #If any test assertion fails, exit code 1

T.Log[f](...)                     #Similar to fmt.Println|Printf(...) except more test-friendly:
                                  #  - only printed on test failure or if -v CLI flag
T.Error[f](...)                   #Run T.Log[f](...) then t.Fail()
T.Fatal[f](...)                   #Run T.Log[f](...) then t.FailNow()
T.Skip[f](...)                    #Run T.Log[f](...) then t.SkipNow()

go test -v                        #Verbose. Force printing logs from all tests
T.Verbose()->BOOL                 #

go test -json                     #Prints test results as JSON
go test -OPT... |                 #Make go test output JSON stream instead.
 go tool test2json                #Includes verbose information:
                                  #  - test start|pass|fail
                                  #  - test pause|continue
                                  #  - test skip
                                  #  - test output|benchmark
go tool test2json TEST_BINARY
 -test.OPT...                     #Same
-t                                #Adds OBJ.Time 'TIMESTAMP' to each OBJ
-p PACKAGE                        #Adds OBJ.Package 'PACKAGE' to each OBJ

                                  ┌───────────┐
                                  │   SPEED   │
                                  └───────────┘

go test -timeout DURATION         #Def: "10m"

                                  ┌─────────────────┐
                                  │   PARALLELISM   │
                                  └─────────────────┘

go test -cpu NUM                  #Set GOMAXPROCS

go test -parallel NUM             #Maximum of parallel tests at once (def: GOMAXPROCS)
T.Parallel()                      #Mark as parallel test, i.e. run in parallel with other parallel tests
                                  #Noop unless -parallel CLI flag

                                  ┌─────────────┐
                                  │   LINTING   │
                                  └─────────────┘

go test -vet=RULE,...             #Run go vet RULEs
                                  #Can be "off"
                                  #Def: only bools|stringintconv|nilfunc|ifaceassert|atomic|printf|buildtag
