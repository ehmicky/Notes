
               
   STACK-UTILS  
               



ALTERNATIVES (PARSING) ==>        #See stacktrace.js

ALTERNATIVES (BEAUTIFYING) ==>    #See pretty-error

VERSION ==>                       #2.0.5
                                  #Node and Chrome only (V8-specific)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new STACK-UTILS([OPTS])           #
STACK-UTILS                       #Singleton with default OPTS

SCALL                             #Normalized CALL
SCALL.file                        #'PATH': strip OPTS.cwd (def: process.cwd())
SCALL.function                    #'[CLASS.]FUNC'
SCALL.method                      #'FUNC' (only if different from function)
SCALL.type                        #'TYPE'
SCALL.line|column                 #NUM
SCALL.constructor|native          #BOOL
SCALL.evalOrigin                  #'FILENAME'
SCALL.evalFile|Line|Column        #

UTILS.capture([NUM, ][FUNC])      #Retrieves current stack trace as CALL_ARR (see Node doc)
 ->CALL_ARR                       #Do it by using Error.prepareStackTrace() (only temporarily overriden)
                                  #If NUM, temporarily sets Error.stackTraceLimit
                                  #Can specify a mapping function OPTS.wrapCallSite(CALL)->CALL
UTILS.at([FUNC])->SCALL           #Retrieve last CALL normalized as SCALL
UTILS.captureString([NUM, ][FUNC])#Similar to capture() but return stack trace STR
 ->STR                            #Also apply UTILS.clean()

UTILS.parseLine(STR)->SCALL|null  #Parse single stack trace line into SCALL
                                  #Do it by using REGEXPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CLEANING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UTILS.clean(STR[, NUM])->STR      #STR is ERROR.stack
                                  #Normalize it by:
                                  #  - removing lines matching any OPTS.internals REGEXP_ARR
                                  #     - def: STACK-UTILS.nodeInternals(), i.e. Node core internals
                                  #     - can add package names with OPTS.ignoredPackages 'PACKAGE'_ARR
                                  #  - stripping OPTS.cwd (def: process.cwd())
                                  #  - triming whitespaces
                                  #  - normalizing Windows \ delimiters to /
                                  #NUM is indent (def: 0)
