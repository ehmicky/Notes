
               
   GITHUB_APPS  
               



OAuth apps:
  - deprecated older version of GitHub apps
  - could only "authorize", not "install"

Permissions:
  - specified on installation
  - are:
     - API actions (PERMISSIONS)
     - webhooks events
     - HTTP-based git access
        - including getting contents
        - separate permissions to get ./workflows
  - can choose repos
  - on repository, org, or account
  - can be installed by
     - a user
     - an org
        - only by org owner
        - or users with "GitHub app manager" role on specific app
           - can edit but not install|uninstall app
        - org user can request org owner
  - tokens are short-lived

Marketplace:
  - where it is installed
  - alternative:
     - GET /apps/APP/installations/new
     - in UI, for local dev
     - private app
  - logo
  - can set a price

Can use GitHub API

Webhooks:
  - on events
  - webhook secret: to authenticate calls
  - prefer https

APP_ID
  - ID of app, secret
  - can get with GET /app

APP_PRIVATE_KEY
  - app secret
  - PEM format (PKCS#1 RSAPrivateKey)
  - not stored by GitHub, i.e. only shown once

CLIENT_ID
  - OAuth CLIENT_ID, public
  - can get from app settings UI

CLIENT_SECRET
  - OAuth CLIENT_SECRET, private
  - can get from app settings UI

Setup URL:
  - redirected on after installation
     - or on update
  - meant for docs

Installation:
  - single installation of an app
  - INSTALLATION_ID:
     - available in:
        - webhook event payloads
        - GET /app/installations
        - GET /orgs/ORG/installation
        - GET /users/USER/installation
        - GET /repos/USER/REPO/installation

Authorization: Bearer APP_JWT [C] #Authenticate as a GitHub app, for all installation
APP_JWT                           #Must be signed with APP_PRIVATE_KEY
APP_JWT.ENVLOP.alg                #'RS256'
APP_JWT.PAYLOAD.iat               #DATE_NUM
APP_JWT.PAYLOAD.exp               #DATE_NUM. Max: iat + 10min
APP_JWT.PAYLOAD.iss               #'APP_ID'

POST /app/installations           #Get IAT ("Installation Access Token")
 /INSTALLATION_ID/access_tokens   #Must be authenticated as a GitHub app
                                  #GitHub app must have been installed
REQ.permissions.API_PERMISSION    #STR. Restrict to specific permissions (def: all)
REQ.repository_ids                #REPO_ID_ARR (def: all) which can be accessed
REQ.repositories                  #Same with 'REPO'_ARR

RES.token                         #'ghs_*'. IAT
RES.expires_at                    #'DATE'. Only valid 1 hour, no refresh, but can re-create it
RES.permissions.API_PERMISSION    #STR
RES.repository_selection          #'all|selected'. Whether RES.repositor* used
RES.repositories                  #REPO_ARR. Only if 'selected'

Authorization: Bearer IAT [C]     #Authenticate as a GitHub app, for a specific installation ("server-to-server")
                                  #Read|write access a repo|org
                                  #Unrelated to user, i.e. not restricted by user permissions
                                  #Actions are shown as done by app
https://x-access-token:IAT
 @github.com/USER/REPO.git        #Authenticate as a GitHub app installation, for HTTP-based git

OAUTH ==>                         #Used to get|refresh ACCESS_TOKEN ("user access token", UAT) (see OAuth doc)
                                  #ACCESS_TOKEN always start with ghu_*
                                  #REFRESH_TOKEN always start with ghr_*
                                  #Alternative flow if mobile app (instead of browser), not documented yet
                                  #User must first have "authorized" the app
AUTH_URL                          #/login/oauth/authorize
                                  #Can either:
                                  #  - redirect user manually to it
                                  #  - redirect at installation time
                                  #     - CALLBACK_URL must always use default value
                                  #     - no ?state parameter needed
CALLBACK_URL                      #By def, ones specified in App settings
                                  #Can|should specify multiple ones
TOKEN_URL                         #/login/oauth/access_token
                                  #Expiration must be opted in
                                  #Always 8h for ACCESS_TOKEN, 6 months for REFRESH_TOKEN
REVOKE_URL                        #DELETE /applications/CLIENT_ID/token
                                  #Can also be done by user through UI
github_app_authorization          #Webhook triggered by REVOKE_URL
                                  #Should undo the app logic for that user
?response_type|grant_type|scope   #Not present
?login=USER                       #Prompt user to login
                                  #In GET AUTH_URL query variables
?allow_signup=BOOL                #Allow unauthenticated users to signup, not only login
                                  #Def: true
                                  #In GET AUTH_URL query variables
repository_id                     #REPO_ID. Only give permissions to this REPO
                                  #In POST AUTH_URL request body
refresh_token_expires_in          #NUM (in secs). REFRESH_TOKEN expiration time
                                  #In POST AUTH_URL response body

Authorization:                    #Authenticate as a GitHub app user ("user-to-server")
 Bearer ACCESS_TOKEN [C]          #Permissions on behalf of user
                                  #  - including access other things than repo|org
                                  #  - i.e. some actions available with ACCESS_TOKEN but not IAT
                                  #Actions are shown as done by user, with additional hint it's been done through an app
                                  #Restricted by permissions of both app and user

Stopped at: https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/making-authenticated-api-requests-with-a-github-app-in-a-github-actions-workflow

PERMISSIONS ==>                   #Can be 'read', 'write' or 'admin'
                                  #Can be for an ORG, a REPO or a USER
ORG PERMISSIONS ==>               #
administration                    #ORG CRUD|settings
blocking_users                    #ORG banned users
events                            #
members                           #
organization_codespaces_secrets   #
organization_codespaces_settings  #
organization_codespaces           #
organization_dependabot_secrets   #
personal_access_token_requests    #
personal_access_tokens            #
projects                          #
secrets                           #
self_hosted_runners               #
team_discussions                  #
variables                         #
webhooks                          #

REPO PERMISSIONS ==>              #
actions                           #
administration                    #
checks                            #
code_scanning_alerts              #
codespaces_lifecycle_admin        #
codespaces_metadata               #
codespaces_secrets                #
codespaces                        #
commit_statuses                   #
contents                          #
dependabot_alerts                 #
dependabot_secrets                #
deployments                       #
environments                      #
issues                            #
metadata                          #
pages                             #
projects                          #
pull_requests                     #
repository_security_advisories    #
secret_scanning_alerts            #
secrets                           #
variables                         #
webhooks                          #
workflows                         #

USER PERMISSIONS ==>              #
block_another_user                #
codespaces_user_secrets           #
email_addresses                   #
followers                         #
gpg_keys                          #
gists                             #
git_ssh_keys                      #
interaction_limits                #
notifications                     #
plan                              #
profile                           #
ssh_signing_keys                  #
starring                          #
watching                          #

API PERMISSIONS ==>               #Can be:
                                  #  - 'read': not with workflows
                                  #  - 'write': not with organization_plan
                                  #  - 'admin': only with repository|organization_projects
contents                          #Repo git contents and metadata (commits, branches, releases, etc.)
single_file                       #Repo git single file
administration                    #Repo CRUD|settings|teams
metadata                          #Repo search|metadata
statuses                          #Commit status
checks                            #Commit status checks
issues                            #Issues
pull_requests                     #PRs
repository|organization_projects  #Repo projects
team_discussions                  #Team discussions
[organization_]secrets            #Repo secrets
repository|organization_hooks     #User-defined webhooks
actions                           #GitHub Actions
workflows                         #GitHub Actions workflow files
deployments                       #GitHub deployments
environments                      #GitHub deployments' environments
[organization_]packages           #GitHub Packages
pages                             #GitHub Pages
secret_scanning_alerts            #Secret scanning alerts
security_events                   #Security alerts like code scanning
vulnerability_alerts              #Dependabot alerts
members                           #ORG teams|members
organization_administration       #Access to ORG
organization_custom_roles         #ORG roles management
organization_user_blocking        #ORG banned users
organization_
 personal_access_tokens           #ORG access tokens
organization_
 personal_access_token_requests   #ORG access tokens requests
organization_plan                 #ORG pricing plan
organization_announcement_banners #ORG announcement banners
organization_self_hosted_runners  #ORG self-hosted CI runners

tidbex/github-app-token           #GitHub action to get a currently installed GitHub app's IAT
                                  #Goal: use it instead of current GITHUB_TOKEN
                                  #Only needed when current GITHUB_TOKEN is missing permissions that GitHub app has
                                  #  - including access to other repos
                                  #Version 1.8.0
                                  #Checked internal code ???
INPUTS.app_id                     #APP_ID (should use secrets)
INPUTS.private_key                #APP_PRIVATE_KEY (should use secrets), base64'd or not
INPUTS.installation_id            #INSTALLATION_ID
INPUTS.repository                 #'USER/REPO' (def: current one)
INPUTS.permissions                #'OBJ_JSON'
INPUTS.github_api_url             #'URL' of GitHub API (for GitHub enterprise)
OUTPUTS.token                     #'JWT' (IAT)

@octokit/auth-app                 #???

@octokit/auth-oauth-app           #Node.js or Deno (through esm.sh)
                                  #Version 6.0.1

octokit-auth-oauth-app.js/X.Y.Z
 BROWSER_USER_AGENT [C]

createOAuthAppAuth(OPTS)->OAPP    #Authenticate as a GitHub app
OPTS.clientType                   #'APP_TYPE', either 'oauth-app' (def) or 'github-app'
                                  #OAuth app not documented
                                  #Device flow not documented
OPTS.clientId                     #'CLIENT_ID'
OPTS.clientSecret                 #'CLIENT_SECRET'
OPTS.request                      #REQ_OPTS. HTTP request additional info
REQ_OPTS.endpoint                 #'URL'. Override root endpoint
REQ_OPTS.defaults(OBJ)->REQ_OPTS  #

OAPP(OPTS)->>OAPP_RESP            #
OPTS.type                         #Either:
                                  #  - 'oauth-app': OAPP_RESP, for Authorization: Basic [C]
                                  #  - 'oauth-user': USER_OPTS + OAPP_USER_RESP, as a GitHub app user
USER_OPTS.code                    #'CODE'
USER_OPTS.redirectUrl             #'CALLBACK_URL'
USER_OPTS.state                   #'STATE'

OAPP_RESP.type                    #'oauth-app'
OAPP_RESP.clientId                #'CLIENT_ID'
OAPP_RESP.clientSecret            #'CLIENT_SECRET'
OAPP_RESP.clientType              #'CLIENT_TYPE'
OAPP_RESP.headers.authorization   #'basic BASE64(CLIENT_ID:CLIENT_SECRET)'

@octokit/auth-oauth-user          #
createOAuthUserAuth(OPTS)->OUAPP  #
OPTS.clientType                   #'APP_TYPE' (def: 'oauth-app')
OPTS.clientId                     #'CLIENT_ID'
OPTS.clientSecret                 #'CLIENT_SECRET'
OPTS.code                         #'CODE'
OPTS.onTokenCreated               #FUNC(AUTH_STATE, { type: OPTS.type }) called by OUAPP(OPTS)

OUAPP(OPTS)->>RES                 #Call exchangeWebFlowCode()
OPTS.type                         #Can be:
                                  #  - 'refresh': if ACCESS_TOKEN `expiresAt` old, call refreshToken()
                                  #  - 'check'
                                  #  - 'reset'
                                  #  - 'delete'
                                  #  - 'deleteAuthorization'
STATE.authentication              #AUTH_STATE
AUTH_STATE.*                      #Like RES.* from exchangeWebFlowCode()
AUTH_STATE.type                   #Always 'token'
AUTH_STATE.tokenType              #Always 'oauth'

@octokit/oauth-methods            #REST API methods related to OAuth

exchangeWebFlowCode(OPTS)->>RES   #POST /login/oauth/access_token
OPTS.clientType                   #'APP_TYPE' (def: 'oauth-app')
OPTS.clientId                     #'CLIENT_ID'
OPTS.clientSecret                 #'CLIENT_SECRET'
OPTS.code                         #'CODE'
OPTS.redirectUrl                  #'CALLBACK_URL'
OPTS.request                      #REQ_OPTS

RES.token                         #'ACCESS_TOKEN'
RES.refresh_token                 #'REFRESH_TOKEN'
RES.expiresAt                     #DATE
RES.refreshTokenExpiresAt         #DATE
RES.clientType|clientId
 |clientSecret                    #Like OPTS.*

refreshToken(OPTS)->>RES          #POST /login/oauth/access_token, for refresh
OPTS.*                            #Like exchangeWebFlowCode(), but no code
OPTS.refresh_token                #'REFRESH_TOKEN'
RES.*                             #Like exchangeWebFlowCode()

checkToken(OPTS)->>RES

Registering:
  - by user or org
  - name, description, homepage URL

https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28
