
               
   GITHUB_APPS  
               



GOAL ==>                          #  - get API token (IAT|UAT) to call GitHub API
                                  #  - trigger webhooks on GitHub events

OAUTH APPS ==>                    #Deprecated older version of GitHub apps
                                  #Can only use UAT, not IAT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REGISTER MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /[organizations/ORG/]        #Create (not install) app from URL
 /settings/apps/new               #Can also be done|edited from UI
                                  #  - can edit MANIFEST.name
REQ.manifest                      #"MANIFEST_JSON"
REQ.state                         #'STATE'. Like OAuth

GET /[organizations/ORG/]         #Same but:
 /settings/apps/new               #  - use ?VAR instead of REQ.manifest
                                  #  - does not call GET MCALLBACK_URL
?state=STATE                      #

GET MCALLBACK_URL                 #Called after POST /settings/apps/new
?code=CODE                        #
?state=STATE                      #

POST
 /app-manifests/CODE/conversions  #Must be called after GET MCALLBACK_URL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER REQUEST        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


?name
MANIFEST.name                     #STR. App name
?url
MANIFEST.url "URL"                #Homepage
?description
MANIFEST.description              #STR

MANIFEST.redirect_url             #"MCALLBACK_URL"

?callback_urls
MANIFEST.callback_urls            #"CALLBACK_URL"_ARR

?setup_url                        #"SETUP_URL", redirected on after installation (or on update)
MANIFEST.setup_url                #Meant for docs
?setup_on_update
MANIFEST.setup_on_update          #BOOL (def: false). Redirect to SETUP_URL also when app is being updated

?PERMISSION
MANIFEST                          #STR
 .default_permissions.PERMISSION  #Changing permissions must be approved by ORG|USER (depending on permission)
?request_oauth_on_install
MANIFEST.request_oauth_on_install #BOOL (def: false). Ask to both "install" and "authorize"

?webhook_active
MANIFEST.hook_attributes.active   #BOOL (def: false). Trigger webhooks
?webhook_url
MANIFEST.hook_attributes.url      #"WEBHOOK_URL". Uses POST. Prefer https
?events
MANIFEST.default_events           #"WEBHOOK_EVENT"_ARR (def: all) to trigger webhooks on

?public
MANIFEST.public                   #BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER RESPONSE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES                               #Of POST /app-manifests/CODE/conversions
RES.id                            #'APP_ID'
                                  #ID of app, secret
RES.node_id                       #'BASE64'

RES.pem                           #'APP_PRIVATE_KEY'. App secret
                                  #PEM format (PKCS#1 RSAPrivateKey)
                                  #Not stored by GitHub, i.e. only shown once
RES.client_id                     #'CLIENT_ID'. OAuth CLIENT_ID, public
                                  #Can get from app settings UI
RES.client_secret                 #'CLIENT_SECRET'. OAuth CLIENT_SECRET, private
                                  #Can get from app settings UI
RES.webhook_secret                #'WEBHOOK_SECRET'. App secret, meant to authenticate webhook requests

RES.slug                          #STR
RES.owner                         #USER

RES.name
RES.description
RES.permissions
RES.events                        #Like MANIFEST.*

RES.external_url                  #'URL'
RES.html_url                      #'URL'

RES.created_at|updated_at         #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /apps/APP/installations/new   #Install an APP from a URL
?state=STATE                      #

INSTALLATION_ID                   #Single install of an APP

ORG INSTALLATION ==>              #Instead of a user, can be installed by an ORG
                                  #Only by org owner
                                  #  - or users with "GitHub app manager" role on specific app
                                  #     - can edit but not install|uninstall app
                                  #Org user can request org owner

SUSPENSION ==>                    #Pausing APP. No permissions during that time
                                  #Can be done by user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JWT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Bearer APP_JWT [C] #Authenticate as a GitHub app, for all installation

APP_JWT                           #Must be signed with APP_PRIVATE_KEY
APP_JWT.ENVLOP.alg                #'RS256'
APP_JWT.PAYLOAD.iat               #DATE_NUM
APP_JWT.PAYLOAD.exp               #DATE_NUM. Max: iat + 10min
APP_JWT.PAYLOAD.iss               #'APP_ID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /app/installations           #Get IAT ("Installation Access Token")
 /INSTALLATION_ID/access_tokens   #Must be authenticated as a GitHub app
                                  #GitHub app must have been installed

REQ.permissions.API_PERMISSION    #STR. Restrict to specific permissions (def: all)
REQ.repository_ids                #REPO_ID_ARR (def: all) which can be accessed
REQ.repositories                  #Same with 'REPO'_ARR

RES.token                         #'ghs_*'. IAT
RES.expires_at                    #'DATE'. Only valid 1 hour, no refresh, but can re-create it
RES.permissions.API_PERMISSION    #STR
RES.single_file                   #'PATH'. Permission on single file only
RES.repository_selection          #'all|selected'. Whether RES.repositor* used
RES.repositories                  #REPO_ARR. Only if 'selected'

Authorization: Bearer IAT [C]     #Authenticate as a GitHub app, for a specific installation ("server-to-server")
                                  #Read|write access a repo|org
                                  #Unrelated to user, i.e. not restricted by user permissions
                                  #Actions are shown as done by app
https://x-access-token:IAT
 @github.com/USER/REPO.git        #Authenticate as a GitHub app installation, for HTTP-based git


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OAUTH ==>                         #Used to get|refresh ACCESS_TOKEN ("user access token", UAT)
                                  #See OAuth doc for flow and signification of some variables
                                  #ACCESS_TOKEN always start with ghu_*
                                  #REFRESH_TOKEN always start with ghr_*
                                  #Alternative flow if mobile app (instead of browser), not documented yet
                                  #User must first have "authorized" the app

AUTH_URL                          #/login/oauth/authorize
                                  #Can either:
                                  #  - redirect user manually to it
                                  #  - redirect at installation time
                                  #     - CALLBACK_URL must always use default value
                                  #     - no ?state parameter needed
CALLBACK_URL                      #By def, ones specified in App settings
                                  #Can|should specify multiple ones
TOKEN_URL                         #/login/oauth/access_token
                                  #Expiration must be opted in
                                  #Always 8h for ACCESS_TOKEN, 6 months for REFRESH_TOKEN

?response_type|grant_type|scope   #Not present

?login=USER                       #Prompt user to login
                                  #In GET AUTH_URL query variables
?allow_signup=BOOL                #Allow unauthenticated users to signup, not only login
                                  #Def: true
                                  #In GET AUTH_URL query variables

REQ.repository_id                 #REPO_ID. Only give permissions to this REPO
                                  #In POST AUTH_URL request body

DEVICE FLOW ==>                   #Must be used when client is not a browser, e.g. a CLI or mobile|desktop app
                                  #Must be enabled in settings (beta feature)
DEVICE_AUTH_URL                   #/login/device/code
VERIFY_URL                        #/login/device
DEVICE_TOKEN_URL                  #/login/oauth/access_token
DEVICE_TOKEN_RES.interval         #5s
DEVICE_TOKEN_RES.expires_in       #15m
DEVICE_TOKEN_POLL.grant_type      #'urn:ietf:params:oauth:grant-type:device_code'
DEVICE_TOKEN_POLL.repository_id   #REPO_ID. Restrict permissions to only this REPO
DEVICE_ACCESS_TOKENS.error        #'NAME' among:
                                  #  - 'authorization_pending': user has not entered USER_CODE yet
                                  #  - 'access_denied': user clicked cancel
                                  #  - 'expired_token': DEVICE_CODE expired
                                  #  - 'slow_down': polling too fast
                                  #  - 'incorrect_client_credentials': invalid CLIENT_ID
                                  #  - 'incorrect_device_code': invalid DEVICE_CODE
                                  #  - 'unsupported_grant_type': invalid ?grant_type
                                  #  - 'device_flow_disabled': device flow not enabled in settings

ACCESS_TOKENS
 .refresh_token_expires_in        #NUM (in secs). REFRESH_TOKEN expiration time

Authorization:                    #Authenticate as a GitHub app user ("user-to-server")
 Bearer ACCESS_TOKEN [C]          #Permissions on behalf of user
                                  #  - including access other things than repo|org
                                  #  - i.e. some actions available with ACCESS_TOKEN but not IAT
                                  #Actions are shown as done by user, with additional hint it's been done through an app
                                  #Restricted by permissions of both app and user

POST /applications/CLIENT_ID/token#Get info about an ACCESS_TOKEN
REQ.access_token                  #'ACCESS_TOKEN'

RES.id                            #NUM
RES.url                           #'URL'
RES.access_token                  #'ACCESS_TOKEN'
RES.access_token_last_eight       #'ACCESS_TOKEN' last 8 chars
RES.hashed_token                  #'ACCESS_TOKEN' hash
RES.fingerprint                   #'ACCESS_TOKEN' fingerprint
RES.scopes                        #ARR
RES.app.url                       #'URL'
RES.app.name                      #STR
RES.app.client_id                 #'CLIENT_ID'
RES.note[_url]                    #STR
RES.created_at|updated_at         #'DATE'
RES.expires_at                    #'DATE'
RES.owner                         #USER

PATCH
 /applications/CLIENT_ID/token    #Refresh ACCESS_TOKEN, but delete old one
REQ.access_token                  #'ACCESS_TOKEN'
RES.*                             #Like POST /applications/CLIENT_ID/token, except:
                                  #  - access_token* -> token*
                                  #  - no hashed_token

POST /applications/CLIENT_ID
 /token/scoped                    #Copy ACCESS_TOKEN but with stricter permissions ("scoped ACCESS_TOKEN")
REQ.access_token                  #'ACCESS_TOKEN'
REQ.permissions.API_PERMISSION    #STR.
REQ.target                        #Restrict only to that 'USER|ORG'
REQ.target_id                     #Same with USER|ORG_ID
REQ.repositories                  #Restrict only to those 'REPO'_ARR
REQ.repository_ids                #Same with REPO_ID_ARR

RES.*                             #Like POST /applications/CLIENT_ID/token, except:
                                  #  - access_token* -> token*

DELETE
 /applications/CLIENT_ID/grant    #Delete an APP "authorization" for a given install
REQ.access_token                  #'ACCESS_TOKEN'

REVOKE_URL                        #DELETE /applications/CLIENT_ID/token
                                  #Can also be done by user through UI
github_app_authorization          #Webhook triggered by REVOKE_URL
                                  #Should undo the app logic for that user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSIONS ==>                   #Can be 'read', 'write' or 'admin'
                                  #Can be for an ORG, a REPO or a USER
ORG PERMISSIONS ==>               #
administration                    #ORG CRUD|settings
blocking_users                    #ORG banned users
events                            #
members                           #
organization_codespaces_secrets   #
organization_codespaces_settings  #
organization_codespaces           #
organization_dependabot_secrets   #
personal_access_token_requests    #
personal_access_tokens            #
projects                          #
secrets                           #
self_hosted_runners               #
team_discussions                  #
variables                         #
webhooks                          #

REPO PERMISSIONS ==>              #
actions                           #
administration                    #
checks                            #
code_scanning_alerts              #
codespaces_lifecycle_admin        #
codespaces_metadata               #
codespaces_secrets                #
codespaces                        #
commit_statuses                   #
contents                          #
dependabot_alerts                 #
dependabot_secrets                #
deployments                       #
environments                      #
issues                            #
metadata                          #
pages                             #
projects                          #
pull_requests                     #
repository_security_advisories    #
secret_scanning_alerts            #
secrets                           #
variables                         #
webhooks                          #
workflows                         #

USER PERMISSIONS ==>              #
block_another_user                #
codespaces_user_secrets           #
email_addresses                   #
followers                         #
gpg_keys                          #
gists                             #
git_ssh_keys                      #
interaction_limits                #
notifications                     #
plan                              #
profile                           #
ssh_signing_keys                  #
starring                          #
watching                          #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        API PERMISSIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


API PERMISSIONS ==>               #Can be:
                                  #  - 'read': not with workflows
                                  #  - 'write': not with organization_plan
                                  #  - 'admin': only with repository|organization_projects
contents                          #Repo git contents and metadata (commits, branches, releases, etc.)
single_file                       #Repo git single file
administration                    #Repo CRUD|settings|teams
metadata                          #Repo search|metadata
statuses                          #Commit status
checks                            #Commit status checks
issues                            #Issues
pull_requests                     #PRs
repository|organization_projects  #Repo projects
team_discussions                  #Team discussions
[organization_]secrets            #Repo secrets
repository|organization_hooks     #User-defined webhooks
actions                           #GitHub Actions
workflows                         #GitHub Actions workflow files
deployments                       #GitHub deployments
environments                      #GitHub deployments' environments
[organization_]packages           #GitHub Packages
pages                             #GitHub Pages
secret_scanning_alerts            #Secret scanning alerts
security_events                   #Security alerts like code scanning
vulnerability_alerts              #Dependabot alerts
members                           #ORG teams|members
organization_administration       #Access to ORG
organization_custom_roles         #ORG roles management
organization_user_blocking        #ORG banned users
organization_
 personal_access_tokens           #ORG access tokens
organization_
 personal_access_token_requests   #ORG access tokens requests
organization_plan                 #ORG pricing plan
organization_announcement_banners #ORG announcement banners
organization_self_hosted_runners  #ORG self-hosted CI runners


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       GITHUB-APP-TOKEN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tidbex/github-app-token           #GitHub action to get an installed GitHub app's IAT
                                  #Goal: use it instead of GitHub action's current GITHUB_TOKEN
                                  #Only needed when current GITHUB_TOKEN is missing permissions that GitHub app has
                                  #  - including access to other repos
                                  #Version 1.8.0

INPUTS.app_id                     #'APP_ID' (should use secrets)
INPUTS.private_key                #APP_PRIVATE_KEY (should use secrets), base64'd or not
INPUTS.installation_id            #INSTALLATION_ID
                                  #Def: current repo, using GET /repos/USER/REPO/installation
INPUTS.repository                 #'USER/REPO' (def: current one)
INPUTS.permissions                #'OBJ_JSON'
INPUTS.github_api_url             #'URL' of GitHub API (for GitHub enterprise)

SECRET_OUTPUTS.token              #'JWT' (IAT)
                                  #Created using POST /app/installations/INSTALLATION_ID/access_tokens
                                  #  - while authenticated using a APP_JWT created by @octokit/auth-app createAppAuth() with type 'app'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            APP JWT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'app'                  #Forwards to universal-github-app-jwt and returns JWT_INFO
JWT_INFO.type                     #Always 'app'

universal-github-app-jwt          #Version 1.1.1
                                  #Node/Deno/browsers
githubAppJwt(JOPTS)->>JWT_RES     #Create APP_JWT

AAOPTS|JOPTS.privateKey           #'APP_PRIVATE_KEY'
                                  #In browsers/Deno, must first convert from PKCS#1 to PKCS#8
                                  #  openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in OLD_APP_PRIVATE_KEY.pem -out NEW_APP_PRIVATE_KEY.key

JOPTS.id
AAOPTS|JWT_INFO|JWT_RES.appId
JWT_PAYLOAD.iss                   #'APP_ID'

JOPTS.now                         #NUM (in secs, def: now)
JWT_PAYLOAD.iat                   #JOPTS.now - 30 (for time clock drift)
AAOPTS.timeDifference             #NUM (def: 0) added to JOPTS.now
JWT_RES.expiration
JWT_PAYLOAD.exp                   #10 minutes from JWT_PAYLOAD.iat
JWT_INFO.expiresAt                #Same but as 'DATE'

JWT_INFO|JWT_RES.token            #'APP_JWT'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BASIC AUTH           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'oauth-app'            #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-app'
                                  #Returns BASIC_INFO

POPTS.type 'oauth-app'            #For Authorization: Basic [C]
                                  #Returns PAPP_RESP

PPOPTS|BASIC_INFOPAPP_RESP
 .clientType                      #'APP_TYPE'
AAOPTS|POPTS|BASIC_INFO|PAPP_RESP
 .clientId                        #'CLIENT_ID'
AAOPTS|POPTS|BASIC_INFO|PAPP_RESP
 .clientSecret                    #'CLIENT_SECRET'

BASIC_INFO|PAPP_RESP.type         #Always 'oauth-app'

BASIC_INFO|PAPP_RESP
 .headers.authorization           #'basic BASE64(CLIENT_ID:CLIENT_SECRET)'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'installation'         #Calls POST /app/installations/INSTALLATION_ID/access_tokens
                                  #Authenticated with a APP_JWT

AAOPTS
 .appId|privateKey|timeDifference #Like with AOPTS.type 'app'
[A]AOPTS|INSTALL_INFO
 .installationId                  #'INSTALLATION_ID'

AOPTS|INSTALL_INFO.permissions
 |repositoryIds|repositoryNames   #From HTTP REQ|RES
INSTALL_INFO.repositorySelection
 |singleFileName|createdAt
 |expiresAt                       #From HTTP RES

INSTALL_INFO.type                 #Always 'token'
INSTALL_INFO.tokenType            #Always 'installation'
INSTALL_INFO.token                #'IAT'

AOPTS.refresh                     #BOOL. If false (def), caches IAT
AAOPTS.cache                      #Customize cache
                                  #OBJ: get('KEY')->'IAT', set('KEY', 'IAT')
                                  #Def:
                                  #  - lru-cache (see its doc)
                                  #  - in-memory
                                  #  - max 15e3 items
                                  #  - max 1 hour (same as IAT expiration time)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        UAT FIRST STEP         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



@octokit/oauth-methods
getWebFlowAuthorizationUrl
 (FOPTS)->FIRST_INFO              #Forwards to @octokit/oauth-authorization-url

@octokit/oauth-authorization-url  #Version 6.0.2
                                  #Node/Deno
oauthAuthorizationUrl(FOPTS)
 ->FIRST_INFO                     #Returns a AUTH_URL, to start flow for UAT

FOPTS|FIRST_INFO.clientType       #'APP_TYPE', either 'oauth-app' (def, not documented) or 'github-app'
FOPTS|FIRST_INFO.clientId         #'CLIENT_ID' for ?client_id
FOPTS|FIRST_INFO.redirectUrl      #'CALLBACK_URL' (def: null) for ?redirect_uri
FOPTS|FIRST_INFO.state            #'STATE' (def: random 10 chars base36'd) for ?state
FOPTS|FIRST_INFO.login            #'USER' (def: null) for ?login
FOPTS|FIRST_INFO.allowSignup      #BOOL (def: true), for ?allow_signup

FIRST_INFO.url                    #AUTH_URL, i.e. 'BASE_URL/login/oauth/authorize?VARs' using OPTs above
FOPTS.baseUrl                     #'BASE_URL' (def: 'https://github.com')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            UAT WEB            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-user'
                                  #Returns UAT_INFO

POPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-user UAPP()
                                  #Returns UAT_INFO

UAPP(UOPTS)->>UAT_INFO            #Forwards to exchangeWebFlowCode()
                                  #Cached, i.e. only done once

@octokit/oauth-methods
exchangeWebFlowCode(EOPTS)->>RES  #POST /login/oauth/access_token, i.e. second server-side step for UAT

RES.authentication.clientType
PPOPTS|UUOPTS|EOPTS|UAT_INFO
 .clientType                      #'APP_TYPE'
RES.authentication.clientId
[A]AOPTS|[P]POPTS|UUOPTS|EOPTS
 |UAT_INFO.clientId               #'CLIENT_ID'
RES.authentication.clientSecret
[A]AOPTS|[P]POPTS|UUOPTS|EOPTS
 |UAT_INFO.clientSecret           #'CLIENT_SECRET'
AOPTS|POPTS|UUOPTS|EOPTS
 .redirectUrl                     #'CALLBACK_URL'
AOPTS|POPTS|UUOPTS|EOPTS.code     #'CODE'

UAT_INFO.type                     #Always 'token'
UAT_INFO.tokenType                #Always 'oauth'

RES.authentication.token
UAT_INFO.token                    #'ACCESS_TOKEN'

UAT_INFO|RES.refreshToken         #'REFRESH_TOKEN'
UAT_INFO|RES.expiresAt            #DATE
UAT_INFO|RES.refreshTokenExpiresAt#DATE

UAT_INFO.invalid                  #undefined|true. true if token was reset|deleted



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          UAT DEVICE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-user'
                                  #Returns UAT_INFO

POPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-user UAPP()
                                  #Returns UAT_INFO

UAPP(UOPTS)->>UAT_INFO            #Forwards to createOAuthDeviceAuth()
                                  #Cached, i.e. only done once

@octokit/auth-oauth-device        #Version 5.0.2
                                  #Node/Deno/browsers
createOAuthDeviceAuth(DDOPTS)
 ->DAPP
DAPP(DOPTS)->>UAT_INFO            #Does createDeviceCode() then poll with exchangeDeviceCode()

@octokit/oauth-methods
createDeviceCode(MOPTS)->>RES     #POST /login/device/code
RES.*                             #Response from that API method

exchangeDeviceCode(NOPTS)->>RES   #POST /login/oauth/access_token
RES.*                             #Like exchangeWebFlowCode()

PPOPTS|UUOPTS|DDOPTS|NOPTS
 .clientType                      #'APP_TYPE'
[A]AOPTS|[P]POPTS|UUOPTS|DDOPTS
 |MOPTS|NOPTS.clientId            #'CLIENT_ID'
UUOPTS|NOPTS.clientSecret         #'CLIENT_SECRET'. Only used if UOPTS.type defined
NOPTS.code                        #'DEVICE_CODE'

AOPTS|POPTS|UUOPTS|DDOPTS         #FUNC(RES)[->>] called with createDeviceCode() response
 .onVerification                  #User must input 'USER_CODE' in VERIFY_URL
                                  #E.g. should print|show instructions

AOPTS|POPTS|UUOPTS|DDOPTS
 .auth.refresh                    #BOOL (def: false). Forces re-using it even when calling DAPP() several times


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          UAT ACTIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UUOPTS.onTokenCreated             #FUNC(UAT_INFO, { type: UUOPTS.type }) called by UAPP(UUOPTS) on:
                                  #  - creation (only with web flow)
                                  #  - refresh (UOPTS.type 'refresh')
                                  #  - reset (UOPTS.type 'reset')

UOPTS.type                        #Action on the token, among:
                                  #  - 'get' (def): none
                                  #  - 'refresh': if ACCESS_TOKEN `expiresAt` old, call refreshToken()
                                  #  - 'check': call checkToken()
                                  #  - 'reset': call resetToken()
                                  #  - 'delete': call deleteToken()
                                  #  - 'deleteAuthorization': call deleteAuthorization()

@octokit/oauth-methods            #REST API methods related to UAT
                                  #Version 3.0.1
                                  #Node/Deno
VOPTS.clientType                  #'APP_TYPE'
VOPTS.clientId                    #'CLIENT_ID'
VOPTS.clientSecret                #'CLIENT_SECRET'

refreshToken(VOPTS)->>RES         #POST /login/oauth/access_token, for refresh
VOPTS.refreshToken                #'REFRESH_TOKEN'
VOPTS.redirectUrl                 #'CALLBACK_URL'
RES.*                             #Like exchangeWebFlowCode() + response from that API method

checkToken(VOPTS)->>RES           #POST /applications/CLIENT_ID/token
VOPTS.token                       #'ACCESS_TOKEN'
RES.*                             #Like exchangeWebFlowCode() + response from that API method

resetToken(VOPTS)->>RES           #PATCH /applications/CLIENT_ID/token
RES.*                             #Like exchangeWebFlowCode() + response from that API method

scopeToken(VOPTS)->>RES           #POST /applications/CLIENT_ID/token/scoped
VOPTS.access_token|permissions
 |target|targetId|repositories
 |repositoryIds                   #Like REQ for that method
RES.*                             #Like exchangeWebFlowCode() + response from that API method

deleteToken(VOPTS)->>RES          #DELETE /applications/CLIENT_ID/token
                                  #Empty RES

deleteAuthorization(VOPTS)->>RES  #DELETE /applications/CLIENT_ID/grant
                                  #Empty RES


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUTH COMMON          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/auth-app                 #Version 5.0.6
                                  #Node/Deno
                                  #Handles UAT, APP_JWT, Basic auth, IAT
createAppAuth(AAOPTS)->AAPP       #
AAPP(AOPTS)->>JWT_INFO|BASIC_INFO
 |INSTALL_INFO|UAT_INFO           #
AAOPTS.appId|privateKey           #Required, even if not used by the specific flow
AAOPTS.log                        #OBJ with `warn` method (def: console)
                                  #Used to log time skew errors, or HTTP retries

@octokit/auth-oauth-app           #Version 6.0.1
                                  #Node/Deno
                                  #Handles UAT, APP_JWT
createOAuthAppAuth(PPOPTS)->PAPP  #
PAPP(POPTS)->>OBJ                 #

@octokit/auth-oauth-user          #Version 3.0.1
                                  #Node/Deno
                                  #Handles UAT

@octokit/auth-app
@octokit/auth-oauth-app
@octokit/auth-oauth-user
createOAuthUserAuth(UUOPTS)->UAPP #
UAPP(UOPTS)->>UAT_INFO            #Forwards to exchangeWebFlowCode|createOAuthDeviceAuth()
                                  #Cached, i.e. only done once

octokit-auth-NAME.js/X.Y.Z
 BROWSER_USER_AGENT [C]           #NAME depends on module used: app, oauth-app, oauth-device

AAPP|PAPP|DAPP|UAPP               #Like REQUEST(...) (see @octokit/request)
 .hook(REQUEST, ...)->>RES        #But using the right Authorization [C] depending on the request.
                                  #With APP_JWT, handles time skew errors
                                  #With IAT, retries with exponential backoff since newly created IAT sometimes need it
                                  #Can be used as REQUEST's UUOPTS.request.hook

FOPTS|EOPTS|VOPTS|[D]DOPTS|MOPTS
 |NOPTS|AAOPTS|[P]POPTS|UUOPTS
 .request                         #REQUEST (from @octokit/request)

AOPTS|POPTS.factory               #FUNC. Calls and returns FUNC([A]AOPTS|[P]POPTS)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MARKETPLACE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


cleanup OAuth docs???

Finish docs, stopped at https://docs.github.com/en/apps/publishing-apps-to-github-marketplace/github-marketplace-overview/about-github-marketplace-for-apps ???

Marketplace:
  - where it is installed
  - alternative:
     - GET /apps/APP/installations/new
     - in UI, for local dev
     - private app
  - logo
  - can set a price

Document https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28 ???
