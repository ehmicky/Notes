
               
   GITHUB_APPS  
               



GOAL ==>                          #  - get API token (IAT|UAT) to call GitHub API
                                  #  - trigger webhooks on GitHub events

OAUTH APPS ==>                    #Deprecated older version of GitHub apps
                                  #Can only use UAT, not IAT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REGISTER MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /[organizations/ORG/]        #Create (not install) app from URL
 /settings/apps/new               #Can also be done|edited from UI
                                  #  - can edit MANIFEST.name
REQ.manifest                      #"MANIFEST_JSON"
REQ.state                         #'STATE'. Like OAuth

GET /[organizations/ORG/]         #Same but:
 /settings/apps/new               #  - use ?VAR instead of REQ.manifest
                                  #  - does not call GET MCALLBACK_URL
?state=STATE                      #

GET MCALLBACK_URL                 #Called after POST /settings/apps/new
?code=CODE                        #
?state=STATE                      #

POST
 /app-manifests/CODE/conversions  #Must be called after GET MCALLBACK_URL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER REQUEST        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


?name
MANIFEST.name                     #STR. App name
?url
MANIFEST.url "URL"                #Homepage
?description
MANIFEST.description              #STR

MANIFEST.redirect_url             #"MCALLBACK_URL"

?callback_urls
MANIFEST.callback_urls            #"CALLBACK_URL"_ARR

?setup_url                        #"SETUP_URL", redirected on after installation (or on update)
MANIFEST.setup_url                #Meant for docs
?setup_on_update
MANIFEST.setup_on_update          #BOOL (def: false). Redirect to SETUP_URL also when app is being updated

?PERMISSION
MANIFEST                          #STR
 .default_permissions.PERMISSION  #Changing permissions must be approved by ORG|USER (depending on permission)
?request_oauth_on_install
MANIFEST.request_oauth_on_install #BOOL (def: false). Ask to both "install" and "authorize"

?webhook_active
MANIFEST.hook_attributes.active   #BOOL (def: false). Trigger webhooks
?webhook_url
MANIFEST.hook_attributes.url      #"WEBHOOK_URL". Uses POST. Prefer https
?events
MANIFEST.default_events           #"WEBHOOK_EVENT"_ARR (def: all) to trigger webhooks on

?public
MANIFEST.public                   #BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER RESPONSE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES                               #Of POST /app-manifests/CODE/conversions
RES.id                            #'APP_ID'
                                  #ID of app, secret
RES.node_id                       #'BASE64'

RES.pem                           #'APP_PRIVATE_KEY'. App secret
                                  #PEM format (PKCS#1 RSAPrivateKey)
                                  #Not stored by GitHub, i.e. only shown once
RES.client_id                     #'CLIENT_ID'. OAuth CLIENT_ID, public
                                  #Can get from app settings UI
RES.client_secret                 #'CLIENT_SECRET'. OAuth CLIENT_SECRET, private
                                  #Can get from app settings UI
RES.webhook_secret                #'WEBHOOK_SECRET'. App secret, meant to authenticate webhook requests

RES.slug                          #STR
RES.owner                         #USER

RES.name
RES.description
RES.permissions
RES.events                        #Like MANIFEST.*

RES.external_url                  #'URL'
RES.html_url                      #'URL'

RES.created_at|updated_at         #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /apps/APP/installations/new   #Install an APP from a URL
?state=STATE                      #

INSTALLATION_ID                   #Single install of an APP

ORG INSTALLATION ==>              #Instead of a user, can be installed by an ORG
                                  #Only by org owner
                                  #  - or users with "GitHub app manager" role on specific app
                                  #     - can edit but not install|uninstall app
                                  #Org user can request org owner

SUSPENSION ==>                    #Pausing APP. No permissions during that time
                                  #Can be done by user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JWT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Bearer APP_JWT [C] #Authenticate as a GitHub app, for all installation

APP_JWT                           #Must be signed with APP_PRIVATE_KEY
APP_JWT.ENVLOP.alg                #'RS256'
APP_JWT.PAYLOAD.iat               #DATE_NUM
APP_JWT.PAYLOAD.exp               #DATE_NUM. Max: iat + 10min
APP_JWT.PAYLOAD.iss               #'APP_ID'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /app/installations           #Get IAT ("Installation Access Token")
 /INSTALLATION_ID/access_tokens   #Must be authenticated as a GitHub app
                                  #GitHub app must have been installed

REQ.permissions.API_PERMISSION    #STR. Restrict to specific permissions (def: all)
REQ.repository_ids                #REPO_ID_ARR (def: all) which can be accessed
REQ.repositories                  #Same with 'REPO'_ARR

RES.token                         #'ghs_*'. IAT
RES.expires_at                    #'DATE'. Only valid 1 hour, no refresh, but can re-create it
RES.permissions.API_PERMISSION    #STR
RES.repository_selection          #'all|selected'. Whether RES.repositor* used
RES.repositories                  #REPO_ARR. Only if 'selected'

Authorization: Bearer IAT [C]     #Authenticate as a GitHub app, for a specific installation ("server-to-server")
                                  #Read|write access a repo|org
                                  #Unrelated to user, i.e. not restricted by user permissions
                                  #Actions are shown as done by app
https://x-access-token:IAT
 @github.com/USER/REPO.git        #Authenticate as a GitHub app installation, for HTTP-based git


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OAUTH ==>                         #Used to get|refresh ACCESS_TOKEN ("user access token", UAT) (see OAuth doc)
                                  #ACCESS_TOKEN always start with ghu_*
                                  #REFRESH_TOKEN always start with ghr_*
                                  #Alternative flow if mobile app (instead of browser), not documented yet
                                  #User must first have "authorized" the app

AUTH_URL                          #/login/oauth/authorize
                                  #Can either:
                                  #  - redirect user manually to it
                                  #  - redirect at installation time
                                  #     - CALLBACK_URL must always use default value
                                  #     - no ?state parameter needed
CALLBACK_URL                      #By def, ones specified in App settings
                                  #Can|should specify multiple ones
TOKEN_URL                         #/login/oauth/access_token
                                  #Expiration must be opted in
                                  #Always 8h for ACCESS_TOKEN, 6 months for REFRESH_TOKEN

REVOKE_URL                        #DELETE /applications/CLIENT_ID/token
                                  #Can also be done by user through UI
github_app_authorization          #Webhook triggered by REVOKE_URL
                                  #Should undo the app logic for that user

?response_type|grant_type|scope   #Not present

?login=USER                       #Prompt user to login
                                  #In GET AUTH_URL query variables
?allow_signup=BOOL                #Allow unauthenticated users to signup, not only login
                                  #Def: true
                                  #In GET AUTH_URL query variables

REQ.repository_id                 #REPO_ID. Only give permissions to this REPO
                                  #In POST AUTH_URL request body
RES.refresh_token_expires_in      #NUM (in secs). REFRESH_TOKEN expiration time
                                  #In POST AUTH_URL response body

Authorization:                    #Authenticate as a GitHub app user ("user-to-server")
 Bearer ACCESS_TOKEN [C]          #Permissions on behalf of user
                                  #  - including access other things than repo|org
                                  #  - i.e. some actions available with ACCESS_TOKEN but not IAT
                                  #Actions are shown as done by user, with additional hint it's been done through an app
                                  #Restricted by permissions of both app and user

POST /applications/CLIENT_ID/token#Get info about an ACCESS_TOKEN
REQ.access_token                  #'ACCESS_TOKEN'

RES.id                            #NUM
RES.url                           #'URL'
RES.access_token                  #'ACCESS_TOKEN'
RES.access_token_last_eight       #'ACCESS_TOKEN' last 8 chars
RES.hashed_token                  #'ACCESS_TOKEN' hash
RES.fingerprint                   #'ACCESS_TOKEN' fingerprint
RES.scopes                        #ARR
RES.app.url                       #'URL'
RES.app.name                      #STR
RES.app.client_id                 #'CLIENT_ID'
RES.note[_url]                    #STR
RES.created_at|updated_at         #'DATE'
RES.expires_at                    #'DATE'
RES.owner                         #USER

PATCH
 /applications/CLIENT_ID/token    #Refresh ACCESS_TOKEN, but delete old one
REQ.access_token                  #'ACCESS_TOKEN'
RES.*                             #Like POST /applications/CLIENT_ID/token, except:
                                  #  - access_token* -> token*
                                  #  - no hashed_token

POST /applications/CLIENT_ID
 /token/scoped                    #Copy ACCESS_TOKEN but with stricter permissions ("scoped ACCESS_TOKEN")
REQ.access_token                  #'ACCESS_TOKEN'
REQ.permissions.API_PERMISSION    #STR.
REQ.target                        #Restrict only to that 'USER|ORG'
REQ.target_id                     #Same with USER|ORG_ID
REQ.repositories                  #Restrict only to those 'REPO'_ARR
REQ.repository_ids                #Same with REPO_ID_ARR

RES.*                             #Like POST /applications/CLIENT_ID/token, except:
                                  #  - access_token* -> token*

DELETE
 /applications/CLIENT_ID/grant    #Delete an APP "authorization" for a given install
REQ.access_token                  #'ACCESS_TOKEN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSIONS ==>                   #Can be 'read', 'write' or 'admin'
                                  #Can be for an ORG, a REPO or a USER
ORG PERMISSIONS ==>               #
administration                    #ORG CRUD|settings
blocking_users                    #ORG banned users
events                            #
members                           #
organization_codespaces_secrets   #
organization_codespaces_settings  #
organization_codespaces           #
organization_dependabot_secrets   #
personal_access_token_requests    #
personal_access_tokens            #
projects                          #
secrets                           #
self_hosted_runners               #
team_discussions                  #
variables                         #
webhooks                          #

REPO PERMISSIONS ==>              #
actions                           #
administration                    #
checks                            #
code_scanning_alerts              #
codespaces_lifecycle_admin        #
codespaces_metadata               #
codespaces_secrets                #
codespaces                        #
commit_statuses                   #
contents                          #
dependabot_alerts                 #
dependabot_secrets                #
deployments                       #
environments                      #
issues                            #
metadata                          #
pages                             #
projects                          #
pull_requests                     #
repository_security_advisories    #
secret_scanning_alerts            #
secrets                           #
variables                         #
webhooks                          #
workflows                         #

USER PERMISSIONS ==>              #
block_another_user                #
codespaces_user_secrets           #
email_addresses                   #
followers                         #
gpg_keys                          #
gists                             #
git_ssh_keys                      #
interaction_limits                #
notifications                     #
plan                              #
profile                           #
ssh_signing_keys                  #
starring                          #
watching                          #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        API PERMISSIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


API PERMISSIONS ==>               #Can be:
                                  #  - 'read': not with workflows
                                  #  - 'write': not with organization_plan
                                  #  - 'admin': only with repository|organization_projects
contents                          #Repo git contents and metadata (commits, branches, releases, etc.)
single_file                       #Repo git single file
administration                    #Repo CRUD|settings|teams
metadata                          #Repo search|metadata
statuses                          #Commit status
checks                            #Commit status checks
issues                            #Issues
pull_requests                     #PRs
repository|organization_projects  #Repo projects
team_discussions                  #Team discussions
[organization_]secrets            #Repo secrets
repository|organization_hooks     #User-defined webhooks
actions                           #GitHub Actions
workflows                         #GitHub Actions workflow files
deployments                       #GitHub deployments
environments                      #GitHub deployments' environments
[organization_]packages           #GitHub Packages
pages                             #GitHub Pages
secret_scanning_alerts            #Secret scanning alerts
security_events                   #Security alerts like code scanning
vulnerability_alerts              #Dependabot alerts
members                           #ORG teams|members
organization_administration       #Access to ORG
organization_custom_roles         #ORG roles management
organization_user_blocking        #ORG banned users
organization_
 personal_access_tokens           #ORG access tokens
organization_
 personal_access_token_requests   #ORG access tokens requests
organization_plan                 #ORG pricing plan
organization_announcement_banners #ORG announcement banners
organization_self_hosted_runners  #ORG self-hosted CI runners


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       GITHUB-APP-TOKEN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tidbex/github-app-token           #GitHub action to get a currently installed GitHub app's IAT
                                  #Goal: use it instead of current GITHUB_TOKEN
                                  #Only needed when current GITHUB_TOKEN is missing permissions that GitHub app has
                                  #  - including access to other repos
                                  #Version 1.8.0
                                  #Checked internal code ???
INPUTS.app_id                     #APP_ID (should use secrets)
INPUTS.private_key                #APP_PRIVATE_KEY (should use secrets), base64'd or not
INPUTS.installation_id            #INSTALLATION_ID
INPUTS.repository                 #'USER/REPO' (def: current one)
INPUTS.permissions                #'OBJ_JSON'
INPUTS.github_api_url             #'URL' of GitHub API (for GitHub enterprise)
OUTPUTS.token                     #'JWT' (IAT)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           AUTH-APP            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/auth-app                 #???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTH-OAUTH-APP         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/auth-oauth-app           #Version 6.0.1
                                  #Node/Deno

octokit-auth-oauth-app.js/X.Y.Z
 BROWSER_USER_AGENT [C]           #

createOAuthUserAuth(...)          #Forwards to @octokit/auth-oauth-user

createOAuthAppAuth(OPTS)->OAPP    #
OPTS.*                            #Like createOAuthUserAuth()

OAPP(AOPTS)->>AUTH_STATE          #
AOPTS.type                        #Either:
                                  #  - 'oauth-user':
                                  #     - for second server-side step of UAT
                                  #     - return AUTH_STATE from @octokit/auth-oauth-user
                                  #  - 'oauth-app':
                                  #     - for Authorization: Basic [C]
                                  #     - return OAPP_RESP
AOPTS.factory                     #FUNC. Calls and returns FUNC({ ...OPTS, ...AOPTS })

OAPP_RESP.type|clientType
 |clientId|clientSecret           #From OPTS.*
OAPP_RESP.headers.authorization   #'basic BASE64(CLIENT_ID:CLIENT_SECRET)'

OAPP.hook(REQUEST, ...)->>RES     #Like REQUEST(...) (see @octokit/request) but using:
                                  #  Authorization: Basic BASE64(CLIENT_ID:CLIENT_SECRET) [C]
                                  #Only if /applications/APP/token|grant
                                  #Can be used as REQUEST's OPTS.request.hook


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTH-OAUTH-USER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/auth-oauth-user          #Version 3.0.1
                                  #Node/Deno

createOAuthUserAuth(OPTS)->OUAPP  #
OPTS.*                            #Like exchangeWebFlowCode()
OPTS.onTokenCreated               #FUNC(AUTH_STATE, { type: OPTS.type }) called by OUAPP(OPTS) on creation|refresh|reset

OUAPP(OPTS)->>AUTH_STATE          #Call exchangeWebFlowCode() from @octokit/oauth-methods
OPTS.type                         #Can be:
                                  #  - 'refresh': if ACCESS_TOKEN `expiresAt` old, call refreshToken()
                                  #  - 'check': call checkToken()
                                  #  - 'reset': call resetToken()
                                  #  - 'delete': call deleteToken()
                                  #  - 'deleteAuthorization': call deleteAuthorization()
AUTH_STATE.type                   #Always 'token'
AUTH_STATE.tokenType              #Always 'oauth'
AUTH_STATE.clientType|clientId
 |clientSecret|token|refreshToken
 |expiresAt|refreshTokenExpiresAt #Like RES.* from exchangeWebFlowCode()

OUAPP.hook(REQUEST, ...)->>RES    #Like REQUEST(...) (see @octokit/request) but using:
                                  #  - Authorization: Bearer ACCESS_TOKEN [C] (using OAUTH())
                                  #  - Authorization: Basic BASE64(CLIENT_ID:CLIENT_SECRET) [C] (if /applications/APP/token|grant)
                                  #Can be used as REQUEST's OPTS.request.hook


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OAUTH-METHODS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/oauth-methods            #REST API methods to get UAT
                                  #Version 3.0.1
                                  #Node/Deno

getWebFlowAuthorizationUrl        #Forwards to @octokit/oauth-authorization-url
 (OPTS)->RES                      #I.e. gets AUTH_URL to start flow for UAT
OPTS.request                      #REQUEST (@octokit/request)

exchangeWebFlowCode(OPTS)->>RES   #POST /login/oauth/access_token, i.e. second server-side step for UAT
OPTS.clientType
OPTS.clientId
OPTS.redirectUrl
OPTS.request                      #Like getWebFlowAuthorizationUrl()
OPTS.clientSecret                 #'CLIENT_SECRET'
OPTS.code                         #'CODE'

RES.authentication.token          #'ACCESS_TOKEN'
RES.refresh_token                 #'REFRESH_TOKEN'
RES.expiresAt                     #DATE
RES.refreshTokenExpiresAt         #DATE
RES.authentication.
 clientType|clientId|clientSecret #Like OPTS.*

refreshToken(OPTS)->>RES          #POST /login/oauth/access_token, for refresh
OPTS.*                            #Like exchangeWebFlowCode(), but no code
OPTS.refresh_token                #'REFRESH_TOKEN'
RES.*                             #Like exchangeWebFlowCode()

checkToken(OPTS)->>RES            #POST /applications/CLIENT_ID/token
OPTS.*                            #Like exchangeWebFlowCode(), but no code|redirectUrl
OPTS.token                        #'ACCESS_TOKEN'
RES.*                             #Like exchangeWebFlowCode() + response from that API method

resetToken(OPTS)->>RES            #PATCH /applications/CLIENT_ID/token
OPTS.*                            #Like checkToken()
RES.*                             #Like exchangeWebFlowCode() + response from that API method

scopeToken(OPTS)->>RES            #POST /applications/CLIENT_ID/token/scoped
OPTS.*                            #Like checkToken() + request from that API method
RES.*                             #Like exchangeWebFlowCode() + response from that API method

deleteToken(OPTS)->>RES           #DELETE /applications/CLIENT_ID/token
OPTS.*                            #Like checkToken()
RES.*                             #Response from that API method

deleteAuthorization(OPTS)->>RES   #DELETE /applications/CLIENT_ID/grant
OPTS.*                            #Like checkToken()
RES.*                             #Response from that API method

hook


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    OAUTH-AUTHORIZATION-URL    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/oauth-authorization-url  #Version 6.0.2
                                  #Node/Deno

oauthAuthorizationUrl(OPTS)->RES  #Returns a AUTH_URL, to start flow for UAT
OPTS|RES.clientType               #'APP_TYPE', either 'oauth-app' (def, not documented) or 'github-app'
OPTS|RES.clientId                 #'CLIENT_ID' for ?client_id
OPTS|RES.redirectUrl              #'CALLBACK_URL' (def: null) for ?redirect_uri
OPTS|RES.state                    #'STATE' (def: random 10 chars base36'd) for ?state
OPTS|RES.login                    #'USER' (def: null) for ?login
OPTS|RES.allowSignup              #BOOL (def: true), for ?allow_signup

OPTS.baseUrl                      #'BASE_URL' (def: 'https://github.com')

RES.url                           #'BASE_URL/login/oauth/authorize?VARs' using OPTs above


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MARKETPLACE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Marketplace:
  - where it is installed
  - alternative:
     - GET /apps/APP/installations/new
     - in UI, for local dev
     - private app
  - logo
  - can set a price

https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28 ???

learn the device flow, because it is needed for CLIs ???
  - including:
     - API:
        - POST /login/device/code
        - POST /login/oauth/access_token with REQ.device_code|grant_type
     - @octokit/auth-oauth-device
     - @octokit/oauth-methods: createDeviceCode(), exchangeDeviceCode()
