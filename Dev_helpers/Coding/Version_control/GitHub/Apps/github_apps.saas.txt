
               
   GITHUB_APPS  
               



GOAL ==>                          #  - get API token (IAT|UAT) to call GitHub API
                                  #  - trigger webhooks on GitHub events

OAUTH APPS ==>                    #Deprecated older version of GitHub apps
                                  #Can only use UAT, not IAT
                                  #Not documented

GITHUB MAIN|API|WEBHOOKS
 |ACTIONS ==>                     #See other GitHub docs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOKS ==>                      #See GitHub webhooks doc, including:
                                  #  - EVENTs github_app_authorization, installation[_repositories|target], marketplace_purchase
                                  #  - PAYLOAD.installation, XWEBHOOK_DELIVERY.installation_id


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REGISTER MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /[organizations/ORG/]        #Create (not install) app from URL
 /settings/apps/new               #Can also be done|edited from UI
                                  #  - can edit MANIFEST.name
REQ.manifest                      #"MANIFEST_JSON"
REQ.state                         #'STATE'. Like OAuth

GET /[organizations/ORG/]         #Same but:
 /settings/apps/new               #  - use ?VAR instead of REQ.manifest
                                  #  - does not call GET MCALLBACK_URL
?state=STATE                      #

GET MCALLBACK_URL                 #Called after POST /settings/apps/new
?code=CODE                        #
?state=STATE                      #

POST
 /app-manifests/CODE/conversions  #Must be called after GET MCALLBACK_URL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER REQUEST        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


?name
MANIFEST.name                     #STR. App name
?url
MANIFEST.url "URL"                #Homepage
?description
MANIFEST.description              #STR

MANIFEST.redirect_url             #"MCALLBACK_URL"

?callback_urls
MANIFEST.callback_urls            #"CALLBACK_URL"_ARR (e.g. one per environment)

?setup_url                        #"SETUP_URL", redirected on after installation (or on update)
MANIFEST.setup_url                #Meant for docs
?setup_on_update
MANIFEST.setup_on_update          #BOOL (def: false). Redirect to SETUP_URL also when app is being updated

?APP_PERMISSION
MANIFEST.default_permissions      #STR
 .APP_PERMISSION                  #Changing permissions must be approved by ORG|USER (depending on permission)
?request_oauth_on_install
MANIFEST.request_oauth_on_install #BOOL (def: false). Ask to both "install" and "authorize"

?webhook_active
MANIFEST.hook_attributes.active   #BOOL (def: false). Trigger webhooks
?webhook_url
MANIFEST.hook_attributes.url      #"WEBHOOK_URL". Uses POST. Prefer https
?events
MANIFEST.default_events           #"WEBHOOK_EVENT"_ARR (def: all) to trigger webhooks on

?public
MANIFEST.public                   #BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REGISTER RESPONSE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES                               #Of POST /app-manifests/CODE/conversions
RES.id                            #'APP_ID'
                                  #ID of app, secret
RES.node_id                       #'BASE64'

RES.pem                           #'APP_PRIVATE_KEY'. App secret
                                  #PEM format (PKCS#1 RSAPrivateKey)
                                  #Not stored by GitHub, i.e. only shown once
RES.client_id                     #'CLIENT_ID'. OAuth CLIENT_ID, public
                                  #Can get from app settings UI
RES.client_secret                 #'CLIENT_SECRET'. OAuth CLIENT_SECRET, private
                                  #Can get from app settings UI
RES.webhook_secret                #'WEBHOOK_SECRET'. App secret, meant to authenticate webhook requests

RES.slug                          #STR
RES.owner                         #USER

RES.name
RES.description
RES.permissions
RES.events                        #Like MANIFEST.*

RES.external_url                  #'URL'
RES.html_url                      #'URL'

RES.created_at|updated_at         #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /apps/APP/installations/new   #Install an APP from a URL
?state=STATE                      #

INSTALLATION_ID                   #Single install of an APP

ORG INSTALLATION ==>              #Instead of a user, can be installed by an ORG
                                  #Only by org owner
                                  #  - or users with "GitHub app manager" role on specific app
                                  #     - can edit but not install|uninstall app
                                  #Org user can request org owner

SUSPENSION ==>                    #Pausing APP. No permissions during that time
                                  #Can be done by user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUTH COMMON          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/auth-app                 #Version 5.0.6
                                  #Node/Deno
                                  #Handles APP_JWT, Basic auth, IAT, UAT
createAppAuth(AAOPTS)->AAPP       #
AAPP(AOPTS)->>JWT_INFO|BASIC_INFO
 |INSTALL_INFO|UAT_INFO           #
AAOPTS.appId|privateKey           #Required, even if not used by the specific flow
AAOPTS.log                        #OBJ with `warn` method (def: console)
                                  #Used to log time skew errors, or HTTP retries

@octokit/auth-oauth-app           #Version 6.0.1
                                  #Node/Deno
                                  #Handles APP_JWT, UAT
createOAuthAppAuth(PPOPTS)->PAPP  #
PAPP(POPTS)->>OBJ                 #

@octokit/auth-oauth-user          #Version 3.0.1
                                  #Node/Deno
                                  #Handles UAT

@octokit/auth-app
@octokit/auth-oauth-app
@octokit/auth-oauth-user
createOAuthUserAuth(UUOPTS)->UAPP #
UAPP(UOPTS)->>UAT_INFO            #Forwards to exchangeWebFlowCode|createOAuthDeviceAuth()
                                  #Cached, i.e. only done once

octokit-auth-NAME.js/X.Y.Z
 BROWSER_USER_AGENT [C]           #NAME depends on module used: app, oauth-app, oauth-device

AAPP|PAPP|DAPP|UAPP               #Like REQUEST(...) (see @octokit/request)
 .hook(REQUEST, ...)->>RET        #But using the right Authorization [C] depending on the request.
                                  #With APP_JWT, handles time skew errors
                                  #With IAT, retries with exponential backoff since newly created IAT sometimes need it
                                  #Can be used as REQUEST's UUOPTS.request.hook

FOPTS|EOPTS|VOPTS|[D]DOPTS|MOPTS
 |NOPTS|AAOPTS|[P]POPTS|UUOPTS
 .request                         #REQUEST (from @octokit/request)

AOPTS|POPTS.factory               #FUNC. Calls and returns FUNC([A]AOPTS|[P]POPTS)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            APP JWT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Bearer APP_JWT [C] #Authenticate as a GitHub app, for all installations
                                  #Only used for specific GitHub app-related API calls, documented below

APP_JWT                           #Must be signed with APP_PRIVATE_KEY
APP_JWT.ENVLOP.alg                #'RS256'
APP_JWT.PAYLOAD.iat               #DATE_NUM
APP_JWT.PAYLOAD.exp               #DATE_NUM. Max: iat + 10min
APP_JWT.PAYLOAD.iss               #'APP_ID'

AOPTS.type 'app'                  #Forwards to universal-github-app-jwt and returns JWT_INFO
JWT_INFO.type                     #Always 'app'

universal-github-app-jwt          #Version 1.1.1
                                  #Node/Deno/browsers
githubAppJwt(JOPTS)->>JWT_RES     #Create APP_JWT

AAOPTS|JOPTS.privateKey           #'APP_PRIVATE_KEY'
                                  #In browsers/Deno, must first convert from PKCS#1 to PKCS#8
                                  #  openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in OLD_APP_PRIVATE_KEY.pem -out NEW_APP_PRIVATE_KEY.key

JOPTS.id
AAOPTS|JWT_INFO|JWT_RES.appId
JWT_PAYLOAD.iss                   #'APP_ID'

JOPTS.now                         #NUM (in secs, def: now)
JWT_PAYLOAD.iat                   #JOPTS.now - 30 (for time clock drift)
AAOPTS.timeDifference             #NUM (def: 0) added to JOPTS.now
JWT_RES.expiration
JWT_PAYLOAD.exp                   #10 minutes from JWT_PAYLOAD.iat
JWT_INFO.expiresAt                #Same but as 'DATE'

JWT_INFO|JWT_RES.token            #'APP_JWT'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BASIC AUTH           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Basic
 BASE64(CLIENT_ID:CLIENT_SECRET)
 [C]                              #Alternative to APP_JWT. Used with a different set of API calls

AOPTS.type 'oauth-app'            #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-app'
                                  #Returns BASIC_INFO

POPTS.type 'oauth-app'            #For Authorization: Basic [C]
                                  #Returns PAPP_RESP

PPOPTS|BASIC_INFOPAPP_RESP
 .clientType                      #'APP_TYPE'
AAOPTS|POPTS|BASIC_INFO|PAPP_RESP
 .clientId                        #'CLIENT_ID'
AAOPTS|POPTS|BASIC_INFO|PAPP_RESP
 .clientSecret                    #'CLIENT_SECRET'

BASIC_INFO|PAPP_RESP.type         #Always 'oauth-app'

BASIC_INFO|PAPP_RESP
 .headers.authorization           #'basic BASE64(CLIENT_ID:CLIENT_SECRET)'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              IAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Bearer IAT [C]     #Authenticate as a GitHub app, for a specific installation ("server-to-server")
                                  #Read|write access a repo|org
                                  #Unrelated to user, i.e. not restricted by user permissions
                                  #Actions are shown as done by app
https://x-access-token:IAT
 @github.com/USER/REPO.git        #Authenticate as a GitHub app installation, for HTTP-based git

POST /app/installations           #Get IAT ("Installation Access Token")
 /INSTALLATION_ID/access_tokens   #Must be authenticated with APP_JWT
                                  #GitHub app must have been installed

AOPTS.type 'installation'         #POST /app/installations/INSTALLATION_ID/access_tokens
                                  #Authenticated with an APP_JWT
AAOPTS
 .appId|privateKey|timeDifference #Like with AOPTS.type 'app'
[A]AOPTS|INSTALL_INFO
 .installationId                  #'INSTALLATION_ID'

AOPTS|INSTALL_INFO
 .permissions.TOKEN_PERMISSION
REQ|RES
 .permissions.TOKEN_PERMISSION    #STR. Restrict to specific permissions (def: all)
AOPTS|INSTALL_INFO.repositoryIds
REQ.repository_ids                #REPO_ID_ARR (def: all) which can be accessed
AOPTS|INSTALL_INFO.repositoryNames
REQ.repositories                  #Same with 'REPO'_ARR
RES.repositories                  #REPO_ARR

INSTALL_INFO.token
RES.token                         #'ghs_*'. IAT
INSTALL_INFO.createdAt
RES.created_at                    #'DATE'
INSTALL_INFO.expiresAt
RES.expires_at                    #'DATE'. Only valid 1 hour, no refresh, but can re-create it
INSTALL_INFO.singleFileName
RES.single_file                   #'PATH'. Permission on single file only
INSTALL_INFO.repositorySelection
RES.repository_selection          #'all|selected'. Whether RES.repositor* used

INSTALL_INFO.type                 #Always 'token'
INSTALL_INFO.tokenType            #Always 'installation'

AOPTS.refresh                     #BOOL. If false (def), caches IAT
AAOPTS.cache                      #Customize cache
                                  #OBJ: get('KEY')->'IAT', set('KEY', 'IAT')
                                  #Def:
                                  #  - lru-cache (see its doc)
                                  #  - in-memory
                                  #  - max 15e3 items
                                  #  - max 1 hour (same as IAT expiration time)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       GITHUB-APP-TOKEN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tidbex/github-app-token           #GitHub action to get an installed GitHub app's IAT
                                  #Goal: use it instead of GitHub action's current GITHUB_TOKEN
                                  #Only needed when current GITHUB_TOKEN is missing permissions that GitHub app has
                                  #  - including access to other repos
                                  #Version 1.8.0

INPUTS.app_id                     #'APP_ID' (should use secrets)
INPUTS.private_key                #APP_PRIVATE_KEY (should use secrets), base64'd or not
INPUTS.installation_id            #INSTALLATION_ID
                                  #Def: current repo, using GET RREPO/installation
INPUTS.repository                 #'USER/REPO' (def: current one)
INPUTS.permissions                #'OBJ_JSON'
INPUTS.github_api_url             #'URL' of GitHub API (for GitHub enterprise)

SECRET_OUTPUTS.token              #'IAT'. Created using POST /app/installations/INSTALLATION_ID/access_tokens
                                  #While authenticated using a APP_JWT created by @octokit/auth-app createAppAuth() with type 'app'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UAT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization:                    #Authenticate as a GitHub app user ("user-to-server")
 Bearer ACCESS_TOKEN [C]          #Alternative to IAT, but with permissions on behalf of user
                                  #  - including access other things than repo|org
                                  #  - i.e. some actions available with ACCESS_TOKEN but not IAT
                                  #Actions are shown as done by user, with additional hint it's been done through an app
                                  #Restricted by permissions of both app and user
                                  #Obtained either through web flow or device flow

OAUTH ==>                         #Used to get|refresh ACCESS_TOKEN ("user access token", UAT)
                                  #User must first have "authorized" the app
                                  #See OAuth doc too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         UAT WEB FIRST         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEB FLOW ==>                      #Must be used when client is a browser

GET /login/oauth/authorize        #Start web flow. Can either:
                                  #  - redirect user manually to it
                                  #  - redirect at installation time
                                  #     - CALLBACK_URL must always use default value
                                  #     - no ?state parameter needed

@octokit/oauth-methods
getWebFlowAuthorizationUrl
 (FOPTS)->FIRST_INFO              #Forwards to @octokit/oauth-authorization-url

@octokit/oauth-authorization-url  #Version 6.0.2
                                  #Node/Deno
oauthAuthorizationUrl(FOPTS)
 ->FIRST_INFO                     #Returns a AUTH_URL, to start flow for UAT
FOPTS|FIRST_INFO.clientType       #'APP_TYPE', either 'oauth-app' (def, not documented) or 'github-app'
FIRST_INFO.url                    #AUTH_URL, i.e. 'BASE_URL/login/oauth/authorize?VARs' using OPTs above
FOPTS.baseUrl                     #'BASE_URL' (def: 'https://github.com')

?client_id
FOPTS|FIRST_INFO.clientId         #'CLIENT_ID'
?redirect_uri                     #'CALLBACK_URL' (def: none)
FOPTS|FIRST_INFO.redirectUrl      #Must be among MANIFEST.callback_urls
                                  #Def: MANIFEST.callback_urls[0]
?scope                            #Not present
?state                            #'STATE' (def: none)
FOPTS|FIRST_INFO.state            #'STATE' (def: random 10 chars base36'd)
?login
FOPTS|FIRST_INFO.login            #'USER' (def: none). Prompt user to login
?allow_signup
FOPTS|FIRST_INFO.allowSignup      #BOOL (def: true). Allow unauthenticated users to signup, not only login

GET CALLBACK_URL                  #Done by GitHub when user submits consent on GET /login/oauth/authorize
?code                             #'CODE'
?state                            #'STATE'. Should verify it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        UAT WEB SECOND         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-user'
                                  #Returns UAT_INFO

POPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-user UAPP()
                                  #Returns UAT_INFO

UAPP(UOPTS)->>UAT_INFO            #Forwards to exchangeWebFlowCode()
                                  #Cached, i.e. only done once

POST /login/oauth/access_token    #Second step of web flow, to do inside CALLBACK_URL handler
REQ.grant_type                    #Not present
RES.scope                         #Always empty
RES.state                         #'STATE'

@octokit/oauth-methods
exchangeWebFlowCode(EOPTS)->>RET  #POST /login/oauth/access_token, i.e. second server-side step for UAT

RET.authentication.clientType
PPOPTS|UUOPTS|EOPTS|UAT_INFO
 .clientType                      #'APP_TYPE'
REQ.client_id
RET.authentication.clientId
[A]AOPTS|[P]POPTS|UUOPTS|EOPTS
 |UAT_INFO.clientId               #'CLIENT_ID'
REQ.client_secret
RET.authentication.clientSecret
[A]AOPTS|[P]POPTS|UUOPTS|EOPTS
 |UAT_INFO.clientSecret           #'CLIENT_SECRET'
REQ.redirect_uri
AOPTS|POPTS|UUOPTS|EOPTS
 .redirectUrl                     #'CALLBACK_URL'
REQ|AOPTS|POPTS|UUOPTS|EOPTS.code #'CODE'

REQ.repository_id                 #REPO_ID. Only give permissions to this REPO

UAT_INFO.type                     #Always 'token'
UAT_INFO.tokenType                #Always 'oauth'

RES.access_token
RET.authentication.token
UAT_INFO.token                    #'ACCESS_TOKEN'. Always start with ghu_*

RES.refresh_token
RET.authentication.refreshToken
UAT_INFO.refreshToken             #'REFRESH_TOKEN'. Always start with ghr_*
RES.expires_in                    #NUM (in secs, always 8h), of the ACCESS_TOKEN
                                  #Must be opted in
RET.authentication.expiresAt
UAT_INFO.expiresAt                #Same but as DATE
RES.refresh_token_expires_in      #NUM (in secs, always 6 months), of the REFRESH_TOKEN
RET.authentication
 .refreshTokenExpiresAt
UAT_INFO.refreshTokenExpiresAt    #Same but as DATE

UAT_INFO.invalid                  #undefined|true. true if token was reset|deleted


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       UAT DEVICE FIRST        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEVICE FLOW ==>                   #Must be used when client is not a browser, e.g. a CLI or mobile|desktop app
                                  #Must be enabled in settings (beta feature)

AOPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-app with POPTS.type 'oauth-user'
                                  #Returns UAT_INFO

POPTS.type 'oauth-user'           #Forwards to @octokit/auth-oauth-user UAPP()
                                  #Returns UAT_INFO

UAPP(UOPTS)->>UAT_INFO            #Forwards to createOAuthDeviceAuth()
                                  #Cached, i.e. only done once

@octokit/auth-oauth-device        #Version 5.0.2
                                  #Node/Deno/browsers
createOAuthDeviceAuth(DDOPTS)
 ->DAPP
DAPP(DOPTS)->>UAT_INFO            #Does createDeviceCode() then poll with exchangeDeviceCode()

POST /login/device/code           #First step of device flow
REQ.client_id                     #CLIENT_ID

@octokit/oauth-methods
createDeviceCode(MOPTS)->>RET     #POST /login/device/code

RES|RET.verification_uri          #'.../login/device'
                                  #User must go to that URL and submit 'USER_CODE'
RES|RET.interval                  #NUM (secs, always 5s). Polling interval for VERIFY_URL
RES|RET.device_code               #'DEVICE_CODE'
RES|RET.user_code                 #'USER_CODE'
RES|RET.expires_in                #NUM (in secs, always 15m). For DEVICE_CODE|USER_CODE

PPOPTS|UUOPTS|DDOPTS|NOPTS
 .clientType                      #'APP_TYPE'
UUOPTS|NOPTS.clientSecret         #'CLIENT_SECRET'. Only used if UOPTS.type defined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       UAT DEVICE SECOND       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /login/oauth/access_token    #Second step of device flow, to poll
RES.*                             #Like web flow
RES.error                         #'NAME' among:
                                  #  - 'authorization_pending': user has not entered USER_CODE yet
                                  #  - 'access_denied': user clicked cancel
                                  #  - 'expired_token': DEVICE_CODE expired
                                  #  - 'slow_down': polling too fast
                                  #  - 'incorrect_client_credentials': invalid CLIENT_ID
                                  #  - 'incorrect_device_code': invalid DEVICE_CODE
                                  #  - 'unsupported_grant_type': invalid ?grant_type
                                  #  - 'device_flow_disabled': device flow not enabled in settings

@octokit/oauth-methods
exchangeDeviceCode(NOPTS)->>RET   #POST /login/oauth/access_token
RET.*                             #Like exchangeWebFlowCode()

REQ.client_id
[A]AOPTS|[P]POPTS|UUOPTS|DDOPTS
 |MOPTS|NOPTS.clientId            #'CLIENT_ID'
REQ.device_code
NOPTS.code                        #'DEVICE_CODE'
REQ.grant_type                    #Always 'urn:ietf:params:oauth:grant-type:device_code'
REQ.repository_id                 #REPO_ID. Restrict permissions to only this REPO

AOPTS|POPTS|UUOPTS|DDOPTS         #FUNC(RET)[->>] called with createDeviceCode() response
 .onVerification                  #User must input 'USER_CODE' in VERIFY_URL
                                  #E.g. should print|show instructions

AOPTS|POPTS|UUOPTS|DDOPTS
 .auth.refresh                    #BOOL (def: false). Forces re-using it even when calling DAPP() several times


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          UAT ACTIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UUOPTS.onTokenCreated             #FUNC(UAT_INFO, { type: UUOPTS.type }) called by UAPP(UUOPTS) on:
                                  #  - creation (only with web flow)
                                  #  - refresh (UOPTS.type 'refresh')
                                  #  - reset (UOPTS.type 'reset')

UOPTS.type                        #Action on the token, among:
                                  #  - 'get' (def): none
                                  #  - 'refresh': if ACCESS_TOKEN `expiresAt` old, call refreshToken()
                                  #  - 'check': call checkToken()
                                  #  - 'reset': call resetToken()
                                  #  - 'delete': call deleteToken()
                                  #  - 'deleteAuthorization': call deleteAuthorization()

@octokit/oauth-methods            #REST API methods related to UAT
                                  #Version 3.0.1
                                  #Node/Deno
VRET.authentication.clientType
VOPTS.clientType                  #'APP_TYPE'
VRET.authentication.clientId
VOPTS.clientId                    #'CLIENT_ID'
VRET.authentication.clientSecret
VOPTS.clientSecret                #'CLIENT_SECRET'

VRET.authentication.token         #'ACCESS_TOKEN'
VRET.authentication.expiresAt     #'DATE'

VRET.data.*                       #HTTP raw response


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          UAT REFRESH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /login/oauth/access_token    #Get a new ACCESS_TOKEN using a REFRESH_TOKEN
REQ.client_id                     #CLIENT_ID
REQ.client_secret                 #CLIENT_SECRET
REQ.grant_type                    #'refresh_token'
RES.*                             #Like web flow

@octokit/oauth-methods
refreshToken(VOPTS)->>VRET        #POST /login/oauth/access_token

VRET.authencation.refreshToken
VOPTS.refreshToken
REQ.refresh_token                 #'REFRESH_TOKEN'
VRET.authentication
 .refreshTokenExpiresAt           #'DATE'
VOPTS.redirectUrl                 #'CALLBACK_URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UAT RESET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PATCH                             #Refresh ACCESS_TOKEN, but delete old one
 /applications/CLIENT_ID/token    #Must use Basic authentication
RES.id                            #NUM
RES.url                           #'URL'
RES.token                         #'ACCESS_TOKEN'
RES.token_last_eight              #'ACCESS_TOKEN' last 8 chars
RES.fingerprint                   #'ACCESS_TOKEN' fingerprint
RES.scopes                        #ARR
RES.app.url                       #'URL'
RES.app.name                      #STR
RES.app.client_id                 #'CLIENT_ID'
RES.note[_url]                    #STR
RES.created_at|updated_at         #'DATE'
RES.expires_at                    #'DATE'
RES.owner                         #USER

@octokit/oauth-methods
resetToken(VOPTS)->>VRET          #PATCH /applications/CLIENT_ID/token
                                  #Uses Basic authentication

VOPTS|REQ.access_token            #'ACCESS_TOKEN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UAT CHECK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /applications/CLIENT_ID/token#Get info about an ACCESS_TOKEN
                                  #Must use Basic authentication
RES.*                             #Like PATCH /applications/CLIENT_ID/token
RES.access_token[_last_eight]     #Instead of RES.token*
RES.hashed_token                  #'ACCESS_TOKEN' hash

@octokit/oauth-methods
checkToken(VOPTS)->>VRET          #POST /applications/CLIENT_ID/token
                                  #Uses Basic authentication

VOPTS|REQ.access_token            #'ACCESS_TOKEN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UAT SCOPE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /applications/CLIENT_ID      #Copy ACCESS_TOKEN but with stricter permissions ("scoped ACCESS_TOKEN")
 /token/scoped                    #Must use Basic authentication
RES.*                             #Like PATCH /applications/CLIENT_ID/token
RES.hashed_token                  #'ACCESS_TOKEN' hash

@octokit/oauth-methods
scopeToken(VOPTS)->>VRET          #POST /applications/CLIENT_ID/token/scoped
                                  #Uses Basic authentication

VOPTS.accessToken
REQ.access_token                  #'ACCESS_TOKEN'
VOPTS.permissions.TOKEN_PERMISSION
REQ.permissions.TOKEN_PERMISSION  #STR.
VOPTS.target
REQ.target                        #Restrict only to that 'USER|ORG'
VOPTS.targetId
REQ.target_id                     #Same with USER|ORG_ID
VOPTS.repositories
REQ.repositories                  #Restrict only to those 'REPO'_ARR
VOPTS.repositoryIds
REQ.repository_ids                #Same with REPO_ID_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       UAT DELETE TOKEN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETE                            #Delete an ACCESS_TOKEN
 /applications/CLIENT_ID/token    #Must use Basic authentication
                                  #Can also be done by user through UI

@octokit/oauth-methods
deleteToken(VOPTS)->>RET          #DELETE /applications/CLIENT_ID/token
                                  #Uses Basic authentication
                                  #Empty RET

VOPTS|REQ.access_token            #'ACCESS_TOKEN'

github_app_authorization          #Webhook triggered when ACCESS_TOKEN revoked
                                  #Should undo the app logic for that user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       UAT DELETE GRANT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETE                            #Delete an APP "authorization" for a given install
 /applications/CLIENT_ID/grant    #Must use Basic authentication

@octokit/oauth-methods
deleteAuthorization(VOPTS)->>RET  #DELETE /applications/CLIENT_ID/grant
                                  #Uses Basic authentication
                                  #Empty RET

VOPTS|REQ.access_token            #'ACCESS_TOKEN'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        APP PERMISSIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


APP PERMISSIONS ==>               #Can be 'read', 'write' or 'admin'
                                  #Can be for an ORG, a REPO or a USER

ORG PERMISSIONS ==>               #
administration                    #ORG CRUD|settings
blocking_users                    #ORG banned users
events                            #
members                           #
organization_codespaces_secrets   #
organization_codespaces_settings  #
organization_codespaces           #
organization_dependabot_secrets   #
personal_access_token_requests    #
personal_access_tokens            #
projects                          #
secrets                           #
self_hosted_runners               #
team_discussions                  #
variables                         #
webhooks                          #

REPO PERMISSIONS ==>              #
actions                           #
administration                    #
checks                            #
code_scanning_alerts              #
codespaces_lifecycle_admin        #
codespaces_metadata               #
codespaces_secrets                #
codespaces                        #
commit_statuses                   #
contents                          #
dependabot_alerts                 #
dependabot_secrets                #
deployments                       #
environments                      #
issues                            #
metadata                          #
pages                             #
projects                          #
pull_requests                     #
repository_security_advisories    #
secret_scanning_alerts            #
secrets                           #
variables                         #
webhooks                          #
workflows                         #

USER PERMISSIONS ==>              #
block_another_user                #
codespaces_user_secrets           #
email_addresses                   #
followers                         #
gpg_keys                          #
gists                             #
git_ssh_keys                      #
interaction_limits                #
notifications                     #
plan                              #
profile                           #
ssh_signing_keys                  #
starring                          #
watching                          #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       TOKEN PERMISSIONS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOKEN PERMISSIONS ==>             #Can be:
                                  #  - 'read': not with workflows
                                  #  - 'write': not with organization_plan
                                  #  - 'admin': only with repository|organization_projects

contents                          #Repo git contents and metadata (commits, branches, releases, etc.)
single_file                       #Repo git single file
administration                    #Repo CRUD|settings|teams
metadata                          #Repo search|metadata
statuses                          #Commit status
checks                            #Commit status checks
issues                            #Issues
pull_requests                     #PRs
repository|organization_projects  #Repo projects
team_discussions                  #Team discussions
[organization_]secrets            #Repo secrets
repository|organization_hooks     #User-defined webhooks
actions                           #GitHub Actions
workflows                         #GitHub Actions workflow files
deployments                       #GitHub deployments
environments                      #GitHub deployments' environments
[organization_]packages           #GitHub Packages
pages                             #GitHub Pages
secret_scanning_alerts            #Secret scanning alerts
security_events                   #Security alerts like code scanning
vulnerability_alerts              #Dependabot alerts
members                           #ORG teams|members
organization_administration       #Access to ORG
organization_custom_roles         #ORG roles management
organization_user_blocking        #ORG banned users
organization_
 personal_access_tokens           #ORG access tokens
organization_
 personal_access_token_requests   #ORG access tokens requests
organization_plan                 #ORG pricing plan
organization_announcement_banners #ORG announcement banners
organization_self_hosted_runners  #ORG self-hosted CI runners


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MARKETPLACE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Finish documenting octokit

Document probot

Finish docs, stopped at https://docs.github.com/en/apps/publishing-apps-to-github-marketplace/github-marketplace-overview/about-github-marketplace-for-apps ???

Marketplace:
  - where it is installed
  - alternative:
     - GET /apps/APP/installations/new
     - in UI, for local dev
     - private app
  - logo
  - can set a price

Document https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28 ???
