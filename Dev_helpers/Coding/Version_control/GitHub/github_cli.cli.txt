
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   GITHUB_CLI   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2.69.0

ENVVAR GH_NO_UPDATE_NOTIFIER      #Unless set, automatically updates

GOAL ==>                          #Both:
                                  #  - a command for every GitHub API endpoint with `gh api`
                                  #  - CLI commands to simplify DX flow

INSTALLATION ==>                  #Go binary, installed through OS package

HUB ==>                           #Old unofficial CLI, to avoid

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

ENVVAR GH_PATH                    #PATH to `gh` binary

GH_CONFIG_DIR                     #DIR of config files. Def:
                                  #  - $XDG_CONFIG_HOME/gh (if available)
                                  #  - $AppData/GitHub CLI (if available, Windows only)
                                  #  - ~/.config/gh
GH_CONFIG_DIR/config.yml          #CONFIG

gh config --host|-h               #'HOST'. Per-HOST CONFIG

gh config list                    #Print CONFIG
gh config get 'VAR'               #Get CONFIG.VAR
gh config set 'VAR' VAL           #Set CONFIG.VAR

gh config clear-cache             #Clear CLI cache

                                  ┌───────────┐
                                  │   ALIAS   │
                                  └───────────┘

gh alias set ALIAS '...'          #Make `gh ALIAS [...]` a shortcut for gh ...
                                  #'...' can use:
                                  #  - $NUM: additional arguments in [...]
                                  #  - - (stdin)
--shell|-s                        #Run in `sh`
                                  #Can also prepend ALIAS with !
--clobber                         #Overwrite

CONFIG.aliases.ALIAS              #'...'

gh alias list                     #

gh alias delete ALIAS             #
--all                             #

gh alias import PATH|-            #Import ALIASes
                                  #PATH is YAML, with keys being ALIAS, and values '...'
--clobber                         #Overwrite

                                  ┌─────────┐
                                  │   CLI   │
                                  └─────────┘

ENVVAR GH_FORCE_TTY               #Force TTY. If NUM, number of COLs. If percentage, number of COLs multiplied by detected one
CONF.prompt
GH_PROMPT_DISABLED                #No interactive prompt

INTERACTIVE PROMPT ==>            #Many commands show interactive prompt when required arguments are missing

ENVVAR GLAMOUR_STYLE              #Markdown style
ENVVAR GH_MDWIDTH                 #NUM (def: min(120, terminal width)). Max width in Markdown

ENVVAR NO_COLOR                   #
ENVVAR CLICOLOR=0                 #
ENVVAR CLICOLOR_FORCE=1           #

gh completion                     #Completion script
--shell|-s                        #bash|zsh|fish|powershell

                                  ┌──────────┐
                                  │   EDIT   │
                                  └──────────┘

CONFIG.pager
ENVVAR GH_PAGER|PAGER             #Used to read files

CONFIG.editor
ENVVAR GH_EDITOR|GIT_EDITOR
 |VISUAL|EDITOR                   #Used to edit files

CONFIG.browser
ENVVAR GH_BROWSER|BROWSER         #Used to open links
--web|-w                          #Use browser. Only with commands:
                                  #  - auth login
                                  #  - gist|issue|pr|project|release|repo|run|ruleset|workflow view
                                  #  - codespace|issue|label|pr|project|ruleset list
                                  #  - codespace|gist|issue|pr create
                                  #  - issue|pr comment
                                  #  - pr checks|diff
                                  #  - search, extension search
                                  #  - codespace code

gh browse [ARG]                   #Browse a REPO
gh browse NUM                     #Open issue|PR NUM
gh browse PATH                    #Open file
gh browse SHA                     #Open commit
--projects|-p                     #Open Projects page
--releases|-r                     #Open Releases page
--settings|-s                     #Open Settings page
--wiki|-w                         #Open Wiki page
--no-browser|-n                   #Print REPO URL without opening it
--commit|-c                       #'SHA' (def: 'last')

                                  ┌────────────┐
                                  │   OUTPUT   │
                                  └────────────┘

ENVVAR GH_DEBUG                   #false, true, or 'api'. Verbose mode

--json                            #'VAR,...'. Outputs as JSON instead of text
                                  #If 'VAR,...' omitted, prints list of possible VARs
                                  #Only with commands:
                                  #  - codespace|issue|label|pr|repo|run|workflow|variable|cache|release list
                                  #  - codespace|issue|pr|release|repo|run view
                                  #  - variable get
                                  #  - issue|pr status
                                  #  - pr checks
                                  #  - codespace ports
                                  #  - search, extension search
                                  #  - api: always enabled
--format                          #One of: 'json' (same as --json)
--jq|-q                           #STR. Applies jq filter.
                                  #Requires --json
--template|-t                     #STR. Applies Go template.
                                  #Requires --json


                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

ENVVAR GH_HOST
gh auth ...
--hostname|-h                     #'HOSTNAME' (def: 'github.com')

gh auth login|refresh
--scopes|-s                       #Additional 'PRIVILEGE,...'. Default: repo, read:org, gist
--insecure-storage                #Do not encrypt gho_* token locally

gh auth login                     #Authenticate as an OAuth app, then keep gho_* token locally
                                  #Can call multiple times to log in to additional user
--with-token                      #Read token from stdin instead of browser
CONFIG.git_protocol
--git-protocol|-p                 #'ssh' (def) or 'https'
--skip-ssh-key                    #If --git-protocol 'ssh', do not generate SSH key, just re-use any current ones

ENVVAR GH_TOKEN|GITHUB_TOKEN      #Can be used too

gh auth switch                    #Switch user

gh auth switch|token|logout
--user|-u                         #'USER' (def: all)

gh auth logout                    #

gh auth status                    #Show auth status
--show-token|-t                   #Do not hide gho_* token
--active                          #Only active account

gh auth token                     #Print gho_* token

gh auth refresh                   #Grant more PRIVILEGEs
--remove-scopes|-r                #'PRIVILEGE,...' to remove instead
--reset-scopes                    #Resets to min PRIVILEGEs

gh auth setup-git                 #Make `git` use `gh auth` for authentication
--force|-f                        #Allow different and unknown --hostname

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

--limit|-L                        #NUM (def: 30). ?per_page API parameter
                                  #Only for commands:
                                  #  - * list, except alias|config|variable|secret|extension|gpg-key|ssh-key
                                  #  - search, extension search

--sort|-s                         #'PROP'. ?sort API parameter
                                  #Only for command: cache list
--order|-O                        #'asc|desc'. ?direction API parameter
                                  #Only for command: cache list

CONFIG.http_unix_socket           #Proxies HTTP requests to this Unix socket

gh api PATH                       #Run GitHub REST API request
gh api graphql                    #Run GitHub GraphQL API request
--method|-X                       #'HTTP_METHOD'
                                  #Def: 'POST' if -F|-f, 'GET' otherwise
--field|-F VARR=VAL               #Query|body parameter
                                  #'{owner|repo|branch}' are guessed from current DIR
                                  #'@PATH' and '-' can be used
                                  #'VARR' are []-delimited
                                  #With GraphQL, VARR is query, operationName, or GraphQL variable
--raw-field|-f VARR=STR           #Query|body parameter, with STR value
--input                           #Request body parameter, as 'PATH', or '-' for stdin
--header|-H VAR:VAL               #Request header
--paginate                        #Get full response through pagination
                                  #With GraphQL, requires using $endCursor variable and returning pageInfo.endCursor|hasNextPage
--slurp                           #With --paginate, flatten response
--include|-i                      #Print response status and headers
--silent                          #Do not print response
--verbose                         #Like ENVVAR GH_DEBUG
--cache                           #'DURATION'. Cache response

                                  ┌────────────────┐
                                  │   EXTENSIONS   │
                                  └────────────────┘

CLI EXTENSION ==>                 #Use topic `gh-extension`

gh extension install STR          #Install EXTENSION
                                  #STR can be 'USER/REPO', URL or DIR
--force                           #If already installed, upgrade
--pin                             #'TAG|COMMIT' to pin version

gh extension remove EXTENSION     #

gh EXTENSION ...
gh extension exec EXTENSION ...   #Run an EXTENSION

gh extension list                 #List installed EXTENSIONs

gh extension browse               #Browse available EXTENSIONs in TUI
gh extension search QUERY         #Search available EXTENSIONs

gh extension create NAME          #Create a new
--precompiled                     #'go|other'. Precompiled binary

ENVVAR
 GH_NO_EXTENSION_UPDATE_NOTIFIER=1#Unless set, notify of new extension versions (if any) once per day

                                  ┌──────────┐
                                  │   REPO   │
                                  └──────────┘

--repo-owner                      #'USER'
                                  #Only for commands:
                                  #  - codespace code|cp|delete|edit|jupyter|logs|ports|rebuild|ssh|stop|view

ENVVAR GH_REPO                    #'USER/REPO'
--repo|-R                         #For same commands as --repo-owner, plus:
                                  #  - codespace create|list
                                  #  - search (can be 'USER/REPO,...')
                                  #  - issue|pr|label|release|workflow|run|secret|variable|cache|ruleset ...
                                  #Def: based on cwd
--repos|-r                        #'USER/REPO,...'
                                  #Only for commands: git secret|variable set
                                  #Def: based on cwd

--branch|-b                       #'BRANCH'
                                  #Only for commands: browse, codespace create, pr checkout, repo sync|view, run list
                                  #Def: based on current `git`

--user|-u                         #'USER'
                                  #Only for commands: codespace delete|list|stop, secret delete|list|set, run list

--org|-o                          #'ORG'
                                  #Same commands as --user, plus: variable delete|list|set, repo fork, status, ruleset list|view
gh org list                       #List ORGs

                                  ┌──────────────┐
                                  │   COMMANDS   │
                                  └──────────────┘

gh status                         #Shows assigned issues|PRs, PR reviews, @-mentions, new issues|PR|comments
--exclude|-e                      #'USER/REPO,...'

gh repo ...                       #Commands related to repos:
                                  #  - create, clone, delete, list, edit, view, rename
                                  #  - fork, sync, set-default
                                  #  - [un]archive
                                  #  - deploy-key [add|delete|list]
                                  #  - license|gitignore
                                  #  - autolink

gh pr ...                         #Commands related to PRs:
                                  #  - create, list, view
                                  #  - comment, ready, review
                                  #  - edit, close, reopen status
                                  #  - [un]lock
                                  #  - diff
                                  #  - update-branch
                                  #  - checkout, merge (git operations)
                                  #  - checks (checks status)

gh issue ...                      #Commands related to issues:
                                  #  - create, delete, list, view
                                  #  - comment
                                  #  - edit, close, reopen, status
                                  #  - [un]lock, [un]pin, transfer
                                  #  - develop (create branches based on issue)

gh label ...                      #Commands related to labels: create, clone, delete, list, edit

gh release ...                    #Commands related to releases:
                                  #  - create, delete, edit, list, view
                                  #  - upload, download, delete-asset

gh ruleset ...                    #Commands related to repo rulesets

gh ruleset list|view              #
--parents|-p                      #Include parent rulesets

gh ruleset check [BRANCH]         #View rulesets for a given BRANCH (def: current)
--default                         #Use REPO default BRANCH

gh workflow|run ...               #Commands related to WORKFLOW|RUNs. See GitHub actions doc
gh cache ...                      #Commands related to GitHub actions (see its doc) cache

gh project ...                    #Commands related to GitHub projects:
                                  #  - create, copy, delete, close, edit, list, view
                                  #  - item-create, item-delete, item-edit, item-list, item-add, item-archive
                                  #  - field-create, field-delete, field-list
                                  #  - mark-template

gh secret ...                     #Commands related to repo secrets: set, delete, list

gh variable ...                   #Commands related to repo variables: set, delete, list

gh gpg-key ...                    #Commands related to GPG keys: add, delete, list

gh ssh-key ...                    #Commands related to SSH keys: add, delete, list

gh gist ...                       #Commands related to gist: create, clone, delete, list, view, edit, rename

gh codespace ...                  #Commands related to Codespace:
                                  #  - code (open), create, delete, list, view, edit, rebuild, stop
                                  #  - cp (files)
                                  #  - jupyter
                                  #  - ssh
                                  #  - logs
                                  #  - ports [forward|visibility]

gh search ...                     #Commands searching: code, repos, issues, prs, commits
