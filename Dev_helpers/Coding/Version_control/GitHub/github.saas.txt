
          
   GITHUB  
          



git instaweb                  #Bundled in Git, but I prefer command line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FEATURES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


USER PROFILE ==>              #  - must be same as git user.name|email
                              #  - private email: use USER@users.noreply.github.com
                              #  - can block users
                              #  - 2-factor authentication: mobile app, SMS
                              #  - SSH keys

ORGANIZATION ==>              #Team-based ACL:
                              #  - owners
                              #  - admin: create|delete repos
                              #  - write: like collaborators (see below) for given repos
                              #  - read: like everyone (see below) for given repos

PERMISSIONS ==>               #  - owner: can edit, manage collaborators, changing visibility to private
                              #  - collaborators: push, manage comments|issues|pull requests, create wiki, lock conversations
                              #  - everyone: pull|fork, comments|issues|pull requests, edit wiki

REPOSITORY ==>                #  - Creating: can initialize repo (LICENSE, .gitignore, README.md)
                              #  - GIT_URL: HTTPS, SSH (must use git@github.com), Git
                              #  - Private repo: paid
                              #  - Can transfer repos to other users|organizations or rename: will redirect automatically from
                              #    former URLs

FORKING ==>                   #  - when editing a file from another repo, automatically do it
                              #  - should add upstream repo with git remote

GIT FUNCTIONS ==>             #  - git log [-- FILE]: history
                              #  - git show COMMIT:FILE: <>
                              #  - git show COMMIT -p --stat (with also rich editing diff): commit
                              #  - git blame: blame
                              #  - git checkout, branch --list: branches
                              #  - git tag, git checkout, git archive: tags
                              #  - git diff (can also use REPO:COMMIT and {@DATE}COMMIT): REPO/compare

ISSUES AND PULL REQUESTS ==>  #  - assigning to people
                              #  - applying labels (help searching)
                              #  - applying milestones (user stories or releases, with date due, last update, percentage
                              #    issues|pull requests done)
                              #  - can be closed:
                              #     - with commit message "Closes|Fixes|Resolves [USER/REPO]#NUM"
                              #     - when pull request is (if associated with pull request)
                              #     - with pull request description "Closed #NUM"
                              #  - can setup default templates with ROOT/.github/PULL_REQUEST_TEMPLATE|ISSUE_TEMPLATE.md
                              #  - can show contributing link on issues/pull requests with ROOT/.github/CONTRIBUTING.md

PULL REQUESTS ==>             #  - Should add tests and update documentation
                              #  - Compare&review: pull request from same repo
                              #  - merged with --no-ff
                              #  - can revert too
                              #  - use LRBRANCH pull/ID/head:LBRANCH
                              #  - CONTRIBUTING.md: automatically shown
                              #  - Syntax guidelines (can use .jshintrc)

RENDERING ==>                 #Markdown can be used in source code previewed, issues|comments|pull requests, Gists:
                              #  - Live preview editor
                              #  - Additional syntax:
                              #     - links to commit ID, issue ID, @NAME mentions (notifies user)
                              #     - tables, strikethrough
                              #     - code blocks, with auto syntax highlighting
                              #     - URLs autolinking
                              #     - Emoji
                              #Other: diff of images, GeoJSON, STL (3D file), CSV|TSV
                              #Limits: 1GB/repo, 100MB/file

OTHER FUNCTIONS ==>           #  - commits comments
                              #  - Releases: like tags but also has deployment archives (different from source code) and
                              #    release comments
                              #  - Advanced search:
                              #     - repos, issues, users, code
                              #     - Explore: discover new repos, starring
                              #  - Stats:
                              #     - commits graphs over time
                              #     - contributors
                              #     - traffic (git clone, pageviews)

BADGES ==>                    #https://img.shields.io/github/:
                              #  - version:
                              #     - /tag|package-json|manifest-json/USER/REPO/TAG.svg: version
                              #     - /release/USER/REPO[/all].svg:
                              #        - release version
                              #       - if "all" include pre-releases
                              #     - /release-date[-pre]/USER/REPO.svg: release date
                              #  - license:
                              #     - /license/USER/REPO.svg
                              #  - traffic:
                              #     - /downloads[-pre]/USER/REPO/[latest|RELEASE/]total|FILE.svg
                              #        - GitHub release downloads
                              #        - "-pre": pre-release
                              #     - /forks|stars|watchers|followers/REPO/USER.svg?style=social&label=Fork|Star|Watch|Follow
                              #     - /search/USER/REPO/goto.svg: number of GitHub searches
                              #  - activity:
                              #     - /commits-since/USER/REPO[/TAG|BRANCH].svg: number of commits
                              #     - /commits-activity/w|m|y/USER/REPO.svg: number of commits
                              #     - /last-commit/USER/REPO[/TAG|BRANCH].svg: last commit date
                              #     - /contributors/USER/REPO.svg: number of contributors
                              #  - size:
                              #     - /languages/code-size/USER/REPO.svg: code size
                              #     - /repo-size/USER/REPO.svg: repo size
                              #     - /size/USER/REPO/PATH/TO/FILE.svg: file size
                              #  - issues/PR:
                              #     - /issues[-pr][-closed][-raw]/USER/REPO[/ISSUE_LABEL].svg: GitHub issues
                              #     - /issues/detail/s|title|u|label|comments|age|last-update/USER/REPORT/ISSUE_ID.svg:
                              #        - GitHub issue state|title|author|label|comments|age|last update
                              #     - /status/s|contexts/pulls/USER/REPO/PR_ID.svg: GitHub PR state
                              #  - languages:
                              #     - /languages/top/USER/REPO.svg: top language
                              #     - /languages/count/USER/REPO.svg: number of languages
                              #  - others:
                              #     - /commit-status/USER/REPO/BRANCH/COMMIT_HASH.svg: whether commit is in BRANCH

NOTIFICATIONS ==>             #  - commits pushed on own repos
                              #  - watching repos: releases, issues, pull requests, commits comments, create|remove branches
                              #  - use @NAME, assigning to issue|pull request, suscribe to conversation
                              #  - following people: starring, following, creates repo, gets new fork
                              #  - can email, RSS

WIKI ==>                      #  - REPO with name REPO.wiki, filename is file title, many *.md files
                              #  - Special files: Home, _Footer, _Sidebar

GITHUB PAGES ==>              #  - free Hosting
                              #  - no HTTPS
                              #  - can use custom domain name (create a CNAME root file)
                              #  - can be:
                              #     - user|organization page:
                              #        - REPO name is USER|ORG.github.io.
                              #        - Served at http://USER|ORG.github.io
                              #        - Uses master branch.
                              #     - project page:
                              #        - served at http://USER|ORG.github.io/PROJECT.
                              #        - Uses gh-pages orphan branch (git checkout --orphan)
                              #        - Can use ready-made HTML/CSS templates

GIST ==>                      #  - like REPO but single file
                              #  - can be secret (not shown on Explore, but URL still public)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     CONTINUOUS DEPLOYMENT     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



GH_RELEASES_DEPLOY            #Create|update GitHub release, with assets in it, with Travis (see its doc)
GH_RELEASES_DEPLOY.provider   #'releases'
GH_RELEASES_DEPLOY.api_key    #OAUTH_TOKEN: with [public_]repo scope
GH_RELEASES_DEPLOY.
 user|password                #STR. Alternative (prefer OAuth)
GH_RELEASES_DEPLOY.file       #FILE[_ARR]
GH_RELEASES_DEPLOY.file_glob  #BOOL (def: false). Allows globbing in GH_RELEASES_DEPLOY.file
GH_RELEASES_DEPLOY.overwrite  #BOOL (def: false)
GH_RELEASES_DEPLOY.name       #STR. GitHub release title
GH_RELEASES_DEPLOY.body       #STR. GitHub release description
GH_RELEASES_DEPLOY.
 draft|prerelease             #BOOL. Flag as draft|prerelease


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB API ==>                    #Version 2022-11-28

https://api.github.com            #API root
https://github.com                #API root for /login, /settings

Accept:
 application/vnd.github[+json] [C]#
Accept: application/json [C]      #
Accept: application/              #When returning comments with Markdown, FORMAT can be:
 vnd.github.FORMAT+json [C]       #  - 'raw': as is, under `body`
                                  #  - 'text': as text, under `body_text`
                                  #  - 'html', under `body_html`
                                  #  - 'full', all
Accept:
 application/vnd.github.raw [C]   #When returning Git blob, return as is, instead of as { content: 'BASE64' }

X-GitHub-Api-Version:
 YYYY-MM-DD [C]                   #

Authorization: Bearer TOKEN [C]   #Can be: PERSONAL_ACCESS_TOKEN, GitHub app JWT, IAT, UAT
PERSONAL_ACCESS_TOKEN             #Generated from the UI for a given user
                                  #Can restrict PERMISSIONS
GITHUB ACTIONS ==>                #Should use ENVVAR GITHUB_TOKEN

OPENAPI ==>                       #3.0

User-Agent: STR [C]               #Must be specified

X-RateLimit-Limit: NUM [S]
X-RateLimit-Used: NUM [S]
X-RateLimit-Remaining: NUM [S]
X-RateLimit-Reset: NUM [S]        #

Link: <URL?PARAM=NUM>;
 rel="first|prev|next|last"
 ,... [S]
?page|before|after|since=STR [C]  #Pagination. Request parameter depends on endpoint
?per_page=NUM [C]                 #
RESP.total_count                  #NUM

OCTOKIT.paginate
 ('METHOD /URL'[, OPTS])->>RES    #Repeats calls using Link [S]
OPTS.per_page                     #NUM
OPTS.*                            #Like OCTOKIT.request()

E-Tag: STR [S]
Last-Modified: STR [S]
If-None-Match: STR [C]
If-Modified-Since: STR [C]        #Available on some endpoints

X-Github-Request-Id: STR [S]      #

REST ==>                          #RESTful API
                                  #CRUD with POST|PATCH|GET|DELETE
                                  #All return a RES except DELETE

X*                                #API request|response body
X*_U                              #For fields that can be specified on create|update
X*_C                              #For fields that can be specified on create but not update
X*_F                              #For fields that are only returned when a single resource is retrieved, not a list

UARR                              #ARR which can be updated with fields:
                                  #  - PROP: replace whole ARR
                                  #  - add|remove_PROP

ERROR_RESP.message                #'MESSAGE'
ERROR_RESP.errors                 #RESPERR_ARR|undefined
RESPERR.code                      #'ERROR_CODE'
RESPERR.documentation_url         #'URL'
RESPERR.resource                  #'RESOURCE' (e.g. 'Issue')
RESPERR.field                     #'PROP'
RESPERR.missing                   #'RESOURCE', when missing
RESPERR.missing_field             #'PROP', when missing
RESPERR.already_exists            #'RESOURCE', when already exists
RESPERR.invalid                   #'PROP', when invalid format
RESPERR.unprocessable             #'PROP', when invalid format

GET /                             #Return all API endpoints


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        OCTOKIT/REQUEST        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/request                  #Version 7.0.1
                                  #Node/browser/Deno

REQUEST('METHOD /PATH'[, OPTS])   #Make an HTTP request using @octokit/endpoint REQ_OPTS
 ->>RES                           #Automatically parses|serializes request|response body
                                  #Throws either AbortError or RequestError

OPTS.request.fetch                #FUNC (def: globalThis.fetch)
OPTS.request.log                  #OBJ, with OBJ.warn(STR) (def: console)
                                  #Only used to log deprecated endpoints
OPTS.request.*                    #fetch() REQQ, e.g. signal ABORT_SIGNAL or (Node only) agent AGENT
OPTS.request.hook                 #Middleware FUNC(REQUEST, REQ_OPTS)->REQUEST
                                  #REQUEST can use the following additional fields

RES.status                        #NUM
RES.url                           #'URL'
RES.headers                       #OBJ
RES.data                          #VAL

REQUEST.defaults(REQ_OPTS)
 ->REQUEST                        #Merge to default REQ_OPTS
REQUEST.endpoint                  #ENDPOINT (from @octokit/endpoint)

User-Agent: octokit-request.js
 /X.Y.Z USER_AGENT [C]            #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     OCTOKIT/REQUEST-ERROR     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/request-error            #4.0.2
                                  #Node/browser/Deno
ERROR.name                        #'HttpError'
ERROR.status                      #NUM
ERROR.request                     #REQ_OPTS
ERROR.headers                     #OBJ
ERROR.response                    #RES


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       OCTOKIT/ENDPOINT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/endpoint                 #Version 8.0.1
                                  #Node/browser/Deno
ENDPOINT
 (['METHOD /PATH'][, OPTS])
 ->REQ_OPTS                       #Get REQ_OPTS
defaults(OBJ)->ENDPOINT           #Merge to defaults values

OPTS.route                        #'METHOD /PATH'
OPTS.method                       #'METHOD' (def: 'GET')
OPTS.url                          #'/PATH' or absolute 'URL'. Can include :VAR
OPTS.baseUrl                      #Base 'URL' of OPTS.url, if absolute
                                  #Def: 'https://api.github.com'
OPTS.headers                      #OBJ. Def:
                                  #  Accept: application/vnd.github.v3+json [C]
                                  #  Content-Type: application/json; charset=utf-8 [C]
                                  #  User-Agent: octokit-endpoint.js/X.Y.Z USER_AGENT [C]
OPTS.data                         #VAL. Request body
OPTS.mediaType.format             #'MIME' (def: '') like 'raw', 'diff' or 'text+json'
OPTS.mediaType.previews           #STR_ARR. Opt-in beta features
OPTS.VAR                          #Either:
                                  #  - URL parameter
                                  #  - query variables (if GET|HEAD)
                                  #  - request body
OPTS.request                      #OBJ kept as is

REQ_OPTS.method                   #'METHOD'
REQ_OPTS.url                      #OPTS.url, after OPTS.baseUrl resolution, and templating with OPTS.VAR
REQ_OPTS.headers                  #OBJ
REQ_OPTS.body                     #VAL
REQ_OPTS.request                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         WEBHOOKS MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOK TYPES ==>                 #Webhooks can be for a:
                                  #  - GitHub app
                                  #  - REPO: UI or API
                                  #  - ORG: UI or API

EVENT                             #Webhook main event
                                  #Max 20 WEBHOOKs per EVENT
SUBEVENT                          #Webhook sub-event. Also named "action"

/orgs/ORG/hooks[/...]             #Same as /repos/USER/REPO/hooks[/...] but with ORG webhooks
                                  #No .../test endpoint
/app/hook[/...]                   #Same as /repos/USER/REPO/hooks/WEBHOOK_ID[/...] but with GitHub app webhooks
                                  #Must be authenticated with an APP_JWT
                                  #Only for .../config|deliveries endpoints

POST /repos/USER/REPO/hooks       #
GET /repos/USER/REPO/hooks        #
XWEBHOOK.url
GET /repos/USER/REPO
 /hooks/WEBHOOK_ID                #
PATCH /repos/USER/REPO
 /hooks/WEBHOOK_ID                #
DELETE /repos/USER/REPO
 /hooks/WEBHOOK_ID                #
XWEBHOOK.id                       #XWEBHOOK_ID
XWEBHOOK_C.name                   #Always 'web'
XWEBHOOK.type                     #'Repository|Organization'
XWEBHOOK_U.active                 #BOOL. To disable
XWEBHOOK_U.events                 #'EVENT'_UARR
XWEBHOOK_U.config                 #XWEBHOOK_CONF_C|F
XWEBHOOK.last_response.code       #NUM|null. HTTP status
XWEBHOOK.last_response.status     #STR|null
XWEBHOOK.last_response.message    #STR|null
XWEBHOOK.created_at|updated_at    #'DATE'

GET /repos/USER/REPO
 /hooks/WEBHOOK_ID/config         #
PATCH /repos/USER/REPO
 /hooks/WEBHOOK_ID/config         #
XWEBHOOK_CONF_U.url               #'WEBHOOK_URL'
XWEBHOOK_CONF_U.secret            #'WEBHOOK_SECRET'
                                  #Any XWEBHOOK (not XWEBHOOK_CONF) update deletes it unless specified
XWEBHOOK_CONF_U.content_type      #'json|form'
XWEBHOOK_CONF_U.insecure_ssl      #'0|1'
XWEBHOOK_CONF_U.token             #STR
XWEBHOOK_CONF_U.digest            #Always 'sha256'
XWEBHOOK_CONF_U.room              #STR
XWEBHOOK_CONF_F.email             #'EMAIL'
XWEBHOOK_CONF_F.username          #STR
XWEBHOOK_CONF_F.password          #STR
XWEBHOOK_CONF_F.subdomain         #STR

XWEBHOOK.deliveries_url
GET /repos/USER/REPO
 /hooks/WEBHOOK_ID/deliveries     #RES is XWEBHOOK_DELIVERY_ARR
GET /repos/USER/REPO
 /hooks/WEBHOOK_ID
 /deliveries/DELIVERY_ID          #RES is XWEBHOOK_DELIVERY_F
XWEBHOOK_DELIVERY.id              #DELIVERY_ID
XWEBHOOK_DELIVERY.guid            #'EVENT_ID'
XWEBHOOK_DELIVERY.event           #'EVENT'
XWEBHOOK_DELIVERY.action          #'SUBEVENT'|null
XWEBHOOK_DELIVERY.repository_id   #REPO_ID|null
XWEBHOOK_DELIVERY.installation_id #INSTALLATION_ID|null, if GitHub app
XWEBHOOK_DELIVERY.status          #STR. HTTP status
XWEBHOOK_DELIVERY.status_code     #NUM
XWEBHOOK_DELIVERY.duration        #NUM
XWEBHOOK_DELIVERY.delivered_at    #'DATE'
?redelivery
XWEBHOOK_DELIVERY.redelivery      #BOOL. Whether it was retried
XWEBHOOK_DELIVERY_F
 .request.headers                 #OBJ|null
XWEBHOOK_DELIVERY_F
 .request.payload                 #OBJ|null
XWEBHOOK_DELIVERY_F
 .response.headers                #OBJ|null
XWEBHOOK_DELIVERY_F
 .response.payload                #STR|null

POST /repos/USER/REPO
 /hooks/WEBHOOK_ID
 /deliveries/DELIVERY_ID/attempts #Retry. Empty REQ|RES

XWEBHOOK.ping_url
PATCH /repos/USER/REPO
 /hooks/WEBHOOK_ID/pings          #Trigger a 'ping' EVENT. Empty REQ|RES

XWEBHOOK.test_url
PATCH /repos/USER/REPO
 /hooks/WEBHOOK_ID/test           #Repeat last 'push' EVENT. Empty REQ|RES


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         WEBHOOKS CALL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST WEBHOOK_URL                  #

SSL VERIFICATION ==>              #Optionally require HTTPS

DISABLING ==>                     #WEBHOOKs can be disabled

Content-Type: MIME [C]            #Either application/json or application/x-www-form-urlencoded

WEVENT.name
X-GitHub-Event: EVENT [C]         #
WEVENT.id
X-GitHub-Delivery: EVENT_ID [C]   #
User-Agent:
 GitHub-Hookshot/ID [C]           #

WEVENT.payload                    #Passed to webhook
PAYLOAD                           #Max 25MB

PAYLOAD.action                    #'SUBEVENT'
PAYLOAD.sender                    #USER that triggered the event
PAYLOAD.repository                #REPO
PAYLOAD.organization              #ORG
PAYLOAD.installation              #GitHub app INSTALLATION, if any
PAYLOAD.*                         #EVENT|SUBEVENT-specific


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    WEBHOOKS AUTHENTICATION    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WOPTS.secret
WEBHOOK_SECRET                    #Webhook-specific, private

WEVENT.signature
X-GitHub-Signature-256:           #SHA256_HMAC(PAYLOAD, WEBHOOK_SECRET)
 sha256=HASH [C]                  #Used for authentication|integration

@octokit/webhooks
sign|verify(...)                  #Forwards to @octokit/webhook-methods
WHOOKS.sign|verify(...)           #Forwards to @octokit/webhook-methods, but without 'WEBHOOK_SECRET' argument

@octokit/webhooks-methods         #Version 4.0.0
                                  #Node/Deno
                                  #Browsers too, but WEBHOOK_SECRET should not be exposed to client code
sign('WEBHOOK_SECRET', 'PAYLOAD')
 ->>'HASH'                        #
verify('WEBHOOK_SECRET',
 'PAYLOAD', 'HASH')->>BOOL        #
verifyWithFallback
 (..., 'WEBHOOK_SECRET'_ARR)
 ->>BOOL                          #Like verify() but with multiple WEBHOOK_SECRETs (for rotated keys)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        WEBHOOK EVENTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


*                                 #Any EVENT

ping                              #Webhook creation
                                  #Can also be triggered with POST /repos/USER/REPO/hooks/WEBHOOK_ID/pings
meta                              #Webhook itself
                                  #SUBEVENTs: deleted
repository_dispatch               #Custom event, triggered by POST /repos/USER/REPO/dispatches
                                  #SUBEVENTs: 'CUSTOM'

repository                        #SUBEVENTs:
                                  #  - created edited deleted [un]archived
                                  #  - privatized publicized
                                  #  - renamed transferred
repository_import                 #Import REPO from another VCS
create|delete                     #A branch|tag

public                            #Make private repository public
branch_protection_rule            #Branch protection rule changed.
                                  #SUBEVENTs: created|edited|deleted

watch                             #REPO star (not when starting watching)
                                  #SUBEVENTs: started
star                              #REPO star
                                  #SUBEVENTs: created deleted
fork                              #Someone forked repo

push                              #New commit.
                                  #Includes push to a branch that is also a pull request (i.e. would create 2 workflows, one
                                  #for push, one for pull_request)
                                  #Does not include push to a forked repository that is also a pull_request
commit_comment                    #Comment on a commit

pull_request                      #SUBEVENTs (def: opened synchronize reopened):
                                  #  - [re]opened edited closed
                                  #  - [un]locked
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - synchronize
                                  #  - converted_to_draft ready_for_review review_requested review_request_removed
                                  #  - automerge_enabled|disabled
                                  #  - dequeued|enqueued merged
pull_request_review               #SUBEVENTs: submitted edited dismissed
pull_request_review_thread        #SUBEVENTs: [un]resolved
pull_request_review_comment       #SUBEVENTs: created edited deleted
merge_group                       #PR added to a merge queue
                                  #SUBEVENTs: checks_requested

issues                            #SUBEVENTs:
                                  #  - [re]opened edited deleted closed
                                  #  - [un]locked
                                  #  - [un]pinned
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - [de]milestoned
                                  #  - transferred (to another repo)
issue_comment                     #Each comment in an issue|PR
                                  #SUBEVENTs: created edited deleted
discussion                        #SUBEVENTs:
                                  #  - created edited deleted
                                  #  - [un]locked
                                  #  - [un]pinned
                                  #  - [un]labeled
                                  #  - [un]answered
                                  #  - transferred (to another repo)
                                  #  - category_changed
discussion_comment                #Each comment in a discussion
                                  #SUBEVENTs: created edited deleted
label                             #List of possible issue labels in the repository
                                  #SUBEVENTs: created edited deleted
milestone                         #SUBEVENTs: created opened edited deleted closed

project                           #GitHub project
                                  #SUBEVENTs: created|reopened edited deleted closed
project_column                    #GitHub project column of cards
                                  #SUBEVENTs: created edited deleted moved
project_card                      #GitHub project card
                                  #SUBEVENTs: created edited deleted moved converted (to an issue)
projects_v2                       #GitHub project, ORG-level
                                  #SUBEVENTs: created|reopened edited deleted closed
projects_v2_item                  #GitHub project item, ORG-level
                                  #SUBEVENTs: created|restored edited deleted archived converted reordered

release                           #GitHub release
                                  #SUBEVENTs: created edited deleted [pre]released|[un]published
registry_package                  #SUBEVENTs: published updated
deployment                        #Deploy code to remote server
                                  #Must be handled by external providers
                                  #SUBEVENTs: created
deployment_status                 #Deployment status changed
                                  #SUBEVENTs: created
deploy_key                        #SUBEVENTs: created deleted

status                            #Commit status
check_suite                       #Group of checks (automatic CI actions)
                                  #SUBEVENTs: [re]requested completed
check_run                         #Single check
                                  #SUBEVENTs: created|rerequested completed requested_action (button to ask user for additional action)

code_scanning_alert               #SUBEVENTs:
                                  #  - created fixed
                                  #  - appeared_in_branch (already created but appeared in a new branch)
                                  #  - reopened (not manually by user)
                                  #  - reopened|closed_by_user
repository_vulnerability_alert    #Security vulnerability.
                                  #SUBEVENTs: create dismiss resolve
dependabot_alert                  #SUBEVENTs:
                                  #  - created dismissed fixed
                                  #  - reintroduced reopened
security_advisory                 #Security in GitHub itself.
                                  #SUBEVENTs: published updated withdrawn performed

organization                      #SUBEVENTs:
                                  #  - renamed deleted
                                  #  - member_invited|added|removed
org_block                         #SUBEVENTs: [un]blocked
membership                        #ORG members
                                  #SUBEVENTs: added removed
team                              #ORG team
                                  #SUBEVENTs:
                                  #  - created edited deleted
                                  #  - added_to_repository removed_from_repository
team_add                          #ORG team added to a REPO
member                            #Repo collaborators|admins
                                  #SUBEVENTs: added edited deleted
sponsorship                       #SUBEVENTs:
                                  #  - created edited
                                  #  - pending_cancellation cancelled
                                  #  - pending_tier_change tier_changed

page_build                        #GitHub Pages build

gollum                            #Wiki update

workflow_dispatch                 #UI button trigger
workflow_run                      #Run of another WORKFLOW
                                  #SUBEVENTs: requested in_progress completed
                                  #OPTS:
                                  #  - workflows 'WORKFLOW'_ARR
workflow_job                      #Run of a WORKFLOW JOB
                                  #SUBEVENTs: queued waiting (for approval) in_progress completed

github_app_authorization          #GitHub app UAT changes
                                  #SUBEVENTs: revoked
installation                      #GitHub app installation
                                  #SUBEVENTs:
                                  #  - created deleted
                                  #  - new_permissions_accepted
                                  #  - [un]suspend
installation_repositories         #GitHub app installation permissions to access specific permissions
                                  #SUBEVENTs: added removed
installation_target               #GitHub app installation activity
marketplace_purchase              #SUBEVENTs:
                                  #  - purchased
                                  #  - pending_change[_cancelled] changed
                                  #  - cancelled

@octokit/webhooks-examples|schemas#Version 7.0.3
                                  #Node/Deno/browsers
                                  #List of webhook events definitions
                                  #JSON schema:
                                  #  - v7
                                  #  - requires ajv-formats, and ajv.addKeyword('tsAdditionalProperties')
@octokit/webhooks-examples        #WEBHOOK_EXAMPLES_ARR
WEBHOOK_EXAMPLES.name             #'EVENT'
WEBHOOK_EXAMPLES.actions          #'SUBEVENT'_ARR
WEBHOOK_EXAMPLES.properties.PROP  #JSON_SCHEMA_OBJ of PAYLOAD.PROP
WEBHOOK_EXAMPLES.description      #STR
WEBHOOK_EXAMPLES.examples         #PAYLOAD_ARR

@octokit/webhooks-schemas         #JSON_SCHEMA_OBJ of any PAYLOAD (using `oneOf`)

@octokit/webhooks
emitterEventNames                 #'EVENT[.SUBEVENT]'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       WEBHOOKS LISTENER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/webhooks                 #12.0.1
                                  #Node
                                  #Deno, except createNodeMiddleware()
                                  #Browsers too, but WEBHOOK_SECRET should not be exposed to client code

new Webhooks(WOPTS)               #WHOOKS
createEventHandler([EOPTS])
 ->WHANDLER                       #

WHOOKS.verifyAndReceive(WEVENT)->>#Does verify() + receive()
                                  #WEVENT.payload must be JSON stringified

WOPTS|EOPTS|NOPTS.log             #OBJ with debug|info|warn|error(STR)
                                  #Def: console, but debug|info are noop
                                  #Used for:
                                  #  - error: error event
                                  #  - warn: unknown 'EVENT[.SUBEVENT]'
                                  #  - debug: new WEVENT (EVENT + EVENT_ID) with Node middleware
WOPTS|EOPTS.transform             #FUNC(WEVENT)->WEVENT mapping it for event listeners

WHOOKS|WHANDLER.on
 ('EVENT[.SUBEVENT]'[_ARR],
 FUNC(WEVENT)[->>])               #Add event listener
WHOOKS|WHANDLER
 .onAny(FUNC(WEVENT)[->>])        #
WHOOKS|WHANDLER.removeListener
 ('*|EVENT[.SUBEVENT]'[_ARR])     #Remove event listener
WHOOKS|WHANDLER                   #Trigger event listener
 .receive(WEVENT)->>              #Propagates errors

WHOOKS|WHANDLERa                  #When:
 .onError(FUNC(ERROR))            #  - an event handler throws
                                  #  - verifyAndReceive() has WEVENT with invalid signature
                                  #     - ERROR.status 400
ERROR.name                        #'AggregateError'
ERROR.errors                      #ERROR2_ARR
ERROR2.event                      #'EVENT' of FUNC that threw
ERROR.event                       #'EVENT' of WHANDLER.receive(WEVENT)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      WEBHOOKS MIDDLEWARE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/webhooks                 #
createNodeMiddleware              #Express-style middleware
 (WHOOKS[, NOPTS])                #Calls WHOOKS.verifyAndReceive(WEVENT)
 ->FUNC(REQ, RES, FUNC2)          #Then calls RES.end('ok\n')
 ->>BOOL                          #Uses REQ.url:
                                  #  - to check if NOPTS.path matches
                                  #  - skipped, and return false if not
                                  #Uses REQ.headers
                                  #  - to set WEVENT.id|name|signature
                                  #  - Using X-GitHub-Event [C], X-Hub-Signature-256 [C], X-GitHub-Delivery [C]
                                  #Uses request body:
                                  #  - either REQ.body STR, or REQ ISTREAM
                                  #  - to set WEVENT.payload
                                  #Errors:
                                  #  - JSON, as OBJ: error 'ERROR'
                                  #  - 400: no X-GitHub-Event [C], X-Hub-Signature-256 [C], X-GitHub-Delivery [C]
                                  #  - 400: request payload invalid JSON
                                  #  - 404: not POST
                                  #  - 415: not Content-Type: application/json [C]
                                  #  - 422: invalid REQ.url
                                  #  - 500: event listener error
                                  #Sends 202 every 9s to prevent GitHub from closing request
NOPTS.path                        #'/PATH' (def: '/api/github/webhooks')
