
              
   GITHUB_API  
              



GITHUB API ==>                    #Version 2022-11-28

X-GitHub-Api-Version:
 YYYY-MM-DD [C]                   #

GET /versions                     #Returns 'YYYY-MM-DD'_ARR

GITHUB MAIN|WEBHOOKS|APPS
 |ACTIONS ==>                     #See other GitHub docs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


https://api.github.com            #API root
https://github.com                #API root for /login, /settings

RREPO                             #/repos/USER/REPO
OORG                              #/orgs/ORG
UUSER                             #/users/USER

GET /                             #Return all API endpoints
GET /meta                         #Return information about: server IPs, domain names, SSH keys

User-Agent: STR [C]               #Must be specified
KOPTS.userAgent
User-Agent:
 octokit-CALLER.js/X.Y.Z
 BROWSER_USER_AGENT [C]           #CALLER depends on library used: nothing, core, action, request, graphql, auth-app, auth-oauth-app, auth-oath-device


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OPENAPI            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPENAPI ==>                       #3.0

@octokit/openapi                  #Version 12.0.0
                                  #Updated very often, so not latest version documented here
schemas['api.github.com']         #OpenAPI OBJ
schemas['api.github.com.deref']   #Same but inlines all $ref


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ID               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


X-Github-Request-Id: STR [S]      #

RESOURCE.id                       #NUM. TYPE-specific resource ID
RESOURCE.node_id                  #'NODE_ID', i.e. 'API_VERSION:TypeID' base64'd. TYPE-agnostic resource ID

GRAPHQL_RESOURCE.id               #'NODE_ID'
query.node(id: 'NODE_ID')         #RESOURCE_OBJ
query.nodes(id: 'NODE_ID'_ARR)    #RESOURCE_OBJ_ARR
query.resource(url: 'URL')        #RESOURCE_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MIME              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Accept:
 application/vnd.github[+json] [C]#
Accept: application/json [C]      #

Accept: application/              #When returning comments with Markdown, FORMAT can be:
 vnd.github.FORMAT+json [C]       #  - 'raw': as is, under `body`
                                  #  - 'text': as text, under `body_text`
                                  #  - 'html', under `body_html`
                                  #  - 'full', all

POST /markdown                    #Render Markdown as HTML
REQ.text                          #'MARKDOWN'
REQ.mode                          #'markdown' (def) or 'gfm'
REQ.context                       #'USER/REPO' to render #NUM, only with REQ.mode 'gfm'

POST /markdown/raw                #Same but whole REQ is 'MARKDOWN'

Accept:
 application/vnd.github.raw [C]   #When returning Git blob, return as is, instead of as { content: 'BASE64' }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Authorization: Bearer TOKEN [C]   #Can be: PAT or (see GitHub apps) APP_JWT, IAT, UAT

PAT                               #"Personal Access Token". Generated from the UI for a given user
                                  #Can restrict PERMISSIONS

GITHUB ACTIONS ==>                #Should use ENVVAR GITHUB_TOKEN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


API_PERMISSION                    #Scopes a PAT's privileges

PERMISSION_LEVEL                  #'read', 'write' or 'admin'

ORG PERMISSIONS ==>               #
administration                    #
blocking_users                    #
events                            #
members                           #
organization_codespaces_secrets   #
organization_codespaces_settings  #
organization_codespaces           #
organization_dependabot_secrets   #
personal_access_token_requests    #
personal_access_tokens            #
projects                          #
secrets                           #
self_hosted_runners               #
team_discussions                  #
variables                         #
webhooks                          #

REPO PERMISSIONS ==>              #
actions                           #
administration                    #
checks                            #
code_scanning_alerts              #
codespaces_lifecycle_admin        #
codespaces_metadata               #
codespaces_secrets                #
codespaces                        #
commit_statuses                   #
contents                          #
dependabot_alerts                 #
dependabot_secrets                #
deployments                       #
environments                      #
issues                            #
metadata                          #
pages                             #
projects                          #
pull_requests                     #
repository_security_advisories    #
secret_scanning_alerts            #
secrets                           #
variables                         #
webhooks                          #
workflows                         #

USER PERMISSIONS ==>              #
block_another_user                #
codespaces_user_secrets           #
email_addresses                   #
followers                         #
gpg_keys                          #
gists                             #
git_ssh_keys                      #
interaction_limits                #
notifications                     #
plan                              #
profile                           #
ssh_signing_keys                  #
starring                          #
watching                          #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RATE LIMITING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /rate_limit                   #
XRATE_LIMIT.rate
XRATE_LIMIT.resources.core        #XLIMITS. Default rate limits
XRATE_LIMIT.resources.search      #XLIMITS. Rate limits for non-code searches
XRATE_LIMIT.resources.code_search #XLIMITS. Rate limits for code searches
XRATE_LIMIT.resources.graphql     #XLIMITS. Rate limits for GraphQL
XRATE_LIMIT.resources
 .integration_manifest            #XLIMITS. Rate limits for creating apps (POST /app-manifests/CODE/conversions)
XRATE_LIMIT.resources
 .dependency_snapshots            #XLIMITS. Rate limits for creating dependency graph snapshots
XRATE_LIMIT.resources
 .code_scanning_upload            #XLIMITS. Rate limits for uploading SARIF results for code scanning
XRATE_LIMIT.resources.
 .actions_runner_registration     #XLIMITS. Rate limits for registering self-hosted GitHub actions runners

XLIMITS.limit
X-RateLimit-Limit: NUM [S]        #Total
XLIMITS.used
X-RateLimit-Used: NUM [S]         #Used
XLIMITS.remaining
X-RateLimit-Remaining: NUM [S]    #Left
XLIMITS.reset
X-RateLimit-Reset: DATE_NUM [S]   #When `used` becomes 0

GRAPHQL ==>                       #Based on the number of individual RESOURCEs returned, including nested ones
query.rateLimit
 .limit|used|remaning|resetAt     #Like X-RateLimit-* [S]
query.rateLimit.cost              #Cost of current query
query.rateLimit.nodeCount         #Max amount of RESOURCEs in current query


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PAGINATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Link: <URL?PARAM=NUM>;
 rel="first|prev|next|last"
 ,... [S]                         #Always defined on collections
?page=NUM [C]
?since=DATE [C]
?before|after=CURSOR [C]          #Which request parameter to use depends on endpoint
?per_page=NUM [C]                 #
RES.total_count                   #NUM
RES.RESOURCEs                     #OBJ_ARR

OCTOKIT.paginate
 ('METHOD /URL'[, REQ_OPTS])->>RES#Repeats calls using Link [S]

query.RESOURCEs(first|last: INT)  #
query.RESOURCEs.totalCount        #INT
query.RESOURCEs.pageInfo
 .hasPreviousPage|hasNextPage     #BOOL

query.RESOURCEs
 (before|after: 'CURSOR')         #
query.RESOURCEs.edges[*].cursor   #'CURSOR'
query.RESOURCEs.pageInfo
 .startCursor|endCursor           #'CURSOR'

query.RESOURCEs
 (clientMutationId: STR)
query.RESOURCEs.clientMutationId  #STR used internally by Relay


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SORTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


?sort=PROP                        #
?direction=asc|desc               #

query.RESOURCE(orderBy: OBJ)      #
OBJ.field                         #PROP (uppercase)
OBJ.direction                     #ASC|DESC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


E-Tag: STR [S]
Last-Modified: STR [S]
If-None-Match: STR [C]
If-Modified-Since: STR [C]        #Available on some endpoints


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST ==>                          #RESTful API
                                  #CRUD with POST|PATCH|GET|DELETE
                                  #All return a RES except DELETE

/RESOURCE[/ID]                    #Top-level
/RESOURCE/ID/SUBRESOURCE[/ID2]    #Nested

X*                                #API request|response body
X*_U                              #For fields that can be specified on create|update
X*_C                              #For fields that can be specified on create but not update
X*_F                              #For fields that are only returned when a single resource is retrieved, not a list

UARR                              #ARR which can be updated with fields:
                                  #  - PROP: replace whole ARR
                                  #  - add|remove_PROP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GRAPHQL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /graphql                     #GraphQL endpoint
                                  #Using REQ: query 'OBJ_JSON', variables 'OBJ_JSON'
                                  #Unlike REST:
                                  #  - can select and populate fields
                                  #  - lacks some endpoints

GRAPHIQL ==>                      #Available online

query.RESOURCEs                   #OBJ_ARR
                                  #Similar to REST /RESOURCE
query.RESOURCEs.nodes[*]
query.RESOURCEs.edges[*].node     #RESOURCE_OBJ

query.RESOURCE                    #OBJ
                                  #Similar to REST /RESOURCE/ID

query.RESOURCE.SUBRESOURCE[s]     #Populates
                                  #Similar to REST /RESOURCE/ID/SUBRESOURCE[/ID2]
                                  #Can use pagination, filtering, sorting
query.RESOURCE { ... on OBJ_TYPE }#Alternative, where RESOURCE is an UNION of all SUBRESOURCEs instead

query.viewer                      #Like GET /user (current USER)
query.user(login: 'USER')         #Like GET /user/USER
query.organization(login: 'ORG')  #Like GET /orgs/ORG
query.repository
 (owner: 'USER', name: 'REPO')    #Like GET /repos/USER/REPO

query.RESOURCE(ARG: VAL,...)      #Like REST query variables
mutation.RESOURCE(input:INPUT_OBJ)#Like REST request body
mutation.RESOURCE { ... }         #Like REST response body

CUSTOM SCALAR TYPES ==>           #
BigInt                            #BIGINT
Base64String                      #BASE64
URI                               #URI
Date                              #YYYYMMDD
DateTime                          #YYYYMMDDTHH:MM:SSZ
PreciseDateTime                   #YYYYMMDDTHH:MM:SS.SSSZ
GitTimestamp                      #Like DateTime but not UTC
GitRefname                        #refs/...
GitObjectId                       #Git OBJECT_ID
GitSSHRemote                      #SSH connection string
HTML                              #HTML
X509Certificate                   #PEM

OCORE.graphql                     #OGRAPHQL

@octokit/graphql                  #Version 6.0.1
                                  #Node/Deno/browsers
graphql                           #OGRAPHQL
OGRAPHQL(REQ_OPTS|'QUERY')->>GRES #POST /graphql using OREQUEST(REQ_OPTS)
REQ_OPTS.query                    #'QUERY', passed as REQ.query
REQ_OPTS.VAR                      #GraphQL variables, passed as REQ.variables
RAWRES                            #GraphQL raw response
GRES.*                            #RAWRES.data.*

OGRAPHQL.defaults(REQ_OPTS)
 ->OGRAPHQL                       #
OGRAPHQL.endpoint                 #ENDPOINT
withCustomRequest(OREQUEST)
 ->OGRAPHQL                       #

@octokit/graphql-schema           #Version 14.17.0
                                  #Updated very often, so not latest version documented here
validate('QUERY')                 #Forwards to graphql.js validate(...)
 ->GRAPHQLERROR_ARR|null          #Builds SCHEMA using schema.json + graphql.js buildClientSchema()
                                  #Builds DOCUMENT_NODE using graphql-tag (see its doc)
schema.idl                        #'GRAPHQL' of all TYPE definitions
schema.json.__schema              #GraphQL SCHEMA


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ERROR_RES.message                 #'MESSAGE'

ERROR_RES.errors                  #RESERR_ARR|undefined
RESERR.code                       #'ERROR_CODE'
RESERR.documentation_url          #'URL'
RESERR.resource                   #'RESOURCE' (e.g. 'Issue')
RESERR.field                      #'PROP'
RESERR.missing                    #'RESOURCE', when missing
RESERR.missing_field              #'PROP', when missing
RESERR.already_exists             #'RESOURCE', when already exists
RESERR.invalid                    #'PROP', when invalid format
RESERR.unprocessable              #'PROP', when invalid format

@octokit/octokit
RequestError                      #Forward to @octokit/request-error

@octokit/request-error            #4.0.2
                                  #Node/browser/Deno
ERROR.name                        #'HttpError'
ERROR.status                      #NUM
ERROR.request                     #NREQ_OPTS
ERROR.headers                     #OBJ
ERROR.response                    #RES

GraphqlResponseError              #Thrown if RAWRES.errors
GERROR.name                       #'GraphqlResponseError'
GERROR.message                    #'Request failed due to following response errors:'
                                  #followed by bullet point list of RAWRES.errors[*].message
GERROR.errors                     #RAWRES.errors
GERROR.data                       #RAWRES.data



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLIENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/octokit                  #Version 3.0.0-beta.4
                                  #Node
                                  #Deno, except Node middleware
                                  #Browsers too, but secrets should not be exposed to client code
Octokit                           #Forward to @octokit/core

@octokit/core                     #Version 5.0.0-beta.4
                                  #Node
                                  #Deno, except Node middleware
                                  #Browsers too, but secrets should not be exposed to client code
new Octokit([KOPTS])              #OCORE
Octokit.defaults(KOPTS[(KOPTS2)])
 ->Octokit                        #

OCORE|KOPTS.log                   #LOGS_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           HTTP MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OCORE.request                     #OREQUEST
KOPTS.baseUrl                     #REQ_OPTS.baseUrl
KOPTS.request                     #REQ_OPTS.request

@octokit/request                  #Version 7.0.1
                                  #Node/Deno/browsers

OREQUEST                          #Make an HTTP request to GitHub API
 ('METHOD /PATH'[, REQ_OPTS])     #Uses @octokit/endpoint, with same OPTS, plus some additional OPTS.request.*
 ->>RES                           #Automatically parses|serializes request|response body
                                  #Throws either AbortError or RequestError

REQ_OPTS.request.*                #fetch() REQQ, e.g. signal ABORT_SIGNAL or (Node only) agent AGENT
REQ_OPTS.request.fetch            #FUNC (def: globalThis.fetch)
REQ_OPTS.request.log              #LOGS_OBJ
                                  #Def: console, but debug|info is noop
                                  #Only used to log deprecated endpoints

RES.status                        #NUM
RES.url                           #'URL'
RES.headers                       #OBJ
RES.data                          #VAL

OREQUEST.defaults(REQ_OPTS)
 ->REQUEST                        #Merge to default REQ_OPTS
OREQUEST.endpoint                 #ENDPOINT (from @octokit/endpoint)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         HTTP OPTIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@octokit/endpoint                 #Version 8.0.1
                                  #Node/Deno/browsers
ENDPOINT
 (['METHOD /PATH'][, REQ_OPTS])
 ->NREQ_OPTS                      #Normalize REQ_OPTS into NREQ_OPTS
defaults(OBJ)->ENDPOINT           #Merge to defaults values

REQ_OPTS.route                    #'METHOD /PATH'
REQ_OPTS.method                   #'METHOD' (def: 'GET')
REQ_OPTS.url                      #'/PATH' or absolute 'URL'. Can include :VAR
REQ_OPTS.baseUrl                  #Base 'URL' of REQ_OPTS.url, if absolute
                                  #Def: 'https://api.github.com'
REQ_OPTS.headers                  #OBJ. Def:
                                  #  Content-Type: application/json; charset=utf-8 [C]
                                  #  Accept: application/vnd.github.v3+json [C]
REQ_OPTS.mediaType.format         #'MIME' (def: '') like 'raw', 'diff' or 'text+json'
REQ_OPTS.data                     #VAL. Request body
REQ_OPTS.VAR                      #Either:
                                  #  - URL parameter
                                  #  - query variables (if GET|HEAD)
                                  #  - request body
REQ_OPTS.request                  #OBJ kept as is

NREQ_OPTS.method                  #'METHOD'
NREQ_OPTS.url                     #REQ_OPTS.url, after REQ_OPTS.baseUrl resolution, and templating with REQ_OPTS.VAR
NREQ_OPTS.headers                 #OBJ
NREQ_OPTS.body                    #VAL
NREQ_OPTS.request                 #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTHENTICATION ==>                #See GitHub apps docs for more info
                                  #Steps:
                                  #  - new Octokit() calls FUNC(**OPTS)->*APP once: to initialize auth
                                  #  - any request calls FUNC(*OPTS)->>*_INFO: use it in auth
                                  #  - later requests used value cached by *APP

KCORE.auth                        #AAPP|PAPP|DAPP|UAPP|TAPP|ZAPP|IAPP
                                  #I.e. FUNC(*OPTS)->>*_INFO

KOPTS.authStrategy                #createAppAuth|createOAuthAppAuth|createOAuthDeviceAuth|createOAuthUserAuth|authToken|authUnauthenticated|createActionAuth
                                  #I.e. FUNC(**OPTS)->*APP
                                  #Def:
                                  #  - if KOPTS.auth 'TOKEN': authToken()
                                  #  - otherwise: authUauthenticated()

KOPTS.auth                        #AAOPTS|PPOPTS|DDOPTS|UUOPTS|'TOKEN'|ZZOPTS
                                  #I.e. OPTS passed to KOPTS.authStrategy
                                  #Can only be 'TOKEN' if KOPTS.authStrategy undefined

REQ_OPTS.request.hook             #Middleware FUNC(OREQUEST, NREQ_OPTS)->OREQUEST
                                  #Meant to be used with AAPP|PAPP|DAPP|UAPP|TAPP|ZAPP|IAPP.hook
                                  #  - automatically set according to KOPTS.authStrategy


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OCORE.hook.before
 ('request', FUNC(KOPTS)[->>])    #Before HTTP request
OCORE.hook.after
 ('request',FUNC(RES, KOPTS)[->>])#After HTTP request success
OCORE.hook.error('request',
 FUNC(ERROR, KOPTS)[->>])         #After HTTP request failure
OCORE.hook.wrap('request',        #Before|after HTTP request
 FUNC(OREQUEST, KOPTS)->>RES)     #Should forward to OREQUEST(KOPTS)->>RES

Octokit.plugin(PLUGIN,...)        #Add a PLUGIN
 ->Octokit                        #PLUGIN is FUNC(OCORE, KOPTS)->OBJ, which merges OBJ.* to OCORE.*
KOPTS.*                           #Used to pass PLUGIN options
                                  #Should usually namespace with PLUGIN name

DEFAULT PLUGINS ==>               #  - paginate-rest, rest-endpoint-methods: @octokit/octokit (Octokit, App, OAuthApp), @octokit/action, @actions/github
                                  #  - retry, throttling: @octokit/octokit (Octokit, App, OAuthApp)
                                  #     - also passes options to rate limit plugin???

@octokit
 /plugin-rest-endpoint-methods    #PLUGIN. Version 8.0.0

TODO ???
  - plugins, including rest endpoint
     - see full doc in https://github.com/octokit/octokit.js#rest-api
     - and https://github.com/octokit/octokit.js#pagination
     - https://github.com/octokit/plugin-rest-endpoint-methods.js
     - https://github.com/octokit/plugin-paginate-rest.js
     - https://github.com/octokit/plugin-paginate-graphql.js
     - https://github.com/octokit/plugin-retry.js
     - https://github.com/octokit/plugin-throttling.js
     - https://github.com/octokit/plugin-request-log.js
     - https://github.com/octokit/plugin-create-or-update-text-file.js
     - https://github.com/octokit/plugin-enterprise-server.js
     - https://github.com/octokit/plugin-enterprise-compatibility.js
     - https://github.com/octokit/plugin-enterprise-cloud.js
  - https://github.com/octokit/rest.js
  - https://github.com/octokit/openapi-types.ts
  - https://github.com/octokit/fixtures
     - https://github.com/octokit/fixtures-server
  - ensure I am following every octokit repo
  - apps:
     - marketplace:
        - https://docs.github.com/en/rest/apps/marketplace?apiVersion=2022-11-28
        - https://docs.github.com/en/apps/publishing-apps-to-github-marketplace/github-marketplace-overview/about-github-marketplace-for-apps
        - allow users to install apps
        - logo
        - can set a price
  - probot
  - to_learn projects with GitHub
