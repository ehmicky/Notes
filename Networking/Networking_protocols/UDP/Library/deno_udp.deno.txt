
            
   DENO_UDP  
            



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OPEN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.listenDatagran(UDP_OPTS)
 ->>DCONN                        !#Open UDP socket

UDP_OPTS                          #Inherits STCP_OPTS except:
                                  #  - no reusePort
                                  #  - transport 'tcp|unix' -> 'udp|unixpacket'

UDP_OPTS.reuseAddress             #BOOL (def: false). If true and another process listens on same port, steals it.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DATA              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DCONN                             #ASYNC_ITERABLE of [UINT8ARR, ADDR] (data + sender)
                                  #Inherits CLOSER
DCONN.addr                        #ADDR of source

DCONN.send(UINT8ARR, ADDR)->>NUM  #Returns NUM bytes sent

DCONN.receive([UINT8ARR])
 ->>[UINT8ARR, ADDR]              #Can pass UINT8ARR to reuse the same one, to avoid re-allocating memory


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MULTICAST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DCONN.joinMulticastv4
 ('HOST', 'NETWORK_INTERFACE')
 ->>MEMBERSHIP
DCONN.joinMulticastv6
 ('HOST', NETWORK_INTERFACE_NUM)
 ->>MEMBERSHIP                    #Join multicast group
MEMBERSHIP.leave()->>             #Leave multicast group

UDP_OPTS.loopback
MEMBERSHIP.setLoopback(BOOL)->>   #BOOL (def: false). Send multicast packets to localhost

MEMBERSHIP.setTTL(NUM)->>         #Set multicast packets TTL. Only with IPv4
