
            
   DENO_TLS  
            



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OPEN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.connectTls(TLS_OPTS)
 ->>CONN                         !#Connect to TLS socket
Deno.listenTls(STLS_OPTS)
 ->>LISTENER                     !#Open TLS socket
Deno.startTls(CONN[, NTLS_OPTS])
 ->>CONN2                        !#Turn TCP socket into TLS

[S]TLS_OPTS                       #Inherits from [S]TCP_OPTS, except no Unix socket
NTLS_OPTS                         #Only inherits TCP_OPTS.hostname. No Unix socket


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CERTIFICATES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--unsafely-ignore-certificate
  -errors[=HOSTNAME,...]          #DANGER: Disables verification of TLS certificates

ENVVAR DENO_TLS_CA_STORE          #Comma-separated list of order dependent certificate stores. Possible values: "system", "mozilla". Defaults to "mozilla".
ENVVAR DENO_CERT
deno bench|cache|check|compile
 |eval|info|install|repl|run
 |test|upgrade|vendor
--cert                            #'PEM' to CA authority

[N]TLS_OPTS|HCOPTS.caCerts        #'PEM'_ARR of root certificates
TLS_OPTS|HCOPTS.certChain
STLS_OPTS.cert                    #'PEM' of certificate chain
TLS_OPTS|HCOPTS.privateKey        #'PEM' (RSA|PKCS8) of client certificate
STLS_OPTS.key                     #'PEM' of server certificate


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ALPN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[S|N]TLS_OPTS.alpnProtocols       #'PROTOCOL'_ARR (def: [])
CONN.handshake()->>OBJ            #OBJ: alpnProtocol 'PROTOCOL'|null
                                  #Only with TLS
