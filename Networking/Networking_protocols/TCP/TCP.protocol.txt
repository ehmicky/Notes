
       
   TCP  
       




FEATURES ==>                      #Transport layer, i.e. add features over IP
                                  #Re-order out-of-order IP requests
                                  #Reliability, data corruption: error correction
                                  #Session: arbitrary large TCP request, despite being broken in multiple fixed-size IP requests

PACKET STRUCTURE ==>              #In bytes
                                  #0-1: source port
                                  #2-3: destination port
                                  #4-7: sequence number
                                  #8-11: ACK number
                                  #12 (only 4 bits):
                                  #  - data offset
                                  #  - like for IP: header size to determine Options size
                                  #13: flags
                                  #14-15: window size
                                  #16-17: checksum
                                  #18-19: URG
                                  #20: Options (like for IP)

Sockets and ports:
  - Ports:
    - they identify the application layer.
    - There are standards (but OS can do what it wants):
      - 0 à 1023: standardisés, ne pas en créer dans cet espace:
        - 21 (FTP)
        - 22 (SSH)
        - 23 (Telnet)
        - 25 (SMTP)
        - 53 (DNS)
        - 80 (HTTP)
        - 110 (POP3)
        - 143 (IMAP2)
        - 194 (IRC)
        - 443 (HTTPS)
      - 1024 à 49151: registered ports, utilisé pour implémenter un protocole à soi.
      - 49152 à 65535: ports éphémères, ouverts souvent par les clients
    - techniques:
      - Port scanning: tester tous les ports d'un hôte pour savoir lesquels sont ouverts.
      - Port sweeping: tester un port donné sur plusieurs hôtes.
  - Sockets:
    - identify a whole IP + transport layer + application layer
    - can be written [PROTOCOLE://]IP|DOMAIN[:PORT]
      - IP, via DOMAIN DNS lookup
      - transport layer and application layer, via PROTOCOLE et PORT
    - servers listen to socket, and respond to requests

Based on connexion:
  - first three-time-handshake:
    - CLIENT -> SERVEUR: SYN flag + sequence number
    - CLIENT <- SERVEUR: ACK et SYN flags + ACK number (== sequence number reçu + 1) + autre sequence number
    - CLIENT -> SERVEUR: ACK flag + ACK number (== sequence number reçu + 1) + sequence number (== ACK number reçu)
  - then transmission of data:
    - CLIENT <- SERVEUR: no ACK nor SYN flags + sequence number (dernier ACK reçu) + ACK number (dernier sequence number + taille current packet) + data
    - Du coup ACK number == nombre d'octets réçus jusqu'ici, et sequence number nombre d'octets envoyés (et ce pour le client comme pour le serveur)
  - finally deconnexion
    - A -> B: FIN flag
    - A <- B: ACK + FIN flags
    - A -> B: ACK flag

Keepalive:
  - polling the other socket with empty packet. If no response, close connection
  - parameters:
     - time NUM: how often to poll (often 2 hours)
     - retry NUM: how many times to retry
     - interval NUM: between retrieves (e.g. 1 sec)
  - completely unrelated to HTTP keepalive

Nagle's algorithm:
  - inverse is called "no-delay"
  - buffer outgoing requests, i.e. send data in chunks
     - until receiver acknowledges previous requests
  - pro: less throughput and amount of requests, especially if requests are small
  - con: more latency
  - even without it, underlying IOSTREAM still use buffer to keep up with high demand

Techniques:
  - Spoofing: vol de session en devinant sequence numbers
  - DoS:
    - limit server availability by sending lot of requests:
      - SYN flood: lot of SYN requests with different sequence numbers but no following ACK request:
        - need to keep different connexions
        - waits a bit for each ACK request but never completes
    - DDoS is distributed among a botnet

Outils commandline:
  - telnet HOST NUM
    - établie connection TCP vers HOST (e.g. google.fr) pour port NUM

Browser debugging:
  - about:net-internals#sockets (Chrome), about:networking#sockets (Firefox)
