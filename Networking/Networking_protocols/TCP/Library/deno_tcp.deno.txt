
            
   DENO_TCP  
            



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OPEN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.connect(TCP_OPTS)
 ->>TCP_CONN                     !#Connect to TCP socket
Deno.listen(STCP_OPTS)
 ->>TCP_LISTENER                 !#Open TCP socket

[S]TCP_OPTS|ADDR.transport        #Either:
                                 N#  - 'tcp': normal TCP socket
                              [W]R#  - 'unix': Unix TCP socket
[S]TCP_OPTS|ADDR.hostname         #'HOSTNAME'. Not with Unix socket
                                  #Def: '127.0.0.1' (Deno.connect()) or '0.0.0.0' (Deno.listen())
[S]TCP_OPTS|ADDR.port             #NUM. Not with Unix socket
[S]TCP_OPTS|ADDR.path             #'PATH'. Only with Unix socket
STCP_OPTS.reusePort               #BOOL (def: false). If true, allows multiple processes to listen on same port,
                                  #distributing new connections among them.
                                  #Uses SO_REUSEPORT, Linux only.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LISTEN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TCP_LISTENER                      #TCP_CONN_ASYNC_ITERABLE
TCP_LISTENER.close()              #Inherited from CLOSER
TCP_LISTENER.rid                  #RID
TCP_LISTENER.[un]ref()            #Set whether ref'd by the current process
TCP_LISTENER.addr                 #ADDR of source
TCP_LISTENER.accept()->>TCP_CONN  #Like TCP_LISTENER.next()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SEND              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TCP_CONN                          #Inherits CLOSER|READER|WRITER
TCP_CONN.close()
TCP_CONN.rid                      #RID
TCP_CONN.[un]ref()                #Set whether ref'd by the current process
TCP_CONN.localAddr|remoteAddr     #ADDR of source|destination
TCP_CONN.readable                 #RSTREAM
TCP_CONN.writable                 #WSTREAM
Deno.shutdown(TCP_CONN.rid)
TCP_CONN.closeWrite()             #Stops sending, but not receiving.
TCP_CONN.setNoDelay([BOOL])       #BOOL. If true (def), disable Nagle's algorithm
                                  #Only with tranport 'tcp'
TCP_CONN.setKeepAlive([BOOL])     #BOOL. If true (def), enable TCP keepalive
                                  #Only with tranport 'tcp'
