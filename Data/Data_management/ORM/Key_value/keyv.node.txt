
        
   KEYV  
        



VERSION ==>                       #5.0.0-rc.1 (2024-05-04)

new Keyv(['URI'][, OPTS])         #Key-value database abstraction layer
                                  #OPTS:
                                  #  - store STORE
                                  #     - def: use either:
                                  #        - OPTS.adapter 'MODULE' -> new (require('MODULE'))(OPTS)
                                  #           - only for supported stores '@keyv/*'
                                  #        - same but using 'PROTO' from OPTS.uri 'PROTO:URI'
                                  #  - uri 'URI'
                                  #     - database URI
                                  #  - namespace 'NAMESPACE' (def: 'keyv')
                                  #     - prefixed to every 'KEY' as 'NAMESPACE:KEY'
                                  #  - serialize(VAL)->STR (def: JSON.stringify() which also handles BUFFER)
                                  #  - deserialize(STR)->VAL (def: JSON.parse() which also handles BUFFER)
                                  #  - compression COMPRESSION
                                  #     - [de]compress on [de]seriralize)()
                                  #     - available ones:
                                  #        - @keyv/compress-brotli
                                  #        - @keyv/compress-gzip
                                  #  - ttl NUM (in ms): default TTL for KEYV.set()
                                  #  - emitErrors BOOL (def: true): emit 'error' event
KEYV.get('KEY'[_ARR][, OPTS])     #OPTS:
 ->>VAL[_ARR]                     #  - raw BOOL: if true (def), get OBJ instead of OBJ.value
KEYV.set('KEY', VAL[, NUM])->>    #NUM is TTL
KEYV.has('KEY')->>BOOL            #
KEYV.delete('KEY'[_ARR])->>       #
KEYV.clear()->>                   #
KEYV.iterator(['NAMESPACE'])
 ->ASYNC_ITERATOR                 #
KEYV.disconnect()->>              #

STORE                             #MAP. Store adapter

STORE.namespace                   #Set to OPTS.namespace
KEYV|STORE.on('error',FUNC(ERROR))#ERROR on STORE are propagated to KEYV

KEYV|STORE.on
 ('clear|disconnect', FUNC())     #On KEYV.clear|disconnect()
KEYV.hooks.addListener            #HOOK_NAME is PRE|POST_GET|GET_MANY|SET|DELETE
 (KeyvHooks.HOOK_NAME, FUNC(OBJ)) #OBJ: key 'KEY', value VAL, ttl NUM
                                  #OBJ can be mutated

STORE.get('KEY')->[>]'OBJ'|OBJ    #OBJ:
                                  #  - expires TIMESTAMP_NUM (in ms): call STORE.delete('KEY') if past it
                                  #  - value VAL: value passed to user
                                  #  - anything else custom
STORE.getMany('KEY'_ARR)
 ->[>]'OBJ'|OBJ_ARR               #
STORE.set('KEY', 'OBJ',
 TIMESTAMP_NUM|null)[->>]         #OBJ has properties: expires, value
STORE.has('KEY')->[>]BOOL         #
STORE.delete('KEY')[->>]          #
STORE.deleteMany('KEY'_ARR)[->>]  #
STORE.clear()[->>]                #

OTHER AVAILABLE STORES ==>        #  - new Map(): in-memory, no limit
                                  #  - quick-lru (see its doc): in-memory, LRU limit
                                  #  - keyv-file: in filesystem
                                  #  - @keyv/redis
                                  #  - @keyv/mongo
                                  #  - @keyv/sqlite
                                  #  - @keyv/postgres
                                  #  - @keyv/mysql
                                  #  - @keyv/tiered
                                  #Not documented yet (do it when I use them)
