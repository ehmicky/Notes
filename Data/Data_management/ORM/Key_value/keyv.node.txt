
        
   KEYV  
        



VERSION ==>                       #4.0.4

new Keyv(['URI'][, OPTS])         #Key-value database abstraction layer
                                  #OPTS:
                                  #  - store STORE
                                  #     - def: use either:
                                  #        - OPTS.adapter 'MODULE' -> new (require('MODULE'))(OPTS)
                                  #           - only for supported stores '@keyv/*'
                                  #        - same but using 'PROTO' from OPTS.uri 'PROTO:URI'
                                  #  - uri 'URI'
                                  #     - database URI
                                  #  - namespace 'NAMESPACE' (def: 'keyv')
                                  #     - prefixed to every 'KEY' as 'NAMESPACE:KEY'
                                  #  - serialize(VAL)->STR (def: JSON.stringify() which also handles BUFFER)
                                  #  - deserialize(STR)->VAL (def: JSON.parse() which also handles BUFFER)
                                  #  - ttl NUM (in ms): default TTL for KEYV.set()
KEYV.get('KEY'[, OPTS])           #OPTS:
 ->PROMISE_VAL                    #  - raw BOOL: if true (def), get OBJ instead of OBJ.value
KEYV.set('KEY', VAL[, NUM])
 ->PROMISE                        #NUM is TTL
KEYV.delete('KEY')->PROMISE       #
KEYV.clear()->PROMISE             #

STORE                             #MAP. Store adapter

STORE.namespace                   #Set to OPTS.namespace
KEYV|STORE.on('error',FUNC(ERROR))#ERROR on STORE are propagated to KEYV

STORE.get('KEY')                  #OBJ:
 ->[PROMISE_]'OBJ'|OBJ            #  - expires TIMESTAMP_NUM (in ms): call STORE.delete('KEY') if past it
                                  #  - value VAL: value passed to user
                                  #  - anything else custom
STORE.set('KEY', 'OBJ',
 TIMESTAMP_NUM|null)[->PROMISE]   #OBJ has properties: expires, value
STORE.delete('KEY')[->PROMISE]    #
STORE.clear()[->PROMISE]          #

OTHER AVAILABLE STORES ==>        #  - new Map(): in-memory, no limit
                                  #  - quick-lru (see its doc): in-memory, LRU limit
                                  #  - keyv-file: in filesystem
                                  #  - @keyv/redis
                                  #  - @keyv/mongo
                                  #  - @keyv/sqlite
                                  #  - @keyv/postgres
                                  #  - @keyv/mysql
                                  #Not documented yet (do it when I use them)
