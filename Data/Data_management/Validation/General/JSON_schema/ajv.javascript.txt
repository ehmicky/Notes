
       
   AJV  
       



ALTERNATIVES ==>                  #See JSON schema

VERSION ==>                       #6.12.6
                                  #Browser, Node.js or CLI

SUMMARY ==>                       #Validates JSON schema
                                  #Features:
                                  #  - all JSON schema v4, some v5|v6
                                  #  - good JSON references support
                                  #  - meta-schema validation
                                  #  - can modify input: default values, transtyping, removing extra properties
                                  #  - flexible custom formats|rules, including async validation
                                  #  - detailed, human-friendly, i18n'd errors
                                  #  - great speed, caching

NOTATION ==>                      #The following notation takes as example:
                                  #  - schema: { properties: { world: { properties: { hello: { minimum: 1 } } } } }
                                  #  - data: { world: { hello: 2 } }
SCHEMA_ID                         #SCHEMA.$id
                                  #Only available if direct call to AJV.add[Meta]Schema()
                                  #Can use AOPTS.schemaId '$id' (def), 'id' or 'auto' for backward compatiblity with previous
                                  #versions of JSON schema
SCHEMA_VAL                        #1
PARENT_SCHEMA                     #{ minimum: 1 }
DATA_VAL                          #2
PARENT_DATA                       #{ hello: 2 }
ROOT_DATA                         #{ world: { hellow: 2 } }
DATA_PATH                         #'.world.hello'
DATA_VAR                          #'hello'
SCHEMA_PATH                       #'#/properties/world/properties/hello/minimum'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BASIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PHASES ==>                        #Schema validation: SCHEMA validated against its meta-schema
                                  #Compilation: SCHEMA transformed in a fast function (VALIDATE)
                                  #Data validation: data validated against VALIDATE

new Ajv([AOPTS])                  #

AJV.add[Meta]Schema               #Validate a schema, but does not compile it
(SCHEMA[_ARR][,'SCHEMA_ID'])->AJV #Can overwrite SCHEMA.$id with SCHEMA_ID
AOPTS.schemas|meta SCHEMA[_ARR]   #Difference with "Meta":
                                  #  - mostly semantics, but there are few differences of behavior
                                  #  - metaschemas are global, so should do AJV.validateSchema(OBJ) instead of
                                  #    AJV.validate(SCHEMA, OBJ)
AJV.validateSchema(OBJ)->BOOL     #
AOPTS.validateSchema              #Validate schema against its meta-schema
                                  #Throws exception if invalid if true (def), logs only if "log", do nothing if false.
                                  #Meta-schema is defined by either:
                                  #  - SCHEMA.schema
                                  #  - KOPTS.metaSchema SCHEMA (not for validate())
AJV.getSchema('SCHEMA_ID')
 ->VALIDATE                       #
AJV.removeSchema
 (SCHEMA|'SCHEMA_ID'|REGEXP)->AJV #REGEXP matches schema.$id or SCHEMA_ID

AJV.compile(SCHEMA)->VALIDATE     #Validate a schema + compile
VALIDATE.schema                   #SCHEMA

VALIDATE(OBJ)->BOOL               #
AJV.validate                      #Same as AJV.compile(SCHEMA)(OBJ)->BOOL
 (SCHEMA|'SCHEMA_ID', OBJ)->BOOL  #Will use AJV.errors instead of VALIDATE.errors


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STANDALONE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import 'ajv/dist/standalone'      #STANDALONE
STANDALONE(AJV[, VALIDATE])       #Returns module CODE that exports VALIDATE, but can be used without AJV library
 ->'CODE'                         #Def VALIDATE: all schemas added to AJV
                                  #Has less features that full-blown library:
                                  #  - no validate|compile custom keyword (only macro|inline), no custom formats
                                  #  - no recursive JSON reference
                                  #  - AOPTS.allErrors always true
                                  #  - no AOPTS.verbose
                                  #  - lots of others

AOPTS.code.source                 #BOOL (def: false). Must be true
AOPTS.code.es5                    #BOOL (def: false). Output ES5 code
AOPTS.code.esm                    #BOOL (def: false). Output ESM vs CommonJS code
AOPTS.code.lines                  #BOOL (def: false). Output includes line breaks, for prettification
AOPTS.code.process
 ('CODE'[, SCHEMA])->'CODDE'      #Maps code to output
AOPTS.code.optimize
AOPTS.code.formats
AOPTS.code.regexp


type CodeOptions = {
  optimize?: boolean | number // code optimization flag or number of passes, 1 pass by default,
  // code optimizations reduce the size of the generated code (bytes, based on the tests) by over 10%,
  // the number of code tree nodes by nearly 17%.
  // You would almost never need more than one optimization pass, unless you have some really complex schemas -
  // the second pass in the tests (it has quite complex schemas) only improves optimization by less than 0.1%.
  // See [Code optimization](./codegen.md#code-optimization) for details.
  formats?: Code
  // Code snippet created with `_` tagged template literal that contains all format definitions,
  // it can be the code of actual definitions or `require` call:
  // _`require("./my-formats")`
  regExp: RegExpEngine
  // Pass non-standard RegExp engine to mitigate ReDoS, e.g. node-re2.
  // During validation of a schema, code.regExp will be
  // used to match strings against regular expressions.
  // The supplied function must support the interface:
  // regExp(regex, unicodeFlag).test(string) => boolean
}



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ajv ...                          ##Module "ajv-cli" (2.1.0)
--all-errors
--json-pointers
--format=STR
--missing-refs=STR
--inline-refs=STR
--remove-additional=STR
--use-defaults
--coerce-types
--multiple-of-precision=NUM
--error-data-path=STR
--messages=BOOL                  ##See AOPTS
-s SCHEMA
-m SCHEMA                        ##Like AOPTS.schema|meta. SCHEMA can contain globbing (escaped)
-c MODULE|'MODULE_PATH'          ##Is FUNC(AJV)->AJV, which can e.g. call AJV.addKeyword|addFormat()
                                 ##MODULE_PATH must be relative
-r SCHEMA                        ##Files that can be used for JSON reference resolving

ajv compile                      ##Does meta-schema validation, using exit code
-o FILE                          ##Creates file using AJV-PACK

ajv [validate]                   ##Does data validation, using exit code and output
-d FILE                          ##Data file
--errors=FORMAT                  ##How to report errors, among:
                                 ##  - js (def): JavaScript
                                 ##  - json: beautified JSON
                                 ##  - line: non-beaufied JSON
                                 ##  - text: using AJV.errorText()
                                 ##  - no
--changes=FORMAT                 ##Same FORMAT as --errors
                                 ##Logs modifications (e.g. from AOPTS.useDefaults)

ajv test                         ##Same as ajv validate, but must specify is output is supposed to be --[in]valid
-d FILE                          ##
--[in]valid                      ##
--errors=FORMAT                  ##Like ajv validate


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VALIDATE.errors                   #Of the last VALIDATE()
                                  #ERROR_OBJ_ARR:
                                  #  - null if no errors
                                  #  - only the first error, unless AOPTS.allErrors true
                                  #Validation functions (in AJV.addKeyword()):
                                  #  - can assign FUNC.errors ERROR_OBJ_ARR, where FUNC is the function itself (not "this")
                                  #     - otherwise, will use default:
                                  #        - keyword 'RULE'
                                  #        - message 'should pass "RULE" keyword validation'
                                  #        - params: keyword 'RULE'
                                  #     - if no custom errors, should use KOPTS.errors false for better efficiency
                                  #  - must define ERROR_OBJ.message|keyword|params
                                  #     - other ERROR_OBJ.* are filled in by AJV
                                  #Async rules work differently, see below
AJV.errorsText(ERR_OBJ_ARR[,OPTS])#Returns "data.DATA_PATH MESSAGE,...", e.g. "data.examplevar should be >= 10"
 ->STR                            #OPTS: separator (def: ","), dataVar (def: "data")
                                  #Can be used as human-friendly error message
ERROR_OBJ.message                 #'ERROR': if AOPTS.messages true (def)
                                  #Does not include paths, e.g. 'should be >= 10'
                                 ##Can be translated into LANG by AJV-I18N.LANG(ERROR_OBJ_ARR)->ERROR_OBJ_ARR
                                 ##(version 2.2.0)
                                 ##Supports around 11 languages, plural messages
ERROR_OBJ.keyword                 #'RULE'
ERROR_OBJ.dataPath                #DATA_PATH, as 'VARR' or (if AOPTS.jsonPointers true) JSON_POINTER (e.g. '/VAR/...')
                                  #For rules that are one level upper than the object validated
                                  #(e.g. required, additionalProperties, dependencies), is the object validated.
ERROR_OBJ.schemaPath              #SCHEMA_PATH, as JSON_POINTER (e.g. '#/VAR/...')
ERROR_OBJ.params                  #Schema information. OBJ:
                                  #  (type)
                                  #  - type 'TYPE[,...]'
                                  #  (format)
                                  #  - format 'FORMAT'
                                  #  (enum)
                                  #  - allowedValues VAL_ARR
                                  #  (const)
                                  #  - allowedValue VAL
                                  #  (multipleOf)
                                  #  - multipleOf
                                  #  ([format][exclusive]maximum|minimum)
                                  #  - limit NUM, exclusive BOOL, comparison '<|<=|>|>='
                                  #  (max|minLength)
                                  #  - limit NUM
                                  #  (pattern)
                                  #  - pattern
                                  #  (items|additionalItems|contains)
                                  #  nothing
                                  #  (maxItems|minItems)
                                  #  - limit NUM
                                  #  (uniqueItems)
                                  #  - i|j NUM
                                  #  (max|minProperties)
                                  #  - limit NUM
                                  #  (required)
                                  #  - missingProperty '.VAR'
                                  #  (additionalProperties)
                                  #  - additionalProperty 'VAR'
                                  #  (patternProperties)
                                  #  nothing
                                  #  (patternRequired)
                                  #  - missingPattern STR
                                  #  (propertyNames)
                                  #  - propertyName 'VAR'
                                  #  (dependencies)
                                  #  - property 'VAR', missingProperty 'VAR', deps 'STR,...', depsCount NUM
                                  #  ($ref)
                                  #  - ref STR
                                  #  (not|allOf|anyOf|if|then|else)
                                  #  nothing
                                  #  (oneOf)
                                  #  - passingSchemas null|NUM_ARR (index of schemas that succeeds if any does)
                                  #  (switch)
                                  #  - caseIndex NUM
                                  #  (custom keyword with no custom error, all ajv-keywords except format*, patternRequired and
                                  #  switch)
                                  #  - keyword 'RULE'
(if AOPTS.verbose true)
ERROR_OBJ.schema                  #SCHEMA_VAL
ERROR_OBJ.parentSchema            #PARENT_SCHEMA
ERROR_OBJ.data                    #DATA_VAL


AJV-ERRORS(AJV[, OPTS])          ##Version 1.0.0
                                 ##Requires AOPTS.allErrors true and AOPTS.jsonPointers true
SCHEMA.errorMessage STR          ##If SCHEMA fails, change ERROR_OBJ to:
SCHEMA.errorMessage.KEYWORD      ##  - message STR
                                 ##  - keyword 'errorMessage'
                                 ##  - schema*: targets SCHEMA.errorMessage
                                 ##  - dataPath: same
                                 ##  - params.errors: original ERROR_OBJ_ARR
                                 ##If KEYWORD, only matches if SCHEMA.KEYWORD fails
                                 ##  - KEYWORD can be KEYWORD.VARR for required|dependencies|properties|items|etc.
                                 ##  - KEYWORD can be _ for default match
                                 ##STR can contain "${[RELATIVE_]JSON_POINTER}" which will take DATA_VAL as input and will be
                                 ##JSON.stringified.
                                 ##OPTS:
                                 ##  - keepErrors BOOL (def: false): keep original errors in ERROR_OBJ_ARR
                                 ##    ERROR_OBJ.emUsed will be set to true
                                 ##  - singleError BOOL (def: false): concatenate errors for each KEYWORD


AOPTS.logger OBJ|false            #How console warn|error messages are printed when compilation fails.
                                  #By default, uses global.console
                                  #OBJ: log|warn|error(STR,...)
AOPTS.$comment BOOL|FUNC          #Logs $comment JSON schema keywords
                                  #Def: false
                                  #FUNC is FUNC(DATA_VAL, DATA_PATH, SCHEMA)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      VALIDATION OPTIONS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AOPTS.format                      #Can be :
                                  #  - 'full': make format validation slower, but more correct:
                                  #     - date|time|date-time: check that date is correct, not just matching regexp pattern
                                  #     - uri[-reference]|email: more throughout regexp
                                  #  - 'fast' (def)
                                  #  - false: no format validation

AOPTS.strict                      #False (def), 'log' (warnings) or true (errors). Validates against common mistakes
AOPTS.strictSchema                #BOOL|'log' (def: true). Validates against schema mistakes
AOPTS.allowMatchingProperties     #BOOL|'log' (def: true). With AOPTS.strictSchema true, allow SCHEMA.patternProperties.PROP
                                  #even if SCHEMA.properties.PROP exists
AOPTS.strictTypes                 #BOOL|'log' (def: true). Validates against multiple types (prefer anyOf)
AOPTS.allowUnionTypes             #BOOL|'log' (def: true). With AOPTS.strictTypes true, allow SCHEMA.type to be an ARR
AOPTS.strictTuples                #BOOL|'log' (def: true). Validates against SCHEMA.items ARR without SCHEMA.min|max|additionalItems
AOPTS.strictRequired              #BOOL|'log' (def: true). Validates against improper usage of SCHEMA.required
AOPTS.strictNumbers               #BOOL (def: false): does not allow NaN|Infinity as number
AOPTS.validateFormats             #If unknown format, throws exception: true (def) or "ignore" (as per spec) (still logs)
                                  #Requires AOPTS.strict true
AOPTS.multipleOfPrecision         #Max number of decimals for multipleOf RULE argument
AOPTS.unicodeRegExp               #BOOL (def: true): use "u" flag with SCHEMA.pattern[Properties]

AOPTS.cache                       #Object used for caching. By def, done in memory
                                  #Is done as memoization, performed by add[Meta]Schema() and compile(),
                                  #i.e. caches any [meta-]SCHEMA (not validation itself)
                                  #Should have methods: put('KEY', 'VAL'), get('KEY')->'VAL', del('KEY'), clear()
AOPTS.serialize(SCHEMA)->VAL      #Used to calculate cache keys
                                  #Def: FAST-JSON-STABLE-STRINGIFY (see its doc)
                                  #If false, is identity function


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        JSON REFERENCES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WHERE ==>                         #All this is for JSON references in schemas, not in data.

JSON POINTERS ==>                 #Against the spec: trailing slash is ignored
                                  #Relative JSON pointers are only possible when using { $data }

AJV.compileAsync                  #Same as AJV.compile() but async, waiting for remote JSON references to be resolved.
 (SCHEMA[, FUNC(ERROR, VALIDATE)])#Is required when using remote JSON references (i.e. with URI, not just #HASH)
 ->PROMISE(VALIDATE)              #AOPTS.missingRefs must be true
                                  #Possible ERRORs: loadSchema() ERROR, AOPTS.missingRefs true, invalid schema
AOPTS.loadSchema
 ('URI'[, FUNC(ERROR, SCHEMA)])   #Function to fetch remote JSON references
 ->PROMISE(SCHEMA)                #Required when using compileAsync()

AOPTS.missingRefs VAL             #What to do with JSON references (local or remote) that are not resolved or cannot be:
                                  #  - true (def): throw exception with ERROR: missingRef 'URI#HASH', missingSchema 'URI'
                                  #  - 'ignore|fail': log error, then create rule that always succeeds|fails
AOPTS.extendRefs                  #What to do when JSON references (local or remote) has other members than just "$ref":
                                  #  - "fail": throw exception
                                  #  - true: merge those members as additional rules, with log message
                                  #  - "ignore" (def): ignore members (as per JSON reference standard), with log message


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         MODIFICATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODIFICATION ==>                  #The following directly modify data OBJ

AOPTS.removeAdditional            #Remove extra properties (e.g. the ones specified by SCHEMA.additionalProperties)
                                  #Can be:
                                  #  - false (def)
                                  #  - "all": whatever SCHEMA.additionalProperties is
                                  #  - true: only if SCHEMA.additionalProperties false
                                  #  - "failing": only if SCHEMA.additionalProperties false,
                                  #     or if SCHEMA.additionalProperties and properties do not validate to it
AOPTS.useDefaults                 #Apply SCHEMA.default. Can be:
                                  #  - false (def)
                                  #  - true: by deep copy, for undefined
                                  #  - "empty": by deep copy, for undefined|null|""
                                  #Cannot be used inside switch|anyOf|oneOf|not
AOPTS.strictDefaults              #Report when SCHEMA.default was invalid:
                                  #  - false (def)
                                  #  - true: throw error
                                  #  - 'log': print error
AOPTS.strictKeywords              #Same as AOPTS.strictDefaults but for unknown keywords
AOPTS.coerceTypes                 #Try to transtype to SCHEMA.type. Can be:
                                  #  - false (def)
                                  #  - true: only for scalar types
                                  #  - "array": for array type too, i.e. VAL <-> [VAL]
                                  #Some difference from JavaScript:
                                  #  - String(null) -> ""
                                  #  - Boolean("true|false")->true|false, others errors
                                  #  - Boolean(NUM): if NUM not 1|0, errors
                                  #  - null(""|0|false), others errors


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AJV.addFormat('FORMAT', VVAL)->AJV#Add custom SCHEMA.format according to VVAL:
AOPTS.formats.FORMAT VVAL         #  - OBJ:
                                  #     - validate: like AJV.addKeyword() but can also be REGEXP (partial match)
                                  #     - async: like AJV.addKeyword()
                                  #     - compare(STR, STR2)->-1|0|1: to make SCHEMA.format[Exlusive]Maximum|Minimum work
                                  #  - VAL: shortcut for OBJ.validate VAL

AJV.addKeyword('RULE', KOPTS)->AJV#Add custom SCHEMA.RULE
AOPTS.keywords.RULE KOPTS         #'RULE' must be [:alnum:]-_$ and should be namespaced
                                  #Can be performed in four different ways according to KOPTS:
                                  #  - validate(SCHEMA_VAL, DATA_VAL, PARENT_SCHEMA, DATA_PATH, PARENT_DATA,DATA_VAR,ROOT_DATA)
                                  #    ->[VALIDATION_PROMISE_]BOOL
                                  #     - fired during VALIDATE()
                                  #     - is the most flexible, but slowest
                                  #  - compile(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->(DATA_VAL, DATA_PATH, PARENT_DATA,
                                  #    DATA_VAR, ROOT_DATA)->[VALIDATION_PROMISE_]BOOL
                                  #     - first function is fired during AJV.compile(), second during VALIDATE()
                                  #  - macro(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->EXTRA_SCHEMA
                                  #     - fired during AJV.compile()
                                  #     - can be the most efficient
                                  #  - inline(CONTEXT, 'RULE', SCHEMA_VAL, PARENT_SCHEMA)->STR
                                  #     - fired during AJV.compile()
                                  #     - the fastest, but way too complicated to use
                                  #See above about how to set custom error messages
                                  #KOPTS:
                                  #  - type 'TYPE'[_ARR] (def: all): only trigger on those types
                                  #  - valid true: if FUNC is performed but its result can be ignored, i.e. only used for
                                  #    side-effects
                                  #  - modifying true: so FUNC can modify object (through PARENT|ROOT_DATA)
                                  #  - dependencies 'VAR'_ARR: require PARENT_SCHEMA.VAR
                                  #  (validate() only)
                                  #  - schema false: SCHEMA_VAL, PARENT_SCHEMA are not passed as argument
                                  #  - $data true: allow using $data
                                  #  - async BOOL (def: false):
                                  #     - if returning validate() returns VALIDATION_PROMISE
                                  #     - AJV.validate() will return RESULT_PROMISE:
                                  #        - resolved with DATA_VAL if VALIDATION_PROMISE resolved with true
                                  #        - rejected with ERROR if VALIDATION_PROMISE resolved with false,
                                  #          or if new Ajv.ValidationError(ERROR_OBJ_ARR) thrown
                                  #           - with ERROR.errors ERROR_OBJ_ARR
                                  #        - (should avoid) rejected with VAL if VALIDATION_PROMISE rejected with VAL
                                  #     - RSCHEMA.$async true should be true as well
                                  #     - can use package ajv-async (version 1.0.0-beta.2), doing AJVASYNC(AJV), to transpile
                                  #       async functions (using 'nodent'):
                                  #        - transpile using KOPTS.transpile: undefined (def) for "if supported",
                                  #          true for "always", false for "never"
                                  #AOPTS:
                                  #  - passContext BOOL: if false (def), bind validate function context with AJV
                                  #CONTEXT:
                                  #  - level NUM: depth level of SCHEMA_VAL
                                  #  - dataLevel NUM: depth level of DATA_VAL
                                  #  - schema SCHEMA
                                  #  - schemaPath SCHEMA_PATH
                                  #  - self AJV
                                  #  - opts AOPTS
                                  #  - async BOOL
                                  #  - formats 'FORMAT'_ARR: all available in AJV
                                  #  - baseId: base URI for $ref resolving
                                  #  - compositeRule BOOL: is inside anyOf|oneOf|not|if|switch
AJV.getKeyword('RULE')->VAL       #Returns KOPTS, true (if builtin) or false (undefined)
AJV.removeKeyword('RULE')->AJV    #
AJV.validateKeyword(KOPTS[, BOOL])
 ->BOOL2                          #If BOOL true (def: false), throw error instead of returning false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AJV-KEYWORDS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.5.2

AJVKEYWORDS(AJV[, 'RULE'[_ARR]])  #Add some custom rules (documented in JSON schema doc)
require
('ajv-keywords/keywords/RUL')(AJV)#Same, but add less code if used in browser
