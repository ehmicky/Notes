
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   EVENTBRIDGE_SCHEMAS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2024-12-20

SUMMARY ==>                       #Registry: AWS services, policy
                                  #Schema: version, OpenAPI, search, infer (auto|manual), code generation

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE_DOMAIN                    #'schemas.REGION.amazonaws.com'

FORMAT ==>                        #REST API
                                  #Request:
                                  #  - POST|PUT: path parameters + JSON
                                  #  - GET|DELETE: path parameters + query parameters (camelCase'd)
                                  #Response: JSON

PAGINATION ==>                    #Uses REQ.limit (def|max: 100) + REQ|RES.nextToken
                                  #No pagination: ListTagsForResource()

PRICING ==>                       #REGISTRYs|SCHEMAs: free
                                  #1$ per 1e7 EVENTs analyzed by DISCOVERER
                                  #  - multiplied by NUM of 8KB chunks
                                  #  - free: 5e6/month

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AmazonEventBridgeSchemas
 FullAccess                       #AWS managed POLICY. Grants all 'schemas:*' PACTIONs
AmazonEventBridgeSchemas
 ReadOnlyAccess                   #AWS managed POLICY. Grants all readonly 'schemas:*' PACTIONs

                                  ┌──────────────┐
                                  │   REGISTRY   │
                                  └──────────────┘

REGISTRY                          #Group of SCHEMAs
                                  #Max 10 (soft) per REGION|ACCOUNT
REGISTRY.RegistryArn              #'REGISTRY_ARN'. 'arn:aws:schemas:REGION:ACCOUNT_ID:registry/REGISTRY'
REGISTRY.RegistryName             #'REGISTRY'
REGISTRY.Description              #STR. Max 256 chars

REGISTRY.Scope                    #Either:
                                  #  - 'AWS': managed by AWS
                                  #     - 'REGISTRY' name is 'aws.SERVICE'
                                  #  - 'Local'

                                  ┌──────────────────┐
                                  │   REGISTRY API   │
                                  └──────────────────┘

POST /v1/registries/name/REGISTRY #Req: REGISTRY
CreateRegistry()                  #  - no RegistryArn
                                  #Res: REGISTRY
PUT /v1/registries/name/REGISTRY  #Req: REGISTRY
UpdateRegistry()                  #  - no RegistryArn
                                  #  - no tags
                                  #Res: REGISTRY
GET /v1/registries                #Req: REGISTRY
ListRegistries()                  #  - only one with Scope
                                  #  - only RegistryName -> RegistryNamePrefix
                                  #Res: Registries REGISTRY_ARR
                                  #  - no Description
GET /v1/registries/name/REGISTRY  #Req: REGISTRY
DescribeRegistry()                #  - only RegistryName
                                  #Res: REGISTRY
DELETE                            #Req: REGISTRY
 /v1/registries/name/REGISTRY     #  - only RegistryName
DeleteRegistry()                  #Res: empty

                                  ┌──────────────────┐
                                  │   REGISTRY IAC   │
                                  └──────────────────┘

AWS::EventSchemas::Registry       #RESPROPs: RegistryName, Description
                                  #RESATTRs: RegistryArn, RegistryName

                                  ┌──────────────────┐
                                  │   AWS SERVICES   │
                                  └──────────────────┘

aws.events                        #REGISTRY managed by AWS
                                  #Contains SCHEMAs for all EventBridge integration EVENTs

aws.SERVICE@EVENT_TYPE            #SCHEMA
                                  #EVENT_TYPE is Titleize'd, no spaces
                                  #  - e.g. AWS API Call via CloudTrail -> AWSAPICallViaCloudTrail
SCHEMA.components.schemas.AWSEvent#AWS_EVENT. Contains the actual EVENT definition
AWS_EVENT.x-amazon-events-source  #'SOURCE', i.e. 'aws.SERVICE'
AWS_EVENT
 .x-amazon-events-detail-type     #'EVENT_TYPE'

                                  ┌────────────┐
                                  │   SCHEMA   │
                                  └────────────┘

SCHEMA                            #JSON schema, and metadata
                                  #Automatically deleted after 2 years if no API calls
                                  #Max 100 (soft) per SCHEMAs
                                  #  - 200 if using a DISCOVERER
SCHEMA.SchemaArn                  #'SCHEMA_ARN'. 'arn:aws:schemas:REGION:ACCOUNT_ID:schema/REGISTRY/SCHEMA'
SCHEMA.SchemaName                 #'SCHEMA'
SCHEMA.Description                #STR. Max 256 chars
SCHEMA.LastModified               #'DATE'

SCHEMA.RegistryName               #'REGISTRY'

SCHEMA.ClientTokenId              #STR. Idempotency token (see aws_network doc)
                                  #Max 36 chars

SCHEMA.Type                       #Either:
                                  #  - 'OpenApi3' (see its doc): JSON schema used by OpenAPI
                                  #  - 'JSONSchemaDraft4'
                                  #Can convert from one to the other using ExportSchema()
SCHEMA.Content                    #'JSON_SCHEMA' as JSON
                                  #Max 100KB

SCHEMA.Keywords                   #STR. Search by keyword, using SearchSchemas()

                                  ┌────────────────┐
                                  │   SCHEMA API   │
                                  └────────────────┘

POST /v1/registries/name          #Req: SCHEMA
 /REGISTRY/schema/name/SCHEMA     #  - no SchemaArn, LastModified, *Version*
CreateSchema()                    #  - no SchemaName
                                  #Res: SCHEMA
                                  #  - no RegistryName
                                  #  - no Content
PUT /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schema/name/SCHEMA     #  - only one with ClientTokenId
UpdateSchema()                    #  - no SchemaArn, LastModified, *Version*
                                  #  - no tags
                                  #Res: SCHEMA
                                  #  - no RegistryName
                                  #  - no Content
GET /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schema                 #  - only RegistryName
ListSchemas()                     #  - only SchemaName -> SchemaNamePrefix
                                  #Res: Schemas SCHEMA_ARR
                                  #  - no Type, Description, SchemaVersion, VersionCreatedDate, Content
                                  #  - no RegistryName
                                  #  - only one with VersionCount
GET /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schemas/search         #  - only RegistryName
SearchSchemas()                   #  - only one with Keywords
                                  #Res: Schemas SCHEMA_ARR
                                  #  - only SchemaArn, SchemaName, RegistryName, Type
                                  #  - only SchemaVersion|VersionCreatedDate -> SchemaVersions[*].SchemaVersion|CreatedDate
GET /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schema/name/SCHEMA     #  - only RegistryName, SchemaName, SchemaVersion
DescribeSchema()                  #Res: SCHEMA
                                  #  - no RegistryName
GET /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schemas/name/SCHEMA    #  - only RegistryName, SchemaName, SchemaVersion
 /export                          #Res: SCHEMA
ExportSchema()                    #  - only RegistryName, SchemaName, SchemaVersion, Type
                                  #  - only Content
DELETE /v1/registries/name        #Req: SCHEMA
 /REGISTRY/schema/name/SCHEMA     #  - only RegistryName, SchemaName
DeleteSchema()                    #Res: empty

                                  ┌────────────────┐
                                  │   SCHEMA IAC   │
                                  └────────────────┘

AWS::EventSchemas::Schema         #RESPROPs: SchemaName, Description, RegistryName, Type, Content
                                  #RESATTRs: SchemaArn, SchemaName, LastModified

                                  ┌──────────────────────────────┐
                                  │   SCHEMA EVENTBRIDGE EVENT   │
                                  └──────────────────────────────┘

EVENT_TYPE 'Schema Created'       #EventBridge EVENT emitted on SCHEMA creation
SOURCE                            #'aws.schemas'
DETAIL.SchemaName|RegistryName
 |SchemaType|Version|CreationDate #SCHEMA.*

                                  ┌────────────────────┐
                                  │   SCHEMA TOOLKIT   │
                                  └────────────────────┘

SEARCH SCHEMA ==>                 #Can be done from 'Explorer'

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

SCHEMA.SchemaVersion              #'VERSION_NUM', automatically incremented on create|update, starting at '1'
                                  #Max 100 (soft) per SCHEMAs
SCHEMA.VersionCreatedDate         #'DATE'

SCHEMA.VersionCount               #NUM of VERSIONs

                                  ┌─────────────────┐
                                  │   VERSION API   │
                                  └─────────────────┘

GET /v1/registries/name           #Req: SCHEMA
 /REGISTRY/schemas/name/SCHEMA    #  - only RegistryName, SchemaName
 /versions                        #Res: SchemaVersions SCHEMA_ARR
ListSchemaVersions()              #  - only SchemaArn, SchemaName, SchemaVersion, Type
DELETE /v1/registries/name
 /REGISTRY/schemas/name/SCHEMA    #Req: SCHEMA
 /version/VERSION_NUM             #  - only SchemaArn, SchemaName, SchemaVersion
DeleteSchemaVersion()             #Res: empty

                                  ┌─────────────────┐
                                  │   VERSION IAC   │
                                  └─────────────────┘

AWS::EventSchemas::Schema         #RESATTRs: SchemaVersion, VersionCreatedDate

                                  ┌───────────────────────────────┐
                                  │   VERSION EVENTBRIDGE EVENT   │
                                  └───────────────────────────────┘

EVENT_TYPE
 'Schema Version Created'         #EventBridge EVENT emitted on VERSION creation
SOURCE                            #'aws.schemas'
DETAIL.SchemaName|RegistryName
 |SchemaType|Version|CreationDate #SCHEMA.*

                                  ┌────────────────┐
                                  │   DISCOVERER   │
                                  └────────────────┘

DISCOVERER                        #Infer SCHEMAs from a BUS's EVENTs
                                  #Under-the-hood, creates RULEs named '*Schemas-*'
                                  #Then creates SCHEMAs automatically
                                  #Not if BUS.KmsKeyIdentifier set
                                  #Max 10 (soft) per REGION|ACCOUNT
DISCOVERER.DiscovererArn          #'DISCOVERER_ARN'. 'arn:aws:schemas:REGION:ACCOUNT_ID:discoverer/DISCOVERER_MID'
DISCOVERER.DiscovererId           #'DISCOVERER_MID'
DISCOVERER.Description            #STR. Max 256 chars

DISCOVERER.State                  #'STARTED' (def) or 'STOPPED'

DISCOVERER.SourceArn              #'BUS_ARN'

DISCOVERER.CrossAccount           #BOOL (def: true)
                                  #If false, do not look for EVENTs sent to the BUS from another ACCOUNT

                                  ┌─────────────────────┐
                                  │   DISCOVERER AUTH   │
                                  └─────────────────────┘

aws-service-role/                 #SERVICE_LINKED_ROLE used by DISCOVERER
 schemas.amazonaws.com/           #Automatically created by DISCOVERER
 AWSServiceRoleForSchemas         #  - providing has PACTIONs iam:CreateServiceLinkedRole for that ROLE
                                  #     - COND_KEY iam:AWSServiceName 'schemas.amazonaws.com'

AmazonEventBridgeSchemas          #AWS managed POLICY used by AWSServiceRoleForSchemas. Allows:
 ServiceRolePolicy                #  - Put|Enable|Disable|DeleteRule(), Put|RemoveTargets() and ListTargetsByRule()
                                  #  - on RULEs '*Schemas-*'

AmazonEventBridgeSchemasFullAccess#Includes same permissions as above
                                  #Also includes iam:CreateServiceLinkedRole on above ROLE
AmazonEventBridgeFullAccess       #Same

                                  ┌────────────────────┐
                                  │   DISCOVERER API   │
                                  └────────────────────┘

POST /v1/discoverers              #Req: DISCOVERER
CreateDiscoverer()                #  - no DiscovererId
                                  #  - no DiscovererArn, State
                                  #Res: DISCOVERER
PUT /v1/discoverers               #Req: DISCOVERER
 /id/DISCOVERER_MID               #  - no DiscovererArn, State
                                  #  - no SourceArn, tags
UpdateDiscoverer()                #Res: DISCOVERER
POST /v1/discoverers              #Req: DISCOVERER
 /id/DISCOVERER_MID/start         #  - only DiscovererId
StartDiscoverer()                 #Res: DISCOVERER
                                  #  - only DiscovererId, State
POST /v1/discoverers              #Req: DISCOVERER
 /id/DISCOVERER_MID/stop          #  - only DiscovererId
StopDiscoverer()                  #Res: DISCOVERER
                                  #  - only DiscovererId, State
GET /v1/discoverers               #Req: DISCOVERER
ListDiscoverers()                 #  - only DiscovererId|SourceArn -> DiscovererIdPrefix|SourceArnPrefix
                                  #Res: Discoverers DISCOVERER_ARR
                                  #  - no Description
GET /v1/discoverers               #Req: DISCOVERER
 /id/DISCOVERER_MID               #  - only DiscovererId
DescribeDiscoverer()              #Res: DISCOVERER
DELETE /v1/discoverers            #Req: DISCOVERER
 /id/DISCOVERER_MID               #  - only DiscovererId
DeleteDiscoverer()                #Res: empty

                                  ┌────────────────────┐
                                  │   DISCOVERER IAC   │
                                  └────────────────────┘

AWS::EventSchemas::Discoverer     #RESPROPs: Description, SourceArn, CrossAccount
                                  #RESATTRs: DiscovererArn, DiscovererId, State

                                  ┌───────────┐
                                  │   INFER   │
                                  └───────────┘

SCHEMA_GET.Events                 #'GEVENT'_ARR. Infer a SCHEMA from those GEVENTs
                                  #As opposed to DISCOVERER, GEVENTs are passed directly
                                  #Max 10 items

SCHEMA_GET.Type                   #SCHEMA.Type

                                  ┌───────────────┐
                                  │   INFER API   │
                                  └───────────────┘

POST /v1/discover                 #Req: SCHEMA_GET
GetDiscoveredSchema()             #Res: SCHEMA
                                  #  - only Content

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

REGISTRY_POLICY.RegistryName      #'REGISTRY'

REGISTRY_POLICY.RevisionId        #'REVISION_ID' (see aws_network doc)

REGISTRY_POLICY.Policy            #IAM 'POLICY_DOC_JSON'
                                  #Resource-level policy on REGISTRY, i.e. Resource is REGISTRY_ARN
                                  #Principal must be 'ACCOUNT_ID'
                                  #  - this can be worked around using either:
                                  #     - COND_KEY aws:PrincipalArn or aws:SourceArn|SourceAccount
                                  #     - identity-level POLICY instead
                                  #PACTIONs are only cross-account ones (see below)

                                  ┌─────────────────┐
                                  │   POLICY AUTH   │
                                  └─────────────────┘

CROSS-ACCOUNT REQUESTS ==>        #Allowed by using Pricipal with another ACCOUNT, in REGISTRY_POLICY
                                  #Only for PACTIONs:
                                  #  - *Registry() except CreateRegistry()
                                  #  - *Schema*() except ExportSchema() and GetDiscoveredSchema()
                                  #  - *CodeBinding*()
                                  #Can also be 'schemas:*' for all the above PACTIONs

ANONYMOUS REQUESTS ==>            #Allowed by using Principal '*', in BUS_POLICY
                                  #Not recommended, except to target an ORG by using COND_KEY aws:PrincipalOrgId

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

PUT /v1/policy                    #Req: REGISTRY_POLICY
PutResourcePolicy()               #  - RegistryName is in query parameters
                                  #Res: REGISTRY_POLICY
                                  #  - no RegistryName
GET /v1/policy                    #Req: REGISTRY_POLICY
GetResourcePolicy()               #  - only RegistryName
                                  #Res: REGISTRY_POLICY
                                  #  - no RegistryName
DELETE /v1/policy                 #Req: REGISTRY_POLICY
DeleteResourcePolicy()            #  - only RegistryName
                                  #Res: empty

                                  ┌────────────────┐
                                  │   POLICY IAC   │
                                  └────────────────┘

AWS::EventSchemas::RegistryPolicy #RESPROPs: RegistryName, RevisionId, Policy
                                  #RESATTRs: Id
                                  #With Cloud Control, cannot list

                                  ┌──────────┐
                                  │   CODE   │
                                  └──────────┘

SCHEMA_CODE                       #Typed getters|setters based on a SCHEMA
                                  #WAIT (DescribeBindingSource(), every 2s, timeout 1m) CodeBindingExists: when it exists

SCHEMA_CODE_RAW                   #'URI' to .zip file with SCHEMA_CODE result
SCHEMA_CODE.CreationDate          #'DATE'
SCHEMA_CODE.LastModified          #'DATE'

SCHEMA_CODE.RegistryName          #'REGISTRY'
SCHEMA_CODE.SchemaName            #'SCHEMA'
SCHEMA_CODE.SchemaVersion         #'VERSION_NUM'

SCHEMA_CODE.Language              #One of: 'TypeScript3', 'Python36', 'Go1', 'Java8'

SCHEMA_CODE.Status                #One of:
                                  #  - CREATE_IN_PROGRESS
                                  #  - CREATE_COMPLETE
                                  #  - CREATE_FAILED

                                  ┌──────────────┐
                                  │   CODE API   │
                                  └──────────────┘

POST /v1/registries/name          #Req: SCHEMA_CODE
 /REGISTRY/schemas/name/SCHEMA    #  - only RegistryName, SchemaName, Language
 /language/LANG                   #  - only SchemaVersion
PutCodeBinding()                  #Res: SCHEMA_CODE
                                  #  - no RegistryName, SchemaName, Language
GET /v1/registries/name           #Req: SCHEMA_CODE
 /REGISTRY/schemas/name/SCHEMA    #  - only RegistryName, SchemaName, Language
 /language/LANG                   #  - only SchemaVersion
                                  #Res: SCHEMA_CODE
DescribeCodeBinding()             #  - no RegistryName, SchemaName, Language
GET /v1/registries/name           #Req: SCHEMA_CODE
 /REGISTRY/schemas/name/SCHEMA    #  - only RegistryName, SchemaName, Language
 /language/LANG/source            #  - only SchemaVersion
GetCodeBindingSource()            #Res: SCHEMA_CODE_RAW

                                  ┌──────────────┐
                                  │   CODE SDK   │
                                  └──────────────┘

SCHEMA_CODE_RAW                   #Is { Body: OUTPUT_BLOB }

                                  ┌──────────────────┐
                                  │   CODE TOOLKIT   │
                                  └──────────────────┘

DOWNLOAD CODE BINDING ==>         #Can be done from 'Explorer'

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

RESOURCE_TAGS.resourceArn         #'ARN'
RESOURCE_TAGS.tags
REGISTRY|SCHEMA|DISCOVERER.tags   #TAGS_OBJ

                                  ┌──────────────┐
                                  │   TAGS API   │
                                  └──────────────┘

POST /tags/ARN                    #Req: RESOURCE_TAGS
TagResource()                     #Res: empty
GET /tags/ARN                     #Req: RESOURCE_TAGS
ListTagsForResource()             #  - only resourceArn
                                  #Res: RESOURCE_TAGS
                                  #  - only tags
DELETE /tags/ARN                  #Req: RESOURCE_TAGS
UntagResource()                   #  - tags OBJ -> tagKeys 'TAG'_ARR
                                  #Res: empty

                                  ┌──────────────┐
                                  │   TAGS IAC   │
                                  └──────────────┘

AWS::EventSchemas::
 Registry|Schema|Discoverer       #RESPROPs: Tags
