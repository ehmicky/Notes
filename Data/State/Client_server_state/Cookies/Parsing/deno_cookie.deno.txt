
               
   DENO_COOKIE  
               



ALTERNATIVES ==>                  #See js-cookie

VERSION ==>                       #Part of Deno
                                  #Browser compatible


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PARSE SERIALIZE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/http/cookie.ts
getCookies(HEADERS)->OBJ          #Parse cookies from Cookie [C]
                                  #OBJ key is 'VAR', value is 'VAL'
getSetCookies(HEADERS)->COOKIE_ARR#Parse cookies from Set-Cookie [S]
setCookie(HEADERS, COOKIE)        #Add cookies to Set-Cookie [S]
deleteCookie
 (HEADERS, 'VAR'[, COOKIE])       #Like setCookie(), but set "expires" to past date

COOKIE.name                       #'VAR'
COOKIE.value                      #'VAL'
COOKIE.domain                     #STR
COOKIE.path                       #STR
COOKIE.expires                    #DATE[_NUM]
COOKIE.maxAge                     #NUM
COOKIE.secure                     #BOOL
COOKIE.httpOnly                   #BOOL
COOKIE.sameSite                   #'Strict|Lax|None'
COOKIE.unparsed                   #'SVAR=VAL'_ARR. Additional non-standard cookie options

ANY_HEADERS                       #HEADERS or { headers: HEADERS } (e.g. REQ|RES)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HEADERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/http/cookie_map.ts
new CookieMap(ANY_HEADERS[, OPTS])#Child of MAP:
                                  #  - key is cookie 'VAR'
                                  #  - value is 'VAL'
                                  #  - get methods:
                                  #     - i.e. iteration|get|has|size()
                                  #     - use request headers (from constructor)
                                  #     - Cookie [C]
                                  #  - set methods:
                                  #     - i.e. set|delete|clear()
                                  #     - use response headers (from OPTS.response)
                                  #     - Set-Cookie [S]
OPTS.response                     #ANY_HEADERS (def: new Headers())
OPTS.secure                       #BOOL (def: false). Whether current connection is secure (e.g. using SSL)

SCOOKIE.domain                    #STR
SCOOKIE.path                      #STR (def: '/')
SCOOKIE.expires                   #DATE
SCOOKIE.secure                    #BOOL (def: false)
SCOOKIE.httpOnly                  #BOOL (def: true)
SCOOKIE.sameSite                  #'Strict'|true, 'Lax', 'None' or false (def, not set)

SCOOKIE.ignoreInsecure            #BOOL. If false, error when signing|validating unless OPTS.secure
SCOOKIE.overwrite                 #BOOL. If false (def), noop if cookie 'VAR' already exists


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MERGE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


mergeHeaders
 (ANY_HEADERS|COOKIE_MAP...)
 ->HEADERS                        #Merge all Set-Cookie [S]
