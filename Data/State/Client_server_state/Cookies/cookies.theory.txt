
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   COOKIES   ┃
                                  ┗━━━━━━━━━━━━━┛

COOKIES ==>                       #Goal:
                                  #  - store state for a specific client+server pair
                                  #  - can be ignored by some clients
                                  #  - clients will remove them due to memory constraints or end-user demand
                                  #RFCs: 2964, 6265
                                  #How:
                                  #  - server:
                                  #      Set-Cookie: VAR=VAL[;SVAR=VAL;...] [S]: one header per cookie
                                  #  - client, next request on same domain+path:
                                  #      Cookie: VAR=VAL[;...] [C]: one header for all cookies
                                  #  - VAL are percent-encoded
                                  #  - SVAR:
                                  #     - domain STR:
                                  #        - must be same as server, or superdomain
                                  #        - subdomains will match
                                  #     - path '/PATH'
                                  #        - recursive
                                  #     - expires|max-age:
                                  #        - DATE|NUM seconds before expiration
                                  #        - max-age has priority
                                  #        - def: end of session
                                  #        - 0 deletes cookie
                                  #     - secure: can only get|set via HTTPS (see HTTPS doc)
                                  #     - HttpOnly: can't be used via JavaScript (document.cookies), for security reasons
                                  #     - SameSite: Referer URL must have same superdomain, to prevent CSRF
                                  #        - 'Strict': yes
                                  #        - 'Lax' (def): yes, except if it's a navigation action
                                  #        - 'None': no
                                  #            - require "secure" to be set
                                  #     - Priority 'low|medium|high':
                                  #        - hint to client when it removes some cookies for a given domain,
                                  #          to prioritize deleting some over others
                                  #        - Chrome only
                                  #     - Partitioned
                                  #        - CHIPS (Cookies Having Independent Partitioned State)
                                  #Limits:
                                  #  - 4KB/cookie (most browsers)
                                  #  - 50/domain (IE11)
                                  #  - 10KB/domain (IE11)
                                  #Types:
                                  #  - first-party cookie:
                                  #     - cookie path/domain (i.e. HTTP request) is same as top-level page path/domain
                                  #  - third-party cookie:
                                  #     - inverse
                                  #     - can be blocked in browser settings
                                  #     - only disabled by default in Safari
                                  #  - Zombie cookie:
                                  #     - use cookies but also other storage at once, e.g. localStorage, ETag [S], Flash cookies, etc.
                                  #     - removing from one place -> others recreate it

DOCUMENT.cookie                                 #Get|set Set-Cookie [S]
                                                #Get all 'VAR=VAL;VAR=VAL...' but only set a single 'VAR=VAL[;SVAR=SVAL]...'
                                                #Should use en|decodeURIComponent(VAL)
                                                #Setting on Chrome when using file:/// does not work.
NAVIGATOR.cookieEnabled                         #BOOL. Readonly.


     - advantages over sending credentials in other headers/request_params:
        - can force HTTPS with httpOnly
        - simple:
           - client automatically stores it
           - client automatically sends it
           - with max-age: easy way to communicate expire time to client, or to invalidate
     - disadvantages over sending credentials in other headers/request_params:
        - credentials must be sent as a response HTTP headers (cannot use alternative ways)
        - not crossdomain

Cookies:
  - cannot rely only on cookies for authorization, must also use anti-CSRF measures
  - content should be encrypted (for confidentiality) and signed (for authenticity) even over HTTPS
  - should use secure and HttpOnly
  - content should contain key (to server-side hash table, e.g. session id) not direct information
  - service on same URL but different port can access cookie
  - service on same domain or superdomain can set cookies

