
                                  ┏━━━━━━━━━┓
                                  ┃   URI   ┃
                                  ┗━━━━━━━━━┛

STANDARDS ==>                     #RFCs:
                                  #  - syntax: 1630, 3986
                                  #  - IRI: 3987
                                  #  - URI vs URN vs URL: 3305
                                  #  - usage: 1736, 1737, 7320
                                  #  - well known URI: 5785, 8307
                                  #WHATWG URL spec:
                                  #  - focused on browser
                                  #  - sometimes contradict RFCs:
                                 ##     - this means "in WHATWG spec only"
                                 ##     - main differences:
                                 ##        - "URL" means "IRI" in visual representation, "URI" in logical representation
                                 ##        - HASH can contain any char unescaped
                                 ##        - SCHEME:PATH (except for HTTP|Websocket|FTP) can contain any [:graph:] unescaped
                                  #W3C:
                                  #  - clean URI: "On Linking Alternative Representations To Enable Discovery And Publishing", "Usage Patterns For Client-Side URI parameters"
                                  #  - opaque URI: "The use of Metadata in URIs"
                                  #  - HASH: "Identifying Application State", "Best Practices for Fragment Identifiers and Media Type Definitions"
                                  #  - URI describing confidential info: "Good Practices for Capability URLs"
                                  #  - CURIE: "CURIE Syntax 1.0"

SUMMARY ==>                       #URI (Uniform Resource Identifier):
                                  #  - syntax:
                                  #     - SCHEME, AUTHORITY, ORIGIN, USERINFO, HOSTNAME, PORT, PATH, QUERY, HASH
                                  #     - percent-encoding and Punycode
                                  #     - case-insensitive: SCHEME, HOSTNAME. Rest depends
                                  #     - max length 255
                                  #     - relative references (to base URI): '', 'URI', '/URI', '//URI'
                                  #     - should try not to restrict syntax
                                  #  - IRIs: like URIs but only percent-encode ASCII chars "to escape"
                                 ##  - WHATWG use "URL" meaning URI for logical representation, IRI for visual
                                  #  - can describe: identity, location, content, metadata
                                  #  - describe a resource, which can take many representations (using MIME types)
                                  #  - transience should be avoided
                                  #  - URI scheme describe interaction
                                  #  - cardinality:
                                  #     - RESOURCE == RESOURCE2 depends on SCHEME|AUTHORITY
                                  #     - URI == URI2 is helped by normalization
                                  #     - sameness (URI always returns same resource, anywhere in global namespace)
                                  #     - no ambiguity (URI returns only one resource)
                                  #     - uniqueness:
                                  #        - only 1 URI for 1 resource
                                  #        - optional: can use canonical URI, short URI
                                  #  - clean URI: accessible, separation of concern by not infering implementation nor format
                                  #  - data URIs
                                  #  - well-known URIs: at /.well-known/

                                  ┌────────────┐
                                  │   SYNTAX   │
                                  └────────────┘

PARTS ==>                         #[SCHEME:][//[USERINFO@]HOSTNAME[:[PORT]]][PATH][?[QUERY]][#[HASH]]:
                                  #  - SCHEME
                                  #  - AUTHORITY: //[USERINFO@]HOSTNAME[:[PORT]]
                                  #  - ORIGIN:
                                  #     - SCHEME://HOSTNAME[:[PORT]]
                                  #     - can be null, e.g. initial HTTP request
                                  #     - ORIGIN null !== ORIGIN null
                                 ##     - null unless http[s]:, ws[s]:, ftp:, gopher:, file: or blob:
                                  #  - USERINFO:
                                 ##     - USERNAME:PASSWORD
                                  #     - should avoid plaintext USERNAME|PASSWORD
                                  #  - HOST: HOSTNAME[:PORT]
                                  #  - HOSTNAME:
                                  #     - can be other things too, e.g. IP address (for IP protocols)
                                  #     - max length 255 bytes
                                  #.    - with DNS, divided between SUBDOMAIN and DOMAIN (which includes TOP-LEVEL-DOMAIN)
                                  #  - PORT:
                                  #     - socket number
                                 ##     - 0-65536
                                  #  - PATH:
                                  #     - / imply hierarchy
                                  #     - when AUTHORITY and PATH both present, must be separated by /
                                  #     - can use . or ..
                                  #        - must be resolved as fast as possible
                                  #.    - last part is FILENAME, which can include SUFFIX|EXTENSION
                                  #.    - other part is DIRECTORY
                                  #  - QUERY:
                                  #     - can be any syntax
                                  #        - but usually ?VAR=VAL&...
                                  #        - sometimes also ;VAR=VAL;...
                                  #     - nesting:
                                  #        - supported by tools like Express REQ.query
                                  #        - but using [ ] in QUERY is not standard
                                  #  - HASH|FRAGMENT:
                                  #     - can be:
                                  #        - part of RESOURCE
                                  #        - RESOURCE2 referenced by RESOURCE
                                  #        - RESOURCE variant
                                  #     - should not be used for state computation: use PATH|QUERY instead
                                  #     - semantics depends on MIME type
                                  #        - when there is a parent MIME type, should not interfer with it
                                  #     - should prefer HASH based on resource semantics rather than syntax
                                  #     - processed by client not server
                                  #. - RESOURCE: [PATH][?[QUERY]][#[HASH]]

CHARSET ==>                      ##Forbidden characters:
                                 ##  - not even percent-encoded
                                 ##  - tab, newline or leading|trailing control chars or space
                                  #Characters "to escape":
                                  #  - allowed but percent-encoding UTF-8 byte value
                                  #     - also known as "URL encoding"
                                  #     - HOSTNAME uses Punycode instead
                                  #  - any char (including Unicode) except forbidden characters
                                  #  - case-insensitive, uppercase
                                 ##  - not in SCHEME
                                  #Characters not "to escape" (beyond general URI delimiters):
                                  #                             PORT                    [:digit:]
                                  #    SCHEME USERINFO HOSTNAME      PATH QUERY HASH    [:alnum:] - . +
                                  #           USERINFO HOSTNAME      PATH QUERY HASH    _ ~ ! $ & ' ( ) * ,
                                  #                    HOSTNAME      PATH QUERY HASH    ; =
                                  #                                  PATH QUERY HASH    : @
                                  #                                       QUERY HASH    / ?
                                 ##                                             HASH    any char, including Unicode, excluding non-[:graph:] ASCII
                                 ##                                  PATH               [:graph:] if no AUTHORITY and PATH does not start with / and SCHEME not http[s]:, ws[s]:, ftp:, gopher:, file:
                                 ##WHATWG adds : ; = as characters "to escape" for USERINFO
                                  #Escaping:
                                  #  - JavaScript: encode|decodeURI[Component]()

CASE ==>                          #  - SCHEME, HOSTNAME: case-insensitive, lowercase recommended
                                  #  - rest: depends on SCHEME and AUTHORITY

MAX LENGTH ==>                    #Depends on URI scheme, but recommmends 255 bytes
                                  #IE11 has limit of 2KB

RELATIVE REFERENCE ==>            #  - when SCHEME: is ommitted
                                  #  - relative to another URI2 ("base URI"), which can be (in priority order):
                                  #     - defined in RESOURCE (e.g. <base> in HTML)
                                  #     - defined in parent RESOURCE2
                                  #     - top-level resource's URI2
                                  #     - application-specific default URI2
                                  #  - if URI:
                                  #     - empty or only QUERY|HASH:
                                  #        - "same document reference"
                                  #        - same as URI2
                                  #           - including QUERY2 unless QUERY specified
                                  #           - excluding HASH2. HASH is also used.
                                  #     - URI:
                                  #        - "relative path reference"
                                  #        - relative to SCHEME2://AUTHORITY2/PATH2/
                                  #           - /PATH2/ excludes filename
                                  #     - /URI:
                                  #        - "absolute path reference"
                                  #        - relative to SCHEME2://AUTHORITY2/
                                  #     - //URI:
                                  #        - "network path reference"
                                  #        - relative to SCHEME2:
                                  #  - "URI reference": URI or relative reference

SYNTAX RESTRICTIONS ==>           #  - URI syntax can be restricted by specific URI scheme
                                  #     - but should be avoided to separate URI (identification) from URI scheme (interaction)
                                  #  - should not be restricted by specific AUTHORITY
                                  #     - except for PORT
                                  #     - otherwise it can:
                                  #        - conflict with other technologies also restricting URI syntax
                                  #        - make URI more dependant on implementation
                                  #        - make it less flexible
                                  #  - HASH syntax|semantics are defined by MIME type, not SCHEME nor AUTHORITY

PARSING ==>                       #See: uri.js, DOM

                                  ┌─────────┐
                                  │   IRI   │
                                  └─────────┘

I18N ==>                          #IRI (Internationalized Resource Identifier) are like URI but i18n'd:
                                  #  - do not need percent-encoding:
                                  #     - most Unicode chars
                                  #     - encoding is unspecified but usually UTF-8
                                  #        - if embedded inside a document with a specific encoding, should use that one
                                  #  - still need percent-encoding:
                                  #     - ASCII chars "to escape" in URIs
                                  #     - private use or non chars Unicode chars
                                  #        - i.e. U+E000 to U+F8FF, U+FDD0 to U+FDEF, U+F|10XXXX
                                 ##     - any invisible char
                                  #  - bidirectionality:
                                  #     - must use ltr for logical representation (i.e. digital format)
                                  #     - but can use any for visual representation (i.e. what people see/input)

RELATIONSHIP WITH URIS ==>        #  - URIs and IRIs are siblings, not subsets
                                  #  - can convert from each other
                                  #     - specific SCHEME or protocol might add steps to conversion, e.g. Punycode for IDNA (DNS)
                                  #  - scheme, protocol or format need to explicitly allow IRIs to be able to use them

WHATWG "URL" DEFINITION ==>      ##  - "URL":
                                 ##     - visual representation: IRI, with USERINFO hidden
                                 ##     - logical representation: URI
                                 ##  - "URL" does not imply location, "URI" and "IRI" words deprecated

                                  ┌───────────┐
                                  │   CURIE   │
                                  └───────────┘

GOAL ==>                          #CURIE (Compact URI) are like IRI, but with shorter length

SYNTAX ==>                        #[PREFIX:]REFERENCE
                                  #  - PREFIX:
                                  #     - [:alnum:] . - _
                                  #     - cannot be _ alone
                                  #     - if optional, must provide way to get default value
                                  #     - avoid any SCHEME to avoid any confusion with actual IRI
                                  #  - REFERENCE
                                  #CURIE <-> IRI translation:
                                  #  - is implementation-specific
                                  #  - can be simple IRI reference, with PREFIX mapping to the base IRI
                                  #[CURIE]:
                                  #  - "SafeCURIE": CURIE enclosed in [ ]
                                  #  - optional but recommended to distinguish from IRI

USAGE ==>                         #Not where only IRI are usually expected (e.g. <a href>)
                                  #Do not expose to consumers, i.e. translate CURIE as IRI when consumed

                                  ┌───────────────┐
                                  │   SEMANTICS   │
                                  └───────────────┘

PURPOSE ==>                       #URIs can describe (not exclusive to each other):
                                  #  - identity:
                                  #     - resource ID, regardless of location
                                  #     - resolution:
                                  #        - translating into location/metadata
                                  #        - example: Handle System
                                  #     - example: URN, DOI
                                  #  - location:
                                  #     - address where a resource might be located
                                  #     - called URL (Uniform Resource Locator)
                                  #     - must use one|several network protocols|algorithm ("dereferencing"):
                                  #        - URI scheme does not always equate protocol, e.g. data: or file:
                                  #        - can be safe (read-only) or safe (write)
                                  #  - content:
                                  #     - including hash
                                  #     - example: data URI
                                  #  - metadata:
                                  #     - e.g.: URLs, owner, access restrictions, encoding
                                  #     - example: URC (never implemented), RDF
                                  #  - authorization ("capability URI")
                                  #If describes content|metadata|authorization:
                                  #  - is opaque|unreflective (as oppose to transparent|reflective)
                                  #  - should validate that content|metadata|authorization currently match resource's
                                  #  - content|metadata|authorization should not be transient

CAPABILITY URI ==>                #Advantage: does not need to store nor enter info separately
                                  #Problem is that URI not designed to be confidential:
                                  #  - displayed in browser URL bar or history
                                  #     - can use HTML5 history to remove it
                                  #  - often cached
                                  #     - should require no caching
                                  #  - often logged
                                  #  - revealed by Referer [C] (see web security doc)
                                  #  - might be exposed to consumers like URL shorteners
                                  #Mitigation:
                                  #  - specific to capability URI:
                                  #     - URI scheme should encrypt capability URI, e.g. https:
                                  #     - specific to HTTP:
                                  #        - put directory (but not individual URIs) in robots.txt
                                  #  - like any authorization token:
                                  #     - should be unique and unpredictable
                                  #     - should have expiration date
                                  #     - should allow revoking
                                  #     - unless needs sharing, should be account-wise
                                  #     - should be embedded inside resources encrypted, not being accessed by untrusted parties

URI SCHEME ==>                    #Describes:
                                  #  - interaction, i.e. identity resolution, location dereferencing, content retrieval or metadata usage
                                  #  - what URI should describe
                                  #     - should use URI scheme according to its design, e.g. no content|metadata in http: URI (see clean URI)
                                  #Should promote reuse, i.e. only:
                                  #  - use registered ones
                                  #  - create new ones if real need

RESOURCE ==>                      #Can be anything:
                                  #  - including real-life objects|beings or concepts.
                                  #  - if essence is information, is "information resource".

REPRESENTATION ==>                #How a resource is being represented for a specific request, using MIME type
                                  #Resource !== representation:
                                  #  - two different resources can have same representation, e.g. copied resource
                                  #  - two different representations can have same resource, e.g. variant

TRANSIENCE ==>                    #Long-term persistent:
                                  #  - URI identity description should be
                                  #Transient:
                                  #  - URI location|content|metadata description can be, but should be avoided
                                  #  - if URL:
                                  #     - rotten|dead|broken link
                                  #     - can prevent with:
                                  #        - permalink or PURL (permanent URL), redirecting to transient URL
                                  #        - robustlink:
                                  #           - redirects to archived version when dead link
                                  #           - can also always provide archived versions as alternatives (e.g. in a dropdown next to link)
                                  #           - implementations:
                                  #              - mementoweb robustlinks:
                                  #                 - <a> uses:
                                  #                    - normal link: href "URI-R", [data-versionurl "URI-M", ]data-versiondate "URI-M-DATE"
                                  #                    - link to previous version: href "URI-M", data-originalurl "URI-R", data-versiondate "URI-M-DATE"
                                  #                 - <meta itemprop="datePublished|Modified" content="YYYY-MM-DD">
                                  #                 - uses Mementoweb Timetravel API
                                  #              - robustify.js

                                  ┌─────────────────┐
                                  │   CARDINALITY   │
                                  └─────────────────┘

RESOURCE IDENTITY ==>             #Whether RESOURCE == RESOURCE2:
                                  #  - depends on SCHEME and AUTHORITY
                                  #  - example of amibiguous points:
                                  #     - non-semantic changes (formats, encoding, etc.)
                                  #     - different versions of same resource

SAMENESS ==>                      #Different requests to same URI cannot return different resources
                                  #  - at different places (global namespace) or times
                                  #Global namespace:
                                  #  - points to same resource in any network
                                  #     - but resource might be available or not depending on network
                                  #  - sometimes the context is part of the resource itself:
                                  #     - e.g.:
                                  #        - file:
                                  #        - http://localhost
                                  #        - time-based protocols
                                  #     - should be avoided:
                                  #        - if is for security reason, can still use global namespace and add access control
                                  #  - implies central authorities:
                                  #     - URN NAMESPACE are registered to IANA
                                  #     - URL:
                                  #        - HOST IP and domain names are delegated to providers registered to IANA
                                  #        - PATH is responsibility of server

NO AMBIGUITY ==>                  #One request to 1 URI cannot return many resources at once ("URI collision")

UNIQUENESS ==>                    #Cannot bind duplicate URIs ("URI aliases") to 1 resource:
                                  #  - this requirement is optional, but can create problems:
                                  #     - when updating resource, need to update all URIs
                                  #  - if not enforces, can use:
                                  #     - canonical URI:
                                  #        - the URI which has priority
                                  #        - others might redirect to canonical URI (URLs only)
                                  #     - short URI: smaller size than others
                                  #  - depends on URI identity:
                                  #     - whether URI == URI2
                                  #     - normalization:
                                  #        - safe:
                                  #           - lowercase SCHEME, HOST
                                  #           - uppercase %-encoded chars
                                  #           - %-decode chars that do not need to be
                                  #           - resolving . and ..
                                  #           - resolving relative references
                                  #        - safe (IRIs only):
                                  #           - converting to same encoding (e.g. UTF-16 -> UTF-8)
                                  #           - Unicode characters normalization (e.g. STR.normalize() in JavaScript)
                                  #           - case-sensitivity should be for ASCII only
                                  #        - SCHEME-specific (unsafe):
                                  #           - removing parts that equal default value (e.g. PORT, PATH, filename)
                                  #           - replace with equivalent SCHEME (e.g. http -> https)
                                  #           - remove empty parts, e.g. ? or # alone
                                  #           - lowercase|uppercase of case-insensitive parts (other than CHEME, HOST)
                                  #           - remove duplicate /
                                  #           - IP:
                                  #              - IP -> hostname
                                  #           - HTTP:
                                  #              - prepend www. to HOST
                                  #        - AUTHORITY-specific (unsafe):
                                  #           - add trailing /
                                  #           - sorting QUERY
                                  #           - removing unused parts (e.g. undefined query variables)
                                  #           - remove #HASH
                                  #    - should limit normalization by reducing possible of equivalent syntaxes

                                  ┌───────────────┐
                                  │   CLEAN URI   │
                                  └───────────────┘

GOAL ==>                          #Semantic/clean/RESTful URI
                                  #  - accessibility
                                  #  - separation of concerns, e.g. does not need to change URL when implementation|representation changes

HOW ==>                           #Should not infer implementation:
                                  #  - no file|script names or anything linked to the technical stack
                                  #  - only use abtract, human-friendly identifiers
                                  #     - using slugs, i.e. short [[:alpha:][:lower:]-]
                                  #     - e.g. several /RESOURCE and /ID
                                  #Should not infer representation (e.g. variants):
                                  #  - use protocol instead of URI:
                                  #     - e.g. HTTP request headers|body
                                  #  - use format instead of URI:
                                  #     - e.g. media|hreflang|type|sizes links HTML attribute
                                  #  - problems:
                                  #     - sometimes not allowed (e.g. request body in HTTP GET)
                                  #     - harder to set non-programatically (e.g. as opposed to using browser URL bar)
                                  #  - avoid QUERY

HELPERS ==>                       #Technologies that can help keep URI clean:
                                  #  - HTTP headers
                                  #  - links HTML attributes: media|hreflang|type|sizes
                                  #  - URI templates
                                  #  - Link [S]
                                  #  - well known URIs

                                  ┌───────────────────┐
                                  │   URI TEMPLATES   │
                                  └───────────────────┘

DOC ==>                           #See URI templates doc

                                  ┌─────────────────────┐
                                  │   WELL-KNOWN URIS   │
                                  └─────────────────────┘

WELL-KNOWN URIS ==>               #URIs:
                                  #  - that need to be accessed before any other resource (e.g. resource access policy)
                                  #  - whose PATH is common among different authorities:
                                  #     - registered with IANA
                                  #     - PATH starts with /.well-known/

                                  ┌────────────────────┐
                                  │   ACCESS CONTROL   │
                                  └────────────────────┘

TYPES ==>                         #Content access (i.e. deferencing an URI) !== providing URI
                                  #Content access can be:
                                  #  - normal origin server hosting
                                  #  - redirection and caching, e.g. proxies, internet archives, search engines
                                  #  - including, e.g. embedding

HOW TO  RESTRICT ==>              #Should prefer restricting content access over restricting URI itself
                                  #Should prefer technological ways to restrict content access:
                                  #  - authentication
                                  #  - robots.txt
                                  #  - X-Frame-Options [S]
                                  #  - Cache-Control: no-store [S]
                                  #  - Cache-Control: no-transform [S]
                                  #Should avoid putting content access in legal ways like terms of use:
                                  #  - but when using, should provide Link: <URI>;rel="license" [S]
