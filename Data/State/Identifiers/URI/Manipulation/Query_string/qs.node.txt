
      
   QS  
      



ALTERNATIVES ==>                                  #  - URLSearchParams: fewer features but standard and built-in
                                                  #  - qs: more features, Node.js only

VERSION ==>                                       #6.11.0

QUERY_OBJ                                         #Can be:
                                                  #  - QUERY_OBJ.VAR.VAR2 VAL <-> 'VAR[VAR2]=VAL'
                                                  #     - can be nested: max depth is OPTS.depth (def: 5)
                                                  #  - QUERY_OBJ.VAR.VAR2 VAL <-  'VAR.VAR2=VAL'
                                                  #     - if OPTS.allowDots true
                                                  #  - QUERY_OBJ.VAR ARR <-> 'VAR[]=VAL&VAR[]=VAL2'
                                                  #     - stringify() only if OPTS.arrayFormat 'brackets'
                                                  #  - QUERY_OBJ.VAR ARR <-> 'VAR[UINT]=VAL&VAR[UINT2]=VAL2'
                                                  #     - max UINT size is OPTS.arrayLimit (def: 20):
                                                  #       otherwise treated as an OBJ
                                                  #     - parse() can be disabled with OPTS.parseArrays false
                                                  #     - parse() remove undefined indexes unless OPTS.allowSparse true
                                                  #     - stringify() only if OPTS.arrayFormat 'indices' (def)
                                                  #  - QUERY_OBJ.VAR ARR <-> 'VAR=VAL&VAR=VAL2':
                                                  #     - stringify() only if OPTS.arrayFormat 'repeat' or OPTS.indices false
                                                  #  - QUERY_OBJ.VAR ARR <-> 'VAR=VAL,VAL2,...'
                                                  #     - parse() only if OPTS.comma true (def: false)
                                                  #        - can be combined with the ones above
                                                  #     - stringify() only if OPTS.arrayFormat 'comma'
                                                  #        - if OPTS.commaRoundTrip true (def: false), make all values ARRs, so
                                                  #          that parse() + stringify() is idempotent
                                                  #[ ] is and should be percent-encoded
                                                  #  - since [ ] is invalid in URIs

QS.parse('QUERY'[, OPTS])->QUERY_OBJ              #OPTS:
                                                  #  - parameterLimit NUM: max number of variables
                                                  #  - decoder(...) (def: decodeURIComponent()): custom escaping
                                                  #  - charset 'utf-8' (def) or 'iso-8859-1' (for old IE): instead of the one specified in HTTP headers
                                                  #  - charsetSentinel BOOL (def: false): if ut8=✓ present, guess OPTS.charset from ✓ encoding
                                                  #  - interpretNumericEntities BOOL (def: false): decode HTML escapes &#NUM;
                                                  #  - strictNullHandling: see below
                                                  #  - ignoreQueryPrefix BOOL (def: false): ignore leading ?
                                                  #  - plainObjects BOOL (def: false): make QUERY_OBJ not inherit from OBJ
                                                  #  - depth, allowDots, parseArrays, allowSparse, comma: see above

QS.stringify(QUERY_OBJ[, OPTS])->'QUERY'          #OPTS:
                                                  #  - delimiter STR|REGEXP (def: "&")
                                                  #  - encode false: do not escape
                                                  #  - encoder(...) (def: encodeURIComponent()): custom escaping
                                                  #  - charset 'utf-8' (def) or 'iso-8859-1'
                                                  #     - 'iso-8859-1' also encode HTML escapes &#NUM;
                                                  #  - charsetSentinel BOOL (def: false): adds ut8=✓
                                                  #  - serializeDate(DATE)->'DATE'
                                                  #  - filter('VAR', VAL)->VAL
                                                  #  - strictNullHandling BOOL:
                                                  #     - if false (def), VAR: null|'' -> "VAR="
                                                  #     - if true, VAR: '' -> "VAR=", VAR: null -> "VAR"
                                                  #  - skipNulls BOOL:
                                                  #     - if false (def), VAR: undefined -> skipped
                                                  #     - if true, VAR: undefined|null -> skipped
                                                  #  - format 'RFC3986' (def) or 'RFC1738':
                                                  #     - main difference: ' ' -> + (in RFC1738) and -> %20 (in RFC3986)
                                                  #  - allowDots, arrayFormat, indices, commaRoundTrip: see above
