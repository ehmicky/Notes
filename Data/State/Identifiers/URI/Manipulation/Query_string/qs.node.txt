
                                  ┏━━━━━━━━┓
                                  ┃   QS   ┃
                                  ┗━━━━━━━━┛

ALTERNATIVES ==>                  #  - URLSearchParams: fewer features but standard and built-in
                                  #  - qs: more features, Node.js only

VERSION ==>                       #6.13.1

                                  ┌───────────┐
                                  │   QUERY   │
                                  └───────────┘

QUERY_OBJ.VAR.VAR2 VAL <->        #Can be nested:
 'VAR[VAR2]=VAL'                  #  - max depth is OPTS.[strict]depth BOOL|NUM (def: 5)
                                  #  - OPTS.strictDepth throws, OPTS.depth silently ignores

QUERY_OBJ.VAR.VAR2 VAL <-         #Only if OPTS.allowDots true
 'VAR.VAR2=VAL'                   #Dots in VAR itself is encoded|decoded as %252E, if OPTS.encodeDotInKeys|decodeDotInKeys true

QUERY_OBJ.VAR ARR <->
 'VAR[]=VAL&VAR[]=VAL2'           #stringify() only if OPTS.arrayFormat 'brackets'

QUERY_OBJ.VAR ARR <->             #Max UINT size is OPTS.arrayLimit (def: 20): otherwise treated as an OBJ
 'VAR[UINT]=VAL&VAR[UINT2]=VAL2'  #parse() can be disabled with OPTS.parseArrays false
                                  #parse() remove undefined indexes unless OPTS.allowSparse true
                                  #stringify() only if OPTS.arrayFormat 'indices' (def)

QUERY_OBJ.VAR empty ARR <->
 'VAR[]'                          #Only if OPTS.allowEmptyArrays true

QUERY_OBJ.VAR ARR <->
 'VAR=VAL&VAR=VAL2'               #stringify() only if OPTS.arrayFormat 'repeat' or OPTS.indices false

QUERY_OBJ.VAR ARR <->             #parse() only if OPTS.comma true (def: false)
 'VAR=VAL,VAL2,...'               #  - can be combined with the ones above
                                  #stringify() only if OPTS.arrayFormat 'comma'
                                  #  - if OPTS.commaRoundTrip true (def: false), make all values ARRs,
                                  #    so that parse() + stringify() is idempotent

[ ]                               #Is and should be percent-encoded
                                  #Since [ ] is invalid in URIs

                                  ┌───────────┐
                                  │   PARSE   │
                                  └───────────┘

parse('QUERY'[, OPTS])->QUERY_OBJ #
OPTS.parameterLimit               #Max NUM of variables
OPTS.decoder                      #FUNC(...) (def: decodeURIComponent). Custom escaping
OPTS.charset                      #'utf-8' (def) or 'iso-8859-1' (for old IE)
                                  #Instead of the one specified in HTTP headers
OPTS.charsetSentinel              #BOOL (def: false). If ut8=✓ present, guess OPTS.charset from ✓ encoding
OPTS.interpretNumericEntities     #BOOL (def: false). Decode HTML escapes &#NUM;
OPTS.strictNullHandling           #See below
OPTS.ignoreQueryPrefix            #BOOL (def: false). Ignore leading ?
OPTS.plainObjects                 #BOOL (def: false). Make QUERY_OBJ not inherit from OBJ
OPTS.duplicates                   #STR. When same VAR multiple times:
                                  #  - 'combine' (def): turn into ARR
                                  #  - 'first|last': only use first|last VAL
OPTS.depth|allowDots|parseArrays
 |allowSparse|allowEmptyArrays
 |comma                           #See above
OPTS.allowPrototypes              #BOOL. If false (def), do not allow Object.prototype.VAR, e.g. 'hasOwnProperty'

                                  ┌───────────────┐
                                  │   STRINGIFY   │
                                  └───────────────┘

stringify(QUERY_OBJ[, OPTS])
 ->'QUERY'                        #
OPTS.delimiter                    #STR|REGEXP (def: "&")
OPTS.encode                       #BOOL (def: true). If false, do not escape VARs|VALs
OPTS.encodeValuesOnly             #BOOL (def: true). If false, do not escape VARs
OPTS.encoder                      #FUNC(...) (def: encodeURIComponent). Custom escaping
OPTS.charset                      #'utf-8' (def) or 'iso-8859-1'
                                  #If 'iso-8859-1', also encode HTML escapes &#NUM;
OPTS.charsetSentinel              #BOOL (def: false). Adds ut8=✓
OPTS.serializeDate                #FUNC(DATE)->'DATE'
OPTS.addQueryPrefix               #BOOL (def: false). Add leading ?
OPTS.filter                       #FUNC('VAR', VAL)->VAL
OPTS.strictNullHandling           #BOOL. If:
                                  #  - false (def), VAR: null|'' -> "VAR="
                                  #  - true, VAR: '' -> "VAR=", VAR: null -> "VAR"
OPTS.skipNulls                    #BOOL. If:
                                  #  - false (def), VAR: undefined -> skipped
                                  #  - true, VAR: undefined|null -> skipped
OPTS.format                       #'RFC3986' (def) or 'RFC1738':
                                  #Main difference: ' ' -> + (in RFC1738) and -> %20 (in RFC3986)
OPTS.allowDots|arrayFormat
 |allowEmptyArrays|indices
 |commaRoundTrip                  #See above
