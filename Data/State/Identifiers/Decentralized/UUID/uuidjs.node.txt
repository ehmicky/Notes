
          
   UUIDJS  
          



ALTERNATIVES ==>              #  - crypto.randomUUID() (preferred for v4): v4 only
                              #  - uuidjss: v1|4|3|5
                              #     - uses crypto.randomUUID() for v4 if available

VERSION ==>                   #8.3.2
                              #Node/browser

BUM                           #BUFFER in Node.js, NUM_ARR in browsers.

v1([OBJ[, BNUM[, NUM2]]])     #Generates UUID v1 (time-based)
                              #OBJ:
                              #  - node 6_NUM_ARR: fifth part "Node" (def: random)
                              #  - clockseq NUM (0-0x3fff): fourth part "ClockSeq" (def: internal)
                              #  - msecs NUM|DATE (def: now)
                              #  - nsecs NUM (0-9999) (def: internal counter, not now)
                              #  - random 16_NUM_ARR (def: auto)
                              #  - or rng FUNC()->16_NUM_ARR. Def depends on platform:
                              #     - node.js: uses UUID.nodeRNG, i.e. CRYPTO.randomBytes()
                              #     - browsers: uses UUID.whatwgRNG, i.e. crypto.getRandomValues()
                              #        - errors if not supported
                              #Returns either:
                              #  - STR
                              #  - if specified, BNUM, written on it starting at position NUM2

v4([OBJ[, BNUM[, NUM2]]])     #Similar for UUIDv4 (hardware randomness, 122 bits of randomness)
                              #OBJ:
                              #  - random|rng: like v1

v3|v5(STR|NUM_ARR,            #Similar for UUIDv3|v5 (name-based MD5|SHA1)
 STR2[|NUM_ARR][, BNUM        #STR is name.
 [, NUM2]])                   #STR2 or NUM_ARR (16 bytes) is namespace UUID, which can also use UUID.v3|v5.DNS|URL

nil                           #'00000000-0000-0000-0000-000000000000'

validate(VAL)->BOOL           #Is a UUID
version('UUID')->1-5          #Get UUID version

parse(STR)->UINT8ARR          #
stringify(UINT8ARR)->STR      #
