
        
   ULID  
        



VERSION ==>                       #Part of Deno
                                  #Browser compatible

std/ulid/mod.ts                   #

ULID ==>                          #Unique ID ("Universally Unique Lexicographically Sortable Identifier")

FORMAT ==>                        #base32 of concatenation of:
                                  #  - DATE: 10 chars, in ms
                                  #     - first char has only 2 bits, i.e. total 48 bits, not 50
                                  #  - RANDOM: 16 chars
                                  #Case-insensitive

MONOTONIC ==>                     #Same except keep track of last DATE|RANDOM. If DATE:
                                  #  - < last DATE: use last DATE, i.e. only allow >=
                                  #  - == last DATE: increment last RANDOM by 1 bit (instead of generating new one)
                                  #  - > last DATE: generate new RANDOM

COMPARISON WITH UUIDv4 ==>        #Bits: 128 vs 128
                                  #Chars: 26 (base32) vs 32 (base16)
                                  #  - although UUID could technically be encoded as hex32 too
                                  #50% collision: 1.3e12 IDs (normal) within 1ms, vs 2.7e17 IDs forever
                                  #  - if monotonic: no collision until 1.2e24 IDs in 1ms, within same process
                                  #Includes time information
                                  #  - sortable by time

ulid([DATE_NUM])->'ID'            #Def DATE_NUM: now
monotonicUlid([DATE_NUM])->'ID'   #

decodeTime('ID')->DATE_NUM        #

