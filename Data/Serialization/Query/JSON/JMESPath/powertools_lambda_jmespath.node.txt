
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POWERTOOLS_LAMBDA_JMESPATH   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #See AWS Lambda docs
                                  #Package '@aws-lambda-powertools/jmespath'

'QUERY'                           #In JMESPath (see its doc)

SERVICE-SPECIFIC QUERY ==>        #Multiple AWS SERVICE-specific QUERYs are exported
                                  #Documented in their respective docs

search(VAL, 'QUERY'[, OPTS])->VAL2#Performs JMESPath
                                  #'QUERY' parsing is memoized
                                  #  - cache max size 128
                                  #  - randomly purged when reaching max size

extractDataFromEnvelope(...)      #Same except, if no OPTS specified, OPTS.customFunctions defaults to new PowertoolsFunctions()
                                  #Imported from @aws-lambda-powertools/jmespath/envelopes

OPTS.customFunctions              #CUSTOM_FUNCS. Add custom FUNCs to JMESPath

new PowertoolsFunctions()         #CUSTOM_FUNCS for following FUNCs
                                  #Imported from @aws-lambda-powertools/jmespath/functions
powertools_json('JSON')->VAL      #JSON.parse()
powertools_base64('BASE64')->VAL  #Base64 decode
powertools_base64_gzip
 ('BASE64_GZIPPED')->VAL          #Base64 decode then gzip decompress

class CLASS
extends [Powertools]Functions {
  @Functions.signature(SPEC)
  public funcFUNC(...)->VAL

  ...                             #CUSTOM_FUNCS
}                                 #FUNC name must be camelCase, which is converted to snake_case
SPEC.argumentsSpecs               #['TYPE',...]_ARR of ARGs
                                  #['TYPE',...] is each possible TYPE of each ARG
                                  #'TYPE' can be: 'any', 'string', 'number', 'object', 'array[-TYPE]', 'expression'
SPEC.variadic                     #BOOL (def: false)
