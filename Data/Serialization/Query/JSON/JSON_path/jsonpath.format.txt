
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   JSONPATH   ┃
                                  ┗━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See JMESPath doc

VERSION ==>                       #Only one, from a 2007 blog article
                                  #Is a query language for JSON, inspired from JavaScript

                                  ┌───────────┐
                                  │   CHAIN   │
                                  └───────────┘

PATH                              #JSON path
FILTER                            #Part of JSON path, described below

$                                 #Root, must be first

\                                 #Escapes . \ [ * ? @

                                  ┌────────────────┐
                                  │   EXPRESSION   │
                                  └────────────────┘

PATH['VAR']                       #OBJ.VAR. Single quotes only
                                  #VAR follows JSON, e.g. can use \uXXXX or inline Unicode
PATH[NUM]                         #ARR[NUM]
PATH[*]                           #OBJ|ARR.*
PATH.VAR
PATH.NUM
PATH.*                            #Same as PATH['VAR'|NUM|*]

PATH..FILTER
PATH..[FILTER]                    #OBJ|ARR.**.FILTER. Includes each descendant, not only the furthest ones.

PATH[FILTER,...]                  #Or|union. FILTER can be 'VAR', NUM or [...:...:...]
                                  #No duplicates
PATH[[NUM]:[NUM2][:STEP]]         #ARR from NUM to NUM2 (excluded) (def: end)
                                  #NUM[2] can be negative for "from end"
                                  #STEP can be negative

PATH[?(EXPR)]                     #Like PATH[*] but filters by BOOL_EXPR
                                  #Any @ is replaced by each item
                                  #Can be on OBJ|ARR

PATH[(EXPR)]                      #Like PATH[...] but using a dynamic value
                                  #Any @ is replaced by PATH's value
                                  #EXPR must evaluate to a valid JSON path's filter:
                                  #  - anything that can go in [...]
                                  #     - i.e. 'VAR', NUM, *, ...,..., ...:...:..., (EXPR), ?(EXPR)
                                  #  - all must be STR, except for NUM
                                  #     - 'VAR' must have quotes escaped

EXPR                              #Any expression in the library programming language
                                  #Only one statement
