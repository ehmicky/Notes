
            
   YAMLLINT  
            



VERSION ==>                       #1.27.1
                                  #Goal:
                                  #  - YAML formatting rules linting
                                  #  - also include check for duplicate keys, and no ---/... enforcement
                                  #  - for YAML syntax validation, should try loading with a parser instead

CONFIGURATION ==>                 #Can be:
                                  #  - ENVVAR YAMLLINT_CONFIG_FILE
                                  #  - --config-file CONF_FILE
                                  #  - --config-data CONF_NAME|"YAML"
                                  #  - ./.yamllint[.y[a]ml]
                                  #  - ~/.config/yamllint/config
                                  #CONF is YAML file:
                                  #  - extends CONF_NAME
                                  #  - rules.RULE VAL:
                                  #     - "disable|enable"
                                  #     - RULE_OPTS (implies "enable"):
                                  #        - level "warning" or "error" (def)
                                  #        - any rule-dependent options
                                  #CONF_NAME:
                                  #  - "default": the default values documented here
                                  #  - "relaxed": see online doc
CONF[.rules.RULE].ignore          #Newline-separated 'GLOB'... with similar syntax as .gitignore
CONF.yaml-files                   #'GLOB'_ARR of whitelisted files (def: ['*.yaml', '*.yml'])

yamllint YAMLFILE|DIR...          #DIR is DIR/**/*.y[a]ml
                                  #Prints on linting problems
                                  #YAMLFILE can be '-' (stdin)
--format STR                      #Output format between:
                                  #  - auto (def): colored or standard
                                  #  - colored: human-friendly colored
                                  #  - standard: human-friendly non-colored
                                  #  - parsable: FILE:LINE:COL: [error|warning] MESSAGE (RULE)
                                  #  - github (def when ENVVAR GITHUB_ACTIONS|GITHUB_WORKFLOW):
                                  #     - GitHub annotation
                                  #     - ::[error|warning] file=FILE,line=LINE,col=COL::[RULE] MESSAGE
--strict                          #Exit code is:
                                  #  (not --strict)
                                  #  - on success|warnings: 0
                                  #  - on errors: 1
                                  #  (--strict)
                                  #  - on success: 0
                                  #  - on errors: 1
                                  #  - on warnings: 2
--no-warnings                     #Ignore warnings

CONF.locale                       #'LANG' (def: 'C.UTF-8')
                                  #Used by key-ordering rule

# yamllint disable-file           #Disable yamllint on whole file
# yamllint disable-line
 [rule:RULE ...]                  #Disable yamllint on next line (if full-line comment) or current line (if end-of-line)
# yamllint disable|enable
 [rule:RULE ...]                  #Same for parts of file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RULES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


braces                            #Spaces after { or before }
                                  #OPTS:
                                  #  - min|max-spaces-inside[-empty] NUM (-1 to disable) (def: 0 for non-empty, -1 for empty)
                                  #  - forbid: no flow mappings
                                  #     - BOOL (def: false)
                                  #     - 'non-empty': except for empty OBJ
                                  #'empty' for is for empty {}
brackets                          #Same for [], same OPTS
hyphens                           #Spaces after -
                                  #OPTS.max-spaces-after NUM (def: 1)
colons                            #Spaces around :
                                  #OPTS.max-spaces-before|after NUM (-1 to disable) (def: 0|1)
commas                            #Spaces around ,
                                  #OPTS.min|max-spaces-before|after NUM (-1 to disable, for max) (def: 0 before, 1 after)
comments                          #Spaces in comments
                                  #OPTS:
                                  #  - require-starting-space BOOL (def: true): space after #
                                  #  - ignore-shabang BOOL (def: true): exception for require-starting-space for shabangs
                                  #  - min-spaces-from-content NUM (def: 2): spaces before #, if end-of-line comment
                                  #Def: warning
trailing-spaces                   #No trailing spaces at end of line
                                  #Def: enable

indentation                       #OPTS:
                                  #  - spaces NUM or "consistent" (def): indentation width
                                  #  - check-multi-line-strings BOOL (def: false): whether to also lint multiline STR indent
                                  #  - indent-sequences VAL:
                                  #     - ARR inside OBJ indentation, since it is optional
                                  #     - can be:
                                  #        - BOOL (def: true): always|never
                                  #        - "consistent": any, as long as consistent
                                  #        - "whatever": any
comments-indentation              #Comments must be indented like code
                                  #Def: warning

empty-lines                       #Max number of consecutive blank lines
                                  #OPTS:
                                  #  - max NUM (def: 2)
                                  #  - max-start|end NUM (def: 0): same at start|end of file
new-line-at-end-of-file           #\n at end of file
                                  #Def: enable
new-lines                         #Among OPTS.type 'unix' (LF) (def) or 'dos' (CRLF) or 'platform' (guessed)

line-length                       #Line width
                                  #OPTS:
                                  #  - max NUM (def: 80)
                                  #  - allow-non-breakable-words BOOL (def: true): do not enforce rule for long words
                                  #  - allow-non-breakable-inline-mappings BOOL (def: false):
                                  #    do not enforce rule for long words, including in OBJ

document-start|end                #Requires|forbids --- or ...
                                  #OPTS.present BOOL
                                  #Def: forbids ..., warns on no ---

quoted-strings                    #Forces quoting on any STR
                                  #OPTS:
                                  #  - quote-type 'single', 'double' or 'any' (def)
                                  #  - required true (def), false or 'only-when-needed'
                                  #  - extra-required 'REGEXP'_ARR: force quoting if match those. OPTS.required must not be true
                                  #  - extra-allow 'REGEXP'_ARR: allow no quoting if match those.
truthy                            #Forces quoting or !!str for yes|no|on|off|y|n or non-lowercase TRUE|FALSE
                                  #Def: warning
                                  #OPTS:
                                  #  - allowed-values ARR (def: ['true', 'false'])
                                  #  - check-keys BOOL (def: true): checks OBJ keys
empty-values                      #Prevents empty values (i.e. implicit null)
                                  #OPTS:
                                  #  - forbid-in-block-mappings BOOL (def: false): in "block style"
                                  #  - forbid-in-flow-mappings BOOL (def: false): in "flow style"
                                  #Def: disable
octal-values                      #Prevents OPTS:
                                  #  - forbid-implicit-octal BOOL (def: false): 0...
                                  #  - forbid-explicit-octal BOOL (def: false): 0o...
                                  #Def: disable
float-values                      #Prevent OPTS:
                                  #  - forbid-inf (def: false): Infinity
                                  #  - forbid-nan (def: false): NaN
                                  #  - forbid-scientific-notation (def: false): ...e...
                                  #  - require-numeral-before-decimal (def: false): .NUM instead of 0.NUM
key-duplicates                    #Prevents duplicated keys
                                  #Def: enable

key-ordering                      #Forces sorting (Unicode point-wise) of OBJ keys
                                  #Def: disable
