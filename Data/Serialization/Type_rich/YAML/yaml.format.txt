
                                  ┏━━━━━━━━━━┓
                                  ┃   YAML   ┃
                                  ┗━━━━━━━━━━┛

ALTERNATIVES ==>                  #See serialization formats summary

VERSION ==>                       #1.2
                                  #Extension: .yml, .yaml

PREVIOUS VERSIONS ==>             #1.1 backward incompatible differences:
                                  #  - null must be 'null' (not ~ nor nothing)
                                  #  - no NaN Inf 0... 0x... 0b...
                                  #  - no !<TAG> %TAG nor ! (but !!TYPE allowed)
                                  #  - no schemas (always use the most advanced one)
                                  #  - not 100% JSON compatible:
                                  #     - in flow style:
                                  #        - VAR max length 1024
                                  #        - must use space after colon or comma
                                  #     - no \/ (escaping of /)
                                  #     - no UTF-32

SUMMARY ==>                       #Serialization format, concurrent to JSON:
                                  #  - JSON superset
                                  #  - more human-friendly, indentation-based, comments
                                  #  - more featureful, i.e. also more complex and slower (around 4-6 times)
                                  #  - can encode many arbitrary|native types (including as object keys):
                                  #     - string, boolean, int, float, null, object, array
                                  #     - date, binary
                                  #     - pairs, sets, unordered maps
                                  #     - (with js-yaml) undefined, function, regex, custom types
                                  #  - can use references, including circular
                                  #  - document-streaming-friendly
                                  #  - conceptually close to Python, not to JavaScript

NOTATION ==>                    +##js-yaml-specific
                                -##Not supported by js-yaml
                                |##Not allowed in JSON:
                                |##  - for all, could write custom JSON.stringify() to serialize to STR though

                                  ┌──────────────────┐
                                  │   BASIC SYNTAX   │
                                  └──────────────────┘

ENCODING ==>                      #UTF-8 (preferred), UTF-16 or UTF-32.

MIME TYPE ==>                     #application/yaml, application/x-yaml, text/x-yaml, text/yaml

WHITESPACES ==>                   #Newline: CR or LF or CRLF
                                  #Whitespace: space or tab
                                  #Blank lines are ignored (except inside STR)

CASE ==>                          #Case sensitive

NESTED LEVELS ==>                 #Is newline + indentation:
                                  #  - no tabs, only spaces
                                  #  - any number of spaces, even if not consistent
                                  #Must be done before any new ARR|OBJ (just like [ or { in JSON), with exceptions:
                                  #  - newline optional on new OBJ inside ARR:
                                  #     - VAR: VAL      same as    -
                                  #       ...                        VAR: VAL
                                  #                                  ...
                                  #  - indentation optional on new ARR inside OBJ:
                                  #      VAR:           same as    VAR:
                                  #      - VAL                       - VAL
                                  #      - ...                       - ...
                                  #  - in precedent exceptions, VAR: VAL can be ? VAR : VAL too

#COMMENT                          #On its own line, or at end of line

                                  ┌───────────┐
                                  │   TYPES   │
                                  └───────────┘

TYPES ==>                         #Spec divides types into three "kinds":
                                  #  - mappings (OBJ-like): !!map !!set
                                  #  - sequences (ARR-like): !!omap !!pairs !!seq
                                  #  - scalar: all others
                                  #Can create custom TYPEs (how to is implementation-specific):
                                  #  - TYPE must be [[:alnum:]-]

SCHEMAS ==>                       #Set of supported TYPEs, among:
                                  #  - failsafe (minimalist): !!map !!seq !!str
                                  #  - JSON: also !!null !!bool !!int !!float, but only in their JSON form
                                  #  - core: also allows alternative forms of null|BOOL|INT|FLOAT
                                  #  - implementation-specific new ones, e.g.:
                                  #     - with all spec types (!!set, !!binary, etc.)
                                  #     - with language-specific types
                                  #Has impact on performance, see e.g. js-yaml documentation


!<URI> VAR|VAL                    #Explicitely transtypes VAR|VAL
                                  #URI uses tag: URI scheme, usually tag:DOMAIN,YEAR:TYPE

!!TYPE                            #Same as !<tag:yaml.org,2002:TYPE>, i.e. for core types, described in this doc

!TYPE                             #Same as !<tag: local:TYPE>, i.e. for custom types

!                                 #Same as !!map or !!seq or !!str

%TAG !VAL! VAL2                   #Make !VAL![...] being same as !<VAL2[...]>


TRANSTYPING ORDER ==>             #Implicit transtyping is performed
                                  #The following do not require explicit transtyping, because unambiguous:
                                  #  - contains/starts with a specific character: !!str (quoted or unquoted with symbol),
                                  #    !!map, !!seq, aliases, exotic
                                  #  - specific sets of values: !!null, !!bool, !!int, !!float, !!date, !!merge, !!value
                                  #!!str (unquoted with no symbol):
                                  #  - needs transtyping if is any valid value for null|bool|int|float|date
                                  #     - best is to just quote
                                  #  - cannot:
                                  #     - start with " ' { [ @ ` & * -+space ?+space
                                  #     - contain :+space
                                  #Always need transtyping:
                                  #  - or interpreted as !!map: !!set, !!omap, !!pairs, !!yaml
                                  #  - or interpreted as !!str: !!binary, !!js/undefined, !!js/regexp, !!js/function

                                  ┌────────────┐
                                  │   OBJECT   │
                                  └────────────┘

VAR: VAL                          #Is OBJ
...                               #TYPE !!map
                                  #Mandatory space after colon, unless VAR quoted
                                  #VAR behaves like any STR value:
                                  #  - can be quoted or unquoted
                                  #  - but has to use ? VAR alternate syntax for multiline

? VAR                             #Is alternate syntax for OBJ
: VAL                             #  - ? must be followed by space
...                               #  - : VAL must be on next line, same indentation
                                  #  - : VAL is optional (def: null)
                                  #Allows VAR to be any VAL, any type
                                +##(js-yaml) VAR is always parsed as STR

{VAR: VAL,...}                    #OBJ alternative syntax ("flow style") as opposed to normal syntax ("block style"):
                                  #  - difference: the indentation|whitespaces rules for follow JSON not YAML
                                  #  - exceptions:
                                  #     - can omit {} if only one VAR
                                  #     - can use trailing commas
                                  #  - can embed flow style inside block style, but not inverse

                                  ┌───────────┐
                                  │   ARRAY   │
                                  └───────────┘

- VAL                             #Is ARR
...                               #TYPE !!seq

[VAL, ...]                        #Same as {VAR: VAL,...} (see above)

                                  ┌─────────┐
                                  │   SET   │
                                  └─────────┘

? VAR                             #Is a set, i.e. like OBJ (unordered, no duplicate keys) with no values
...                               #TYPE !!set
                                  #Requires explicit transtyping
                                +##(js-yaml) parsed as OBJ with null values

                                  ┌─────────────────┐
                                  │   ORDERED MAP   │
                                  └─────────────────┘

- VAR: VAL                        #Is an ordered map, i.e. ordered like ARR but has key-value mapping like OBJ.
...                               #No duplicate keys
                                  #TYPE !!omap
                                  #Requires explicit transtyping
                                +##(js-yaml) parsed as ARR containing single-keyed OBJ

                                  ┌───────────┐
                                  │   PAIRS   │
                                  └───────────┘

PAIRS ==>                         #Same as ordered map, except:
                                  #  - allow duplicate keys
                                  #  - TYPE !!pairs
                                  #Requires explicit transtyping
                                +##(js-yaml) parsed as ARR containing [KEY, VAL] children

                                  ┌──────────┐
                                  │   NULL   │
                                  └──────────┘

null
~                                 #Is null (case-insensitive)
(nothing)                         #TYPE !!null

                                  ┌───────────────┐
                                  │   UNDEFINED   │
                                  └───────────────┘

(any scalar VAL)               +|##Is undefined
                               +|##TYPE !!js/undefined, must transtype
                               +|##Requires explicit transtyping

                                  ┌─────────────┐
                                  │   BOOLEAN   │
                                  └─────────────┘

true|false                        #Is BOOL (case-insensitive)
                                  #TYPE !!BOOL
on|off                          -##
yes|no                          -##
y|n                             -##Other syntaxes (deprecated), case-insensitive

                                  ┌─────────────┐
                                  │   INTEGER   │
                                  └─────────────┘

INT                               #Integer
                                  #TYPE !!int
                                  #Can contain _ (with no space after), which are ignored (e.g. used for thousands separator)
                                  #Precision is implementation-specific, but at least four bytes and signed
0b...                             #Binary
0...                              #Octal
0x...
0X...                             #Hex
...:...                           #Base 60
                                  #Base delimiter can be used several times


                                  ┌───────────┐
                                  │   FLOAT   │
                                  └───────────┘

FLOAT                             #Float
                                  #TYPE !!float
                                  #Can use exponent
                                  #Can use base 60 and _ like INT
                                  #Precision is implementation-specific, but at least single floats
.inf
-.inf                           |##
nan                             |##Case-insensitive

                                  ┌────────────┐
                                  │   STRING   │
                                  └────────────┘

"..."                             #String (TYPE !!str), until next unescaped "
'...'                             #String, until next unescaped '
...                               #String ("unquoted"), until next non-indented line
|
  ...
|+
  ...
|-
  ...
>
  ...
>+                                #Other forms of unquoted strings ("literal" with |, "folded" with >)
  ...                             #Symbol itself:
>-                                #  - is ignored
  ...                             #  - must be the only chars in first line of STR value, except whitespaces (error otherwise)

|NUM[+|-]                         #Like |[+|-] or >[+|-] but defines how many spaces is the indentation, i.e. to know
>NUM[+|-]                         #what is the "additional indentation"
                                  #Def: guessed from initial indented line

ESCAPING/NEWLINES/WHITESPACES ==> #The following rules are observed, by category:
                                  #
                                  #                    +----------------------------------+----------------------------+
                                  #                    | Categories                       | "  '  N  |  |+ |- >  >+ >- |
                                  # +------------------+----------------------------------+----------------------------+
                                  # | Transyping       | Restrictions (see above)         |       x                    |
                                  # +------------------+----------------------------------+----------------------------+
                                  # | Escaping         | Backslash sequences              | x                          |
                                  # |                  | Only escape ' as ''              |    x                       |
                                  # |                  | No need                          |       x  x  x  x  x  x  x  |
                                  # +------------------+----------------------------------+----------------------------+
                                  # | Newlines         | Always kept                      |          x  x  x           |
                                  # |                  | Replaced with single space       | x  x  x           x  x  x  |
                                  # |                  | Ignored if force-escaped         | x  x                       |
                                  # |                  | Kept before and after line       |                            |
                                  # |                  |  with additional identation      |                   x  x  x  |
                                  # |                  | Appended to end                  |          x  x     x  x     |
                                  # +------------------+----------------------------------+----------------------------+
                                  # | Whitespaces-only | Replaced with newline            | x  x  x  x  x  x  x  x  x  |
                                  # |  lines           | Ignored at end                   |       x  x     x  x     x  |
                                  # |                  | Ignored if force-escaped         | x  x                       |
                                  # +------------------+----------------------------------+----------------------------+
                                  # | Whitespaces      | Leading ones on first line       |       x                    |
                                  # |  ignored         | Leading ones on other lines      |                            |
                                  # |                  |  - unless force-escaped          | x  x  x                    |
                                  # |                  |  - except additional indentation |          x  x  x  x  x  x  |
                                  # |                  | Trailing ones                    |       x                    |
                                  # +------------------+----------------------------------+----------------------------+
                                  #
                                  #Notes:
                                  #  - N is unquoted with no symbol
                                  #  - "force-escaped" means also escaped following blank lines or indentation

BACKSLASH SEQUENCES ==>           #  - \" \\ required
                                  #  - \0 \a \b \t \n \v \f \r \e
                                  #  - \xNN \uNNNN \UNNNNNNNN
                                  #  - \/ (same as /)
                                  #  - \N (U-0085 NEXT_LINE)
                                  #  - \_ (U-00A0 NO_BREAK_SPACE)
                                  #  - \L (U-2028 LINE_SEPARATOR)
                                  #  - \P (U-2029 PARAGRAPH_SEPARATOR)
                                  #  - only way to include Unicode chars that are non-printable, i.e. control chars
                                  #    (except \t \n \r), DEL and surrogate block (U-D800 to U-DFFF, U-FFFE, U-FFFF)

                                  ┌──────────┐
                                  │   DATE   │
                                  └──────────┘

YYYY-MM-DD[THH:MM:SS[TZ]]       |##DATE[TIME]
                                |##TYPE !!timestamp
                                |##Can add space instead of T, or before timezone
                               +|##(js-yaml) parsed as DATE

                                  ┌────────────┐
                                  │   BINARY   │
                                  └────────────┘

BASE64_STR                        #Binary string
                                  #TYPE !!binary
                                  #Uses standard base64 (RFC 4648)
                                  #Requires explicit transtyping
                                +##(js-yaml) parsed as BUFFER

                                  ┌────────────┐
                                  │   REGEXP   │
                                  └────────────┘

REGEXP                         +|##Is regexp
/REGEXP/FLAGS                  +|##TYPE !!js/regexp
                               +|##Does not support ES6 flags
                               +|##Requires explicit transtyping

                                  ┌──────────────┐
                                  │   FUNCTION   │
                                  └──────────────┘

function [FUNC](...) {...}     +|##Is function
... => ...                     +|##TYPE js/function
                               +|##Requires explicit transtyping

                                  ┌────────────┐
                                  │   EXOTIC   │
                                  └────────────┘

'!': '!...'                     -##Standardized way to serialize !... or &VAL or *VAL
'&': VAL                        -##Is just serialization i.e., as is, just like an OBJ
'*': VAL                        -##TYPE !!yaml
                                -##Requires explicit transtyping

@...
`...                              #Both are reserved, so must be escaped|quoted

                                  ┌─────────────┐
                                  │   ALIASES   │
                                  └─────────────┘

&REF VAL                          #Like VAL, but also assigns it to REF ("alias")
                                  #If VAL:
                                  #  - OBJ|ARR: must be on line before
                                  #  - multiline STR: must be first on the first line
                                  #Can be:
                                |##  - circular
                                  #  - defined several times (last one wins)
                                -##Has to be used by a *REF
&REF VAR                        -##Same for VAR

*REF                              #Reuse REF ("anchor"), by reference (when language permits it)
                                  #Must be after &REF
                                -##Can be used on VAR too

                                  ┌────────────┐
                                  │   MERGES   │
                                  └────────────┘

<<: OBJ[_ARR]                     #Merge OBJ with siblings
                                  #Has less priority than (either previous|next) siblings
                                  #If OBJ_ARR, applied in turns, i.e. first ones have priority
                                  #Often used with *REF
                                -##<< actually has special TYPE !!merge

=: VAL                          -##Same as VAL
                                -##= actually has TYPE !!value

                                  ┌─────────────┐
                                  │   STREAMS   │
                                  └─────────────┘

---                               #First line of a document, optional if only one document in the file.
                                  #Also allows to separate several documents in one file, e.g. for streaming
...                               #Last line of a document, always optional

BETWEEN STREAMS ==>               #There can be directives or comments between ... (or start of file) and --- (or end of file)

                                  ┌────────────────┐
                                  │   DIRECTIVES   │
                                  └────────────────┘

%DIRECTIVE VAL                    #Directices to parser
                                  #See above about where to put them
                                  #Can be:
                                  #  - %YAML VERSION
                                  #  - %TAG: see above
                                  #Cannot be custom directives
