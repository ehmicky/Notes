
                                  ┏━━━━━━━━━━━━━━━━━┓
                                  ┃   GRAY-MATTER   ┃
                                  ┗━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - gray-matter: supports many formats, fastest
                                  #  - jxson front-matter: slow, simple
                                  #  - markdown-to-json: very specific features
                                  #Prefer gray-matter

VERSION ==>                       #2.1.1

                                  ┌─────────────┐
                                  │   CONCEPT   │
                                  └─────────────┘

FRONT MATTER ==>                  #Is the leading block of a file:
                                  #  - optional
                                  #  - starting|ending with --- or OPTS.delims STR|['START','END']
                                  #  - processed by parser:
                                  #     - after whitespace trimming
                                  #     - so that application uses file content as STR, and front-matter data usually as OBJ
---
a: 1
b: 2
---                               #Example with YAML

                                  ┌──────────────────────────┐
                                  │   PARSING/SERIALIAZING   │
                                  └──────────────────────────┘

MATTER(STR[, OPTS])->OBJ          #Processes front-matter, returning OBJ:
                                  #  - orig STR: same as input
                                  #  - data OBJ: parsed front matter
                                  #  - content STR: rest of file

PARSER ==>                        #Specified by (by priority order):
                                  #  - starting file with ---LANG
                                  #  - specifying OPTS.lang 'LANG'
                                  #  - def: "yaml"
                                  #Can be:
                                  #  - yaml:
                                  #     - YAML.load(STR, OPTS)
                                  #     - or (if OPTS.safeLoad true) YAML.safeLoad(OPTS)
                                  #  - json: JSON.parse(STR)
                                  #  - js|javascript:
                                  #     - eval(STR), e.g. JavaScript object, but could be anything
                                  #     - or (if OPTS.wrapped true) eval('(function() { return {STR}})')
                                  #  - coffee: using COFFEE.eval(STR)
                                  #  - cson: using COFFEE.eval(STR)
                                  #  - toml: TOML.parse(STR)
                                  #If exception thrown by parser:
                                  #  - if OPTS.strict true, throws SyntaxError with same ERROR.message
                                  #  - otherwise returns {}
                                  #OPTS.eval true required by js|coffee|cson:
                                  #  - if false (def), throws error if OPTS.strict true, console.error() otherwise
                                  #Can also be custom one, with OPTS.parser(STR)->OBJ

MATTER.read('FILE'[, OPTS])->OBJ  #Like FS.readFileSync() + MATTER(...)
                                  #Return value also has OBJ.path 'FILE'


MATTER.stringify(STR, OBJ[, OPTS])#STR is content, OBJ front-matter data, STR2 final concatenation
 ->STR2                           #Serializes front-matter with YAML.safeDump(OPTS)
                                  #OPTS.delims: like above


MATTER.test(STR[, OPTS])->BOOL    #Check if has front-matter
                                  #OPTS.delims: like above
