
                             
   MUSTACHE_HOGAN_HANDLEBARS  
                             



WHY TEMPLATES ==>         #  - Dynamic content:
                          #      - Avoid doing too complex DOM manipulation to insert dynamic data inside the HTML partial to
                          #        include, instead separate view (templates) and data.
                          #      - Angular templates are doing the same but easier and with more separation model/view.
                          #  - Static content:
                          #      - when updated frequently -> can render on the server (Gulp task)

ALTERNATIVES ==>          #  - Mustache: base for Handlebars and Hogan
                          #  - Handlebars: more functionalities. Fastest of all when precompiled but quite slow when not
                          #    precompiled. Should always precompile anyway when used runtime.
                          #  - Hogan: Fastest of all when non precompiled, but same functionalities as Mustache.
                          #    Not documented yet (because I don't think will be useful), but fast to document.

VERSION ==>               #0.8.1
                          #Is a Node module MUSTACHE or a web browser script Mustache

HANDLEBARS               ##Syntax is almost a superset of Mustache, written here with ##
                         ##Is a Node module or a web browser script (version 2.0.0)

MUSTACHE.render(STR, OBJ, #STR is JavaScript code. Output is STR2, assigned e.g. with .htmlContent
[, OBJ2])                 #Can reside either in a separate loaded file *.mustache, or inline (e.g. <script> content, often
                          #with type "text/x-mustache|handlebars-template")
                          #If MUSTACHE.parse(STR) was performed before (doesn't change STR but cache result),
                          #MUSTACHE.render(STR, ...) will be faster.
                          #See following for templating syntax

grunt-mustache-render     #Grunt plugin (version 1.2.4) with task "mustach_render" doing MUSTACHE.render():
                          #  - TARGET (must use files: [ ... ]):
                          #     - data FILE: can be .json or .yaml|yml
                          #     - template FILE: *.mustache file
                          #     - dest FILE
                          #  - options:
                          #     - directory DIR: fills OBJ2 of MUSTACHE.render() with DIR/* (partials)
                          #     - prefix STR: beginning of partials filenames, taken away from VAR name, and use to include
                          #       according to beginning of filename (e.g. "part_")
                          #     - extension STR: same for extension (déf: ".mustache")
                          #     - clear_cache BOOL (déf: false): if true, clear the cache set up for partials lookup.
                          #       Cache is cleaned between Grunt invocation, but not between tasks. To use if options change
                          #       between tasks only.

grunt-mustache            #Grunt plugin (version 0.1.7) with task "mustache" concatenating *.mustache data objects: together
                          #in a single .json:
                          #  - TARGET:
                          #     - src DIR: take all DIR/*.mustache templates
                          #     - dest FILE

MU2.compileAndRender(FILE,#Same as MUSTACHE.render() but with a FILE : doesn't modify it, but returns an ISTREAM which emits
OBJ)                      #the data event several times for several chunks.
                          #Node module (version 0.5.20)
                          #Include templates OBJ2 in DIR/* using the full filename, where DIR is MU2.root (déf: $PWD)
                          #Cache result from FILE, but can clear with MU2.clearCache([FILE])

HANDLEBARS.compile(STR)  ##Similar to MUSTACHE.parse(STR), returns a RENDER_FUNC(OBJ[, OBJ2]), like MUSTACHE.render(STR,OBJ)

handlebars FILE [-f FIL2]##Compile FILE.mustache to JavaScript file FILE2, which defines
                         ##   HANDLEBARS.templates.FILE = HANDLEBARS.compile(FILE_CONTENT)
                         ##As such, can ship a 5 times smaller version of Handlebars (runtime library) by including FILE2, and
                         ##executes templates faster. Should always be done unless speed doesn't matter (e.g. a Grunt task)
-m                       ##Minify
-k FUNC                  ##Optimize by declaring BUILTIN FUNC that are being used
-n VAR                   ##Use VAR instead of HANDLEBARS.templates
-e EXTENSION             ##Removes extension from FILE name to the variable stored (déf: ".mustache")
-r PREFIX                ##Same for prefix (déf: "")
-c                       ##Uses a CommonJS wrapper
-a                       ##Uses an AMD wrapper

grunt-compile-handlebars ##Grunt plugin with task "compile-handlebars" that compiles and renders files

grunt-contrib-handlebars ##Grunt plugin with task "handlebars" that compiles files

GULP-HANDLEBARS([OBJ])   ##Gulp plugin (3.0.1) that compiles IOSTREAM
                         ##Should be piped to .pipe(GULP-DEFINE-MODULE("node")) then required() (use Browserify in browser)
                         ##OBJ:
                         ##  - handlebars MODULE (def: require("handlebars")): useful with HANDLEBARS-HELPERS

                                  ┌────────────┐
                                  │   SYNTAX   │
                                  └────────────┘

{{!COMMENT}}              #
{{!-- COMMENT --}}       ##Useful when COMMENT uses "}}"

{{{VAR|FUNC [ARGS]}}}     #FUNC([ARGS, ][FUNC_OBJ]):
                          #   - must return VAL
                          #     Mustache only: must return STR
                         ##   - ARGS can be anything except an OBJ_LIT, and can also be:
                         ##      - VAR=VAL (put in the end), filling FUNC_OBJ.hash OBJ
                         ##      - can use (FUNC [ARGS]) as a subexpression
                         ##   - FUNC_OBJ.name is FUNC_STR
                         ##   - FUNC can be defined in:
                         ##      - RENDER_FUNC() OBJ2.helpers.FUNC_STR
                          #      - RENDER_FUNC|MUSTACHE.render() OBJ (prefer above)
                         ##      - previously with HANDLEBARS.registerHelper(FUNC_STR, FUNC(...))
                         ##Can use OBJ[VAR] instead of OBJ.VAR when not valid identifier (VAR is ARR index or contains Unicode)
                         ##Must do ARR.NUM instead of ARR[NUM]
{{...}}                   #Same but escapes HTML
                         ##Also always returns as STR
                         ##FUNC() can return new HANDLEBARS.SafeString(STR) instead of STR to avoid having it HTML escaped.
                         ##If part of STR still should be HTML escaped, can do it with HANDLEBARS.Utils.escapeExpression(STR)
{{> STR}}                 #Same as {{{STR}}}, except that must come from OBJ2 in MUSTACHE.render() or from RENDER_FUNC()
                         ##OBJ2.partials OBJ
                          #It is included then parsed again.
                          #Used to implement "partials"

CONTEXT ==>               #The context in which {{...}} are evaluated:
                          #  - at top is RENDER_OBJ. Children contexts are added by {{#VAR}}...{{/VAR}} blocks.
                          #  - current context:
                          #     - can be refered with {{.}} or {{this}}
                          #     - used by {{FUNC}} as this
                          #     - if not an OBJ, {{VAR}} (except {{.}} or {{this}}) returns undefined
                         ##     - Can use {{../VAR}} to point to parent OBJ.
                          #     - In Mustache, children use parent with lower priority. In Handlebars, they are isolated.

{{#VAR[ ARGS]}} ...       #Section ... which behavior depends on VAR value:
[{{else}} ...]            #  - false|null|undefined|0|NaN :
{{/VAR}}                  #      - hides ...
                         ##      - {{#if BOOL}} ... [{{else}} ...] {{/if}} is same as {{#BOOL}} ... [{{else}} ...] {{/BOOL}}
                          #  - OBJ2:
                          #      - uses OBJ2 as ... context
                         ##      - {{#with OBJ}}...{{/with}} is same as {{#OBJ}}...{{/OBJ}}
                          #  - ARR: repeats ... ARR.length times, with each VAL as context.
                          #  - FUNC:
                         ##      - Like {{FUNC}}, except:
                         ##         - return value:
                         ##            - if no ARGS, its return value is ... context
                         ##            - if ARGS, its return value replaces the whole block
                         ##         - FUNC_OBJ has extra members:
                         ##            - data OBJ:
                         ##               - added to ... context, but must be refered with {{@VAR}} instead of {{VAR}}
                         ##                 or {{FUNC @VAR}} instead of {{FUNC VAR}}
                         ##               - So {{@VAR}} is "private": bound inside FUNC() instead of rendertime with RENDER_OBJ
                         ##               - Ex.: a {{@myindex}} variable for a {{#list ARR}}{{/list}} FUNC
                         ##               - Can override rendertime with RENDER_FUNC() OBJ2.data OBJ
                         ##            - fn FUNC(OBJ): returns HANDLEBARS.compile(...)(OBJ), after HTML escaping
                         ##              If there is {{else}} ..., ignore the else block
                         ##            - inverse FUNC(OBJ): same but only takes the {{else}} .. into account
                         ##         - result is automatically wrapped in new HANDLEBARS.SafeString() since OBJ.fn() already
                         ##           escapes.
                          #      - Mustache only: returning FUNC2(STR, FUNC3) which must return STR2, where FUNC3 is like
                          #        Mustache.render.bind(this, OBJ) and STR will be the text to render each time it is needed
                          #        in the block
                         ##Can use a ~ at beginning|end of opening|closing section tag to trim precendent|following whitespaces
                         ##{{~#VAR}}...{{~/VAR}}, {{#VAR~}}...{{/VAR}}, etc.
{{#each ARR|OBJ}} ...    ##Concatenates all {{#VAL}}...{{/VAL}} of ARR|OBJ members
[{{else}} ...]           ##Uses else block if ARR|OBJ is empty.
{{/each}}                ##Uses following {{@VAR}}:
                         ##  - {{@index}}: if ARR, current ARR index
                         ##  - {{@key}}: if OBJ, current OBJ key
                         ##  - {{@first|last}} BOOL: true when first|last iterations
{{^VAR}} ...
[{{else}} ...]            #Hide if VAR is not false|null|undefined
{{/VAR}}                 ##{{#unless BOOL}} ... [{{else}} ...] {{/unless}} is same.

{{=<% %>=}}               #Change delimiters, here to <% %>
                          #Can also change MUSTACHE.tags (déf: [ "{{", "}}" ])

                                  ┌────────────────────────┐
                                  │   EXPRESS-HANDLEBARS   │
                                  └────────────────────────┘

EXPRESS-HANDLEBARS([OBJ]) #To use like CONSOLIDATE.handlebars, but with some extra functions:
                          #  - use layouts:
                          #     - OBJ.defaultLayout LAYOUT
                          #     - can use different layouts with context variable (e.g. APP.locals) layout LAYOUT
                          #     - LAYOUT false means no layout
                          #     - look into OBJ.layoutsDir (def: views/layouts/LAYOUT.hdb):
                          #        - HTML file with {{{body}}} replaced by views/VIEW.hdb
                          #  - OBJ.cache or APPVAR "view cache" cache also precompiled files (by file path), and "view cache"
                          #    is true when NODE_ENV === "production"
                          #  - async
                          #OBJ:
                          #  - extname STR (def: ".handlebars", should be changed to ".hdb")
                          #  - handlebars MODULE (def: require("handlebars"))
                          #  - helpers OBJ
                          #  - partialsDir STR (def: "views/partials/")
                          #Version 1.1.0

                                  ┌─────────────┐
                                  │   HELPERS   │
                                  └─────────────┘

HANDLEBARS-HELPERS.           #{{[#with]...}} means it can used as block if [#with] (takes uppercase after then).
register(HANDLEBARS, {})      #{{...}} TYPE means ... returns TYPE
                              #Must install grunt, marked as peer dependency. Also package.json must exist.
                              #Version 0.5.8 (doc is bad, read from source code)
                              #Most of the results are HTML-escaped.

{{log VAL}}                   #Expand to "" but does console.log(VAL)
{{debug VAL}}                 #Expand to "========" blocks with "Context: THIS" and "Value: VAL"

{{default VAL VAL2}}          #If VAL == null, VAL2, otherwise VAL
{{#noop}}                     #Nothing, just renders block.
{{#withHash VAR=VAL ...}}     #Like {{#OBJ}} with { VAR: VAL ... }

{{#compare VAL STR
VAL2}}} BOOL                  #STR can be "==|===|!=|!==|<|>|<=|>=|typeof"
{{#is[nt] VAL VAL2}} BOOL     #
{{#lt|gt[e] NUM NUM2}} BOOL   #
{{#and|or BOOL BOOL2}} BOOL3  #
{{#contains STR STR2}} BOOL   #

{{length ARR}}                #ARR.length
{{[#with]first|last ARR}}     #ARR[0|-1]
{{[#with]after|before ARR NM}}#ARR without first|last NUM elements
{{#lengthEqual ARR NUM}} BOOL #
{{#empty|any ARR}} BOOL       #
{{#inArray ARR VAL}} BOOL     #
{{[#with]sort ARR}}           #
{{join ARR STR}}              #Returns ARR as STR2 with delimiter STR

{{replace STR STR2 STR3}}     #
{{lowercase|uppercase STR}}   #
{{capitalizeFirst|Each STR}}  #
{{sentence|titleize STR}}     #
{{dashify STR}}               #"." -> "-"
{{hyphenate STR}}             #" " -> "-"
{{plusify STR}}               #" " -> "+"
{{reverse STR}}               #
{{truncate STR NUM[ STR2]}}   #STR2 is at the end, e.g. "..."
{{center STR NUM}}            #NUM is width, filled with spaces.
{{count STR STR2}}            #How many times STR2 is in STR
{{#startsWith STR STR2}} BOOL #If STR2 starts with STR

{{stripQuerystring URL}}      #
{{encode|decodeURI STR}}      #Percent encoding
{{safeString STR}}            #HTML escape

{{formatDate DATE[_STR] STR2}}#STR2 is formatDate-js format string
{{now[ STR2]}}                #Same with now
{{timeago DATE[_STR]}}        #Retrurns "NUM years|months|days|hours|minutes|seconds ago" or "Just now"

{{add|substract|multiply|
divide NUM NUM2}}             #
{{sum NUM...}}                #
{{ceil|floor|round NUM}}      #
{{#ifNth NUM NUM2}} BOOL      #NUM2+1 % NUM == 0
{{random [INT ]INT2}}         #Min is INT (def: 1), Max is INT2-1

{{addCommas NUM}}             #Add thousands commas
{{toAbbr NUM}}                #e.g. "123456789" -> "123.457m"
{{toExponential NUM}}         #
{{toFixed NUM NUM2}}          #
{{toInt|Float NUM}}           #

{{#parseJSON JSON_STR}}       #Use parsed OBJ as {{this}}
                              #Ex. usage: {{#parseJSON JSON_STR}}{{> FILE}}{{/parseJSON}}
{{stringify JSON_PATH_STR}}   #
{{value|prop PATH_STR LFUNC}} #Returns JSON file PATH_STR properties matching LFUNC (see Lodash) as VAL_ARR or as OBJ
{{expandJSON|YAML PATH_STR}}  #Returns filenames as ARR or as YAML array, both stringified.
{{glob PATH_STR}}             #Include content of PATH (can use globbing) as is.
{{embed PATH_STR[ STR]}}      #Include content of PATH (can use globbing) as a Markdown code block ```STR\nSTR2```
                              #STR is def: based on extension (e.g. "js")
{{gist NUM_STR}}              #Include Gist in a <script src="https://gist.github.com/NUM.js></script>
{{jsfiddle PATH
[STR ["light|presentation"    #Include Jsfiddle in an <iframe>
[HEIGHT_NUM [WIDTH_NUM]]]]}}  #STR are the tabs, def: js,resources,html,css,result
{{md PATH_STR}}               #Converts to HTML
{{fileSize NUM}}              #e.g. 10000 -> "10 KB"
{{ordinalize NUM}}            #e.g. 2 -> "2nd"

{{extname STR}}               #e.g. "FILE.txt" -> "txt"
{{relative PATH_STR PATH2STR}}#Returns relative path from PATH to PATH2 (don't have to exist)
