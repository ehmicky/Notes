
             
   DENO_PATH  
             



VERSION ==>                       #Part of Deno
                                  #Browser compatible

PATH vs URL ==>                   #URLs and 'file://...' are cross-OS
                                  #Unlike Node, PATHs are always OS-specific, i.e. should avoid

std/path/posix|windows/...        #Same as std/path/... but for a specific OS

std/path/normalize.ts
normalize('PATH')->'PATH'         #Like Node
std/url/normalize.ts
normalize('URL'|URL)->URL         #Same with URL

std/path/join.ts
join('PATH',...)->'PATH2'         #Like Node
std/url/join.ts
join('URL'|URL, 'PATH',...)->URL  #Same with URL

std/path/resolve.ts
resolve('PATH',...)->'PATH2'      #Like Node

std/path/relative.ts
relative('PATH', 'PATH2')->'PATH3'#Like Node

std/path/is_absolute.ts
isAbsolute('PATH')->BOOL          #Like Node

std/path/dirname.ts
dirname('PATH')->'DIR'            #Like Node
std/url/dirname.ts
dirname('URL'|URL)->'DIR'         #Same with URL

std/path/basename.ts
basename('PATH'[, '.EXT'])
 ->'FILENAME'                     #Like Node
std/url/basename.ts
basename('URL'|URL[, '.EXT'])
 ->'FILENAME'                     #Same with URL

std/path/extname.ts
extname('PATH')->'.EXT'           #Like Node
std/url/extname.ts
extname('URL'|URL)->'.EXT'        #Same with URL

std/path/parse.ts
parse('PATH')->PATH_OBJ           #Like Node

std/path/format.ts
format(PATH_OBJ)->'PATH'          #Like Node

std/path/to_namespaced_path.ts
toNamespacedPath('PATH')->'PATH'  #Like Node

std/path/separator.ts
SEP                               #Like Node sep
SEP_PATTERN                       #/\/+/ (Unix) or /[\\/]+/ (Windows)

std/path/mod.ts
delimiter                         #Like Node

std/path/from_file_url.ts
fromFileUrl(URI|'URI')->'PATH'    #Like Node fileURLToPath()

std/path/to_file_url.ts
toFileUrl('PATH')->URI            #Like Node pathToFileURL()

std/path/normalize_glob.ts
normalizeGlob('GLOB'[, OPTS])     #Like normalize(), but has OPTS:
 ->'GLOB'                         #  - globstar true (def: false): keep **

std/path/join_globs.ts
joinGlobs('GLOB'_ARR[, OPTS])
 ->'GLOB'                         #Like join(). Same OPTS as normalizeGlob()
