
                 
   DENO_RESOURCE  
                 



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TextDecoder|Encoder[Stream]       #Like DOM

RESOURCE                          #Abstraction of a file, including socket, etc.
                                  #Usually ref'd by the process

CLOSER|READER|WRITER|SEEKER       #Abstract class to implement
std/types.d.ts                    #Has Closer|Reader[Sync]|Writer[Sync] types

CLOSER.close()                    #Close underlying RESOURCE

READER.read(UINT8ARR)->>NUM|null  #Reads available bytes from underlying RESOURCE and sets them into UINT8ARR.
                                  #Usually does not wait i.e. might read:
                                  #  - 0 bytes
                                  #  - less than UINT8ARR.length
                                  #     - rest of UINT8ARR might be used for internal purposes though
                                  #Only read up to UINT8ARR.length bytes.
                                  #Returns NUM of bytes read, or null if no more bytes to read.

WRITER.write(UINT8ARR)->>NUM      #Reads all of UINT8ARR and sets it to underlying RESOURCE.
                                  #Returns UINT8ARR.length

SEEKER.seek(NUM|BIGINT, ENUM)     #Changes position used by READER.read() and WRITER.write()
 ->>NUM2                          #NUM|BIGINT is relative offset in bytes
                                  #ENUM is reference position among Deno.Seeker.Start|Current|End
                                  #Before-start position is error. After-end position is implementation-dependent.
                                  #NUM2 is new position.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DESCRIPTOR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RID                               #RESOURCE ID NUM. Abstraction of a file descriptor.

Deno.close(RID)
Deno.read(RID, ...)
Deno.write(RID, ...)
Deno.seek(RID, ...)               #Same but on a RID



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SYNC              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.fdatasync(RID)->>            #Flushes data to disk
Deno.fsync(RID)->>                #Flushes data + inode modification (timestamps, permissions, etc.) to disk

READER_SYNC.readSync(...)
WRITER_SYNC.writeSync(...)
SEEKER_SYNC.seekSync(...)
Deno.readSync(...)
Deno.writeSync(...)
Deno.seekSync(...)
Deno.fdatasyncSync(...)
Deno.fsyncSync(...)               #Same but sync


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.resources()->OBJ             #Returns all RESOURCEs as { RID: VAL, ... }
                                  #VAL is internal|undocumented


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
TYPE                              #'[u]int8|16|32|64' or 'float32|64'
sizeof('TYPE')->1|2|4|8           #

varnum(UINT8ARR[, OPTS])->NUM|null#Reads a specific TYPE from UINTARR
                                  #null if too large
                                  #OPTS:
                                  #  - type 'TYPE' (def: 'int32')
                                  #  - endian 'big' or 'little' (def)
putVarnum(UINT8ARR, NUM[, OPTS])  #Like varnum() but sets instead
 ->NUM2                           #Returns sizeof('TYPE')
varnumBytes(NUM[, OPTS])->UINTARR #Like varnum() but creates a new UINTARR

                                             \=+===============================+=/


Deno.errors.AlreadyExists         #Create RESOURCE that already exists
Deno.errors.NotFound              #RESOURCE not found

Deno.errors.InvalidData           #Invalid IO read
Deno.errors.UnexpectedEof         #IO read an EOF unexpectedly
Deno.errors.WriteZero             #IO write 0 bytes
Deno.errors.BrokenPipe            #IO write to a pipe done reading (SIGPIPE)

Deno.errors.TimedOut              #IO timeout (ETIMEDOUT)
Deno.errors.Busy                  #RESOURCE locked by another RESOURCE
Deno.errors.BadResource           #RESOURCE is in bad state


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ITERATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/encoding/binary.ts            #

readExact(READER, UINT8ARR)->>    #Like READER.read(UINT8ARR) but repeats it until UINT8ARR.length bytes read
getNBytes(READER, NUM)->>UINT8ARR #Like readExact(READER, new Uint8Array(NUM))

readVarnum(READER[, OPTS])
 ->>NUM|null
writeVarnum(WRITER, NUM[, OPTS])
 ->>NUM2                          #Same as std/encoding/binary.ts varnum|putVarnum() but on a READER|WRITER

readVarbig(...)                   #Same but:
writeVarbig(...)                  #  - returns BIGINT
                                  #  - default OPTS.type 'int64'
