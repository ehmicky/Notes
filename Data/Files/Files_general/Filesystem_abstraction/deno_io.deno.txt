
           
   DENO_IO  
           



VERSION ==>                       #See deno doc
                                  #Browser compatible, except RESOURCE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TextDecoder|Encoder[Stream]       #Like DOM

CLOSER|READER|WRITER|SEEKER       #Abstract class to implement
@std/types.d.ts                   #Has Closer|Reader[Sync]|Writer[Sync] types

CLOSER.close()                    #Close underlying RESOURCE

READER[_SYNC].read(UINT8ARR)      #Reads available bytes from underlying RESOURCE and writes them into UINT8ARR.
 ->[>]NUM|null                    #Usually does not wait i.e. might read:
                                  #  - 0 bytes
                                  #  - less than UINT8ARR.length
                                  #     - rest of UINT8ARR might be used for internal purposes though
                                  #Only read up to UINT8ARR.length bytes.
                                  #Returns NUM of bytes read, or null if EOF

WRITER[_SYNC].write(UINT8ARR)     #Reads all of UINT8ARR and writes it to underlying RESOURCE.
 ->[>]NUM                         #Returns UINT8ARR.length

SEEKER[_SYNC].seek                #Changes position used by READER.read() and WRITER.write()
 (NUM|BIGINT, ENUM)->[>]NUM2      #NUM|BIGINT is relative offset in bytes
                                  #ENUM is reference position among Deno.Seeker.Start|Current|End
                                  #Before-start position is error. After-end position is implementation-dependent.
                                  #NUM2 is new position.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESOURCE                          #Abstraction of a file, including socket, etc.
                                  #Usually ref'd by the process

FILE.syncData[Sync]()->[>]        #Flushes data to disk
FILE.sync[Sync]()->[>]            #Flushes data + inode modification (timestamps, permissions, etc.) to disk


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FULL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@std/io/read_all.ts
readAll[Sync](READER[_SYNC])
 ->[>]UINT8ARR                    #

@std/io/write_all.ts
writeAll[Sync](WRITE[_SYNC])[->>] #

@std/io/copy.ts
copy(READER, WRITER[, OPTS])->>NUM#
OPTS.bufSize                      #NUM (in bytes, def: 32KB). Chunk size


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BUFFER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



@std/io/buffer.ts
new Buffer                        #BUFFER. Def: []
 ([ARRBUFFER|TYPEDARR|NUM_ARR])   #Is a READER|WRITER[_SYNC]

BUFFER.capacity                   #NUM. From start. Read only
BUFFER.length                     #NUM. From current offset. Read only
BUFFER.empty                      #BOOL. From current offset
BUFFER.truncate(NUM)              #Decrease BUFFER.capacity
BUFFER.grow(NUM)                  #Increase BUFFER.capacity
BUFFER.reset()                    #BUFFER.truncate(0)

BUFFER.bytes([OPTS])->UINT8ARR    #
OPTS.copy                         #BOOL (def: true)

BUFFER.read[Sync](UINT8ARR)       #Like READER.read()
 ->[>]NUM|null                    #When completely read, truncates to 0
                                  #Actually always sync under-the-hood
BUFFER.write[Sync](UINT8ARR)      #Like WRITER.write()
 ->[>]NUM                         #Actually always sync under-the-hood

BUFFER.readFrom[Sync]
 (READER[_SYNC])->[>]NUM          #Like BUFFER.read[Sync]() but with READER[_SYNC]



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.errors.AlreadyExists         #Create RESOURCE that already exists
Deno.errors.NotFound              #RESOURCE not found
Deno.errors.IsADirectory          #Expected a regular file but is a DIR
Deno.errors.NotADirectory         #Inverse
Deno.errors.FilesystemLoop        #Symlink loop

Deno.errors.InvalidData           #Invalid IO read
Deno.errors.UnexpectedEof         #IO read an EOF unexpectedly
Deno.errors.WriteZero             #IO write 0 bytes
Deno.errors.BrokenPipe            #IO write to a pipe done reading (SIGPIPE)

Deno.errors.TimedOut              #IO timeout (ETIMEDOUT)
Deno.errors.Busy                  #RESOURCE locked by another RESOURCE
Deno.errors.BadResource           #RESOURCE is in bad state
