
              
   DENO_WATCH  
              



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|fmt|lint|run|serve|test
--watch[=GLOB...]                 #Restart on file changes
                                  #Include imported files recursively
--watch-exclude=GLOB              #
--no-clear-screen                 #Do not clear terminal screen on file change

deno run|serve
--unstable-hmr[=FILE...]         !#Like --watch but also reloads imported files on change (instead of restarting process)
globalThis.addEventListener       #Triggered on reload
 ('hmr', FUNC(OBJ))               #OBJ: detail: path 'VARR'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FILES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.watchFs                     R#Watch for file|DIR changes.
 ('PATH'[_ARR][, OPTS])->WATCHER  #Cross-OS
OPTS.recursive                    #BOOL (def: true)

WATCHER                           #FS_EVENT_ASYNC_ITERABLE
WATCHER.close()
WATCHER[Symbol.dispose()]         #

FS_EVENT.paths                    #'PATH'_ARR
FS_EVENT.kind                     #One of:
                                  #  - 'access': read regular file contents|inode (does not seem to work properly)
                                  #  - 'modify': write file|DIR contents|inode
                                  #  - 'create': new file|DIR
                                  #  - 'remove': delete file|DIR
                                  #  - 'other': change in filesystem
                                  #  - 'any'
                                  #Watches newly created DIRs
                                  #Sometimes duplicate FS_EVENTs are created
FS_EVENT.flag                     #With kind 'other', is 'rescan':
                                  #  - when some events or filesystem changes might have not been reported
                                  #  - i.e. might need to refresh list of directories manually
