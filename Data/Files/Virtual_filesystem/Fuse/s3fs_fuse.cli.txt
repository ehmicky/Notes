
             
   S3FS_FUSE  
             



VERSION ==>                       #1.93


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MOUNT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


s3fs [BUCKET[/PREFIX]] DIR        #Mount BUCKET to a local DIR
-o OPT[=VAL]                      #

/etc/fstab                        #Line is: BUCKET DIR fuse.s3fs _netdev,allow_other,OPT[=VAL],... 0 0

-o bucket                         #'BUCKET', when not specified as positional argument


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CREDENTIALS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
~/aws/credentials                 #
-o profile                        #AWS CONFIG.profile

-o use_session_token              #Use ENVVAR AWS_SESSION_TOKEN instead

~/.passwd-s3fs                    #Alternative, with content '[BUCKET:]ACCESS_KEY_ID:SECRET_ACCESS_KEY', permission 600
/etc/passwd-s3fs                  #Same with permission 640
--passwd_file                     #Same with any permission


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FILESYSTEM           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o allow_other                    #BOOL (def: false). Allow other OS users to use it
-o umask                          #NUM (def: none). umask for files
-o mp_umask                       #NUM (def: none). umask for mount DIR itself

x-amz-meta-mode: NUM [S]          #File permissions
-o complement_stat                #BOOL. If false (def), ignore OBJECTs without x-amz-meta-mode [S]

x-amz-meta-mtime: DATE [S]        #mtime
x-amz-meta-uid|gid: NUM [S]       #uid|gid
-o use_xattr                      #BOOL (def: false). Handle file extended attributes (e.g. used by ecryptfs)
SYMLINKS ==>                      #Kept

Content-Type: MIME [C|S]          #Guessed from file extensions. Def: 'application/octet-stream'
-o mime                           #'PATH' to MIME files (def: '/etc/mime.types') used to guess Content-Type [C|S]

-o use_wtf8                       #BOOL (def: false). If local file is not UTF-8, re-encode it to UTF-8

-o notsup_compat_dir              #BOOL. If false (def), allows DIRs to lack trailing slash, or to be 'dir_$folder$'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          S3 FEATURES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OTHER CLOUD PROVIDERS ==>         #Also works, including GCP, Cloudflare

-o ahbe_conf                      #'PATH' to request headers on write
                                  #Each line:
                                  #  [reg:REGEXP|.EXT] HEADER_VAR [HEADER_VAL]
                                  #Can use #comment

-o public_bucket                  #BOOL (def: false). Grant anonymous access, and ignore AWS credentials
                                  #Implies -o nocopyapi
-o default_acl                    #'ACL' (def: 'private')

-o enable_content_md5             #BOOL (def: false). Computes Content-MD5 [C]
-o use_sse                        #STR among:
                                  #  - true: SSE-S3
                                  #  - k[msid][:KMS_KEY_ID]: SSE-KMS
                                  #     - if no KMS_KEY_ID, must use ENVVAR AWSSSEKMSID
                                  #  - c[ustom][:KEY_PATH]: SSE-C
                                  #     - KEY_PATH: one key per line, permission 600
                                  #     - if no KEY_PATH, must use ENVVAR AWSSSECKEYS 'KEY:...' or -o load_sse_c='KEY:...'
-o storage_class                  #'STORAGE_CLASS'
-o request_pays                   #x-amz-request-payer: requester [C]

-o iam_role                       #'ROLE'
-o ecs                            #Use ECS instead of EC2 under the hood


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTTP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o url                            #'SERVICE_DOMAIN' (def: 'https://s3.amazonaws.com'), e.g. 'http://s3.amazonaws.com' to use HTTP
-o host                           #Same but when URL is not S3
-o servicepath                    #'/PATH' to append to -o host
-o use_path_request_style         #Do not use virtual hosting

-o endpoint                       #'REGION' (def: 'us-east-1')
-o sigv4|2                        #AWS signature (def: v4, then v2)

-o no_check_certificate           #Do not check SSL server certificate
-o ssl_verify_hostname            #If 0 (def: 2), do not verify server hostname using SSL certificate
-o cipher_suites                  #OpenSSL cipher suites

-o noua                           #BOOL. If false (def), set User-Agent: s3fs/X.Y.Z [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ACTIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o listobjectsv2                  #Use ListObjectsV2() instead of ListObjects()

-o norenameapi                    #Use GetObject|PutObject() instead of CopyObject() when renaming files
-o nocopyapi                      #Same but for any other operations
-o nomixupload                    #Same but for MUPLOADs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o tmpdir                         #'DIR' (def: '/tmp')

-o use_cache                      #'DIR' (def: '', i.e. disabled) used to cache downloads
-o check_cache_dir_exist          #Do not create cache 'DIR' if it does not exist
-i del_cache                      #Delete files in cache 'DIR' on start|stop
-o enable_noobj_cache             #BOOL (def: false). Cache non-existing files, to limit the number of calls to ListBucket()

-o max_stat_cache_size            #NUM (def: 1e5, i.e. ~40MB) of files `stat` to cache
-o stat_cache_expire              #NUM (in secs, def: 15m) to expire cached files `stat`

-o max_dirty_data                 #NUM (in MB, def: 5GB) of data to cache locally before flushing to S3
-o ensure_diskfree                #Min NUM (in MB, def: 0) of partition space to keep for cache
-o set_check_cache_sigusr1        #BOOL (def: false). Refresh cache on SIGUSR1

-o nodnscache                     #BOOL. If false (def), cache DNS requests

-o nosscache                      #BOOL. If false (def), cache SSL session data


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERFORMANCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o retries                        #NUM (def: 5)

-o connect_timeout                #NUM (in secs, def: 300)
-o readwrite_timeout              #NUM (in secs, def: 120)

-o multireq_max                   #Max NUM (def: 20) of concurrent requests when paginating
-s                                #Do not use multiple threads

-o list_object_max_keys           #NUM (def: 1000). PARAM.MaxKeys with ListObjects[V2]()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MULTIPART           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-o nomultipart                    #BOOL. If false (def), use MUPLOADs on big files
-o multipart_threshold            #Min NUM (in MB, def: 25) to use MUPLOADs
-o singlepart_copy_limit          #Max NUM (in MB, def: 512) to not use MUPLOADs

-o multipart_size                 #MPART.Size (in MB, def: 10) for UploadPart()
-o multipart_copy_size            #MPART.Size (in MB, def: 512) for UploadPartCopy()

-o parallel_count                 #Max NUM (def: 5) of concurrent requests for MUPLOADs

s3fs --incomplete-mpu-list|-u
 BUCKET                           #Print incomplete MUPLOADs
s3fs --incomplete-mpu-abort[=STR] #Delete incomplete MUPLOADs
 BUCKET                           #STR is 'all' or 'DURATION' (def: '24H')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-f                                #Run in foreground

-o logfile                        #'PATH' to syslog file. Re-opened on SIGHUP, for rotation
-o dbglevel                       #Log level among 'crit' (def), 'err', 'warn', 'info'
-d                                #Same as -o 'info'

-o curldbg                        #Log HTTP requests body
-o no_time_stamp_msg              #Do not log timestamps
-o instance_name                  #STR shown in logs
