
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   S3_TABLES   ┃
                                  ┗━━━━━━━━━━━━━━━┛

VERSION ==>                       #2025-01-14

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

FORMAT ==>                        #XML REST
                                  #Uses some PARAMS|RESP headers

ERRORS ==>                        #OBJ_ARR: Code, Message, Resource, RequestId

REQ_ID                            #x-amz-request-id [S] + x-amz-id-2 [S]

s3tables.amazonaws.com            #SERVICE_DOMAIN

PAGINATION ==>                    #Uses REQ|RES.continuationToken + REQ.max* NUM (def|max: 1e3)

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AmazonS3TablesFullAccess          #AWS managed POLICY. Grants all 's3tables:*' PACTIONs
AmazonS3TablesReadOnlyAccess      #Same but readonly

                                  ┌────────────┐
                                  │   BUCKET   │
                                  └────────────┘

TABLE_BUCKET                      #Group of NAMESPACEs
TABLE_BUCKET.arn                  #TABLE_BUCKET_ARN. 'arn:aws:s3tables:REGION:ACCOUNT_ID:bucket/TABLE_BUCKET'
TABLE_BUCKET.name                 #'TABLE_BUCKET'
                                  #Only [0-9a-z]_- and min 3 chars, max 63 chars
TABLE_BUCKET.createdAt            #'DATE'

TABLE_BUCKET.ownerAccountId       #'ACCOUNT_ID'

                                  ┌────────────────┐
                                  │   BUCKET API   │
                                  └────────────────┘

PUT /buckets                      #Req: TABLE_BUCKET
CreateTableBucket()               #  - body: only name
                                  #Res: TABLE_BUCKET
                                  #  - only arn
GET /buckets                      #Req: TABLE_BUCKET
ListTableBuckets()                #  - query: only name -> prefix STR
                                  #Res: tableBuckets TABLE_BUCKET_ARR
                                  #Paginates with continuationToken, maxBuckets
GET /buckets/TABLE_BUCKET_ARN     #Req: TABLE_BUCKET
GetTableBucket()                  #  - path: tableBucketARN
                                  #Res: TABLE_BUCKET
DELETE /buckets/TABLE_BUCKET_ARN  #Req: TABLE_BUCKET
DeleteTableBucket()               #  - path: tableBucketARN
                                  #Res: empty

                                  ┌────────────────┐
                                  │   BUCKET IAC   │
                                  └────────────────┘

AWS::S3Tables::TableBucket        #RESPROPs: TableBucketName
                                  #RESATTRs: TableBucketARN

                                  ┌────────────────────┐
                                  │   BUCKET LOGGING   │
                                  └────────────────────┘

CLOUDTRAIL ==>                    #*TableBucket() are logged with CloudTrail as data EVENTs

                                  ┌───────────────┐
                                  │   NAMESPACE   │
                                  └───────────────┘

NAMESPACE                         #Group of TABLEs
NAMESPACE.namespace               #'NAMESPACE'_ARR (single item)
                                  #Only [0-9a-z]_ and max 255 chars
NAMESPACE.createdAt               #'DATE'

NAMESPACE.tableBucketARN          #TABLE_BUCKET_ARN

NAMESPACE.ownerAccountId          #'ACCOUNT_ID' of NAMESPACE
NAMESPACE.createdBy               #'ACCOUNT_ID' that created NAMESPACE

                                  ┌────────────────────┐
                                  │   NAMESPACE AUTH   │
                                  └────────────────────┘

COND_KEY s3tables:namespace       #'NAMESPACE'. With any PACTION which takes 'NAMESPACE' as parameter

                                  ┌───────────────────┐
                                  │   NAMESPACE API   │
                                  └───────────────────┘

PUT /namespaces/TABLE_BUCKET_ARN  #Req: NAMESPACE
CreateNamespace()                 #  - path: tableBucketARN
                                  #  - body: only namespace
                                  #Res: NAMESPACE
                                  #  - only namespace, tableBucketARN
GET /namespaces/TABLE_BUCKET_ARN  #Req: NAMESPACE
ListNamespaces()                  #  - path: tableBucketARN
                                  #  - query: only namespace -> prefix STR
                                  #Res: namespaces NAMESPACE_ARR
                                  #  - no tableBucketARN
                                  #Paginates with continuationToken, maxNamespaces
GET /namespaces/TABLE_BUCKET_ARN  #Req: NAMESPACE
 /NAMESPACE                       #  - path: namespace STR, tableBucketARN
GetNamespace()                    #Res: NAMESPACE
                                  #  - no tableBucketARN
DELETE
 /namespaces/TABLE_BUCKET_ARN     #Req: NAMESPACE
 /NAMESPACE                       #  - path: namespace STR, tableBucketARN
DeleteNamespace()                 #Res: empty

                                  ┌───────────┐
                                  │   TABLE   │
                                  └───────────┘

TABLE                             #Apache Iceberg table
                                  #I.e. big flat tables, meant to be continuously incremented, then queried

TABLE.tableARN                    #'TABLE_ARN'. 'TABLE_BUCKET_ARN/table/TABLE'
TABLE.name                        #'TABLE'
                                  #[0-9a-z]_ and max 255 chars
TABLE.createdAt                   #'DATE'
TABLE.modifiedAt                  #'DATE'

TABLE.tableBucketARN              #'TABLE_BUCKET_ARN'
TABLE.namespace                   #'NAMESPACE'_ARR (single item)

TABLE.ownerAccountId              #'ACCOUNT_ID' of TABLE
TABLE.createdBy                   #'ACCOUNT_ID' that created TABLE
TABLE.modifiedBy                  #'ACCOUNT_ID' that last updated TABLE

TABLE.format                      #Always 'ICEBERG'

TABLE.type                        #Either 'customer' or 'aws'
TABLE.managedByService            #'SERVICE' that created the TABLE
                                  #Only if type 'aws'

TABLE.versionToken                #STR

                                  ┌────────────────┐
                                  │   TABLE AUTH   │
                                  └────────────────┘

COND_KEY s3tables:tableName       #'TABLE'. With any PACTION which takes 'TABLE' as parameter

PACTION s3tables:GetTableData     #Allows using s3:GetObject|HeadObject|ListParts
PACTION s3tables:PutTableData     #Allows using s3:PutObject and s3:CreateMultipartUpload|UploadPart|CompleteMultipartUpload|AbortMultipartUpload

                                  ┌───────────────┐
                                  │   TABLE API   │
                                  └───────────────┘

PUT /tables/TABLE_BUCKET_ARN      #Req: TABLE
 /NAMESPACE                       #  - path: tableBucketARN, namespace
CreateTable()                     #  - body: only name, format
                                  #Res: TABLE
                                  #  - only tableARN, versionToken
PUT /tables/TABLE_BUCKET_ARN      #Req: TABLE
 /NAMESPACE/TABLE/rename          #  - path: tableBucketARN, namespace, name
RenameTable()                     #  - body: only name|namespace -> newName|newNamespaceName, versionToken
                                  #Res: empty
GET /tables/TABLE_BUCKET_ARN      #Req: TABLE
ListTables()                      #  - path: tableBucketARN
                                  #  - query: only name -> prefix STR, namespace
                                  #Res: tables TABLE_ARR
                                  #  - only tableARN, name, createdAt, modifiedAt, namespace, type
                                  #Paginates with continuationToken, maxTables
GET /tables/TABLE_BUCKET_ARN      #Req: TABLE
 /NAMESPACE/TABLE                 #  - path: tableBucketARN, namespace, name
GetTable()                        #Res: TABLE
DELETE /tables/TABLE_BUCKET_ARN   #Req: TABLE
 /NAMESPACE/TABLE                 #  - path: tableBucketARN, namespace, name
DeleteTable()                     #  - query: only versionToken
                                  #Res: empty

                                  ┌───────────────────┐
                                  │   TABLE LOGGING   │
                                  └───────────────────┘

CLOUDTRAIL ==>                    #*Table() are logged with CloudTrail as data EVENTs

                                  ┌───────────────────────┐
                                  │   METADATA LOCATION   │
                                  └───────────────────────┘

TABLE.metadataLocation            #STR
TABLE.warehouseLocation           #STR

                                  ┌───────────────────────────┐
                                  │   METADATA LOCATION API   │
                                  └───────────────────────────┘

PUT /tables/TABLE_BUCKET_ARN      #Req: TABLE
/NAMESPACE/TABLE/metadata-location#  - path: only tableBucketARN, namespace, name
UpdateTableMetadataLocation()     #  - body: only versionToken, metadataLocation
                                  #Res: TABLE
                                  #  - only tableARN, name, namespace, versionToken, metadataLocation
GET /tables/TABLE_BUCKET_ARN      #Req: TABLE
/NAMESPACE/TABLE/metadata-location#  - path: only tableBucketARN, namespace, name
GetTableMetadataLocation()        #Res: TABLE
                                  #  - only versionToken, metadataLocation, warehouseLocation

                                  ┌────────────────────────┐
                                  │   MAINTENANCE BUCKET   │
                                  └────────────────────────┘

MAINT_BUCKET.tableBucketARN       #'TABLE_BUCKET_ARN'
MAINT_BUCKET.type                 #Always 'icebergUnreferencedFileRemoval'

MAINT_BUCKET.configuration.TYPE   #MAINT_BUCKET_CONF
MAINT_BUCKET_CONF.status          #'enabled' or 'disabled'
MAINT_BUCKET_CONF.settings.TYPE
 .unreferencedDays                #NUM. After NUM days of OBJECT not being referenced by any snapshot, mark it as non-current
MAINT_BUCKET_CONF.settings.TYPE
 .nonCurrentDays                  #NUM. After NUM days of OBJECT not being non-current, delete it

                                  ┌────────────────────────────┐
                                  │   MAINTENANCE BUCKET API   │
                                  └────────────────────────────┘

PUT /buckets/TABLE_BUCKET_ARN     #Req: MAINT_BUCKET
 /maintenance/TYPE                #  - path: tableBucketARN, type
PutTableBucket                    #  - body: only configuration.TYPE -> value
 MaintenanceConfiguration()       #Res: empty
GET /buckets/TABLE_BUCKET_ARN     #Req: MAINT_BUCKET
 /maintenance                     #  - path: tableBucketARN
GetTableBucket                    #Res: MAINT_BUCKET
 MaintenanceConfiguration()       #  - no type

                                  ┌────────────────────────────┐
                                  │   MAINTENANCE BUCKET IAC   │
                                  └────────────────────────────┘

AWS::S3Tables::TableBucket        #Includes RESPROPs: UnreferencedFileRemoval: Status 'Enabled|Disabled', UnreferencedDays, NoncurrentDays

                                  ┌───────────────────────┐
                                  │   MAINTENANCE TABLE   │
                                  └───────────────────────┘

MAINT_TABLE.tableBucketARN        #'TABLE_BUCKET_ARN'
MAINT_TABLE.namespace             #'NAMESPACE'
MAINT_TABLE.name                  #'NAME'
MAINT_TABLE.type                  #Either 'icebergCompaction' or 'icebergSnapshotManagement'

MAINT_TABLE.configuration.TYPE    #MAINT_TABLE_CONF
MAINT_TABLE_CONF.status           #'enabled' or 'disabled'

MAINT_TABLE_CONF.settings
 .icebergCompaction
 .targetFileSizeMB                #NUM (in MB). Target file size, for compaction

MAINT_TABLE_CONF.settings
 .icebergSnapshotManagement       #MAINT_TABLE_SNAPSHOTS
MAINT_TABLE_SNAPSHOTS
 .maxSnapshotAgeHours             #NUM. Delete snapshot after NUM hours
MAINT_TABLE_SNAPSHOTS
 .minSnapshotsToKeep              #NUM. Do not delete snapshot if <= NUM of them

                                  ┌───────────────────────────┐
                                  │   MAINTENANCE TABLE API   │
                                  └───────────────────────────┘

PUT /tables/TABLE_BUCKET_ARN      #Req: MAINT_TABLE
 /NAMESPACE/TABLE/maintenance/TYPE#  - path: tableBucketARN, namespace, name, type
PutTableMaintenanceConfiguration()#  - body: only configuration.TYPE -> value
                                  #Res: empty
GET /tables/TABLE_BUCKET_ARN      #Req: MAINT_TABLE
 /NAMESPACE/TABLE/maintenance     #  - path: tableBucketARN, namespace, name
GetTableMaintenanceConfiguration()#Res: MAINT_TABLE
                                  #  - tableBucketARN|namespace|name -> tableARN TABLE_ARN
                                  #  - no type

                                  ┌─────────────────────┐
                                  │   MAINTENANCE JOB   │
                                  └─────────────────────┘

MAINT_JOB.tableBucketARN          #'TABLE_BUCKET_ARN'
MAINT_JOB.namespace               #'NAMESPACE'
MAINT_JOB.name                    #'TABLE'

MAINT_JOB.status.TYPE             #MAINT_JOB_STATUS. TYPE is MAIN_BUCKET|MAIN_TABLE.type
MAINT_JOB_STATUS.status           #One of 'Not_Yet_Run', 'Successful', 'Failed', 'Disabled'
MAINT_JOB_STATUS.failureMessage   #STR
MAINT_JOB_STATUS.lastRunTimestamp #'DATE'

                                  ┌─────────────────────────┐
                                  │   MAINTENANCE JOB API   │
                                  └─────────────────────────┘

GET /tables/TABLE_BUCKET_ARN      #Req: MAINT_JOB
 /NAMESPACE/TABLE                 #  - path: tableBucketARN, namespace, name
 /maintenance-job-status          #Res: MAINT_JOB
GetTableMaintenanceJobStatus()    #  - tableBucketARN|namespace|name -> tableARN TABLE_ARN

                                  ┌───────────────────┐
                                  │   BUCKET POLICY   │
                                  └───────────────────┘

TABLE_BUCKET_POLICY.tableBucketARN#'TABLE_BUCKET_ARN'

TABLE_BUCKET_POLICY.resourcePolicy#IAM 'POLICY_JSON'
                                  #Max 20KB

                                  ┌───────────────────────┐
                                  │   BUCKET POLICY API   │
                                  └───────────────────────┘

PUT /buckets/TABLE_BUCKET_ARN     #Req: TABLE_BUCKET_POLICY
 /policy                          #  - path: tableBucketARN
PutTableBucketPolicy()            #  - body: resourcePolicy
                                  #Res: empty
GET /buckets/TABLE_BUCKET_ARN     #Req: TABLE_BUCKET_POLICY
 /policy                          #  - path: tableBucketARN
GetTableBucketPolicy()            #Res: TABLE_BUCKET_POLICY
                                  #  - only resourcePolicy
DELETE /buckets/TABLE_BUCKET_ARN  #Req: TABLE_BUCKET_POLICY
 /policy                          #  - path: tableBucketARN
DeleteTableBucketPolicy()         #Res: empty

                                  ┌───────────────────────┐
                                  │   BUCKET POLICY IAC   │
                                  └───────────────────────┘

AWS::S3Tables::TableBucketPolicy  #RESPROPs: TableBucketARN, ResourcePolicy OBJ

                                  ┌──────────────────┐
                                  │   TABLE POLICY   │
                                  └──────────────────┘

TABLE_POLICY.tableBucketARN       #'TABLE_BUCKET_ARN'
TABLE_POLICY.namespace            #'NAMESPACE'
TABLE_POLICY.name                 #'TABLE'

TABLE_POLICY.resourcePolicy       #IAM 'POLICY_JSON'
                                  #Max 20KB

                                  ┌──────────────────────┐
                                  │   TABLE POLICY API   │
                                  └──────────────────────┘

PUT /tables/TABLE_BUCKET_ARN      #Req: TABLE_POLICY
 /NAMESPACE/TABLE/policy          #  - path: tableBucketARN, namespace, name
PutTablePolicy()                  #  - body: resourcePolicy
                                  #Res: empty
GET /tables/TABLE_BUCKET_ARN      #Req: TABLE_POLICY
 /NAMESPACE/TABLE/policy          #  - path: tableBucketARN, namespace, name
GetTablePolicy()                  #Res: TABLE_POLICY
                                  #  - only resourcePolicy
DELETE /tables/TABLE_BUCKET_ARN   #Req: TABLE_POLICY
 /NAMESPACE/TABLE/policy          #  - path: tableBucketARN, namespace, name
DeleteTablePolicy()               #Res: empty
