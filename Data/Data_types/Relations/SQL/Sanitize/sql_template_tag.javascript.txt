
                    
   SQL_TEMPLATE_TAG  
                    



VERSION ==>                       #5.2.1

sql`SQL`                          #TSQL
                                  #Goal is to use TSQL.text|sql + TSQL.values as SQL prepared statement,
                                  #to sanitize user input (passed as ${...})
                                  #See database doc for restrictions related to SQL prepared statements

${VAL|TSQL}                       #Template value inside `SQL`

TSQL.strings                      #ARR of each non-${...}
TSQL.values                       #ARR of each ${...}
TSQL.text                         #'SQL' with each ${...} replaced by $NUM (for Postgres)
TSQL.sql                          #'SQL' with each ${...} replaced by ? (for MySQL)
TSQL.statement                    #'SQL' with each ${...} replaced by :NUM (for Oracle)
TSQL.inspect
 ()->{ values, text, sql }        #

join(VAL|TSQL_ARR                 #Like sql`VAL,...`
 [, STR[, STR2[, STR3]]])->TSQL   #STR is delim (def: ','). STR2|3 is prepended|appended (def: '')

bulk(VAL|TSQL_ARR_ARR             #Like sql`(VAL,...),...` (e.g. with SQL `values`)
 [, STR[, STR2[, STR3]]])->TSQL   #STR|STR2|STR3: like join()

raw('SQL')->TSQL                  #Like sql`SQL` with no ${...}

empty                             #Like sql`` with no SQL nor ${...}
                                  #Meant to be used inside ${...}
                                  #  - since ${""} would escape the empty STR instead
