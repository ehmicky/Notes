
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   NORMALIZR   ┃
                                  ┗━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.4.0

GOAL ==>                          #Flatten a nested/populated REST JSON response, e.g.:
                                  #  { 
                                  #    a: { 
                                  #      id: 1,
                                  #      a_attr: 2, 
                                  #      c: { 
                                  #        id: 3,
                                  #        c_attr: 4 
                                  #      }
                                  #    }
                                  #  }
                                  #Becomes:
                                  #  { 
                                  #    result: [1],
                                  #    entities: {
                                  #      a: { 
                                  #        id: 1,
                                  #        a_attr: 2
                                  #        c: 3
                                  #      },
                                  #      c: { 
                                  #        id: 3,
                                  #        c_attr: 4 
                                  #      }
                                  #    }
                                  #  }

                                  ┌────────────────┐
                                  │   DEFINITION   │
                                  └────────────────┘

new NORMALIZR.Schema              #Declare a SCHEMA, i.e. a resource type
('SCHEMA'[, CONF])->SCHEMA        #CONF:
                                  #  - idAttribute STR[(OBJ)] (def: 'id')

SCHEMA_VAL                        #Can be:
                                  #  - SCHEMA
                                  #  - { VAR: SCHEMA_VAL }
                                  #  - NORMALIZR.arrayOf(SCHEMA2[, OPT]): for SCHEMA2_ARR
                                  #     - OPT.schemaAttribute 'SCHEMA'[(OBJ)]: for polymorphic types
                                  #  - NORMALIZR.valuesOf(SCHEMA2[, OPT]): for { VAR2: SCHEMA2 }
                                  #     - OPT.schemaAttribute: same as arrayOf()

SCHEMA.define
({ VAR: SCHEMA_VAL ... })         #Declare the populated fields from SCHEMA (other attributes do not need to be declared).

                                  ┌───────────┐
                                  │   USAGE   │
                                  └───────────┘

NORMALIZR.normalize               #Returns OBJ[_ARR] but after "flattening" populated resources:
(OBJ[_ARR], SCHEMA_VAL[, OPT])    #  - result ID_ARR
                                  #  - entities.SCHEMA.ID:
                                  #     - ...: non-populated resources, returned as is
                                  #     - ID[_ARR|OBJ]: populated resources are replaced by their ID,
                                  #       and fills in a top-level entities.SCHEMA instead
                                  #OPT:
                                  #  - mergeIntoEntity(OBJ.entities.SCHEMA.ID OBJ, OBJ2, 'SCHEMA'):
                                  #     - when assigning OBJ.entities.SCHEMA.ID OBJ = OBJ2, 
                                  #       whether OBJ has already been assigned or not
                                  #     - by def, will merge and console.warn() id conflict
                                  #  - assignEntity(OBJ, 'KEY', VAL):
                                  #     - function used when deep copying objects, for each attribute
                                  #     - def: OBJ.KEY = VAL
