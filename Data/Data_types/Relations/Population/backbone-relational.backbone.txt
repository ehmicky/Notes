
                       
   BACKBONE-RELATIONAL  
                       


VERSION ==>                       #0.9.0

IN SHORT ==>                      #How:
                                  #  - use Backbone.RelationalModel instead of Backbone.Model
                                  #  - define RMODEL.relations REL: key "VAR", relatedModel RMODEL_CTOR2, type "HasOne|HasMany"
                                  #This will populate RMODEL.VAR with RMODEL2.
                                  #Also:
                                  #  - can setup RMODEL2.relations REL2 with REL.reverseRelation REL2
                                  #  - can decide what RMODEL.toJSON() with REL.includeInJSON BOOL|"VAR"[_ARR]
                                  #Do everything client-side, but can fetch with RMODEL.getAsync("VAR") or REL.autoFetch true.

Backbone.RelationalModel          #RMODEL_CTOR. Child of MODEL_CTOR
RMODEL.relations                  #REL_ARR:
                                  #  - key "VAR"
                                  #  - relatedModel RMODEL_CTOR2 (def: RMODEL_CTOR)
                                  #  - type "HasOne|HasMany"
                                  #Means RMODEL.VAR contains RMODEL2.ID (where ID is RMODEL.idAttribute):
                                  #  - RMODEL.get("VAR")->RMODEL2|COLL2
                                  #     - do it by looking up global STORE registering all new RMODELs client-side:
                                  #        - if cannot find ("ToBeFetched"), returns nl, but reference is kept and will
                                  #          work when correct RMODEL instantiated (e.g. after RMODEL.getAsync())
                                  #     - manipulating RMODEL2|COLL2 will fire events on RMODEL2|COLL2, not on RMODEL, except:
                                  #        - when using RMODEL.set("VAR", ...) instead of RMODEL2|COLL2.set(...):
                                  #          fires relational:change:VAR(RMODEL, RMODEL2|COLL2[, OBJ])
                                  #        - with COLL2:
                                  #           - add|remove:VAR(RMODEL2, COLL2, OBJ)
                                  #           - reset:VAR(COLL2, OBJ)
                                  #           - change[:VAR] events, providing:
                                  #              - same condition as relational:change:VAR event
                                  #              - elements were added or removed
                                  #  - RMODEL.set("VAR", ATTR_OBJ|RMODEL2[.ID]) (including through new RMODEL(...)):
                                  #     - updates RMODEL2 too
                                  #     - ATTR_OBJ will create a new RMODEL2, unless REL.createModels false
                                  #     - if REL.parse true (def: false), use MODEL.parse() before setting
                                  #  - if REL.type "HasMany", means RMODEL.VAR is a COLL2
                                  #     - must specify REL.collectionType COLL2_CTOR (def: Backbone.Collection)
                                  #       and optionally REL.collectionOptions OBJ (passed to COLL2_CTOR)
                                  #     - must use RMODEL.set("VAR", ...) instead of COLL2.set(...), in order to fire
                                  #       change events on RMODEL
                                  #     - REL.collectionKey "VAR3"|BOOL (def: true, i.e. REL2.key): creates COLL2.VAR3 RMODEL
                                  #Other REL properties:
                                  #  - reverseRelation REL2: same as setting RMODEL2.relations REL2, but:
                                  #     - default values: type inverse, relatedModel RMODEL
                                  #     - REL2.type cannot be "HasMany" if REL.type "HasMany"
                                  #       To support many-to-many must use a third REMODEL3 (join table)
                                  #  - includeInJSON VAL: how RMODEL2 is included in RMODEL.toJSON():
                                  #     - false: not included
                                  #     - true (def): completely included
                                  #     - "VAR"_ARR: included, but only those variables
                                  #     - "VAR": included as RMODEL2.VAR (not as { VAR: RMODEL2.VAR })
                                  #  - keySource "VAR3": replace REL2.key name by "VAR3" in everything but RMODEL2.toJSON()
                                  #  - keyDestination "VAR3" (def: same as keySource if specified): replace REL.key name by
                                  #    "VAR3" in RMODEL.toJSON()
                                  #  - subModelTypes.STR RMODEL_CTOR3:
                                  #     - means RMODEL instances with RMODEL.type STR will be RMODEL3 instances instead, where
                                  #       RMODEL3 is a child of RMODEL
                                  #        - RMODEL.type must be specified (i.e. cannot be in parent `defaults`)
                                  #        - can use something else than "type" with REL.subModelTypeAttribute
                                  #     - must use MODEL.findOrCreate(), not new MODEL()
                                  #     - used for OO-relational model (single relation, but different possible types with
                                  #       different attributes)
                                  #RMODEL_CTOR[3] and COLL2_CTOR can be STR:
                                  #  - they are resolved compared to WINDOW
                                  #  - can add scope to compare with thanks to STORE.add|RemoveModelScope(OBJ)

RMODEL.getAsync("VAR"[, OBJ])     #Fetches RMODEL.VAR from the server (only "ToBeFetched" RMODEL2, unless OBJ.refresh true)
                                  #by calling:
                                  #  - COLL2.fetch(OBJ2) once, with OBJ2.url URL, if REL.type "HasMany" and
                                  #    COLL2.url([ARR])->URL specified, where ARR can be:
                                  #     - optional: should still work
                                  #     - RMODEL2_ID_ARR
                                  #     - RMODEL2_ARR: optional and RMODEL2_ID_ARR must then return same value
                                  #  - otherwise RMODEL2.fetch(OBJ) once per RMODEL2 (RMODEL2.urlRoot must be defined)
                                  #Then returns RMODEL.VAR as a jQuery PROMISE
                                  #Everything except RMODEL.getAsync() is client-side:
                                  #  - only called manually
                                  #  - except during new RMODEL() (not new RMODEL2()) if REL.autoFetch true|OBJ (def: false)
RMODEL.getIdsToFetch("VAR"[,BOOL])#Returns ARR of all RMODEL.VAR.ID
                                  #If false (def), only "ToBeFetched" ones.

COFFEESCRIPT/ES6 ==>              #When using in CoffeeScript/ES6:
                                  #  class RMODEL_CTOR extends RMODEL_CTOR2
                                  #instead of:
                                  #  var RMODEL_CTOR = RMODEL_CTOR2.extend(...)
                                  #Must call just afterwards RMODEL_CTOR.setup(RMODEL_CTOR2)
                                  #Backbone-relational monkey patches extend() to do that call by itself.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DETAILS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RMODEL.getRelations()             #Returns REL2_ARR
RMODEL.getRelation("VAR")         #Returns REL2


Backbone.Relational.store         #STORE. Global object containing references to all RMODEL (as COLLs according to
                                  #collectionType), so that they can be queried when another model is populating.
STORE.find
(RMODEL_CTOR, ATTR_OBJ|id|cid)    #Basically calls COLL.get(id|cid|ATTR_OBJ.id)
STORE.unregister
(RMODEL[_CTOR]|COLL)
STORE.reset()                     #Removing from cache makes relations not usable anymore.

RMODEL_CTOR.build(...)            #Similar to new RMODEL_CTOR(...), but takes into account subModelTypes
RMODEL_CTOR.findModel
(ATTR_OBJ|id|cid)                 #Proxies to STORE.find(). Can override it.
RMODEL_CTOR.findOrCreate          #Calls findModel() then:
(ATTR_OBJ|id|cid[, OBJ2])         #  - if not found and OBJ2.create true (def), creates it with RMODEL_CTOR.build(...)
                                  #  - updates with RMODEL.set(...) if found and OBJ2.merge true (def)
                                  #  - MODEL.parse() is used if OBJ2.parse true (def: false), with this not pointing to MODEL
RMODEL_CTOR.find(...)             #Same with OBJ2.create false

