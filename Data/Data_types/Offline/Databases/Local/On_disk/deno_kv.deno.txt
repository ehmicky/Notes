
           
   DENO_KV  
           



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OPEN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.openKv(['PATH|URI'])->>KV WR!#Key-value store.
                                  #Persisted using either:
                                  #  - 'PATH': SQLite
                                  #     - def: DENO_DIR/FILE_HASHID/kv.sqlite3
                                  #  - 'URI': KV connect, specific HTTP endpoints
                                  #     - not documented yet
                                  #Rich types for key|value.
                                  #Atomic updates.
KV.close()->>                     #Graceful: wait for ongoing updates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CRUD              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


KV.set(KVKEY, KVVAL)->>RESULT
ATOMIC.set(KVKEY, KVVAL)->ATOMIC  #

KV.delete(KVKEY)->>
ATOMIC.delete(KVKEY)->ATOMIC      #If KVKEY does not exist, noop

KV.get(KVKEY[, GOPTS])->>KVENTRY  #If KVKEY does not exist, return but with VERSIONSTAMP null (and KVVAL null)
KV.getMany(KVKEY_ARR[, GOPTS])
 ->>KVENTRY_ARR                   #Same for multiple KVKEYs. Provide with in-batch consistency like KV.list()

ATOMIC.sum(KVKEY, BIGINT)->ATOMIC #Increments KVVAL by BIGINT.
                                  #KVVAL must either:
                                  #  - be a KVU64 (not BIGINT|NUM)
                                  #  - not exist, defaulting to 0
                                  #BIGINT must be positive

ATOMIC.min|max(KVKEY, BIGINT)     #Set KVVAL to min|max(KVVAL, BIGINT)
 ->ATOMIC                         #KVVAL has same constraint as sum()
                                  #  - except if KVVAL does not exist, it is ignored instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LIST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


KV.list(SELECTOR[, LOPTS])->KVLIST#

SELECTOR.prefix                   #KVKEY. Filter only KVKEYs with:
                                  #  - initial KVKEY_PARTs exactly matching KVKEY's
                                  #  - same|longer KVKEY.length
                                  #Can be empty ARR to match all.
                                  #Cannot be used with both start|end.
                                  #Must be used if only either start|end used, or neither.
SELECTOR.start|end                #KVKEY. Filter from start (included) to end KVKEY (excluded), in the KV sorting order.
                                  #KVKEY does not have to exist.

LOPTS.limit                       #NUM (def: all). Only return first NUM KVENTRYs.
LOPTS.reverse                     #BOOL (def: false). Whether sorting order is ascending (false) or descending (true).

KVLIST.cursor                     #STR. Opaque KVENTRY identifying position of last iterated KVKEY.
                                  #Is actually serialized KVKEY, base64'd.
                                  #Throws if KVLIST not iterated yet.
LOPTS.cursor                      #STR. Start iteration at that position.
                                  #If undefined (def), from beginning.

LOPTS.batchSize                   #NUM. How many KVENTRYs to retrieve at once.
                                  #Smaller values require more fetches, i.e. slower
                                  #Values are consistent inside each batch, but not between:
                                  #  - i.e. they represent a snapshot at a given time
                                  #  - smaller batches benefit less from in-batch consistency
                                  #  - larger batches are more likely to deviate from latest state of the data
                                  #Def: LOPTS.limit or (if not set) 100. Max: 500.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FIFO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


KV.enqueue(KVVAL[, OPTS])->>RESULT
ATOMIC.enqueue(KVVAL[, OPTS])
 ->ATOMIC                         #Pushes KVVAL
KV.listenQueue
 (FUNC(KVVAL)[->>])->>            #Pulls KVVAL

OPTS.delay                        #NUM (in ms, def: 0) to wait before a KVVAL can be pulled
OPTS.keysIfUndelivered            #['VAR', 'VAL']_ARR to set if KVVAL cannot be pulled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ATOMIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


KV.atomic()->ATOMIC               #Perform multiple updates atomically
ATOMIC.commit()->>RESULT          #
RESULT.ok                         #BOOL. Whether ATOMIC.check() failed. Always true otherwise.
RESULT.versionstamp               #'VERSIONSTAMP' or (if RESULT.ok false) undefined

ATOMIC.mutate(ATOMIC_MUTATE...)
 ->ATOMIC                         #Same as ATOMIC.*
ATOMIC_MUTATE.type                #'set|delete|sum|min|max'
ATOMIC_MUTATE.key                 #KVKEY
ATOMIC_MUTATE.value               #Depending on type: KVVAL (set), nothing (delete), KVU64 (sum|min|max)

ATOMIC.check(ATOMIC_CHECK...)     #Make ATOMIC fail if a given KVKEY (depending on versionstamp):
 ->ATOMIC                         #  - 'VERSIONSTAMP': has a different 'VERSIONSTAMP', or does not exist
                                  #  - null: exists
                                  #If multiple ATOMIC_CHECKs, and'd
                                  #Performed first in the ATOMIC.* chain
                                  #Allows transaction without locking (optimistic update):
                                  #  - [re]try an update assuming the entry did not get updated
ATOMIC_CHECK.key                  #KVKEY
ATOMIC_CHECK.versionstamp         #'VERSIONSTAMP'|null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ENTRY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


KVLIST                            #KVENTRY_ASYNC_ITERABLE

KVENTRY                           #Single item (key + value)
KVENTRY.key                       #KVKEY
KVENTRY.value                     #KVVAL or null
KVENTRY.versionstamp              #'VERSIONSTAMP' or (if KVENTRY is missing) null

KVKEY                             #KVKEY_PART_ARR. Item key.
                                  #The whole ARR is the identifier. Only KV.list() allows matching only part of it.
                                  #Max length 2KB serialized
KVKEY_PART                        #UINT8ARR|STR|NUM|BIGINT|BOOL
SORTING ==>                       #KV is sorted by KVKEY:
                                  #  - by KVKEY[0], then by KVKEY[1], etc.
                                  #  - for a given KVKEY_PART:
                                  #     - by type
                                  #        - undefined first, i.e. shorter KVKEY first
                                  #     - then by value
                                  #Done automatically when inserting new KVKEYs

KVVAL                             #Item value.
                                  #v8-serialized: same types as structuredClone()
                                  #  - including null
                                  #Max length 64KB serialized

new Deno.KvU64(BIGINT)            #Represents a 64-bit UINT. Additional possible type for KVVAL.
                                  #Serialized as a BIGINT, but distinct type from it.
                                  #Cannot be nested in an OBJ|ARR
KVU64.value                       #BIGINT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BASE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSIONSTAMP                      #20 hex chars.
                                  #Represents a NUM incremented after each update, even if KVVAL is same.

GOPTS|LOPTS.consistency           #Read consistency:
                                  #  - 'strong' (def):
                                  #     - if value has been updated, wait for that update to be set first
                                  #     - also ensure in-batch consistency
                                  #  - 'eventual': opposite, faster
