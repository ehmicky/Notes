
                                  ┏━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   EXCEL_FORMULAS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━┛

                                  ┌─────────────────────┐
                                  │   ARRAYS / RANGES   │
                                  └─────────────────────┘

ARRAY ==>               #{VAL...;}. L'opération effectué cherchera à être vectorielle. J'appelle cela VALv, TESTv, etc.
                        #RANGE peuvent être manipulés comme des ARRAY
                        #Opérations simples comme + * possibles.
                        #Pour faire un AND vectoriel, utiliser *, et un OR vectoriel, utiliser +, et un XOR vectorial, utiliser
                        #Mod. Notamment utile : RANGE_TEST * RANGE2, qui filtre RANGE2 selon RANGE_TEST
                        #Si formule renvoie une ARRAY, utiliser ARRAY FORMULA
                        #FONC({VAL...}) peut également être écrit FONC(VAL...)
                        #{VAL...;} est vertical et {VAL...,} horizontal, par ex { 1,2,3 ; 4,5,6 }
ARRAY FORMULA ==>       #Une Formula renvoyant une ARRAY doit utiliser plusieurs cases.
                        #Elle doit être pressé avec Ctrl-Shift-Enter au lieu d'Enter (dont à chaque update)
                        #De plus il faut avoir sélectionné plusieurs cases avant d'entrer la formula.
                        #Sinon, seul premier élément sera mis. Si formula ne renvoie pas une array, alors créera un ensemble de
                        #cases identiques.
RANGE ==>               #Ex :
                        #  - A1:C3
                        #  - [C:/File.xlsx]Sheet1!A1, Sheet1!A1 ou 'Sheet 1'A1
                        #  - A:A ou 1:1
                        #  - (A1:B5;F4) (plusieurs RANGE "areas" pour un ARG RANGE)
                        #  - AREA_NAME
                        #  - R1C1 style (possible qu'en changeant les options)

RANGE IMPLICITE ==>     #Attention, lors d'un copier-coller, le RANGE implicite n'est pas recalculé. L'expliciter donc si pour
                        #plus d'une cellule

                                  ┌───────────┐
                                  │   LOGIC   │
                                  └───────────┘

True, False
Or(TESTv), And(TESTv),
Not(TESTv)

If(TESTv;VALv;VALv2)
Choose(NUMv,VALv...)    #Comme Choose en VBA.

                                  ┌──────────┐
                                  │   TYPE   │
                                  └──────────┘

TYPES DES CELLS ==>     #Type défini dans onglet home ne change que le display du type, non le type sous-jacent.
                        #Date input ou currency input, ou autre, sont converties du display type vers le type sous-jacent NUM.
                        #Seuls types possibles sont NUM, STR, BOOL et ERROR pour Type(), mais plus étendu avec VBA.
EMPTY CELLS ==>         #Difference NUM vide et STR vide :
                        #  - Empty (NUM) :
                        #    - état vide normal
                        #    - ou remis à cet état via :
                        #      - touch SUPPR
                        #      - paste by value dans un fichier .csv ouvert par Excel
                        #    - ne coupe pas le mot de la cellule d'avant si celui-ci dépasse
                        #    - non istext(), isblank()
                        #    - mais = "" et = Empty, car = coerce Empty en STR
                        #    - pivot table : (blank). Jamais compté dans pivot tables.
                        #  - "" (STR) :
                        #    - état souvent problématique
                        #    - obtenu par :
                        #      - un "" comme résultat d'une formule (dont If( TRUE, "" ))
                        #      - ouverture d'un fichier .csv avec des champs "" ?
                        #    - coupe le mot de la cellule d'avant si celui-ci dépasse
                        #    - istext(), non isblank()
                        #    - mais = "" et = Empty, car = coerce Empty en STR
                        #    - compté comme non-Empty par counta()/countblank()
                        #    - pivot table : affiché comme un espace vide. Compté dans pivot tables.

Type(VAL)               #Parmi :
                        #  - NUM : 1
                        #  - STR : 2
                        #  - BOOL : 4
                        #  - ERROR : 16
                        #  - ARRAY : 64
Error.Type(ERROR)       #Parmi :
                        #  - #NULL!   1
                        #  - #DIV/0!  2
                        #  - #VALUE!  3
                        #  - #REF!    4
                        #  - #NAME?   5
                        #  - #NUM!    6
                        #  - #N/A     7
                        #  - Autre    #N/A
NA()                    #Renvoie #N/A
IsError(VAL)            #Test ERROR
IsErr(VAL)              #Test ERROR, sauf #N/A
IsLogical(VAL)
IsNA(VAL)
IsBlank(VAL)            #Test Empty (vide NUM normal)
IsText(VAL)
IsNonText(VAL)          #Test STR
IsNumber(VAL)           #Test NUM ou DATE (BOOL et "" exclus)
IsRef(VAL)              #Test RANGE

Cell(STR[;RANGE])       #Infos sur CELL supérieur gauche du RANGE, parmi :
                        #  - "address", "col", "row"
                        #  - "contents" : valeur
                        #  - "filename" : fichier Excel contenant RANGE ("" si classeur temp)
                        #  - "format" : formattage (%, currency, etc.) avec un code STR2 spécifique
                        #  - "type" : b si blank, t si texte, v si nombre
                        #  - "width" : column width

N(VAL)                  #Conversion vers NUM. Attention, tout STR -> 0
T(VAL)                  #Renvoie STR si STR, "" sinon.

STR = STR2
STR <> STR2             #Case-insensitive.
Exact(STRv, STRv2)      #Case-sensitive.

                                  ┌───────────┐
                                  │   MATHS   │
                                  └───────────┘

Mod(NUMv,NUMv2)
Sqrt(NUMv)

Abs(NUMv)
Int(NUMv)
Ceiling(NUMv[,UINT])    #UINT est la significance.
Floor(NUMv[,UINT])
Round[Down|Up|]
(NUMv[,UINT])
Trunc(NUMv[,UINT])

Sum(VALv)
SumIf(RANGE,STRv,VALv)  #Pareil, sauf qu'avec des TEST perso STRv (TEST sans partie gauche, ou simple VAL, alors interprété
                        #comme "égal à l'une des VAL de RANGE")
SumProduct(NUMv...)     #Egal à Sum(NUMv * NUMv * ...)

Count(VALv)             #Renvoie nombre de VAL étant un NUM
CountA(VALv)            #Renvoie nombre de VAL étant non-Empty
CountBlank(VALv)        #Inverse
CountIf(VALv, STR)      #Pareil, avec un TEST perso STR (TEST sans partie gauche)
Average(NUMv)
AverageIf(ARGS)         #Comme SumIf

Min(NUMv)
Max(NUMv)
Large(NUMv,NUMv2)       #Renvoie énième nombre maxi.
Small(NUMv,NUMv2)       #Inverse
Rank(NUM,NUMv[,NUM3])   #Renvoie rang de NUM parmi NUMv2 (selon croissant ou décroissant selon NUMv3)

AverageA,MinA,MaxA,VarA,
VarPA,StDevA,StDevPA    #Pareil, mais BOOL coerced en NUM.

Exp(NUMv)
Ln(NUMv)
Log10(NUMv)
Log(NUMv,BASE)
Fact(NUMv)
Combin(NUMv1,NUMv2)     #Binomial coef.
Permut(NUMv1,NUMv2)     #Falling factorial

Even(NUmv)
Odd(NUmv)
Sign(NUMv)              #Positif 1, 0 0 ou négatif -1

Rand()                  #U(0,1)
RandBetween(NUM1,NUM2)  #UInt(ARGS)

Median(NUMv)
Var(NUMv)
VarP(NUMv)              #Variance avec division par n-1, ou n
StDev(NUMv)
StDevP(NUMv)
Covar(NUMv,NUMv2)
Correl(NUMv,NUMv2)

Quartile(NUMv,NUM2)
Percentile(NUMv,NUM2)
PercentRank(NUMv,NUM2)  #Inverse de fonction percentile

Confidence(NUM,NUM2,NM3)#Renvoie confidence interval NUM%, pour N(0,NUM2 / sqrt(NUM3))

DE NOMBREUSES PDF, QDF et CDF DE DISTRI, AINSI QUE DES TESTS COMME T-TEST OU F-TEST

                                  ┌────────────────┐
                                  │   REFERENCES   │
                                  └────────────────┘

Address(UINT1;UINT2
[;UINT3[;STR]])         #Renvoie une STR de l'adresse row UINT1, colonne UINT2, avec référencement UINT3
                        #(1: $A$1, 2: $A1, 3: A$1, 4: A1), pour la WorkSheet STR.
Areas(RANGE)            #Renvoie nombre de RANGE dans RANGE
Rows(RANGE)
Columns(RANGE)          #Pareil avec rows et columns
Row([RANGE])            #Renvoie numéro de premier row dans RANGE (Array Formula)
Column([RANGE])         #Pareil pour column

Indirect(STR[,BOOL])    #Renvoie valeur de RANGE, spécifié par STR.
                        #Si BOOL est TRUE, style "$A$1" (déf), sinon "$R1$C1"

Index(RANGE,UINT1,UINT2 #Renvoie la cellule RANGE2 à l'index UINT1,UINT2 par rapport à RANGE.
[,UINT3])               #Si RANGE a plusieurs areas, alors choisir avec UINT3 quel RANGE (déf : 1)
Offset(RANGE, 4 UINT)   #Pareil, sauf que renvoie un RANGE de hauteur UINT3 et largeur UINT4 (cellule à l'index UINT1,UINT2 est
                        #coin supérieur gauche) (Array Formula)
Lookup(VALv,VALv2,VALv3)#Regarde l'offset de VALv dans VALv2, et utilise celui-ci dans VALv3 pour renvoyer une VALv4.
                        #Ne marcher qu'avec des unidimensionnal RANGE si VALv est RANGE.
HLookup(VALv,RANGE,     #Pareil, sauf que VALv2 est le top row de RANGE, et VALv3 est le row numéro UINT de RANGE.
UINT[,BOOL])            #Si BOOL est TRUE (déf: TRUE), partial matching possible : alors c'est le VAL supérieur la plus proche
                        #qui est renvoyée si pas match exact.
                        #Si FALSE, et que pas trouvé, renvoie #N/A
                        #Pour un lookup bidimensionnel, utilisé Match() pour UINT.
VLookup(ARGS)           #Pareil avec colonnes
Match(VALv,VALv2[,INT]) #Renvoie l'index dans VALv2 (dont RANGE unidimensionnel) du premier élément >= le plus proche, = exact
                        #ou <= le plus proche (selon UINT 1, 0 ou -1
                        #(déf:1)) de VALv. VALv2 doit être trié selon. Globbing possible dans VALv

Transpose(RANGE)        #Transpose la matrice RANGE (Array formula) et la renvoie.

                                  ┌───────────────┐
                                  │   DATABASES   │
                                  └───────────────┘

DMax(RANGE,STR|UINT     #Comme Max(), sauf que l'ARRAY est spécifié par la colonne numéro UINT (ou celle dont le premier
[,RANGE2])              #élément est STR) de RANGE.
                        #De plus, ils sont filtrés par les TEST dans la colonne UINT de RANGE2 (hors premier élément), prenant
                        #la forme de TEST sans la partie gauche.
                        #TEST sont Or'd, et une case vide est un TRUE, rendant ineffectifs autre TEST. Les filtres sont
                        #appliqués à leur propre colonne, mais l'ensemble des
                        #colonnes sont affectées.
                        #RANGE2 doit avoir même top row que RANGE, et doit être non-vide.
DSum,DMin,DCount,
DCountA,DGet,DAverage,
DProduct,DVar[P],
DStDev[P]               #Pareil

                                  ┌────────────┐
                                  │   STRING   │
                                  └────────────┘


Upper(STR)
Lower(STR)
Proper(STR)             #Camel case
Len(STR)                #Length
Mid(STR,NUM1,NUM2)      #Equivaut à ${STR:NUM1:NUM2}
Left(STR,NUM2)
Right(STR,NUM2)         #Pareil depuis gauche ou droite
Replace(STR,NUM1,NUM2,
STR2)                   #Equivaut à ${STR:NUM1:NUM2} = STR2
Substitute(STR,STR2,
STR3[,NUM])             #Remplace sous-strings STR2 dans STR par STR3 NUM fois (déf: infini)

STR & STR2              #Concaténation
Rept(STR,NUM)           #Renvoie concaténation de STR répété NUM fois.
Trim(STR)               #Supprime leading and trailing whitespaces
Clean(STR)              #Supprime tous non-printable chars.

Value(STR)              #Conversion STR -> NUM. Normalement inutile car implicite.

Char(UINT)              #Renvoie charactère ASCII
Code(STR)               #Inverse

Find(STR1,STR2,NUM1)    #Renvoie INDEX de sous-string STR dans STR2, à partir de son index NUM1. Si aucun match, renvoie
                        # #VALUE!
Search(ARGS)            #Pareil, mais case-insensitive

                                  ┌───────────┐
                                  │   AUTRE   │
                                  └───────────┘

Hyperlink(STR,STR2)

Info(STR)               #Infos système parmi :
                        #  - "numfile"    Nombre de worksheet pour APPLICATION courante
                        #  - "recalc"     recalculation mode, Automatic ou Manual.
                        #  - "origin"     Première cell visible en haut à gauche
                        #  - "release"    Excel version
                        #  - "name", "osversion"  OS name, et name et version
                        #  - "directory"  Current directory
                        #  - "totmem", "memused", "memavail" : Mémoire totale, used, available (ne semble pas marcher)
