
         
   BABEL  
         



VERSION ==>                       #7.18.13

GOAL ==>                          #JavaScript source code transformation

FEATURES ==>                      #See JavaScript doc for list of supported features


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RUNTIMES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUMMARY OF BEST SETUP ==>         #PLUGINs|PRESETs:
                                  #  - @babel/preset-env with PLUGIN_OPT: useBuiltins 'usage', corejs '3'
                                  #Production dependencies: @babel/runtime-corejs3

core-js                           #Features that can be polyfilled/ponyfilled
                                  #How to use: require() each feature (see below)
regenerator-runtime               #Generators and async functions
                                  #Polyfills + ponyfills
                                  #How to use: transform using Babel plugin which adds require('regenerator-runtime/...')
                                  #Version 0.13.9
@babel/runtime                    #Features that add syntax, i.e. cannot be polyfilled/ponyfilled
                                  #Ponyfills
                                  #Also include regenerator-runtime
                                  #How to use: transform using Babel plugin which adds require('@babel/runtime/...')

@babel/runtime-corejs3            #core-js + @babel/runtime
                                  #Ponyfills for both.
                                  #Does not include stage-* proposals

ALTERNATIVES ==>                  #Must choose either:
                                  #  - @babel/plugin-transform-runtime: always target ES5, but ponyfills
                                  #  - @babel/preset-env: can target any environment, but polyfills

@babel/plugin-transform-runtime   #Add ponyfills import statements for @babel/runtime[-corejs3]
                                  #Must still:
                                  #  - install production dependency @babel/runtime[-corejs3]
                                  #  - add transform plugins
                                  #PLUGIN_OPTS:
                                  #  - helpers BOOL (def: true):
                                  #     - injects @babel/runtime[-corejs3] imports
                                  #     - without it inlines Babel code, i.e. duplicates
                                  #  - regenerator BOOL (def: true):
                                  #     - injects regenerator-runtime
                                  #  - corejs OBJ|VERSION:
                                  #     - version VERSION (false (def) or 3):
                                  #        - uses @babel/runtime-corejs3 instead of @babel/runtime
                                  #     - proposals BOOL: if false (def), does not include stage-* proposals

@babel/preset-env                 #For @babel/runtime:
                                  #  - add transform plugins
                                  #     - only ones needed for target platform
                                  #  - inject runtime according to @babel/plugin-transform-runtime:
                                  #     - not present: inlines each @babel/runtime feature
                                  #     - present with PLUGIN_OPTS.corejs OBJ|VERSION:
                                  #        - same format as @babel/plugin-transform-runtime except VERSION is false or '3'
                                  #        - require() each @babel/runtime[-corejs3] feature
                                  #For core-js and regenerator-runtime:
                                  #  - according to PLUGIN_OPTS.useBuiltins:
                                  #     - false (def): does nothing, i.e. user must manually require() them
                                  #     - 'entry':
                                  #        - replace: "import 'core-js'; import 'regenerator-runtime/runtime'"
                                  #        - by: all possible require() core-js|regenerator-runtime polyfill
                                  #     - 'usage':
                                  #        - add each needed require() core-js|regenerator-runtime polyfill, in each file
                                  #        - code should not use "import 'core-js|regenerator-runtime'"
                                  #  - polyfills
                                  #Does not include:
                                  #  - ES3/ES5
                                  #  - stage-* proposals
                                  #     - except some implemented stage-3 if PLUGIN_OPTS.shippedProposals true (def: false)
                                  #  - __proto__/setPrototypeOf() PLUGINs (because of their limitations)
                                  #  - Flow, React, TypeScript
                                  #Includes @babel/preset-modules if PLUGIN_OPTS.bugfixes true (def: false)
@babel/preset-modules             #Preset that adds old browsers-specific transforms


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CORE-JS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.24.1

require('core-js')                #Polyfills all
                                  #Prints some annoying messages on postinstall unless ENVVAR ADBLOCK set

require('core-js[-pure]/features/ #Polyfills (unless '-pure'), then returns ponyfills.
 TYPE[/virtual][/FEATURE]')       #For instance methods:
                                  #  - if virtual, must bind this
                                  #  - otherwise must pass this as first arg
require('core-js[-pure]/features/
 instance/FEATURE')               #Instance methods, but must pass as first arg.
require('core-js[-pure]/modules/
 NAME')                           #Low-level parts of each polyfill. Too low-level to use directly.

CORE-JS-COMPAT(OPTS)->OBJ         #Returns compatible core-js FEATUREs against browsers list
                                  #OPTS:
                                  #  - targets ALL_BROWSERS (see browserslist)
                                  #  - filter FEATURE_ARR (def: all) (can be just the beginning of the FEATURE name)
                                  #Returns OBJ:
                                  #  - list FEATURE_ARR
                                  #  - targets.FEATURE.BROWSER_NAME SEMVER

ENVVAR DISABLE_OPENCOLLECTIVE=1   #Remove promotional messages on postinstall


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCH                             #Either:
                                  #  - 'GLOB'
                                  #  - REGEXP
                                  #  - FUNC('FILENAME'|null, { callee.name STR, envName STR })->BOOL

CONF                              #Can be:
                                  #  - BABEL-CORE.transform() OBJ
                                  #  - babel CLI flags
                                  #  - BABEL_ROOT/babel.config.js|cjs|mjs|json OBJ[(CONF_API)]
                                  #     - or --config-file|CONF.configFile PATH
                                  #  - CURRENT_DIR/.babelrc.js|cjs|mjs|json OBJ[(CONF_API)]
                                  #  - CURRENT_DIR/.babelrc JSON5
                                  #  - CURRENT_DIR/package.json PACKAGE.babel OBJ
BABEL_ROOT                        #Starts with CONF.root
                                  #Then uses --root-mode|CONF.rootMode:
                                  #  - 'root' (def): keep as is
                                  #  - 'upward[-optional]': look up [and throw error if cannot find]
CURRENT_DIR                       #Searched in same directory as processed file (CONF.filename) and upwards
                                  #If several found in upward path, merge each of them as a sub-CONF.
                                  #Only used if processed file is child of CONF.babelrcRoots BOOL|MATCH[_ARR]:
                                  #  - def: CONF.root (def: CONF.cwd)
                                  #Can be disabled with --no-babelrc|CONF.babelrc false (def: true)

BABEL-CORE.loadOptions(CONF)->CONF#Normalize CONF (for caching purpose)
BABEL-CORE.loadPartialConfig(CONF)#Same but also take into config files and returns OBJ:
 ->OBJ                            #  - options CONF
                                  #  - babelignore|babelrc|config 'PATH'|undefined
                                  #  - hasFilesystemConfig()->BOOL: whether there are some config files

CONF_API.version                  #Babel version
CONF_API.assertVersion(RANGE)     #
CONF_API.cache.TYPE(...)          #How to cache CONF:
                                  #  - forever()
                                  #  - never(): called for each file
                                  #  - using(FUNC()->STR): use STR as key for this file
                                  #  - invalidate(FUNC()->STR): use STR as key for all files

CONF.extends                      #'MODULE|PATH'. Sub-CONF to merge with lower priority
CONF.overrides                    #CONF_ARR. Sub-CONFs to merge with higher priority

CONF.include|test                 #MATCH[_ARR]. Skip current sub-CONF if matches
CONF.exclude                      #Inverse
--only|ignore
CONF.only|ignore                  #Like CONF.include|exclude except applies to all sub-CONFs not only current one
.babelignore                      #Like CONF.only|ignore. Same syntax as .gitignore
--no-copy-ignored                 #Do not copy ignored files
-x|--extensions                   #'.EXT',... (def: '.es6|js|es|jsx|cjs|mjs').  Only input files with those.
--keep-file-extensions            #
--out-file-extension              #'EXT' of the output files

--env-name                        #'VAR'
CONF.envName                      #Merges CONF.env.VAR.* to CONF.*, allowing environment-specific configuration
                                  #Def: ENVVAR BABEL_ENV, ENVVAR NODE_ENV or 'development'
CONF_API.env()->'ENVNAME'         #
CONF_API.env('ENVNAM'[_ARR])->BOOL#

CONF.cwd                          #Def: process.cwd()
-f|--filename
CONF.filename                     #'FILE' name being compiled
CONF.filenameRelative             #'PATH' being compiled (def: CONF.cwd + CONF.filename)

CONF.caller                       #OBJ metadata passed to lower-level utilities
                                  #Only available properties at the moment:
                                  #  - supportsStaticESM BOOL (def: false): produce ES modules in output
CONF_API.caller(FUNC(CALLER))     #

--no-highlight-code
CONF.highlightCode                #BOOL (def: true): use colors in error messages

CONF.parserOpts                   #OPTS to pass to @babel/parser
CONF.generatorOpts                #OPTS to pass to @babel/generator
CONF.wrapPluginVisitorMethod      #Wrap parser visitor method (see online doc)

CONF.showConfig                   #BOOL (def: false). Prints config
CONF.showConfigForPath            #Config 'PATH' (def: ENVVAR BABEL_SHOW_CONFIG_FOR_PATH, or none) to limit CONF.showConfig


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MINIFY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--auxiliary-comment-before|after
CONF.auxiliaryCommentBefore|After #STR. Comment added before any file, e.g. 'istanbul ignore next'

--no-comments                     #BOOL (def: false). If true, remove comments
CONF.comments                     #Unless CONF.minified true, @license|@preserve comments are always kept
CONF.shouldPrintComment(COMMENT)
 ->BOOL                           #Same
--compact                         #BOOL or 'auto' (def) (i.e. true if input >500KiB)
CONF.compact                      #Minify whitespaces
--minified                        #BOOL (def: false).
CONF.minified                     #Minify whitespaces, semi-colons, parenthesis, literals.
--retain-lines
CONF.retainLines                  #BOOL (def: false). Try to retain tokens on the same lines (so that stack trace match without source maps)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SOURCE MAPS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--input-source-map                #SOURCE_MAP, PATH to it or true (def) (check //# sourceMappingURL)
CONF.inputSourceMap               #Source maps from input files
-s|--source-maps                  #Whether|how to produce source maps for output:
CONF.sourceMaps                   #  - true (def): as separate file
                                  #  - 'inline': inline source map
                                  #  - 'both'
--source-file-name
CONF.sourceFileName               #'SOURCE_PATH'. Source map 'sources[0]' field (def: CONF.filename)
--source-root
CONF.sourceRoot                   #'DIR'. Source map 'sourceRoot' field
--source-map-target
CONF.sourceMapTarget              #'COMPILED_FILENAME'. Source map 'file' field.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@babel/cli                        #babel CLI

babel [FILE|DIR]                  #Def: stdin
--out-file FILE2                  #Output to single bundled file (def: stdout)
--out-dir DIR2                    #
--relative                        #Make --out-dir relative to input FILE|DIR

--delete-dir-on-start             #rm -r --out-dir before starting

-D|--copy-files                   #Copy files that cannot be compiled
--include-dotfiles                #Include dotfiles with --copy-files

--watch                           #
--skip-initial-build              #With --watch, do not build before watching


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@babel/core                       #As Node module
                                  #Is a peerDependency for all other packages, i.e. must be installed as a devDependency

BABEL-CORE.transformAsync         #Parse + transform.
 ('CODE'[, CONF])->PROMISE_OBJ    #OBJ:
                                  #  - code STR2 (unless CONF.code false)
                                  #  - map STR3
                                  #  - ast (unless CONF.ast false)
BABEL-CORE.transformFileAsync
 ('PATH'[, CONF])->PROMISE_OBJ    #Same with a file
BABEL-CORE.transformFromAstAsync
 (NODE, 'CODE'[, CONF])
 ->PROMISE_OBJ                    #Same with AST NODE

BABEL-CORE.parse('CODE'[, CONF])
 ->NODE                           #Like @babel/parse except also take into account CONF, e.g. PLUGINs and source maps

BABEL-CORE.transform[File|FromAst]
 |parse(..., FUNC(ERROR, VAL))    #Same but with async callback
BABEL-CORE.transform
 [File|FromAst]Sync|parse(...)
 ->VAL                            #Same but with sync


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOOKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require("@babel/register")[(CONF)] #Patch require() so it uses Babel on *.es6|es|jsx|js|cjs|mjs
                                  #Should not be used in library, as it will patch require() for other libraries too.
                                  #CONF.ignore defaults to 'node_modules/**'
                                  #For dev purpose only
ENVVAR BABEL_DISABLE_CACHE=1
CONF.cache                        #BOOL (def: true)
ENVVAR BABEL_CACHE_PATH=DIR       #Def: /tmp

@babel/node
babel-node [--BABEL-OPT]          #Same as Node REPL, but compiling ES6 first.
 [-- --NODE-OPT ...]              #For dev purpose only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            USAGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-BABEL([CONF])                #Version 8.0.0
                                  #CONF also:
                                  #  - filename[Relative]|sourceFileName not needed
                                  #  - sourcemaps: need to use SOURCEMAPS.init|write() before|after

grunt-babel                       #Grunt plugin (5.0.1)
                                  #  - TASK "babel"
                                  #  - TARGET src, dest
                                  #  - options OPT

requirejs-babel                   #Version 0.0.6
                                  #Plugin adding "es6!FILE"
                                  #Must use CONFVAR paths.es6 PATH_TO_ES6 and paths.babel PATH_TO_BABEL

babelify[.configure(OPT)]         #Browserify transform (6.1.2)

MOCHA ==>                         #Can use --compilers js:babel/register

karma-babel-preprocessor          #Version 5.2.1
                                  #PLUGIN "babel", CONFIGVAR babelPreprocessor OBJ:
                                  #  - options OPT: same as above
                                  #  - [source]filename(FILE)->STR

BABEL-CONNECT(OBJ2)               #Express MDW (6.0.1) that compile static assets. OBJ2:
                                  #  - options OPT: same as above
                                  #  - src|dest DIR
                                  #  - ignore DIR

JADE-BABEL([OPT])                 #Jade filter (5.0.0), used as :babel


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--source-type                     #Modules syntax in output
CONF.sourceType                   #Among:
                                  #  - 'module' (def):
                                  #     - allows CommonJS or ES modules as input, and keep them
                                  #     - transform plugins produce ES modules as output
                                  #        - can be further processed by @babel/plugin-transform-modules-*
                                  #     - imply strict mode
                                  #  - 'script':
                                  #     - allows only CommonJS as input, and keep it
                                  #     - transform plugins produce CommonJS as output
                                  #        - cannot be further processed by @babel/plugin-transform-modules-*
                                  #     - does not imply strict mode
                                  #  - 'unambiguous':
                                  #     - use 'module' if there are import|export statements, 'script' otherwise
                                  #     - i.e. does not work with files which do not require nor export anything

COMMONJS VS ESM ==>               #Named exports are conceptually similar in CommonJS and ESM.
                                  #But default exports are different:
                                  #  - CommonJS: whole export (module.exports)
                                  #  - ESM: export 'default' property
                                  #This is problematic when:
                                  #  - CommonJS imports ESM, or vice-versa
                                  #  - mixing default export and named exports (should avoid)
                                  #Babel solution:
                                  #  - ESM exports are flagged with `__esModule: true` property
                                  #  - default import:
                                  #     - if package is CommonJS: import it whole
                                  #     - if package is ESM: import its 'default' property
                                  #  - * import:
                                  #     - if package is CommonJS: import it whole, and add self reference as 'default' property
                                  #     - if package is ESM: import it whole, including 'default' property (if any)
                                  #Consequences:
                                  #  - packages with ESM exports need to be require('PACKAGE').default in CommonJS
                                  #Workarounds:
                                  #  - when doing a default export, do it in CommonJS instead
                                 ##  - babel-plugin-add-module-exports:
                                 ##     - adds module.exports = exports['default'] at end
                                 ##     - i.e. force CommonJS default export, and remove named export 'default'
                                 ##     - not well maintained

@babel/plugin-transform-modules-* #Modules syntax in output
modules-commonjs                  #PLUGIN_OPTS:
                                  #  - strictMode BOOL (def: true): add 'use strict'
                                  #  - lazy:
                                  #     - move require() call down to where the variable is used
                                  #     - can be:
                                  #        - false (def)
                                  #        - true: for require('MODULE') but not for require('PATH')
                                  #        - 'PATH'_ARR
                                  #        - FUNC('PATH')->BOOL
                                  #  - strict BOOL (def: false):
                                  #     - do not add EXPORT.__esModule true
                                  #     - i.e. exports will be imported by Babel as if they were CommonJS
                                  #     - default export still use `module.exports.default` property though
                                  #  - noInterop BOOL (def: false):
                                  #     - do not check IMPORT.__esModule
                                  #     - i.e. always import packages as if they were CommonJS
                                  #  - assumptions.enumerableModuleMeta BOOL (def: false): do not make EXPORT.__esModule non-configurable|writable
modules-amd                       #Same PLUGIN_OPTS  as module-commonjs
modules-umd                       #PLUGIN_OPTS:
                                  #  - globals.MODULE|PATH 'VAR': global variable names (def: camelCase of basename(MODULE|PATH))
                                  #  - exactGlobals BOOL (def: true): use MODULE|PATH instead of basename(MODULE|PATH)
modules-systemjs                  #

AMD/UMD/SYSTEMJS ==>              #Following are for amd|umd|systemjs
-M|--module-id
CONF.moduleId                     #MODULE. Custom module name
CONF.getModuleId('MODULE')->MODULE#Custom module name
--module-root
CONF.moduleRoot                   #STR. Prefixes module name.
CONF.modulesIds                   #BOOL (def: false): if true, add module names in definitions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRESETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--presets PRESET,...
CONF.presets                      #PRESET_ARR (first has priority)
PRESET                            #Same syntax as PLUGIN, except 'plugin' is 'preset' instead
                                  #Dynamic CONF as FUNC(CONF_API, PRESET_OPTS)->CONF:

@babel/preset-env                 #Preset adding plugins, ponyfills and polyfills based on browserslist, caniuse-db and kangax/compat-table
                                  #See above for which ones are included, and how.
                                  #PLUGIN_OPT:
                                  #  - configPath 'DIR': browserslist's CONF.path
                                  #  - ignoreBrowsersListConfig BOOL (def: false): ignore BROWSERFILE
                                  #  - forceAllTransforms BOOL (def: false): force using all transforms, regardless of "targets"
                                  #  - include|exclude PLUGIN_STR|REGEXP_ARR
                                  #  - modules 'amd|umd|systemjs|commonjs|cjs|auto'|false (def: 'auto'): use @babel/plugin-transform-*
                                  #     - if false, do not transpile modules, e.g. preserve ES modules
                                  #  - spec BOOL (def: false): always use PLUGIN_OPT.spec
                                  #  - assumptions OBJ (def: {}): always use PLUGIN_OPT.assumptions OBJ
                                  #  - debug true: prints which plugins will be used
CONF.targets                      #ALL_BROWSERS (see browserslist doc)
                                  #Def: ES<=2017
CONF.browserlistEnv               #browserlist's OPTS.env
CONF.browserslistConfigFile       #browserlist's OPTS.path


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--plugins PRESET,...
CONF.plugins                      #PLUGIN_ARR
PLUGIN_REF                        #Either:
                                  #  - 'MODULE|PATH'
                                  #  - require('MODULE|PATH') value
                                  #'MODULE' shorthands:
                                  #  - '[@SCOPE/]babel-plugin-NAME' -> 'NAME'
                                  #  - '@babel/plugin-NAME' -> '@babel/NAME'
                                  #  - '@SCOPE/babel-plugin' -> '@SCOPE'
                                  #PLUGIN_REF construction can be cached using BABEL-CORE.createConfigItem() (see online doc)
PLUGIN                            #Either:
                                  #  - PLUGIN_REF
                                  #  - [PLUGIN_REF[, PLUGIN_OPTS[, 'NAME']]]
                                  #Single transformation
                                  #If PLUGIN_OPTS is false, disables plugin
                                  #Order: CONF.plugins (in array order) before CONF.presets (in reverse array order)

PLUGIN_OPT.spec                   #BOOL (def: false)
                                  #Use slower but more spec-compliant transformations
                                  #Common to many PLUGINs.
PLUGIN_OPT.assumptions.VAR        #BOOL (def: false)
                                  #Use faster but less spec-compliant transformations
                                  #Common to many PLUGINs.

@babel/plugin-TYPE-*              #Babel core plugins. TYPE:
                                  #  - 'syntax':
                                  #     - change parsing, but does not transform
                                  #     - automatically included by transform PLUGINs
                                  #  - 'transform'
                                  #  - 'proposal': stage-3|2|1|0
                                  #All the following packages names are actually prepended with '@babel/plugin-' (except if ##)

ES3 ==>                           #
transform-member-expression-
 literals                         #VAR['RESERVED_WORD']
transform-property-literals       #{ "RESERVED_WORD" }
transform-reserved-words          #const RESERVED_WORD

ES5 ==>                           #
transform-property-mutators       # { get|set VAR }
transform-instanceof              #instanceof
transform-jscript                 #IE-specific quirks

ES2015 ==>                        #
transform-arrow-functions         #() => {}
transform-block-scoped-functions  #Non-top-level function declaration
transform-block-scoping           #Non-top-level declaration
transform-classes                 #CLASS
transform-computed-properties     #{ [EXPR] }
transform-destructuring           #OBJ|ARR destructuring
transform-duplicate-keys          #OBJ duplicate keys
transform-for-of                  #for of
transform-function-name           #Add proper FUNC.name
transform-literals                #0b... 0o... \u...
transform-new-target              #new.target
transform-object-super            #super
transform-parameters              #Rest params + default param + destructuring params
transform-shorthand-properties    #{ PROP }
transform-spread                  #Array spread
transform-sticky-regex            #/REGEX/y
transform-template-literals       #`...`
transform-typeof-symbol           #typeof SYM
transform-unicode-regex           #/REGEX/u
transform-object-assign           #Object.assign()
transform-proto-to-assign         #OBJ.__proto__
                                  #Does not work when OBJ.PROP is assigned (as opposed to OBJ.__proto__.PROP)
transform-object-set-prototype-   #Object.setPrototypeOf()
 of-to-assign                     #Same restrictions as OBJ.__proto__
transform-strict-mode             #'use strict'
babel-plugin-tailcall-
 optimization                    ##Tail cail optimization

ES2016 ==>                        #
transform-exponentiation-operator #**

ES2017 ==>                        #
transform-async-to-generator      #async FUNC

ES2018 ==>                        #
transform-regenerator             #FUNC*
syntax-async-generators
proposal-async-generator-
 functions                        #async FUNC*
transform-dotall-regex            #/REGEXP/s
syntax-object-rest-spread
proposal-object-rest-spread       #{ ...OBJ }
syntax-optional-catch-binding
proposal-optional-catch-binding   #try {} catch {}
proposal-unicode-property-regex   #\p{...}
syntax-json-strings
proposal-json-strings             #U+2028|2029 allowed in STR
transform-named-capturing-groups-
 regex                            #(?<GROUP>) \k<GROUP>

ES2019 BUT CONSIDERED STAGE ==>   #
syntax-dynamic-import
proposal-dynamic-import           #import(...)

ES2021 ==>                        #
syntax-numeric-separator
proposal-numeric-separator        #NNN_NNN_NNN
syntax-export-namespace-from
proposal-export-namespace-from    #export * as VAR2 from 'MDL'
syntax-logical-assignment-
 operators
proposal-logical-assignment
 -operators                       #||= &&=

STAGE 3 ==>                       #
syntax-class-properties
proposal-class-properties         #class { [static] VAR = VAL }
proposal-private-methods          #class { [static] #VAR = VAL }
syntax-bigint                     #NUMn (syntax-only)
syntax-import-meta                #import.meta (syntax-only)
syntax-nullish-coalescing-
 operator
proposal-nullish-coalescing
 -operator                        #??
syntax-top-level-await            #

STAGE 2 ==>                       #
syntax-decorators
proposal-decorators               #@DECORATOR
syntax-function-sent
proposal-function-sent            #FUNC.sent
syntax-throw-expressions
proposal-throw-expressions        #throw VAL as EXPR

STAGE 1 ==>                       #
syntax-do-expressions
proposal-do-expressions           #do { ... }
syntax-export-default-from
proposal-export-default-from      #export DEFAULT_VAL from 'MDL'
syntax-optional-chaining
proposal-optional-chaining        #OBJ?.PROP
syntax-pipeline-operator
proposal-pipeline-operator        #VAL |> FUNC

STAGE 0 ==>                       #
syntax-function-bind
proposal-function-bind            #OBJ::FUNC

FLOW ==>                          #See flow doc

TYPESCRIPT ==>                    #
syntax-typescript                 #PLUGIN_OPTS:
                                  #  - isTSX BOOL (def: if *.tsx)
transform-typescript              #Transpile TypeScript:
                                  #  - strip TYPEs
                                  #  - non-const ENUM
                                  #  - CLASS-specific features
                                  #  - NAMESPACE:
                                  #     - only if PLUGIN_OPTS.allowNamespaces true (def: false)
                                  #     - including NAMESPACE merging
                                  #But no:
                                  #  - type checking (should use tsc before)
                                  #  - tsc CONF options (should not be needed)
                                  #  - export = VAL nor import VAL = require() (CommonJS default export)
                                  #  (implies --isolatedModules, so:)
                                  #  - const ENUM
                                  #  - exporting an imported TYPE
                                  #     - reason: Babel works file-wise so does not know an imported TYPE is a TYPE
                                  #     - however the following work:
                                  #        - importing a TYPE and using it without exporting it
                                  #        - exporting a non-imported TYPE
                                  #     - i.e. workaround: re-declaring imported TYPE before exporting it
                                  #        import { T as T_ } from './types.ts'
                                  #        export type T = T_
                                  #PLUGIN_OPTS:
                                  #  - isTSX BOOL (def: if *.tsx)
                                  #  - jsxPragma STR (def: 'React'): like tsc --jsxFactory
                                  #  - onlyRemoveTypeImports BOOL (def: false): like the default value of TypeScript --importsNotUsedAsValues
                                  #    Recommended to true
                                  #  - allowDeclareFields BOOL (def: false): only remove TYPE if "declare" is before
                                  #Should be before other transforms.
                                  #Only on *.ts[x]
@babel/preset-typescript          #Includes only @babel/plugin-transform-typescript
                                  #Same PLUGIN_OPTS:
                                  #  - also allExtensions BOOL (def: false): whether to ignore PLUGIN_OPTS.isTSX
                                  #  - no allowNamespaces

JSX ==>                           #See JSX doc

V8 ==>                            #
syntax-v8intrisics                #Internal %FUNC() from V8 (such as %DebugPrint())
                                  #Enabled in Node with --allow-natives-syntax


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CORE-JS FEATURES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ES3 ==>                           #
array/concat                      #
array/splice                      #
array/join                        #
array/slice                       #
number/to-fixed                   #
number/to-precision               #
object/to-string                  #
parse-float                       #
parse-int                         #

ES2015 ==>                        #
array-buffer/constructor          #
array-buffer/is-view              #
array-buffer/slice                #
array/copy-within                 #
array/entries                     #
array/every                       #
array/fill                        #
array/filter                      #
array/find                        #
array/find-index                  #
array/for-each                    #
array/from                        #
array/index-of                    #
array/is-array                    #
array/iterator                    #
array/keys                        #
array/last-index-of               #
array/map                         #
array/of                          #
array/reduce                      #
array/reduce-right                #
array/some                        #
array/sort                        #
array/values                      #
data-view                         #
date/now                          #
date/to-iso-string                #
date/to-json                      #
date/to-primitive                 #
date/to-string                    #
function/bind                     #
function/has-instance             #
function/name                     #
json/to-string-tag                #
map                               #
math/acosh                        #
math/asinh                        #
math/atanh                        #
math/cbrt                         #
math/clz32                        #
math/cosh                         #
math/expm1                        #
math/fround                       #
math/hypot                        #
math/imul                         #
math/log10                        #
math/log1p                        #
math/log2                         #
math/sign                         #
math/sinh                         #
math/tanh                         #
math/to-string-tag                #
math/trunc                        #
number/constructor                #
number/epsilon                    #
number/is-finite                  #
number/is-integer                 #
number/is-nan                     #
number/is-safe-integer            #
number/max-safe-integer           #
number/min-safe-integer           #
number/parse-float                #
number/parse-int                  #
object/assign                     #
object/create                     #
object/define-properties          #
object/define-property            #
object/freeze                     #
object/get-own-property-descriptor#
object/get-own-property-names     #
object/get-prototype-of           #
object/is                         #
object/is-extensible              #
object/is-frozen                  #
object/is-sealed                  #
object/keys                       #
object/prevent-extensions         #
object/seal                       #
object/set-prototype-of           #
promise                           #
reflect/apply                     #
reflect/construct                 #
reflect/define-property           #
reflect/delete-property           #
reflect/get                       #
reflect/get-own-property-
 descriptor                       #
reflect/get-prototype-of          #
reflect/has                       #
reflect/is-extensible             #
reflect/own-keys                  #
reflect/prevent-extensions        #
reflect/set                       #
reflect/set-prototype-pf          #
regexp/constructor                #
regexp/flags                      #
regexp/match                      #
regexp/replace                    #
regexp/search                     #
regexp/split                      #
regexp/sticky                     #
regexp/test                       #
regexp/to-string                  #
set                               #
string/anchor                     #
string/big                        #
string/blink                      #
string/bold                       #
string/code-point-at              #
string/ends-with                  #
string/fixed                      #
string/fontcolor                  #
string/fontsize                   #
string/from-code-point            #
string/includes                   #
string/italics                    #
string/iterator                   #
string/link                       #
string/match                      #
string/raw                        #
string/repeat                     #
string/replace                    #
string/search                     #
string/small                      #
string/split                      #
string/starts-with                #
string/strike                     #
string/sub                        #
string/sup                        #
string/trim                       #
symbol                            #
symbol/for                        #
symbol/get-own-property-symbols   #
symbol/has-instance               #
symbol/is-concat-spreadable       #
symbol/iterator                   #
symbol/key-for                    #
symbol/match                      #
symbol/replace                    #
symbol/search                     #
symbol/species                    #
symbol/split                      #
symbol/to-primitive               #
symbol/to-string-tag              #
symbol/unscopables                #
typed-array/copy-within           #
typed-array/entries               #
typed-array/every                 #
typed-array/fill                  #
typed-array/filter                #
typed-array/find                  #
typed-array/find-index            #
typed-array/float32-array         #
typed-array/float64-array         #
typed-array/for-each              #
typed-array/from                  #
typed-array/includes              #
typed-array/index-of              #
typed-array/int16-array           #
typed-array/int32-array           #
typed-array/int8-array            #
typed-array/iterator              #
typed-array/join                  #
typed-array/keys                  #
typed-array/last-index-of         #
typed-array/map                   #
typed-array/of                    #
typed-array/reduce                #
typed-array/reduce-right          #
typed-array/reverse               #
typed-array/set                   #
typed-array/slice                 #
typed-array/some                  #
typed-array/sort                  #
typed-array/subarray              #
typed-array/to-locale-string      #
typed-array/to-string             #
typed-array/uint16-array          #
typed-array/uint32-array          #
typed-array/uint8-array           #
typed-array/uint8-clamped-array   #
typed-array/values                #
weak-map                          #
weak-set                          #

ES2016 ==>                        #
array/includes                    #

ES2017 ==>                        #
object/define-getter              #
object/define-setter              #
object/entries                    #
object/get-own-property-
 descriptors                      #
object/lookup-getter              #
object/lookup-setter              #
object/values                     #
string/pad-end                    #
string/pad-start                  #
symbol/async-iterator             #

ES2018 ==>                        #
promise/finally                   #

ES2019 ==>                        #
array/flat                        #
array/flat-map                    #
json/stringify                    #
object/from-entries               #
string/match-all                  #
string/trim-end                   #
string/trim-start                 #
symbol/description                #
promise/all-settled               #
global-this                       #

STAGE 3 ==>                       #
promise/any                       #
string/replace-all                #

STAGE 2 ==>                       #
array/is-template-object          #
[async-]iterator/as-indexed-pairs #
[async-]iterator/drop             #
[async-]iterator/every            #
[async-]iterator/filter           #
[async-]iterator/find             #
[async-]iterator/flat-map         #
[async-]iterator/for-each         #
[async-]iterator/from             #
[async-]iterator/map              #
[async-]iterator/reduce           #
[async-]iterator/some             #
[async-]iterator/take             #
[async-]iterator/to-array         #
map/upsert                        #
set/difference                    #
set/intersection                  #
set/symmetric-difference          #
set/union                         #
set/is-disjoint-from              #
set/is-subset-of                  #
set/is-superset-of                #
symbol/dispose                    #
symbol/async-dispose              #
weak-map/upsert                   #

STAGE 1 ==>                       #
array/last-index                  #
array/last-item                   #
composite-key                     #
composite-symbol                  #
map/delete-all                    #
map/every                         #
map/filter                        #
map/find                          #
map/find-key                      #
map/from                          #
map/group-by                      #
map/includes                      #
map/key-by                        #
map/key-of                        #
map/map-keys                      #
map/map-values                    #
map/merge                         #
map/of                            #
map/reduce                        #
map/some                          #
map/update                        #
math/clamp                        #
math/deg-per-rad                  #
math/degrees                      #
math/fscale                       #
math/iaddh                        #
math/imulh                        #
math/isubh                        #
math/radians                      #
math/rad-per-deg                  #
math/scale                        #
math/seeded-prng                  #
math/signbit                      #
math/umulh                        #
number/from-string                #
object/iterate-entries            #
object/iterate-keys               #
object/iterate-values             #
observable                        #
promise/try                       #
set/add-all                       #
set/delete-all                    #
set/every                         #
set/filter                        #
set/find                          #
set/from                          #
set/join                          #
set/map                           #
set/of                            #
set/reduce                        #
set/some                          #
string/code-points                #
symbol/observable                 #
symbol/pattern-match              #
weak-map/delete-all               #
weak-map/from                     #
weak-map/of                       #
weak-set/add-all                  #
weak-set/delete-all               #
weak-set/from                     #
weak-set/of                       #

STAGE 0 ==>                       #
queue-microtask                   #
reflect/define-metadata           #
reflect/delete-metadata           #
reflect/get-metadata              #
reflect/get-metadata-keys         #
reflect/get-own-metadata          #
reflect/get-own-metadata-keys     #
reflect/has-metadata              #
reflect/has-own-metadata          #
reflect/metadata                  #
string/at                         #
url                               #
url/to-json                       #
url-search-params                 #

DOM ==>                           #
dom-collections/for-each          #
dom-collections/iterator          #
set|clear-immediate               #
set-timeout|interval              #
