
            
   PRETTIER  
            



ALTERNATIVES ==>                  #For:
                                  #  - JavaScript:
                                  #     - eslint --fix (prefered):
                                  #        - very maintained, big ecosystem
                                  #        - not only focused on formatting but also on code errors
                                  #        - very flexible, lots of features
                                  #     - prettier (prefered):
                                  #        - very maintained, big ecosystem
                                  #        - very opinionated
                                  #     - js-beautify: more flexible
                                  #     - uglify: less features
                                  #     - esformatter (and jsfmt): not maintained
                                  #     - es-beautifier: not maintained

VERSION ==>                       #2.7.1

OPINIONATED ==>                   #By design prettier does not allow configuration.
                                  #There are only few configuration options available for JavaScript

CORRECTNESS ==>                   #Is very conservative in transformations, e.g. does not add keywords, braces, etc.

GLOB                              #Uses minimatch (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CONF              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Uses Cosmiconfig, i.e.
                                  #  - prettier --config JSON|YAML|JS_FILE
                                  #  - ./[../.../]package.json "prettier" CONF|'PACKAGE'
                                  #  - ./[../.../].prettierrc JSON|YAML_FILE
                                  #  - ./[../.../].prettierrc.json|json5|y[a]ml|toml|js JSON|YAML|TOML|JS_FILE
                                  #     - .prettierrc.json JSON can be just 'PACKAGE'
                                  #  - ./[../.../]prettier.config.js|cjs JS_FILE
                                  #CONF_FILE properties:
                                  #  - camelCase
                                  #  - PROPs ARR if property can be added several times
                                  #  - BOOL 'PROP' if --no-PROP
--config-precedence STR           #Priority order among:
                                  #  - 'cli-override' (def): --CONF, CONF_FILE
                                  #  - 'file-override': CONF_FILE, --CONF
                                  #  - 'prefer-file': CONF_FILE only, or --CONF only
--no-config                       #

CONF.overrides                    #Sub-CONF for specific files, with OBJ_ARR:
                                  #  - files 'GLOB'[_ARR]
                                  #  - excludedFiles 'GLOB'[_ARR]
                                  #  - options CONF
--find-config-path FILE           #Find which CONF_FILE will be picked for this FILE

--no-editorconfig                 #Otherwise .editorconfig will be used for --print-width, --tab-width, --use-tabs, --single-quote
                                  #and --end-of-line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IGNORE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


.prettierignore                   #Like .gitignore but for prettier
--ignore-path FILE                #Instead of '.prettierignore'
--with-node-modules               #Do not ignore node_modules/**

// prettier-ignore[-start|end]
/* prettier-ignore[-start|end] */
<!--
 prettier-ignore[-start|end] -->  #In comments, for next line or for a range

--require-pragma                  #Only beautify files that start with comment @prettier or @format
                                  #In JavaScript, must be JSDoc
--insert-pragma                   #Add comment @format in beginning of files

--range-start|end NUM             #Only beautify part of the files, from specific character offsets
                                  #For IDE plugins
--cursor-offset NUM               #Prints offset where character at offset NUM would be after beautification

--file-info FILE                  #Instead of beautifying, prints OBJ: ignored BOOL, inferredParser 'PARSER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prettier [FILE|DIR|'GLOB'...]     #Prints to stdout
                                  #Def: stdin
--no-error-on-unmatched-pattern   #No error when no input files
--stdin-filepath FILE             #
--write|w                         #Edit in-place

--cache                           #Cache each file. Invalidated if one of the following changes:
--cache-strategy=STR              #  - (if cache-strategy 'content' (def)): file contents
                                  #  - (if cache-strategy 'metadata'): file timestamps
                                  #  - CONF
                                  #  - Prettier version
                                  #  - Node.js version
                                  #Cached in node_modules/prettier/.prettier-cache

-l                                #Dry-run printing files that can be beautified
--list-different                  #Exit code 1 if there are some files.
--check                           #Same with more human-friendly output
--debug-check                     #Dry-run printing whether beautification might change code correctness

--no-color                        #
--loglevel STR                    #Can be 'silent', 'error', 'warn', 'log' (def), 'debug'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.filepath                     #Must be specified with the following
PRETTIER.format('SOURCE'[, CONF])
 ->'SOURCE'                       #Beautifies
PRETTIER.formatWithCursor         #Same but must use CONF.cursorOffset NUM and will return
 ('SOURCE', CONF)->OBJ            #OBJ: formatted 'SOURCE', cursorOffset NUM
PRETTIER.check('SOURCE'[, CONF])
 ->BOOL                           #Whether is already beautified, similar to --list-different

PRETTIER.resolveConfig[.sync]     #Similar to --find-config-file but returning CONF object
 ('FILE'[, CONF])                 #PROMISE is rejected on parsing errors.
 ->PROMISE_CONF|null              #Can also use CONF: useCache BOOL (def: true)
PRETTIER.clearConfigCache()       #

PRETTIER.getFileInfo[.sync]
 ('PATH'[, CONF])->[PROMISE_]OBJ  #Like --file-info


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LANGUAGES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--parser STR|MODULE               #Can be:
                                  #  - 'babel' (def) (@babel/parser)
                                  #  - 'typescript' (@typescript-eslint/parser)
                                  #  - 'espree'
                                  #  - 'meriyah'
                                  #  - 'acorn'
                                  #  - '[babel-]flow'
                                  #     - "babel-flow" parsed ambiguous syntax as JavaScript, "flow" as Flow
                                  #  - 'json'
                                  #  - 'json5'
                                  #  - 'json-stringify' (like JSON.stringify()) (used for package.json)
                                  #  - 'yaml'
                                  #  - 'css'
                                  #  - 'less'
                                  #  - 'scss'
                                  #  - 'graphql'
                                  #  - 'markdown'
                                  #  - 'vue'
                                  #  - 'angular'
                                  #  - 'lwc' (Salesforce "Lightning Web Components")
                                  #  - 'glimmer' (Handlebars)
--ignore-unknown|u                #Do not error if no parser can be found

--plugin NAME|FILE                #A plugin is responsible for beautifying some specific syntax, by parsing then
                                  #reprinting it.
                                  #It reprints to an intermediary format (called "doc") not to a string.
                                  #Can be added several times.
                                  #Looked in node_modules/ under @prettier/plugin-NAME or prettier-plugin-NAME
                                  #See online doc for how to develop own plugin
--plugin-search-dir DIR           #Def: node_modules
--no-plugin-search                #

--embedded-language-formatting=STR#'auto' (def) or 'off'
                                  #Whether to format code inside strings


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        COMMON OPTIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--print-width NUM                 #Def: 80
--tab-width NUM                   #Def: 2
--use-tabs                        #Def: false
--end-of-line auto|[cr][lf]       #Def: lf

--single-quote                    #Def: double quote except if STR contains double quotes
--no-bracket-spacing              #{ ... } instead of {...}
--trailing-comma STR              #Can be 'none', 'es5' (only if ES5) (def), 'all'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          JAVASCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is @babel/parser

--no-semi                         #Instead of always. Except when needed
--arrow-parens STR                #Can be:
                                  #  - 'avoid': VAL => {...}
                                  #  - 'always' (def): (VAL) => {...}
--quote-props STR                 #Quotes around { VAR }. Can be:
                                  #  - 'as-needed' (def): only when required
                                  #  - 'preserve': do not change
                                  #  - 'consistent': must all have same quoting

--jsx-single-quote                #In JSX, instead of double quotes

ESLINT-CONFIG-PRETTIER ==>       ##ESLint config that:
                                 ##  - turns off all ESLint rules of things handled by Prettier.
                                 ##  - should be last in CONF.extends to make sure it is not overridden
                                 ##  - also contains files specific for ESLint rules with eslint-plugin-flowtype,
                                 ##    eslint-plugin-react, eslint-plugin-standard, eslint-plugin-unicorn, eslint-plugin-vue,
                                 ##    eslint-plugin-babel, @typescript-eslint/eslint-plugin
                                 ##Also contains a CLI which checks if current ESLint config might conflict with Prettier.
                                 ##Version 8.5.0

ESLINT-PLUGIN-PRETTIER ==>       ##Can also use { extends: 'prettier/recommended' } as a shortcut for
                                 ##{ extends: ['prettier'], plugins: 'prettier', rules: { prettier/prettier: 2 } }
                                 ##Version 4.2.1
prettier/prettier [CONF] [OBJ]   ##ESLint rule that lints against prettier rules.
                                 ##Can use --fix
                                 ##CONF is prettier CONF
                                 ##OBJ:
                                 ##  - usePrettierrc BOOL (def: true)
                                 ##  - fileInfoOptions CONF: passed to PRETTIER.getFileInfo()

PRETTIER-ESLINT ==>              ##Node module that performs prettier then eslint --fix (or inverse order)
                                 ##Version 8.8.1
PRETTIER-ESLINT-CLI ==>          ##CLI wrapping prettier-eslint
                                 ##Version 4.7.1
PRETTIER-STANDARD ==>            ##CLI/Node module that performs prettier-eslint --fix using eslint-config-standard
                                 ##(only the rules that are fixable)
                                 ##Version 8.0.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             JSON              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Actually uses same as JavaScript


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             YAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is eemeli's yaml
                                  #Can also be as front-matter in CSS/Markdown

--prose-wrap STR                  #See Markdown


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is parse5
                                  #Also applies in JavaScript html`STR` (template string function)

--html-whitespace-sensitivity STR #Tries to keep whitespaces when CSS display is `inline`
                                  #  - 'css' (def): use the default CSS display of the HTML tag
                                  #  - 'strict': always keep whitespaces
                                  #  - 'ignore': never keep whitespaces
                                  #Can also use <!-- display: block|inline --> HTML comment
--bracket-same-line               #closing > not a newline
--single-attribute-per-line       #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MARKDOWN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is remark
                                  #Supports MDX

--prose-wrap STR                  #Newlines for max width
                                  #Can be:
                                  #  - 'preserve' (def)
                                  #  - 'always'
                                  #  - 'never'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GRAPHQL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is GraphQL-js
                                  #Influenced by --no-bracket-spacing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CSS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parsers are postcss-selector|values|media-query-parser, postcss-less and postcss-scss
                                  #Influenced by --single-quote
                                  #Can use PostCSS, Less and Sass (depending on --parser)

STYLELINT-CONFIG-PRETTIER ==>    ##Stylelint config that:
                                 ##  - turns off all Stylelint rules of things handled by Prettier.
                                 ##  - should be last in CONF.extends to make sure it is not overridden
                                 ##Also contains a CLI which checks if current ESLint config might conflict with Prettier.
                                 ##Version 3.2.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              VUE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--vue-indent-script-and-style     #BOOL (def: false). Whether to indent code inside <script> and <style>


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HANDLEBARS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                       #Parser is glimmer


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GULP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-PRETTIER[.check]([CONF])    ##Version 4.0.0
                                 ##Adds VINYL.isPrettier true if modified

