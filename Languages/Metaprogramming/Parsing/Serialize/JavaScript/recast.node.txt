
                                  ┏━━━━━━━━━━━━┓
                                  ┃   RECAST   ┃
                                  ┗━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - recast (preferred)
                                  #  - escodegen: not maintained anymore

VERSION ==>                       #0.12.5
                                  #Serialize JavaScript from AST
                                  #Also do parsing (forwarding to Esprima)

AST FORMAT ==>                    #ESTree, Esprima flavor.

parse('JS'[, OPTS])->NODE         #Forward to ESPRIMA.parse()
                                  #Automatically use OPTS:
                                  #  - jsx true, ecmaVersion 6, sourceType 'module'
                                  #  - loc true, locations true, comment true
                                  #Can specify OPTS:
                                  #  - range BOOL (def: false)
                                  #  - tabWidth NUM (def: same as source)
                                  #  - sourceFileName 'FILE': for source maps
                                  #  - tolerant BOOL (def: true): do not throw on non-fatal errors

[pretty]print(NODE[, OPTS])->OBJ  #Serialize AST to OBJ.code 'JS'
                                  #OPTS:
                                  #  - tabWidth NUM (def: 4)
                                  #  - useTabs BOOL (def: false)
                                  #  - reuseWhitespaces BOOL (def: true): do not change whitespaces
                                  #  - lineTerminator STR (def: OS.EOL)
                                  #  - wrapColumn NUM (def: 74): line width
                                  #  - quote "auto", "single" or "double" (def)
                                  #  - trailingCommas BOOL (def: false) or { objects|arrays|parameters BOOL }
                                  #  - objectCurlySpacing BOOL (def: false): space inside {}
                                  #  - arrayBracketSpacing BOOL (def: false): space inside []
                                  #  - arrowParensAlways BOOL (def: false): (VAL) => {} not VAL => {}
                                  #  - flowObjectCommas BOOL (def: false): use , (true, def) or ; in Flow comments
                                  #Pretty prints:
                                  #  - 'pretty': everything
                                  #  - no 'pretty': only what was changed
                                  #     - i.e. print(parse('JS')) guaranteed to === 'JS', including comments and whitespaces

SOURCE MAPS ==>                   #OBJ.map SOURCE_MAP:
                                  #  - version|sourcesContent|mappings|names
                                  #  - file 'FILE': from OPTS.sourceMapName
                                  #  - sources 'FILE'_ARR: from OPTS.sourceFileName
                                  #  - sourceRoot STR: from OPTS.sourceRoot
                                  #OPTS:
                                  #  - sourceMapName STR
                                  #  - sourceRoot STR
                                  #  - inputSourceMap OBJ:
                                  #     - previous source map to reuse (compose with new one)
                                  #     - must be previous print() result.map
                                  #Not possible with prettyPrint()
