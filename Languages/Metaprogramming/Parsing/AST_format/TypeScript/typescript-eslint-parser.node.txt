
                            
   TYPESCRIPT-ESLINT-PARSER  
                            



VERSION ==>                       #Same as @typescript-eslint/typescript-estree

TSESTREE ==>                      #AST format. See its doc.

                                  ┌────────────────┐
                                  │   HIGH-LEVEL   │
                                  └────────────────┘

@typescript-eslint/parser         #Package name

parseForESLint('CODE'[, OPTS])    #Call parseAndGenerateServices()
 ->OBJ                            #Returns OBJ:
                                  #  - ast PROGRAM
                                  #  - services OBJ2
                                  #  - scopeManager VAL: return value of @typescript-eslint/scope-manager
                                  #  - visitorKeys OBJ: from @typescript-eslint/visitor-keys (see its doc)

OPTS.*                            #Like parseAndGenerateServices()
                                  #The additional OPTS are for @typescript-eslint/scope-manager
OPTS.sourceType                   #'script' (def) or 'module'
OPTS.ecmaVersion                  #2015-2022|'latest'
OPTS.ecmaFeatures                 #OBJ
                                  #  - jsx BOOL (def: false): sets OPTS.jsx true
                                  #  - globalReturn BOOL (def: false): allow top-level `return`
OPTS.jsxPragma|jsxFragmentName
OPTS.emitDecoratorMetadata        #Like TypeScript. Def: guessed from tsconfig.json (OPTS.project)
OPTS.lib                          #If none, def lib: 'es2018'
OPTS.warnOnUnsupportedTypeScript
 Version                          #BOOL (def: false)

parse('CODE'[, OPTS])->PROGRAM    #Same a parseForESLint() but only returns OBJ.ast

                                  ┌───────────┐
                                  │   TYPES   │
                                  └───────────┘

parseAndGenerateServices          #Same but takes into account types and type checking
 ('CODE'[, OPTS])->OBJ            #Returns OBJ:
                                  #  - ast PROGRAM
                                  #  - services OBJ2:
                                  #     - program TS.Program: TypeScript types
                                  #     - hasFullTypeInformation BOOL (def: false)
                                  #     - esTreeNodeToTSNodeMap WEAK_MAP:
                                  #        - key is NODE (TSESTree), value is TS.Node|Token (TypeScript)
                                  #        - requires OPTS.preserveNodeMaps true, or OPTS.project defined
                                  #     - tsNodeToESTreeNodeMap WEAK_MAP: inverse

OPTS.*                            #Like parse()
                                  #OPTS.filePath required
OPTS.project                      #'GLOB'[_ARR] to tsconfig.json
OPTS.projectFolderIgnoreList      #'GLOB'_ARR (def: ['/node_modules/']) to ignore from OPTS.project glob
OPTS.tsconfigRootDir              #Current 'DIR' (def: '.') for OPTS.project
                                  #Recommended to be __dirname when used inside eslint configfile
OPTS.extraFileExtensions          #'.EXT'[_ARR] (def: [])
                                  #On top of '.js[x]|mjs|cjs|ts[x]|mts|cts'
OPTS.programs                     #TS.Program_ARR (def: guessed from OPTS.project)
                                  #TS.Program can be created using createProgram('PATH_TO_TSCONFIG'[, 'DIR'])
                                  #  - also exposed by @typescript-eslint/parser
OPTS.errorOnTypeScriptSyntactic
 AndSemanticIssues                #BOOL (def: false). Throws on type checking
OPTS.allowAutomaticSingle
 RunInference                     #BOOL (def: false). Whether single CLI run, or background (e.g. IDE). For optimization.
OPTS.moduleResolver               #'PATH' to custom resolver

parseWithNodeMaps('CODE'[, OPTS])
 ->OBJ                            #Same as parseAndGenerateServices(), but only return OBJ.ast|*NodeMap

                                  ┌─────────┐
                                  │   AST   │
                                  └─────────┘

@typescript-eslint/
 typescript-estree                #Package name

parse('CODE'[, OPTS])->PROGRAM    #

OPTS.comment                      #BOOL (def: false). Parse comments, as PROGRAM.comments.
OPTS.jsx                          #BOOL (def: false). Parse JSX
OPTS.loc                          #BOOL (def: false). Add NODE.loc
OPTS.range                        #BOOL (def: false). Add NODE.range
OPTS.errorOnUnknownASTType        #BOOL (def: false).
                                  #Throws on unknown AST type, i.e. when TypeScript version is more recent than parser

OPTS.filePath                     #'PATH' (def: 'estree.ts[x]') to file being parsed
OPTS.debugLevel                   #STR_ARR among:
                                  #  - 'typescript-eslint': same as ENVVAR DEBUG=typescript-eslint:*
                                  #  - 'eslint': same as ENVVAR DEBUG=eslint:*
                                  #  - 'typescript': same as tsconfig CONF.extendedDiagnostics true
                                  #Can also be true (same as ['typescript-eslint']) or false (def)
OPTS.loggerFn                     #FUNC(STR) (def: console.log) or false

OPTS.tokens                       #BOOL (def: false). Add NODE.tokens

                                  ┌───────────┐
                                  │   SCOPE   │
                                  └───────────┘

@typescript-eslint/scope-manager  #Similar to eslint-scope, but for TypeScript
                                  #Creates a representation of how variables are defined and used
                                  #Not documented yet
