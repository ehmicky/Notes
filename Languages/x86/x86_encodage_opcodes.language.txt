
                                  ┏━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ENCODAGE OPCODES   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━┛

+--------------------+---+---+------------+--------------------------------+----------------------------------+------+-----+
|       PREFIX       |REX|VEX|   OPCODE   |             MODR/M             |             SIB                  | DISP | IMM |
+--------------------+---+---+------------+--------------------------------+----------------------------------+------+-----+
|    1 à 4 octets    | 1 | 1 |   1 à 3    |                1               |              1 octet             | 1 à 4|1 à 4|
+--------------------+---+---+------------+--------------------------------+----------------------------------+------+-----+
| 0xf0  0xf2  0xf3   |   |   | Ou 1 octet | Argument $2 :                  | BASE (reg nb)  : ?? % 0x08       |      |Si un|
| lock  repne repe   |   |   | Ou 0x0f +  |   0?-3? : [R]                  | INDEX (reg nb) : (?? % 0x40) / 8 |      | arg |
|--------------------|   |   | 1/2 octets |     sauf ?5 ou ?d : [I]        | SCALE : 2 ^ ( ?? / 8 )           |      | est |
| 0x2e  0x36  0x3e   |   |   |            |   0?-b? : [R]                  |                                  |      |un I |
| cs    ss    ds     |   |   |            |   c?-f? : R                    |                                  |      |     |
| jmp_ht      jmp_ht |   |   |            |                                |                                  |      |     |
| 0x26  0x64  0x65   |   |   |            |   ?? % 0x08 : reg nb $2        |                                  |      |     |
| es    fs    gs     |   |   |            |--------------------------------+                                  |      |     |
|--------------------|   |   |            | Argument $1 :                  |                                  |      |     |
| 0x66               |   |   |            |   (?? % 0x40) / 8 : reg nb $1  |                                  |      |     |
|--------------------|   |   |            |--------------------------------+                                  |      |     |
| 0x67               |   |   |            | SIB : si ?4 ou ?c (sauf c?-f?) |                                  |      |     |
|                    |   |   |            |--------------------------------+                                  |      |     |
|                    |   |   |            | DISP8  : si 4?-7?              |                                  |      |     |
|                    |   |   |            | DISP32 : si 8?-b?              |                                  |      |     |
+--------------------+---+---+------------+--------------------------------+----------------------------------+------+-----+

Register number (reg nb):
  - 0 à 7, suivant cet ordre (registre précis dépend du contexte) :
    - {al,cl,dl,bl}{ah,ch,dh,bh}
    - [e]{ax,cx,dx,bx,sp,bp,si,di}
    - [x]{mm0..mm7}

Instruction prefix : 1 à 4 prefixes d'un octet chacun (optionnel chacun, et une seule valeur possible pour un octet) :
  - octet 1 :
    - lock -> 0xf0
    - repne/repnz -> 0xf2
    - rep/repe/repz -> 0xf3
  - octet 2 :
    - S si [S:M] : 
      - cs -> 0x2e
      - ss -> 0x36
      - ds -> 0x3e
      - es -> 0x26
      - fs -> 0x64
      - gs -> 0x65
    - branch hint (avec jmp et j*) :
      - branch ne sera pas prise -> 0x2e
      - branch sera prise -> 0x3e
  - octet 3 :
    - operand-size override, choisissant 16 bits comme "défaut" pour l'instruction courante (ou 32 si on tourne en 16 bits) -> 0x66
  - octet 4 :
    - comme pour octet 3, mais pour l'adressing -> 0x67
  - 0x66, 0xf3, 0xf2 peuvent aussi être utilisées pour exprimer un comportement différent pour une même opcode

REX :
  - prefix d'un octet utilisé par x86_64 pour étendre d'un bit les champs Mod et R/M de ModR/M, et le champs Base et Index et SIB, afin de pouvoir utiliser des registres étendus et des adresses 64 bits, mais aussi utiliser spl, bpl, dil et sil

VEX :
  - prefix d'un octet utilisé à partir d'AVX pour utiliser des registres ymm*

opcode : 1 à 3 octets
    - 1 octet : octet
    - 2 octets : 0x0f + 1 octet
    - 3 octets : 0x0f + 0x38 ou 0x3a + 1 octet

ModR/M : (si opérandes M ou R) 1 octet :
  - entre parenthèse : la valeur par rapport à l'octet total
  - bit 6 et 7 : Mod (argument $2) :
    - 0 (0x00) : [R]
    - 1 (0x40) : [R] + DISP8
    - 2 (0x80) : [R] + DISP32
    - 3 (0xc0) : R
  - bit 3 à 5 : Reg/opcode :
    - ou register number de l'argument $1 :
      - 0 (0x00) : al/ax/eax/mm0/xmm0
      - 1 (0x08) : cl/cx/ecx/mm1/xmm1
      - 2 (0x10) : dl/dx/edx/mm2/xmm2
      - 3 (0x18) : bl/bx/ebx/mm3/xmm3
      - 4 (0x20) : ah/sp/esp/mm4/xmm4
      - 5 (0x28) : ch/bp/ebp/mm5/xmm5
      - 6 (0x30) : dh/si/esi/mm6/xmm6
      - 7 (0x38) : bh/di/edi/mm7/xmm7
    - ou suite et fin de l'opcode
  - bit 0 à 2 : R/M : le registre utilisé (argument $2) :
    - 0 : eax (ax/al/etc.)
    - 1 : ecx (cx/cl/etc.)
    - 2 : edx
    - 3 : ebx
    - 4 : SIB (ou esp si Mod == 3)
    - 5 : ebp (ou DISP32 si Mod == 0)
    - 6 : esi 
    - 7 : edi

SIB : (R/M == SIB) 1 octet :
  - bit 6 et 7 : scale : 2^bits
  - bit 3 à 5 : index (register number) : cf Reg/opcode
  - bit 0 à 2 : base (register number) : cf R/M

Displacement DISP (si opérande M, et adressing mode) : 1, 2 ou 4 octets (DISP8, DISP16 ou DISP32)
  - [Base + Index * Scale + Displacement]

Immediate data (si $2 ou $3 est I) : 1, 2 ou 4 octets

Pour table complète : cf Annexes du Intel x86 Instruction Set Reference
