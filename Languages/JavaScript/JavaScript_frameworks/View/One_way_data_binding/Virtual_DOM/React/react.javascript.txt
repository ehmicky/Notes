
         
   REACT  
         



REACT
REACTDOM                          #Two packages (versions 15.4.2) (started documenting 15.5.0 but did not finish) (should also check create-react-class module). Must require both.
REACTDOMSERVER                    #Subpackage of REACTDOM, for using in the server

DEVELOPMENT MODE ==>              #Checks NODE_ENV !== 'production'.
                                  #React uses envify in release files, which replaces NODE_ENV by 'development|production'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            THEORY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRINCIPLE ==>                     #Data flow:
                                  #  - one-way direction (parent to children):
                                  #      - communicating with parent: passing a FUNC (e.g. REACTLINK) as props
                                  #  - 'state' is state owned by current RCOMP, 'props' is state owned by a parent
                                  #     - when changing 'state':
                                  #        - current RCOMP gets 'updated'
                                  #        - children get 'updated' (if same RTYPE) or 'unmounted|mounted' (if different RTYPE)
                                  #     - smart vs dumb RCOMP:
                                  #        - smart components / 'containers':
                                  #           - manipulate state:
                                  #              - have 'state', passed to children as props
                                  #              - pass Flux actions callbacks to children
                                  #           - not visual, e.g. no CSS nor DOM
                                  #           - should be as few as possible
                                  #        - dumb / 'presentational' components:
                                  #           - manipulate UI:
                                  #              - no 'state'
                                  #           - reusable, so no dependency (e.g. no Flux actions nor dispatch)
                                  #     - reduce amount of 'state':
                                  #        - not computed|duplicated from other 'state|props'
                                  #           - e.g. getInitialState() should not use props
                                  #        - not complex (e.g. not RELEM)
                                  #     - 'context':
                                  #        - like 'props' but with less typing
                                  #        - should only be used for 'props' that are used everywhere in the app, e.g. current user, design theme, etc.
                                  #        - should use explicit 'props' otherwise
                                  #  - children are owned by the RCOMP that create them:
                                  #     - i.e. in RCOMP.render() -> <RCOMP2>...</RCOMP2>, ... will be 'updated' when current RCOMP is,
                                  #       but not when RCOMP2 is, except if cloned in RCOMP2.render()
                                  #        - will still be correctly 'mounted|unmounted'
                                  #Virtual DOM:
                                  #  - provides abstraction (e.g. can be used on server without real DOM)
                                  #  - allows faster diff algorithm
                                  #  - problem: makes it harder to reach to actual DOM
                                  #JSX: mixing templates into JavaScript because they belong together

GOOD PRACTICES ==>                #  - when passing props down, should explicitely pass props that are consumed, e.g. deconstructing then spreading:
                                  #      let [ VAR, OBJ... ] = this.props;
                                  #      // Use VAR
                                  #      return <ELEM [VAR={VAR}] {...OBJ}>

BAD PRACTICES ==>                 #  - reaching to HTML elements instead of using RELEM|RCOMP abstraction:
                                  #     - e.g. using REF, REACTDOM.findDOMNode()
                                  #  - using RCOMP other than as 'this' in RCOMP methods:
                                  #     - e.g. using REACTDOM.render() return value
                                  #  - shortcircuiting data flow:
                                  #     - RCOMP.forceUpdate()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TERMINOLOGY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RTYPE                             #RELEM's type
                                  #By convention, custom RTYPE name should be Capitalized
REACT.Component                   #Base RTYPE
RDOM                              #Builtin RTYPE representing an HTML 'TAG'

RELEM                             #Abstracted ELEM (non-instantiated), i.e. RTYPE + props
RNODE                             #VAL[_ARR...]
                                  #  - VAL can be:
                                  #     - RELEM
                                  #     - STR|NUM: text node. Cannot use HTML entities, but can use raw|escaped Unicode.
                                  #     - null|undefined|true|false: no node (but present in props.children as null)
                                  #  - can be ARR, or ARR_ARR, etc. (will be flattened)

RCOMP                             #Instantiated RELEM. Is not an ELEM.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RTYPE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REACT.createClass(OBJ)            #Creates and returns a RTYPE
                                  #Bind all OBJ.FUNC's this to current RCOMP
                                  #OBJ is merged into RCOMP's prototype
STATELESS COMPONENT ==>           #Can use a FUNC()->RELEM as RTYPE:
                                  #  - like specifying only OBJ.render(), with also:
                                  #     - can specify FUNC.contextTypes OBJ
                                  #  - REF is null, so:
                                  #     - cannot use findDOMNode()
                                  #     - cannot use props.ref

ES6 CLASSES ==>                   #Can create ES6 class derived from REACT.Component as an alternative to REACT.createClass()
                                  #Preferred.
                                  #Differences:
                                  #  - different syntax:
                                  #     - getInitialState() -> setting this.state in constructor
                                  #     - propTypes OBJ -> static propTypes OBJ
                                  #     - getDefaultProps()->OBJ -> static defaultProps OBJ
                                  #  - less functionalities:
                                  #     - no 'this' binding
                                  #     - cannot use mixins
                                  #     - cannot use RCOMP.replaceState|isMounted()

RCOMP.displayName                 #JSX tag name, used for debugging (should be in dev only)
                                  #Deduced from assigned variable if using Babel plugin "react-display-name"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RELEM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REACT.createElement               #Creates and returns a RELEM
('TAG'|RTYPE[, OBJ][, RNODE...])  #OBJ|RNODE... are RCOMP.props|children.
                                  #'TAG':
                                  #  - use corresponding RDOM
                                  #  - RCOMP.props|children -> HTML attributes|children
REACT.createFactory('TAG'|RTYPE)  #Similar to REACT.createElement.bind(null, 'TAG'|RTYPE)
REACT.DOM.TAG(...)                #Same as REACT.createElement('TAG', ...)
REACT.cloneElement                #Creates and returns a RELEM2, cloned from RELEM.
(RELEM[, OBJ][, RNODE...])        #OBJ are shallow merged, RNODE... children are replaced.

RELEM.type                        #'TAG'|RTYPE
REACT.isValidElement(VAL)         #True if RELEM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RENDER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REACTDOM.render                   #ELEM's children = RELEM2's instantiation
(RELEM2, ELEM[, FUNC()])->REF     #If ELEM children already contains older RELEM:
                                  #  - RELEM === RELEM2 (i.e. same reference): nothing happens
                                  #  - RELEM == RELEM2 (i.e. same RTYPE): 'update' RELEM
                                  #  - RELEM != RELEM2 (i.e. different RTYPE): 'unmount' RELEM, 'mount' RELEM2
                                  #Calls FUNC() after all events done.
                                  #Rendering adds React-specific HTML attributes:
                                  #  - e.g. data-reactid, data-react-checksum, data-reactroot
                                  #  - if RELEM does not have them (i.e. has not been previously rendered by React), will
                                  #    'unmount|mount' instead of 'update'
REACTDOMSERVER.renderToString     #Returns RELEM as 'HTML'
(RELEM)                           #Idea is pre-render on the server:
                                  #  - why:
                                  #     - when client calls REACTDOM.render(), there is less DOM update, making initial load time faster
                                  #     - more SEO-friendly
                                  #  - requires code to be both client and server ('universal app')
                                  #  - 'HTML' includes React-specific HTML attributes
                                  #Server should be able to just render the component by reusing components client code:
                                  #  - components must use code that can be loaded on both the client and server
                                  #  - component props must be calculated server-side, so AJAX requests must work on both the client and Node
REACTDOMSERVR.renderToStaticMarkup#Same but does not include React-specific HTML attributes.
(RELEM)                           #To use if rendered 'HTML' will not be loaded in client-side React.

MOUNT ==>                         #Fired on:
                                  #  - parent rendered with different RTYPE, for new RELEM2
                                  #  - first render()
                                  #Fires RCOMP2 (in order):
                                  #  - componentWillMount()
                                  #  - render()
                                  #  - componentDidMount()
UPDATE ==>                        #Fired on:
                                  #  - parent rendered with same RTYPE but different props
                                  #  - RCOMP.setState()
                                  #  - RCOMP.forceUpdate()
                                  #Not fired if an 'update' is already ongoing
                                  #Does:
                                  #  - not create new RCOMP (only updates it)
                                  #  - replace RCOMP's props with RCOMP2's
                                  #  - fires RCOMP (in order):
                                  #     - componentWillReceiveProps(OBJ2, OBJ4):
                                  #        - not fired by RCOMP.setState() nor RCOMP.forceUpdate()
                                  #        - before assigning props (this.props is still old one)
                                  #        - OBJ2|OBJ4 is next props|context
                                  #        - often used to call setState() according to props
                                  #     - shouldComponentUpdate(OBJ2, OBJ3, OBJ4)->BOOL:
                                  #        - not fired by RCOMP.forceUpdate()
                                  #        - return false if nothing was changed, so we stop here and avoid to:
                                  #           - fire componentWillUpdate|DidUpdate(), which might do more
                                  #           - fire render():
                                  #              - since render() would render same DOM, then no DOM manipulation would done anyway.
                                  #              - however this saves the time spent by JavaScript to check it
                                  #        - is optional and for performance purpose
                                  #        - OBJ2|OBJ3|OBJ4 is next props|state|context
                                  #        - React.PureComponent is like React.Component except:
                                  #           - it defines shouldComponentUpdate() doing shallow comparison of props|state
                                  #           - to use if:
                                  #              - props|state|context can be shallow compared (i.e. contain objects)
                                  #              - render() only depends on props|state|context
                                  #     - componentWillUpdate(OBJ2, OBJ3, OBJ4)
                                  #        - cannot use setState()
                                  #        - OBJ2|OBJ3|OBJ4 is next props|state|context
                                  #     - render()
                                  #     - componentDidUpdate(OBJ2, OBJ3, OBJ4)
                                  #        - OBJ2|OBJ3|OBJ4 is prev props|state|context
UNMOUNT ==>                       #Fired on:
                                  #  - parent rendered with different RTYPE, for old RELEM
                                  #  - REACTDOM.unmountComponentAtNode()
                                  #Fires RCOMP:
                                  #  - componentWillUnmount()

RCOMP.render()                    #Does the actual DOM manipulation.
                                  #Must return RCOMP's single child, i.e. RELEM (or null|false):
                                  #  - calls REACTDOM.render() on child recursively:
                                  #     - order:
                                  #        - start with ancestor for componentWill*(), shouldComponentUpdate(), render()
                                  #        - start with descendant for componentDid*()
                                  #     - compare children old RELEM with new RELEM2 according to DOM order
                                  #        - problem:
                                  #           - in lists of similar items, modifications might recreate all items
                                  #             (e.g. prepending, since it compares by DOM order)
                                  #           - this is bad for performance, but also does not retain state in those items
                                  #        - solution:
                                  #           - can use HTML attribute 'key', which will then be used for comparison
                                  #           - should then be unique ID among siblings
                                 ##           - CREATEFRAGMENT({ VAR: RNODE ... })->RNODE_ARR:
                                 ##              - returns all RNODE concatenated
                                 ##              - assigns each RNODE.key = 'VAR/.NUM[$KEY]' where:
                                 ##                 - NUM is element index in RNODE (which can be an array)
                                 ##                 - KEY is RNODE.key
                                 ##              - package 'react-addons-create-fragment' (same version as React)
                                  #     - if children are not newly created in render() (e.g. use props.children reference),
                                  #       old RELEM === new RELEM2, so nothing will happen for that child
                                  #        - i.e. RCOMP 'owns' the children it creates in render(), but not the children passed to it
                                  #  - if RDOM, will update DOM, but in an efficient way:
                                  #     - does not update if same
                                  #     - only add|remove attributes if only attributes changed
                                  #  - should not modify state nor read global state nor be async
                                  #    (use componentDidMount|Update() for that)
                                  #Single child, i.e. must return RELEM, not RELEM_ARR
RCOMP.forceUpdate()               #Forces 'update'
                                  #Useful when render() depends on state that changed but did not trigger a new render(), e.g.:
                                  #  - RCOMP.state.OBJ.VAR changed, but no setState() was called
                                  #  - DOM element change that cannot be caught with onEvent
REACTDOM.unmountComponentAtNode   #Inverse of REACTDOM.render(): remove ELEM children (firing 'unmount') then returns true.
(ELEM)                            #If no RCOMP was mounted, does nothing and returns false.

RCOMP.isMounted()                 #To use in async operation to make sure RCOMP still exists.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROPS/STATE BASE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RCOMP.props                       #Read-only state OBJ.
                                  #Readonly (non-configurable, non-writable) shallowly (but should be considered deeply readonly)
                                  #'Owned' by a parent, i.e. props change when the parent passing them re-rendered children with different props.
                                  #Rendered as HTML attributes for RDOM
RELEM.props                       #As opposed to RCOMP, props.key|ref are not on RELEM.props.* but on RELEM.*
RCOMP.getDefaultProps()->OBJ      #Called once per RTYPE (not per RCOMP),
                                  #then the result OBJ is shallowingly assigned to each new RCOMP.props


RCOMP.state                       #Read-write state OBJ
                                  #'Owned' by RCOMP
                                  #Should never be written to:
                                  #  - use setState() instead
                                  #  - to avoid it, might need to make deep copy, including using tools like immutable-js
                                  #Might be null if not getInitialState()
RCOMP.getInitialState()->OBJ      #Initial RCOMP.state
                                  #Called before componentWillMount()
RCOMP.setState(OBJ[(OBJ2, OBJ3)]  #Shallow merges into RCOMP.state
[, FUNC()])                       #OBJ2|OBJ3 is current state|props
                                  #Might be performed async or not. FUNC() performed afterwards.
                                  #Fires 'update'
RCOMP.replaceState(...)           #Same but sets instead of merging


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PROPS/STATE EXTRA       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RCOMP.props.children              #CHILDREN
                                  #Opaque structure to be manipulated only through React.Children RCHILDREN,
                                  #where RNODE will be individual elements (not ARR)
RCHILDREN.count(CHILDREN)         #
RCHILDREN.map|forEach
(CHILDREN, FUNC(RNODE)[, THIS])   #
RCHILDREN.toArray(CHILDREN)       #Returns RNODE_ARR
RCHILDREN.only(CHILDREN)          #Returns RNODE if CHILDREN contains only one child, and it is a RELEM
                                  #Otherwise throws (if in 'development mode')


React.PropTypes                  ##PTYPES
                                 ##Module 'prop-types' (same version as React)
RCOMP.propTypes                   #OBJ.VAR PROP_RULE:
                                  #  - if RTYPE.props.VAR does not satisfy PROP_RULE during createElement(), it will throw error:
                                  #     - only once for a given RTYPE + VAR + PROP_RULE
                                  #     - only in 'development mode'
                                  #  - use PTYPES.oneOfType or custom PROP_RULE for multiple validations
                                  #PROP_RULE is FUNC(RTYPE.props, 'VAR', 'RTYPE')[->ERROR]
                                  #List of builtin PROP_RULE:
PTYPES.array|bool|func|symbol|
number|object|string|node|element #Checks type: 'node' is RNODE[_ARR], 'element' RELEM
PTYPES.instanceOf(TYPE)           #
PTYPES.oneOf(VAL_ARR)             #
PTYPES.oneOfType(PROP_RULE_ARR)   #
PTYPES.arrayOf(PROP_RULE)         #
PTYPES.objectOf(PROP_RULE)        #Object values
PTYPES.shape({VAR: PROP_RULE ...})#
PROP_RULE.isRequired              #E.g. PTYPES.bool.isRequired
PTYPES.checkPropTypes
(PTYPES.*, RTYPE.props, 'VAR',
'RTYPE')[->ERROR]                 #Calling manually


RCOMP.mixins                      #OBJ_ARR, where OBJ gets merged into RCOMP.
                                  #If property conflict:
                                  #  - if lifecycle RCOMP.FUNC (e.g. componentWillUpdate, etc.), surcharges instead of
                                  #    overriding it (i.e. called before non-mixin one)
                                  #  - otherwise, throws error
                                  #Deprecated, prefer high-order-composition/decorators


RCOMP.statics                     #OBJ assigned to RTYPE during createClass(), i.e. static methods.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONTEXT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RCOMP.context                     #Like RCOMP.props, but with less typing (see getChildContext())
RCOMP.getChildContext()->OBJ      #Define|merges RCOMP.context OBJ in all ancestors
RCOMP.contextTypes                #Like RCOMP.propTypes but for RCOMP.context, defined in the ancestor using it
                                  #Required.
RCOMP.childContextTypes           #Same for the parent defining getChildContext().
                                  #Required.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             REFS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REF                               #Instantiation of a RELEM:
                                  #  - if based on RTYPE, RCOMP
                                  #  - if based on 'TAG', ELEM
                                  #  - if stateless component, null

RCOMP.props.ref                   #On createElement():
                                  #  - FUNC(REF):
                                  #     - on mounting, called once with REF
                                  #     - on updating, first called with null (to let handler clean previous
                                  #       reference), then called with new REF
                                  #     - when unmounting, called once with null
                                  #  - 'REF': same as FUNC(REF) { this.refs['REF'] = REF; }

REACTDOM.findDOMNode(RCOMP)       #Returns corresponding ELEM
                                  #If RCOMP not mounted, throws exception


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RDOM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RDOM ==>                          #Builtin RTYPE mimicking usual HTML.
                                  #Differences are below.

ALLOWED HTML TAGS|ATTRIBUTES ==>  #Whitelisted:
                                  #  - but should cover most standard HTML
                                  #  - custom HTML tags are allowed
                                  #  - custom HTML attributes are allowed if HTML tag name contains '-' or HTML attribute
                                  #    is="..." present

HTML ATTRIBUTES ==>               #  - camelCased, except data-*, aria-*
                                  #  - class -> className, html -> htmlFor
                                  #  - values:
                                  #     - style.CSSPROP VAL (camelCased, except vendor prefix which are titleized)
                                  #     - boolean attributes: must only use BOOL as value
                                  #     - NUM -> NUMpx, except where LENP is not expected
                                  #  - new:
                                  #     - dangerouslySetInnerHtml { __html STR }: set innerHTML
                                  #     - ref|key: see below

DOM EVENTS ==>                    #  - onEvent(REVENT), with REVENT being like EVENT but:
                                  #     - better crossbrowser behavior
                                  #     - more performant (use only one global event listener, then redistribute)
                                  #     - extra properties:
                                  #        - nativeEvent EVENT
                                  #        - isDefaultPrevented|PropagationStopped(): like jQuery
                                  #     - no stopImmediatePropagation()
                                  #     - is deleted after function ends, so async can only use it with:
                                  #        - copying to local variable
                                  #        - or calling REVENT.persist()

FORM CONTROLS ==>                 #Value:
                                  #  - <textarea> children   -> <textarea value>
                                  #  - <option selected>     -> <select value> (STR[_ARR])
                                  #  - <input value|checked> -> same
                                  #HTML attributes:
                                  #  - onChange:
                                  #     - should be used. Like onInput, but with React's behavior for 'value'
                                  #     - for checkboxes|radio buttons, do not call REVENT.preventDefault(),
                                  #       or control will be updated in model but not in UI
                                  #  - value|checked:
                                  #     - sets default value
                                  #     - makes control read-only: can only updated with new render(), usually
                                  #       with this.setState() in onChange event handler
                                  #     - not updated on UI interaction but:
                                  #        - JavaScript value|checked is
                                  #        - if it triggers a new render() with new value|checked, it gets updated like this
                                  #     - if null|undefined (as opposed to ''), does not do anything anymore
                                  #  - defaultValue|Checked: only sets default value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JSX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


<...>                             #Like HTML but inside JavaScript:
                                  #  - translated as REACT.createElement(...) by transformers (e.g. Babel)
                                  #     - e.g. <VAL attr="VAL5" attr2={VAL6}> <hr/> {VAL3} VAL4 </VAL>
                                  #     -> REACT.createElement(VAL, { attr: "val5", attr2: val6 }, [ REACT.createElement("hr"), VAL3, "VAL4" ])
                                  #  - RTYPE is JavaScript expression (unless HTML tag), i.e.:
                                  #     - must be available in scope
                                  #     - can be complex, e.g. RTYPE.VAR
                                  #  - HTML attribute is stringified, unless {...}
                                  #     - boolean attributes must use {BOOL} instead of "BOOL" (def: true)
                                  #     - OBJ attributes (e.g. "style"): ATTR="{ ... }" or ATTR={OBJ}
                                  #     - can spread an OBJ for several attributes: {...OBJ}
                                  #  - children are stringified (i.e. text nodes) unless {...} or <...>
                                  #  - JavaScript comments can be used
                                  #     - however, where they might be interpreted as text node, must be wrapped in {...}
                                  #  - must close tags, including as self-closing tags

TRANSFORMERS ==>                 ##  - Babel plugins (see below)
                                 ##  - reactify (Browserify)
                                 ##  - jsx-requirejs-plugin (RequireJS)
@babel/preset-react              ##'syntax-jsx', 'transform-react-jsx', 'transform-react-display-name', 'transform-react-jsx-source|self' (in dev)
@babel/syntax-jsx                ##
@babel/plugin-transform-react-jsx##Main transformation
@babel/plugin-
 transform-react-jsx-self        ##Add to props { __self: this }, used for debugging (should be done only in dev)
@babel/plugin-
 transform-react-jsx-source      ##Add to props { __source: { fileName STR, lineNumber NUM } }, used for debugging (should be done only in dev)
@babel/plugin-transform-         ##Move REACT.createElement() that will always return value (e.g. <hr/>) outside of render()
 react-constant-elements         ##Goal: they are performed only once, i.e. faster reference comparison
                                 ##Should not be done in dev, because stack trace harder to read
@babel/plugin-transform-         ##Replace REACT.createElement() by faster alternative, but not good for debugging
 react-inline-elements           ##Should not be done in dev, only production
@babel/plugin-transform-react-jsx-compat
@babel/plugin-transform-react-display-name

AST ==>                           #See JSX AST doc

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ANIMATIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                 ##Package 'react-addons-css-transition-group' (same version as React)

<ReactTransitionGroup>           ##RTYPE firing children's RCOMP:
                                 ##  - componentWillAppear(FUNC()), componentDidAppear():
                                 ##     - when child is added, on first frame (using ReactTransitionGroup's componentDidMount())
                                 ##  - componentWillEnter(FUNC()), componentDidEnter():
                                 ##     - when child is added, on next frames (using ReactTransitionGroup's componentDidUpdate())
                                 ##  - componentWillLeave(FUNC()), componentDidLeave():
                                 ##     - when child is removed (using ReactTransitionGroup's componentDidUpdate|Mount())
                                 ##  - componentDid* wait for componentWill* FUNC to be fired
                                 ##Props:
                                 ##  - component RTYPE|'TAG' (def: 'span'): top-level element
                                 ##  - other props are passed to props.component
<ReactCSSTransitionGroup>        ##<ReactTransitionGroup> firing CSS transitions on children from .appear|enter|leave-CLASS to .appear|enter|leave-CLASS-active
                                 ##In details: children componentWillAppear|Enter|Leave():
                                 ##  - add CSS class 'appear|enter|leave-CLASS'
                                 ##  - at next tick, add CSS class 'appear|enter|leave-CLASS-active'
                                 ##  - after timeout, remove both CSS classes.
                                 ##    Timeout should be same as CSS transition duration.
                                 ##Props:
                                 ##  - transitionAppear|Enter|Leave BOOL (def: false, true, true): enable that feature
                                 ##  - transitionAppear|Enter|LeaveTimeout NUM (required if switch true)
                                 ##  - transitionName 'CLASS' or OBJ.appear|enter|leave[Active] 'CLASS'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    PERFORMANCE MEASUREMENT    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                 ##Package 'react-addons-perf' (same version as React)

MEASUREMENTS                     ##Opaque structure
PERF.start|stop()                ##Fills in MEASUREMENTS
PERF.isRunning()->BOOL           ##
PERF.getLastMeasurements()
 ->MEASUREMENTS                  ##

PERF.printInclusive(MEASUREMENTS)##Print time taken by each component, and number of instances.
PERF.printExclusive(MEASUREMENTS)##Same but decompose time from mounting, rendering and the rest.
PERF.printWasted(MEASUREMENTS)   ##Same but for the time spent trying to update but giving up because same DOM.
PERF.printOperations(MEASUREMNTS)##Print underlying DOM manipulations.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       IMMUTABLE UPDATE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                 ##Package 'react-addons-update' (same version as React)

UPDATE(OBJ, { VARR:              ##Does immutable update (returns without modifying object) (see also immutable-js)
{ $CMD: VAL ... } ... })         ##Possible $CMD:
                                 ##  - VARR parent must exist:
                                 ##     - $set VAL:               VARR = VAL
                                 ##     - $apply FUNC(VAL2)->VAL: VARR = FUNC(VARR)
                                 ##  - VARR must exist and be an OBJ2:
                                 ##     - $merge OBJ:             VARR = _.extend(VARR, OBJ) (shallow merge)
                                 ##  - VARR must exist and be an ARR:
                                 ##     - $push|unshift ARR2:     VARR.push|unshift(VAL)
                                 ##     - $splice ARR2_ARR3:      VARR.splice(...ARR2), for each ARR2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TESTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                 ##Package 'react-dom/test-utils' (same version as React)

TESTUTILS.isElement(RELEM)       ##Is RELEM
TESTUTILS.isElementOfType
(RELEM, RTYPE)                   ##
TESTUTILS.isDOMComponent(RELEM)  ##RELEM's RTYPE is RDOM
TESTUTILS.isCompositeComponent
(RELEM)                          ##RELEM's RTYPE is custom
TESTUTILS.
isCompositeComponentWithType
(RELEM, RTYPE)                   ##

TESTUTILS.renderIntoDocument     ##Like REACTDOM.render(RELEM, ELEM) where ELEM is a detached node.
(RELEM)                          ##A DOM must still be available (e.g. window.document.createElement())
TESTUTILS.createRenderer()       ##Returns RENDERER
RENDERER.render(RELEM[, OBJ])    ##Like REACTDOM.render(RELEM) but:
                                 ##  - does not require|use a DOM
                                 ##  - RELEM's children's children are not rendered.
                                 ##  - REF not supported
                                 ##OBJ is context
RENDERED.unmount()               ##
RENDERED.getRenderedOutput()     ##Returns RCOMP

TESTUTILS.mockComponent
(RTYPE[, 'TAG'])                 ##Make RCOMP.render() -> <TAG>...</TAG> (def: 'div')

TESTUTILS.findAllInRenderedTree
(RELEM, FUNC(RCOMP)->BOOL)       ##Returns RCOMP_ARR
TESTUTILS.scryRenderedDOM
ComponentsWithClass(RCMP,'CLASS')##Same with test for a specific 'CLASS'
TESTUTILS.scryRenderedDOM
ComponentsWithTag(RCOMP, 'TAG')  ##
TESTUTILS.scryRenderedDOM
ComponentsWithType(RCOMP, RTYPE) ##
TESTUTILS.find*()                ##Like TESTUTILS.scry*(), but returns the first result only, or throw exception if nothing found.

TESTUTILS.Simulate.EVENT         ##Trigger EVENT, but still work with virtual DOM and REVENT
(RCOMP|ELEM[, OBJ])              ##OBJ are assigned to EVENT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LINTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


react/*                          ##Node module "eslint-plugin-react" (7.28.0)
                                 ##Can use CONF.settings.react:
                                 ##  - createClass 'FUNC' (def: 'createReactClass'): used to create RTYPE
                                 ##    when not using ES6 classes
                                 ##  - version STR|'detect' (def: latest)
                                 ##  - linkComponents 'RTYPE'_ARR or OBJ: name 'RTYPE', linkAttribute STR (def: 'href')
                                 ##     - RTYPE used instead of <a>
                                 ##     - for rules like react/jsx-no-target-blank
                                 ##  - componentWrapperFunctions 'PROP' or OBJ: property 'PROP', object 'VAR'
                                 ##     - function wrapper components

react/prefer-es6-class [STR]     ##Requires either ES6 classes, or ES5 createReactClass()
                                 ##STR: 'always' (def), 'never'
react/function-component-        ##Whether functional components should use OBJ.[un]namedComponents STR[_ARR] of:
 definition [OBJ]                ##  - 'function-declaration' (def for namedComponents)
                                 ##  - 'function-expression' (def for unnamedComponents)
                                 ##  - 'arrow-function'
react/no-this-in-fsc             ##No "this" in stateless component
react/no-multi-comp [OBJ]        ##Avoid multiple RTYPE declarations per file
                                 ##OBJ:
                                 ##  - ignoreStateless BOOL (def: false): allow if stateless components
react/forbid-elements [OBJ]      ##Avoid using <RTYPE>, using OBJ.forbid OBJ_ARR: element 'RTYPE', message STR (error message),
                                 ##or shorthand 'RTYPE'_ARR

react/                           ##Avoid initializing RELEM inside another one since it loses state and is less performant.
 no-unstable-nested-components   ##Unless memoized with React.useCallback()
 [OBJ]                           ##OBJ:
                                 ##  - allowAsProps BOOL: if false (def), also disallow inside props, unless prop name starts with render*

react/react-in-jsx-scope         ##React variable must be defined if there is some JSX
react/require-render-return      ##Must return a value in render()
react/forbid-component-          ##Avoid passing OBJ.forbid VAL_ARR (def: 'className', 'style') as props (except to HTML tags)
 props [OBJ]                     ##VAL can be STR or OBJ: propName STR, allowedFor 'RTYPE'_ARR, message STR
react/forbid-dom-props [OBJ]     ##Same for HTML tags
react/style-prop-object [OBJ]    ##PROP 'style' must be an OBJ
                                 ##OBJ:
                                 ##  - allow 'RTYPE'_ARR
react/void-dom-elements-
 no-children                     ##Prevent RDOM with no child (like <hr/>) from having children
react/no-namespace               ##No HTML namespace (like "svg:*") in RDOM name
react/no-children-prop [OBJ]     ##Avoid passing children as props
                                 ##OBJ:
                                 ##  - allowFunctions BOOL (def: false): allow passing FUNC()->children
react/no-redundant-should-
 component-update                ##Avoid using both shouldComponentUpdate() and PureComponent
react/no-unused-class-
 component-methods               ##Avoid unused component methods (i.e. dead code)
react/no-arrow-function-lifecycle##Component methods should not use arrow functions

react/destructuring-assignment   ##Requires or forbids destructuring of props|state|context
 [STR]                           ##STR: 'always' (def), 'never'

react/no-unknown-property [OBJ]  ##Avoid unknown HTML attributes in RDOM
                                 ##Can whitelist with OBJ.ignore 'ATTR'_ARR
react/button-has-type [OBJ]      ##Enforce that type value of <button> is specified and is valid
                                 ##Can pass OBJ.button|submit|reset false to forbid some types
react/no-adjacent-inline-elements##Must separate inline HTML tags (like <a>) with whitespaces.
                                 ##Otherwise they would be displayed next to each other with no space in-between.
react/no-unescaped-entities [OBJ]##Must HTML escape > " ' } inside text nodes
                                 ##OBJ:
                                 ##  - forbid STR_ARR (def: > " ' }) or OBJ_ARR: char STR, alternatives STR_ARR (what to replace with)
react/jsx-no-comment-textnodes   ##Avoid injecting JavaScript comments as text nodes

react/no-typos                   ##Avoid case typos on React methods
react/no-deprecated              ##Avoid deprecated React methods
react/no-string-refs [OBJ]       ##Avoid ref="REF", prefer ref={FUNC(REF)}
                                 ##OBJ:
                                 ##  - noTemplateLiterals BOOL (def: false): no ref={`...`}
react/no-render-return-value     ##Avoid assigning ReactDOM.render() return value
react/no-find-dom-node           ##Avoid findDOMNode()
react/no-is-mounted              ##Avoid isMounted()
react/no-danger                  ##Avoid dangerouslySetInnerHTML
react/no-danger-with-children    ##Avoid using both dangerouslySetInnerHTML and children at the same time
react/no-unsafe                  ##Avoid UNSAFE_* methods
react/no-invalid-html-attribute
 [STR_ARR]                       ##Avoid specific HTML 'ATTR'_ARR (def: ['rel'])
react/jsx-no-target-blank [OBJ]  ##<a target="_blank"> must be accompanied by rel="noreferrer noopener"
                                 ##OBJ:
                                 ##  - enforceDynamicLinks 'always' (def) or 'never': whether to enforce it when URI is JSX
                                 ##  - allowReferrer BOOL: if false (def), requires noreferrer
                                 ##  - warnOnSpreadAttributes BOOL (def: false): checks {...OBJ}
                                 ##  - links|forms BOOL (def: true|false): forbid inside links|forms
react/jsx-no-script-url [OBJ_ARR]##No "javascript:*" URLs
                                 ##OBJ_ARR:
                                 ##  - name 'TAG': only for <TAG>
                                 ##  - props 'ATTR'_ARR: only for ATTR="..."

react/jsx-key [OBJ]              ##Must use "key" when needed
                                 ##OBJ:
                                 ##  - checkFragmentShorhand BOOL (def: false): checks <>...</>
                                 ##  - checkKeyMustBeforeSpread BOOL (def: false): forbid "key" after {...OBJ}
react/no-array-index-key         ##Avoid using an ARR index as "key", e.g. ARR.map((VAL, index) => <RTYPE key={index}>)
react/display-name [OBJ]         ##Must specify displayName
                                 ##If OBJ.ignoreTranspilerName BOOL false (def), ignore if Babel will fix displayName
react/require-optimization [OBJ] ##Must use shouldComponentUpdate()
                                 ##OBJ: allowDecorators 'FUNC'_ARR: ignore if using @FUNC decorators
react/static-property-placement  ##How to define static properties ([child]contextType[s], defaultProps, propTypes, displayName):
 [STR] [OBJ]                     ##  - 'static public field' (def): class { static VAR = VAL }
                                 ##  - 'static getter': class { static get VAR(){} }
                                 ##  - 'property assignment': CLASS.VAR = VAL
                                 ##OBJ:
                                 ##  - VAR STR: same for each static property (e.g. 'defautProps')

react/prop-types [OBJ]           ##Must use propTypes
                                 ##OBJ:
                                 ##  - skipUndeclared BOOL (def: false): ignore if there is no propTypes block
                                 ##  - ignore 'PROP'_ARR
                                 ##  - customValidators FUNC_ARR: custom ignore
react/require-default-props [OBJ]##Must use defaultProps for every non-required propType
                                 ##OBJ:
                                 ##  - forbidDefaultForRequired BOOL (def: false): must not use defaultProps for a required
                                 ##    propType
                                 ##  - ignoreFunctionalComponents BOOL (def: false): ignored for functional components
react/default-props-match-       ##Avoid defaultProps with no propType
 prop-types [OBJ]                ##Also avoid if there is a propType but it is required, if OBJ.allowRequiredDefaults false (def)
react/no-unused-prop-types [OBJ] ##Avoid unused propTypes
                                 ##OBJ:
                                 ##  - skipShapeProps BOOL (def: false): ignore PropTypes.shape
                                 ##  - ignore 'PROP'_ARR
                                 ##  - propWrapperFunctions FUNC_ARR:
                                 ##     - ignore FUNC(PropTypes)
                                 ##     - FUNC can be 'FUNC' or { property 'FUNC' [, object 'VAR'] }
                                 ##  - customValidators FUNC_ARR: custom ignore
react/forbid-prop-types [OBJ]    ##Avoid using propTypes among OBJ.forbid STR_ARR (def: 'any', 'array', 'object')
                                 ##OBJ:
                                 ##  - check[Child]ContextTypes BOOL (def: false): also check [child]ContextTypes
react/forbid-foreign-prop-types  ##When importing propTypes, must do it as:
 [OBJ]                           ##  import Component, { propTypes [as ...] } from 'MDL'
                                 ##OBJ:
                                 ##  - allowInPropTypes BOOL (def: false): allow if using from another component
react/prefer-exact-props         ##Must use module 'prop-types-exact'

react/sort-comp [OBJ]            ##Enforce RTYPE properties sorting order
                                 ##OBJ:
                                 ##  - order 'GROUP'_ARR (order between group), among (following is default order):
                                 ##     - 'static-methods'
                                 ##     - 'lifecycle'
                                 ##     - 'everything-else'
                                 ##     - 'render'
                                 ##     (not specified in default order)
                                 ##     - 'getters', 'setters'
                                 ##     - 'type-annotations'
                                 ##     - 'instance-variables'
                                 ##     - 'instance-methods'
                                 ##     - 'static-variables'
                                 ##  - groups.GROUP 'NAME'_ARR (order inside each group), with default for lifecyle:
                                 ##    'displayName', 'propTypes', 'contextTypes', 'childContextTypes', 'mixins',
                                 ##    'statics', 'defaultProps', 'constructor', 'getDefaultProps', 'state', 'getInitialState',
                                 ##    'getChildContext', 'getDerivedStateFromProps', '[UNSAFE_]componentWillMount', 'componentDidMount',
                                 ##    '[UNSAFE_]componentWillReceiveProps', 'shouldComponentUpdate', '[UNSAFE_]componentWillUpdate',
                                 ##    'getSnapshotBeforeUpdate', 'componentDidUpdate', 'componentDidCatch', 'componentWillUnmount'
                                 ##Both 'GROUP' and 'NAME' can be REGEXP
react/sort-prop-types [OBJ]      ##Enforce propTypes alphabetical sorting
                                 ##OBJ:
                                 ##  - ignoreCase BOOL
                                 ##  - callbacksLast BOOL (def: false): put on* last
                                 ##  - requiredFirst BOOL (def: false): put required first
                                 ##  - sortShapeProp BOOL (def: false): also apply sorting on PropTypes.shape() properties

react/
jsx-no-constructed-context-values##Do not allow OBJ as "value" for contexts

react/no-direct-mutation-state   ##Avoid this.state assignments (prefer setState())
react/no-set-state               ##Avoid setState()
react/no-did-mount|update-set-
 state [STR]                     ##
react/no-will-update-set-        ##Avoid setState() inside componentDidMount|DidUpdate|WillUpdate()
 state [STR]                     ##If STR 'disallow-in-func', also check callbacks inside component*()
react/no-access-state-in-setstate##Avoid setState({ value: this.state.* }). Prefer setState(state => ({ value: state.* }))
react/prefer-stateless-          ##Must use stateless components if there is no state
 function [OBJ]                  ##OBJ: ignorePureComponents BOOL (def: false): ignore if child of PureComponent
                                 ##and use this.props|context
react/no-unused-state            ##Avoid setting state, e.g. with getInitialState(), setState(), etc., that is unused
react/state-in-constructor [STR] ##Whether should RTYPE state should be initialized:
                                 ##  - 'always' (def): in constructor, as `this.state = OBJ`
                                 ##  - 'never': as static CLASS property, class { state = OBJ }

react/jsx-no-undef [OBJ]         ##Like no-undef RULE, but for JSX
                                 ##OBJ: allowGlobals BOOL (def: false)
react/jsx-uses-react             ##Fix RULE 'no-unused-vars' for JSX, for React variable
react/jsx-uses-vars              ##Fix RULE 'no-unused-vars' for JSX, for RTYPE variables

react/jsx-indent [VAL] [OBJ]     ##Indentation: NUM or 'tab'
                                 ##OBJ:
                                 ##  - checkAttributes BOOL (def: false)
                                 ##  - indentLogicalExpressions BOOL (def: false): && ||
react/jsx-indent-props [OBJ|VAL] ##Indentation for PROPs.
                                 ##OBJ:
                                 ##  - indentMode NUM, 'tab' or 'first'
                                 ##  - ignoreTernaryOperator BOOL (def: false)
                                 ##VAL is like { indentMode: VAL }
react/jsx-equals-spacing [STR]   ##Requires ('always') or forbids ('never', def) spaces around =
react/jsx-curly-spacing [OBJ|STR]##Spaces inside {}
                                 ##OBJ:
                                 ##  - when STR: 'always' or 'never' (def)
                                 ##  - allowMultiline BOOL (def: true)
                                 ##  - children|expressions STR|BOOL|OBJ: same but distinguish between
                                 ##    children and non-children
                                 ##  - spacing: objectLiterals 'always' or 'never': when EXPR is OBJ, i.e. {{}}
                                 ##STR is shorthand
react/jsx-curly-newline [OBJ|STR]##Newlines around {}
                                 ##STR: 'consistent' (def), 'require', 'forbid'
                                 ##OBJ:
                                 ##  - multiline|singleline 'consistent' (def), 'require', 'forbid'
react/jsx-newline [OBJ]          ##Newlines after <RTYPE> and {...}
                                 ##OBJ:
                                 ##  - prevent BOOL (def: false): if true, not if adjacent
react/jsx-tag-spacing            ##Spaces around < and >
                                 ##OBJ:
                                 ##  - closingSlash STR:
                                 ##     - 'never' (def): <RTYPE/>, <RTYPE></RTYPE>
                                 ##     - 'always': <RTYPE/ >, <RTYPE>< /RTYPE>
                                 ##     - 'allow': ignore
                                 ##  - beforeSelfClosing STR:
                                 ##     - 'always' (def): <RTYPE />
                                 ##     - 'never': <RTYPE/>
                                 ##     - 'allow': ignore
                                 ##  - beforeClosing STR:
                                 ##     - 'always': <RTYPE ></RTYPE >
                                 ##     - 'never': <RTYPE></RTYPE>
                                 ##     - 'allow' (def): ignore
                                 ##  - afterOpening STR:
                                 ##     - 'never' (def): <RTYPE/>, <RTYPE></RTYPE>
                                 ##     - 'always': < RTYPE/>, < RTYPE></RTYPE>
                                 ##     - 'always-multiline': 'never' if no newline after <, 'allow' otherwise
                                 ##     - 'allow': ignore
react/jsx-props-no-multi-spaces  ##Avoid multiple consecutive spaces inside <...>
react/jsx-child-element-spacing  ##Inline HTML tag should not be on their own line, or whitespaces will collapase
                                 ##E.g. <p>Here is\n<a>test</a></p> becomes <p>Here is<a>test</a></p>
react/jsx-closing-bracket-       ##Where to put /> or </
 location [STR|OBJ]              ##OBJ:
                                 ##  - selfClosing (only for self-closing tags) STR:
                                 ##     - 'tag-aligned': vertically aligned with <
                                 ##     - 'line-aligned': next line
                                 ##     - 'after-props': no new line if self-closing, next line otherwise
                                 ##     - 'props-aligned': aligned with props if self-closing, next line otherwise
                                 ##  - nonEmpty (inverse)
                                 ##STR is shorthand for both
react/jsx-closing-tag-location   ##Closing tag must be on same line as opening tag, or vertically aligned with it
react/jsx-first-prop-new-line    ##Newline before first PROP, among:
 [STR]                           ##  - 'never'
                                 ##  - 'always'
                                 ##  - 'multiline': if JSX is multiline
                                 ##  - 'multiline-multiprop': if JSX is multiline and has several PROPs
react/jsx-wrap-multilines        ##Requires wrapping multiline JSX in ()
                                 ##Can restrict to specific TYPEs, using OBJ:
                                 ##  - declaration|assignment|return|arrow STR (def: 'parens')
                                 ##  - condition|logical|prop STR (def: 'ignore')
                                 ##STR can be:
                                 ##  - 'ignore'
                                 ##  - 'parens'
                                 ##  - 'parens-new-line': also require newlines around ( )
react/jsx-one-expression-per-line##Avoid two <RTYPE> on same line
 [OBJ]                           ##OBJ:
                                 ##  - allow STR (def: "none"): allow <RTYPE>...</RTYPE> when ... is "literal" or "single-child"
react/self-closing-comp [OBJ]    ##Must use <RTYPE /> if there is no child
                                 ##For OBJ: component|html BOOL (def: true, false) (non-RDOM, RDOM)

react/jsx-no-duplicate-props     ##Prevents duplicate PROPs
 [OBJ]                           ##OBJ: ignoreCase BOOL (def: false)
react/jsx-max-props-per-line     ##Max PROPs per line
 [OBJ]                           ##OBJ:
                                 ##  - maximum NUM (def: 1)
                                 ##  - single|multi NUM: same but only inside single|multiple line elements
                                 ##  - when STR: 'always' (def) or 'multiline' (only checks if multiline JSX)
react/jsx-props-no-spreading     ##Forbids <RTYPE {...PROPS}>
 [OBJ]                           ##OBJ:
                                 ##  - custom|html 'enforce' (def) or 'ignore': for [non-]RDOM
                                 ##  - explicitSpread 'enforce' (def) or 'ignore': if 'ignore', allow if PROPS is a literal OBJ
                                 ##  - exceptions 'RTYPE'_ARR
react/jsx-max-depth [OBJ]        ##Max nesting OBJ.max NUM (def: 2)

react/jsx-pascal-case [OBJ]      ##Requires <RType> to be PascalCase
                                 ##OBJ:
                                 ##  - allowAllCaps BOOL (def: false)
                                 ##  - allowLeadingUnderscore BOOL (def: false)
                                 ##  - allowAllNamespace BOOL (def: false): if true, only in 'VAR' if 'VAR.VAR2'
                                 ##  - ignore 'RTYPE_GLOB'_ARR: whitelists
react/boolean-prop-naming [OBJ]  ##Requires PROPs with propTypes.VAR (OBJ.propTypeNames "VAR"_ARR, def "bool") names to
                                 ##match OBJ.rule REGEXP (def: "^(is|has)[A-Z]([A-Za-z0-9]?)+")
                                 ##OBJ:
                                 ##  - message STR: can use '{{propName}}' and '{{pattern}}'
                                 ##  - validateNested BOOL (def: false)
react/jsx-handler-names [OBJ]    ##Requires PROPs naming for:
                                 ##  - event handlers PROP: start with OBJ.eventHandlerPropPrefix STR|BOOL (def: 'on')
                                 ##  - event handlers PROP's value: start with OBJ.eventHandlerPrefix STR|BOOL (def: 'handle')
                                 ##E.g. onChange={this.handleChange}
                                 ##OBJ:
                                 ##  - checkLocalVariables BOOL (def: false): check event handlers stored as local variables too
                                 ##  - checkInlineFunctions BOOL (def: false): check event handlers stored as inline functions too
react/jsx-sort-props             ##Requires sorting PROPs
                                 ##OBJ:
                                 ##  - noSortAlphabetically BOOL (def: false)
                                 ##  - ignoreCase BOOL (def: false)
                                 ##  - callbacksLast BOOL (def: false): on* must be last
                                 ##  - shorthandFirst|Last BOOL (def: false): boolean attribute must be first|last
                                 ##  - reservedFirst STR_ARR|BOOL (def: 'children', 'dangerouslySetInnerHTML', 'key', 'ref'):
                                 ##    must be first
react/jsx-sort-default-props     ##Requires sorting defaultProps
                                 ##OBJ:
                                 ##  - ignoreCase BOOL (def: false)

jsx-quotes [STR]                  #Whether using ATTR="" or ATTR='' in JSX
                                  #STR: 'prefer-double' (def), 'prefer-single'
react/jsx-boolean-value [STR]    ##Whether BOOL attributes should be ATTR ('never', def) or ATTR={BOOL} ('always')
 [OBJ]                           ##OBJ: always|never "ATTR"_ARR (exceptions)
react/jsx-no-bind [OBJ]          ##Avoid, according to OBJ:
                                 ##  - allowFunctions false (def): PROP value being a non-arrow function
                                 ##  - allowArrowFunctions false (def): PROP value being an arrow function
                                 ##  - allowBind false (def): PROP value being a FUNC.bind()
                                 ##Can whitelist with:
                                 ##  - OBJ.ignoreRefs true (def: false): for ref={FUNC}
                                 ##  - OBJ.ignoreDOMComponents true (def: false): for onDOMEVENT
react/jsx-no-literals [OBJ]      ##Requires <...>{'STR'}</...> instead of <...>STR</...>
                                 ##OBJ:
                                 ##  - noStrings BOOL (def: false): forbids any literal STR in JSX, even outside {}
                                 ##  - noAttributeStrings BOOL (def: false): forbids any literal STR in attributes
                                 ##  - allowedStrings STR_ARR
                                 ##  - ignoreProps BOOL (def: false): ignore inside props
react/jsx-curly-brace-presence   ##Whether {} should be required ("always"), never allowed unless necessary ("never") or
 [OBJ]                           ##"ignore"
                                 ##Using OBJ: props STR, children STR
react/jsx-fragments [STR]        ##Require JSX fragments to be:
                                 ##  - 'syntax': <>...</> (except if using 'key' JSX attribute)
                                 ##  - 'element': <React.Fragment>...</React.Fragment>
react/jsx-no-useless-fragments   ##Avoid <>...</> if either it:
 [OBJ]                           ##  - has only one child
                                 ##  - is the child of a RDOM
                                 ##OBJ:
                                 ##  - allowExpressions BOOL (def: false): allow single EXPR

react/jsx-filename-extension     ##Requires files containing JSX to have OBJ.extensions '.EXT'_ARR (def: '.jsx')
 [OBJ]                           ##OBJ:
                                 ##  - allow 'always' (def) or 'as-needed': whether to forbid files not containing JSX to have OBJ.extensions

react/prefer-read-only-props     ##Enforce read-only types with Flow for props


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tsc --jsx STR                     #Allows JSX.
                                  #Must also use *.tsx instead of *.ts
                                  #It is type checked.
                                  #It is also transpiled according to STR:
                                  #  - 'preserve' (def): kept as is, with *.jsx
                                  #  - 'react-native' (def): kept as is, with *.js
                                  #  - 'react[-native]': to React.createElement(...), with *.js
                                  #  - 'react-jsx': to jsx()
                                  #  - 'react-jsxdev': to jsxs()
                                  #Cannot use <TYPE>VAL (but can use "VAL as TYPE")
tsc --jsxFactory STR              #'FUNC' (def: 'React.createElement') used with --jsx 'react'
/* @jsx STR */                    #Useful when using an alternative library (e.g. Preact)
tsc --jsxFragmentFactory STR
/* @jsxFrag STR */                #'FUNC' (def: 'React.Fragment') used with --jsx 'react'

TYPES ==>                         #
React                             #NAMESPACE
JSX                               #NAMESPACE
JSX.Element                       #TYPE of RELEM
JSX.ElementClass                  #TYPE of CLASS RTYPE
JSX.IntrisicElements              #INTERFACE { 'TAG': { 'ATTR': TYPE }, ... } with all possible RDOMs and their ATTRs.
                                  #Can merge to it to add new ones.
JSX.ElementAttributesProperty     #INTERFACE { 'PROP': {}, ... } specifying which RTYPE[PROP] should be used to retrieve PROPs TYPEs
                                  #Default to 'props'
JSX.IntrinsicAttributes           #INTERFACE { 'PROP': TYPE, ... } of PROPs shared by all RELEMs (e.g. 'key')
JSX.IntrinsicClassAttributes<CLAS>#Same only for CLASS RELEMs (e.g. 'ref')
JSX.ElementChildrenProperty       #Same as JSX.ElementAttributesProperty but for RCHILDREN TYPEs
