
        
   DENO  
        



VERSION ==>                       #CLI: 1.33.1
                                  #std: 0.185.0
                                  #  - i.e. most releases can be breaking


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARCHITECTURES ==>                 #x86_64 on Windows|macOS|Linux, or ARM64 on macOS

GITHUB RELEASES ==>               #With only Deno CLI, zipped, for each version and architecture

VERSION MANAGER ==>               #asdf + asdf-deno
                                  #Not documented yet

deno_install                      #sh|Powershell script to install Deno.
                                  #Download GitHub release then extract to DENO_INSTALL_ROOT
                                  #Can pass specific X.Y.Z version as argument (def: latest)
                                  #Available at https://deno.land/install.sh|ps1 or via
                                  #scoop|homebrew|macports|chocolatey|snap|pacman|zypper|cargo
                                  #Version 0.1.8

ENVVAR DENO_NO_UPDATE_CHECK       #Unless set, fails when a newer Deno version is available

deno upgrade                      #Upgrade Deno CLI
--version                         #'X.Y.Z' (def: latest)
--canary                          #Include canary versions
--output                          #DENO_INSTALL_ROOT
--force|-f                        #Even if not out-of-date
--dry-run                         #

deno install|uninstall            #Main global Deno DIR
--root=DIR                        #With deno_install, ENVVAR is DENO_INSTALL
ENVVAR DENO_INSTALL_ROOT          #Def: ~/.deno

DENO_INSTALL_BIN                  #DENO_INSTALL_ROOT/bin
                                  #Contains deno executable
                                  #Must be in ENVVAR PATH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF_FILE                         #

deno bench|cache|check|compile
 |eval|fmt|info|install|lint|repl
 |run|task|test|vendor
--[no-]config|-c CONF_FILE        #Specify the configuration file
                                  #Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno ...
--quiet|-q                        #
--unstable                        #Enable unstable APIs
                                 !#Means API is unstable

deno bench|coverage|fmt|lint|test
--ignore=FILE...                  #Ignore files

deno compile|eval|run
--ext EXT                        !#Set content type of the supplied file [possible values: ts, tsx, js, jsx]

deno bench|fmt|lint|run|test      #
--watch                           #Watch for file changes and restart automatically
                                  #Only local files from entry point module graph are watched.
--no-clear-screen                 #Do not clear terminal screen when under watch mode

deno bench|doc|info|lint
--json                            #Output result in JSON format
                                 !#Unstable with deno bench|info

ENVVAR NO_COLOR                   #Set to disable color

deno init [DIR]                   #Initialize a new project

deno completions SHELL            #Print completion script
                                  #SHELL: bash|fish|powershell|zsh|fig


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UFILE                             #FILE|URL
[U]SFILE                          #[U]FILE or - (stdin)

deno run [USFILE [ARG...]]        #Run a JavaScript or TypeScript program

deno eval ARG...                  #Eval script
                                  #Implies --allow-all
--print|-p                        #Print result to stdout

deno repl                         #Run REPL
--eval='CODE'                     #Evaluates the provided code when the REPL starts
--eval-file=UFILE,...             #Evaluates the provided file(s) as scripts when the REPL starts
ENVVAR DENO_REPL_HISTORY          #REPL history. Empty to disable.
                                  #Def: DENO_DIR/deno_history.txt

deno bench|compile|eval|info
 |install|repl|run|test
--seed NUM                        #Set the random number generator seed
ENVVAR DENO_V8_FLAGS              #Set V8 command line options
--v8-flags[='--FLAG ...']         #To see a list of all available flags use --v8-flags=--help.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno install UFILE                #Installs a script as an executable in the installation root's bin directory.
--name|-n BINARY                  #Executable file name. Def:
                                  #  - Attempt to take the file stem of the URL path. The above example would become 'file_server'.
                                  #  - If the file stem is something generic like 'main', 'mod', 'index' or 'cli',
                                  #    and the path has no parent, take the file name of the parent path.
                                  #    Otherwise settle with the generic name.
                                  #  - If the resulting name has an '@...' suffix, strip it.
--force|-f                        #Forcefully overwrite existing installation

deno uninstall BINARY             #Uninstall a script previously installed with deno install


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMPILE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno compile UFILE [ARG...]      !#Compile the script into a self contained executable
                                 !#Any flags passed which affect runtime behavior, such as '--unstable', '--allow-*', '--v8-flags', etc.
                                 !#are encoded into the output executable and used at runtime as if they were passed to a similar 'deno run' command.
                                 !#The executable name is inferred by default: Attempt to take the file stem of the URL path.
                                 !#The above example would become 'file_server'.
                                 !#If the file stem is something generic like 'main', 'mod', 'index' or 'cli', and the path has no parent, take the file name of the parent path.
                                 !#Otherwise settle with the generic name. If the resulting name has an '@...' suffix, strip it.
                                 !#Cross-compiling to different target architectures is supported using the `--target` flag.
                                 !#On the first invocation with deno will download proper binary and cache it in $DENO_DIR.
                                 !#The aarch64-apple-darwin target is not supported in canary.
--include=MODULE                 !#Includes an additional module in the compiled executable's module graph.
                                 !#Use this flag if a dynamically imported module or a web worker main module fails to load in the executable.
                                 !#This flag can be passed multiple times, to include multiple additional modules.
--output|-o=FILE                 !#Output file (defaults to $PWD/<inferred-name>)
--target ARCH                    !#Target OS architecture [possible values: x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin, aarch64-apple-darwin]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno eval|install|repl|run|test   #
--inspect[=HOSTNAME]              #Activate inspector on host:port (default: 127.0.0.1:9229)
--inspect-brk[=HOSTNAME]          #Activate inspector on host:port, wait for debugger to connect and break at the start of user script
--inspect-wait[=HOSTNAME]         #Activate inspector on host:port and wait for debugger to connect before running user code

deno lsp                          #Start the language server
                                  #Provides a way for code editors and IDEs to interact with Deno using the Language Server Protocol.
                                  #Usually humans do not use this subcommand directly.
                                  #For example, 'deno lsp' can provide IDEs with go-to-definition support and automatic code formatting.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno task [TASK]                  #Run a task defined in the configuration file
--cwd DIR                         #Specify the directory to run the task in


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPORT_MAP_FILE                   #

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
 |vendor
--import-map=IMPORT_MAP_FILE      #Load import map file from local file or remote URL.
                                  #Specification: https://wicg.github.io/import-maps/
                                  #Examples: https://github.com/WICG/import-maps#the-import-map
--[no-]lock[=FILE]                #Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.

deno bench|cache|check|compile
 |eval|install|repl|run|test
--lock-write                      #Force overwriting the lock file.

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-remote                       #Do not resolve remote modules

deno vendor UFILE...              #Vendor remote modules into a local directory
                                  #Analyzes the provided modules along with their dependencies, downloads remote modules to the output directory,
                                  #and produces a DIR/import_map.json that maps remote specifiers to the downloaded files.
--output DIR                      #The directory to output the vendored modules to
--force|-f                        #Forcefully overwrite conflicting files in existing output directory

ENVVAR DENO_AUTH_TOKENS           #A semi-colon separated list of bearer tokens and hostnames to use when fetching remote modules from private repositories
                                  #(e.g. "abcde12345@deno.land;54321edcba@github.com")


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR DENO_DIR                   #Set the cache directory
PPATH                             #http[s]/DOMAIN or file/PATH
DENO_DIR/deps/PPATH/              #Imports cache
                                  #Files:
                                  #  - RANDOM_ID: file contents
                                  #  - RANDOM_ID.metadata.json OBJ:
                                  #     - url 'URL': request URL
                                  #     - headers OBJ: request header
                                  #     - now: request timestamp
DENO_DIR/check_cache_v1           #TypeScript type check cache. SQLite database
DENO_DIR/gen/PPATH                #TypeScript transpiling cache.
                                  #Files:
                                  #  - RANDOM_ID.js: transpiled file contents
                                  #  - RANDOM_ID.meta: OBJ
                                  #     - source_hash 'SHA': source file contents checksum
                                  #     - emit_hash 'SHA': transpiled file contents checksum
DENO_DIR/npm/                     #

deno cache UFILE...               #Cache and compile remote dependencies recursively.
                                  #Download and compile a module with all of its static dependencies and save them in the local cache, without running any code.
                                  #Future runs of this module will trigger no downloads or compilation unless --reload is specified.

deno bench|compile|eval|info
 |install|repl|run|test
--cached-only                     #Require that remote dependencies are already cached

deno bench|cache|check|compile|doc#Reload source code cache (recompile TypeScript)
 |eval|info|install|repl|run|test #CACHE_BLOCKLIST:
 |vendor                          #  - def: everything
--reload|-r [<CACHE_BLOCKLIST>...]#  - https://deno.land/std: only standard modules
                                  #  - URL: specific modules
                                  #  - 'npm:': Reload all npm modules
                                  #  - 'npm:MODULE': Reload specific npm module

deno info [UFILE]                 #Show info about cache or info related to source file
                                  #The following information is shown:
                                  #  - local: Local path of the file.
                                  #  - type: JavaScript, TypeScript, or JSON.
                                  #  - emit: Local path of compiled source code. (TypeScript only.)
                                  #  - dependencies: Dependency tree of the source file.
                                  #Without any additional arguments, 'deno info' shows DENO_DIR and subdirectories.
                                  #  - DENO_DIR: Directory containing Deno-managed files.
                                  #  - Remote modules cache: Subdirectory containing downloaded remote modules.
                                  #  - TypeScript compiler cache: Subdirectory containing TS compiler output.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-npm                          #Do not resolve npm modules
ENVVAR NPM_CONFIG_REGISTRY        #URL to use for the npm registry.

deno bench|cache|check|compile
 |eval|info|install|repl|run|test
--[no-]node-modules-dir[=DIR]     #Creates a local node_modules folder

ENVVAR DENO_NO_PACKAGE_JSON       #Disables auto-resolution of package.json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|compile|eval     #Type-check modules
 |install|repl|run|test           #If the value of '--no-check=remote' is supplied, diagnostic errors from remote modules will be ignored.
--[no-]check[=STR]                #Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant.
                                  #If the value of '--check=all' is supplied, diagnostic errors from remote modules will be included.
                                  #Alternatively, the 'deno check' subcommand can be used.

deno check UFILE...               #Download and type-check without execution.
                                  #Unless --reload is specified, this command will not re-download already cached dependencies.
--all                             #Type-check all code, including remote modules and npm packages

deno types                        #Print runtime TypeScript declarations


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--allow-read[=DIR|FILE,...]       #Allow file system read access
--allow-write[=DIR|FILE,...]      #Allow file system write access
--allow-net[=HOST|IP[:PORT],...]  #Allow network access
--allow-env[=ENVVAR,...]          #Allow access to system environment information
--allow-sys[=FUNC,...]            #Allow access to OS information
--allow-run[=BINARY,...]          #Allow running subprocesses
--allow-ffi[=DIR|FILE,...]       !#Allow loading dynamic libraries
--allow-hrtime                    #Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting.

--allow-all|-A                    #Allow all permissions
NOTATION ==>             [CHAR...]#Notation RWNESUFH to mean require --allow-read|write|net|env|sys|run|ffi|hrtime
                                  #--allow-read|net often means depends if URL|PATH is used

ENVVAR DENO_NO_PROMPT             #Set to disable permission prompts on access
--no-prompt                       #Always throw if required permission wasn't passed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test [UFILE|DIR...]          #Run tests
 [-- ARG...]                      #Evaluate the given modules, run all tests declared with 'Deno.test()' and report results to standard output.
                                  #Directory arguments are expanded to all contained files matching the glob {*_,*.,}test.{js,mjs,ts,mts,jsx,tsx}
--trace-ops                       #Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.
--doc                             #Type-check code blocks in JSDoc and Markdown
--fail-fast[=NUM]                 #Stop after N errors. Defaults to stopping after first failure.
--allow-none                      #Don't return error code if no test files are found
--shuffle[=NUM]                   #Shuffle the order in which the tests are run
--parallel                        #Run test modules in parallel. Parallelism defaults to the number of available CPUs or the value in the DENO_JOBS environment variable.
ENVVAR DENO_JOBS                  #Number of parallel workers used for the --parallel flag with the test subcommand. Defaults to number of available CPUs.

deno bench|test
--no-run                          #Cache modules, but don't run files
--filter GLOB                     #Run files with this string or pattern in the bench name


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BENCHMARK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench [UFILE|DIR...]         #Run benchmarks
 [-- ARG...]                      #Evaluate the given modules, run all benches declared with 'Deno.bench()' and report results to standard output.
                                  #DIR is expanded to all contained files matching the glob {*_,*.,}bench.{js,mjs,ts,mts,jsx,tsx}:


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COVERAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test
--coverage=DIR                    #Collect coverage profile data into DIR

deno coverage FILE...             #Print coverage reports from coverage profiles to stdout
--include=REGEXP...               #Include source files in the report [default: ^file:]
--exclude=REGEXP...               #Exclude source files from the report [default: test\.(js|mjs|ts|jsx|tsx)$]
--lcov                            #Output coverage report in lcov format
--output=FILE                     #Output file (defaults to stdout) for lcov


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LINT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno lint [SFILE...]              #Lint source files
                                  #Ignore diagnostics on the next line by preceding it with an ignore comment and rule name:
                                  #  // deno-lint-ignore no-explicit-any
                                  #  // deno-lint-ignore require-await no-empty
                                  #Names of rules to ignore must be specified after ignore comment.
                                  #Ignore linting a file by adding an ignore comment at the top of the file:
                                  #  // deno-lint-ignore-file
--rules                           #List available rules
--rules-tags=TAG,...              #Use set of rules with a tag
--rules-include|exclude=RULE,...  #Include|exclude lint rules
--compact                         #Output lint result in compact format


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FORMATTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno fmt [SFILE...]               #Format source files
                                  #Ignore formatting code by preceding it with an ignore comment: // deno-fmt-ignore
                                  #Ignore formatting a file by adding an ignore comment at the top of the file: // deno-fmt-ignore-file
--check                           #Check if the source files are formatted
--ext=EXT                         #Set content type of the supplied file [default: ts] [possible values: ts, tsx, js, jsx, md, json, jsonc]
--[no-]use-tabs                   #Use tabs instead of spaces for indentation. Defaults to false.
--line-width=NUM                  #Define maximum line width. Defaults to 80.
--indent-width=NUM                #Define indentation width. Defaults to 2.
--[no-]single-quote               #Use single quotes. Defaults to false.
--prose-wrap=STR                  #Define how prose should be wrapped. Defaults to always. [possible values: always, never, preserve]
--[no-]semicolons                 #Use semicolons. If false (def: true) still used where necessary.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              DOC              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno doc UFILE VARR               #Show documentation for a module
--private                         #Output private documentation
--builtin                         #Show documentation for runtime built-ins


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTTP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR HTTP_PROXY                 #Proxy address for HTTP requests (module downloads, fetch)
ENVVAR HTTPS_PROXY                #Proxy address for HTTPS requests (module downloads, fetch)
ENVVAR NO_PROXY                   #Comma-separated list of hosts which do not use a proxy (module downloads, fetch)

HCOPTS.proxy                     !#HTTP_PROXY
HTTP_PROXY.url                   !#'URL'
HTTP_PROXY.basicAuth
 .username|password              !#STR

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              TLS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--unsafely-ignore-certificate
  -errors[=HOSTNAME,...]          #DANGER: Disables verification of TLS certificates

ENVVAR DENO_TLS_CA_STORE          #Comma-separated list of order dependent certificate stores. Possible values: "system", "mozilla". Defaults to "mozilla".
ENVVAR DENO_CERT
deno bench|cache|check|compile
 |eval|info|install|repl|run
 |test|upgrade|vendor
--cert                            #'PEM' to CA authority

HCOPTS.caCerts                   !#'PEM'_ARR of root certificates
HCOPTS.certChain                 !#STR of certificate chain
HCOPTS.privateKey                !#'PEM' (RSA|PKCS8) of client certificate


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TODO:
  - Web Sockets
  - FFI
  - Permissions
  - Observability
  - Runtime environment
  - I/O
  - File system
  - Sub process
  - Network
  - HTTP
  - KV
  - Testing

globalThis                        #
self
window                            #Like DOM: same as globalThis
Deno                              #Global variable for all non-standard API

MessageChannel
MessagePort
BroadcastChannel
MessageEvent                      #Like DOM

URL
URL.createObjectURL
URL.revokeObjectURL
URLSearchParams                   #Like DOM
URLPattern                        #Like DOM but no: OPTS.ignoreCase

fetch(...)                      RN#Like DOM
Request
Response
Headers
FormData                          #Like DOM

REQQ.client                      !#HTTP_CLIENT
Deno.createHttpClient([HCOPTS])
 ->HTTP_CLIENT                   !#Customize HTTP request option
HTTP_CLIENT.rid                  !#'RID'
HTTP_CLIENT.close()              !#

structuredClone                   #Like DOM

caches
CacheStorage
Cache                             #Like DOM, but no: add[All]|matchAll|keys() nor CACHE_STORAGE.match()

Worker                            #Like DOM, but no: OPTS.credentials

CompressionStream
DecompressionStream               #Like DOM

console                           #Like DOM

alert([STR])                      #Similar to DOM: print STR (def: 'Alert') and wait for Enter on stdin (unless non-interactive)
confirm([STR])->BOOL              #Same but returns BOOL based on stdin answer
                                  #Def STR 'Confirm'. False if stdin not interactive
prompt([STR[, STR2]])->STR3       #Same but returns STR3|null answer.
                                  #Def STR 'Prompt'. null if stdin not interactive, or if empty answer.
                                  #STR2 is default value. "[STR2]" is appended to question STR

EventTarget
Event
CustomEvent
DOMException
ErrorEvent
ProgressEvent                     #Like DOM, but no: OPTS.capture

globalThis.add|removeEventListener
globalThis.dispatchEvent          #Like DOM
onload                            #Like DOM, but when top-level scope run
onbeforeunload                    #Like DOM, but before process exit
onunload                          #Like DOM, but before process exit
globalThis|WORKERGLOBAL.onerror   #Like DOM, but argument is ERROREVENT
onunhandledrejection
reportError                       #Like DOM

WebAssembly                       #Like DOM, but no: externref, Tag(), Exception()

WEB CRYPTO API ==>                #Like DOM

close()                           #Like DOM: exits process
closed                            #Like DOM: true only inside [before]unload

TextDecoder|Encoder[Stream]
btoa|atob                         #Like DOM

set|clearTimeout|Interval
queueMicrotask                    #Like DOM
Deno.[un]refTimer(ID)             #Like Node ID.[un]ref()

Blob
File
FileReader                        #Like DOM

ReadableStream
ReadableStreamDefaultReader
ReadableStreamByobReader
WritableStream
WritableStreamDefaultWriter
TransformStream
ByteLengthQueuingStrategy
CountQueuingStrategy              #Like DOM

AbortController
AbortSignal                       #Like DOM

deno bench|compile|eval|info
 |install|repl|run|test
--location=URL                    #Required to use globalThis.location
location                          #Like DOM but readonly
                                  #  - LOCATION.assign|replace|reload() always throw

navigator                         #Like DOM but only: userAgent, hardwareConcurrency, language[s]
NAVIGATOR.userAgent               #'Deno/X.Y.Z'

localStorage
sessionStorage                    #Like DOM
DENO_DIR/RANDOM_ID/               #Where localStorage is saved
                                  #Uses SQLite database

performance
PerformanceEntry
PerformanceMark
PerformanceMeasure                #Like DOM, but no PerformanceObserver, PerformanceResource|Server|NavigationTiming

import.meta.url                   #'file://...'
import.meta.resolve(STR)
 ->>'file://...'                  #
import.meta.main                  #BOOL. True if first loaded file

Deno.inspect(VAL[, OPTS])->STR    #Similar to Node UTIL.inspect()
OPTS.showHidden                   #BOOL (def: false). Similar to Node
OPTS.depth                        #NUM (def: 4). Similar to Node
OPTS.iterableLimit                #Similar to Node OPTS.maxArrayLength, but for any ITERABLE
OPTS.strAbbreviateSize            #NUM (def: none). Similar to Node OPTS.maxStringLength
OPTS.compact                      #BOOL (def: true). Similar to Node
OPTS.colors                       #BOOL (def: false). Similar to Node
OPTS.showProxy                    #BOOL (def: false). Similar to Node
OPTS.sorted                       #BOOL (def: false). Similar to Node
OPTS.getters                      #BOOL (def: false). Similar to Node
OPTS.trailingComma                #BOOL (def: false)
Symbol.for('Deno.customInspect')  #Similar to Symbol.for('nodejs.util.inspect.custom')

Deno.errors.NAME                  #Deno known error classes

Deno.errors.PermissionDenied      #Unauthorized, e.g. due to PERMISSIONs
Deno.errors.NotSupported          #API not implemented yet

Deno.errors.WouldBlock            #Syscall is sync, although should be async
Deno.errors.Interrupted           #Syscall interrupted (EINTR)

Deno.errors.AlreadyExists         #Create IO resource that already exists
Deno.errors.NotFound              #IO resource not found
Deno.errors.InvalidData           #Invalid IO read
Deno.errors.UnexpectedEof         #IO read an EOF unexpectedly
Deno.errors.WriteZero             #IO write 0 bytes
Deno.errors.BrokenPipe            #IO write to a pipe done reading (SIGPIPE)
Deno.errors.Busy                  #IO resource locked by another resource
Deno.errors.TimedOut              #IO timeout (ETIMEDOUT)
Deno.errors.BadResource           #IO resource is in bad state

Deno.errors.AddrInUse             #Start server on address|port already used
Deno.errors.AddrNotAvailable      #Start server on address|port that does not exist (EADDRNOTAVAIL)
Deno.errors.Http                  #Too many HTTP redirects

Deno.errors.NotConnected          #Socket connection ended or never started (ENOTCONN)
Deno.errors.ConnectionAborted     #Socket connection aborted (ECONNABORTED)
Deno.errors.ConnectionReset       #Socket connection reset
Deno.errors.ConnectionRefused     #Socket connection refused
