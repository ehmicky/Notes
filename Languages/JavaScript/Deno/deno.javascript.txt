
        
   DENO  
        



TODO:
  - KV
  - Testing

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #CLI: 1.33.1
                                  #std: 0.185.0
                                  #  - i.e. most releases can be breaking

Deno.version.deno                 #'X.Y.Z' version of CLI

deno ... --unstable               #Enable unstable APIs
                                 !#Means API is unstable

globalThis
self
window                            #Like DOM: all the same

Deno                              #Global variable for all non-standard API

UPATH                             #PATH|URL
[U]SPATH                          #[U]PATH or - (stdin)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB RELEASES ==>               #With only Deno CLI, zipped, for each version and architecture

VERSION MANAGER ==>               #asdf + asdf-deno
                                  #Not documented yet

deno_install                      #sh|Powershell script to install Deno.
                                  #Download GitHub release then extract to DENO_INSTALL_ROOT
                                  #Can pass specific X.Y.Z version as argument (def: latest)
                                  #Available at https://deno.land/install.sh|ps1 or via
                                  #scoop|homebrew|macports|chocolatey|snap|pacman|zypper|cargo
                                  #Version 0.1.8

ENVVAR DENO_NO_UPDATE_CHECK       #Unless set, fails when a newer Deno version is available

deno upgrade                      #Upgrade Deno CLI
--version                         #'X.Y.Z' (def: latest)
--canary                          #Include canary versions
--output                          #DENO_INSTALL_ROOT
--force|-f                        #Even if not out-of-date
--dry-run                         #

deno install|uninstall            #Main global Deno DIR
--root=DIR                        #With deno_install, ENVVAR is DENO_INSTALL
ENVVAR DENO_INSTALL_ROOT          #Def: ~/.deno

DENO_INSTALL_BIN                  #DENO_INSTALL_ROOT/bin
                                  #Contains deno executable
                                  #Must be in ENVVAR PATH
Deno.execPath()->'PATH'          R#PATH to deno executable

deno init [DIR]                   #Initialize a new project


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF_FILE                         #

deno bench|cache|check|compile
 |eval|fmt|info|install|lint|repl
 |run|task|test|vendor
--[no-]config|-c CONF_FILE        #Specify the configuration file
                                  #Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



deno bench|coverage|fmt|lint|test
--ignore=PATH,...                 #Ignore files

deno compile|eval|run --ext EXT  !#Set content type of the supplied file [possible values: ts, tsx, js, jsx]

deno ... --quiet|-q               #
deno bench|doc|info|lint --json   #Output result in JSON format
                                 !#Unstable with deno bench|info

deno completions SHELL            #Print completion script
                                  #SHELL: bash|fish|powershell|zsh|fig


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno run [USPATH [ARG...]]        #Run a JavaScript or TypeScript program

deno eval ARG...                  #Eval script
                                  #Implies --allow-all
--print|-p                        #Print result to stdout

deno repl                         #Run REPL
--eval='CODE'                     #Evaluates the provided code when the REPL starts
--eval-file=UPATH,...             #Evaluates the provided file(s) as scripts when the REPL starts
ENVVAR DENO_REPL_HISTORY          #REPL history. Empty to disable.
                                  #Def: DENO_DIR/deno_history.txt


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno install UPATH                #Installs a script as an executable in the installation root's bin directory.
--name|-n BINARY                  #Executable file name. Def:
                                  #  - Attempt to take the file stem of the URL path. The above example would become 'file_server'.
                                  #  - If the file stem is something generic like 'main', 'mod', 'index' or 'cli',
                                  #    and the path has no parent, take the file name of the parent path.
                                  #    Otherwise settle with the generic name.
                                  #  - If the resulting name has an '@...' suffix, strip it.
--force|-f                        #Forcefully overwrite existing installation

deno uninstall BINARY             #Uninstall a script previously installed with deno install


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMPILE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno compile UPATH [ARG...]      !#Compile the script into a self contained executable
                                  #Any flags passed which affect runtime behavior, such as '--unstable', '--allow-*', '--v8-flags', etc.
                                  #are encoded into the output executable and used at runtime as if they were passed to a similar 'deno run' command.
                                  #The executable name is inferred by default: Attempt to take the file stem of the URL path.
                                  #The above example would become 'file_server'.
                                  #If the file stem is something generic like 'main', 'mod', 'index' or 'cli', and the path has no parent, take the file name of the parent path.
                                  #Otherwise settle with the generic name. If the resulting name has an '@...' suffix, strip it.
                                  #Cross-compiling to different target architectures is supported using the `--target` flag.
                                  #On the first invocation with deno will download proper binary and cache it in $DENO_DIR.
                                  #The aarch64-apple-darwin target is not supported in canary.
--include=MODULE                  #Includes an additional module in the compiled executable's module graph.
                                  #Use this flag if a dynamically imported module or a web worker main module fails to load in the executable.
                                  #This flag can be passed multiple times, to include multiple additional modules.
--output|-o=PATH                  #Output file (defaults to $PWD/<inferred-name>)
--target ARCH                     #Target OS architecture [possible values: x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin, aarch64-apple-darwin]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno eval|install|repl|run|test   #
--inspect[=HOSTNAME]              #Activate inspector on host:port (default: 127.0.0.1:9229)
--inspect-brk[=HOSTNAME]          #Activate inspector on host:port, wait for debugger to connect and break at the start of user script
--inspect-wait[=HOSTNAME]         #Activate inspector on host:port and wait for debugger to connect before running user code

Deno.metrics()->METRICS           #Returns number of OPs (also called "bindings") since process started
                                  #OPs are like syscalls but inside Deno:
                                  #  - calls from JavaScript sandbox to privileged underlying code
                                  #  - most Deno.* corresponds to an OP
METRICS.opsDispatched             #NUM of ops started
METRICS.opsDispatchedSync         #Same but split between sync|async
 |Async[Unref]                    #Async is when it is ref'd by the process, AsyncUnref when it is not
METRICS.opsCompleted*             #Like opsDispatched, but finished
METRICS.bytesSentControl          #NUM of bytes sent for metadata
METRICS.bytesSentData             #NUM of bytes sent for data
METRICS.bytesReceived             #NUM of bytes received
METRICS.ops.OP                    #METRICS for a given OP

deno lsp                          #Start the language server
                                  #Provides a way for code editors and IDEs to interact with Deno using the Language Server Protocol.
                                  #Usually humans do not use this subcommand directly.
                                  #For example, 'deno lsp' can provide IDEs with go-to-definition support and automatic code formatting.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno task [TASK]                  #Run a task defined in the configuration file
--cwd DIR                         #Specify the directory to run the task in


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              URL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


URL
URL.createObjectURL
URL.revokeObjectURL
URLSearchParams                   #Like DOM
URLPattern                        #Like DOM but no: OPTS.ignoreCase

deno bench|compile|eval|info
 |install|repl|run|test
--location=URL                    #Required to use globalThis.location
location                          #Like DOM but readonly
                                  #  - LOCATION.assign|replace|reload() always throw

import.meta.url                   #Current 'URL'
                                  #Fails on REPL
import.meta.resolve(STR)->>'URL'  #
Deno.mainModule                  R#'URL' of first loaded file
                                  #Filename '$deno$repl.ts' if REPL
                                  #Requires read PERMISSION to its DIR
import.meta.main                  #BOOL. True if first loaded file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPORT_MAP_FILE                   #

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
 |vendor
--import-map=IMPORT_MAP_FILE      #Load import map file from local file or remote URL.
                                  #Specification: https://wicg.github.io/import-maps/
                                  #Examples: https://github.com/WICG/import-maps#the-import-map
--[no-]lock[=PATH]                #Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.

deno bench|cache|check|compile
 |eval|install|repl|run|test
--lock-write                      #Force overwriting the lock file.

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-remote                       #Do not resolve remote modules

deno vendor UPATH...              #Vendor remote modules into a local directory
                                  #Analyzes the provided modules along with their dependencies, downloads remote modules to the output directory,
                                  #and produces a DIR/import_map.json that maps remote specifiers to the downloaded files.
--output DIR                      #The directory to output the vendored modules to
--force|-f                        #Forcefully overwrite conflicting files in existing output directory

ENVVAR DENO_AUTH_TOKENS           #A semi-colon separated list of bearer tokens and hostnames to use when fetching remote modules from private repositories
                                  #(e.g. "abcde12345@deno.land;54321edcba@github.com")


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FILE_HASHID                       #ID based on file location
                                  #If PPATH, it is just the filename instead

ENVVAR DENO_DIR                   #Set the cache directory
PPATH                             #http[s]/DOMAIN or file/PATH
DENO_DIR/deps/PPATH/              #Imports cache
                                  #Files:
                                  #  - FILE_HASHID: file contents
                                  #  - FILE_HASHID.metadata.json OBJ:
                                  #     - url 'URL': request URL
                                  #     - headers OBJ: request header
                                  #     - now: request timestamp
DENO_DIR/check_cache_v1           #TypeScript type check cache. SQLite database
DENO_DIR/gen/PPATH                #TypeScript transpiling cache.
                                  #Files:
                                  #  - FILE_HASHID.js: transpiled file contents
                                  #  - FILE_HASHID.meta: OBJ
                                  #     - source_hash 'SHA': source file contents checksum
                                  #     - emit_hash 'SHA': transpiled file contents checksum
DENO_DIR/npm/                     #

deno cache UPATH...               #Cache and compile remote dependencies recursively.
                                  #Download and compile a module with all of its static dependencies and save them in the local cache, without running any code.
                                  #Future runs of this module will trigger no downloads or compilation unless --reload is specified.

deno bench|compile|eval|info
 |install|repl|run|test
--cached-only                     #Require that remote dependencies are already cached

deno bench|cache|check|compile|doc#Reload source code cache (recompile TypeScript)
 |eval|info|install|repl|run|test #CACHE_BLOCKLIST:
 |vendor                          #  - def: everything
--reload|-r [<CACHE_BLOCKLIST>...]#  - https://deno.land/std: only standard modules
                                  #  - URL: specific modules
                                  #  - 'npm:': Reload all npm modules
                                  #  - 'npm:MODULE': Reload specific npm module

deno info [UPATH]                 #Show info about cache or info related to source file
                                  #The following information is shown:
                                  #  - local: Local path of the file.
                                  #  - type: JavaScript, TypeScript, or JSON.
                                  #  - emit: Local path of compiled source code. (TypeScript only.)
                                  #  - dependencies: Dependency tree of the source file.
                                  #Without any additional arguments, 'deno info' shows DENO_DIR and subdirectories.
                                  #  - DENO_DIR: Directory containing Deno-managed files.
                                  #  - Remote modules cache: Subdirectory containing downloaded remote modules.
                                  #  - TypeScript compiler cache: Subdirectory containing TS compiler output.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-npm                          #Do not resolve npm modules
ENVVAR NPM_CONFIG_REGISTRY        #URL to use for the npm registry.

deno bench|cache|check|compile
 |eval|info|install|repl|run|test
--[no-]node-modules-dir[=DIR]     #Creates a local node_modules folder

ENVVAR DENO_NO_PACKAGE_JSON       #Disables auto-resolution of package.json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.typescript           #'X.Y.Z' version of TypeScript

deno bench|cache|compile|eval     #Type-check modules
 |install|repl|run|test           #If the value of '--no-check=remote' is supplied, diagnostic errors from remote modules will be ignored.
--[no-]check[=STR]                #Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant.
                                  #If the value of '--check=all' is supplied, diagnostic errors from remote modules will be included.
                                  #Alternatively, the 'deno check' subcommand can be used.

deno check UPATH...               #Download and type-check without execution.
                                  #Unless --reload is specified, this command will not re-download already cached dependencies.
--all                             #Type-check all code, including remote modules and npm packages

deno types                        #Print runtime TypeScript declarations


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--allow-read|write[=DIR|FILE,...] #Allow reading|writing files
                                  #If DIR, recursive
                                  #Not necessary for stdin|stdout|stderr
--allow-net[=HOST|IP[:PORT],...]  #Allow opening|connecting to sockets:
                                  #  - TCP|UDP (except Unix socket): Deno.connect|listen|start*()
                                  #  - DNS: Deno.resolve*()
                                  #  - HTTP: fetch()
                                  #  - WebSocket
--allow-env[=ENVVAR,...]          #Allow reading|writing ENVVARs (Deno.env) and accessing environment information
--allow-sys[=FUNC,...]            #Allow access to OS information
                                  #FUNC is Deno.FUNC() among 'loadavg|hostname|systemMemoryInfo|networkInterfaces|osRelease|osUptime|uid|gid'
--allow-run[=BINARY|URL,...]      #Allow subprocesses (Deno.Command|kill)
                                  #Subprocesses might not use Deno, i.e. can escape --allow-*
--allow-ffi[=UPATH,...]          !#Allow Deno.dlopen()
--allow-hrtime                    #Whether time resolution is ns or ms (for timing attacks and fingerprinting)

--allow-all|-A                    #Allow all permissions
NOTATION ==>              RWNESUFH#Notation to mean require --allow-read|write|net|env|sys|run|ffi|hrtime
                                  #--allow-read|net often means depends if URL|PATH is used

ENVVAR DENO_NO_PROMPT
--no-prompt                       #Do not make request() prompt

Deno.permissions                  #PERMISSIONS. Inspired by DOM, but several differences.
PERMISSIONS.query(PERM_REQ)
 ->>PERM_STATUS                   #Get whether a permission is granted
PERMISSIONS.request(PERM_REQ)     #Same but if PERM_STATUS.state 'prompt':
 ->>PERM_STATUS                   #  - if stdin interactive, prompt for it
                                  #  - otherwise, PERM_STATUS.state 'denied'
PERMISSIONS.revoke(PERM_REQ)
 ->>PERM_STATUS                   #Set PERM_STATUS.state 'denied'
PERMISSIONS.query|requestSync(...)#Same but sync

PERM_REQ.name                     #'read|write|net|env|sys|run|ffi|hrtime'
PERM_REQ.path                     #UPATH
                                  #Only with read|write|ffi
PERM_REQ.host                     #'HOST|IP[:PORT]'
                                  #Only with net
PERM_REQ.variable                 #'ENVVAR'
                                  #Only with env
PERM_REQ.kind                     #'FUNC'
                                  #Only with sys
PERM_REQ.command                  #'BINARY'|URL
                                  #Only with run

PERM_STATUS.state                 #One of:
                                  #  - 'granted': --allow-* used, or request() accepted
                                  #  - 'prompt': --allow-* not used, and no request() yet
                                  #  - 'denied': --allow-* not used, and request() denied
PERM_STATUS.onchange
 = FUNC(EVENT)                    #When PERM_STATUS.state changes

Deno.errors.PermissionDenied      #Unauthorized, e.g. PERMISSIONs, OS file permissions, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              V8               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.v8                   #'X.Y.Z.BUILD' version of v8

ENVVAR DENO_V8_FLAGS              #Set V8 command line options
--v8-flags[='--FLAG ...']         #To see a list of all available flags use --v8-flags=--help.

deno bench|compile|eval|info
 |install|repl|run|test
--seed NUM                        #Set the random number generator seed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test [UPATH|DIR...]          #Run tests
 [-- ARG...]                      #Evaluate the given modules, run all tests declared with 'Deno.test()' and report results to standard output.
                                  #Directory arguments are expanded to all contained files matching the glob {*_,*.,}test.{js,mjs,ts,mts,jsx,tsx}
--trace-ops                       #Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.
--doc                             #Type-check code blocks in JSDoc and Markdown
--fail-fast[=NUM]                 #Stop after N errors. Defaults to stopping after first failure.
--allow-none                      #Don't return error code if no test files are found
--shuffle[=NUM]                   #Shuffle the order in which the tests are run
--parallel                        #Run test modules in parallel. Parallelism defaults to the number of available CPUs or the value in the DENO_JOBS environment variable.
ENVVAR DENO_JOBS                  #Number of parallel workers used for the --parallel flag with the test subcommand. Defaults to number of available CPUs.

deno bench|test
--no-run                          #Cache modules, but don't run files
--filter GLOB                     #Run files with this string or pattern in the bench name


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BENCHMARK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


performance
PerformanceEntry
PerformanceMark
PerformanceMeasure                #Like DOM, but no PerformanceObserver, PerformanceResource|Server|NavigationTiming

deno bench [UPATH|DIR...]         #Run benchmarks
 [-- ARG...]                      #Evaluate the given modules, run all benches declared with 'Deno.bench()' and report results to standard output.
                                  #DIR is expanded to all contained files matching the glob {*_,*.,}bench.{js,mjs,ts,mts,jsx,tsx}:


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COVERAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno test
--coverage=DIR                    #Collect coverage profile data into DIR

deno coverage PATH...             #Print coverage reports from coverage profiles to stdout
--include=REGEXP...               #Include source files in the report [default: ^file:]
--exclude=REGEXP...               #Exclude source files from the report [default: test\.(js|mjs|ts|jsx|tsx)$]
--lcov                            #Output coverage report in lcov format
--output=PATH                     #Output file (defaults to stdout) for lcov


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LINT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno lint [SPATH...]              #Lint source files
                                  #Ignore diagnostics on the next line by preceding it with an ignore comment and rule name:
                                  #  // deno-lint-ignore no-explicit-any
                                  #  // deno-lint-ignore require-await no-empty
                                  #Names of rules to ignore must be specified after ignore comment.
                                  #Ignore linting a file by adding an ignore comment at the top of the file:
                                  #  // deno-lint-ignore-file
--rules                           #List available rules
--rules-tags=TAG,...              #Use set of rules with a tag
--rules-include|exclude=RULE,...  #Include|exclude lint rules
--compact                         #Output lint result in compact format


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FORMATTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno fmt [SPATH...]               #Format source files
                                  #Ignore formatting code by preceding it with an ignore comment: // deno-fmt-ignore
                                  #Ignore formatting a file by adding an ignore comment at the top of the file: // deno-fmt-ignore-file
--check                           #Check if the source files are formatted
--ext=EXT                         #Set content type of the supplied file [default: ts] [possible values: ts, tsx, js, jsx, md, json, jsonc]
--[no-]use-tabs                   #Use tabs instead of spaces for indentation. Defaults to false.
--line-width=NUM                  #Define maximum line width. Defaults to 80.
--indent-width=NUM                #Define indentation width. Defaults to 2.
--[no-]single-quote               #Use single quotes. Defaults to false.
--prose-wrap=STR                  #Define how prose should be wrapped. Defaults to always. [possible values: always, never, preserve]
--[no-]semicolons                 #Use semicolons. If false (def: true) still used where necessary.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              DOC              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno doc UPATH VARR               #Show documentation for a module
--private                         #Output private documentation
--builtin                         #Show documentation for runtime built-ins


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


set|clearTimeout|Interval
queueMicrotask                    #Like DOM
Deno.[un]refTimer(ID)             #Like Node ID.[un]ref()

AbortController
AbortSignal                       #Like DOM

EventTarget
Event
CustomEvent
DOMException
ErrorEvent
ProgressEvent                     #Like DOM, but no: OPTS.capture

Deno.errors.WouldBlock            #Syscall is sync, although should be async
Deno.errors.Interrupted           #Syscall interrupted (EINTR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SERIALIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TextDecoder|Encoder[Stream]
btoa|atob(STR)->STR2              #Like DOM

Deno.inspect(VAL[, OPTS])->STR    #Similar to Node UTIL.inspect()
OPTS.showHidden                   #BOOL (def: false). Similar to Node
OPTS.depth                        #NUM (def: 4). Similar to Node
OPTS.iterableLimit                #Similar to Node OPTS.maxArrayLength, but for any ITERABLE
OPTS.strAbbreviateSize            #NUM (def: none). Similar to Node OPTS.maxStringLength
OPTS.compact                      #BOOL (def: true). Similar to Node
OPTS.colors                       #BOOL (def: false). Similar to Node
OPTS.showProxy                    #BOOL (def: false). Similar to Node
OPTS.sorted                       #BOOL (def: false). Similar to Node
OPTS.getters                      #BOOL (def: false). Similar to Node
OPTS.trailingComma                #BOOL (def: false)
Symbol.for('Deno.customInspect')  #Similar to Symbol.for('nodejs.util.inspect.custom')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              OS               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.build                        #BUILD. Information about the Deno binary build.
                                  #Might differ from actual current OS, i.e. only intended for logging|debugging
BUILD.target                      #'ARCH-VENDOR-OS-ENV'
BUILD.arch                        #'x86_64|aarch64'
BUILD.os                          #'linux|darwin|windows|freebsd|netbsd|aix|solaris|illumos'
BUILD.vendor                      #STR, e.g. 'unknown'
BUILD.env                         #STR|undefined, e.g. 'gnu'

Deno.osRelease()->STR            S#OS version, e.g. '5.19.0-41-generic'

navigator.language[s]             #Like DOM.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CPU              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


navigator.hardwareConcurrency     #Like DOM. NUM

Deno.osUptime()->NUM             S#NUM of secs OS has been up
Deno.loadavg()->NUM_ARR          S#1|5|15m load average
                                  #On Windows, always [0,0,0]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MEMORY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.memoryUsage()->MEMORY_USAGE  #Process memory
MEMORY_USAGE.rss                  #NUM (in bytes). Total memory used
MEMORY_USAGE.heapTotal            #NUM (in bytes). Heap memory available
MEMORY_USAGE.heapUsed             #NUM (in bytes). Heap memory used
MEMORY_USAGE.external             #NUM (in bytes). External memory used

Deno.systemMemoryInfo()
 ->SYS_MEMORY                    S#System-wide memory
SYS_MEMORY.total                  #Total RAM
SYS_MEMORY.free                   #RAM available
SYS_MEMORY.swapTotal|swapFree     #Same for swap memory
SYS_MEMORY.buffers                #Memory used by OS buffers
SYS_MEMORY.cached                 #Memory used by page cache and slabs
SYS_MEMORY.available              #Memory that can be used to start processes without swapping


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOURCE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESOURCE                          #Abstraction of a file, including socket, etc.
                                  #Usually ref'd by the process
RID                               #RESOURCE ID NUM. Abstraction of a file descriptor.

CLOSER|READER|WRITER|SEEKER       #Abstract class to implement
CLOSER.close()                    #Close underlying RESOURCE
READER.read(UINT8ARR)->>NUM|null  #Reads available bytes from underlying RESOURCE and sets them into UINT8ARR.
                                  #Usually does not wait i.e. might read:
                                  #  - 0 bytes
                                  #  - less then UINT8ARR.length
                                  #     - rest of UINT8ARR might be used for internal purposes though
                                  #Only read up to UINT8ARR.length bytes.
                                  #Returns NUM of bytes read, or null if no more bytes to read.
WRITER.write(UINT8ARR)->>NUM      #Reads all of UINT8ARR and sets it to underlying RESOURCE.
                                  #Returns UINT8ARR.length
SEEKER.seek(NUM|BIGINT, ENUM)     #Changes position used by READER.read() and WRITER.write()
 ->>NUM2                          #NUM|BIGINT is relative offset in bytes
                                  #ENUM is reference position among Deno.Seeker.Start|Current|End
                                  #Before-start position is error. After-end position is implementation-dependent.
                                  #NUM2 is new position.
Deno.close(RID)
Deno.read(RID, ...)
Deno.write(RID, ...)
Deno.seek(RID, ...)               #Same but on a RID

Deno.fdatasync(RID)->>            #Flushes data to disk
Deno.fsync(RID)->>                #Flushes data + inode modification (timestamps, permissions, etc.) to disk

READER_SYNC.readSync(...)
WRITER_SYNC.writeSync(...)
SEEKER_SYNC.seekSync(...)
Deno.readSync(...)
Deno.writeSync(...)
Deno.seekSync(...)
Deno.fdatasyncSync(...)
Deno.fsyncSync(...)               #Same but sync

Deno.resources()->OBJ             #Returns all RESOURCEs as { RID: VAL, ... }
                                  #VAL is internal|undocumented

Deno.errors.AlreadyExists         #Create RESOURCE that already exists
Deno.errors.NotFound              #RESOURCE not found
Deno.errors.InvalidData           #Invalid IO read
Deno.errors.UnexpectedEof         #IO read an EOF unexpectedly
Deno.errors.WriteZero             #IO write 0 bytes
Deno.errors.BrokenPipe            #IO write to a pipe done reading (SIGPIPE)
Deno.errors.Busy                  #RESOURCE locked by another RESOURCE
Deno.errors.TimedOut              #IO timeout (ETIMEDOUT)
Deno.errors.BadResource           #RESOURCE is in bad state


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ReadableStream
ReadableStreamDefaultReader
ReadableStreamByobReader
WritableStream
WritableStreamDefaultWriter
TransformStream
ByteLengthQueuingStrategy
CountQueuingStrategy              #Like DOM

Deno.stdin                        #Inherits CLOSER|READER[_SYNC]. Current process stdin.
Deno.stdin.rid                    #RID
Deno.stdin.readable               #RSTREAM
Deno.stdin.setRaw(BOOL[, OPTS])   #When false (def):
                                  #  - echoes input to output
                                  #  - buffer input until next newline (i.e. line-wise input instead of character-wise)
                                  #  - buffered input can be removed with Backspace|Delete
                                  #  - can quit with CTRL-D
                                  #  - emit sounds (bell)
                                  #  - normalize any non-ASCII to ASCII (by removing MSB)
                                  #  - '\r\n' -> '\n'
                                  #When false or OPTS.cbreak true (def: false):
                                  #  - can quit with CTRL-C, CTRL-Z (not on Windows)
                                  #In any case:
                                  #  - no readline|Emacs keybindings (CTRL-A, etc.)
                                  #  - cannot move cursor (Left|Right|Home|End)

Deno.stdout|stderr                #Inherits CLOSER|WRITER[_SYNC]. Current process stdout.
Deno.stdout|stderr.rid            #RID
Deno.stdout|stderr.writable       #WSTREAM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONSOLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


console                           #Like DOM

Deno.isatty(RID)->BOOL            #True if TTY
Deno.consoleSize()->OBJ           #Returns OBJ: columns|row NUM
                                  #Throws if not a TTY

alert([STR])                      #Similar to DOM: print STR (def: 'Alert') and wait for Enter on stdin (unless non-interactive)
confirm([STR])->BOOL              #Same but returns BOOL based on stdin answer
                                  #Def STR 'Confirm'. False if stdin not interactive
prompt([STR[, STR2]])->STR3       #Same but returns STR3|null answer.
                                  #Def STR 'Prompt'. null if stdin not interactive, or if empty answer.
                                  #STR2 is default value. "[STR2]" is appended to question STR

ENVVAR NO_COLOR                   #Set to disable color
Deno.noColor                      #Like Deno.env.get('NO_COLOR') but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FILE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Blob
File
FileReader                        #Like DOM

FILE|Deno.*Sync(...)              #Same but sync
                                  #For all but: umask|watchFs

Deno.fstat|ftruncate|futime       #Like Deno.stat|truncate|utime(UPATH, ...) but with a RID
 (RID, ...)                       #Does not require permission, since it is already checked when opening the RID

new Deno.FsFile(RID)              #FILE. Inherits CLOSER|READER[_SYNC]|WRITER[_SYNC]
                                  #Ref'd by the process
FILE.rid                          #RID
FILE.readable                     #RSTREAM
FILE.writable                     #WSTREAM

Deno.open(UPATH[, OPTS])->>FILE   #Open a FILE.
                                  #OPTS:
OPTS.read                        R#BOOL (def: true). Read access
OPTS.write                       W#BOOL (def: false). Write access
OPTS.append                      W#BOOL (def: false). Write access + append
OPTS.truncate                     #BOOL (def: false). Truncate file
                                  #Requires OPTS.write true
OPTS.create                       #BOOL (def: false). On non-existing file, create it instead of throwing
                                  #Requires OPTS.write|append true
OPTS.createNew                    #BOOL (def: false). On existing file, throw
                                  #Requires OPTS.write|append true
OPTS.mode                         #NUM (def: 0o666 + umask). Does chmod if file is created
                                  #Not on Windows
                                  #Follows symlinks.

Deno.readFile                    R#Read FILE contents.
 (UPATH[, OPTS])->>UINT8ARR       #OPTS:
                                  #  - signal ABORT_SIGNAL
                                  #If DIR, returns empty UINT8ARR
Deno.writeFile(UPATH,            W#Write FILE contents.
 UINT8ARR|RSTREAM[, OPTS])->>     #OPTS:
                                  #  - signal ABORT_SIGNAL
                                  #  - create BOOL (def: true): like Deno.open()
                                  #  - append|createNew|mode: like Deno.open()
Deno.readTextFile
 (UPATH[, OPTS])->>STR
Deno.writeTextFile
 (UPATH, STR|RSTREAM[, OPTS])->>  #Same with STR (UTF-8) instead of UINT8ARR
Deno.copyFile(UPATH, UPATH2)->> RW#Copy contents.
                                  #Creates UPATH2 if does not exist.

FILE.stat()->>FILE_INFO           #
Deno.[l]stat(UPATH)->>FILE_INFO  R#Follows symlinks unless "lstat"
FILE_INFO.ino                     #Inode NUM. null on Windows.
FILE_INFO.dev                     #Partition NUM that current file belongs to. Cross-OS
FILE_INFO.rdev                    #Partition NUM if current file is that partition. null on Windows
FILE_INFO.size                    #NUM (in bytes). Cross-OS
FILE_INFO.blocks                  #NUM (in blocks) allocated. null on Windows
FILE_INFO.blksize                 #NUM of bytes per block in current filesystem. null on Windows
FILE_INFO.mtime|atime|birthtime   #DATE. Cross-OS. Can be null for multiple reasons
FILE_INFO.uid|gid                 #NUM. null on Windows
FILE_INFO.nlink                   #NUM of hard links (in addition to self). null on Windows
FILE_INFO.mode                   !#Or'd NUM with permissions and file type. null on Windows
FILE_INFO.isFile|Directory|Symlink#BOOL. Mutually exclusive. Cross-OS
                                  #Can be all false, e.g. for block|character device, including stdin|stdout|stderr

Deno.umask([NUM])->NUM2          !#Set process umask to NUM (def: same).
                                  #Return umask before being set.
                                  #Throws on Windows
Deno.chmod(UPATH, NUM)->>        W#Change file permission. Throws on Windows
Deno.chown(UPATH, UID, GID)->>   W#Change UID|GID NUM or null (no change). Throws on Windows
Deno.utime(UPATH,
 DATE[_NUM], DATE2[_NUM])->>     W#Change atime|mtime. DATE_NUM is in secs.

Deno.create(UPATH)->>FILE       RW#Creates file. If already exists, truncates it
FILE.truncate([NUM])->>           #
Deno.truncate(UPATH[, NUM])->>   W#Truncate file to NUM (def: 0) bytes. If larger, filled with \0
Deno.rename(UPATH, UPATH2)->>   RW#Rename file|DIR
Deno.remove(UPATH[, OPTS])->>    W#Delete file|DIR.
                                  #Throws if does not exist.
                                  #OPTS:
                                  #  - recursive BOOL (def: false)
                                  #     - when non-empty DIR, whether to delete recursively, or throw

Deno.link
 (OLD_UPATH, NEW_UPATH)->>      RW#Create hard link
Deno.symlink(OLD_UPATH,         RW#Create symlink
 NEW_UPATH[, OPTS])->>            #OPTS:
                                  #  - type 'file' (def) or 'dir' (Windows only)
Deno.readLink(UPATH)->>'PATH'    R#Return symlink destination. Throw if not symlink
Deno.realPath(UPATH)->>'PATH'    R#Normalize PATH: follow symlinks, absolute path

Deno.mkdir(UPATH[, OPTS])->>     W#Create a DIR.
OPTS.mode                         #NUM (def: 0o777 + umask). chmod.
                                  #Ignored on Windows.
OPTS.recursive                    #BOOL (def: false). Create intermediary DIRs
                                  #If false, throws if DIR already exists
Deno.readDir(DIR_UPATH)
 ->DIR_ENTRY_ASYNC_ITERABLE      R#List DIR files
DIR_ENTRY.name                    #'FILENAME'
DIR_ENTRY.isFile|Directory|Symlink#Like FILE_INFO.*

Deno.makeTempFile([OPTS])        W#Create a temp file.
 ->>'PATH'                        #Filename is 8 random hex chars.
OPTS.dir                          #'DIR'. Def: ENVVAR TMPDIR, or system default (/tmp on Linux)
                                  #Return 'PATH' is relative or absolute (def) depending on whether 'DIR' is
OPTS.prefix|suffix                #STR (def: ''). To the filename
Deno.makeTempDir([OPTS])->>'PATH'W#Same with a temp DIR

Deno.flock(RID[, BOOL])->>       !#Acquire lock on RID.
                                  #BOOL (def: false) is whether lock is exclusive, as opposed to shared, to a single process.
                                  #Waits if either:
                                  #  - another process has an exclusive lock
                                  #  - another process has a shared lock, and current process wants an exclusive lock
                                  #Based on underlying syscall flock.
                                  #It is advisory-only: it only works if other processes also acquire lock with flock.
Deno.funlock(RID)->>             !#Release lock


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             WATCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|fmt|lint|run|test      #
--watch                           #Watch for file changes and restart automatically
                                  #Only local files from entry point module graph are watched.
--no-clear-screen                 #Do not clear terminal screen when under watch mode

Deno.watchFs                     R#Watch for file|DIR changes.
 ('PATH'[_ARR][, OPTS])->WATCHER  #OPTS:
                                  #  - recursive BOOL (def: true)
                                  #Cross-OS
WATCHER                           #FS_EVENT_ASYNC_ITERABLE
                                  #Inherits CLOSER
WATCHER.rid                       #RID
FS_EVENT.paths                    #'PATH'_ARR
FS_EVENT.kind                     #One of:
                                  #  - 'access': read regular file contents|inode (does not seem to work properly)
                                  #  - 'modify': write file|DIR contents|inode
                                  #  - 'create': new file|DIR
                                  #  - 'remove': delete file|DIR
                                  #  - 'other': change in filesystem
                                  #  - 'any'
                                  #Watches newly created DIRs
                                  #Sometimes duplicate FS_EVENTs are created
FS_EVENT.flag                     #With kind 'other', is 'rescan':
                                  #  - when some events or filesystem changes might have not been reported
                                  #  - i.e. might need to refresh list of directories manually


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROCESS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.pid                          #NUM. Process ID
Deno.ppid                         #NUM. Parent process ID
Deno.uid|gid()->NUM|null         S#Process UID|GID. null on Windows

Deno.args                         #STR_ARR. CLI argv, excluding deno commands|flags

Deno.chdir(UPATH)                R#Change cwd
Deno.cwd()->'PATH'               R#Can throw NotFound

Deno.env                         E#ENV
ENV.get('ENVVAR')[->'VAL']        #
ENV.has('ENVVAR')->BOOL           #True even if empty ''
ENV.set('ENVVAR', 'VAL')          #
ENV.delete('ENVVAR')              #
ENV.toObject()->OBJ               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             EXIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.exit([NUM])                  #Def NUM: 0. Process exit
close()                           #Similar to DOM. Like Deno.exit(0) except closed is true
closed                            #Similar to DOM. true if close() was called and inside unload

globalThis.add|removeEventListener
globalThis.dispatchEvent          #Similar to DOM
onload = FUNC(EVENT)              #Similar to DOM. On end of initial macrotask (not microtask)

onbeforeunload = FUNC(EVENT)      #Similar to DOM. On implicit process exit, i.e. due to no more macrotasks.
                                  #Can preventDefault, which waits for new microtasks, then calls beforeunload again.
                                  #Can run new microtasks, if preventDefault.
onunload = FUNC(EVENT)            #Similar to DOM. On explicit non-error process exit, e.g. Deno.exit()
                                  #Cannot preventDefault nor run new microtasks.

globalThis|WORKERGLOBAL.onerror   #Similar to DOM. On process exit due to uncaught exceptions.
 = FUNC(ERROREVENT)               #Top-level scope|macrotask is considered async (to support top-level await),
                                  #i.e. only applies to other sync macrotasks.
                                  #Can preventDefault. Can run new microtasks, if preventDefault.
onunhandledrejection              #Similar to DOM. On process exit due to unhandled promises.
 = FUNC(PROMREJEVENT)             #Can preventDefault. Can run new microtasks, if preventDefault.
reportError(VAL)                  #Like DOM

Deno.errors.NAME                  #Deno known error classes
Deno.errors.NotSupported          #API not implemented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMAND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Deno.Command(UPATH[, OPTS])   #COMMAND, i.e. configuration for CHILD_PROCESSs
                                  #Does not use any shell.
OPTS.args                         #'ARG'_ARR (def: [])
OPTS.env                          #ENVVAR_OBJ
OPTS.clearEnv                     #BOOL. If false (def), merge OPTS.env with parent ENVVARs instead of overwriting
OPTS.cwd                          #DIR_UPATH (def: current)
OPTS.uid|gid                      #NUM (def: current)
OPTS.signal                       #ABORT_SIGNAL, calling kill()
                                  #Not with outputSync()
OPTS.windowsRawArguments          #BOOL (def: false). No shell escaping, i.e. can use cmd.exe syntax.
                                  #Only with Windows.

COMMAND.spawn()->CHILD_PROCESS   U#Start a new process, do not wait for exit
CHILD_PROCESS.pid                 #NUM
CHILD_PROCESS.[un]ref()           #Set whether ref'd by the current process
CHILD_PROCESS.status              #>COMMAND_STATUS
COMMAND|CHILD_PROCESS.output()
 ->>COMMAND_OUTPUT
COMMAND.outputSync()
 ->COMMAND_OUTPUT                U#Start a new process, wait for exit

COMMAND_STATUS|OUTPUT.code        #Exit code NUM
COMMAND_STATUS|OUTPUT.signal      #SIGNAL|null terminating the process
COMMAND_STATUS|OUTPUT.success     #BOOL. true if exit code non-0

OPTS.stdin|stdout|stderr          #One of:
                                  #  - 'inherit': redirect from parent
                                  #  - 'piped':
                                  #      - use CHILD_PROCESS|COMMAND_OUTPUT.stdin|stdout|stderr
                                  #      - unless set, they throw
                                  #  - 'null': ignore
                                  #Def:
                                  #  - spawn(): 'inherit'
                                  #  - output(): 'inherit' with stdin, 'piped' with stdout|stderr
CHILD_PROCESS.stdin               #WSTREAM
                                  #Must manually stdin.close() (if 'piped')
CHILD_PROCESS.stdout|stderr       #RSTREAM
COMMAND_OUTPUT.stdout|stderr      #UINT8ARR

SIGNAL                            #'SIG*'. OS-dependent.
                                  #On Windows, only 'SIGINT|SIGBREAK' supported
Deno.add|removeSignalListener
 (SIGNAL, FUNC())                 #
Deno.kill(PID_NUM[, SIGNAL])     U#Send SIGNAL (def: 'SIGTERM') to a process
                                  #If PID_NUM negative, send to progress group instead
                                  #  - throws on Windows
CHILD_PROCESS.kill([SIGNAL])      #Send SIGNAL (def: 'SIGTERM') to CHILD_PROCESS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            WORKER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Worker                            #Like DOM, but no: OPTS.credentials

MessageChannel
MessagePort
BroadcastChannel
MessageEvent                      #Like DOM

structuredClone(VAL[, OPTS])->VAL #Like DOM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STORAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


localStorage
sessionStorage                    #Like DOM
DENO_DIR/FILE_HASHID/local_storage#Where localStorage is saved
                                  #Uses SQLite database

Deno.openKv(['PATH'])->>KV     WR!#Local key-value store, using SQLite
                                  #'PATH' is where it is persisted
                                  #  - def: DENO_DIR/FILE_HASHID/kv.sqlite3
KV.close()->>                     #

KV.set(KVKEY, KVVAL)->>RESULT     #
KV.delete(KVKEY)->>               #
KV.get(KVKEY[, KVOPTS])->>KVENTRY #
KV.getMany(KVKEY_ARR[, KVOPTS])
 ->>KVENTRY_ARR                   #

KV.list(SELECTOR, LOPTS)->KVLIST  #
SELECTOR.prefix                   #KVKEY
SELECTOR.start|end                #KVKEY. If both specified: cannot use prefix.
                                  #Otherwise, must use prefix.
LOPTS.limit                       #NUM
LOPTS.cursor                      #STR
LOPTS.reverse                     #BOOL
LOPTS.batchSize                   #NUM

KV.atomic()->ATOMIC               #
ATOMIC.commit()->>ATOMIC_RESULT   #

ATOMIC.set(KVKEY, KVVAL)->ATOMIC  #
ATOMIC.delete(KVKEY)->ATOMIC      #
ATOMIC.sum(KVKEY, BIGINT)->ATOMIC #
ATOMIC.min|max(KVKEY, BIGINT)
 ->ATOMIC                         #

ATOMIC.check(ATOMIC_CHECK...)
 ->ATOMIC                         #
ATOMIC_CHECK.key                  #KVKEY

ATOMIC.mutate(ATOMIC_MUTATE...)
 ->ATOMIC                         #
ATOMIC_MUTATE.key                 #KVKEY
ATOMIC_MUTATE.type                #'set|delete|sum|min|max'
ATOMIC_MUTATE.value               #Depending on type: KVVAL (set), nothing (delete), KVU64 (sum|min|max)
new KvU64(BIGINT)                 #Wrap a BIGINT
KVU64.value                       #BIGINT

RESULT.ok                         #BOOL

KVLIST                            #KVENTRY_ASYNC_ITERABLE
KVLIST.cursor                     #STR

KVENTRY                           #
KVENTRY.key                       #KVKEY
KVENTRY.value                     #KVVAL or null

KVKEY                             #ARR of UINT8ARR|STR|NUM|BIGINT|BOOL
                                  #When sorting|comparing, order is by type, then by value
                                  #Max length 2KB serialized
KVVAL                             #v8-serializable value.
                                  #Same types as structuredClone()
                                  #  - also support UINT8ARR and KVU64

RESULT.versionstamp               #STR or (if RESULT.ok false) undefined
ATOMIC_CHECK.versionstamp         #STR or null
KVENTRY.versionstamp              #STR or (if KVENTRY.value null) null

KVOPTS|LOPTS.consistency          #'strong' or 'eventual'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.hostname()->STR             S#System hostname

Deno.networkInterfaces()
 ->NETWORK_INTERFACE_ARR         S#
NETWORK_INTERFACE.name            #STR, e.g. 'lo', 'wlp113s0', etc.
NETWORK_INTERFACE.family          #'IPv4|6'
NETWORK_INTERFACE.address         #'IP'
NETWORK_INTERFACE.netmask         #STR
NETWORK_INTERFACE.scopeid         #NUM or (if IPv4) null
NETWORK_INTERFACE.cidr            #'IP/NUM'
NETWORK_INTERFACE.mac             #STR. MAC address

Deno.errors.AddrInUse             #Start server on address|port already used
Deno.errors.AddrNotAvailable      #Start server on address|port that does not exist (EADDRNOTAVAIL)

Deno.errors.NotConnected          #Socket connection ended or never started (ENOTCONN)
Deno.errors.ConnectionAborted     #Socket connection aborted (ECONNABORTED)
Deno.errors.ConnectionReset       #Socket connection reset
Deno.errors.ConnectionRefused     #Socket connection refused


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              TCP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.connect(TCP_OPTS)->>CONN    !#Connect to TCP socket
Deno.listen(STCP_OPTS)->>LISTENER!#Open TCP socket

[S]TCP_OPTS|ADDR.transport        #Either:
                                 N#  - 'tcp': normal TCP socket
                              [W]R#  - 'unix': Unix TCP socket
[S]TCP_OPTS|ADDR.hostname         #'HOSTNAME'. Not with Unix socket
                                  #Def: '127.0.0.1' (Deno.connect()) or '0.0.0.0' (Deno.listen())
[S]TCP_OPTS|ADDR.port             #NUM. Not with Unix socket
[S]TCP_OPTS|ADDR.path             #'PATH'. Only with Unix socket
STCP_OPTS.reusePort               #BOOL (def: false). If true, allows multiple processes to listen on same port,
                                  #distributing new connections among them.
                                  #Uses SO_REUSEPORT, Linux only.

LISTENER                          #CONN_ASYNC_ITERABLE. Inherits CLOSER
LISTENER.rid                      #RID
LISTENER.[un]ref()                #Set whether ref'd by the current process
LISTENER.addr                     #ADDR of source
LISTENER.accept()->>CONN          #Like LISTENER.next()

CONN                              #Inherits CLOSER|READER|WRITER
CONN.rid                          #RID
CONN.[un]ref()                    #Set whether ref'd by the current process
CONN.localAddr|remoteAddr         #ADDR of source|destination
CONN.readable                     #RSTREAM
CONN.writable                     #WSTREAM
Deno.shutdown(CONN.rid)
CONN.closeWrite()                 #Stops sending, but not receiving.
CONN.setNoDelay([BOOL])           #BOOL. If true (def), disable Nagle's algorithm
                                  #Only with tranport 'tcp'
CONN.setKeepAlive([BOOL])         #BOOL. If true (def), enable TCP keepalive
                                  #Only with tranport 'tcp'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              TLS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.connectTls(TLS_OPTS)
 ->>CONN                         !#Connect to TLS socket
Deno.listenTls(STLS_OPTS)
 ->>LISTENER                     !#Open TLS socket
Deno.startTls(CONN[, NTLS_OPTS])
 ->>CONN2                        !#Turn TCP socket into TLS

[S]TLS_OPTS                       #Inherits from [S]TCP_OPTS, except no Unix socket
NTLS_OPTS                         #Only inherits TCP_OPTS.hostname. No Unix socket

deno bench|compile|install|repl
 |run|test
--unsafely-ignore-certificate
  -errors[=HOSTNAME,...]          #DANGER: Disables verification of TLS certificates

ENVVAR DENO_TLS_CA_STORE          #Comma-separated list of order dependent certificate stores. Possible values: "system", "mozilla". Defaults to "mozilla".
ENVVAR DENO_CERT
deno bench|cache|check|compile
 |eval|info|install|repl|run
 |test|upgrade|vendor
--cert                            #'PEM' to CA authority

[N]TLS_OPTS|HCOPTS.caCerts        #'PEM'_ARR of root certificates
TLS_OPTS|HCOPTS.certChain
STLS_OPTS.cert                    #'PEM' of certificate chain
TLS_OPTS|HCOPTS.privateKey        #'PEM' (RSA|PKCS8) of client certificate
STLS_OPTS.key                     #'PEM' of server certificate

[S|N]TLS_OPTS.alpnProtocols       #'PROTOCOL'_ARR (def: [])
CONN.handshake()->>OBJ            #OBJ: alpnProtocol 'PROTOCOL'|null
                                  #Only with TLS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              UDP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.listenDatagran(UDP_OPTS)
 ->>DCONN                        !#Open UDP socket

UDP_OPTS                          #Inherits STCP_OPTS except:
                                  #  - no reusePort
                                  #  - transport 'tcp|unix' -> 'udp|unixpacket'
UDP_OPTS.reuseAddress             #BOOL (def: false). If true and another process listens on same port, steals it.

DCONN                             #ASYNC_ITERABLE of [UINT8ARR, ADDR] (data + sender)
                                  #Inherits CLOSER
DCONN.addr                        #ADDR of source
DCONN.send(UINT8ARR, ADDR)->>NUM  #Returns NUM bytes sent
DCONN.receive([UINT8ARR])
 ->>[UINT8ARR, ADDR]              #Can pass UINT8ARR to reuse the same one, to avoid re-allocating memory

DCONN.joinMulticastv4
 ('HOST', 'NETWORK_INTERFACE')
 ->>MEMBERSHIP
DCONN.joinMulticastv6
 ('HOST', NETWORK_INTERFACE_NUM)
 ->>MEMBERSHIP                    #Join multicast group
MEMBERSHIP.leave()->>             #Leave multicast group
UDP_OPTS.loopback
MEMBERSHIP.setLoopback(BOOL)->>   #BOOL (def: false). Send multicast packets to localhost
MEMBERSHIP.setTTL(NUM)->>         #Set multicast packets TTL. Only with IPv4


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              DNS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.resolveDns                  N#DNS resolution query.
 ('HOST', 'TYPE'[, OPTS])->ARR    #Return type depends on 'TYPE':
                                  #  - 'A|AAAA|ANAME|CNAME|NS|PTR|TXT': STR_ARR
                                  #  - 'CAA': CAA_ARR
                                  #  - 'MX': MX_ARR
                                  #  - 'NAPTR': NAPTR_ARR
                                  #  - 'SOA': SOA_ARR
                                  #  - 'SRV': SRV_ARR

OPTS.nameServer                   #NAME_SERVER. Def: local, e.g. '/etc/resolv.conf'
NAME_SERVER.ipAddr                #'IP'
NAME_SERVER.port                  #NUM
OPTS.signal                       #ABORT_SIGNAL

CAA.critical                      #BOOL
CAA.tag                           #STR
CAA.value                         #STR

MX.preference                     #NUM
MX.exchange                       #STR

NAPTR.order                       #NUM
NAPTR.preference                  #NUM
NAPTR.flags                       #STR
NAPTR.services                    #STR
NAPTR.regexp                      #STR
NAPTR.replacement                 #STR

SOA.mname                         #STR
SOA.rname                         #STR
SOA.serial                        #NUM
SOA.refresh                       #NUM
SOA.retry                         #NUM
SOA.expire                        #NUM
SOA.minimum                       #NUM

SRV.priority                      #NUM
SRV.weight                        #NUM
SRV.port                          #NUM
SRV.target                        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HTTP CLIENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fetch(...)                      RN#Like DOM
Request
Response
Headers
FormData                          #Like DOM

navigator.userAgent               #Like DOM. 'Deno/X.Y.Z'

caches
CacheStorage
Cache                             #Like DOM, but no: add[All]|matchAll|keys() nor CACHE_STORAGE.match()

Deno.errors.Http                  #Too many HTTP redirects


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HTTP SERVER          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serveHttp(CONN)->HTTP_CONN   #Handle a TCP connection as HTTP
HTTP_CONN                         #REQ_EVENT_ASYNC_ITERABLE
HTTP_CONN.rid
HTTP_CONN.close()                 #Like CONN.*
HTTP_CONN.nextRequest()
 ->>REQ_EVENT|null                #null if closed
REQ_EVENT.request                 #REQ
REQ_EVENT.respondWith([>]RES)->>  #

Deno.serve([OPTS][, FUNC])->>   N!#Start HTTP server. Built on top of Deno.serveHttp()
                                  #FUNC is OPTS.handler
OPTS.port|hostname|reusePort|     #Like STLS.*
 cert|key                         #Def port: 9000
OPTS.onListen                     #FUNC(ADDR) called on server start
                                  #Def: console.log('Listening on http://HOSTNAME:PORT/')
OPTS.handler                      #FUNC(REQ, OBJ)->>RES called on request
                                  #OBJ: remoteAddr ADDR
OPTS.onError                      #FUNC(VAL)->>RES called on exception VAL
                                  #Def:
                                  #  - console.log(VAL)
                                  #  - close TCP connection
                                  #  - return new Response('Internal Server Error')
OPTS.signal                       #ABORT_SIGNAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HTTP PROXY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REQQ.client                       #HTTP_CLIENT
Deno.createHttpClient([HCOPTS])
 ->HTTP_CLIENT                    #Customize HTTP request option
HTTP_CLIENT                      !#Inherits CLOSER
HTTP_CLIENT.rid                   #RID

ENVVAR HTTP_PROXY                 #Proxy address for HTTP requests (module downloads, fetch)
ENVVAR HTTPS_PROXY                #Proxy address for HTTPS requests (module downloads, fetch)
ENVVAR NO_PROXY                   #Comma-separated list of hosts which do not use a proxy (module downloads, fetch)

HCOPTS.proxy                      #HTTP_PROXY
HTTP_PROXY.url                    #'URL'
HTTP_PROXY.basicAuth
 .username|password               #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBSOCKET           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WebSocket                        N#Like DOM
WebSocketStream                 N!#Like DOM
Deno.upgradeWebSocket             #Does WebSocket upgrade handshake response
 (REQ[, OPTS])->OBJ               #OBJ:
                                  #  - response RES: to send back to client
                                  #  - socket WEBSOCKET
OPTS.protocol                     #'SUBPROTOCOL' of Sec-WebSocket-Protocol [S]
OPTS.idleTimeout                  #NUM (in secs, def: 120, can be 0)
                                  #Client must answer within NUMs with a ping, otherwise close|error events emitted


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPRESSION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CompressionStream
DecompressionStream               #Like DOM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CRYPTO             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEB CRYPTO API ==>                #Like DOM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             WASM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WebAssembly                       #Like DOM, but no: externref, Tag(), Exception()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FFI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.dlopen(UPATH, FLIBRARY)    F!#Opens a C library.
 ->FDLIB                          #Must be *.so (Linux), *.dylib (macOS), *.dll (Windows)
FLIBRARY.NAME                     #FSTATIC or FFUNCTION. Exported symbol in C library
                                  #NAME is the one used in FDLIB.symbols.NAME

FSTATIC|FFUNCTION.name            #'NAME' (def: 'NAME') used in C library
FSTATIC|FFUNCTION.optional        #BOOL (def: false)
                                  #Whether value might be null. Otherwise, fails if not found

FSTATIC                           #Non-FUNC value
FSTATIC.type                      #FNTYPE

FFUNCTION                         #FUNC value
FFUNCTION.parameters              #FNTYPE_ARR of arguments
FFUNCTION.result                  #FNTYPE
FFUNCTION.nonblocking             #BOOL (def: false)
                                  #Whether async
FFUNCTION.callback                #BOOL (def: false)
                                  #Allow being used as parameter itself

FDLIB                             #Inherits CLOSER
                                  #Ref'd by the process
FDLIB.symbols.NAME                #One of:
                                  #  - NUM|BIGINT|BOOL|DPOINTER: for FSTATIC
                                  #  - (...)->[>]...: for FFUNCTION
                                  #  - null: only if optional

FNTYPE                            #One of:
                                  #  - 'u|i8|16|32' -> NUM
                                  #  - 'u|i64' -> BIGINT
                                  #  - 'f32|64' -> NUM
                                  #  - 'u|isize' -> NUM
                                  #  - 'bool' -> BOOL
                                  #  - 'pointer' -> FPOINTER
                                  #  - 'buffer' -> FPOINTER
                                  #  - 'function' -> FPOINTER
                                  #  - { struct FNTYPE_ARR } -> UINT8ARR

FPOINTER                          #Opaque OBJ representing a memory address
                                  #Underlying type is either:
                                  #  - 32 bits: NUM
                                  #  - 64 bits: NUM if <Number.MAX_SAFE_INTEGER, BIGNUM otherwise
Deno.UnsafePointer.create
 (NUM|BIGINT)->FPOINTER           #
Deno.UnsafePointer.value
 (FPOINTER)->NUM|BIGINT           #
Deno.UnsafePointer.equals
 (FPOINTER, FPOINTER2)->BOOL      #
Deno.UnsafePointer.offset
 (FPOINTER, NUM)->FPOINTER2       #
Deno.UnsafePointer.of(...)
Deno.UnsafeCallback.*
Deno.UnsafeFnPointer.*
Deno.UnsafePointerView.*          #FNPOINTER manipulation. Not documented yet
