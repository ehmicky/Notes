
        
   DENO  
        



TO DOCUMENT:
  - std:
     - json
     - jsonc
     - yaml
     - flags
     - path
     - fs
     - http
        - https://deno.com/manual@v1.33.1/runtime/http_server_apis#serve-from-stdhttp
        - http file server: https://deno.com/manual@v1.33.1/examples/file_server#using-the-stdhttp-file-server
     - collections (functional utilities)
  - Deno/Node
     - Deno -> Node
        - dnt
        - deno2node
     - Node -> Deno
        - denoify
        - node_shims
     - deno-bin
  - deno-lambda
  - http framework:
     - rutt
     - oak
     - hono

DATE/TIME ==>                     #See deno datetime doc

new JsonStringifyStream([OPTS])
 ->TSTREAM                        #Apply JSON.stringify() on each chunk
OPTS.readableStrategy
OPTS.writableStrategy             #Custom QUEUING_STRATEGY





                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #1.33.2

Deno.version.deno                 #'X.Y.Z' version of CLI
                                  #Also printed by deno --version

deno ... --unstable               #Enable unstable APIs
                                 !#Means API is unstable

globalThis
self                              #Like DOM: same
window                            #Like DOM: same except not available in a WORKER

Deno                              #Global variable for all non-standard API
DENO API ==>                      #Deno.* + DOM support
Deno[Deno.internal].*             #Internal undocumented APIs

STANDARD LIBRARY ==>              #https://deno.land/std
                                  #Versin: 0.185.0
                                  #  - i.e. most releases can be breaking
std/version.ts                    #
VERSION                           #'X.Y.Z'

UPATH                             #PATH|URL
                                  #URLs and 'file://...' are cross-OS
                                  #PATHs are OS-specific, e.g. use backslashes, i.e. should avoid
[U]SPATH                          #[U]PATH or - (stdin)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB RELEASES ==>               #With only Deno CLI, zipped, for each version and architecture

VERSION MANAGER ==>               #asdf + asdf-deno
                                  #Not documented yet

deno_install                      #sh|Powershell script to install Deno.
                                  #Download GitHub release then extract to DENO_INSTALL_ROOT
                                  #Can pass specific X.Y.Z version as argument (def: latest)
                                  #Available at https://deno.land/install.sh|ps1 or via
                                  #scoop|homebrew|macports|chocolatey|snap|pacman|zypper|cargo
                                  #Version 0.1.8

ENVVAR DENO_NO_UPDATE_CHECK       #Unless set, fails when a newer Deno version is available

denoland/setup-deno               #GitHub action to install Deno.
                                  #Version 1.1.2
INPUTS|OUTPUTS.deno-version       #'VERSION_RANGE|canary|COMMIT_HASH' (def: '1.x')
OUTPUTS.is-canary                 #BOOL

deno upgrade                      #Upgrade Deno CLI
--version                         #'X.Y.Z' (def: latest)
--canary                          #Include canary versions
--output                          #DENO_INSTALL_ROOT
--force|-f                        #Even if not out-of-date
--dry-run                         #

deno install|uninstall
--root=DIR                        #Main global Deno DIR
ENVVAR DENO_INSTALL_ROOT          #With deno_install, ENVVAR is DENO_INSTALL
                                  #Can be used with GitHub action
                                  #Def: ~/.deno

deno init [DIR]                   #Initialize a new project
                                  #Def DIR: .
                                  #Creates:
                                  #  - dummy main.ts, main_test.ts, main_bench.ts
                                  #  - deno.jsonc with CONFIG.tasks.dev 'deno run --watch main.ts'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG                            #JSON|JSONC file
                                  #Location (in priority):
                                  #  - --config
                                  #  - [.../]deno.json[c]
CONFIG_DIR                        #DIR of CONFIG

deno bench|cache|check|compile
 |eval|fmt|info|install|lint|repl
 |run|task|test|vendor
--[no-]config|-c CONFIG           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



deno bench|coverage|fmt|lint|test
--ignore=PATH,...                 #Ignore files

deno compile|eval|run --ext EXT  !#Allowed file extensions. Def: js[x]|ts[x]
MIME TYPES ==>                    #Are used for URIs, using well-known ones for TypeScript|JavaScript
                                  #Should use text/jsx|tsx for JSX|TSX

deno ... --quiet|-q               #
deno doc|lint --json              #Output result in JSON format
deno bench|info --json           !#Same

deno completions SHELL            #Print completion script
                                  #SHELL: bash|fish|powershell|zsh|fig


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno run [USPATH [ARG...]]        #Execute a JavaScript|TypeScript file

deno eval 'CODE' [ARG...]         #Execute a JavaScript|TypeScript string
                                  #Implies --allow-all
--print|-p                        #Print statement result to stdout

deno repl                         #Run REPL
                                  #Can use import|export statements
                                  #TypeScript is transpiled, but not type checked
--eval='CODE'                     #Executes 'CODE' on start
--eval-file=UPATH,...             #Same with a file
ENVVAR DENO_REPL_HISTORY          #REPL history. Empty to disable.
                                  #Def: DENO_DIR/deno_history.txt
_                                 #Last REPL value
_error                            #Last REPL uncaught exception
clear()                           #Clear screen


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DENO_INSTALL_BIN                  #DENO_INSTALL_ROOT/bin
                                  #Contains deno executable
                                  #Must be in ENVVAR PATH
Deno.execPath()->'PATH'          R#PATH to deno executable

deno install UPATH [ARG...]       #Copy UPATH JavaScript|TypeScript file to DENO_INSTALL_BIN/BINARY
                                  #Flags and ARGs are kept when running executable
--name|-n BINARY                  #BINARY filename
                                  #Def: filename from UPATH without .EXT
                                  #  - if main|mod|index|cli, use parent DIR instead
                                  #Always strip any '@TAG'
--force|-f                        #Do not fail if destination file already exists

deno uninstall BINARY             #Uninstall a script previously installed with deno install

#!/usr/bin/env -S deno run [...]  #Hashbang.
                                  #Cannot use #!/path/to/deno because needs `run` argument, i.e. must use -S
                                  #Can pass additional flags|ARGs in [...]
                                  #  - must use --ext=ts if file extension is not .js[x]|ts[x]
                                  #Does not work on Windows without Bash

deno compile                     !#See deno compile doc

CLI FLAGS ==>                     #See deno flags doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CODE QUALITY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno lint                         #See deno lint doc
deno fmt                          #See deno fmt doc

deno doc                          #See deno doc doc

deno test                         #See deno test doc
deno bench                        #See deno bench doc

performance
PerformanceEntry
PerformanceMark
PerformanceMeasure                #Like DOM, but no PerformanceObserver, PerformanceResource|Server|NavigationTiming


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno eval|install|repl|run|test
--inspect[-brk][=HOSTNAME]        #Like Node
--inspect-wait[=HOSTNAME]         #Like --inspect-brk but breakpoint is even earlier: no user code run

Deno.metrics()->METRICS           #Returns number of OPs (also called "bindings") since process started
                                  #OPs are like syscalls but inside Deno:
                                  #  - calls from JavaScript sandbox to privileged underlying code
                                  #  - most Deno.* corresponds to an OP
METRICS.opsDispatched             #NUM of ops started
METRICS.opsDispatchedSync         #Same but split between sync|async
 |Async[Unref]                    #Async is when it is ref'd by the process, AsyncUnref when it is not
METRICS.opsCompleted*             #Like opsDispatched, but finished
METRICS.bytesSentControl          #NUM of bytes sent for metadata
METRICS.bytesSentData             #NUM of bytes sent for data
METRICS.bytesReceived             #NUM of bytes received
METRICS.ops.OP                    #METRICS for a given OP

deno lsp                          #Start the language server
                                  #Controls Deno through IPC, getting information meant for IDEs
                                  #Not documented yet
DENO_DIR/registries/PPATH
 /FILE_HASHID                     #Language server cache


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.tasks.TASK                 #'COMMAND'.
                                  #Uses custom cross-OS syntax similar to Bash|Unix
                                  #  - || && ; ! &
                                  #  - | |& $(...)
                                  #  - > 2> &> >>
                                  #  - export ENVVAR=VAL $ENVVAR and ENVAR=VAL COMMAND
                                  #  - VAR=VAL $VAR
                                  #  - cp mv rm mkdir pwd sleep echo cat exit unset xargs
                                  #  - /dev/null
PACKAGE.JSON SCRIPTS ==>          #Also supported. Does not run pre|post* hooks

deno task                         #List TASKs
deno task TASK [ARG...]           #Run TASK
--cwd DIR                         #Def: CONFIG_DIR
ENVVAR INIT_CWD                   #Current directory without --cwd applied


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              URL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


URL
URL.createObjectURL
URL.revokeObjectURL
URLSearchParams                   #Like DOM
URLPattern                        #Like DOM but no: OPTS.ignoreCase

deno bench|compile|eval|info
 |install|repl|run|test
--location=URL                    #Required to use globalThis.location
                                  #Also used as base URI, e.g. for fetch(), new Worker(), import() and ROOT_FILE_HASHID
                                  #Try to avoid
location                          #Like DOM but readonly
                                  #  - LOCATION.assign|replace|reload() always throw

ext:*                             #Source code from Deno core|CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPORTS ==>                       #Are normal URLs, like in browsers.
VERSIONING ==>                    #As part of URL, usually @VERSION. Recommended.

import(VAR|URI)                 NR#Requires same PERMISSIONs as fetch()
                                  #Unlike import('...') or import ... 'URL'

import ... '*.json'
 assert { type: 'json' }          #Supported

import.meta.url
import.meta.resolve(STR)->>'URL'  #Like DOM. Fails on REPL

Deno.mainModule                  R#'URL' of first loaded file
                                  #Filename '$deno$repl.ts' if REPL
                                  #Requires read PERMISSION to its DIR
import.meta.main                  #BOOL. True if first loaded file

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
 |vendor
--import-map=IMPORT_MAP_UPATH     #IMPORT_MAP_UPATH. Like DOM
CONFIG.importMap                  #The resulting identifiers can be anything Deno handles, e.g. URIs, npm:*, etc.
CONFIG.imports|scopes             #Inline IMPORT_MAP.*

deps.ts                           #Convention of a top-level file which does all remote imports
                                  #then re-exports them.
                                  #Alternative to using an IMPORT_MAP that:
                                  #  - works for libraries
                                  #  - allows custom logic
dev_deps.ts                       #Same for development dependencies

mod.ts                            #Convention name for main file

deno info UPATH                   #Prints dependencies tree
                                  #Including:
                                  #  - each file size, and the total
                                  #  - TypeScript transpiled file location


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LOCK FILE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOCK                              #Lock file
LOCK.version                      #Always '2'
LOCK.remote.URI                   #'CHECKSUM' for a given URI
                                  #Ensures imports do not change
                                  #Not for file://...

deno bench|cache|check|compile
 |doc|eval|info|install|repl|run
 |test|vendor
--[no-]lock[=PATH]                #PATH, false or true (same as './deno.lock')
CONFIG.lock                       #Def: true if there is a CONFIG, false otherwise
                                  #LOCK file location to read|write.
deno bench|cache|check|compile
 |eval|install|repl|run|test
--lock-write                      #On mismatch CHECKSUM, update it instead of failing
                                  #Also, removes unused URIs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REMOTE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-remote                       #Do not allow remote imports
deno bench|compile|eval|info
 |install|repl|run|test
--cached-only                     #Only allow remote imports if cached

deno vendor UPATH...              #Create VENDOR_DIR
--output=VENDOR_DIR               #Def: './vendor'
--force|-f                        #Overwrite files

VENDOR_DIR                        #Local copy of remote imports
VENDOR_DIR/import_map.json        #IMPORT_MAP to use
VENDOR_DIR/DOMAIN/PATH            #Source files

ENVVAR DENO_AUTH_TOKENS           #'STR@HOSTNAME;...' where each STR is either:
                                  #  - 'TOKEN': for Authorization: Bearer TOKEN [C]
                                  #  - 'USER:PASSWORD': for Authorization: Basic BASE64(USER:PASSWORD) [C]
                                  #Use those headers when importing URLs from matching HOSTNAME
                                  #For GitHub:
                                  #  - TOKEN: personal access token with `repo` scope
                                  #  - HOSTNAME: raw.githubusercontent.com

REGISTRY ==>                      #Any URL works, but some registries are often used:
                                  #  - deno.land (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FILE_HASHID                       #ID based on file location
                                  #If PPATH, it is just the filename instead
ROOT_FILE_HASHID                  #FILE_HASHID of the root location (in priority):
                                  #  - --location
                                  #  - --config explicit flag
                                  #  - if REPL: cwd
                                  #  - Deno.mainModule
PPATH                             #http[s]/DOMAIN or file/PATH

ENVVAR DENO_DIR                   #Set the cache directory
                                  #Def: global cache directory, e.g. ~/.cache/deno/ on Linux
                                  #In GitHub action, can be used with actions/cache and:
                                  #  - INPUTS.path ${{env.DENO_DIR}}
                                  #  - INPUTS.key ${{hashFiles('deno.lock')}}
deno info                         #Shows path of DENO_DIR[/deps|npm|gen|registries|location_data]

DENO_DIR/deps/PPATH/              #Cache for remote imports
DENO_DIR/deps/PPATH/FILE_HASHID   #File contents
DENO_DIR/deps/PPATH               #OBJ:
 /FILE_HASHID.metadata.json       #  - url 'URL': request URL
                                  #  - headers OBJ: request header
                                  #  - now: request timestamp

deno cache UPATH...               #Cache remote imports used by UPATH, recursively
                                  #Automatically done by deno run|test|...
                                  #Future runs of this module will trigger no downloads or compilation unless --reload is specified.

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
 |vendor
--reload|-r [URL,...]             #Invalidate and redownload cache.
                                  #All caches: source code, TypeScript check|transpile, etc.
                                  #Def URL: everything
                                  #URL can be just the prefix, including:
                                  #  - https://deno.land/std
                                  #  - https://deno.land/x/MODULE
                                  #  - npm:
                                  #  - npm:MODULE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import 'node:*'                   #Node core modules are ponyfilled
                                  #Not implemented yet:
                                  #  - important
                                  #     - HTTPS server, HTTP2
                                  #     - WORKER
                                  #     - CLUSTER
                                  #     - VM
                                  #     - V8 except getHeapStatistics|cachedDataVersionTag()
                                  #  - less important
                                  #     - FSWATCHER.[un]ref()
                                  #     - CHILD_PROCESS OPTS.stdio 'ipc|overlapped'
                                  #     - Brotli compression
                                  #     - ENCODING 'ascii|latin1|utf16le'
                                  #     - STAT.isBlockDevice|CharacterDevice|FIFO|Socket()
                                  #     - CIPHER, KEY, DIFFIEHELLMAN, ECDH, CERTIFICATE, *Fips, secureHeapUsed()
                                  #     - OS.userInfo()
                                  #     - OS.setPriority|getPriority()
                                  #     - REPL
                                  #     - process.on('multipleResolves|rejectionHandled')
                                  #     - PERFORMANCE.* that is Node.js specific
                                  #     - UDP multicast|broadcast
                                  #     - TCP|FS file descriptors
                                  #  - not important
                                  #     - DNS.resolve*() OPTS.ttl
                                  #     - generatePrime() OPTS.safe|add|rem

/// <reference                    #Import Node.js core types
 types="npm:@types/node"/>        #Only needed if used in application code, not in dependencies code


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              NPM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import                            #Import a npm module
 'npm:NPM_MODULE[@VERSION][/...]' #Include its dependencies, recursively
                                  #Does not run package.json [pre|post]install scripts
                                  #Does not work with deno compile|vendor
deno run npm:* [-- ARGS]          #Run a npm module binary

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-npm                          #Do not allow npm:*
ENVVAR NPM_CONFIG_REGISTRY        #Def: 'https://registry.npmjs.org'

DENO_DIR/npm/DOMAIN/NPM_MODULE/   #NPM_MODULE. Like DENO_DIR/deps, but for npm modules
NPM_MODULE/VERSION                #npm module contents
NPM_MODULE/registry.json          #OBJ with package.json, checksums and latest version tag
                                  #For each published version of NPM_MODULE, even not used one


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NODE MODULES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|check|compile
 |eval|info|install|repl|run|test
--[no-]node-modules-dir           #Creates a node_modules DIR with all npm:* imports
                                  #Only needed for npm imports that expect to be inside a node_modules DIR

node_modules/NPM_MODULE           #Symlink to NPM_MODULE_DIR/NPM_MODULE
node_modules/.deno
 /NPM_MODULE@VERSION/node_modules #NPM_MODULE_DIR
NPM_MODULE_DIR/NPM_MODULE         #NPM_MODULE's contents. Like DENO_DIR/npm/DOMAIN/NPM_MODULE/VERSION
NPM_MODULE_DIR/DEP_NPM_MODULE     #NPM_MODULE's dependency. Symlink to its NPM_MODULE_DIR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PACKAGE.JSON          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.JSON RESOLUTION ==>       #When importing bare identifiers and there is a package.json,
                                  #resolve them using its `*dependencies` configuration.
ENVVAR DENO_NO_PACKAGE_JSON       #Disables using package.json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.typescript           #'X.Y.Z' version of TypeScript
                                  #Also printed by deno --version

tsconfig.json                     #Can be used.
CONFIG.typescript.compilerOptions #Alternative to using tsconfig.json
TSCONFIG DEFAULTS ==>             #Uses different defaults:
                                  #  - --strict
                                  #  - --lib ['deno.window']
                                  #  - --target 'esnext' (unless --lib overridden)
                                  #  - --module 'esnext'
                                  #  - --moduleDetection 'force'
                                  #  - --esModuleInterop
                                  #  - --allowJs
                                  #  - --noUseUnknownInCatchVariables
                                  #  - --useDefineForClassFields
                                  #  - --noImplicitUseStrict
                                  #  - --experimentalDecorators
                                  #  - --jsx 'react'
                                  #  - --inlineSourceMap
                                  #  - --isolatedModules
TSCONFIG MISSING FLAGS ==>        #Many config flags are not used by deno, including:
                                  #  - --exactOptionalPropertyTypes, --noPropertyAccessFromIndexSignature
                                  #  - --importsNotUsedAsValues, --preserveValueImports
                                  #Some tsc features are also missing, and their related flags: incremental builds, emit, etc.
--lib                             #tsconfig --lib can have:
                                  #  - 'deno.ns': Deno.*
                                  #  - 'deno.unstable' (def when using --unstable): Deno.* that are --unstable
                                  #  - 'deno.window' (def): DOM + 'deno.js'
                                  #  - 'deno.worker': WORKERGLOBAL.*
                                  #  - 'dom.asynciterable': DOM that uses ASYNC_ITERABLE (e.g. RSTREAM)
                                  #Incompatibilities:
                                  #  - 'deno.windows' and 'dom[.iterable]|webworker*'
                                  #  - 'deno.worker' and 'webworker*'
                                  #     - i.e. when targetting browsers, should use --lib ['dom*|webworker*', 'deno.ns', 'deno.unstable'] instead
                                  #  - 'deno.worker' and 'deno.window'
                                  #     - i.e. should only apply --lib ['deno.worker'] on WORKERs
                                  #     - usually with /// <reference no-default-lib="true"/> + /// <reference lib="deno.worker"/>

FILE EXTENSIONS ==>               #In imports, must explicitely use *.js[x]|ts[x]

// @deno-types="*.d.ts"           #Locate the *.d.ts of a *.js import
import ... '*.js'                 #Needed because Deno does not look for sibling *.d.ts nor @types/* modules
                                  #Not needed when importing *.ts
                                  #Not applied to consumers, i.e. only meant for consuming a *.js package

/// <reference types="*.d.ts"/>   #Like `import type` except it is kept after transpiling.
                                  #I.e. meant when producing a package delivered as *.js
X-TypeScript-Types: *.d.ts [S]    #Alternative as HTTP header, when imported as URI

CONFIG.typescript
 .compilerOptions.types           #'URL'_ARR of types to import

deno bench|cache|compile|eval
 |install|repl|run|test
--[no-]check[=STR]                #Check TypeScript types with tsc. STR can be:
                                  #  - false (def with run|eval|repl): none
                                  #  - true (def otherwise): local imports
                                  #  - remote: remote imports
                                  #  - all: local|remote imports

deno check UPATH...               #Only check TypeScript types, do not run.
--all                             #Also check remote imports

DENO_DIR/check_cache_v1           #TypeScript type check cache. SQLite database

TRANSPILING ==>                   #TypeScript automatically transpiled with swc
DENO_DIR/gen/PPATH                #TypeScript transpiling cache.
DENO_DIR/gen/PPATH/FILE_HASHID.js #Transpiled file contents
DENO_DIR/gen/PPATH/FILEHASHID.meta#OBJ:
                                  #  - source_hash 'SHA': source file contents checksum
                                  #  - emit_hash 'SHA': transpiled file contents checksum

deno types                        #Print Deno's TypeScript types declarations
                                  #Automatically included when using deno

TYPESCRIPT TESTS TESTING ==>      #See deno test types doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JSX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.compilerOptions.jsx.*      #Can be used
                                  #JSX is automatically transpiled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--allow-read|write[=DIR|FILE,...] #Allow reading|writing files
                                  #If DIR, recursive
                                  #Not necessary for stdin|stdout|stderr
--allow-net[=HOST|IP[:PORT],...]  #Allow opening|connecting to sockets:
                                  #  - TCP|UDP: Deno.connect|listen|start*()
                                  #  - DNS: Deno.resolve*()
                                  #  - HTTP: fetch()
                                  #  - WebSocket
                                  #Not necessary with Unix sockets
--allow-env[=ENVVAR,...]          #Allow reading|writing ENVVARs (Deno.env)
--allow-sys[=FUNC,...]            #Allow access to OS information
                                  #FUNC is Deno.FUNC() among 'loadavg|hostname|systemMemoryInfo|networkInterfaces|osRelease|osUptime|uid|gid'
--allow-run[=BINARY|URL,...]      #Allow subprocesses (Deno.Command|kill)
                                  #Subprocesses do not inherit PERMISSIONs
--allow-ffi[=UPATH,...]          !#Allow Deno.dlopen()
--allow-hrtime                    #Whether time resolution is ns or ms (for timing attacks and fingerprinting)

--allow-all|-A                    #Allow all permissions
NOTATION ==>              RWNESUFH#Notation to mean require --allow-read|write|net|env|sys|run|ffi|hrtime
                                  #--allow-read|net often means depends if URL|PATH is used

ENVVAR DENO_NO_PROMPT             #Only allow PERMISSIONs prompt through PERMISSIONS.request().
--no-prompt                       #Not automatically when permission is needed, denying them instead

Deno.permissions                  #PERMISSIONS. Inspired by DOM, but several differences.
PERMISSIONS.query(PERM_REQ)
 ->>PERM_STATUS                   #Get whether a permission is granted
PERMISSIONS.request(PERM_REQ)     #Same but if PERM_STATUS.state 'prompt':
 ->>PERM_STATUS                   #  - if stdin interactive, prompt for it
                                  #  - otherwise, PERM_STATUS.state 'denied'
PERMISSIONS.revoke(PERM_REQ)
 ->>PERM_STATUS                   #Set PERM_STATUS.state 'denied'
PERMISSIONS.query|requestSync(...)#Same but sync

PERM_REQ.name                     #'read|write|net|env|sys|run|ffi|hrtime'
PERM_REQ.path                     #UPATH
                                  #Only with read|write|ffi
PERM_REQ.host                     #'HOST|IP[:PORT]'
                                  #Only with net
PERM_REQ.variable                 #'ENVVAR'
                                  #Only with env
PERM_REQ.kind                     #'FUNC'
                                  #Only with sys
PERM_REQ.command                  #'BINARY'|URL
                                  #Only with run

PERM_STATUS.state                 #One of:
                                  #  - 'granted': --allow-* used, or request() accepted
                                  #  - 'prompt': --allow-* not used, and no request() yet
                                  #  - 'denied': --allow-* not used, and request() denied
PERM_STATUS.onchange
 = FUNC(EVENT)                    #When PERM_STATUS.state changes

Deno.errors.PermissionDenied      #Unauthorized, e.g. PERMISSIONs, OS file permissions, etc.

std/permissions/mod.ts            #
grant(PERM_REQ[_ARR]...)          #Call PERMISSIONS.request() for each PERM_REQ
 [->>PERM_REQ_ARR]                #Return PERM_REQ with state 'granted'
                                  #  - if none, return undefined
grantOrThrow(PERM_REQ[_ARR]...)->>#Call PERMISSIONS.request() for each PERM_REQ
                                  #If any PERM_REQ does not have state 'granted', throw


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              V8               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.v8                   #'X.Y.Z.BUILD' version of v8
                                  #Also printed by deno --version

ENVVAR DENO_V8_FLAGS
--v8-flags[='--FLAG ...']         #

deno bench|compile|eval|info
 |install|repl|run|test
--seed=NUM                        #Random number generator seed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROMISE CREATE ==>                #See deno deferred doc
TIMEOUT ==>                       #See deno delay doc
ABORT ==>                         #See deno abort doc
DEBOUNCE ==>                      #See deno debounce doc
RETRY ==>                         #See deno retry doc
ASYNC MAP ==>                     #See deno pooledMap doc
ASYNC SPLIT ==>                   #See deno tee doc
ASYNC MERGE ==>                   #See deno muxAsyncIterator doc

ReadableStream
ReadableStreamDefaultReader
ReadableStreamByobReader
WritableStream
WritableStreamDefaultWriter
TransformStream
ByteLengthQueuingStrategy
CountQueuingStrategy              #Like DOM

EventTarget
Event
CustomEvent
DOMException
ErrorEvent
ProgressEvent                     #Like DOM, but no: OPTS.capture

Deno.errors.WouldBlock            #Syscall is sync, although should be async
Deno.errors.Interrupted           #Syscall interrupted (EINTR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONSOLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


console                           #Like DOM

Deno.isatty(RID)->BOOL            #True if TTY
Deno.consoleSize()->OBJ           #Returns OBJ: columns|row NUM
                                  #Throws if not a TTY

alert
confirm
prompt                            #See deno prompt doc

Deno.inspect                      #See deno inspect doc

PRINTF ==>                        #See deno printf doc
HUMAN DURATION ==>                #See deno fmt_duration doc
HUMAN FILE SIZE ==>               #See deno fmt_bytes doc

HAS COLOR ==>                     #See deno color_enabled doc
STRIP COLOR ==>                   #See deno strip_color doc
SET COLOR ==>                     #See deno set_colors doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CPU              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


navigator.hardwareConcurrency     #Like DOM. NUM

Deno.osUptime()->NUM             S#NUM of secs OS has been up
Deno.loadavg()->NUM_ARR          S#1|5|15m load average
                                  #On Windows, always [0,0,0]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MEMORY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.memoryUsage()->MEMORY_USAGE  #Process memory
MEMORY_USAGE.rss                  #NUM (in bytes). Total memory used
MEMORY_USAGE.heapTotal            #NUM (in bytes). Heap memory available
MEMORY_USAGE.heapUsed             #NUM (in bytes). Heap memory used
MEMORY_USAGE.external             #NUM (in bytes). External memory used

Deno.systemMemoryInfo()
 ->SYS_MEMORY                    S#System-wide memory
SYS_MEMORY.total                  #Total RAM
SYS_MEMORY.free                   #RAM available
SYS_MEMORY.swapTotal|swapFree     #Same for swap memory
SYS_MEMORY.buffers                #Memory used by OS buffers
SYS_MEMORY.cached                 #Memory used by page cache and slabs
SYS_MEMORY.available              #Memory that can be used to start processes without swapping


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROCESS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.pid                          #NUM. Process ID
Deno.ppid                         #NUM. Parent process ID
Deno.uid|gid()->NUM|null         S#Process UID|GID. null on Windows

Deno.chdir(UPATH)                R#Change cwd
Deno.cwd()->'PATH'               R#Can throw NotFound

Deno.env                         E#ENV
ENV.get('ENVVAR')[->'VAL']        #
ENV.has('ENVVAR')->BOOL           #True even if empty ''
ENV.set('ENVVAR', 'VAL')          #
ENV.delete('ENVVAR')              #
ENV.toObject()->OBJ               #

Deno.stdin                        #Inherits CLOSER|READER[_SYNC]. Current process stdin.
Deno.stdin.rid                    #RID
Deno.stdin.readable               #RSTREAM
Deno.stdin.setRaw(BOOL[, OPTS])   #When false (def):
                                  #  - echoes input to output
                                  #  - buffer input until next newline (i.e. line-wise input instead of character-wise)
                                  #  - buffered input can be removed with Backspace|Delete
                                  #  - can quit with CTRL-D
                                  #  - emit sounds (bell)
                                  #  - normalize any non-ASCII to ASCII (by removing MSB)
                                  #  - '\r\n' -> '\n'
                                  #When false or OPTS.cbreak true (def: false):
                                  #  - can quit with CTRL-C, CTRL-Z (not on Windows)
                                  #In any case:
                                  #  - no readline|Emacs keybindings (CTRL-A, etc.)
                                  #  - cannot move cursor (Left|Right|Home|End)

Deno.stdout|stderr                #Inherits CLOSER|WRITER[_SYNC]. Current process stdout.
Deno.stdout|stderr.rid            #RID
Deno.stdout|stderr.writable       #WSTREAM

OS ==>                            #See deno OS doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             EXIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.exit([NUM])                  #Def NUM: 0. Process exit
close()                           #Similar to DOM. Like Deno.exit(0) except closed is true
closed                            #Similar to DOM. true if close() was called and inside unload

globalThis.add|removeEventListener
globalThis.dispatchEvent          #Similar to DOM
onload = FUNC(EVENT)              #Similar to DOM. On end of initial macrotask (not microtask)

onbeforeunload = FUNC(EVENT)      #Similar to DOM. On implicit process exit, i.e. due to no more macrotasks.
                                  #Can preventDefault, which waits for new microtasks, then calls beforeunload again.
                                  #Can run new microtasks, if preventDefault.
onunload = FUNC(EVENT)            #Similar to DOM. On explicit non-error process exit, e.g. Deno.exit()
                                  #Cannot preventDefault nor run new microtasks.

globalThis|WORKERGLOBAL.onerror   #Similar to DOM. On process exit due to uncaught exceptions.
 = FUNC(ERROREVENT)               #Top-level scop e|macrotask is considered async (to support top-level await),
                                  #i.e. only applies to other sync macrotasks.
                                  #Can preventDefault. Can run new microtasks, if preventDefault.
Deno.errors.NAME                  #Deno known error classes
Deno.errors.NotSupported          #API not implemented yet

onunhandledrejection              #Similar to DOM. On process exit due to unhandled promises.
 = FUNC(PROMREJEVENT)             #Can preventDefault. Can run new microtasks, if preventDefault.
reportError(VAL)                  #Like DOM

Deno.errors.NAME                  #Deno known error classes
Deno.errors.NotSupported          #API not implemented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SIGNAL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SIGNAL                            #'SIG*'. OS-dependent.
                                  #On Windows, only 'SIGINT|SIGBREAK' supported
Deno.add|removeSignalListener
 (SIGNAL, FUNC())                 #

std/signal/mod.ts                 #
signal(SIGNAL...)->ASYNC_ITERABLE #Iterate over SIGNAL events.
                                  #Iteration returns false when dispose() was just called, true otherwise
ASYNC_ITERABLE.dispose()          #Call removeSignalListener()

Deno.kill(PID_NUM[, SIGNAL])     U#Send SIGNAL (def: 'SIGTERM') to a process
                                  #If PID_NUM negative, send to progress group instead
                                  #  - throws on Windows
CHILD_PROCESS.kill([SIGNAL])      #Send SIGNAL (def: 'SIGTERM') to CHILD_PROCESS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CHILD PROCESS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CHILD PROCESSES ==>>              #See deno command doc

new Worker('URL'|URL[, OPTS])     #Like DOM, but:
                                  #  - 'URL' requires --location
                                  #  - no OPTS.credentials
                                NR#Requires same PERMISSIONs as fetch()
OPTS.type                         #Must be 'module'
OPTS.deno.permissions             #Like PERMISSIONS.request(). Either:
                                  #  - OBJ:
                                  #     - key is read|write|...
                                  #     - value is one of:
                                  #        - STR_ARR|BOOL: depending on PERMISSION type
                                  #        - 'inherit': same as process
                                  #  - 'inherit' (def)
                                  #  - 'none'

MessageChannel
MessagePort
BroadcastChannel
MessageEvent                      #Like DOM

structuredClone(VAL[, OPTS])->VAL #Like DOM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STATE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BINARY ==>                        #See deno binary doc
RESOURCE ==>                      #See deno resource doc
FILES ==>                         #See deno file doc
WATCH ==>                         #See deno watch doc

STREAMS CREATE ==>                #See deno_streams_create doc
STREAMS MAP ==>                   #See deno_streams_map doc
STREAMS SLICE ==>                 #See deno_streams_slice doc
STREAMS SPLIT ==>                 #See deno_streams_split doc
STREAMS COMBINE ==>               #See deno_streams_combine doc

KEY-VALUE STORE ==>               #See deno kv doc

localStorage                      #Like DOM.
sessionStorage                    #Unique per ROOT_FILE_HASHID
                                  #Stores in DENO_DIR/ROOT_FILE_HASHID/local_storage, as SQLite database
                                  #Max 10MB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TCP ==>                           #See deno tcp doc
TLS ==>                           #See deno tls doc
UDP ==>                           #See deno udp doc
DNS ==>                           #See deno dns doc
WEBSOCKET ==>                     #See deno websocket doc

Deno.hostname()->STR             S#System hostname

Deno.networkInterfaces()
 ->NETWORK_INTERFACE_ARR         S#
NETWORK_INTERFACE.name            #STR, e.g. 'lo', 'wlp113s0', etc.
NETWORK_INTERFACE.family          #'IPv4|6'
NETWORK_INTERFACE.address         #'IP'
NETWORK_INTERFACE.netmask         #STR
NETWORK_INTERFACE.scopeid         #NUM or (if IPv4) null
NETWORK_INTERFACE.cidr            #'IP/NUM'
NETWORK_INTERFACE.mac             #STR. MAC address

Deno.errors.AddrInUse             #Start server on address|port already used
Deno.errors.AddrNotAvailable      #Start server on address|port that does not exist (EADDRNOTAVAIL)

Deno.errors.NotConnected          #Socket connection ended or never started (ENOTCONN)
Deno.errors.ConnectionAborted     #Socket connection aborted (ECONNABORTED)
Deno.errors.ConnectionReset       #Socket connection reset
Deno.errors.ConnectionRefused     #Socket connection refused


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTTP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fetch(...)                        #Like DOM except:
                                  #  - file: URIs supported, but only if absolute or with --location
                                  #  - no cookies
                                  #  - no concept of origins (CORS, REQ.mode, RES.type 'opaqueredirect', etc.)
                                  #  - no REQ.keepalive
                                  #  - no REQ.credentials
                                  #  - no REQ.cache
                                  #  - no REQ.referrer[Policy]
                                  #  - no REQ.integrity
                                  #  - no REQ.window
                                  #Requires PERMISSIONs:
                                 R#  - file URL
                                 N#  - remote URL
Request
Response
Headers
FormData                          #Like DOM

navigator.userAgent               #Like DOM. 'Deno/X.Y.Z'

caches                            #Like DOM, but no:
CacheStorage                      #  - add[All]|matchAll|keys()
Cache                             #  - CACHE_STORAGE.match()
                                  #  - OPTS with match|delete()

REQQ.client                       #HTTP_CLIENT
Deno.createHttpClient([HCOPTS])
 ->HTTP_CLIENT                    #Customize HTTP request option
HTTP_CLIENT                      !#Inherits CLOSER
HTTP_CLIENT.rid                   #RID

ENVVAR HTTP_PROXY
ENVVAR HTTP[S]_PROXY
ENVVAR NO_PROXY                   #Can be used. For all HTTP requests, including imports
HCOPTS.proxy                      #HTTP_PROXY
HTTP_PROXY.url                    #'URL'
HTTP_PROXY.basicAuth
 .username|password               #STR

Deno.errors.Http                  #Too many HTTP redirects

HTTP SERVER ==>                   #See deno http doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      CRYPTO/COMPRESSION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CompressionStream
DecompressionStream               #Like DOM

WEB CRYPTO API ==>                #Like DOM
std/crypto                        #Adds:
                                  #  - key rotation
                                  #  - additional hash algorithms
                                  #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          WEBASSEMBLY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WebAssembly                       #Like DOM, but no: externref, Tag(), Exception()

std/wasi                          #WASI
                                  #Not documented yet

wasmbuild                         #Helper to use WASM written in Rust in Deno
                                  #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FFI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.dlopen(UPATH, FLIBRARY)    F!#Opens a C library.
 ->FDLIB                          #Must be *.so (Linux), *.dylib (macOS), *.dll (Windows)
FLIBRARY.NAME                     #FSTATIC or FFUNCTION. Exported symbol in C library
                                  #NAME is the one used in FDLIB.symbols.NAME

FSTATIC|FFUNCTION.name            #'NAME' (def: 'NAME') used in C library
FSTATIC|FFUNCTION.optional        #BOOL (def: false)
                                  #Whether value might be null. Otherwise, fails if not found

FSTATIC                           #Non-FUNC value
FSTATIC.type                      #FNTYPE

FFUNCTION                         #FUNC value
FFUNCTION.parameters              #FNTYPE_ARR of arguments
FFUNCTION.result                  #FNTYPE
FFUNCTION.nonblocking             #BOOL (def: false)
                                  #Whether async
FFUNCTION.callback                #BOOL (def: false)
                                  #Allow being used as parameter itself

FDLIB                             #Inherits CLOSER
                                  #Ref'd by the process
FDLIB.symbols.NAME                #One of:
                                  #  - NUM|BIGINT|BOOL|DPOINTER: for FSTATIC
                                  #  - (...)->[>]...: for FFUNCTION
                                  #  - null: only if optional

FNTYPE                            #One of:
                                  #  - 'u|i8|16|32' -> NUM
                                  #  - 'u|i64' -> BIGINT
                                  #  - 'f32|64' -> NUM
                                  #  - 'u|isize' -> NUM
                                  #  - 'bool' -> BOOL
                                  #  - 'pointer' -> FPOINTER
                                  #  - 'buffer' -> FPOINTER
                                  #  - 'function' -> FPOINTER
                                  #  - { struct FNTYPE_ARR } -> UINT8ARR

FPOINTER                          #Opaque OBJ representing a memory address
                                  #Underlying type is either:
                                  #  - 32 bits: NUM
                                  #  - 64 bits: NUM if <Number.MAX_SAFE_INTEGER, BIGNUM otherwise
Deno.UnsafePointer.create
 (NUM|BIGINT)->FPOINTER           #
Deno.UnsafePointer.value
 (FPOINTER)->NUM|BIGINT           #
Deno.UnsafePointer.equals
 (FPOINTER, FPOINTER2)->BOOL      #
Deno.UnsafePointer.offset
 (FPOINTER, NUM)->FPOINTER2       #
Deno.UnsafePointer.of(...)
Deno.UnsafeCallback.*
Deno.UnsafeFnPointer.*
Deno.UnsafePointerView.*          #FNPOINTER manipulation. Not documented yet

DENOSAURS PLUG ==>                #FFI helper module
                                  #Not documented yet
DENO_BINGEN ==>                   #Library helping with FFI written in Rust
                                  #Not documented yet
DENO_PYTHON ==>                   #Library helping with FFI written in Python
                                  #Not documented yet
