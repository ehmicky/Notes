
        
   DENO  
        



VERSION ==>                       #CLI: 1.33.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARCHITECTURES ==>                 #x86_64 on Windows|macOS|Linux, or ARM64 on macOS

GITHUB RELEASES ==>               #With only Deno CLI, zipped, for each version and architecture

VERSION MANAGER ==>               #asdf + asdf-deno
                                  #Not documented yet

deno_install                      #sh|Powershell script to install Deno.
                                  #Download GitHub release then extract to BIN_DIR
                                  #Can pass specific X.Y.Z version as argument (def: latest)
                                  #Available at https://deno.land/install.sh|ps1 or via
                                  #scoop|homebrew|macports|chocolatey|snap|pacman|zypper|cargo
                                  #Version 0.1.8

deno upgrade                      #Upgrade Deno CLI
--version                         #'X.Y.Z' (def: latest)
--canary                          #Include canary versions
--output                          #DENO_INSTALL
--force|-f                        #Even if not out-of-date
--dry-run                         #

DENO_INSTALL                      #~/.deno
                                  #Can be configured with deno_install using ENVVAR DENO_INSTALL
BIN_DIR                           #DENO_INSTALL/bin
                                  #Contains deno executable
                                  #Must be in ENVVAR PATH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno completions SHELL            #Print completion script
                                  #SHELL: bash|fish|powershell|zsh|fig

deno ...
--quiet|-q                        #
--unstable                        #Enable unstable APIs
                                 !#Means API is unstable


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF_FILE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPORT_MAP_FILE

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             APIS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



ENVVAR DENO_AUTH_TOKENS           #A semi-colon separated list of bearer tokens and hostnames to use when fetching remote modules from private repositories
                                  #(e.g. "abcde12345@deno.land;54321edcba@github.com")
ENVVAR DENO_TLS_CA_STORE          #Comma-separated list of order dependent certificate stores. Possible values: "system", "mozilla". Defaults to "mozilla".
ENVVAR DENO_CERT                  #Load certificate authority from PEM encoded file
ENVVAR DENO_DIR                   #Set the cache directory
ENVVAR DENO_INSTALL_ROOT          #Set deno install's output directory (defaults to $HOME/.deno/bin)
ENVVAR DENO_REPL_HISTORY          #Set REPL history file path History file is disabled when the value is empty (defaults to $DENO_DIR/deno_history.txt)
ENVVAR DENO_NO_PACKAGE_JSON       #Disables auto-resolution of package.json
ENVVAR DENO_NO_PROMPT             #Set to disable permission prompts on access (alternative to passing --no-prompt on invocation)
ENVVAR DENO_NO_UPDATE_CHECK       #Set to disable checking if a newer Deno version is available
ENVVAR DENO_V8_FLAGS              #Set V8 command line options
ENVVAR DENO_JOBS                  #Number of parallel workers used for the --parallel flag with the test subcommand. Defaults to number of available CPUs.

ENVVAR NPM_CONFIG_REGISTRY        #URL to use for the npm registry.

ENVVAR HTTP_PROXY                 #Proxy address for HTTP requests (module downloads, fetch)
ENVVAR HTTPS_PROXY                #Proxy address for HTTPS requests (module downloads, fetch)
ENVVAR NO_COLOR                   #Set to disable color
ENVVAR NO_PROXY                   #Comma-separated list of hosts which do not use a proxy (module downloads, fetch)

deno bench|cache|check|upgrade
--cert                            #'FILE' to CA authority

deno bench|cache
--[no-]check[=<CHECK_TYPE>]       #Type-check modules

deno bench|cache|check
--import-map IMPORT_MAP_FILE      #Load import map file
--no-remote                       #Do not resolve remote modules
--no-npm                          #Do not resolve npm modules
--[no-]node-modules-dir[=DIR]     #Creates a local node_modules folder
--config|-c CONF_FILE             #Specify the configuration file
--no-config                       #Disable automatic loading of the configuration file.
--reload|-r[=<CACHE_BLOCKLIST>...]#Reload source code cache (recompile TypeScript)
--lock [FILE]                     #Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.
--lock-write                      #Force overwriting the lock file.
--no-lock                         #Disable auto discovery of the lock file.

deno bench [FILE...] [-- ARG...]  #Run benchmarks
--allow-read[=DIR|FILE,...]       #Allow file system read access
--allow-write[=DIR|FILE,...]      #Allow file system write access
--allow-net[=HOST|IP[:PORT],...]  #Allow network access
--allow-env[=ENVVAR,...]          #Allow access to system environment information
--allow-sys[=FUNC,...]            #Allow access to OS information
--allow-run[=BINARY,...]          #Allow running subprocesses
--allow-ffi[=DIR|FILE,...]       !#Allow loading dynamic libraries
--allow-hrtime                    #Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting.
--allow-all|-A                    #Allow all permissions
--unsafely-ignore-certificate
  -errors[=<HOSTNAMES>...]        #DANGER: Disables verification of TLS certificates
--no-prompt                       #Always throw if required permission wasn't passed
--cached-only                     #Require that remote dependencies are already cached
--location STR                    #Value of 'globalThis.location' used by some web APIs
--v8-flags[='--FLAG ...']         #Set V8 command line options
--seed NUM                        #Set the random number generator seed
--json                           !#Output benchmark result in JSON format
--ignore=FILE...                  #Ignore files
--filter GLOB                     #Run benchmarks with this string or pattern in the bench name
--no-run                          #Cache bench modules, but don't run benchmarks
--watch                           #Watch for file changes and restart automatically
--no-clear-screen                 #Do not clear terminal screen when under watch mode

deno cache FILE...                #Cache the dependencies

deno check FILE...                #Type-check the dependencies
--all                             #Type-check all code, including remote modules and npm packages
