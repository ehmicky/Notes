
        
   DENO  
        



TODO:
  - go through this doc
     - including the split docs below
  - go through manual
  - std
  - Deno deploy
  - Deno subhosting



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #CLI: 1.33.1
                                  #std: 0.185.0
                                  #  - i.e. most releases can be breaking

Deno.version.deno                 #'X.Y.Z' version of CLI

deno ... --unstable               #Enable unstable APIs
                                 !#Means API is unstable

globalThis
self
window                            #Like DOM: all the same

Deno                              #Global variable for all non-standard API

UPATH                             #PATH|URL
[U]SPATH                          #[U]PATH or - (stdin)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno compile                     !#See deno compile doc

deno lint                         #See deno lint doc
deno fmt                          #See deno fmt doc
deno doc                          #See deno doc doc

deno test                         #See deno test doc
deno bench                        #See deno bench doc

ASYNC ==>                         #See deno async doc
RESOURCE ==>                      #See deno resource doc
FILES ==>                         #See deno file doc
WATCH ==>                         #See deno watch doc

OS ==>                            #See deno OS doc
CHILD PROCESSES ==>>              #See deno command doc
CLI FLAGS ==>                     #See deno flags doc

KEY-VALUE STORE ==>               #See deno kv doc

TCP ==>                           #See deno tcp doc
TLS ==>                           #See deno tls doc
UDP ==>                           #See deno udp doc
DNS ==>                           #See deno dns doc
WEBSOCKET ==>                     #See deno websocket doc

Deno.inspect                      #See deno inspect doc

TextDecoder|Encoder[Stream]
btoa|atob(STR)->STR2              #Like DOM

performance
PerformanceEntry
PerformanceMark
PerformanceMeasure                #Like DOM, but no PerformanceObserver, PerformanceResource|Server|NavigationTiming

ReadableStream
ReadableStreamDefaultReader
ReadableStreamByobReader
WritableStream
WritableStreamDefaultWriter
TransformStream
ByteLengthQueuingStrategy
CountQueuingStrategy              #Like DOM

Worker                            #Like DOM, but no: OPTS.credentials
MessageChannel
MessagePort
BroadcastChannel
MessageEvent                      #Like DOM
structuredClone(VAL[, OPTS])->VAL #Like DOM

localStorage                      #Like DOM.
sessionStorage                    #Stores in DENO_DIR/FILE_HASHID/local_storage, as SQLite database

CompressionStream
DecompressionStream               #Like DOM

WEB CRYPTO API ==>                #Like DOM

WebAssembly                       #Like DOM, but no: externref, Tag(), Exception()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GITHUB RELEASES ==>               #With only Deno CLI, zipped, for each version and architecture

VERSION MANAGER ==>               #asdf + asdf-deno
                                  #Not documented yet

deno_install                      #sh|Powershell script to install Deno.
                                  #Download GitHub release then extract to DENO_INSTALL_ROOT
                                  #Can pass specific X.Y.Z version as argument (def: latest)
                                  #Available at https://deno.land/install.sh|ps1 or via
                                  #scoop|homebrew|macports|chocolatey|snap|pacman|zypper|cargo
                                  #Version 0.1.8

ENVVAR DENO_NO_UPDATE_CHECK       #Unless set, fails when a newer Deno version is available

deno upgrade                      #Upgrade Deno CLI
--version                         #'X.Y.Z' (def: latest)
--canary                          #Include canary versions
--output                          #DENO_INSTALL_ROOT
--force|-f                        #Even if not out-of-date
--dry-run                         #

deno install|uninstall            #Main global Deno DIR
--root=DIR                        #With deno_install, ENVVAR is DENO_INSTALL
ENVVAR DENO_INSTALL_ROOT          #Def: ~/.deno

deno init [DIR]                   #Initialize a new project
                                  #Def DIR: .
                                  #Creates:
                                  #  - dummy main.ts, main_test.ts, main_bench.ts
                                  #  - deno.jsonc with CONFIG.tasks.dev 'deno run --watch main.ts'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG                            #JSON|JSONC file
                                  #Location (in priority):
                                  #  - --config
                                  #  - [.../]deno.json[c]

deno bench|cache|check|compile
 |eval|fmt|info|install|lint|repl
 |run|task|test|vendor
--[no-]config|-c CONFIG           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



deno bench|coverage|fmt|lint|test
--ignore=PATH,...                 #Ignore files

deno compile|eval|run --ext EXT  !#Allowed file extensions. Def: js[x]|ts[x]

deno ... --quiet|-q               #
deno doc|lint --json              #Output result in JSON format
deno bench|info --json           !#Same

deno completions SHELL            #Print completion script
                                  #SHELL: bash|fish|powershell|zsh|fig


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno run [USPATH [ARG...]]        #Execute a JavaScript|TypeScript file

deno eval 'CODE' [ARG...]         #Execute a JavaScript|TypeScript string
                                  #Implies --allow-all
--print|-p                        #Print statement result to stdout

deno repl                         #Run REPL
--eval='CODE'                     #Executes 'CODE' on start
--eval-file=UPATH,...             #Same with a file
ENVVAR DENO_REPL_HISTORY          #REPL history. Empty to disable.
                                  #Def: DENO_DIR/deno_history.txt


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DENO_INSTALL_BIN                  #DENO_INSTALL_ROOT/bin
                                  #Contains deno executable
                                  #Must be in ENVVAR PATH
Deno.execPath()->'PATH'          R#PATH to deno executable

deno install UPATH                #Copy UPATH JavaScript|TypeScript file to DENO_INSTALL_BIN/BINARY
--name|-n BINARY                  #BINARY filename
                                  #Def: filename from UPATH without .EXT
                                  #  - if main|mod|index|cli, use parent DIR instead
                                  #Always strip any '@TAG'
--force|-f                        #Do not fail if destination file already exists

deno uninstall BINARY             #Uninstall a script previously installed with deno install


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DEBUG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno eval|install|repl|run|test   #
--inspect[=HOSTNAME]              #Activate inspector on host:port (default: 127.0.0.1:9229)
--inspect-brk[=HOSTNAME]          #Activate inspector on host:port, wait for debugger to connect and break at the start of user script
--inspect-wait[=HOSTNAME]         #Activate inspector on host:port and wait for debugger to connect before running user code

Deno.metrics()->METRICS           #Returns number of OPs (also called "bindings") since process started
                                  #OPs are like syscalls but inside Deno:
                                  #  - calls from JavaScript sandbox to privileged underlying code
                                  #  - most Deno.* corresponds to an OP
METRICS.opsDispatched             #NUM of ops started
METRICS.opsDispatchedSync         #Same but split between sync|async
 |Async[Unref]                    #Async is when it is ref'd by the process, AsyncUnref when it is not
METRICS.opsCompleted*             #Like opsDispatched, but finished
METRICS.bytesSentControl          #NUM of bytes sent for metadata
METRICS.bytesSentData             #NUM of bytes sent for data
METRICS.bytesReceived             #NUM of bytes received
METRICS.ops.OP                    #METRICS for a given OP

deno lsp                          #Start the language server
                                  #Provides a way for code editors and IDEs to interact with Deno using the Language Server Protocol.
                                  #Usually humans do not use this subcommand directly.
                                  #For example, 'deno lsp' can provide IDEs with go-to-definition support and automatic code formatting.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIG.tasks.TASK                 #'COMMAND'

deno task [TASK]                  #Run TASK
--cwd DIR                         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              URL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


URL
URL.createObjectURL
URL.revokeObjectURL
URLSearchParams                   #Like DOM
URLPattern                        #Like DOM but no: OPTS.ignoreCase

deno bench|compile|eval|info
 |install|repl|run|test
--location=URL                    #Required to use globalThis.location
location                          #Like DOM but readonly
                                  #  - LOCATION.assign|replace|reload() always throw

import.meta.url                   #Current 'URL'
                                  #Fails on REPL
import.meta.resolve(STR)->>'URL'  #
Deno.mainModule                  R#'URL' of first loaded file
                                  #Filename '$deno$repl.ts' if REPL
                                  #Requires read PERMISSION to its DIR
import.meta.main                  #BOOL. True if first loaded file

ext:*                             #Source code from Deno core|CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IMPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPORT_MAP_FILE                   #

CONFIG.*                          #Can be used as IMPORT_MAP_FILE

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
 |vendor
--import-map=IMPORT_MAP_FILE      #Load import map file from local file or remote URL.
CONFIG.importMap                  #Specification: https://wicg.github.io/import-maps/
                                  #Examples: https://github.com/WICG/import-maps#the-import-map
--[no-]lock[=PATH]
CONFIG.lock                       #Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.

deno bench|cache|check|compile
 |eval|install|repl|run|test
--lock-write                      #Force overwriting the lock file.

deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-remote                       #Do not resolve remote modules

deno vendor UPATH...              #Vendor remote modules into a local directory
                                  #Analyzes the provided modules along with their dependencies, downloads remote modules to the output directory,
                                  #and produces a DIR/import_map.json that maps remote specifiers to the downloaded files.
--output DIR                      #The directory to output the vendored modules to
--force|-f                        #Forcefully overwrite conflicting files in existing output directory

ENVVAR DENO_AUTH_TOKENS           #A semi-colon separated list of bearer tokens and hostnames to use when fetching remote modules from private repositories
                                  #(e.g. "abcde12345@deno.land;54321edcba@github.com")

CDN ==>                           #See deno.land doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FILE_HASHID                       #ID based on file location
                                  #If PPATH, it is just the filename instead

ENVVAR DENO_DIR                   #Set the cache directory
PPATH                             #http[s]/DOMAIN or file/PATH
DENO_DIR/deps/PPATH/              #Imports cache
                                  #Files:
                                  #  - FILE_HASHID: file contents
                                  #  - FILE_HASHID.metadata.json OBJ:
                                  #     - url 'URL': request URL
                                  #     - headers OBJ: request header
                                  #     - now: request timestamp
DENO_DIR/check_cache_v1           #TypeScript type check cache. SQLite database
DENO_DIR/gen/PPATH                #TypeScript transpiling cache.
                                  #Files:
                                  #  - FILE_HASHID.js: transpiled file contents
                                  #  - FILE_HASHID.meta: OBJ
                                  #     - source_hash 'SHA': source file contents checksum
                                  #     - emit_hash 'SHA': transpiled file contents checksum
DENO_DIR/npm/                     #

deno cache UPATH...               #Cache and compile remote dependencies recursively.
                                  #Download and compile a module with all of its static dependencies and save them in the local cache, without running any code.
                                  #Future runs of this module will trigger no downloads or compilation unless --reload is specified.

deno bench|compile|eval|info
 |install|repl|run|test
--cached-only                     #Require that remote dependencies are already cached

deno bench|cache|check|compile|doc#Reload source code cache (recompile TypeScript)
 |eval|info|install|repl|run|test #CACHE_BLOCKLIST:
 |vendor                          #  - def: everything
--reload|-r [<CACHE_BLOCKLIST>...]#  - https://deno.land/std: only standard modules
                                  #  - URL: specific modules
                                  #  - 'npm:': Reload all npm modules
                                  #  - 'npm:MODULE': Reload specific npm module

deno info [UPATH]                 #Show info about cache or info related to source file
                                  #The following information is shown:
                                  #  - local: Local path of the file.
                                  #  - type: JavaScript, TypeScript, or JSON.
                                  #  - emit: Local path of compiled source code. (TypeScript only.)
                                  #  - dependencies: Dependency tree of the source file.
                                  #Without any additional arguments, 'deno info' shows DENO_DIR and subdirectories.
                                  #  - DENO_DIR: Directory containing Deno-managed files.
                                  #  - Remote modules cache: Subdirectory containing downloaded remote modules.
                                  #  - TypeScript compiler cache: Subdirectory containing TS compiler output.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|cache|check|compile|doc
 |eval|info|install|repl|run|test
--no-npm                          #Do not resolve npm modules
ENVVAR NPM_CONFIG_REGISTRY        #URL to use for the npm registry.

deno bench|cache|check|compile
 |eval|info|install|repl|run|test
--[no-]node-modules-dir[=DIR]     #Creates a local node_modules folder

ENVVAR DENO_NO_PACKAGE_JSON       #Disables auto-resolution of package.json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.typescript           #'X.Y.Z' version of TypeScript

CONFIG.typescript.compilerOptions #Alternative to using tsconfig.json

deno bench|cache|compile|eval     #Type-check modules
 |install|repl|run|test           #If the value of '--no-check=remote' is supplied, diagnostic errors from remote modules will be ignored.
--[no-]check[=STR]                #Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant.
                                  #If the value of '--check=all' is supplied, diagnostic errors from remote modules will be included.
                                  #Alternatively, the 'deno check' subcommand can be used.

deno check UPATH...               #Download and type-check without execution.
                                  #Unless --reload is specified, this command will not re-download already cached dependencies.
--all                             #Type-check all code, including remote modules and npm packages

deno types                        #Print runtime TypeScript declarations

TYPESCRIPT TESTS TESTING ==>      #See deno test types doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


deno bench|compile|install|repl
 |run|test
--allow-read|write[=DIR|FILE,...] #Allow reading|writing files
                                  #If DIR, recursive
                                  #Not necessary for stdin|stdout|stderr
--allow-net[=HOST|IP[:PORT],...]  #Allow opening|connecting to sockets:
                                  #  - TCP|UDP (except Unix socket): Deno.connect|listen|start*()
                                  #  - DNS: Deno.resolve*()
                                  #  - HTTP: fetch()
                                  #  - WebSocket
--allow-env[=ENVVAR,...]          #Allow reading|writing ENVVARs (Deno.env) and accessing environment information
--allow-sys[=FUNC,...]            #Allow access to OS information
                                  #FUNC is Deno.FUNC() among 'loadavg|hostname|systemMemoryInfo|networkInterfaces|osRelease|osUptime|uid|gid'
--allow-run[=BINARY|URL,...]      #Allow subprocesses (Deno.Command|kill)
                                  #Subprocesses might not use Deno, i.e. can escape --allow-*
--allow-ffi[=UPATH,...]          !#Allow Deno.dlopen()
--allow-hrtime                    #Whether time resolution is ns or ms (for timing attacks and fingerprinting)

--allow-all|-A                    #Allow all permissions
NOTATION ==>              RWNESUFH#Notation to mean require --allow-read|write|net|env|sys|run|ffi|hrtime
                                  #--allow-read|net often means depends if URL|PATH is used

ENVVAR DENO_NO_PROMPT
--no-prompt                       #Do not make request() prompt

Deno.permissions                  #PERMISSIONS. Inspired by DOM, but several differences.
PERMISSIONS.query(PERM_REQ)
 ->>PERM_STATUS                   #Get whether a permission is granted
PERMISSIONS.request(PERM_REQ)     #Same but if PERM_STATUS.state 'prompt':
 ->>PERM_STATUS                   #  - if stdin interactive, prompt for it
                                  #  - otherwise, PERM_STATUS.state 'denied'
PERMISSIONS.revoke(PERM_REQ)
 ->>PERM_STATUS                   #Set PERM_STATUS.state 'denied'
PERMISSIONS.query|requestSync(...)#Same but sync

PERM_REQ.name                     #'read|write|net|env|sys|run|ffi|hrtime'
PERM_REQ.path                     #UPATH
                                  #Only with read|write|ffi
PERM_REQ.host                     #'HOST|IP[:PORT]'
                                  #Only with net
PERM_REQ.variable                 #'ENVVAR'
                                  #Only with env
PERM_REQ.kind                     #'FUNC'
                                  #Only with sys
PERM_REQ.command                  #'BINARY'|URL
                                  #Only with run

PERM_STATUS.state                 #One of:
                                  #  - 'granted': --allow-* used, or request() accepted
                                  #  - 'prompt': --allow-* not used, and no request() yet
                                  #  - 'denied': --allow-* not used, and request() denied
PERM_STATUS.onchange
 = FUNC(EVENT)                    #When PERM_STATUS.state changes

Deno.errors.PermissionDenied      #Unauthorized, e.g. PERMISSIONs, OS file permissions, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              V8               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.version.v8                   #'X.Y.Z.BUILD' version of v8

ENVVAR DENO_V8_FLAGS              #Set V8 command line options
--v8-flags[='--FLAG ...']         #To see a list of all available flags use --v8-flags=--help.

deno bench|compile|eval|info
 |install|repl|run|test
--seed=NUM                        #Set the random number generator seed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONSOLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


console                           #Like DOM

Deno.isatty(RID)->BOOL            #True if TTY
Deno.consoleSize()->OBJ           #Returns OBJ: columns|row NUM
                                  #Throws if not a TTY

alert
confirm
prompt                            #See deno prompt doc

ENVVAR NO_COLOR                   #Set to disable color
Deno.noColor                      #Like Deno.env.get('NO_COLOR') but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CPU              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


navigator.hardwareConcurrency     #Like DOM. NUM

Deno.osUptime()->NUM             S#NUM of secs OS has been up
Deno.loadavg()->NUM_ARR          S#1|5|15m load average
                                  #On Windows, always [0,0,0]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MEMORY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.memoryUsage()->MEMORY_USAGE  #Process memory
MEMORY_USAGE.rss                  #NUM (in bytes). Total memory used
MEMORY_USAGE.heapTotal            #NUM (in bytes). Heap memory available
MEMORY_USAGE.heapUsed             #NUM (in bytes). Heap memory used
MEMORY_USAGE.external             #NUM (in bytes). External memory used

Deno.systemMemoryInfo()
 ->SYS_MEMORY                    S#System-wide memory
SYS_MEMORY.total                  #Total RAM
SYS_MEMORY.free                   #RAM available
SYS_MEMORY.swapTotal|swapFree     #Same for swap memory
SYS_MEMORY.buffers                #Memory used by OS buffers
SYS_MEMORY.cached                 #Memory used by page cache and slabs
SYS_MEMORY.available              #Memory that can be used to start processes without swapping


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROCESS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.pid                          #NUM. Process ID
Deno.ppid                         #NUM. Parent process ID
Deno.uid|gid()->NUM|null         S#Process UID|GID. null on Windows

Deno.chdir(UPATH)                R#Change cwd
Deno.cwd()->'PATH'               R#Can throw NotFound

Deno.env                         E#ENV
ENV.get('ENVVAR')[->'VAL']        #
ENV.has('ENVVAR')->BOOL           #True even if empty ''
ENV.set('ENVVAR', 'VAL')          #
ENV.delete('ENVVAR')              #
ENV.toObject()->OBJ               #

Deno.stdin                        #Inherits CLOSER|READER[_SYNC]. Current process stdin.
Deno.stdin.rid                    #RID
Deno.stdin.readable               #RSTREAM
Deno.stdin.setRaw(BOOL[, OPTS])   #When false (def):
                                  #  - echoes input to output
                                  #  - buffer input until next newline (i.e. line-wise input instead of character-wise)
                                  #  - buffered input can be removed with Backspace|Delete
                                  #  - can quit with CTRL-D
                                  #  - emit sounds (bell)
                                  #  - normalize any non-ASCII to ASCII (by removing MSB)
                                  #  - '\r\n' -> '\n'
                                  #When false or OPTS.cbreak true (def: false):
                                  #  - can quit with CTRL-C, CTRL-Z (not on Windows)
                                  #In any case:
                                  #  - no readline|Emacs keybindings (CTRL-A, etc.)
                                  #  - cannot move cursor (Left|Right|Home|End)

Deno.stdout|stderr                #Inherits CLOSER|WRITER[_SYNC]. Current process stdout.
Deno.stdout|stderr.rid            #RID
Deno.stdout|stderr.writable       #WSTREAM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             EXIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.exit([NUM])                  #Def NUM: 0. Process exit
close()                           #Similar to DOM. Like Deno.exit(0) except closed is true
closed                            #Similar to DOM. true if close() was called and inside unload

globalThis.add|removeEventListener
globalThis.dispatchEvent          #Similar to DOM
onload = FUNC(EVENT)              #Similar to DOM. On end of initial macrotask (not microtask)

onbeforeunload = FUNC(EVENT)      #Similar to DOM. On implicit process exit, i.e. due to no more macrotasks.
                                  #Can preventDefault, which waits for new microtasks, then calls beforeunload again.
                                  #Can run new microtasks, if preventDefault.
onunload = FUNC(EVENT)            #Similar to DOM. On explicit non-error process exit, e.g. Deno.exit()
                                  #Cannot preventDefault nor run new microtasks.

globalThis|WORKERGLOBAL.onerror   #Similar to DOM. On process exit due to uncaught exceptions.
 = FUNC(ERROREVENT)               #Top-level scope|macrotask is considered async (to support top-level await),
                                  #i.e. only applies to other sync macrotasks.
                                  #Can preventDefault. Can run new microtasks, if preventDefault.
onunhandledrejection              #Similar to DOM. On process exit due to unhandled promises.
 = FUNC(PROMREJEVENT)             #Can preventDefault. Can run new microtasks, if preventDefault.
reportError(VAL)                  #Like DOM

SIGNAL                            #'SIG*'. OS-dependent.
                                  #On Windows, only 'SIGINT|SIGBREAK' supported
Deno.add|removeSignalListener
 (SIGNAL, FUNC())                 #
Deno.kill(PID_NUM[, SIGNAL])     U#Send SIGNAL (def: 'SIGTERM') to a process
                                  #If PID_NUM negative, send to progress group instead
                                  #  - throws on Windows
CHILD_PROCESS.kill([SIGNAL])      #Send SIGNAL (def: 'SIGTERM') to CHILD_PROCESS

Deno.errors.NAME                  #Deno known error classes
Deno.errors.NotSupported          #API not implemented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.hostname()->STR             S#System hostname

Deno.networkInterfaces()
 ->NETWORK_INTERFACE_ARR         S#
NETWORK_INTERFACE.name            #STR, e.g. 'lo', 'wlp113s0', etc.
NETWORK_INTERFACE.family          #'IPv4|6'
NETWORK_INTERFACE.address         #'IP'
NETWORK_INTERFACE.netmask         #STR
NETWORK_INTERFACE.scopeid         #NUM or (if IPv4) null
NETWORK_INTERFACE.cidr            #'IP/NUM'
NETWORK_INTERFACE.mac             #STR. MAC address

Deno.errors.AddrInUse             #Start server on address|port already used
Deno.errors.AddrNotAvailable      #Start server on address|port that does not exist (EADDRNOTAVAIL)

Deno.errors.NotConnected          #Socket connection ended or never started (ENOTCONN)
Deno.errors.ConnectionAborted     #Socket connection aborted (ECONNABORTED)
Deno.errors.ConnectionReset       #Socket connection reset
Deno.errors.ConnectionRefused     #Socket connection refused


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTTP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fetch(...)                      RN#Like DOM
Request
Response
Headers
FormData                          #Like DOM

navigator.userAgent               #Like DOM. 'Deno/X.Y.Z'

caches
CacheStorage
Cache                             #Like DOM, but no: add[All]|matchAll|keys() nor CACHE_STORAGE.match()

REQQ.client                       #HTTP_CLIENT
Deno.createHttpClient([HCOPTS])
 ->HTTP_CLIENT                    #Customize HTTP request option
HTTP_CLIENT                      !#Inherits CLOSER
HTTP_CLIENT.rid                   #RID

ENVVAR HTTP_PROXY                 #Proxy address for HTTP requests (module downloads, fetch)
ENVVAR HTTPS_PROXY                #Proxy address for HTTPS requests (module downloads, fetch)
ENVVAR NO_PROXY                   #Comma-separated list of hosts which do not use a proxy (module downloads, fetch)

HCOPTS.proxy                      #HTTP_PROXY
HTTP_PROXY.url                    #'URL'
HTTP_PROXY.basicAuth
 .username|password               #STR

Deno.errors.Http                  #Too many HTTP redirects

HTTP SERVER ==>                   #See deno http doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FFI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.dlopen(UPATH, FLIBRARY)    F!#Opens a C library.
 ->FDLIB                          #Must be *.so (Linux), *.dylib (macOS), *.dll (Windows)
FLIBRARY.NAME                     #FSTATIC or FFUNCTION. Exported symbol in C library
                                  #NAME is the one used in FDLIB.symbols.NAME

FSTATIC|FFUNCTION.name            #'NAME' (def: 'NAME') used in C library
FSTATIC|FFUNCTION.optional        #BOOL (def: false)
                                  #Whether value might be null. Otherwise, fails if not found

FSTATIC                           #Non-FUNC value
FSTATIC.type                      #FNTYPE

FFUNCTION                         #FUNC value
FFUNCTION.parameters              #FNTYPE_ARR of arguments
FFUNCTION.result                  #FNTYPE
FFUNCTION.nonblocking             #BOOL (def: false)
                                  #Whether async
FFUNCTION.callback                #BOOL (def: false)
                                  #Allow being used as parameter itself

FDLIB                             #Inherits CLOSER
                                  #Ref'd by the process
FDLIB.symbols.NAME                #One of:
                                  #  - NUM|BIGINT|BOOL|DPOINTER: for FSTATIC
                                  #  - (...)->[>]...: for FFUNCTION
                                  #  - null: only if optional

FNTYPE                            #One of:
                                  #  - 'u|i8|16|32' -> NUM
                                  #  - 'u|i64' -> BIGINT
                                  #  - 'f32|64' -> NUM
                                  #  - 'u|isize' -> NUM
                                  #  - 'bool' -> BOOL
                                  #  - 'pointer' -> FPOINTER
                                  #  - 'buffer' -> FPOINTER
                                  #  - 'function' -> FPOINTER
                                  #  - { struct FNTYPE_ARR } -> UINT8ARR

FPOINTER                          #Opaque OBJ representing a memory address
                                  #Underlying type is either:
                                  #  - 32 bits: NUM
                                  #  - 64 bits: NUM if <Number.MAX_SAFE_INTEGER, BIGNUM otherwise
Deno.UnsafePointer.create
 (NUM|BIGINT)->FPOINTER           #
Deno.UnsafePointer.value
 (FPOINTER)->NUM|BIGINT           #
Deno.UnsafePointer.equals
 (FPOINTER, FPOINTER2)->BOOL      #
Deno.UnsafePointer.offset
 (FPOINTER, NUM)->FPOINTER2       #
Deno.UnsafePointer.of(...)
Deno.UnsafeCallback.*
Deno.UnsafeFnPointer.*
Deno.UnsafePointerView.*          #FNPOINTER manipulation. Not documented yet
