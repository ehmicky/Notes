
       
   DNT  
       



ALTERNATIVES ==>                  #  - dnt (preferred): maintained by Deno
                                  #  - deno2node: fewer features

VERSION ==>                       #0.35.0

dnt                               #Transform Deno code to Node code:
                                  #  - transform imports
                                  #  - inject ponyfills
                                  #  - add package.json, including dependencies
                                  #  - run npm install
                                  #  - transpile TypeScript to ESM+CommonJS and *.d.ts
                                  #     - then run type checking
                                  #  - run Deno.test() but in Node

build(OPTS)->>                    #Main function
emptyDir(UPATH)->>                #Like in std

OPTS.entryPoints                  #'PATH'|ENTRYPOINT[_ARR] to main files
ENTRYPOINT.path                   #'PATH'
ENTRYPOINT.kind                   #'export' (programmatic) or 'bin' (executable)
                                  #With 'bin', #!/usr/bin/env node is also added
ENTRYPOINT.name                   #STR. package.json bin.* or export.* key

OPTS.outDir                       #'DIR'
OPTS.esModule                     #BOOL (def: true). Output ESM files
OPTS.scriptModule                 #BOOL (def: true, i.e. both), 'cjs' or 'umd'. Format output for CommonJS

OPTS.importMap                    #'PATH' to IMPORTMAP
OPTS.mappings.IURL                #'OURL'|OURL. Map imports. Also used to generate package.json dependencies
                                  #By def, guessed
                                  #  - including URLs, bare specifiers, esm.sh|skypack
                                  #  - try to resolve to npm module name
                                  #  - if cannot, download them locally
                                  #This can also be used to point to different files for Node.js, allowing Deno|Node-specific logic
OURL.name                         #'MODULE'
OURL.subPath                      #'/PATH'
OURL.version                      #'X.Y.Z'. If undefined, not added to package.json dependencies
OURL.peerDependency               #BOOL (def: false)

OPTS.shims                        #SHIMS
SHIMS.*                           #Inject ponyfills
                                  #Can be BOOL (def: false) or 'dev' (devDependencies)
                                  #Can also use comment // dnt-shim-ignore
SHIMS.deno                        #Deno.* (@deno/shim-deno)
SHIMS.timers                      #setTimeout|Interval() (@deno/shim-timers)
SHIMS.prompts                     #confirm|alert|prompt() (@deno/shim-prompts)
SHIMS.crypto                      #crypto (@deno/shim-crypto)
SHIMS.weakRef                     #WeakRef (@deno/shim-weakref)
SHIMS.blob                        #Blob (buffer package)
SHIMS.domException                #DOMException (domexception package)
SHIMS.undici                      #fetch() (undici package)
SHIMS.webSocket                   #WebSocket (ws package)
SHIMS.custom[Dev]                 #OBJ_ARR. Custom shims [only in tests]

OPTS.package                      #OBJ of properties to set in package.json
OPTS.packageManager               #'npm|yarn|pnpm|PATH'

OPTS.declaration                  #BOOL (def: true) or 'inline'. Create *.d.ts files
                                  #If 'inline', set as siblings
OPTS.compilerOptions              #OBJ of TypeScript configuration
OPTS.skipSourceOutput             #BOOL (def: false). Do not output canonical TypeScript ???
OPTS.typeCheck                    #BOOL (def: true). TypeScript type check on output

OPTS.test                         #BOOL (def: true). Run Deno.test() in Node output, using @deno/shim-deno-test
OPTS.rootTestDir                  #'DIR' to search for tests (def: '.')
OPTS.testPattern                  #'GLOB' of test files (def: like Deno.test)

OPTS.postBuild                    #FUNC()[->>] run at the end
