
                                  ┏━━━━━━━━━━━━┓
                                  ┃   REFLUX   ┃
                                  ┗━━━━━━━━━━━━┛

COMPARISON ==>                    #See Flux doc

VERSION ==>                       #6.0.0
                                  #Flux implementation:
                                  #  - actions: 
                                  #     - like Flux, but with helper functions (firing, listening, filtering, chaining, async)
                                  #  - dispatcher:
                                  #     - no dispatcher, stores listens directly to actions
                                  #     - multiple-action orchestration can be done thanks to complex listener methods ("joins")
                                  #  - stores:
                                  #     - when action dispatched, need to directly modify store state using RFSTORE.setState()
                                  #        - instead of using reducer, i.e. more imperative approach, less functional
                                  #     - are singletons, easy to mock|test
                                  #  - views:
                                  #     - like Flux, listen to stores changes and assign to RFVIEW.state
                                  #        - but cannot change after initialization
                                  #        - and is updated even if RFSTORE.setState() did not change RFSTORE.state
                                  #     - as opposed to Flux, does not separate stores state and views state: are simply merged
                                  #        - although can whitelist which key to merge

                                  ┌────────────┐
                                  │   ACTION   │
                                  └────────────┘

RFACTION(DATA)                    #Fires action
RFACTION.listen(FUNC(DATA)[,THIS])
 ->FUNC()                         #FUNC is removeListener

REFLUX.createAction               #OPT:
([OPT|'ACTION'])->RFACTION        #  - actionName 'ACTION'
                                  #  - sync BOOL: if false (def if children), defer RFACTION(DATA) one tick
                                  #  - preEmit(DATA)[->VAL]: called before action is fired
                                  #  - shouldEmit([VAL])->BOOL: 
                                  #     - called before action is fired, to potentially prevent it
                                  #     - VAL is preEmit() return value or (if none) DATA
                                  #OPT is mixed in RFACTION.*
REFLUX.createActions
('ACTION'ARR|OPT_ARR|{ACTION:OPT})
->{ ACTION: RFACTION ... }        #
RFACTIONS                         #RFACTION_ARR or { ACTION: RFACTION ... }

RFACTION.SUBACTION                #Created by OPT:
                                  #  - children 'SUBACTION'_ARR|OPT_ARR
                                  #  - asyncResult BOOL (def: false): same as children ['completed', 'failed']

ASYNC ==>                         #Pattern is usually:
                                  #  - fire RFACTION(PROMISE)
                                  #  - in RFACTION.listen(), call subaction RFACTION.completed|failed(DATA) on PROMISE resolve|reject
                                 ##The following helpers help with this pattern, providing:
                                 ##  - use REFLUX_MIDWR reflux-promise (1.0.3)
                                 ##  - OPT.asyncResult true
                                 ##  - OPT.sync false
RFACTION.promise(PROMISE)        ##Calls RFACTION.completed|failed on PROMISE resolve|reject
RFACTIN.listenAndPromise(Promise)##Same as RFACTION.listen(FUNC(PROMISE)->RFACTION.promise(PROMISE))
RFACTION(DATA)->PROMISE          ##Makes RFACTION return a PROMISE, resolved|rejected with DATA after RFACTION.completed|failed(DATA)

REFLUX.ActionMethods.*            #Mixed in RFACTION.*

                                  ┌───────────┐
                                  │   STORE   │
                                  └───────────┘

REFLUX.Store                      #Rfstore, to extend (but not instantiate)
Rfstore.singleton                 #RFSTORE is instantiated:
                                  #  - when specified in RFVIEW.store[s]
                                  #  - only once, i.e. reuse a singleton, referenced here
                                  #  - can force instantiation with REFLUX.initStore(Rfstore)

RFSTORE.listenTo                  
(RFACTION, FUNC(DATA))            #Calls FUNC(DATA) on RFACTION(DATA)
RFSTORE.listenToMany(RFACTIONS)   #Calls RFSTORE.[on]ACTION(DATA) on RFACTION(DATA)
RFSTORE.listenables RFACTIONS     #Also listen to children actions, i.e. calls RFSTORE.[on]actionSubaction(DATA) on RFACTION.SUBACTION(DATA)
RFSTORE.stopListeningTo(RFACTION) #
RFSTORE.stopListeningToAll()      #
RFSTOR.hasListener(RFACTION)->BOOL#

RFSTORE.joinTrailing              #Fires FUNC() once each RFACTION(DATA) has been called.
(RFACTION,..., FUNC(DATA,...))    #If RFACTION() fired several times, only last DATA is kept
RFSTORE.joinLeading
(RFACTION,..., FUNC(DATA,...))    #Same but if RFACTION() fired several times, only first DATA is kept
RFSTORE.joinConcat
(RFACTION,..., FUNC(DATA_ARR,...))#Same but all DATA kept
RFSTORE.joinStrict
(RFACTION,..., FUNC(DATA,...))    #Same but if RFACTION() fired several times, throws error

RFSTORE.state                     #OBJ (def: {}). Default should be set in constructor
RFSTORE.setState(OBJ)             #Shallow merges RFSTORE.state

GLOBAL                            #OBJ where OBJ.ID === RFSTORE.state, where Rfstore.id === 'ID'
                                  #If manipulated before RFSTORE creation, when RFSTORE is created, it will use it
REFLUX.GlobalState                #Reference to GLOBAL. Should be used for read-only read
REFLUX.getGlobalState()->GLOBAL   #Deep copy to GLOBAL. Should be used for read with manipulation
REFLUX.setGlobalState(GLOBAL)     #Calls each RFSTORE.setState()


REFLUX.StoreMethods.*             #Mixed in RFSTORE.*

                                  ┌──────────┐
                                  │   VIEW   │
                                  └──────────┘

REFLUX.Component                  #Rfview (child of REACT.Component), to extend
REFLUX.Component.extend(COMPONENT)#Make Rfview inherit from COMPONENT instead of REACT.Component
->Rfview                          #If COMPONENT.componentWill[Un]mount() defined, should call super.componentWill[Un]mount()

RFVIEW.store[s]                   #Rfstore[_ARR], to specify in constructor. Replaced by RFSTORE[_ARR]
                                  #Calls RFVIEW.setState(RFSTORE.state) when any RFSTORE.setState() is called
RFVIEW.storeKeys                  #'VAR'_ARR. Whitelists RFSTORE.state.VAR to copy from any RFSTORE
                                  #Goal: only re-render on useful changes

RFVIEW.mapStoreToState            #Alternative to RFVIEW.store[s]|storeKeys
(Rfstore, FUNC(OBJ)->STATE)       #FUNC is called on RFSTORE.setState(OBJ)
                                  #STATE should not contain references to OBJ

REFLUX.connectFilter              #Same as mapStoreToState() but:
(Rfstore, 'VAR', FUNC(OBJ)->STATE)#  - calls RFVIEW.setState({ VAR: STATE })
                                  #  - is a mixin
REFLUX.connect(Rfstore, 'VAR')    #Same with identity function

                                  ┌───────────────┐
                                  │   UTILITIES   │
                                  └───────────────┘

REFLUX.setEventEmitter
(EVENTEMITTER)                    #Use alternative EventEmitter library (def: 'eventemitter3')
REFLUX.nextTick(NEXTTICK)         #Use alternative setTimeout function (def: setTimeout(..., 0))

REFLUX_MIDWR                      #FUNC(REFLUX)
REFLUX.use(REFLUX_MIDWR)          #

REFLUXPROMISE(PROMISE)            #REFLUX_MIDWR
