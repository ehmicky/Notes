
                     
   TYPESCRIPT_ESLINT  
                     



VERSION ==>                       #6.7.2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/eslint-plugin  #ESLint plugin to lint TypeScript, to add to CONF.plugins

CONF.parser                       #Must be '@typescript-eslint/parser' (see its doc)
CONF.parserOptions                #@typescript-eslint/parser OPTS (see its doc)
                                  #Important ones:
                                  #  - project, tsconfigRootDir: needed for type information
                                  #  - sourceType, ecmaVersion, ecmaFeatures: like ESLint default parser

typescript                        #Must be installed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CUSTOM PLUGIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/utils          #Utilities to write plugins
@typescript-eslint/rule-tester    #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TSLINT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TSLint                            #Previous form of @typescript-eslint, which was a fork of ESLint instead.
                                  #Deprecated.
@typescript-eslint/
 eslint-plugin-tslint             #Helps migrating from TSLint


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RECOMMENDED RULES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


plugin:@typescript-eslint/base    #Only:
                                  #  - plugins ['@typescript-eslint']
                                  #  - parser '@typescript-eslint/parser'
                                  #  - parserOptions.sourceType 'module'
plugin:@typescript-eslint/        #ESLint (not @typescript-eslint) rules that make sense when using TypeScript
 eslint-recommended               #  - disabled because already handled by TypeScript
                                  #  - enabled because provides better typing (e.g. `prefer-const`)
plugin:@typescript-eslint/        #Sets of recommended rules.
 recommended                      #Inherits base + eslint-recommended
plugin:@typescript-eslint/        #Sets of recommended rules that require CONF.parserOptions.project
 recommended-type-checked         #Inherits base + recommended
plugin:@typescript-eslint/
 disable-type-checked             #Sets of recommended rules that require CONF.parserOptions.project, but sets to `off`
plugin:@typescript-eslint/strict  #Sets of stricter recommended rules.
                                  #Inherits base + recommended
plugin:@typescript-eslint         #Sets of rules related to style
 /stylistic                       #Inherits base + eslint-recommended
plugin:@typescript-eslint
 /stylistic-type-checked          #Like recommended-type-checked but with stylistic
plugin:@typescript-eslint/all     #All rules. Not recommended since some conflict with each other.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXTENSION RULES ==>               #The following rules are the same as core ESLint rules, but fixed to work with TypeScript.
                                  #The related core ESLint rules should be disabled.

COMMENTS ==>
lines-around-comments             #Adds OBJ:
                                  #  - allowInterfaceStart|End BOOL (def: false)
                                  #  - allowTypeStart|End BOOL (def: false)

BLANK LINES ==>                   #
padding-line-between-statements
 ...                              #Adds OBJ.prev|next 'interface|type'
lines-between-class-members ...   #Adds OBJ:
                                  #  - exceptAfterOverload BOOL (def: true): ignore overloaded methods

INDENTATION ==>                   #
indent ...                        #

BRACES ==>                        #
brace-style ...                   #

SPACES ==>                        #
block-spacing ...                 #
object-curly-spacing ...          #
space-before-blocks ...           #
comma-spacing ...                 #
key-spacing ...                   #
keyword-spacing ...               #
space-infix-ops ...               #
func-call-spacing ...             #
space-before-function-paren ...   #

SEMICOLONS ==>                    #
semi ...                          #
no-extra-semi ...                 #

STATEMENTS ==>                    #
no-unused-expressions ...         #

PARENTHESIS ==>                   #
no-extra-parens ...               #

REFERENCING ==>                   #
no-unused-vars ...                #
no-redeclare ...                  #Adds OBJ:
                                  #  - ignoreDeclarationMerge BOOL (def: false): allow declaration merges
no-shadow ...                     #Adds OBJ:
                                  #  - ignoreTypeValueShadow BOOL (def: false): allow VAL and TYPE to have same name
                                  #  - ignoreFunctionTypeParameterNameValueShadow BOOL (def: false): allow VAL and
                                  #    FUNC_TYPE's argument to have same name
no-use-before-define ...          #Adds OBJ:
                                  #  - enums|typedefs BOOL (def: true)
                                  #  - ignoreTypeReferences BOOL (def: true): ignore TYPEs

DECLARATIONS ==>                  #
no-magic-numbers ...              #Adds OBJ:
                                  #  - ignoreEnums BOOL (def: false)
                                  #  - ignoreNumericLiteralTypes BOOL (def: false)
                                  #  - ignoreReadonlyClassProperties BOOL (def: false)
                                  #  - ignoreTypeIndexes BOOL (def: false): ignore TYPE[NUM]

ASSIGNMENTS ==>                   #
init-declarations ...             #

EXCEPTIONS ==>                    #
no-throw-literal ...              #Adds OBJ:
                                  #  - allowThrowingAny|Unknown BOOL (def: false): allow throw VAL with type any|unknown

FUNCTIONS ==>                     #
no-loop-func ...                  #
default-param-last ...            #
no-empty-function ...             #Adds OBJ.allow: 'private|protected-constructors', 'decoratedFunctions', 'overrideMethods'

OBJECTS ==>                       #
dot-notation ...                  #Adds OBJ:
                                  #  - allowIndexSignaturePropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if index signature
                                  #     - always true if TSCONF.noPropertyAccessFromIndexSignature true
                                  #  - allowProtected|PrivateClassPropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if protected|private class field

CLASS ==>                         #
no-useless-constructor ...        #
no-invalid-this ...               #
class-methods-use-this ...        #Adds OBJ:
                                  #  - ignoreOverrideMethods BOOL (def: false): ignore `override` methods
                                  #  - ignoreClassesThatImplementAnInterface BOOL (def: false): ignore CLASSs implementing an INTERFACE
no-dupe-class-members ...         #

ARRAYS ==>                        #
comma-dangle ...                  #Adds OBJ:
                                  #  - enums|generics|tuples STR: same but only for those
no-array-constructor ...          #

STRING ==>                        #
quotes ...                        #

NUMBER ==>                        #
no-loss-of-precision ...          #

ASYNC ==>                         #
require-await ...                 #
return-await ...                  #Named "return-await" while core rule is "no-return-await", because default value is inverted
                                  #STR: 'always' (def), 'never', 'in-try-catch' (inside try, and inside catch if there is a finally)

BLACKLIST ==>                     #
no-restricted-imports ...         #Adds OBJ:
                                  #  - allowTypeImports BOOL (def: false): include `import type`

TO AVOID ==>                      #
no-implied-eval ...               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMMENTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ban-ts-comment [OBJ]              #Forbid @ts-* comments. OBJ:
                                  #  - ts-ignore (def: true): forbid @ts-ignore. Can be:
                                  #     - BOOL
                                  #     - 'allow-with-description'
                                  #     - OBJ: descriptionFormat 'REGEXP': allow with description matching REGEXP
                                  #  - ts-nocheck (def: true)
                                  #  - ts-check (def: false)
                                  #  - ts-expect-error (def: 'allow-with-description')
                                  #  - minimumDescriptionLength NUM (def: 3)
prefer-ts-expect-error            #Prefer @ts-expect-error over @ts-ignore

ban-tslint-comment                #Forbid TSLint-specific comments


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          WHITESPACES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


type-annotation-spacing [OBJ]     #Spaces around TYPE-specific tokens.
                                  #OBJ:
                                  #  - before BOOL
                                  #  - after BOOL
                                  #  - overrides.TYPE.before|after BOOL: same for specific TYPE among:
                                  #     (def: before true, after true)
                                  #     - arrow: (...) => ...
                                  #     (def: before false, after true)
                                  #     - colon: all of the ones below
                                  #     - variable: VAR: TYPE
                                  #     - property: { VAR: TYPE, ... }
                                  #     - parameter: (ARG: TYPE)
                                  #     - returnType: (...): TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SEMICOLONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


member-delimiter-style [OBJ]      #Delimiter at end of each OBJ member.
                                  #OBJ:
                                  #  - multiline:
                                  #     - delimiter 'semi' (def), 'comma' or 'none'
                                  #     - requireLast BOOL (def: true): trailing
                                  #  - singleline:
                                  #     - delimiter 'semi' (def) or 'comma'
                                  #     - requireLast BOOL (def: false): trailing
                                  #  - overrides.TYPE.delimiter|requireLast: for specific TYPE 'interface|typeLiteral'
                                  #  - multilineDetection: multiline if:
                                  #     - 'brackets' (def): there is any newline
                                  #     - 'last-member': last member on last line as end bracket


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DECLARATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


typedef [OBJ]                     #Require type declaration. OBJ (def: false for all):
                                  #  - variableDeclaration BOOL: const VAR: TYPE = VAL
                                  #  - variableDeclarationIgnoreFunction BOOL: const NON_FUNC: TYPE = VAL
                                  #  - objectDestructuring BOOL: const {...}: OBJ_TYPE = OBJ
                                  #  - arrayDestructuring BOOL: const [...]: TUPLE_TYPE = ARR
                                  #  - parameter BOOL: function(ARG: TYPE): ...
                                  #  - arrowParameter BOOL: (ARG: TYPE) => ...
                                  #  - memberVariableDeclaration BOOL: class { PROP: TYPE, ... }
                                  #  - propertyDeclaration BOOL: type|interface ... { PROP: TYPE, ... }
no-inferrable-types [OBJ]         #Do not declare type of a variable|parameter if can be inferred.
                                  #OBJ:
                                  #  - ignoreParameters BOOL (def: false): ignore parameters
                                  #  - ignoreProperties BOOL (def: false): ignore OBJ properties


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSIGNMENTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-dynamic-delete                 #Prefer delete OBJ.VAR over delete OBJ[STR]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NAMING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


naming-convention [OBJ...]        #Variable names.
                                  #OBJ_ARR:
                                  #  (validation)
                                  #  - format STR_ARR
                                  #     - 'camelCase|PascalCase|snake_case|UPPER_CASE'
                                  #     - 'strictCamelCase|StrictPascalCase': same but forbid consecutive uppercase
                                  #     - null
                                  #  - leading|trailingUnderscore: 'forbid', 'require[Double]' (single|double), 'allow[Single|Double]' (both|single|double)
                                  #  - prefix|suffix STR_ARR: name must start|end with it
                                  #  - custom:
                                  #     - regex 'REGEXP'
                                  #     - match BOOL (def: true): if false, negate
                                  #  (filtering)
                                  #  - selector SELECTOR[_ARR] among:
                                  #     - 'default': all
                                  #     ('variableLike')
                                  #     - 'variable', 'function', 'parameter'
                                  #     ('memberLike')
                                  #     - 'accessor', 'enumMember', 'method', 'parameterProperty', 'typeParameter'
                                  #     ('typeLike')
                                  #     - 'class', 'enum', 'interface', 'typeAlias', 'typeParameter'
                                  #     ('property')
                                  #     - 'classProperty', 'objectLiteralProperty', 'typeProperty'
                                  #     ('method')
                                  #     - 'classMethod', 'objectLiteralMethod', 'typeMethod'
                                  #  - modifiers STR_ARR among:
                                  #     - 'const': const VAR
                                  #     - 'destructured'
                                  #     - 'global'
                                  #     - 'exported'
                                  #     - 'unused'
                                  #     - 'requiresQuotes': VAR name requiring quotes to be valid
                                  #     - 'public|private|protected'
                                  #     - 'abstract|override|readonly|static'
                                  #     - 'async'
                                  #  - types STR_ARR: 'boolean|string|number|array|function': value type
                                  #  - filter OBJ (like `custom`) or 'REGEXP'
                                  #Default:
                                  #  - format 'camelCase', leading|trailingUnderscore 'allow'
                                  #  - selector 'variable', format 'camelCase|UPPER_CASE', leading|trailingUnderscore 'allow'
                                  #  - selector 'typeLike', format 'PascalCase'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPECASTING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-base-to-string [OBJ]           #No String() nor toString() (implicit or not) on OBJs.
                                  #OBJ:
                                  #  - ignoredTypeNames 'TYPE'_ARR (def: ['Error', 'RegExp', 'URL', 'URLSearchParams'])
restrict-template-expressions     #No `${...}` on non-STRs
 [OBJ]                            #OBJ:
                                  #  - allowNumber BOOL (def: true)
                                  #  - allowBoolean BOOL (def: false)
                                  #  - allowNullish BOOL (def: false): null|undefined
                                  #  - allowNever BOOL (def: false): never
                                  #  - allowAny BOOL (def: false): any (not unknown)
                                  #  - allowRegExp BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-unnecessary-                   #Prefer BOOL or !BOOL over BOOL ===|!== true|false
 boolean-literal-compare [OBJ]    #OBJ:
                                  #  - allowComparingNullableBooleansToTrue|False BOOL (def: true):
                                  #    if false, forbid BOOL|undefined|null ===|!== true|false
no-unnecessary-condition [OBJ]    #Avoid:
                                  #  - `if|while (VAL)` or `&& || VAL` if always evaluate to either true or false
                                  #  - OBJ?.VAR if always|never null|undefined
                                  #OBJ:
                                  #  - allowConstantLoopConditions BOOL (def: false): allow `while (true)`
                                  #  - allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing BOOL: if false (def), require --strictNullChecks

strict-boolean-expressions [OBJ]  #Forbid non-BOOL|never where BOOL is expected: !VAL, ? :, if|while (...), || && (left-side only)
                                  #OBJ:
                                  #  - allowString BOOL (def: true): ignore STR
                                  #  - allowNumber BOOL (def: true): ignore NUM
                                  #  - allowNullableObject BOOL (def: true): ignore OBJ|FUNC|SYM|null|undefined
                                  #  - allowNullableString BOOL (def: false): ignore STR|null|undefined
                                  #  - allowNullableNumber BOOL (def: false): ignore NUM|null|undefined
                                  #  - allowNullableBoolean BOOL (def: false): ignore BOOL|null|undefined
                                  #  - allowNullableEnum BOOL (def: false): ignore ENUM|null|undefined
                                  #  - allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing BOOL: if false (def), require --strictNullChecks

sort-type-constituents [OBJ]      #Sort & | TYPE chains
                                  #OBJ:
                                  #  - checkIntersections|Unions BOOL (def: true)
                                  #  - groupOrder STR_ARR among (following is def order):
                                  #     - 'named': TYPE, TYPE['VAR'], TYPE[], TYPE<TYPE2>
                                  #     - 'keyword': any, string, etc.
                                  #     - 'operator': keyof|typeof|readonly TYPE
                                  #     - 'literal': 1, true, etc.
                                  #     - 'function': FUNC_TYPE
                                  #     - 'import': import('...')
                                  #     - 'conditional': ... ? ... : ...
                                  #     - 'object': OBJ_TYPE
                                  #     - 'tuple': TUPLE_TYPE
                                  #     - 'intersection': ... & ...
                                  #     - 'union' ... | ...
                                  #     - 'nullish': null|undefined

prefer-nullish-coalescing [OBJ]   #Prefer ?? over || &&, when possible
                                  #Also for ??= over ||= &&=
                                  #Requires --strictNullChecks
                                  #OBJ:
                                  #  - ignoreTernaryTests BOOL (def: true): ignore VAR === null|undefined ? ... : ...
                                  #  - ignoreConditionalTests BOOL (def: true): ignore inside `if|while (...)`
                                  #  - ignoreMixedLogicalExpressions BOOL (def: true): ignore when inside a wider chain of && ||
                                  #  - ignorePrimitives[.boolean|string|number|bigint] BOOL (def: false): ignore BOOL|STR|NUM|BIGINT
                                  #  - allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing BOOL: if false (def), require --strictNullChecks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRUCTURES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prefer-for-of                     #Prefer `for (... of ...)` over `for (...; ...; ...)`
no-for-in-array                   #Avoid for (const VAR in ARR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SWITCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


switch-exhaustiveness-check       #If switch (VAL) and VAL type is UTYPE, must use either `default` case, or one case for each possible type


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


method-signature-style [STR]      #Methods:
                                  #  - 'property' (def): { FUNC: (...) => ... } (better behavior with --strictFunctionTypes)
                                  #  - 'method': { FUNC(...): ... }
prefer-function-type              #Prefer `(...) => ...` over `{ (...): ... }` for FUNC_TYPE

explicit-function-return-type     #Require return type on FUNCs.
 [OBJ]                            #OBJ:
                                  #  - allowExpressions BOOL (def: false): ignore FUNC expressions (as opposed to declarations)
                                  #  - allowTypedFunctionExpressions BOOL (def: true): ignore if FUNC expression is assigned a FUNC_TYPE
                                  #    through type assertion or declaration
                                  #  - allowHigherOrderFunctions BOOL (def: true): ignore FUNC returning another FUNC
                                  #  - allowIIFEs BOOL (def: true): ignore IIFEs
                                  #  - allowFunctionsWithoutTypeParameters BOOL (def: true): ignore non-generic FUNCs
                                  #  - allowDirectConstAssertionInArrowFunctions BOOL (def: true): ignore FUNC returning as `as const` value
                                  #  - allowConciseArrowFunctionExpressionsStartingWithVoid BOOL (def: false): ignore FUNC returning void VAL
                                  #  - allowedNames 'FUNC'_ARR (def: [])
explicit-module-boundary-types    #Require argument and return types on exported FUNCs
 [OBJ]                            #OBJ:
                                  #  - allowTypedFunctionExpressions|allowHigherOrderFunctions|allowDirectConstAssertionInArrowFunctions|allowedNames:
                                  #    like explicit-function-return-type
                                  #  - allowArgumentsExplicitlyTypedAsAny BOOL (def: false): allow `any`

adjacent-overload-signatures      #Overloaded FUNCs must follow each other
unified-signatures [OBJ]          #Avoid function overloading.
                                  #OBJ:
                                  #  - ignoreDifferentlyNamedParameters BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OBJECTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


consistent-type-definitions [STR] #OBJ types, when simple:
                                  #  - 'interface' (def): interface OBJ {...}
                                  #  - 'type': type OBJ = {...}
consistent-indexed-object-style   #Index signatures:
 [STR]                            #  - 'record' (def): Record<...>
                                  #  - 'index-signature': { [KEY: ...]: ... }

no-empty-interface [OBJ]          #Forbid empty interface
                                  #OBJ:
                                  #  - allowSingleExtends BOOL (def: false): allow when `extends` is also used

member-ordering [OBJ]             #Sort OBJ members.
                                  #OBJ:
                                  #  - default:
                                  #     - OBJ2:
                                  #        - memberTypes 'ATTR-...'_ARR
                                  #           - ATTR can be (in that order) (def follows the following order):
                                  #              - 'public|protected|private|#private' or nothing: visibility
                                  #              - 'static|instance|abstract|decorated' or nothing
                                  #              - '[call|readonly-]signature|[readonly-]field|initialization|constructor|get|set|method|set' or nothing
                                  #        - optionalityOrder 'optional-first' or 'required-first'
                                  #        - order: sorting within each memberType group
                                  #           - 'alphabetically[-case-insensitive]'
                                  #           - 'natural[-case-insensitive]': alphabetical + number sorting friendly
                                  #           - 'as-written': no sorting
                                  #     - STR[_ARR]: same as { memberTypes STR_ARR }
                                  #     - 'never': no sorting
                                  #  - classes|classExpressions|interfaces|typeLiterals: same for only that type

prefer-optional-chain [OBJ]       #Prefer ?. over && ||
                                  #OBJ:
                                  #  - allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing BOOL (def: false)
                                  #    allow autofixes that changes the return TYPE
                                  #  - checkAny|Unknown|String|Number|Boolean|BigInt BOOL (def: false): when not using OBJ
                                  #  - requireNullish BOOL (def: false): OBJ must allow null and|or undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CLASS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


unbound-method [OBJ]              #Do not call OBJ.FUNC without `OBJ.`, i.e. without `this` unless FUNC either:
                                  #  - is arrow FUNC
                                  #  - declares `this: void` parameter
                                  #OBJ:
                                  #  - ignoreStatic BOOL (def: false): ignore static methods
no-this-alias [OBJ]               #Avoid const VAR = this
                                  #OBJ:
                                  #  - allowDestructuring BOOL (def: true): allow const { ... } = this
                                  #  - allowedNames 'FUNC'_ARR
prefer-return-this-type           #Prefer FUNC return type to be `this` (when it is `this`) as opposed to `CLASS`

explicit-member-accessibility     #Require using `public|protected|private` on class fields.
 [OBJ]                            #OBJ:
                                  #  - accessibility:
                                  #     - 'explicit' (def): required
                                  #     - 'no-public': forbid `public`
                                  #     - 'off': optional
                                  #  - overrides.TYPE 'explicit|no-public|off':
                                  #     - for specific TYPE among: 'accessors|constructors|methods|properties|parameterProperties'
                                  #  - ignoredMethodNames 'FUNC'_ARR (def: [])
prefer-readonly [OBJ]             #`private` class property must be `readonly` if not modified.
                                  #OBJ:
                                  #  - onlyInlineLambdas BOOL (def: false): only if property value is FUNC
class-literal-property-style [STR]#Readonly class fields:
                                  #  - 'getters' (def): QUAL get(...){...}
                                  #  - 'fields': QUAL readonly VAR = VAL
                                  #Only checks literal VALs, and not OBJ|ARRs|FUNCs
parameter-properties [OBJ]        #Constructor parameter properties: constructor(QUAL VAR)
                                  #OBJ:
                                  #  - prefer 'class-property' (def, avoid them) or 'parameter-property' (prefer them)
                                  #  - allow 'private|protected|public [readonly]'_ARR (def: []): ignore those

no-unsafe-declaration-merging     #Avoid interface merging between an interface and a CLASS
no-extraneous-class [OBJ]         #Avoid classes with only static members.
                                  #OBJ:
                                  #  - allowStaticOnly BOOL: if false (def), forbid only static members
                                  #  - allowEmpty BOOL (def: false): ignore empty classes
                                  #  - allowWithDecorator BOOL (def: false): ignore if there is a decorator
                                  #  - allowConstructorOnly BOOL (def: false): ignore if there is only a constructor
no-misused-new                    #Avoid class method called 'new', or interface method called 'constructor'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ARRAYS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


array-type [OBJ]                  #How to write ARR_TYPEs. OBJ:
                                  #  - default:
                                  #     - 'array' (def): TYPE[]
                                  #     - 'generic': Array<...>
                                  #     - 'array-simple': TYPE[] for simple types, Array<...> for complex
                                  #  - readonly (def: same as 'default'): same but for readonly TYPE[] vs ReadonlyArray<...>

prefer-includes                   #Prefer STR|ARR.includes() over STR|ARR.indexOf(...) ===|!== -1
prefer-reduce-type-parameter      #Avoid ARR.reduce(FUNC, VAL) with VAL having type empty {}|[]
require-array-sort-compare [OBJ]  #Require ARR.sort() to have a FUNC argument.
                                  #OBJ:
                                  #  - ignoreStringArrays BOOL (def: false): ignore if STR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


restrict-plus-operands [OBJ]      #Forbid NUM|BIGINT + STR or NUM + BIGINT
                                  #OBJ:
                                  #  - allowAny BOOL (def: false): allow any + ...
                                  #  - allowNullish|Boolean|NumberAndString|RegExp BOOL (def: false)
                                  #  - skipCompoundAssignments BOOL (def: false): ignore +=
prefer-string-starts-ends-with    #Prefer STR.startsWith|endsWith() over equivalent STR.* methods


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGEXP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prefer-regexp-exec                #Prefer REGEXP.exec() over STR.match()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


await-thenable                    #Forbid await on non-PROMISE
no-misused-promises [OBJ]         #Forbid using `PROMISE` where `await PROMISE` if probably meant.
                                  #OBJ:
                                  #  - checksConditionals BOOL (def: true): e.g. in `if (PROMISE)`
                                  #  - checksSpread BOOL (def: true): in ...PROMISE
                                  #  - checksVoidReturn
                                  #     - BOOL (def: true): returning a PROMISE from a FUNC with `void` return type
                                  #     - or OBJ2: when PROMISE is:
                                  #        - arguments BOOL (def: true): passed as an argument
                                  #        - attributes BOOL (def: true): passed as JSX attribute
                                  #        - properties BOOL (def: true): an object method
                                  #        - returns BOOL (def: true): returned
                                  #        - variables BOOL (def: true): assigned to variable
promise-function-async [OBJ]      #FUNC returning a PROMISE must be `async`
                                  #OBJ:
                                  #  - allowAny BOOL (def: true): if false, FUNC returning any|unknown must be async
                                  #  - allowedPromiseNames 'VAR'_ARR (def: []): consider those variable PROMISEs
                                  #  - checkArrowFunctions BOOL (def: true)
                                  #  - checkFunctionExpression BOOL (def: true)
                                  #  - checkFunctionDeclarations BOOL (def: true)
                                  #  - checkMethodDeclarations BOOL (def: true)
no-floating-promises [OBJ]        #Avoid PROMISE that is not returned, awaited or calling catch|finally(), because rejection would not be handled.
                                  #OBJ:
                                  #  - ignoreVoid BOOL (def: false): ignore `void VAL`
                                  #  - ignoreIIFE BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


consistent-type-exports [OBJ]     #Prefer `export type` or `export { type ... }` over `export`.
                                  #OBJ:
                                  #  - fixMixedExportsWithInlineTypeSpecifier BOOL (def: false): allow using --fix with `export { type ... }`
consistent-type-imports [OBJ]     #Prefer `import type` or `import { type ... }` over `import`.
                                  #OBJ:
                                  #  - prefer '[no-]type-imports' (def: 'type-imports'): whether to prefer or not
                                  #  - fixStyle: how to --fix when mixed with non-type imports
                                  #     - 'separate-type-imports' (def): separate `import` statements
                                  #     - 'inline-type-imports': import { type ... }
                                  #  - disallowTypeAnnotations BOOL (def: true): forbid import(...).VAR
no-import-type-side-effects       #Prefer `import type { A, B }` over `import { type A, type B }`

no-require-imports                #Prefer import over require()
no-var-requires                   #Prefer `import VAR = require(...)` over `var VAR = require(...)`

no-useless-empty-export           #Avoid empty `export {}` if there is another `export` in the file

triple-slash-reference [OBJ]      #Whether to allow /// <reference VAR... where VAR is according to OBJ:
                                  #  - lib 'never' or 'always' (def)
                                  #  - path 'never' (def) or 'always'
                                  #  - types:
                                  #     - 'never'
                                  #     - 'prefer-import' (def): only error if used together with `import` for same module
                                  #     - 'always'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BLACKLIST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ban-types [OBJ]                   #Forbid specific types.
                                  #OBJ:
                                  #  - types OBJ2:
                                  #     - key is type name
                                  #     - value:
                                  #        - OBJ:
                                  #           - message STR: error message
                                  #           - fixWith 'CODE': replace with --fix
                                  #           - suggest STR_ARR
                                  #        - STR: same as { message STR }
                                  #        - false: undo default value
                                  #  - extendDefaults BOOL (def: false): merge default OBJ instead of overridding it
                                  #Default:
                                  #  - use string|boolean|number|symbol|bigint|object instead of String|Boolean|Number|Symbol|BigInt|Object
                                  #  - use (...)=>... instead of Function
                                  #  - use object or Record instead of empty {}


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       TYPE DECLARATION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-redundant-type-constituents    #Avoid TYPE | TYPE2 or TYPE & TYPE2 which can reduced to just TYPE
no-duplicate-type-constituents    #Avoid TYPE | TYPE or TYPE & TYPE
                                  #OPTS:
                                  #  - ignoreIntersections BOOL: if false (def), for &
                                  #  - ignoreUnions BOOL: if false (def), for |


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BASE TYPES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-explicit-any [OBJ]             #Forbid `any` as an explicit type (as opposed to --noImplicitAny which is for implicit)
                                  #OBJ:
                                  #  - fixToUnknown BOOL (def: false): make --fix to `unknown`
                                  #  - ignoreRestArgs BOOL (def: false): ignore in variadic parameters
no-unsafe-assignment              #Avoid VAR = VAL when VAL is `any` or TYPE<any>
no-unsafe-member-access           #Avoid OBJ.VAR when OBJ is `any`
no-unsafe-argument                #Avoid FUNC(VAL) when VAL is `any` or TYPE<any>
no-unsafe-call                    #Avoid calling FUNC() when FUNC is `any`
no-unsafe-return                  #Avoid return VAL when VAL is `any`, `any[]` or TYPE<any>


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      UNDEFINED/NULL/VOID      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-non-null-assertion             #Avoid VAL!
non-nullable-type-assertion-style #Prefer VAL! over type assertion, when possible
no-confusing-non-null-assertion   #Avoid VAL! followed by ==|===
no-extra-non-null-assertion       #Forbid VAL!! (second ! is noop)
no-non-null-asserted-
 nullish-coalescing               #Avoid VAL! ?? ...
no-non-null-asserted-
 optional-chain                   #Avoid OBJ?.VAR!

no-invalid-void-type [OBJ]        #Avoid `void` type except as FUNC return type
                                  #OBJ:
                                  #  - allowAsThisParameter BOOL (def: false): allow as `this` parameter
                                  #  - allowInGenericTypeArguments BOOL (def: true) or 'TYPE'_ARR: allow as TYPE<void>
no-confusing-void-expression      #FUNC with `void` return type should not return values, nor should their return value be assigned
                                  #OBJ:
                                  #  - ignoreArrowShorthand BOOL (def: false): allow arrow FUNC with `void` return type to
                                  #    still return a value, to avoid the additional {}
                                  #  - ignoreVoidOperator BOOL (def: false): allow when returning void VAL
no-meaningless-void-operator [OBJ]#Avoid void FUNC() when FUNC() returns undefined
                                  #OBJ:
                                  #  - checkNever BOOL (def: false): also when FUNC() returns never


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ENUM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prefer-enum-initializers          #Avoid default value when initializing ENUM members
prefer-literal-enum-member [OBJ]  #Prefer literal values over VAR|EXPR when initializing ENUM members
                                  #OBJ:
                                  #  - allowBitwiseExpressions BOOL (def: false): allow << >> etc.
no-duplicate-enum-values          #Forbid ENUM with same value
no-mixed-enums                    #Forbid ENUM with both NUM and STR values
no-unnecessary-qualifier          #Use VAR instead of ENUM|NAMESPACE.VAR when already inside ENUM|NAMESPACE

no-unsafe-enum-comparison         #Forbid ENUM comparison with non-ENUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           READONLY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prefer-as-const                   #Prefer `as const` over `as LITERAL_TYPE`
prefer-readonly-parameter-types   #Use `readonly` on FUNC parameters or OBJ properties if not modified
 [OBJ]                            #OBJ:
                                  #  - ignoreInferredTypes BOOL (def: false): ignore FUNC parameter without an explicit type
                                  #  - treatMethodsAsReadonly BOOL (def: false): ignore { FUNC(): ... } (but not { FUNC: (...) => ... })
                                  #  - checkParameterProperties BOOL (def: true): ignore `constructor(QUAL VAR)`
                                  #  - allow 'VAR'_ARR or OBJ_ARR:
                                  #     - name 'VAR'
                                  #     - from 'file|lib|package'
                                  #     - path 'PATH' (if from 'file')
                                  #     - package 'MODULE' (if from 'package')
                                  #        - if from 'lib', VAR is also MODULE, i.e. default export


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


consistent-generic-constructors   #Instantiating generic FUNC calls:
 [STR]                            #  - 'constructor' (def): new FUNC<...>(...)
                                  #  - 'type-annotation': const VAR: TYPE<...> = new FUNC(...)

no-unnecessary-type-arguments     #Avoid TYPE<TYPE2> when TYPE2 is already the default generic type
no-unnecessary-type-constraint    #Avoid TYPE<TYPE2 extends any|unknown> declaration


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TYPE ASSERTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


consistent-type-assertions [OBJ]  #Type assertions:
                                  #  - assertionStyle:
                                  #     - 'as' (def): VAL as TYPE
                                  #     - 'angle-bracket': <TYPE>VAL
                                  #     - 'never': always forbidden
                                  #  - objectLiteralTypeAssertions:
                                  #     - 'never': prefer `const OBJ: TYPE = VAL` instead of `const OBJ = VAL as TYPE`, except `as any`
                                  #     - 'allow-as-parameter': like 'allow', but only as FUNC call argument
                                  #     - 'allow' (def)

no-unnecessary-type-assertion     #Avoid type assertion that does not change the already infered type
 [OBJ]                            #OBJ:
                                  #  - typesToIgnore 'TYPE'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           NAMESPACE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-namespace [OBJ]                #Avoid namespaces, and `module` without `declare`
                                  #OBJ:
                                  #  - allowDeclarations BOOL (def: false): allow `declare namespace`
                                  #  - allowDefinitionFiles BOOL (def: true): allow within ambient file
prefer-namespace-keyword          #Prefer `namespace` over non-declare `module`
