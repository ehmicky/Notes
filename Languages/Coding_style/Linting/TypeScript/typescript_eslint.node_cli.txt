
                     
   TYPESCRIPT_ESLINT  
                     



VERSION ==>                       #5.45.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/eslint-plugin  #ESLint plugin to lint TypeScript

CONF.parser                       #Must be '@typescript-eslint/parser' (see its doc)
CONF.parserOptions                #@typescript-eslint/parser OPTS (see its doc)
                                  #Important ones:
                                  #  - project, tsconfigRootDir: needed for type information
                                  #  - sourceType, ecmaVersion, ecmaFeatures: like ESLint default parser

typescript                        #Must be installed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CUSTOM PLUGIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/utils          #Utilities to write plugins
                                  #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TSLINT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TSLint                            #Previous form of @typescript-eslint, which was a fork of ESLint instead.
                                  #Deprecated.
@typescript-eslint/
 eslint-plugin-tslint             #Helps migrating from TSLint


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RECOMMENDED RULES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


plugin:@typescript-eslint/base    #Only:
                                  #  - plugins ['@typescript-eslint']
                                  #  - parser '@typescript-eslint/parser'
                                  #  - parserOptions.sourceType 'module'
plugin:@typescript-eslint/        #ESLint (not @typescript-eslint) rules that make sense when using TypeScript
 eslint-recommended               #  - disabled because already handled by TypeScript
                                  #  - enabled because provides better typing (e.g. `prefer-const`)
                                  #Inherits @typescript-eslint/base
plugin:@typescript-eslint/        #Sets of recommended rules.
 recommended                      #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/
 recommended-requiring-type-      #Sets of recommended rules that require CONF.parserOptions.project
 checking                         #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/strict  #Sets of stricter recommended rules.
                                  #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/all     #All rules. Not recommended since some conflict with each other.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXTENSION RULES ==>               #The following rules are the same as core ESLint rules, but fixed to work with TypeScript.
                                  #The related core ESLint rules should be disabled.

BLANK LINES ==>                   #
padding-line-between-statements
 ...                              #Adds OBJ.prev|next 'interface|type'
lines-between-class-members ...   #Adds OBJ:
                                  #  - exceptAfterOverload BOOL (def: true): ignore overloaded methods

INDENTATION ==>                   #
indent ...                        #

BRACES ==>                        #
brace-style ...                   #

SPACES ==>                        #
object-curly-spacing ...          #
space-before-blocks ...           #
comma-spacing ...                 #
keyword-spacing ...               #
space-infix-ops ...               #
func-call-spacing ...             #
space-before-function-paren ...   #

SEMICOLONS ==>                    #
semi ...                          #
no-extra-semi ...                 #

STATEMENTS ==>                    #
no-unused-expressions ...         #

PARENTHESIS ==>                   #
no-extra-parens ...               #

REFERENCING ==>                   #
no-unused-vars ...                #
no-redeclare ...                  #Adds OBJ:
                                  #  - ignoreDeclarationMerge BOOL (def: false): allow declaration merges
no-shadow ...                     #Adds OBJ:
                                  #  - ignoreTypeValueShadow BOOL (def: false): allow VAL and TYPE to have same name
                                  #  - ignoreFunctionTypeParameterNameValueShadow BOOL (def: false): allow VAL and
                                  #    FUNC_TYPE's argument to have same name
no-use-before-define ...          #Adds OBJ:
                                  #  - enums|typedefs BOOL (def: true)
                                  #  - ignoreTypeReferences BOOL (def: true): ignore TYPEs

DECLARATIONS ==>                  #
no-magic-numbers ...              #Adds OBJ:
                                  #  - ignoreEnums BOOL (def: false)
                                  #  - ignoreNumericLiteralTypes BOOL (def: false)
                                  #  - ignoreReadonlyClassProperties BOOL (def: false)
                                  #  - ignoreTypeIndexes BOOL (def: false): ignore TYPE[NUM]

ASSIGNMENTS ==>                   #
init-declarations ...             #

EXCEPTIONS ==>                    #
no-throw-literal ...              #Adds OBJ:
                                  #  - allowThrowingAny|Unknown BOOL (def: false): allow throw VAL with type any|unknown

FUNCTIONS ==>                     #
no-loop-func ...                  #
default-param-last ...            #
no-empty-function ...             #Adds OBJ.allow: 'private|protected-constructors', 'decoratedFunctions', 'overrideMethods'

OBJECTS ==>                       #
dot-notation ...                  #Adds OBJ:
                                  #  - allowIndexSignaturePropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if index signature
                                  #     - always true if TSCONF.noPropertyAccessFromIndexSignature true
                                  #  - allowProtected|PrivateClassPropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if protected|private class field

INHERITANCE ==>                   #
no-useless-constructor ...        #
no-invalid-this ...               #
no-dupe-class-members ...         #

ARRAYS ==>                        #
comma-dangle ...                  #Adds OBJ:
                                  #  - enums|generics|tuples STR: same but only for those
no-array-constructor ...          #

STRING ==>                        #
quotes ...                        #

NUMBER ==>                        #
no-loss-of-precision ...          #

ASYNC ==>                         #
require-await ...                 #
return-await ...                  #Named "return-await" while core rule is "no-return-await", because default value is inverted
                                  #STR: 'always' (def), 'never', 'in-try-catch' (inside try, and inside catch if there is a finally)

MODULES ==>                       #
no-duplicate-imports ...          #

BLACKLIST ==>                     #
no-restricted-imports ...         #Adds OBJ:
                                  #  - allowTypeImports BOOL (def: false): include `import type`

TO AVOID ==>                      #
no-implied-eval ...               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


adjacent-overload-signatures      #Overloaded FUNCs must follow each other
array-type [OBJ]                  #How to write ARR_TYPEs. OBJ:
                                  #  - default:
                                  #     - 'array': TYPE[]
                                  #     - 'generic': Array<...>
                                  #     - 'array-simple': TYPE[] for simple types, Array<...> for complex
                                  #  - readonly: same but for readonly TYPE[] vs ReadonlyArray<...>
await-thenable                    #Forbid await on non-PROMISE
ban-ts-comment [OBJ]              #Forbid @ts-* comments. OBJ:
                                  #  - ts-ignore (def: true): forbid @ts-ignore. Can be:
                                  #     - BOOL
                                  #     - 'allow-with-description'
                                  #     - OBJ: descriptti
                                  #  - ts-nocheck (def: true)
                                  #  - ts-check (def: false)
                                  #  - ts-expect-error (def: 'allow-with-description')
ban-tslint-comment                #
ban-types                         #
class-literal-property-style      #
consistent-generic-constructors   #
consistent-indexed-object-style   #
consistent-type-assertions        #
consistent-type-definitions       #
consistent-type-exports           #
consistent-type-imports           #
explicit-function-return-type     #
explicit-member-accessibility     #
explicit-module-boundary-types    #
member-delimiter-style            #
member-ordering                   #
method-signature-style            #
naming-convention                 #
no-base-to-string                 #
no-confusing-non-null-assertion   #
no-confusing-void-expression      #
no-duplicate-enum-values          #
no-dynamic-delete                 #
no-empty-interface                #
no-explicit-any                   #
no-extra-non-null-assertion       #
no-extraneous-class               #
no-floating-promises              #
no-for-in-array                   #
no-implicit-any-catch             #
no-inferrable-types               #
no-invalid-void-type              #
no-meaningless-void-operator      #
no-misused-new                    #
no-misused-promises               #
no-namespace                      #
no-non-null-asserted-nullish-
 coalescing                       #
no-non-null-asserted-optional-
 chain                            #
no-non-null-assertion             #
no-parameter-properties           #
no-redundant-type-constituents    #
no-require-imports                #
no-this-alias                     #
no-type-alias                     #
no-unnecessary-boolean-literal-
 compare                          #
no-unnecessary-condition          #
no-unnecessary-qualifier          #
no-unnecessary-type-arguments     #
no-unnecessary-type-assertion     #
no-unnecessary-type-constraint    #
no-unsafe-argument                #
no-unsafe-assignment              #
no-unsafe-call                    #
no-unsafe-declaration-merging     #
no-unsafe-member-access           #
no-unsafe-return                  #
no-useless-empty-export           #
no-var-requires                   #
non-nullable-type-assertion-style #
parameter-properties              #
prefer-as-const                   #
prefer-enum-initializers          #
prefer-for-of                     #
prefer-function-type              #
prefer-includes                   #
prefer-literal-enum-member        #
prefer-namespace-keyword          #
prefer-nullish-coalescing         #
prefer-optional-chain             #
prefer-readonly                   #
prefer-readonly-parameter-types   #
prefer-reduce-type-parameter      #
prefer-regexp-exec                #
prefer-return-this-type           #
prefer-string-starts-ends-with    #
prefer-ts-expect-error            #
promise-function-async            #
require-array-sort-compare        #
restrict-plus-operands            #
restrict-template-expressions     #
sort-type-constituents            #
sort-type-union-intersection-
 members                          #
strict-boolean-expressions        #
switch-exhaustiveness-check       #
triple-slash-reference            #
type-annotation-spacing           #
typedef                           #
unbound-method                    #
unified-signatures                #
