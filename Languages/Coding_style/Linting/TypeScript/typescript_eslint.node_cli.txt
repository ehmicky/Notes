
                     
   TYPESCRIPT_ESLINT  
                     



VERSION ==>                       #5.45.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/eslint-plugin  #ESLint plugin to lint TypeScript

CONF.parser                       #Must be '@typescript-eslint/parser' (see its doc)
CONF.parserOptions                #@typescript-eslint/parser OPTS (see its doc)
                                  #Important ones:
                                  #  - project, tsconfigRootDir: needed for type information
                                  #  - sourceType, ecmaVersion, ecmaFeatures: like ESLint default parser

typescript                        #Must be installed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CUSTOM PLUGIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@typescript-eslint/utils          #Utilities to write plugins
                                  #Not documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TSLINT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TSLint                            #Previous form of @typescript-eslint, which was a fork of ESLint instead.
                                  #Deprecated.
@typescript-eslint/
 eslint-plugin-tslint             #Helps migrating from TSLint


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       RECOMMENDED RULES       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


plugin:@typescript-eslint/base    #Only:
                                  #  - plugins ['@typescript-eslint']
                                  #  - parser '@typescript-eslint/parser'
                                  #  - parserOptions.sourceType 'module'
plugin:@typescript-eslint/        #ESLint (not @typescript-eslint) rules that make sense when using TypeScript
 eslint-recommended               #  - disabled because already handled by TypeScript
                                  #  - enabled because provides better typing (e.g. `prefer-const`)
                                  #Inherits @typescript-eslint/base
plugin:@typescript-eslint/        #Sets of recommended rules.
 recommended                      #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/
 recommended-requiring-type-      #Sets of recommended rules that require CONF.parserOptions.project
 checking                         #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/strict  #Sets of stricter recommended rules.
                                  #Inherits @typescript-eslint/base + eslint-recommended
plugin:@typescript-eslint/all     #All rules. Not recommended since some conflict with each other.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXTENSION RULES ==>               #The following rules are the same as core ESLint rules, but fixed to work with TypeScript.
                                  #The related core ESLint rules should be disabled.

BLANK LINES ==>                   #
padding-line-between-statements
 ...                              #Adds OBJ.prev|next 'interface|type'
lines-between-class-members ...   #Adds OBJ:
                                  #  - exceptAfterOverload BOOL (def: true): ignore overloaded methods

INDENTATION ==>                   #
indent ...                        #

BRACES ==>                        #
brace-style ...                   #

SPACES ==>                        #
object-curly-spacing ...          #
space-before-blocks ...           #
comma-spacing ...                 #
keyword-spacing ...               #
space-infix-ops ...               #
func-call-spacing ...             #
space-before-function-paren ...   #

SEMICOLONS ==>                    #
semi ...                          #
no-extra-semi ...                 #

STATEMENTS ==>                    #
no-unused-expressions ...         #

PARENTHESIS ==>                   #
no-extra-parens ...               #

REFERENCING ==>                   #
no-unused-vars ...                #
no-redeclare ...                  #Adds OBJ:
                                  #  - ignoreDeclarationMerge BOOL (def: false): allow declaration merges
no-shadow ...                     #Adds OBJ:
                                  #  - ignoreTypeValueShadow BOOL (def: false): allow VAL and TYPE to have same name
                                  #  - ignoreFunctionTypeParameterNameValueShadow BOOL (def: false): allow VAL and
                                  #    FUNC_TYPE's argument to have same name
no-use-before-define ...          #Adds OBJ:
                                  #  - enums|typedefs BOOL (def: true)
                                  #  - ignoreTypeReferences BOOL (def: true): ignore TYPEs

DECLARATIONS ==>                  #
no-magic-numbers ...              #Adds OBJ:
                                  #  - ignoreEnums BOOL (def: false)
                                  #  - ignoreNumericLiteralTypes BOOL (def: false)
                                  #  - ignoreReadonlyClassProperties BOOL (def: false)
                                  #  - ignoreTypeIndexes BOOL (def: false): ignore TYPE[NUM]

ASSIGNMENTS ==>                   #
init-declarations ...             #

EXCEPTIONS ==>                    #
no-throw-literal ...              #Adds OBJ:
                                  #  - allowThrowingAny|Unknown BOOL (def: false): allow throw VAL with type any|unknown

FUNCTIONS ==>                     #
no-loop-func ...                  #
default-param-last ...            #
no-empty-function ...             #Adds OBJ.allow: 'private|protected-constructors', 'decoratedFunctions', 'overrideMethods'

OBJECTS ==>                       #
dot-notation ...                  #Adds OBJ:
                                  #  - allowIndexSignaturePropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if index signature
                                  #     - always true if TSCONF.noPropertyAccessFromIndexSignature true
                                  #  - allowProtected|PrivateClassPropertyAccess BOOL (def: false):
                                  #     - allows OBJ['VAR'] if protected|private class field

INHERITANCE ==>                   #
no-useless-constructor ...        #
no-invalid-this ...               #
no-dupe-class-members ...         #

ARRAYS ==>                        #
comma-dangle ...                  #Adds OBJ:
                                  #  - enums|generics|tuples STR: same but only for those
no-array-constructor ...          #

STRING ==>                        #
quotes ...                        #

NUMBER ==>                        #
no-loss-of-precision ...          #

ASYNC ==>                         #
require-await ...                 #
return-await ...                  #Named "return-await" while core rule is "no-return-await", because default value is inverted
                                  #STR: 'always' (def), 'never', 'in-try-catch' (inside try, and inside catch if there is a finally)

MODULES ==>                       #
no-duplicate-imports ...          #

BLACKLIST ==>                     #
no-restricted-imports ...         #Adds OBJ:
                                  #  - allowTypeImports BOOL (def: false): include `import type`

TO AVOID ==>                      #
no-implied-eval ...               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


adjacent-overload-signatures      #Overloaded FUNCs must follow each other
array-type [OBJ]                  #How to write ARR_TYPEs. OBJ:
                                  #  - default:
                                  #     - 'array': TYPE[]
                                  #     - 'generic': Array<...>
                                  #     - 'array-simple': TYPE[] for simple types, Array<...> for complex
                                  #  - readonly: same but for readonly TYPE[] vs ReadonlyArray<...>
await-thenable                    #Forbid await on non-PROMISE
ban-ts-comment [OBJ]              #Forbid @ts-* comments. OBJ:
                                  #  - ts-ignore (def: true): forbid @ts-ignore. Can be:
                                  #     - BOOL
                                  #     - 'allow-with-description'
                                  #     - OBJ: descriptionFormat 'REGEXP': allow with description matching REGEXP
                                  #  - ts-nocheck (def: true)
                                  #  - ts-check (def: false)
                                  #  - ts-expect-error (def: 'allow-with-description')
                                  #  - minimumDescriptionLength NUM (def: 3)
ban-tslint-comment                #Forbid TSLint-specific comments
ban-types [OBJ]                   #Forbid specific types. OBJ key is type name. Value:
                                  #  - OBJ:
                                  #     - message STR: error message
                                  #     - fixWith 'CODE': replace with --fix
                                  #  - STR: same as { message STR}
                                  #  - false: undo default value
                                  #OBJ also has:
                                  #  - extendDefaults BOOL (def: false): merge default OBJ instead of overridding it
                                  #Default:
                                  #  - use string|boolean|number|symbol|bigint|object instead of String|Boolean|Number|Symbol|BigInt|Object
                                  #  - use (...)=>... instead of Function
                                  #  - use object or Record instead of empty {}
class-literal-property-style [STR]#Readonly class fields:
                                  #  - 'getters' (def): QUAL get(...){...}
                                  #  - 'fields': QUAL readonly VAR = VAL
                                  #Only checks literal VALs, and not OBJ|ARRs|FUNCs
consistent-generic-constructors   #Instantiating generic FUNC calls:
 [STR]                            #  - 'constructor' (def): new FUNC<...>(...)
                                  #  - 'type-annotation': const VAR: TYPE<...> = new FUNC(...)
consistent-indexed-object-style   #Index signatures:
 [STR]                            #  - 'record' (def): Record<...>
                                  #  - 'index-signature': { [KEY: ...]: ... }
consistent-type-assertions [OBJ]  #Type assertions:
                                  #  - assertionStyle:
                                  #     - 'as' (def): VAL as TYPE
                                  #     - 'angle-bracket': <TYPE>VAL
                                  #     - 'never': always forbidden
                                  #  - objectLiteralTypeAssertions:
                                  #     - 'never': use type declaration instead of type assertion, except `as any`
                                  #     - 'allow-as-parameter': like 'allow', but only as FUNC call argument
                                  #     - 'allow' (def)
consistent-type-definitions [STR] #OBJ types:
                                  #  - 'interface' (def): interface OBJ {...}
                                  #  - 'type': type OBJ = {...}
consistent-type-exports [OBJ]     #Favor `export type` or `export { type ... }` over `export`.
                                  #OBJ:
                                  #  - fixMixedExportsWithInlineTypeSpecifier BOOL (def: false): allow using --fix with `export { type ... }`
consistent-type-imports [OBJ]     #Favor `import type` or `import { type ... }` over `import`.
                                  #OBJ:
                                  #  - prefer '[no-]type-imports' (def: 'type-imports'): whether to favor or not
                                  #  - fixStyle: how to --fix when mixed with non-type imports
                                  #     - 'separate-type-imports' (def): separate `import` statements
                                  #     - 'inline-type-imports': import { type ... }
                                  #  - disallowTypeAnnotations BOOL (def: true): forbid import(...).VAR
explicit-function-return-type     #Require return type on FUNCs.
 [OBJ]                            #OBJ:
                                  #  - allowExpressions BOOL (def: false): ignore FUNC expressions (as opposed to declarations)
                                  #  - allowTypedFunctionExpressions BOOL (def: true): ignore if FUNC expression is assigned a FUNC_TYPE
                                  #    through type assertion or declaration
                                  #  - allowHigherOrderFunctions BOOL (def: true): ignore FUNC returning another FUNC
                                  #  - allowDirectConstAssertionInArrowFunctions BOOL (def: true): ignore FUNC returning as `as const` value
                                  #  - allowConciseArrowFunctionExpressionsStartingWithVoid BOOL (def: false): ignore FUNC returning void VAL
                                  #  - allowedNames 'FUNC'_ARR (def: [])
explicit-module-boundary-types    #Require argument and return types on exported FUNCs
 [OBJ]                            #OBJ:
                                  #  - allowTypedFunctionExpressions|allowHigherOrderFunctions|allowDirectConstAssertionInArrowFunctions|allowedNames:
                                  #    like explicit-function-return-type
                                  #  - allowArgumentsExplicitlyTypedAsAny BOOL (def: false): allow `any`
explicit-member-accessibility     #Require using `public|protected|private` on class fields.
                                  #OBJ:
                                  #  - accessibility:
                                  #     - 'explicit' (def): required
                                  #     - 'no-public': required except `public`
                                  #     - 'off': optional
                                  #  - overrides.TYPE 'explicit|no-public|off':
                                  #     - for specific TYPE among: 'accessors|constructors|methods|properties|parameterProperties'
                                  #  - ignoredMethodNames 'FUNC'_ARR (def: [])
member-delimiter-style [OBJ]      #Delimiter at end of each OBJ member.
                                  #OBJ:
                                  #  - multiline:
                                  #     - delimiter 'semi' (def), 'comma' or 'none'
                                  #     - requireLast BOOL (def: true): trailing
                                  #  - singleline:
                                  #     - delimiter 'semi' (def) or 'comma'
                                  #     - requireLast BOOL (def: false): trailing
                                  #  - overrides.TYPE.delimiter|requireLast: for specific TYPE 'interface|typeLiteral'
                                  #  - multilineDetection: multiline if:
                                  #     - 'brackets' (def): there is any newline
                                  #     - 'last-member': last member on last line as end bracket
member-ordering [OBJ]             #Sort OBJ members.
                                  #OBJ:
                                  #  - default:
                                  #     - OBJ2:
                                  #        - memberTypes 'ATTR-...'_ARR
                                  #           - ATTR can be (in that order) (def follows the following order):
                                  #              - 'public|protected|private|#private' or nothing: visibility
                                  #              - 'static|instance|abstract|decorated' or nothing
                                  #              - '[call-]signature|field|initialization|constructor|get|set|method|set' or nothing
                                  #        - optionalityOrder 'optional-first' or 'required-first'
                                  #        - order: sorting within each memberType group
                                  #           - 'alphabetically[-case-insensitive]'
                                  #           - 'natural[-case-insensitive]': alphabetical + number sorting friendly
                                  #           - 'as-written': no sorting
                                  #     - STR[_ARR]: same as { memberTypes STR_ARR }
                                  #     - 'never': no sorting
                                  #  - classes|classExpressions|interfaces|typeLiterals: same for only that type
method-signature-style [STR]      #Methods:
                                  #  - 'property' (def): { FUNC: (...) => ... } (better behavior with --strictFunctionTypes)
                                  #  - 'method': { FUNC(...): ... }
naming-convention [OBJ...]        #Variable names.
                                  #OBJ_ARR:
                                  #  (validation)
                                  #  - format STR_ARR
                                  #     - 'camelCase|PascalCase|snake_case|UPPER_CASE'
                                  #     - 'strictCamelCase|StrictPascalCase': same but forbid consecutive uppercase
                                  #     - null
                                  #  - leading|trailingUnderscore: 'forbid', 'require[Double]' (single|double), 'allow[Single|Double]' (both|single|double)
                                  #  - prefix|suffix STR_ARR: name must start|end with it
                                  #  - custom:
                                  #     - regex 'REGEXP'
                                  #     - match BOOL (def: true): if false, negate
                                  #  (filtering)
                                  #  - selector SELECTOR[_ARR] among:
                                  #     - 'default': all
                                  #     ('variableLike')
                                  #     - 'variable', 'function', 'parameter'
                                  #     ('memberLike')
                                  #     - 'accessor', 'enumMember', 'method', 'parameterProperty', 'typeParameter'
                                  #     ('typeLike')
                                  #     - 'class', 'enum', 'interface', 'typeAlias', 'typeParameter'
                                  #     ('property')
                                  #     - 'classProperty', 'objectLiteralProperty', 'typeProperty'
                                  #     ('method')
                                  #     - 'classMethod', 'objectLiteralMethod', 'typeMethod'
                                  #  - modifiers STR_ARR among:
                                  #     - 'const': const VAR
                                  #     - 'destructured'
                                  #     - 'global'
                                  #     - 'exported'
                                  #     - 'unused'
                                  #     - 'requiresQuotes': VAR name requiring quotes to be valid
                                  #     - 'public|private|protected'
                                  #     - 'abstract|override|readonly|static'
                                  #     - 'async'
                                  #  - types STR_ARR: 'boolean|string|number|array|function': value type
                                  #  - filter OBJ (like `custom`) or 'REGEXP'
                                  #Default:
                                  #  - format 'camelCase', leading|trailingUnderscore 'allow'
                                  #  - selector 'variable', format 'camelCase|UPPER_CASE', leading|trailingUnderscore 'allow'
                                  #  - selector 'typeLike', format 'PascalCase'
no-base-to-string [OBJ]           #No String() nor toString() (implicit or not) on OBJs.
                                  #OBJ:
                                  #  - ignoredTypeNames 'TYPE'_ARR (def: ['Error', 'RegExp', 'URL', 'URLSearchParams'])
no-confusing-non-null-assertion   #Avoid VAL! followed by ==|===
no-confusing-void-expression      #FUNC with `void` return type should not return values, nor should their return value be assigned
                                  #OBJ:
                                  #  - ignoreArrowShorthand BOOL (def: false): allow arrow FUNC with `void` return type to
                                  #    still return a value, to avoid the additional {}
                                  #  - ignoreVoidOperator BOOL (def: false): allow when returning void VAL
no-duplicate-enum-values          #Forbid ENUM with same value
no-dynamic-delete                 #Favor delete OBJ.VAR over delete OBJ[STR]
no-empty-interface [OBJ]          #Forbid empty interface
                                  #OBJ:
                                  #  - allowSingleExtends BOOL (def: false): allow when `extends` is also used
no-explicit-any [OBJ]             #Forbid `any` as an explicit type (as opposed to --noImplicitAny which is for implicit)
                                  #OBJ:
                                  #  - fixToUnknown BOOL (def: false): make --fix to `unknown`
                                  #  - ignoreRestArgs BOOL (def: false): ignore in variadic parameters
no-extra-non-null-assertion       #Forbid VAL!! (second ! is noop)
no-extraneous-class [OBJ]         #Avoid classes with only static members.
                                  #OBJ:
                                  #  - allowStaticOnly BOOL: if false (def), forbid only static members
                                  #  - allowEmpty BOOL (def: false): ignore empty classes
                                  #  - allowWithDecorator BOOL (def: false): ignore if there is a decorator
                                  #  - allowConstructorOnly BOOL (def: false): ignore if there is only a constructor
no-floating-promises [OBJ]        #Avoid PROMISE that is not returned, awaited or calling catch|finally(), because rejection would not be handled.
                                  #OBJ:
                                  #  - ignoreVoid BOOL (def: false): ignore void VAL
                                  #  - ignoreIIFE BOOL (def: false)
no-for-in-array                   #Avoid for (const VAR in ARR)
no-inferrable-types [OBJ]         #Do not declare type of a variable|parameter if can be inferred.
                                  #OBJ:
                                  #  - ignoreParameters BOOL (def: false): ignore parameters
                                  #  - ignoreProperties BOOL (def: false): ignore OBJ properties
no-invalid-void-type [OBJ]        #Avoid `void` type except as FUNC return type
                                  #OBJ:
                                  #  - allowAsThisParameter BOOL (def: false): allow as `this` parameter
                                  #  - allowInGenericTypeArguments BOOL (def: true) or 'TYPE'_ARR: allow as TYPE<void>
no-meaningless-void-operator [OBJ]#Avoid void FUNC() when FUNC() returns undefined
                                  #OBJ:
                                  #  - checkNever BOOL (def: false): also when FUNC() returns never
no-misused-new                    #Avoid class method called 'new', or interface method called 'constructor'
no-misused-promises [OBJ]         #Forbid using PROMISE where `await` if probably missing.
                                  #OBJ:
                                  #  - checksConditionals BOOL (def: true): e.g. in `if (PROMISE)`
                                  #  - checksSpread BOOL (def: true): in ...PROMISE
                                  #  - checksVoidReturn
                                  #     - BOOL (def: true): returning a PROMISE from a FUNC with `void` return type
                                  #     - or OBJ2: when PROMISE is:
                                  #        - arguments BOOL (def: true): passed as an argument
                                  #        - attributes BOOL (def: true): passed as JSX attribute
                                  #        - properties BOOL (def: true): an object method
                                  #        - returns BOOL (def: true): returned
                                  #        - variables BOOL (def: true): assigned to variable
no-namespace                      #
no-non-null-asserted-nullish-
 coalescing                       #
no-non-null-asserted-optional-
 chain                            #
no-non-null-assertion             #
no-redundant-type-constituents    #
no-require-imports                #
no-this-alias                     #
no-type-alias                     #
no-unnecessary-boolean-literal-
 compare                          #
no-unnecessary-condition          #
no-unnecessary-qualifier          #
no-unnecessary-type-arguments     #
no-unnecessary-type-assertion     #
no-unnecessary-type-constraint    #
no-unsafe-argument                #
no-unsafe-assignment              #
no-unsafe-call                    #
no-unsafe-declaration-merging     #
no-unsafe-member-access           #
no-unsafe-return                  #
no-useless-empty-export           #
no-var-requires                   #
non-nullable-type-assertion-style #
parameter-properties              #
prefer-as-const                   #
prefer-enum-initializers          #
prefer-for-of                     #
prefer-function-type              #
prefer-includes                   #
prefer-literal-enum-member        #
prefer-namespace-keyword          #
prefer-nullish-coalescing         #
prefer-optional-chain             #
prefer-readonly                   #
prefer-readonly-parameter-types   #
prefer-reduce-type-parameter      #
prefer-regexp-exec                #
prefer-return-this-type           #
prefer-string-starts-ends-with    #
prefer-ts-expect-error            #
promise-function-async            #
require-array-sort-compare        #
restrict-plus-operands            #
restrict-template-expressions     #
sort-type-constituents            #
strict-boolean-expressions        #
switch-exhaustiveness-check       #
triple-slash-reference            #
type-annotation-spacing           #
typedef                           #
unbound-method                    #
unified-signatures                #
