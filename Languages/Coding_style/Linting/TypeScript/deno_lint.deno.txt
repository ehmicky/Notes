
             
   DENO_LINT  
             



ALTERNATIVES ==>                  #See eslint

VERSION ==>                       #See deno doc

deno lint [SPATH...]              #Lint JavaScript|TypeScript
                                  #If DIR (def: '.'), recursive
CONFIG.exclude
CONFIG.lint.include|exclude       #'DIR|PATH'_ARR of files [not] to lint

// deno-lint-ignore RULE...       #Ignore RULE on next statement
// deno-lint-ignore-file [RULE...]#Ignore whole file

--rules                           #List all RULEs

--rules-include|exclude=RULE,...
CONFIG.lint.rules.include|exclude #Include|exclude RULEs
--rules-tags=TAG,...              #Include RULEs having a given TAG.
CONFIG.lint.rules.tags            #The only one is 'recommended' (def)
                                 -#  - noted like this
                                  #  - can be empty to disable it and only use CONFIG.lint.rules.include|exclude

--json|compact
CONFIG.lint.report                #'pretty' (def), 'compact' or 'json'

RULE CONFIGURATION ==>            #Rules cannot be configured
                                  #Cannot add new rule definitions through plugins

ESLINT ==>                        #Following RULEs are same as ESLint
camelcase                         #
constructor-super                -#
default-param-last                #
eqeqeq                            #
for-direction                    -#
getter-return                    -#
guard-for-in                      #
no-array-constructor             -#
no-async-promise-executor        -#
no-await-in-loop                  #
no-case-declarations              #
no-class-assign                  -#
no-compare-neg-zero              -#
no-cond-assign                   -#
no-const-assign                   #
no-constant-condition            -#
no-control-regex                 -#
no-debugger                      -#
no-delete-var                    -#
no-dupe-args                     -#
no-dupe-class-members            -#
no-dupe-else-if                  -#
no-dupe-keys                     -#
no-duplicate-case                -#
no-empty                         -#
no-empty-character-class         -#
no-empty-pattern                 -#
no-eval                           #
no-ex-assign                     -#
no-extra-boolean-cast            -#
no-extra-semi                    -#
no-fallthrough                   -#
no-func-assign                   -#
no-global-assign                 -#
no-import-assign                 -#
no-inner-declarations            -#
no-invalid-regexp                -#
no-irregular-whitespace          -#
no-new-symbol                    -#
no-obj-calls                     -#
no-octal                         -#
no-prototype-builtins            -#
no-redeclare                     -#
no-regex-spaces                  -#
no-self-assign                   -#
no-setter-return                 -#
no-shadow-restricted-names       -#
no-sparse-arrays                  #
no-this-before-super             -#
no-throw-literal                  #
no-undef                          #
no-unreachable                   -#
no-unsafe-finally                -#
no-unsafe-negation               -#
no-unused-labels                 -#
no-unused-vars                   -#
no-var                           -#
no-with                          -#
prefer-const                     -#
require-await                    -#
require-yield                    -#
use-isnan                        -#
valid-typeof                     -#

TYPESCRIPT-ESLINT ==>             #Following RULEs are same as TypeScript ESLint
adjacent-overload-signatures     -#
ban-ts-comment                   -#
ban-types                        -#
explicit-function-return-type     #
explicit-module-boundary-types    #
no-empty-interface               -#
no-explicit-any                  -#
no-extra-non-null-assertion      -#
no-inferrable-types              -#
no-misused-new                   -#
no-namespace                     -#
no-non-null-asserted-optional-chain#
no-non-null-assertion             #
no-this-alias                    -#
prefer-as-const                  -#
prefer-namespace-keyword         -#
triple-slash-reference            #

CUSTOM ==>                        #Following RULEs are specific to deno-lint

ban-unused-ignore                -#Like eslint-comments/no-unused-disable
ban-untagged-ignore              -#Avoid // deno-lint-ignore with no RULE
ban-unknown-rule-code            -#Avoid // deno-lint-ignore RULE with an unknown RULE
ban-untagged-todo                 #Prefer // TODO(USER) over // TODO

no-deprecated-deno-api           -#Avoid deprecated Deno.*
no-external-import                #Prefer import 'deps.ts' or import 'STR' (through IMPORT_MAP) over import 'URI'
no-top-level-await                #Avoid top-level await. Meant when using dnt, which forbids it

single-var-declarator             #Like one-var RULE
no-window-prefix                 -#Prefer globalThis over window
prefer-ascii                      #Avoid non-ASCII characters in source code. Reason: less efficient with V8

no-empty-enum                    -#Disallow empty enum ENUM {}
no-implicit-declare-namespace
 -export                          #Avoid `export type` inside `declare namespace { ... }`
no-invalid-triple-slash-reference-#Avoid /// <reference ...> with wrong syntax
