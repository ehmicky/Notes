
             
   DENO_LINT  
             



VERSION ==>                       #See deno doc

deno lint [SPATH...]              #Lint JavaScript|TypeScript
                                  #If DIR (def: '.'), recursive
CONFIG.lint.include|exclude       #'DIR|PATH'_ARR of files [not] to lint

// deno-lint-ignore RULE...       #Ignore RULE on next statement
// deno-lint-ignore-file [RULE...]#Ignore whole file

--rules                           #List all RULEs

--rules-include|exclude=RULE,...
CONFIG.lint.rules.include|exclude #Include|exclude RULEs
--rules-tags=TAG,...              #Include RULEs having a given TAG among:
CONFIG.lint.rules.tags            #  - 'recommended' (def)
                                  #Can be empty to disable default value 'recommended'
                                  #and only use CONFIG.lint.rules.include|exclude

--json|compact
CONFIG.lint.report                #'pretty' (def), 'compact' or 'json'

RULE CONFIGURATION ==>            #Rules cannot be configured
                                  #Cannot add new rule definitions through plugins

adjacent-overload-signatures Recommended Requires overload signatures to be adjacent to each other.
ban-ts-comment Recommended Disallows the use of Typescript directives without a comment.
ban-types Recommended Bans the use of primitive wrapper objects (e.g. String the object is a wrapper
ban-unknown-rule-code Recommended Warns the usage of unknown rule codes in ignore directives
ban-untagged-ignore Recommended Requires deno-lint-ignore to be annotated with one or more rule names.
ban-untagged-todo Requires TODOs to be annotated with either a user tag (@user) or an issue
ban-unused-ignore Recommended Warns unused ignore directives

camelcase
constructor-super Recommended
default-param-last
eqeqeq Enforces the use of type-safe equality operators === and !== instead of the
explicit-function-return-type Requires all functions to have explicit return types.
explicit-module-boundary-types Requires all module exports to have fully typed declarations
for-direction Recommended Requires for loop control variables to increment in the correct direction
getter-return Recommended Requires all property getter functions to return a value
guard-for-in Require for-in loops to include an if statement
no-array-constructor Recommended Enforce conventional usage of array construction
no-async-promise-executor Recommended Requires that async promise executor functions are not used
no-await-in-loop Requires await is not used in a for loop body
no-case-declarations Recommended Requires lexical declarations (let, const, function and class) in switch
no-class-assign Recommended Disallows modifying variables of class declarations
no-compare-neg-zero Recommended Disallows comparing against negative zero (-0).
no-cond-assign Recommended Disallows the use of the assignment operator, =, in conditional statements.
no-const-assign Disallows modifying a variable declared as const.
no-constant-condition Recommended Disallows the use of a constant expression in conditional test
no-control-regex Recommended Disallows the use ascii control characters in regular expressions
no-debugger Recommended Disallows the use of the debugger statement
no-delete-var Recommended Disallows the deletion of variables
no-deprecated-deno-api Recommended Warns the usage of the deprecated Deno APIs
no-dupe-args Recommended Disallows using an argument name more than once in a function signature
no-dupe-class-members Recommended Disallows using a class member function name more than once
no-dupe-else-if Recommended Disallows using the same condition twice in an if/else if statement
no-dupe-keys Recommended Disallows duplicate keys in object literals.
no-duplicate-case Recommended Disallows using the same case clause in a switch statement more than once
no-empty Recommended Disallows the use of empty block statements.
no-empty-character-class Recommended Disallows using the empty character class in a regular expression
no-empty-enum Recommended Disallows the declaration of an empty enum
no-empty-interface Recommended Disallows the declaration of an empty interface
no-empty-pattern Recommended Disallows the use of empty patterns in destructuring
no-eval Disallows the use of eval
no-ex-assign Recommended Disallows the reassignment of exception parameters
no-explicit-any Recommended Disallows use of the any type
no-external-import Disallows the use of external imports
no-extra-boolean-cast Recommended Disallows unnecessary boolean casts
no-extra-non-null-assertion Recommended Disallows unnecessary non-null assertions
no-extra-semi Recommended
no-fallthrough Recommended Disallows the implicit fallthrough of case statements
no-func-assign Recommended Disallows the overwriting/reassignment of an existing function
no-global-assign Recommended Disallows assignment to native Javascript objects
no-implicit-declare-namespace-export Disallows the use of implicit exports in ["ambient" namespaces].
no-import-assign Recommended Disallows reassignment of imported module bindings
no-inferrable-types Recommended Disallows easily inferrable types
no-inner-declarations Recommended Disallows variable or function definitions in nested blocks
no-invalid-regexp Recommended Disallows specifying invalid regular expressions in RegExp constructors
no-invalid-triple-slash-reference Recommended Warns the wrong usage of triple-slash reference directives.
no-irregular-whitespace Recommended Disallows the use of non-space or non-tab whitespace characters
no-misused-new Recommended Disallows defining constructors for interfaces or new for classes
no-namespace Recommended Disallows the use of namespace and module keywords in TypeScript code.
no-new-symbol Recommended Disallows the use of new operators with built-in Symbols
no-non-null-asserted-optional-chain
no docs available
no-non-null-assertion
no docs available
no-obj-calls Recommended Disallows calling built-in global objects like functions
no-octal Recommended Disallows expressing octal numbers via numeric literals beginning with 0
no-prototype-builtins Recommended Disallows the use of Object.prototype builtins directly
no-redeclare Recommended Disallows redeclaration of variables, functions, parameters with the same name.
no-regex-spaces Recommended Disallows multiple spaces in regular expression literals.
no-self-assign Recommended Disallows self assignments
no-setter-return Recommended Disallows returning values from setters.
no-shadow-restricted-names Recommended Disallows shadowing of restricted names.
no-sparse-arrays Disallows sparse arrays
no-this-alias Recommended Disallows assigning variables to this.
no-this-before-super Recommended Disallows use of this or super before calling super() in constructors.
no-throw-literal
no docs available
no-top-level-await Disallows the use of top level await expressions.
no-undef
no docs available
no-unreachable Recommended Disallows the unreachable code after the control flow statements.
no-unsafe-finally Recommended Disallows the use of control flow statements within finally blocks.
no-unsafe-negation Recommended Disallows the usage of negation operator ! as the left operand of relational
no-unused-labels Recommended Disallows unused labels.
no-unused-vars Recommended Enforces all variables used at least once.
no-var Recommended Enforces the use of block scoped variables over more error prone function scoped
no-window-prefix Recommended Disallows the use of Web APIs via the window object.
no-with Recommended Disallows the usage of with statements.
prefer-as-const Recommended Recommends using const assertion (as const) over explicitly specifying literal
prefer-ascii Ensures that the code is fully written in ASCII characters.
prefer-const Recommended Recommends declaring variables with [const] over [let].
prefer-namespace-keyword Recommended Recommends the use of namespace keyword over module keyword when declaring
prefer-primordials Suggests using frozen intrinsics from primordials rather than the default
require-await Recommended Disallows async functions that have no await expression
require-yield Recommended Disallows generator functions that have no yield.
single-var-declarator no docs available
triple-slash-reference no docs available
use-isnan Recommended Disallows comparisons to NaN.
valid-typeof Recommended Restricts the use of the typeof operator to a specific set of string literals.
