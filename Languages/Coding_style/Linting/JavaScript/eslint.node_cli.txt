
          
   ESLINT  
          



ALTERNATIVES ==>                  #  - eslint (prefered): more rules, more configurable, more maintained
                                  #  - jscs: not maintained, merged with eslint
                                  #  - jshint

VERSION ==>                       #8.22.0
                                  #JavaScript linter, using Espree parser.

TYPE                              #ESTree type
SELECTOR                          #CSS-like but for ESTree:
                                  #  - TAG: ESTree TYPE
                                  #  - :statement|expression|declaration|function|pattern: abstract TYPE
                                  #  - ATTR[.ATTR2]: TYPE property
                                  #  - TAG * [ATTR] [ATTR=] [ATTR=/REGEXP/] [ATTR!=] [ATTR>] [ATTR<] [ATTR>=] [ATTR<=]
                                  #    > " " ~ + :first-child :last-child :nth-[last-]child() :not() :matches() !


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONFIGURATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIGURATION ==>                 #Can be from:
                                  #  - eslint --config|-c FILE
                                  #  - ./[../.../].eslintrc.js|cjs|y[a]ml|json: JavaScript, YAML or JSON
                                  #  - PACKAGE.JSON.eslintConfig OBJ
                                  #If there are several (e.g. ./.eslintrc.js and ../.eslintrc.js), merges them.

CONF.root                         #BOOL. If true, do not look in parent directories for other CONF files

CONF.extends 'PACKAGE|FILE'[_ARR] #Merges a base CONF2
                                  #Uses FILE or package eslint-config-PACKAGE which:
                                  #  - exports CONF_OBJ
                                  #  - has eslint as peerDependencies
                                  #  - can have several configs, by creating PACKAGE/FILE.js,
                                  #    and specifying extends 'PACKAGE/FILE'
                                  #Can be:
                                  #  - "eslint:recommended": default set of rules (see online doc)
                                  #  - "eslint:all": all rules

COMMON CONFIGS ==>                #Some famous configs are:
                                  #  - eslint-config-standard (17.0.0): feross standard coding style
                                  #  - eslint-config-airbnb: airbnb coding style

npm init @eslint/config           #Create ./.eslintrc using interactive prompt


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FILES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint 'FILE|DIR_GLOB'...         #
eslint --stdin                    #
eslint --stdin-filename FILE      #

CONF.overrides                    #Sub-CONF for specific files, with CONF_ARR, also containing:
                                  #  - files GLOB[_ARR]
                                  #  - excludedFiles GLOB[_ARR]

./.eslintignore                   #Similar to .gitignore (same syntax)
eslint --ignore-pattern PATTERN   #Dot files are ignored unless whitelisted with '!...'
package.json "eslintIgnore" STRARR#Files in /node_modules are always ignored

eslint --ignore-path FILE         #Alternative name for .eslintignore (e.g. reusing .gitignore)
eslint --no-ignore                #Do not use .eslintignore

CONF.ignorePatterns               #'PATTERN'_ARR. Like .eslintignore

eslint --ext EXT,...              #File extensions

eslint
 --no-error-on-unmatched-pattern  #Do not error when 'GLOB' does not match anything


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RULES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.parser                       #Def: 'espree'
CONF.parserOptions
eslint --parser-options=VAR:VAL,..#Options to ESPREE.parse() (see its doc)

CONF.rules.RULE RULE_CONF         #RULE_CONF is either LEVEL or [LEVEL, CONF_VAL]
/* eslint RULE: RULE_CONF, ... */ #LEVEL can be "off|warn|error" (or 0|1|2)
eslint --rule 'RULE: RULECONF'    #Exit code will be 1 on "error"

/* eslint-disable [RULE,...] */
/* eslint-enable [RULE,...] */    #
/* eslint-disable-line RULE,... */#End-of-line comment
/* eslint-disable-next-line RULE*/#

/* eslint[-*] ... -- COMMENT */   #Can add COMMENT to any ESLint comment

eslint --no-inline-config
CONF.noInlineConfig               #BOOL. Prevent comments from changing config

CONF.settings OBJ                 #Custom OBJ passed to every RULE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GLOBALS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.globals.VAR STR              #Declare global variables. STR can be:
                                  #  - 'off': cannot get/set
                                  #  - 'readonly': can get, cannot set
                                  #  - 'writable': can get/set
eslint --global GLOBAL[:STR]      #BOOL must be true if not readonly
/* global VAR[:STR] */            #E.g. used by RULE no-undef

CONF.env.ENV BOOL                 #Preset of global variables + parserOptions, among:
eslint --env ENV                  #  - browser, node, shared-node-browser
/* eslint-env ENV,... */          #  - es6, es5 (always included)
                                  #  - commonjs, amd
                                  #  - worker, serviceworker, webextensions
                                  #  - mocha, jasmine, jest, qunit, atomtest, embertest
                                  #  - phantomjs, protractor
                                  #  - jquery, prototypejs, shelljs, meteor, mongo
                                  #  - applescript, nashorn, greasemonkey
                                  #Uses Node module "globals" (see its doc)
                                  #Also define some parserOptions:
                                  #  - ecmaVersion 6 if "es6"
                                  #  - globalReturn true if "node|commonjs"

n/prefer-global/FEATURE [STR]    ##Whether should use global variable ('always', def) or require('...') ('never')
                                 ##for FEATURE among:
                                 ##  - 'buffer': require('buffer').Buffer
                                 ##  - 'console': require('console')
                                 ##  - 'process': require('process')
                                 ##  - 'url': require('url').URL
                                 ##  - 'url-search-params': require('url').URLSearchParams
                                 ##  - 'text-encoder|decoder': require('util').TextEncoder|Decoder


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --output-file|-o FILE      #

eslint --format|-f REPORTER       #Output style
REPORTER                          #Package eslint-reporter-REPORTER:
                                  #  - is a FUNC(ERRORS_OBJ_ARR), with ERRORS_OBJ_ARR:
                                  #     - filePath STR
                                  #     - source STR
                                  #     - [fixable]errorCount NUM, [fixable]warningCount NUM
                                  #     - [suppressed]messages ERROR_OBJ_ARR:
                                  #        - ruleId 'RULE'
                                  #        - severity LEVEL_NUM
                                  #        - message STR
                                  #        - line|column NUM, [endLine|endColumn NUM]
                                  #        - nodeType TYPE
                                  #        - fix: range [NUM, NUM2], text STR (to apply --fix, optional)
                                  #  - usually use console or create output files
                                  #Builtin:
                                  #  - 'compact', 'unix': minimal
                                  #  - 'stylish' (def)
                                  #  - 'table': similar to stylish, but as table
                                  #  - 'codeframe': show code sample
                                  #  - 'html'
                                  #  - 'json'
                                  #  - 'tap': TAP (see TAP format doc for details)
                                 ##  - 'eslint-tap': not as good as builtin one
                                  #  - 'jslint-xml', 'junit', 'checkstyle', 'visualstudio': specific tools
eslint --color|--no-color         #

eslint --quiet                    #Only report errors
eslint --max-warnings NUM         #Error if more than NUM warnings (def: -1)
eslint --exit-on-fatal-error      #Exit code 2 instead of 1 on parsing error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint
--cache                           #Caches checked files, and only check changed ones on next run
--cache-location FILE|DIR         #Def: .eslintcache


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            FIXING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --fix                      #Automatically changes files to fix some of the rules
                                  #See online doc for which rules use --fix

eslint --fix-dry-run              #Dry run. Must be used with another --format

eslint --fix-type STR             #Only apply --fix for one the types STR: 'problem', 'suggestion', 'layout', 'directive'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CUSTOM RULE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --rulesdir DIR             #DIR contains RULE files

lib/rules/RULE.js                 #Main RULE file
                                  #Name:
                                  #  - deduced from filename
                                  #  - should be lowercase dasherized, use no-* if forbids, no prefix if requires
                                  #Exports an OBJ:
                                  #  - meta:
                                  #     - docs:
                                  #        - description STR: short description
                                  #        - category STR: categories among "Possible Errors", "Best Practices", "Strict Mode",
                                  #          "Variables", "Node.js and CommonJS", "Stylistic Issues", "ECMAScript 6"
                                  #        - recommended BOOL: whether it should be included in eslint:recommended
                                  #     - fixable 'code' or 'whitespace': for --fix
                                  #     - schema JSON_SCHEMA_ARR: matched against RULE_CONF (each ARR is one argument item)
                                  #     - deprecated BOOL (def: false)
                                  #     - messages OBJ: see below
                                  #  - create(CONTEXT)->OBJ:
                                  #     - SELECTOR[:exit](NODE):
                                  #        - called when traversing NODE top-down (or bottom-up if "exit")
                                  #     - onCodePathStart|End(CODEPATH, NODE)
                                  #     - onCodePathSegmentStart|End(CODEPATHSEGMENT, NODE)
                                  #     - onCodePathSegmentLoop(CODEPATHSEGMENT, CODEPATHSEGMENT2, NODE): when starting
                                  #       a CODEPATHSEGMENT that was already entered

CONTEXT.parserOptions             #
CONTEXT.parserPath                #
CONTEXT.id                        #'RULE'
CONTEXT.options                   #RULE_CONF, as ARR
CONTEXT.settings                  #CONF.settings
CONTEXT.report(PROBLEM)           #Report warning|error, where PROBLEM is:
                                  #  - message STR
                                  #  - messageId STR: same as message, but using OBJ.meta.messages.STR
                                  #  - data OBJ: placeholder data, which can used in message as {{VAR}}
                                  #  - node NODE
                                  #  - loc: start|end.line|column NUM (def: use NODE)
                                  #  - fix(FIXER)->FIXER_RET[_ARR]: applied with --fix, with FIXER:
                                  #     - insertTextAfter|Before[Range](NODE|TOKEN|RANGE, STR)->FIXER_RET
                                  #     - remove[Range](NODE|TOKEN|RANGE)->FIXER_RET
                                  #     - replaceText[Range](NODE|TOKEN|RANGE)->FIXER_RET
CONTEXT.getScope()->OBJ           #
CONTEXT.getAncestors()->NODE_ARR  #
CONTEXT.getFilename()->'FILE'     #
CONTEXT.getDeclaredVariables(NODE)#
CONTEXT.markVariableAsUsed('VAR') #For no-unused-vars RULE

CONTEXT.getSourceCode()->SOURCECOD#
SOURCECODE.text                   #'JS'
SOURCECODE.lines                  #'JS'_ARR
SOURCECODE.ast                    #PROGRAM_NODE
SOURCECODE.hasBOM                 #BOOL
SOURCECODE.getText
 (NODE[, NUM][, NUM2])->'JS'      #NUM is extra chars before NODE (def: 0), NUM is extra chars after (def: 0)

SOURCECODE.getNodeByRangeIndex
 (OFFSET)->NODE                   #
SOURCECODE.getTokenByRangeStart
 (OFFSET, OPTS)->TOKEN            #OPTS: includeComments BOOL (def: false)
SOURCECODE.getLocFromIndex(OFFSET)
 ->LOC                            #
SOURCECODE.getIndexFromLoc(LOC)
 ->OFFSET                         #

SOURCECODE.getTokens(NODE)
 ->TOKEN_ARR                      #
SOURCECODE.getFirst|LastToken[s]  #FILTER_OPTS:
 (NODE[, OPTS])->TOKEN[_ARR]      #  - filter(TOKEN)->BOOL
                                  #  - includeComments BOOL (def: false)
                                  #  (if no "s")
                                  #  - skip NUM (def: 0)
                                  #  (if "s")
                                  #  - count NUM (def: 0): max number
SOURCECODE.getToken[s]After|Before
 (NODE|TOKEN[, OPTS])->TOKEN[_ARR]#
SOURCECODE.getTokensBetween
 (NODE|TOKEN, NODE|TOKEN2)
 ->TOKEN_ARR                      #
SOURCECODE.
 getFirst|LastToken[s]Between
 (NODE|TOKEN, NODE|TOKEN2[, OPTS])
 ->TOKEN[_ARR]                    #

SOURCECODE.getAllComments()
  ->STR_ARR                       #
SOURCECODE.getCommentsBefore|
 After|Inside(NODE|TOKEN)->STR_ARR#
SOURCECODE.getJSDocComment(NODE)
 ->STR|null                       #


CODEPATH                          #Blocks, including functions. Includes several CODEPATHSEGMENT
CODEPATH.id                       #Unique id
CODEPATH.upper                    #Parent CODEPATH
CODEPATH.childCodePaths           #CODEPATH_ARR
CODEPATH.currentSegments          #CODEPATHSEGMENT_ARR
CODEPATH.initialSegment           #First CODEPATHSEGMENT
CODEPATH.finalSegments            #Possible last CODEPATHSEGMENT_ARR, e.g. return|throw statements
                                 ##RULE node/process-exit-as-throw fixes CODEPATH.finalSegments so it includes process.exit()
CODEPATH.returned|thrownSegments  #Same for only return|thrown

CODEPATHSEGMENT                   #Statements or part of statements
CODEPATHSEGMENT.id                #Unique id
CODEPATHSEGMENT.prev|nextSegments #CODEPATHSEGMENT_ARR
CODEPATHSEGMENT.reachable         #BOOL


tests/lib/rules/RULE.js           #Each rule must have tests
RULETESTER                        #Helper, available under /lib/testers/rule-tester
RULETESTER.run('RULE', RULE, OPTS)#Unit tests a RULE. OPTS:
                                  #  - valid OBJ_ARR (or STR_ARR shorthand):
                                  #     - code 'JS'
                                  #     - [globals 'VAR'_ARR]
                                  #     - [options RULE_CONF] (i.e. ARR)
                                  #     - [settings OBJ]
                                  #     - [filename STR]
                                  #     - [parserOptions OBJ]
                                  #  - invalid OBJ_ARR: same as valid, with also:
                                  #     - errors OBJ_ARR (or STR_ARR shorthand):
                                  #        - message STR
                                  #        - [type TYPE]
                                  #        - [line|column NUM]

TIMING=1 eslint --no-eslintrc
--rule "RULE: RULE_CONF"          #Rules performance testing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



CONF.plugins 'PACKAGE'_ARR        #Plugins to use
                                  #PACKAGE can also be '@SCOPE' which is same as '@SCOPE/eslint-config'
eslint --plugin PACKAGE           #Uses packages eslint-plugin-PACKAGE
                                  #All new properties added by plugins are accessible under names prefixed with "PLUGIN/"
                                  #Must have peerDependencies eslint
--resolve-plugins-relative-to DIR #Should be set when PLUGIN|CONF is inside a nested dependency (instead of direct)
                                  #Def: PWD

PLUGIN                            #Main object exported by plugins
PLUGIN.configs.CONF_NAME CONF     #Add new CONF (like eslint-config-* does)
PLUGIN.rules.RULE RULE            #Add new rules
PLUGIN.environments.ENV
 .globals|parserOptions           #Add new ENV
PLUGIN.processors.".EXT" OBJ      #OBJ:
                                  #  - preprocess(STR, 'FILE')->STR_ARR
                                  #  - postprocess(STR_ARR_ARR, 'FILE')->STR_ARR
                                  #E.g. to lint JavaScript inside HTML


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WRAPPERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STANDARD ==>                     ##Node module "standard" from feross (17.0.0)
                                 ##Is a wrapper around ESLint with a different default config (eslint-config-standard)

SEMISTANDARD ==>                 ##Node module (11.0.0)
                                 ##Is a wrapper around ESLint with a different default config (eslint-config-semistandard)

XO ==>                           ##Node module (0.18.2)
                                 ##Is a wrapper around ESLint with:
                                 ##  - a different default config (eslint-config-standard)
                                 ##  - different reporter: eslint-formatter-pretty
                                 ##  - includes plugins: eslint-plugin-unicorn, eslint-plugin-import, eslint-plugin-ava,
                                 ##    eslint-plugin-promise
                                 ##  - different default for:
                                 ##     parserOptions: ecmaVersion 2017, sourceType 'module',
                                 ##     ecmaFeatures: jsx true
                                 ##     --env: 'node'
                                 ##     --ext: .js, .jsx
                                 ##     --ignore-pattern: node_modules/, bower_components/, coverage/, t[e]mp/, *.min.js,
                                 ##     bundle.js, fixture*/, vendor/, dist/
                                 ##     --cache
                                 ##  - convenient options to configure several related RULEs at once: --space NUM,
                                 ##    --no-semicolon and --no-esnext
                                 ##  - can open files with problems with xo --open

ESLINT-NIBBLE ==>                ##Node module (3.1.2)
                                 ##Runs like eslint except different reporter:
                                 ##  - shows graphs of number of errors, per error type
                                 ##  - can show code samples of all instances of one specific error type
                                 ##Good when introducing ESLint to a project, and building the ESLint CONF
                                 ##CLI flags: --ext, --config

GULP-ESLINT ==>                  ##Node module (6.0.0)
GULP-ESLINT(OBJ|'CONF_FILE')     ##Fires eslint and populates VINYL.eslint
                                 ##OBJ are ESLint options
                                 ##--cache is not supported.
GULP-ESLINT.result
(FUNC(ERROR_OBJ))                ##Fires FUNC(ERROR_OBJ) for each error in VINYL.eslint (see above for ERROR_OBJ format)
GULP-ESLINT.results
(FUNC(ERRORS_OBJ))               ##Fires FUNC(ERRORS_OBJ) once
GULP-ESLINT.format[Each]         ##Prints eslint output, using VINYL.eslint
(['REPORTER'][, OSTREAM|FUNC])   ##Def OSTREAM is process.stdout. FUNC is FUNC(STR)
                                 ##If "Each", called for each file
GULP-ESLINT.failOn|AfterError()  ##Stops task on first|last error in VINYL.eslint



         
   RULES  
         



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMMENTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-inline-comments [OBJ]          #Avoid non-full-line comments
                                  #OBJ:
                                  #  - ignorePattern 'REGEXP'
multiline-comment-style [STR]     #How multiline comments should look like, with STR:
                                  #  - 'starred-block' (def): /*
                                  #                            *
                                  #                            */
                                  #  - 'bare-block': /*
                                  #                   ... */
                                  #  - 'separate-lines': //
                                  #                      //
                                  #Does not apply to JSDoc comments
line-comment-position [OBJ]       #Position of line comments
                                  #OBJ:
                                  #  - position 'above' (def) or 'beside' (i.e. end of line)
                                  #  - ignorePattern 'REGEXP'
                                  #  - applyDefaultIgnorePatterns BOOL: if true (def), ignores words starting with
                                  #    eslint|jshint|jslint|istanbul|global|exported|jscs|fallsthrough
lines-around-comment [OBJ]        #Where comments can be put
                                  #OBJ:
                                  #  - before|afterBlockComments BOOL (def: true, false): requires empty line before|after /* */
                                  #  - before|afterLineComments BOOL (def: false): requires empty line before|after //
                                  #  - allowBlockStart|End BOOL (def: false): allow comment at beginning|end of { } block
                                  #  - allowObjectStart|End BOOL (def: false): allow comment at beginning|end of { } OBJ
                                  #  - allowClassStart|End BOOL (def: false): allow comment at beginning|end of { } CLASS
                                  #  - allowArrayStart|End BOOL (def: false): allow comment at beginning|end of [] ARR
                                  #  - ignorePattern 'REGEXP'
                                  #  - applyDefaultIgnorePatterns BOOL: if tre (def), ignores words starting with
                                  #    eslint|jshint|jslint|istanbul|global|exported|jscs|fallsthrough
spaced-comment [STR] [OBJ]        #Space after // or /*
                                  #STR: 'always' (def) or 'never'
                                  #OBJ:
                                  #  - exceptions STR_ARR: check for non-REGEXP pattern anywhere in comment
                                  #  - markers STR_ARR: check for non-REGEXP pattern at start of comment
                                  #  - block|line OBJ: same options, but only for // or only /* */
                                  #  - balanced BOOL:
                                  #     - whether this applies also to space before */
                                  #     - must be inside OBJ.block
capitalized-comments [STR] [OBJ]  #Whether comments should start with uppercase or lowercase
                                  #STR: 'always' (def) or 'never'
                                  #OBJ:
                                  #  - ignorePattern 'REGEXP': ignores if first words matches
                                  #    By def., ignores if starts with jscs|jshint|eslint|istanbul|global[s]|exported
                                  #  - ignoreInlineComments BOOL (def: false): if true, only for full-line comments
                                  #  - ignoreConsecutiveComments BOOL (def: false): only check first line of comment blocks
no-warning-comments [OBJ]         #Avoid comments like TODO|FIXME
                                  #OBJ:
                                  #  - terms STR_ARR (def: 'todo', 'fixme', 'xxx'): matched whole word, case-insensitive
                                  #  - location 'start' (def) or 'anywhere'
unicorn/expiring-todo-comments   ##Avoid comments like TODO|FIXME unless they are followed by [CONDITION,...] and met one of them
 [OBJ]                           ##CONDITION can be:
                                 ##  - YYYY-MM-DD
                                 ##  - >SEMVER: against PACKAGE.version
                                 ##  - +PKGNAME or -PKGNAME: whether exists in PACKAGE.[dev]dependencies
                                 ##  - PKGNAME@>SEMVER: against PACKAGE.[dev]dependencies version
                                 ##  - engine:NAME@>SEMVER: against PACKAGE.engines[NAME]
                                 ##OPTS:
                                 ##  - terms STR_ARR (def: ['todo', 'fixme', 'xxx'])
                                 ##  - allowWarningComments BOOL (def: true): if false, disable "no-warning-comments" rule
                                 ##  - ignoreDatesOnPullRequests BOOL (def: false): disable YYYY-MM-DD when it's a PR
                                 ##  - ignore STR|REGEXP_ARR
                                 ##  - date "YYYY-MM-DD"

eslint-comments/*                ##Module "eslint-plugin-eslint-comments" (3.2.0)
eslint-comments/                 ##Every /* eslint-disable */ must be followed by a /* eslint-enable */
 disable-enable-pair [OBJ]       ##OBJ: allowWholeFile BOOL
eslint-comments/no-unused-enable ##Every /* eslint-enable */ must be after a  /* eslint-disable */
eslint-comments/
 no-duplicate-disable            ##No duplicate /* eslint-disable */
eslint-comments/
 no-unlimited-disable            ##/* eslint-disable RULE */ only, not /* eslint-disable */
unicorn/no-abusive-eslint-disable##/* eslint-disable RULE */ only, not /* eslint-disable */
eslint-comments/
 no-aggregating-enable           ##No /* eslint-enable */ after several /* eslint-disable [RULE] */
eslint-comments/
 no-restricted-disable 'GLOB'_ARR##No /* eslint-disable RULE */ with RULE matching 'GLOB'
eslint-comments/no-use [OBJ]     ##Forbids all ESLint comments
                                 ##OBJ: allow STR_ARR, among 'eslint', 'eslint-disable|enable', 'eslint-disable-[next-]line',
                                 ##'eslint-env', 'exported', 'global[s]'
eslint-comments/                 ##Require a comment before /* eslint-* */
 require-description [OBJ]       ##OBJ:
                                 ##  - ignore STR_ARR: same values as eslint-comments/no-use OBJ.allow
eslint-comments/no-unused-disable##No /* eslint-disable */ if no rule is broken
eslint --report-unused-disable
 -directives
CONF.reportUnusedDisableDirectives#BOOL. No /* eslint-disable */ if no rule is broken
eslint --no-inline-config         #No /* eslint-disable */


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRICT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


strict [STR]                      #For 'use strict':
                                  #  - 'global' (def is CommonJS module): must add one on top of file
                                  #  - 'function' (def otherwise): must add one on top of each function
                                  #  - 'never' (def if ES module)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LONG STATEMENTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


operator-linebreak [STR] [OBJ]    #When using newlines-separated chained operations, e.g. ... && ... && ...,
                                  #where to put the operators.
                                  #STR: 'after' (def, end of line), 'start' (start of line), 'none' (inside line)
                                  #OBJ: overrides.OPERATOR STR (def: ? and : 'before')
newline-per-chained-call [OBJ]    #Forces newlines before dots in dot-delimited chains
                                  #OBJ: ignoreChainWithDepth NUM (def: 2): ignore if chain has <= NUM items
dot-location [STR]                #In multiline dot-delimited chains, dot at end of line (STR "object", def) or beginning of line (STR "property")
no-whitespace-before-property     #Avoid VAR .VAR2, i.e. dot-delimited chain with whitespaces before dot


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BLANK LINES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-multiple-empty-lines [OBJ]     #Max consecutive empty lines
                                  #OBJ:
                                  #  - max NUM (def: 2)
                                  #  - maxEOF|maxBOF NUM: same for end|beginning of file
padding-line-between-statements   #Empty lines between statements, according to their type.
 OBJ...                           #OBJ:
                                  #  - blankLine: 'always' (requires), 'never' (forbids), 'any' (ignores)
                                  #  - prev|next STR[_ARR]:
                                  #     - type of statement before|after the blank lines
                                  #     - can be:
                                  #        - '*': any statement
                                  #        - block: {} (not associated with a structure)
                                  #        - [multiline-]block-like: any {} block
                                  #        - multiline: multiple lines
                                  #        - iife
                                  #        - [multiline|singleline-]const|var|let
                                  #        - function|class: declarations
                                  #        - import|export|cjs-export|cjs-import|
                                  #        - switch|case|default
                                  #        - for|if|while|do
                                  #        - break|continue
                                  #        - debugger|return
                                  #        - try|throw
                                  #        - with
                                  #        - directive: 'use strict'
                                  #        - empty: single ;
                                  #        - expression: EXPR
                                  #If several OBJ..., last one has priority.
padded-blocks [STR] [OBJ]         #Empty lines at start and of end of {} blocks
                                  #STR: 'always' (def), 'never'
                                  #OBJ: blocks|classes|switches STR:
                                  #  - same for specific type of block
                                  #  - note that STR is shorthand for OBJ.blocks only

lines-between-class-members       #Empty line between CLASS members: 'always' (def) or 'never'
 [STR] [OBJ]                      #OBJ: exceptAfterSingleLine BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          INDENTATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


indent [VAL] [OBJ]                #Indentation
                                  #VAL: NUM (def: 4) or 'tab'
                                  #OBJ, for number of indents in (multi-line):
                                  #  - SwitchCase NUM (def: 0): switch cases
                                  #  - VariableDeclarator[.var|let|const] NUMM (def: 1): declarations
                                  #  - outerIIFEBody NUM|'off' (def: 1): IIFE
                                  #  - MemberExpression NUMM (def: 1): VAR.VAR2...
                                  #  - FunctionDeclaration|FunctionExpression:
                                  #     - parameters NUMM (def: 1)
                                  #     - body NUM (def: 1)
                                  #  - CallExpression.arguments NUMM (def: 1)
                                  #  - ArrayExpression NUMM (def: 1): ARR
                                  #  - ObjectExpression NUMM (def: 1): OBJ
                                  #  - ImportDeclaration NUMM (def: 1): import
                                  #  - flatTernaryExpressions BOOL: if false (def), nested ?: must be indented
                                  #  - offsetTernaryExpressions BOOL: if false (def), ?: must not be indented
                                  #  - ignoredNodes SELECTOR
                                  #  - ignoreComments BOOL (def: false)
                                  #NUMM means either:
                                  #  - NUM
                                  #  - 'first': must be aligned with first one
                                  #  - 'off': disables check
no-tabs [OBJ]                     #Avoid tabs
                                  #OBJ: allowIndentationTabs BOOL (def: false)
no-mixed-spaces-and-tabs [OBJ]    #Avoid mixed spaces and tabs for indentation
                                  #OBJ: smartTabs BOOL (def: false): allow tabs when used for alignment
unicorn/template-indent [OBJ]    ##Indentation inside `...` STR
                                 ##OBJ:
                                 ##  - indent NUM|STR (def: guessed)
                                 ##  - tags|functions|selectors|comments STR: only applied on specific `...` preceded by those


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          WHITESPACES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-trailing-spaces [OBJ]          #No trailing spaces
                                  #OBJ:
                                  #  - skipBlankLines BOOL (def: false)
                                  #  - ignoreComments BOOL (def: false)
no-multi-spaces [OBJ]             #Avoid multiple spaces
                                  #OBJ:
                                  #  - ignoreEOLComments BOOL (def: false): ignore at end of line if there is a //COMMENT
                                  #  - exceptions.TYPE BOOL (def: { "Property": true }): ignored for TYPEs
no-irregular-whitespace [OBJ]     #Avoid any whitespace that is not \n \r \t or space.
                                  #This includes \v \f NBSP BOM ZWSP and many Unicode ones
                                  #OBJ:
                                  #  - skipComments BOOL (def: true)
                                  #  - skipStrings BOOL (def: true)
                                  #  - skipTemplates BOOL (def: true)
                                  #  - skipRegExps BOOL (def: true)
linebreak-style [STR]             #Whether linebreak should be 'unix' (def, LF) or 'windows' (CRLF)
eol-last [STR]                    #Files must end with LF
                                  #STR: 'always' (def), 'never'
unicode-bom [STR]                 #Unicode BOM
                                  #STR: 'always' or 'never' (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BRACES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


curly [STR] [STR2]                #Using {} around statements
                                  #STR:
                                  #  - 'all' (def): always {}
                                  #  - 'multi': {} if multiple statements, no {} if single
                                  #  - 'multi-line': {} if multiple lines
                                  #  - 'multi-or-nest': {} if multiple statements or lines, no {} otherwise
                                  #STR2:
                                  #  - 'consistent': each part of if|else chain must have same braces style
brace-style [STR] [OBJ]           #{} style
                                  #STR:
                                  #  - '1tbs' (def)
                                  #      if ... {
                                  #      } else {
                                  #      }
                                  #  - 'stroustrup'
                                  #      if ... {
                                  #      }
                                  #      else {
                                  #      }
                                  #  - 'allman'
                                  #      if ...
                                  #      {
                                  #      }
                                  #      else
                                  #      {
                                  #      }
                                  #OBJ: allowSingleLine BOOL (def: false): allow { ... }
nonblock-statement-body-position  #Where to put single statement blocks that do not use {}
 [STR] [OBJ]                      #STR: 'besides' (def, same line), 'below' (next line), 'any' (no requirement)
                                  #OBJ: overrides.KEYWORD STR (same for a specific keyword)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SPACES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


block-spacing [STR]               #Spaces inside single-line {}
                                  #STR: 'always' (def), 'never'
object-curly-spacing [STR] [OBJ]  #Spaces between {}
                                  #STR: 'always', 'never' (def)
                                  #OBJ:
                                  #  - objectInObjects BOOL (def: depends on 'always|never'): space if OBJ item
                                  #  - arraysInObjects BOOL (def: depends on 'always|never'): space if ARR item
                                  #'always' does not require spaces inside empty OBJ
unicorn/empty-brace-spaces       ##Forbid spaces between empty {}
space-before-blocks [STR|OBJ]     #Spaces before {} block
                                  #STR: 'always' (def), 'never' or 'off'
                                  #OBJ: functions|keywords|classes STR: same for a specific block type

array-bracket-spacing [STR] [OBJ] #Spaces inside []
                                  #STR: 'always', 'never' (def)
                                  #OBJ:
                                  #  - singleValue BOOL (def: depends on 'always|never'): space if single item
                                  #  - objectInArrays BOOL (def: depends on 'always|never'): space if OBJ item
                                  #  - arraysInArrays BOOL (def: depends on 'always|never'): space if ARR item
                                  #'always' does not require spaces inside empty ARR
computed-property-spacing [STR]   #Space around [] in OBJ[VAR] or { [VAR] }
 [OBJ]                            #STR: 'never' (def), 'always'
                                  #OBJ:
                                  #  - enforceForClassMembers BOOL (def: true)

space-in-parens [STR] [OBJ]       #Space inside ()
                                  #STR: 'always' or 'never' (def)
                                  #OBJ: exceptions STR_ARR, among '{}', '[]', '()', 'empty'

template-tag-spacing [STR]        #Space between TAG and `...`
                                  #STR: 'always' or 'never' (def)
template-curly-spacing [STR]      #Space inside ${}
                                  #STR: 'always' or 'never' (def)

comma-spacing [OBJ]               #Space around comma
                                  #Not checked for sparsed ARR elements
                                  #OBJ: before|after BOOL (def: false, true)
semi-spacing [OBJ]                #Spaces around ;
                                  #OBJ: before|after BOOL (def: false, true)
key-spacing [OBJ]                 #Space around : in OBJ: VAR
                                  #OBJ:
                                  #  - beforeColon|afterColon BOOL (def: false, true)
                                  #  - mode 'strict' (def) or 'minimum': whether to allow multiple spaces
                                  #  - align 'colon' (colons must align), 'value' (values must align)
                                  #  - align OBJ: with OBJ.on 'colon|value', and OBJ same as above
                                  #  - singleLine|multiLine OBJ: same OBJ as above, but restrict to single-line or
                                  #    multiline OBJs
switch-colon-spacing [OBJ]        #Space around : in switch case|default
                                  #OBJ: before|after BOOL (def: false, true)

space-unary-ops [OBJ]             #Space around operators
                                  #OBJ:
                                  #  - words BOOL (def: true): space around new|delete|typeof|void|yield
                                  #  - nonwords BOOL (def: false): space around - ++ -- + !
                                  #  - overrides.KEYWORD BOOL
keyword-spacing [OBJ]             #Space around keywords
                                  #OBJ:
                                  #  - before|after BOOL (def: true): for all keywords
                                  #  - overrides.KEYWORD.before|after BOOL: for specific keywords
space-infix-ops [OBJ]             #Space around ++ --
                                  #OBJ:
                                  #  - int32Hint BOOL (def: true): allow no space around |0 (used sometimes for typecasting)
rest-spread-spacing [STR]         #Space between ... and VAL in ...VAL
                                  #STR: 'always' or 'never' (def)

func-call-spacing [STR] [OBJ]     #Space in-between FUNC and (...) in "FUNC(...)"
                                  #STR: 'always', 'never' (def)
                                  #OBJ: allowNewlines BOOL (def: false)
function-call-argument-newline    #Newlines before each argument
 [STR]                            #STR: 'always' (def), 'never', 'consistent'
space-before-function-paren       #Space before (...) in function [NAME](...)
  [STR|OBJ]                       #STR: 'always' (def) or 'never'
                                  #OBJ: anonymous|named|asyncArrow STR:
                                  #  - same for a specific function type
                                  #  - not using OBJ will only target anonymous|named
arrow-spacing [OBJ]               #Space around =>
                                  #OBJ: before|after BOOL (def: true, true)
generator-star-spacing [OBJ]      #Space around * in generator FUNC
                                  #OBJ:
                                  #  - before|after BOOL (def: true, false)
                                  #  - named|anonymous|method: before|after BOOL or "after|before|both|neither"
yield-star-spacing [STR|OBJ]      #Space around * in yield* VAL
                                  #OBJ: before|after BOOL (def: false, true)
                                  #STR: 'after', 'before', 'both', 'neither' (shorthands)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SEMICOLONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


semi [STR] [OBJ]                  #Semicolons at end of statements.
                                  #STR: 'always' (def), 'never' (unless required for ambiguity)
                                  #OBJ:
                                  #  (when 'always')
                                  #  - omitLastInOneLineBlock BOOL (def: false): ignored if last statement of a one-line {} block
                                  #  (when 'never')
                                  #  - beforeStatementContinuationChars "any|always|never": ignores|requires|forbis semicolons if
                                  #    next line starts with [ ( / + -
semi-style [STR]                  #Whether to put ; at start or end of line
                                  #STR: 'last' (def), 'first'
no-unexpected-multiline           #Avoid multilines statements that would be interpreted as two statements if semicolons were
                                  #inserted.
no-extra-semi                     #Avoid useless semicolons, e.g. {};


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STATEMENTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-empty [OBJ]                    #Avoid empty block statements, unless they contain comments
                                  #OBJ: allowEmptyCatch BOOL (def: false) (ignore if catch clause)
no-unused-expressions [OBJ]       #Avoid statements with no side-effects
                                  #OBJ:
                                  #  - allowShortCircuit BOOL (def: false): ignore if part of && || chain
                                  #  - allowTernary BOOL (def: false): ignore if part of ? : chain
                                  #  - allowTaggedTemplates BOOL (def: false): ignore for TAG`...`
                                  #  - enforceForJSX BOOL (def: false)
chai-friendly/                   ##Same but works with Chai properties.
 no-unused-expressions [OBJ]     ##Module eslint-plugin-chai-friendly (0.6.0)
no-new                            #Avoid new TYPE as a single statement (e.g. no assignment)
no-unreachable                    #Avoid statements that cannot be reached because of an early return|throw|break|continue
no-unreachable-loop [TYPE_ARR]    #Avoid loops that never iterates more than once
                                  #TYPE_ARR are types to ignore, among '[Do]WhileStatement|For[In|Of]Statement'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARENTHESIS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-extra-parens [STR] [OBJ]       #Avoid unnecessary parentheses
                                  #STR: "all" (def), "functions" (only around FUNC expressions)
                                  #OBJ:
                                  #  - conditionalAssign BOOL (ignore around assignments inside TEST)
                                  #  - returnAssign BOOL (ignore around assignments in return statement)
                                  #  - nestedBinaryExpressions BOOL (ignore around chained binary operators)
                                  #  - ignoreJSX "none", "all", "multi-line", "single-line"
                                  #    (ignore around JSX, providing it is multi-line or single-line)
                                  #  - enforceForArrowConditionals BOOL (ignore around (...) => ?:)
                                  #  - enforceForSequenceExpressions BOOL (ignore around ..., ...)
                                  #  - enforceForNewInMemberExpressions BOOL (ignore around new ...)
                                  #  - enforceForFunctionPrototypeMethods BOOL (ignore around function (){}.call|apply())
no-mixed-operators [OBJ]          #Must add extra (even useless) parenthesis around operators to clarity order,
                                  #when using several operators.
                                  #OBJ:
                                  #  - groups 'OP'_ARR_ARR:
                                  #     - will force parenthesis inside each group (not between groups)
                                  #     - def:
                                  #        + - * / % **
                                  #        & | ^ ~ << >> >>>
                                  #        == != === !== > >= < <=
                                  #        && ||
                                  #        in instanceof
                                  #        ?:
                                  #  - allowSamePrecedence BOOL: if true (def), ignore if two operators have same precedence

wrap-iife [STR] [OBJ]             #IIFE parenthesis wrapping.
                                  #STR:
                                  #  - 'outside' (def): (function ... {}())
                                  #  - 'inside': (function ... {})()
                                  #  - 'any': either
                                  #OBJ:
                                  #  - functionPrototypeMethods BOOL (def: false): also when FUNC is fired using call|apply()
unicorn/no-unreadable-iife       ##Avoid complex-looking IIFEs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPLEXITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


max-len [NUM|OBJ]                 #Maximum line length (Unicode chars)
                                  #NUM, or OBJ:
                                  #  - code NUM (def: 80): for generic lines
                                  #  - tabWidth (def: 4)
                                  #  - comments NUM (def: same as code): for comments
                                  #  - ignorePattern 'REGEXP'
                                  #  - ignore[Trailing]Comments BOOL (def: false): ignore non-full-line|trailing comments
                                  #  - ignoreUrls|Strings|TemplateLiterals|RegExpLiterals BOOL (def: false)
max-lines [NUM|OBJ]               #Max number of lines per file
                                  #NUM, or OBJ:
                                  #  - max NUM (def: 300)
                                  #  - skipBlankLines BOOL (def: false)
                                  #  - skipComments BOOL (def: false)
max-lines-per-function [NUM|OBJ]  #Max number of lines per function
                                  #NUM, or OBJ:
                                  #  - max NUM (def: 50)
                                  #  - skipBlankLines BOOL (def: false)
                                  #  - skipComments BOOL (def: false)
                                  #  - IIFEs BOOL (def: false): include (function() {}(...))

max-statements [NUM|OBJ]          #Max number of statements per function
                                  #NUM, or OBJ:
                                  #  - max NUM (def: 10)
                                  #  - ignoreTopLevelFunctions BOOL (def: false)
max-statements-per-line [OBJ]     #Max number of statements per line
                                  #OBJ: max NUM (def: 1)
import/max-dependencies [OBJ]    ##Avoid more than OBJ.max NUM (def: 10) import|require per file
                                 ##OBJ:
                                 ##  - ignoreTypeImports BOOL (def: false): ignore TypeScript type imports

complexity [NUM]                  #Maximum cyclomatic complexity (def: 20), i.e. number of branches|paths per function
max-depth [NUM]                   #Max block nesting (def: 4)
max-nested-callbacks [NUM]        #Max nested callback depth (def: 10)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          REFERENCING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-undef [OBJ]                    #Avoid referencing undeclared variables
                                  #Exceptions: global variables (see above on how to declare them)
                                  #OBJ: typeof BOOL: if false (def), ignore typeof VAR
no-undef-init                     #Avoid explicitely assigning undefined at initialization

no-unused-vars [OBJ]              #Avoid unused variables
                                  #Exceptions:
                                  #  - mentioned in /* exported VAR */ comment
                                  #  - providing it is not CommonJS module or ES module
                                  #OBJ:
                                  #  - vars STR: 'all' (def, check all) or 'local' (does not check global variables)
                                  #  - varsIgnorePattern 'REGEXP': ignore if name matches
                                  #  - args STR: 'all' (check all), 'none' or 'after-used' (def, only last positional argument)
                                  #  - argsIgnorePattern 'REGEXP': ignore if name matches
                                  #  - destructuredArrayIgnorePattern 'REGEXP': ignore if name matches
                                  #  - ignoreRestSiblings BOOL (def: false): do not check ...ARG
                                  #  - caughtErrors 'all|none', caughtErrorsPattern 'REGEXP': same but for catch clause arg
unicorn/no-unused-properties     ##Avoid unused object properties

no-redeclare [OBJ]                #Avoid declaring twice same VAR with var
                                  #OBJ:
                                  #  - builtinGlobals BOOL (def: true): also avoid redeclaring builtin global vars

no-shadow [OBJ]                   #Disallow inner scopes declaring variables with same name as outer scope
                                  #OBJ:
                                  #  - builtinGlobals BOOL (def: false): including builtin global variables (e.g. Number)
                                  #  - hoist STR: check through hoisting of 'functions' (def), 'all' (functions + variables)
                                  #    or 'never'
                                  #  - allow 'VAR'_ARR: whitelists
                                  #  - ignoreOnInitialization BOOL (def: false): allow when shadowed variable is part of the
                                  #    same statement and it is a declaration
no-shadow-restricted-names        #Avoid variables named NaN, Infinity, undefined, eval or arguments
no-use-before-define [OBJ]        #Avoid hoisting
                                  #OBJ:
                                  #  - functions|classes|variables BOOL (def: true)
                                  #  - allowNamedExports BOOL (def: false): allow named exports to reference hoisted variables


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DECLARATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


block-scoped-var                  #var can be replaceable by let without errors
no-const-assign                   #Avoid reassigning const variables
no-var                            #Avoid var (prefer let|const)
fp/no-let                        ##Avoid let
import/no-mutable-exports        ##Avoid let|var with import|require
prefer-const [OBJ]                #Avoid const declarations of variables that are never reassigned.
                                  #OBJ:
                                  #  - destructuring STR: if some variables in destructuring should be const, but others let,
                                  #    warns if 'any' (def), or not if 'all'
                                  #  - ignoreReadBeforeAssign BOOL: if false (def), takes hoisting into account

no-global-assign [OBJ]            #Avoid assigning to builtin global variables (e.g. window, global, process)
                                  #OBJ: exceptions 'VAR'_ARR
no-implicit-globals [OBJ]         #Top-level QUAL VAR must be GLOBAL.VAR instead
                                  #OBJ:
                                  #  - lexicalBindings BOOL (def: false): if in browser script mode (not CommonJS nor ESM),
                                  #    must avoid top-level QUAL VAR altogether

one-var [STR] [OBJ]               #Chained declarations, e.g. var VAR, VAR2;
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'never'
                                  #  - 'consecutive' (either, but if chaining, must be newline-separated)
                                  #OBJ:
                                  #  - var|let|const STR: same for only this type
                                  #  - [un]initialized STR: same for only this type
                                  #  - separateRequires BOOL (def: false): var VAR = require() should be on separate line
one-var-declaration-per-line [STR]#When using chained declarations, e.g. var VAR, VAR2;, whether to separate with newlines
                                  #STR:
                                  #  - 'always' (required for each VAR)
                                  #  - 'initializations' (def, required for each initialized VAR)

vars-on-top                       #Variable declarations must be at top of scope
no-inner-declarations [STR]       #Avoid var declarations (not let|const) and FUNC declarations (not expressions)
                                  #inside a conditional branch.
                                  #STR: "functions" (only FUNC) (def) or "both" (both var|FUNC)

sort-vars [OBJ]                   #Requires sorting chained VAR declarations
                                  #OBJ: ignoreCase BOOL (def: false)

no-magic-numbers [OBJ]            #Must use constant variables instead of constant values
                                  #OBJ:
                                  #  - ignore NUM_ARR (def: [])
                                  #  - ignoreArrayIndexes BOOL (def: false)
                                  #  - ignoreDefaultValues BOOL (def: false)
                                  #  - enforceConst BOOL (def: false)
                                  #  - detectObjects BOOL (def: false): analyze OBJ declaration members


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSIGNMENTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


init-declarations [STR] [OBJ]     #Whether var|let declarations must also assign: 'always' (def) or 'never'
                                  #OBJ: ignoreForLoopInit BOOL (def: false): if 'never', ignore in for (...)
no-plusplus [OBJ]                 #Avoid ++ --
                                  #OBJ: allowForLoopAfterthoughts BOOL (def: false): allow in for (...; VAR++)
operator-assignment [STR]         #Whether to use += -= etc.
                                  #STR: 'always' (def) or 'never'

no-multi-assign [OBJ]             #Avoid VAR = VAR2 = VAL
                                  #OBJ:
                                  #  - ignoreNonDeclaration BOOL (def: false): if true, ignore if assign but does not initializes

prefer-object-spread              #Avoid Object.assign(OBJ, ...) except if OBJ is a variable, or ...ARR spread is used
unicorn/
 no-useless-fallback-in-spread   ##Prefer { ...OBJ } over { ...(OBJ || {} ) }
                                  #Prefer { ...OBJ }

no-cond-assign [STR]              #Avoid assignments in TEST
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-return-assign [STR]            #Avoid assignments in return statements
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-self-assign [OBJ]              #Avoid assignments where both sides are the same
                                  #OBJ: props BOOL (def: true): include OBJ2.VAR2 self assignments

no-param-reassign [OBJ]           #Avoid reassigning function parameters
                                  #OBJ:
                                  #  - props BOOL (def: false): applies deeply, i.e. avoid PARAM.VAR = VAL too
                                  #  - ignorePropertyModificationsFor[Regex] 'VAR|REGEXP'_ARR (def: []): exceptions for OBJ.props

fp/*                             ##Module "eslint-plugin-fp" (2.3.0)
fp/no-mutation [OBJ]             ##Avoid any assignments outside declarations, including = += ++ etc.
                                 ##OBJ:
                                 ##  - commonjs BOOL: allow assignments on [module.]exports
                                 ##  - allowThis BOOL: allow assignments on this
                                 ##  - exceptions OBJ_ARR (allow assignments):
                                 ##     - object 'VAR'
                                 ##     - property 'VAR2'
no-delete-var                     #Avoid delete
fp/no-delete                     ##Avoid delete
fp/no-unused-expression [OBJ]    ##Avoid EXPR that do not get assigned to a VAR
                                 ##OBJ: allowUseStrict BOOL (def: true): allow 'use strict';
import/no-unassigned-import [OBJ]##Avoid import|require with no assignment
                                 ##OBJ:
                                 ##  - allow GLOB_ARR: whitelists
fp/no-mutating-assign            ##Avoid VAR as Object.assign() first argument
fp/no-mutating-methods [OBJ]     ##Avoid ARR.copyWithin|pop|push|reverse|shift|sort|splice|unshift()
                                 ##and Object.defineProperties|defineProperty|setPropertyOf()
                                 ##OBJ: allowedObjects 'VAR'_ARR: allows VAR.pop|push|...()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NAMING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


id-length [OBJ]                   #VAR names length
                                  #OBJ:
                                  #  - min NUM (def: 2)
                                  #  - max NUM (def: Infinity)
                                  #  - exceptions 'VAR'_ARR
                                  #  - exceptionPatterns 'REGEXP'_ARR
                                  #  - properties 'always' (def) or 'never': whether to check OBJ.VAR
camelcase [OBJ]                   #VAR must be camelCase or CONSTANT_CASE
                                  #OBJ:
                                  #  - properties 'always' (def) or 'never'
                                  #  - ignoreDestructuring BOOL (def: false)
                                  #  - ignoreImports BOOL (def: false)
                                  #  - ignoreGlobals BOOL (def: false)
                                  #  - allow 'VAR'_ARR
id-match 'REGEXP' [OBJ]           #VAR names matching
                                  #Example: '^[a-z]+([A-Z][a-z]+)*$' for camelCase with only letters
                                  #OBJ:
                                  #  - properties BOOL: if true, also check OBJ.VAR
                                  #  - onlyDeclarations BOOL (def: false): if true, only variables, functions and classes
                                  #  - ignoreDestructuring BOOL (def: false)
no-underscore-dangle [OBJ]        #Avoid naming _VAR
                                  #OBJ:
                                  #  - allow '_VAR'_ARR
                                  #  - allowAfterThis BOOL (def: false): ignore for this._VAR
                                  #  - allowAfterThisConstructor BOOL (def: false): ignore for this.constructor._VAR
                                  #  - allowAfterSuper BOOL (def: false): ignore for super._VAR
                                  #  - allowFunctionParams BOOL (def: false): ignore in args
                                  #  - enforceInMethodNames BOOL: if false (def), ignore for class methods
                                  #  - enforceInClassFields BOOL: if false (def), ignore for class fields
unicorn/prevent-abbreviations    ##Prevent abbreviations/shortnames for variable names.
 [OBJ]                           ##Does it against a hard-coded list of common abbreviations.
                                 ##Case-insensitive.
                                 ##Match even if only part of variable name, providing abbreviation is lowercase.
                                 ##OBJ:
                                 ##  - replacements { ABBR: VAL, ... }:
                                 ##     - customize the list
                                 ##     - VAL can be:
                                 ##        - false: report but no autofix
                                 ##        - { STR: true }: report and autofix
                                 ##        - { STR: false }: do not report
                                 ##  - extendDefaultReplacements BOOL (def: true): if false, replace list instead of extending it
                                 ##  - allowList { STR: true, ... }: allow STR (case-sensitive)
                                 ##  - ignore STR|REGEXP_ARR (def: [])
                                 ##  - extendDefaultAllowList BOOL (def: true)
                                 ##  - checkDefaultAndNamespaceImports 'internal' (def) or BOOL: check "import ... from" and "import * as ... from"
                                 ##  - checkShorthandImports 'internal' (def) or BOOL: check "import {VAR} from"
                                 ##  - checkShorthandProperties BOOL (def: false): check "const {VAR} = VAL"
                                 ##  - checkProperties BOOL (def: false): check OBJ.VAR
                                 ##  - checkVariables BOOL (def: true): check VAR
                                 ##  - checkFilenames BOOL (def: true)
unicorn/no-keyword-prefix [OBJ]  ##Prevent variables names that start with OBJ.disallowedPrefixes (def: ['new', 'class'])
                                 ##OBJ:
                                 ##  - onlyCamelcase BOOL (def: true)
                                 ##  - checkProperties BOOL (def: true)
id-denylist STR...                #Forbidden VAR names

new-cap [OBJ]                     #TYPE capitalization
                                  #OBJ:
                                  #  - newIsCap BOOL: if true (def), requires uppercase in new Type()
                                  #  - capIsNew BOOL: if true (def), forbids Type() without new
                                  #  - newIsCap|capIsNewExceptions 'VAR'_ARR
                                  #  - newIsCap|capIsNewExceptionPattern 'REGEXP'
                                  #  - properties BOOL: if true (def), also check OBJ.VAR

no-undefined                      #Avoid using value undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPECASTING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-extra-boolean-cast [OBJ]       #Avoid BOOL typecasting in TEST
                                  #OBJ:
                                  #  - enforceForLogicalOperands BOOL (def: false): including in && or || chains
no-implicit-coercion [OBJ]        #Must use Boolean|Number|String() for typecasting, not "smart tricks"
                                  #Also must use VAL !== -1, not ~
                                  #OBJ:
                                  #  - boolean|number|string BOOL (def: true)
                                  #  - allow STR_ARR (def: []): among '~', '!!', '+', '*'
                                  #  - disallowTemplateShorthand BOOL (def: false): use String(VAL) instead of `${VAL}`
unicorn/explicit-length-check    ##Avoid implicit transtyping of ARR|STR.length
 [OBJ]                           ##OBJ:
                                 ##  - non-zero: whether length !== 0 should be
                                 ##     - 'not-equal': !== 0
                                 ##     - 'greater-than' (def): > 0
unicorn/
 prefer-native-coercion-functions##Prefer using String|Number|Boolean|Symbol|BigInt() instead of small FUNC wrapping it

no-new-wrappers                   #Avoid new String|Number|Boolean()
unicorn/new-for-builtins         ##Avoid new String|Number|Boolean|Symbol|BigInt(). Force new with all other builtins,
                                 ##including Object|Array|Date|Error|Function|Promise|RegExp
fp/no-valueof-field              ##Avoid valueOf()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-unsafe-negation [OBJ]          #Avoid !VAR in OBJ or !VAR instanceof OBJ (there should be parenthesis after !)
                                  #OBJ:
                                  #  - enforceForOrderingRelations BOOL (def: false): avoid !(VAL < > >= <= VAL)
eqeqeq [STR] [OBJ]                #Must use === !== not == !=
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'smart': except == on null, two literal values, or typeof
                                  #OBJ:
                                  #  - null 'always' (def), 'never', 'ignore': for == null
no-eq-null                        #=== null not == null

valid-typeof [OBJ]                #Must use "typeof VAR === VAL" with VAL being STR (a valid one) or typeof VAR2
                                  #OBJ: requireStringLiterals BOOL (def: true): if false, allow EXPR as VAL
unicorn/no-instanceof-array      ##Avoid instanceof Array (prefer Array.isArray())

no-negated-condition              #Avoid !TEST if there is an else branch
no-constant-condition [OBJ]       #Avoid constant in TEST
                                  #OBJ: checkLoops BOOL (def: true) (if inside a loop)
no-constant-binary-expression     #Avoid TEST that is constant
no-self-compare                   #Avoid comparisons where both sides are the same
no-dupe-else-if                   #Avoid if (TEST) else if (TEST2) else if (TEST2) (i.e. repeated TEST2)

yoda [STR] [OBJ]                  #Handling of Yoda expressions.
                                  #STR: 'never' (def), 'always'
                                  #OBJ:
                                  #  - onlyEquality BOOL (def: false): only forbids for == === != !==
                                  #  - exceptRange BOOL (def: false): accepts in range test, e.g. VAL < VAL2 && VAL2 < VAL3

no-ternary                        #Avoid ?:
no-nested-ternary                 #Avoid nested ternary expressions
unicorn/no-nested-ternary        ##Avoid nested ternary expressions, except when wrapped in parenthesis and only single-level-nested
no-unneeded-ternary [OBJ]         #Avoid TEST ? true : false (prefer Boolean(TEST))
                                  #OBJ: defaultAssignment BOOL (def: true): if false, also avoid
                                  #VAR ? VAR : VAL (prefer VAR || VAL)
multiline-ternary [STR]           #Newlines in ?:
                                  #STR: 'always' (def) or 'never' or 'always-multiline' (always if some VAL contains newline)
unicorn/prefer-ternary [STR]     ##Use ?: providing each expression is only one line and simple
                                 ##STR: 'always' (def) or 'only-single-line'
unicorn/prefer-logical-operator-
 over-ternary                    ##Prefer VAL || VAL2 or VAL ?? VAL2 over VAL ? VAL : VAL2 or VAL ? VAL2 : VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRUCTURES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-lone-blocks                    #Avoid unnecessary {} blocks

no-lonely-if                      #Use "else if" instead of "else" then "if"
unicorn/no-lonely-if             ##Same but a little better
no-else-return [OBJ]              #Early returns: if a "if" branch returns, no "else" branch needed
                                  #OBJ: allowElseIf BOOL (def: true)

no-unmodified-loop-condition      #Avoid loop TEST where TEST variables are never modified inside the loop
for-direction                     #Avoid for (...; VAR<VAL; VAR2--) or for (...; VAR>VAL; VAR2++)
unicorn/no-for-loop              ##Prefer for (... of ...) over for (;;)

guard-for-in                      #Must use OBJ.hasOwnProperty() inside "for in"

fp/no-loops                      ##Avoid for|while loops


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SWITCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-duplicate-case                 #Avoid duplicate switch case VAL
default-case [OBJ]                #Must have default case in switch statement
                                  #OBJ: commentPattern REGEXP (def: /^no default$/i) for a comment that can be used instead of
                                  #default case.
default-case-last                 #Must have default case last in switch statement
no-fallthrough [OBJ]              #Switch cases must use break
                                  #OBJ: commentPattern REGEXP (def: /^falls through$/i) for a comment
                                  #that can be used instead of break
no-case-declarations              #Avoid let|const in switch case not wrapped in {}
unicorn/no-useless-switch-case   ##No fallthrough case followed by default case

unicorn/prefer-switch [OBJ]      ##Prefer switch over "if (VAL === VAL2) {...} else if (VAL3 === VAL4) {...} ..."
                                 ##OBJ:
                                 ##  - minimumCases NUM (def: 3) (excluding "default")
                                 ##  - emptyDefaultCase STR: to avoid conflict with "default-case" rule:
                                 ##     - "no-default-comment" (def): add comment after last case
                                 ##     - "do-nothing-comment": add "default" case + comment
                                 ##     - "no-default-case": add neither "default" case nor comment


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LABELS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-labels [OBJ]                   #Avoid LABEL
                                  #OBJ: allowLoop|allowSwitch BOOL (def: false)
no-unused-labels                  #Avoid unused LABEL
no-extra-label                    #Avoid LABEL if the structure is not nested
no-label-var                      #Avoid LABEL that have same name as a variable


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXCEPTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-throw-literal                  #Must only throw ERROR
unicorn/throw-new-error          ##Avoid throw Error(), must do throw new Error()
unicorn/prefer-type-error        ##Must throw TypeError after a TEST like typeof, instanceof, etc.
unicorn/error-message            ##Avoid new Error(), must do new Error(STR)

unicorn/catch-error-name [OBJ]   ##Catch clause variable name must be called OBJ.name STR (def: 'error')
                                 ##OBJ:
                                 ##  - ignore STR|REGEXP[_ARR] (def: none)
no-ex-assign                      #Avoid assigning to ERROR in catch clause
no-useless-catch                  #Avoid catch clause that only rethrows ERROR
unicorn/
 prefer-optional-catch-binding   ##Avoid `catch` if ERROR not used
no-unsafe-finally                 #Avoid return|throw|break|continue in finally clauses.
                                  #The reason: it overrides the try|catch clause's return|throw|break|continue

no-debugger                       #Avoid debugger
fp/no-throw                      ##Avoid throw

unicorn/custom-error-definition  ##Proper ERROR subclassing, i.e.:
                                 ##  - must call super(MESSAGE)
                                 ##  - avoid this.message = MESSAGE (it is done by super(MESSAGE))
                                 ##  - must this.name = 'MyError' (PascalCase)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


func-style [STR] [OBJ]            #Whether FUNC should be STR 'expression' (def) or 'declaration'
                                  #OBJ: allowArrowFunctions BOOL (def: false), only with 'declaration'
unicorn/no-fn-reference-in-
 iterator                        ##Prefer OBJ|ARR.FUNC(VAL => FUNC2(VAL)) over OBJ|ARR.FUNC(FUNC2)

no-func-assign                    #Avoid duplicate function declarations
no-loop-func                      #Avoid function declarations in loops

func-names [STR] [OBJ]            #Specify FUNC name
                                  #STR: 'always' (def), 'as-needed' (if cannot be guessed), 'never'
                                  #OBJ:
                                  #  - generators (def: same as STR): 'always', 'as-needed', 'never'
func-name-matching [STR] [OBJ]    #FUNC must be assigned to variables with same name as FUNC.name
                                  #STR: 'always' (def), 'never'
                                  #OBJ:
                                  #  - includeCommonJSModuleExports BOOL: if false (def), ignore module.exports
                                  #  - considerPropertyDescriptor BOOL (def: false): also check getter functions

function-paren-newline [STR|OBJ]  #Newlines between FUNC declaration params and call arguments.
                                  #STR:
                                  #  - 'always|never'
                                  #  - 'multiline' (def): requires newlines if args are separated by newlines or contain some
                                  #  - 'multiline-arguments': like 'multiline' but allows single argument to be on its own line
                                  #  - 'consistent': requires either all newlines or no newlines
                                  #OBJ:
                                  #  - minItems NUM: requires newlines if >= NUM args
                    
prefer-arrow-callback [OBJ]       #Must use arrow functions when used as argument, unless any of:
                                  #  - generator FUNC
                                  #  - recursion
                                  #  - this is used, and no bind(this) was used, if OBJ.allowUnboundThis true (def)
                                  #  - named FUNC, if OBJ.allowNamedFunctions true (def: false)

arrow-body-style [STR] [OBJ]      #() => { return VAL; } vs () => VAL
                                  #STR: 'always', 'never', 'as-needed' (def) (requires no {} if single VAL)
                                  #OBJ (only with STR 'as-needed'):
                                  #  - requireReturnForObjectLiteral BOOL (def: false): requires { return OBJ }
implicit-arrow-linebreak [STR]    #In () => VAL, whether there can|should be a newline before VAL
                                  #STR: 'below', 'beside' (def)
arrow-parens [STR] [OBJ]          #VAL => ... vs (VAL) => ...
                                  #STR: 'always' (def) (never omit parenthesis), 'as-needed' (always omit parenthesis if possible)
                                  #OBJ (only with STR 'as-needed'):
                                  #  - requireForBlockBody BOOL (def: false): requires parenthesis
                                  #    if => {...} (instead of => ...)

no-confusing-arrow [OBJ]          #Avoid ... => VAL, where VAL makes it confusing, e.g. a ternary expression
                                  #OBJ:
                                  #  - allowParens BOOL (def: true): ignores if VAL is wrapped with ()
                                  #  - onlyOneSimpleParam BOOL (def: false): only if there is only one param that is an identifier

max-params [NUM]                  #Max number of positional parameters (def: 3)
default-param-last                #Avoid arguments default values on non-last arguments
unicorn/prefer-default-parameters##Use default parameters when possible

no-dupe-args                      #Avoid duplicate argument names

prefer-spread                     #Avoid FUNC.apply(), prefer ...ARR
unicorn/prefer-spread            ##Avoid Array.from(), prefer ...ARR
unicorn/no-useless-spread        ##Avoid ...ARR|OBJ when unnecessary: literal ARR|OBJ, MAP|SET constructor, Array.from(), Object.fromEntries(), Promise.*()
prefer-rest-params                #Avoid "arguments", prefer ...ARG
fp/no-arguments                  ##Avoid arguments
fp/no-rest-parameters            ##Avoid ...ARG

require-yield                     #Avoid generator FUNC with no yield statement

accessor-pairs [OBJ]              #Must have both get and set if one present
                                  #OBJ:
                                  #  - setWithoutGet BOOL (def: true): if set, must have get
                                  #  - getWithoutSet BOOL (def: true): if get, must have set
                                  #  - enforceForClassMembers BOOL (def: false): for CLASS too
grouped-accessor-pairs [STR]      #get and set must be defined next to each other.
                                  #Order is STR: 'anyOrder' (def), 'getBeforeSet', 'setBeforeGet'
getter-return [OBJ]               #Getters must have return statement
                                  #OBJ: allowImplicit BOOL: if false (def), forbid "return" with no VAL
no-setter-return                  #Setters must have no return statement
fp/no-get-set                    ##Avoid getters/setters
fp/no-proxy                      ##Avoid Proxy

no-empty-function [OBJ]           #Avoid empty functions, unless contains comment
                                  #OBJ:
                                  #  - allow STR_ARR: among '[async]functions', 'arrowFunctions', '[async]methods', 'generatorFunctions|Methods',
                                  #    'constructors', 'getters', 'setters'

no-useless-return                 #Avoid "return;" at end of function
consistent-return                 #If there is one return VAL, there must be no return (with no VAL)
                                  #OBJ:
                                  #  - treatUndefinedAsUnspecified BOOL: if false (def), there must be no
                                  #    return undefined either

unicorn/                         ##Functions must be defined top-level if not closures
 consistent-function-scoping     ##OBJ:
 [OBJ]                           ##  - checkArrowFunctions BOOL (def: true)

unicorn/prefer-reflect-apply     ##Prefer Reflect.apply(FUNC, CONTEXT, ...) over FUNC.apply(CONTEXT, ...) or Function.prototype.apply.call(FUNC, CONTEXT, ...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OBJECTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


object-curly-newline [STR|OBJ]    #Newlines between OBJ items
                                  #STR: 'always' or 'never'
                                  #OBJ:
                                  #  - multiline BOOL: requires newlines if items are separated by newlines or contain some
                                  #  - minProperties NUM: requires newlines if >= NUM items
                                  #  - consistent BOOL (def: true): requires either all newlines or no newlines
                                  #  - ObjectExpression|ObjectPattern|ImportDeclaration|ExportDeclaration OBJ:
                                  #    same options, but only for OBJ_VAL, destructuring OBJ, import or export
object-property-newline [OBJ]     #Force linebreaks between OBJ items.
                                  #OBJ: allowAllPropertiesOnSameLine BOOL (def: false): allows no linebreak providing all
                                  #items are on same line
comma-style [STR] [OBJ]           #Newlines around comma
                                  #STR: 'last' (def), 'first'
                                  #OBJ: exceptions.TYPE BOOL: ignore for those types

no-dupe-keys                      #Avoid duplicate keys in OBJ
sort-keys [STR] [OBJ]             #Requires sorting OBJ keys
                                  #STR: 'asc' (def), 'desc'
                                  #OBJ:
                                  #  - caseSensitive BOOL (def: true)
                                  #  - natural BOOL (def: false): NUM sorting order
                                  #  - minKeys NUM (def: 2): no error if < number of keys
                                  #  - allowLineSeparatedGroups BOOL (def: false): can use newline to separated different sort groups

dot-notation [OBJ]                #Must use VAR.VAR2 not VAR["VAR2"]
                                  #OBJ:
                                  #  - allowKeywords BOOL (def: true): if false, reversed keywords must use VAR["VAR2"]
                                  #  - allowPattern REGEXP: VAR2 matching REGEXP can use either
no-useless-computed-key [OBJ]     #Avoid { [VAL_LIT]: VAL }
                                  #OBJ:
                                  #  - enforceForClassMembers BOOL (def: false): including inside CLASS
quote-props [STR] [OBJ]           #Quotes around { "VAR": VAL }
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'as-needed': required if must, e.g. non valid identifier
                                  #  - 'consistent': either all properties in OBJ use quotes, or none
                                  #  - 'consistent-as-needed': 'as-needed' + 'consistent'
                                  #OBJ (only if STR 'as-needed'):
                                  #  - keywords BOOL (def: false): must quote keywords
                                  #  - numbers BOOL (def: false): must quote numbers properties
                                  #  - unnecessary BOOL (def: true): if false, allows quotes even if not needed

object-shorthand [STR] [OBJ]      #Prefer { VAR } over { VAR: VAR } in OBJ, and { FUNC(...) } over { FUNC: function (...) }
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'never'
                                  #  - 'properties', 'methods': only one of them
                                  #  - 'consistent': either 'always' or 'never', but consistent per OBJ
                                  #  - 'consistent-as-needed': 'always' if should be used. Otherwise, 'consistent'
                                  #OBJ:
                                  #  - avoidQuotes BOOL (def: false): avoid shorthand if VAR is quoted
                                  #  - ignoreConstructors BOOL (def: false): avoid capitalized functions
                                  #  - avoidExplicitReturnArrows BOOL (def: false): also avoid { FUNC: (...) => ... }
                                  #  - methodsIgnorePattern 'REGEX'
no-useless-rename [OBJ]           #Prefer { VAR } over { VAR: VAR }, in destructuring
                                  #OBJ:
                                  #  - ignoreDestructuring|Import|Export BOOL (def: false):
                                  #    ignore for a specific type of destructuring
prefer-destructuring [OBJ] [OBJ2] #Use OBJ|ARR destructuring when possible
                                  #OBJ: [VariableDeclarator|AssignmentExpression.]array|object BOOL (def: true)
                                  #OBJ2: enforceForRenamedProperties BOOL (def: false): must use destructuring when property
                                  #is renamed by the declaration, e.g. const { VAR: VAR2 } = OBJ;
unicorn/consistent-destructuring ##Be consistent over whether to use OBJ|ARR destructuring or not
unicorn/no-unreadable-array-     ##Avoid ARR destructuring with empty elements like [,,VAR] = ARR
 destructuring                   ##One empty element at beginning still allowed.
                                 ##Should sets `prefer-destructuring` rule OBJ.array to `false` to avoid conflicts
no-empty-pattern                  #Avoid empty destructuring, e.g. const {VAR: {}} = VAL
unicorn/no-object-as-default-
 parameter                       ##Avoid default argument = {...}. Prefer destructuring {VAR = ..., VAR2 = ...}

no-new-object                     #Avoid new Object()

no-unsafe-optional-chaining [OBJ] #If OBJ2?.VAR, VAR might be undefined, i.e. do not allow using as:
                                  #  - a FUNC without ?.(...) or ??
                                  #  - an OBJ2 without ?. or ??
                                  #  - a NUM without ??, if OBJ.disallowArithmeticOperators true (def: false)

prefer-object-has-own            ##Prefer Object.hasOwn() over OBJ.hasOwnProperty()
unicorn/                         ##Prefer Object.fromEntries() over similar ARR.reduce()
 prefer-object-from-entries [OBJ]##OBJ:
                                 ##  - functions 'VAR'_ARR: additional functions checked.
                                 ##    Always checked: lodash|_.fromPairs()



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          INHERITANCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-useless-constructor            #Avoid empty constructors
constructor-super                 #Avoid super() in constructor if not child TYPE. Requires it otherwise.
no-this-before-super              #Avoid this before super(), in child TYPE constructor
no-constructor-return             #Do not return values in constructors

new-parens [STR]                  #Forces new TYPE(), instead of new TYPE
                                  #STR: 'always' (def) or 'never'

no-useless-call                   #Avoid OBJ.FUNC.call|apply(OBJ, ...) or FUNC.call|apply(null|undefined, ...)
no-extra-bind                     #Avoid FUNC.bind() if FUNC does not use this
no-invalid-this [OBJ]             #Avoid this outside methods
                                  #OBJ:
                                  #  - capIsConstructor BOOL (def: true): ignores functions that starts with uppercase
class-methods-use-this [OBJ]      #CLASS methods must use "this"
                                  #OBJ:
                                  #  - exceptMethods "FUNC"_ARR
                                  #  - enforceForClassFields BOOL (def: true)
consistent-this [STR]             #Variables assigned with "this" must be named 'VAR' (def: 'that')
unicorn/no-this-assignment        #Do not assign `this` to a variable
unicorn/no-static-only-class      #No CLASS with only static methods

no-class-assign                   #Avoid reassigning variables created by ClassDeclaration

no-dupe-class-members             #Avoid duplicate class members

no-proto                          #Avoid __proto__ (prefer get|setPrototypeOf())
no-prototype-builtins             #Avoid OBJ.METHOD(...) (for builtin OBJ methods)
                                  #Use {}.METHOD.call(OBJ, ...) instead
                                  #The reason: it works on OBJ created with Object.create(null)
unicorn/prefer-prototype-methods ##Prefer Object|Array.prototype.METHOD.call|apply(...) over OBJ|ARR.METHOD.call|apply(...)

no-extend-native [OBJ]            #Avoid extending native types
                                  #OBJ: exceptions 'TYPE'_ARR

no-unused-private-class-members   #Avoid unused #VAR class properties

max-classes-per-file [NUM|OBJ]    #Max NUM (def: 1) CLASS per file
                                  #OBJ:
                                  #  - max NUM
                                  #  - ignoreExpressions BOOL (def: false): ignore anonymous CLASSes
fp/no-class                      ##Avoid class
fp/no-this                       ##Avoid this
unicorn/
 no-array-method-this-arguments  ##Avoid this in ARRAY.FUNC(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ARRAYS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


array-bracket-newline [STR|OBJ]   #Linebreaks inside []:
                                  #  - 'always' (def), 'never', 'consistent'
                                  #  - { multiline: true } (def): required if some items are separated by newline
                                  #  - { minItems: NUM } (def: null): required if >= NUM items
array-element-newline [STR] [OBJ] #Linebreaks between ARR items. Same conf|defaults as array-bracket-newline
                                  #Can also use OBJ.ArrayExpression|ArrayPattern.* instead of OBJ.* to limit to EXPR or
                                  #to destructuring
comma-dangle [STR] [OBJ]          #Trailing commas
                                  #STR:
                                  #  - 'never' (def)
                                  #  - 'always'
                                  #  - 'only-multiline': allows if not single-line
                                  #  - 'always-multiline': requires if not single-line
                                  #  - 'ignore'
                                  #OBJ: arrays|objects|imports|exports|functions STR: same but only for ARR, OBJ, import,
                                  #export, arguments|parameters

no-sparse-arrays                  #Avoid sparse arrays

array-callback-return [OBJ]       #[TYPED_]ARR.from|every|some|filter|find[Index]|[flat]map|reduce[Right]|sort() must
                                  #have a return statement
                                  #OBJ:
                                  #  - allowImplicit BOOL: if false (def), forbid "return" with no VAL
                                  #  - checkForEach BOOL: if true (def: false), forbid "return" in [TYPED_]ARR.forEach
unicorn/prefer-includes          ##Prefer ARR|STR.includes() over ARR|STR.indexOf|some()
unicorn/prefer-array-flat-map    ##Prefer ARR.flatMap() over ARR.map().flat()
unicorn/prefer-array-flat        ##Prefer ARR.flat() over [].concat()
unicorn/no-array-reduce [OBJ]    ##Prefer ARR.map|filter() over ARR.reduce()
                                 ##OBJ:
                                 ##  - allowSimpleOperations BOOL (def: true): allow ARR.reduce() if single statement
unicorn/prefer-negative-index    ##Prefer ARR|STR|TYPED_ARR.slice|splice(-NUM, ...) instead of slice|splice(ARR|STR|TYPED_ARR.length - NUM, ...)
unicorn/prefer-array-find        ##Prefer ARR.find() over ARR.filter()[0]
unicorn/prefer-array-some        ##Prefer ARR.some() over ARR.find()
unicorn/prefer-array-index-of    ##Prefer ARR.indexOf() over ARR.findIndex() when possible
unicorn/no-useless-length-check  ##Avoid ARR.length check if followed by ARR.some|every()
unicorn/no-array-for-each        ##Prefer for loop over ARR.forEach()
unicorn/no-array-push-push [OBJ] ##Combine multiple ARR.push() calls into one
                                 ##OBJ:
                                 ##  - ignore 'VARR'_ARR (def: ['stream', 'this', 'this.stream'])

no-array-constructor              #Avoids [new] Array(VAL,...)
                                  #[new] Array(NUM) is still allowed
unicorn/no-new-array             ##Same but also forbid [new] Array(NUM)
unicorn/prefer-set-has           ##Prefer SET.has() over ARR.includes()
unicorn/
 require-array-join-seperator    ##Require argument to ARR.join()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


quotes [STR] [OBJ]                #Prefer quoting style
                                  #STR: 'double' (def), 'single', 'backtick'
                                  #OBJ:
                                  #  - avoidEscape BOOL (def: false): allow different quote if STR contains the preferred quote
                                  #  - allowTemplateLiterals BOOL: if false (def), allow `STR` only if contains ${VAR}

no-multi-str                      #Avoid multiline STR
no-useless-concat                 #Avoid STR_LIT + STR2_LIT
prefer-template                   #Avoid STR + STR2, prefer `...`
no-template-curly-in-string       #Avoid ${} inside "" or ''

unicorn/*                        ##Module "eslint-plugin-unicorn" (43.0.2)

unicorn/
 prefer-string-starts-ends-with  ##Must use STR.startsWith|endsWith() when possible
unicorn/
 prefer-string-trim-start-end    ##Prefer STR.trimStart|End() over STR.trimLeft|Right()
unicorn/prefer-string-slice      ##Must use STR.slice() instead of STR.substr|substring()
unicorn/prefer-string-replace-all##Must use STR.replaceAll(STR2) instead of STR.replace(/REGEXP/g) when REGEXP can be a literal STR2
unicorn/prefer-at [OBJ]          ##Prefer STR|ARR.at(NUM) over STR|ARR[NUM]
                                 ##OBJ:
                                 ##  - checkAllIndexAccess BOOL: if false (def), only if NUM is negative
                                 ##  - getLastElementFunctions 'FUNC_VARR'_ARR (def: ['_|lodash|underscore.last']): also check
                                 ##    specific methods known to access from the end
unicorn/prefer-code-point        ##Prefer STR.codePointAt() and String.fromCodePoint() over STR.charCodeAt() and String.fromCharCode()

unicorn/no-hex-escape            ##Avoid \x... (prefer \u....)
unicorn/number-literal-case      ##Consistent casing for 0x... 0o... 0b... and NUMe...
unicorn/escape-case              ##Must be uppercase after \x... \u...

unicorn/no-console-spaces        ##Avoid console.log(STR, STR2) where STR or STR2 have trailing spaces

unicorn/string-content [OBJ]     ##Avoid specific substrings in any STR
                                 ##OBJ:
                                 ##  - patterns OBJ:
                                 ##     - key is substring to avoid|replace
                                 ##     - value is either:
                                 ##        - OBJ2:
                                 ##           - suggest STR: what to replace to
                                 ##           - message STR
                                 ##           - fix BOOL (def: true): autofix
                                 ##        - BOOL|STR: shortcut for suggest|fix

unicorn/prefer-json-parse-buffer ##Prefer JSON.parse(BUFFER) over JSON.parse(STR) after fs.readFile()
unicorn/
 text-encoding-identifier-case   ##Use 'utf8' and 'ascii' instead of 'utf-8' or uppercase versions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGEXP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-useless-escape                 #Avoid unnecessary escape sequences in STR|REGEXP
unicorn/regex-shorthand [OBJ]    ##Prefer \d \D \w \W \s \S over [0-9] etc.
                                 ##OBJ:
                                 ##  - sortCharacterClasses BOOL (def: true): sort characters inside [...]
unicorn/no-unsafe-regex          ##Avoid using too many * + or {} as it increases complexity exponentially
no-control-regex                  #Avoid control characters in REGEXP
no-div-regex                      #Avoid unescaped = at beginning of REGEXP
no-empty-character-class          #Avoid empty [] in REGEXP
no-regex-spaces                   #Avoid multiple spaces in REGEXP (use {NUM} instead)
no-misleading-character-class     #Avoid using S_CODEPOINT in . or [] without /REGEXP/u
                                  #Avoid using Emojis, regional symbols and combining characters in . or []
no-useless-backreference          #Avoid \NUM that matches nothing
no-invalid-regexp [OBJ]           #Avoid invalid REGEXP
                                  #OBJ: allowConstructorFlags STR_ARR (allowed flags, def is all)
prefer-regex-literals [OBJ]       #Avoid new RegExp('...') (but new RegExp(VAR) is ok)
                                  #OBJ:
                                  #  - disallowRedundantWrapping BOOL (def: false): avoid new RegExp(REGEXP)

require-unicode-regexp            #Must use /REGEXP/u
prefer-named-capture-group        #Must use /(?<NAME>...)/ instead of /(...)/

wrap-regex                        #Must write (/REGEXP/) not /REGEXP/

unicorn/prefer-regexp-test       ##Prefer REGEXP.test() over REGEXP.exec() or STR.match() when only need BOOL return value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-floating-decimal               #Avoid .NUM or NUM. (use 0.NUM or NUM)
unicorn/no-zero-fractions        ##Avoid NUM.0 or NUM.*0

unicorn/numeric-separators-style ##Use numeric thousands separators
 [OBJ]                           ##OBJ:
                                 ##  - TYPE (among binary|octal|number|hexadecimal for base 2|8|10|16):
                                 ##     - groupLength NUM (def: 3 for base 10, 4 for base 2|8, 2 for base 16)
                                 ##     - minimumDigits NUM (def: 5 for base 10, 0 for others)
                                 ##     - onlyIfContainsSeparator BOOL (def: false): only if at least one numeric separator is used

no-octal                          #Avoid 0... (prefer 0o...)
no-octal-escape                   #Avoid \NNN octal escape
no-nonoctal-decimal-escape        #Avoid \8 and \9
prefer-numeric-literals           #Avoid parseInt(STR, 2|8|16) when 0b... 0o... or 0x... can be used instead
radix [STR]                       #With parseInt(..., RADIX):
                                  #  - STR 'always' (def): require RADIX
                                  #  - STR 'as-needed': forbid RADIX if 10
prefer-number-properties [OBJ]    #Use 'Number.' in front of parseInt|parseFloat|isNaN|isFinite|NaN|Infinity
                                 ##OBJ:
                                 ##  - checkInfinity BOOL (def: true)
no-loss-of-precision              #Avoid very large integer, or very large fractional part, which are lost in DOUBLE float precision
unicorn/require-number-to-fixed-
 digits-argument                 ##Requires argument to NUM.toFixed()

use-isnan [OBJ]                   #Must test NaN with [Number.]isNaN()
                                  #OBJ:
                                  #  - enforceForSwitchCase BOOL (def: true): forbid case NaN and switch(NaN)
                                  #  - enforceForIndexOf BOOL (def: false): forbid ARR.[last]indexOf(NaN)
no-compare-neg-zero               #Avoid VAL === -0 (prefer Object.is(VAL, -0))

prefer-exponentiation-operator    #Must use ** not Math.pow()
no-bitwise [OBJ]                  #Avoids ^ ~ << >> >>> <<< & | (possible typo for && ||)
                                  #OBJ:
                                  #  - allow 'OP'_ARR: exceptions
                                  #  - int32Hint BOOL: allow |0 (used sometimes for typecasting)
unicorn/prefer-math-trunc        ##Prefer Math.trunc() over bitwise equivalents
unicorn/prefer-modern-math-apis  ##Prefer Math.log10|2() over Math.log() when possible


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SYMBOLS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-new-symbol                     #Avoid new Symbol() (prefer Symbol())
symbol-description                #Avoid Symbol(), prefer Symbol(STR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DATE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


unicorn/prefer-date-now          ##Prefer Date.now() over new Date().getTime()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


n/handle-callback-err [STR]       #Must handle ERROR in Node.js callbacks FUNC(ERROR[, VAL])
                                  #STR is ERROR name (def: 'err'), which can be 'NAME' or '^REGEXP' (must start with ^)
n/callback-return [STR_ARR]       #In Node.js callbacks FUNC(ERROR[, VAL]), must call return after firing FUNC()
                                  #'VARR'_ARR are possible FUNC names (def: 'callback', 'cb', 'next')
n/no-callback-literal            ##FUNC called 'cb|callback' first argument must be undefined|null|ERROR

prefer-promise-reject-errors [OBJ]#Must pass ERROR to Promise.reject()
                                  #OBJ: allowEmptyReject BOOL (def: false): also allow undefined
no-promise-executor-return        #Do not return from new Promise() FUNC
require-await                     #Avoid async functions with no await
no-await-in-loop                  #await inside loops (prefer Promise.all())
no-return-await                   #Avoid return await VAL (it does same as return VAL)
no-async-promise-executor         #Avoid new Promise(async FUNC)
unicorn/no-useless-promise-
 resolve-reject                  ##Avoid yield Promise.resolve|reject(VAL) inside async function*
unicorn/prefer-top-level-await   ##Use top-level await when possible
unicorn/
 no-await-expression-member      ##Avoid (await PROMISE).PROP, use destructuring instead
unicorn/no-thenable              ##Avoid OBJ with a PROP named "then"

require-atomic-updates [OBJ]      #Avoid GLOBAL_VAR = await FUNC(GLOBAL_VAR) as it creates a delay between GLOBAL_VAR
                                  #being read and written, i.e. introducing race conditions
                                  #OBJ:
                                  #  - allowProperties BOOL (def: false): allow OBJ.VAR

promise/*                        ##Module "eslint-plugin-promise" (6.0.0)
promise/catch-or-return [OBJ]    ##If PROMISE.then(FUNC), must call PROMISE.catch(FUNC2)
                                 ##OBJ:
                                 ##  - allowThen BOOL (def: false): allow PROMISE.then(FUNC, FUNC2) too
                                 ##  - allowFinally BOOL (def: false): allow PROMISE.finally() if PROMISE.catch() was used
                                 ##  - terminationMethod 'FUNC'_ARR: alternative name for 'catch'
promise/always-return            ##Inside PROMISE.then() FUNC, must explicitely return or throw
promise/param-names              ##new Promise() FUNC parameters must be named '[_]resolve' and '[_]reject'
promise/valid-params             ##PROMISE.then|catch|finally() and Promise.all|race|resolve|reject() must have a
                                 ##correct number of arguments
promise/no-new-statics           ##Avoid new Promise.all|race|resolve|reject()
promise/no-native                ##Require Promise to come from a library, as opposed to be an implicit global
promise/no-return-wrap [OBJ]     ##Inside PROMISE.then|catch() FUNC, avoid returning|throwing Promise.resolve|reject(VAL)
                                 ##If OBJ.allowReject true (def: false), allow return Promise.reject()
promise/no-return-in-finally     ##Avoid return in finally
promise/no-nesting               ##Avoid PROMISE.then|catch() inside another PROMISE2.then|catch()
promise/no-promise-in-callback   ##Avoid PROMISE inside of callbacks
promise/no-callback-in-promise   ##Avoid callbacks inside of PROMISE
 [OBJ]                           ##OBJ: exceptions "FUNC"_ARR
promise/avoid-new                ##Avoid new Promise()
promise/prefer-await-to-then     ##Avoid PROMISE.then|catch|finally(), prefer await PROMISE
                                 ##await PROMISE.then|catch|finally() is allowed
promise/prefer-await-to-callbacks##Avoid callbacks, prefer await PROMISE

no-sync [OBJ]                     #Avoid sync methods from Node.js core modules
                                  #OBJ: allowAtRootLevel BOOL (def: false)
n/prefer-promises/fs             ##Use FS.promises.* instead of FS.*
n/prefer-dns/fs                  ##Use DNS.promises.* instead of DNS.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import/*                         ##Node module "eslint-plugin-import" (2.26.0)
                                 ##Most seem to work for both require() and import|export,
                                 ##although mostly targeting import|export
                                 ##Uses the following CONF.settings:
                                 ##  - import/extensions '.EXT'_ARR (def: ['.d.ts', '.ts', '.tsx', '.js', '.jsx']): after resolvers have been applied
                                 ##  - import/ignore 'REGEXP'_ARR: ignore those files
                                 ##  - import/core-modules 'MDL'_ARR:
                                 ##     - ignore those 'MDL'
                                 ##     - resolvers include their own list of core modules
                                 ##  - import/external-module-folders 'PATH'_ARR (def: ['node_modules']): external libraries
                                 ##  - import/internal-regexp 'REGEXP': internal libraries in a monorepo setup. Matched against package name
                                 ##  - import/parsers.PARSER '.EXT'_ARR: use a different CONF.parser for those files
                                 ##  - import/resolver RESOLVER or { RESOLVER: RESOLVER_OPTS }
                                 ##     - uses package eslint-import-resolver-RESOLVER
                                 ##     - resolvers do preprocessing each imported path
                                 ##     - available:
                                 ##        - webpack (0.13.2), with RESOLVER_OPTS: config STR|OBJ (def: use webpack.config.js), env ENV
                                 ##        - node (0.3.6), with RESOLVER_OPTS:
                                 ##           - extensions '.EXT'_ARR
                                 ##           - paths STR_ARR (like NODE_PATH)
                                 ##           - moduleDirectory STR_ARR (alternate names for node_modules)
                                 ##        - jest (3.0.2):
                                 ##           - with jest module mocking's require()
                                 ##           - RESOLVER_OPTS:
                                 ##              - jestConfigFile 'PATH'
                                 ##        - jspm, babel, meteor, react-native, typescript
                                 ##  - import/cache OBJ: lifetime NUM (in secs, def: 30)

n/*                              ##Module "eslint-plugin-n" (15.2.5)
                                 ##Uses the following CONF.settings, which are defaults to RULE_CONF:
                                 ##  - allowModules 'MDL'_ARR: ignores those modules
                                 ##  - tryExtensions '.EXT'_ARR (def: '.js', '.json', '.node'): modules file extensions
                                 ##  - convertPath OBJ_ARR:
                                 ##     - replace ['FROM_REGEXP', 'TO_FILE']: first convert paths using
                                 ##       STR.replace('FROM_REGEXP', 'TO_FILE')
                                 ##     - include|exclude GLOB_ARR
                                 ##  - resolvePaths "DIR"_ARR: additonal dirs to try when resolving paths

import/no-unresolved [OBJ]       ##Avoid import 'PATH' of file that do not exist
                                 ##OBJ:
                                 ##  - commonjs BOOL (def: false): also check require()
                                 ##  - amd BOOL (def: false): also check AMD define|require()
                                 ##  - ignore 'REGEXP'_ARR: whitelists
                                 ##  - caseSensitive BOOL (def: true)
                                 ##  - caseSensitiveStrict BOOL: if false (def), caseSensitive does not check check of cwd
n/no-missing-require [OBJ]       ##Avoid require('PATH') if file at 'PATH' does not exist
                                 ##OBJ: allowModules, tryExtensions, resolvePaths (see above)
n/no-unpublished-require [OBJ]   ##Avoid require('PATH') if file is not in package.json 'files', or it is in .npmignore
                                 ##Also files in package.json 'files' cannot require devDependencies
                                 ##OBJ: allowModules, tryExtensions, convertPath (see above)
n/no-missing-import [OBJ]        ##Same as no-missing-require, but for ES6 import
n/no-unpublished-import [OBJ]    ##Same as no-unpublished-require, but for ES6 import
import/no-unused-modules [OBJ]   ##Avoid exports that are not imported anywhere (if OBJ.unusedExports true)
                                 ##Works with dynamic imports, providing the argument is a STR
                                 ##Also report modules with no exports (if OBJ.missingExports true)
                                 ##OBJ:
                                 ##  - src 'PATH'_ARR (def: process.cwd()): to include
                                 ##  - ignoreExports 'PATH'_ARR: to exclude (always excluded: PACKAGE.main|browser|bin, but does not perfectly work)
import/named [OBJ]               ##Avoid import { VAR } from 'PATH', if PATH does not export VAR
                                 ##OBJ:
                                 ##  - commonjs BOOL (def: false): also CommonJS
import/default                   ##Avoid import VAR from 'PATH', if PATH does not export default VAR
import/namespace [OBJ]           ##Avoid import * as OBJ2 from 'PATH', then using OBJ2.VAR, if PATH does not export VAR
                                 ##Also, if OBJ.allowComputed false (def), avoid OBJ2['VAR']
import/no-named-as-default       ##Avoid import VAR from 'PATH', if PATH exports both a default VAR,
                                 ##but also a named VAR named the same
import/no-named-as-default-member##Avoid import VAR from 'PATH', then using VAR.VAR2, if PATH exports both a default VAR,
                                 ##but also a named VAR2
unicorn/prefer-export-from [OBJ] ##Prefer `export ... from` instead of `import` then `export`
                                 ##OBJ:
                                 ##  - ignoreUsedVariables BOOL (def: false): not if VAR is used inside the file
unicorn/import-style [OBJ]       ##Enforces specific destructuring style for import|require
                                 ##OBJ:
                                 ##  - styles.MODULE
                                 ##     - either:
                                 ##        - STYLE BOOL (def: false): allow specific STYLE among:
                                 ##           - default: import VAR from 'MODULE'
                                 ##           - named: import {VAR} from 'MODULE'
                                 ##           - namespace: import * as VAR from 'MODULE'
                                 ##           - unassigned: import 'MODULE'
                                 ##        - false: ignore
                                 ##     - def:
                                 ##        - util: {named:true}
                                 ##        - path|chalk: {default:true}
                                 ##  - extendDefaultStyles BOOL: if true (def), default styles are extended, not overriden
                                 ##  - checkRequire BOOL (def: true): if false, ignore require()
                                 ##  - checkImport BOOL (def: true): if false, ignore ESM import
                                 ##  - checkDynamicImport BOOL (def: true): if false, ignore ESM import()
                                 ##  - checkExportFrom BOOL: if false (def), ignore ESM export ... from

import/no-namespace [OBJ]        ##Avoid import *
                                 ##OBJ:
                                 ##  - 'GLOB'_ARR: modules to ignore
import/no-named-default          ##Avoid import { default as VAR }
import/no-named-export           ##Avoid non-default export
import/prefer-default-export     ##Must use export default VAL instead of export VAL
import/no-default-export         ##Inverse: must use export VAL instead of export default VAL
n/exports-style [STR] [OBJ]      ##Must use only module.exports or only exports
                                 ##STR: 'module.exports|exports': requires either
                                 ##OBJ: allowBatchAssign BOOL (def: false): allows module.exports = exports = VAL
import/no-anonymous-             ##Avoid export of anonymous VAL: NUM|STR|BOOL, [], {}, () => {}, class {}, function () {}
 default-export [OBJ]            ##OBJ: allowLiteral|Array|Object|ArrowFunction|CallExpression|AnonymousFunction|AnonymousClass BOOL
                                 ##(def: false)
n/no-exports-assign              ##Avoid `exports = VAL` (instead of `module.exports = VAL`)
no-import-assign                 ##Avoid `import VAR ...` then `VAR = VAL`

import/extensions [STR] [OBJ]    ##Avoid or require specifying file extensions in imported|required files
                                 ##STR: 'never' (def), 'always' or 'ignorePackages' (like always except when requiring modules)
                                 ##OBJ:
                                 ##  - EXT 'never|always|ignorePackages'
                                 ##  - ignorePackages BOOL
                                 ##Ignores files that have siblings that differ only by the file extension.
n/file-extension-in-import       ##Avoid or require specifying file extensions in imported|required files
 [STR] [OBJ]                     ##STR: 'always' (def) or 'never'
                                 ##Modules never report.
                                 ##OBJ:
                                 ##  - tryExtensions STR_ARR (def: ['.js', '.json', '.node'])
                                 ##  - '.EXT' 'always|never'
import/no-absolute-path [OBJ]    ##Avoid import|require absolute paths
                                 ##OBJ: esmodule|commonjs|amd BOOL (def: true|true|false)
import/no-internal-modules [OBJ] ##Avoid import|require of '.../DIR/FILE', as opposed to '.../DIR' or '.../FILE'
                                 ##OBJ: allow|forbid 'REGEXP'_ARR
import/no-relative-parent-imports##Avoid '../DIR|FILE'
import/no-useless-path-segments  ##Avoid import|require with paths that could be normalized, e.g. '.../../', duplicate slashes
 [OBJ]                           ##or trailing slashes
                                 ##OBJ:
                                 ##  - noUselessIndex BOOL (def: false): no 'index.js' filenames
                                 ##  - commonjs BOOL (def: false): for require() too
import/no-relative-packages      ##Monorepo packages must be imported as 'PACKAGE' nor '../PATH'

no-duplicate-imports [OBJ]        #Avoid duplicate module imports, e.g. import ... from 'MDL'; import ... from 'MDL';
                                  #OBJ: includeExports BOOL (def: false): also forbids
                                  #import ... from 'MDL'; export ... from 'MDL';
import/no-duplicates [OBJ]       ##Avoid import|require of twice the same file
                                 ##OBJ:
                                 ##  - considerQueryString BOOL (def: false)
import/export                    ##Avoid exporting several times the same VAR
import/no-self-import            ##Must not import|require itself
import/no-cycle [OBJ]            ##Must not import|require circular dependencies
                                 ##OBJ:
                                 ##  - commonjs|amd BOOL (def: false):
                                 ##     - also check require() and AMD define|require()
                                 ##     - but actually mostly work for ES modules
                                 ##  - maxDepth NUM (def: '∞')
                                 ##  - ignoreExternal BOOL (def: false): does not check require('MODULE/PATH')
import/group-exports             ##Must use a single export|module.exports declaration

import/no-extraneous-dependencies##Avoid import|require of external dependencies not declared in package.json's
 [OBJ]                           ##dependencies|devDependencies|optionalDependencies|peerDependencies|bundledDependencies
                                 ##OBJ:
                                 ##  - devDependencies|optionalDependencies|peerDependencies|bundledDependencies BOOL
                                 ##    (def: true, true, false, true) or GLOB_ARR (which files can use them)
                                 ##  - packageDir DIR[_ARR]: package.json directory
n/no-extraneous-require [OBJ]    ##Avoid require('MDL') if 'MDL' is not declared in package.json
                                 ##OBJ: allowModules (see above)
n/no-extraneous-import [OBJ]     ##Same as no-extraneous-require, but for ES6 import

import/first                     ##All import|require must be on top
import/exports-last              ##All export must be at bottom
sort-imports [OBJ]                #Sort import declarations according to their types.
                                  #OBJ:
                                  #  - ignoreCase BOOL (def: false)
                                  #  - memberSyntaxSortOrder STR_ARR (def: none, all, multiple, single), among:
                                  #     - 'none': import 'MDL'
                                  #     - 'all': import * from 'MDL'
                                  #     - 'multiple': import {...} from 'MDL'
                                  #     - 'single': import VAL from 'MDL'
                                  #  - ignoreMemberSort BOOL: if false (def), must also alphabetically sort VARs in
                                  #    import { VAR, ... } from 'MDL'
                                  #  - ignoreDeclarationSort BOOL: same for import 'MDL'
                                  #  - allowSeparatedGroups BOOL (def: false): only sort imports if consecutive with no black line or comment in-between
n/no-mixed-requires [OBJ]         #Must group top-level declarations into groups:
                                  #  - core modules
                                  #  - local module
                                  #  - node_modules
                                  #  - VAR = EXPR
                                  #  - uninitialized VAR
                                  #  - others
                                  #OBJ:
                                  #  - grouping BOOL (def: true)
                                  #  - allowCall BOOL (def: true): cannot do require(...).FUNC(...)
import/order [OBJ]               ##Must order import|require
                                 ##OBJ:
                                 ##  - groups ARR of STR (enforce ordering) or STR_ARR (siblings), among (default follows):
                                 ##     - 'builtin': core modules
                                 ##     - 'external': external libraries
                                 ##     - 'internal': 'DIR/...'
                                 ##     - 'parent': '../...'
                                 ##     - 'sibling': './...'
                                 ##     - 'index': './'
                                 ##     - 'object': "import VAR2 = NAMESPACE[.VARR]" (TypeScript)
                                 ##     - 'type': "import type" (TypeScript)
                                 ##     - 'unknown': anything else that might happen when using loaders, e.g. '!...'
                                 ##  - pathGroups OBJ_ARR: add specific files to groups:
                                 ##     - group 'GROUP'
                                 ##     - pattern 'GLOB'
                                 ##     - patternOptions OBJ: minimatch options
                                 ##     - position 'before|after' (def: inside group)
                                 ##  - pathGroupsExcludedImportTypes 'GROUP'_ARR (def: ['builtin', 'external']): exclude those
                                 ##    groups from pathGroups
                                 ##  - newlines-between STR: newlines between import|require, among 'always' (between groups),
                                 ##    'always-and-inside-groups' (between any import|require), 'never', 'ignore' (def)
                                 ##  - alphabetize:
                                 ##     - order 'asc', 'desc' or 'ignore' (def): alphabetical sorting within each group
                                 ##     - caseInsensitive BOOL (def: false)
                                 ##  - warnOnUnassignedImports BOOL (def: false): include unassigned imports
import/newline-after-import [OBJ]##Must have OBJ.count NUM (def: 1) newlines after last import|require

import/unambiguous               ##Make sure file types matches parserOptions.sourceType 'script|module'

n/global-require                  #require() must be at top-level scope
n/no-new-require                  #Avoid new require()
import/no-dynamic-require [OBJ]  ##Avoid require(STR) where STR is computed, i.e. not a literal string
                                 ##OBJ:
                                 ##  - esmodule BOOL (def: false): also import()

import/no-commonjs [OBJ]         ##Avoid require() or module.exports
                                 ##OBJ:
                                 ##  - allowRequire BOOL (def: false): allow require()
                                 ##  - allowConditionalRequire BOOL (def: true): allow require() inside if
                                 ##  - allowPrimitiveModules BOOL (def: false): allow module.exports = non-OBJ|FUNC
unicorn/prefer-module            ##Avoid require(), module.exports, 'use strict', __dirname|__filename
import/no-amd                    ##Avoid AMD defined|require()
import/no-import-module-exports  ##Avoid CommonJS module.exports and ESM import in same file
 [OBJ]                           ##OBJ:
                                 ##  - exceptions 'GLOB'_ARR. PACKAGE.main file is always excluded

import/no-webpack-loader-syntax  ##Avoid import|require using Webpack loader syntax, i.e. 'LOADER!...'
                                 ##Should use Webpack conf instead of polluting the code.

import/no-restricted-paths [OBJ] ##Blacklists import|require of any file inside some DIR when inside some specific DIR2
                                 ##OBJ:
                                 ##  - zones OBJ_ARR: target DIR_GLOB2, from DIR_GLOB, except DIR_GLOB_ARR, message STR
                                 ##  - basePath DIR3 (def: $PWD): of DIR2|DIR

unicorn/prefer-node-protocol     ##Prefer 'node:MDL' over 'MLD' for core modules
 [OBJ]                           ##OBJ:
                                 ##  - checkRequire BOOL: if true (def: false), ignore CommonJS, only check ES modules

unicorn/relative-url-style       ##Prefer new URL('PATH') over new URL('./PATH')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FILENAMES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


filenames/*                      ##Module "eslint-plugin-filenames" (1.3.0)
filenames/match-regex            ##Filenames must match REGEXP
 REGEXP [BOOL]                   ##Also check exported variables, unless BOOL true
unicorn/filename-case [OBJ]      ##Filenames cases must be OBJ:
                                 ##  - case 'CASE'
                                 ##  - cases.CASE BOOL
                                 ##CASE is 'kebabCase' (def), 'camelCase', 'snakeCase', 'pascalCase'
                                 ##Other OBJ:
                                 ##  - ignore STR|REGEXP[_ARR]
filenames/match-exported         ##Default exported variable must have same name as current file (or directory if index.js)
 [STR...] [STR2]                 ##Default exported variables are either:
                                 ##  - CommonJS: module.exports = VAR; but not module.exports = { ... }
                                 ##  - ES6: export default VAR; but not other export
                                 ##If variable name has different case than filenames, can specify with STR, among
                                 ##'snake', 'kebab', 'camel', 'pascal'
                                 ##STR2 is file suffix to ignore (apart from file extension)
filenames/no-index               ##No index.js

unicorn/no-empty-file            ##No files containing nothing or only comments.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


n/no-unpublished-bin [OBJ]       ##Avoid package.json 'bin' that is not in package.json 'files', or is in .npmignore
                                 ##OBJ: convertPath (see above)
n/shebang [OBJ]                  ##Make sure binaries specified in package.json "bin" have a shebang,
                                 ##and that it is valid.
                                 ##OBJ: convertPath (see above)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMPATIBILITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


compat/compat                    ##Avoid features unsupported by browsers, using current browserslist conf (see its doc)
                                 ##Can whitelist some features with CONF.settings.polyfills 'FEATURE_NAME'_ARR
                                 ##(see caniuse for what is "FEATURE_NAME").
                                 ##Node module 'eslint-plugin-compat' (4.0.2)

n/no-unsupported-features/TYPE   ##No JavaScript features unsupported for a given Node.js version
 [OBJ]                           ##OBJ:
                                 ##  - version RANGE (def: read package.json "engines" field) (def: '>=6.0.0')
                                 ##  - ignores VAL_ARR: whitelists (see list in online doc)
                                 ##TYPE:
                                 ##  - es-syntax: Stage 4 ES features that change JavaScript syntax
                                 ##  - es-builtins: Stage 4 ES features that add JavaScript features
                                 ##  - node-builtins: Node.js core modules
n/no-deprecated-api [OBJ]        ##Avoid deprecated Node.js core modules functions
                                 ##OBJ:
                                 ##  - ignoreModuleItems 'VAR[.FUNC]': whitelists
                                 ##  - ignoreGlobalItems 'VAR': whitelists
                                 ##  - version VERSION (def: PACKAGE.engines.node, or '>=8.0.0')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BLACKLIST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-restricted-imports             #Avoid import ... from 'MDL' using blacklisted STRM_ARR
 ...STR_ARR|OBJ_ARR               #Can also be OBJ:
                                  #  - paths VAL:
                                  #     - full path
                                  #     - VAL is either:
                                  #        - 'NAME'
                                  #        - OBJ:
                                  #           - name 'NAME'
                                  #           - importNames 'VAR'_ARR: specific exported variables
                                  #           - message 'ERROR'
                                  #  - patterns VAL:
                                  #     - same but as globbing patterns (including globstar) and !GLOB
                                  #     - OBJ.name 'NAME' -> OBJ.group 'GLOB'_ARR
                                  #  - caseSensitive BOOL (def: false)
no-restricted-exports [OBJ]       #Avoid export ... from 'MDL' using blacklisted OBJ.restrictedNamedExports STR_ARR
                                  #STR_ARR can include 'default'
n/no-restricted-require           #Avoid require('CORE_MODULE') from blacklisted ones
 ...'GLOB'_ARR|OBJ_ARR            #OBJ:
                                  #  - name 'GLOB'
                                  #  - message STR
n/no-restricted-import            #Same for import
import/no-nodejs-modules [OBJ]   ##Avoid Node.js core modules (e.g. if client-side code)
                                 ##OBJ: allow 'MDL'_ARR: whitelists

no-restricted-properties OBJ...   #Avoid custom OBJ2.VAR2, defined by OBJ...:
                                  #  - object 'OBJ2' (def: any)
                                  #  - property 'VAR2' (def: any)
                                  #  - message STR (error message, optional)
no-restricted-globals STR_ARR...  #Avoid specified global variables 'VAR'_ARR or OBJ_ARR: name 'VAR', message STR

no-restricted-syntax ARR...       #Avoid specified JavaScript features
                                  #ARR:
                                  #  - SELECTOR: like { selector SELECTOR }
                                  #  - OBJ:
                                  #     - selector SELECTOR
                                  #     - message STR: error message, optional

you-dont-need-lodash-underscore/ ##Avoid Underscore|Lodash when there is a ES6 equivalent
 RULE                            ##There is a RULE for each function, but can also use
                                 ##  extends:
                                 ##    - plugin:you-dont-need-lodash-underscore/all
                                 ##Checks:
                                 ##  - _.concat|[last]indexOf|join|reverse|fill|find[Index]|forEach|
                                 ##    every|filter|map|reduce[Right]|some|includes|slice|replace() (and aliases) ->
                                 ##    ARR.concat|[last]IndexOf|join|reverse|fill|find[Index]|forEach|
                                 ##    every|filter|map|reduce[Right]|some|includes|slice|replace()
                                 ##  - _.each() -> Object.entries(), ARR.forEach()
                                 ##  - _.size() -> ARR.length
                                 ##  - _.isNaN() -> Number.isNaN()
                                 ##  - _.isInteger() -> Number.isInteger()
                                 ##  - _.isArray() -> Array.isArray()
                                 ##  - _.isString|isFunction() -> typeof
                                 ##  - _.keys|assign|values|entries() -> Object.keys|assign|values|entries()
                                 ##  - _.toLower|toUpper|trim|repeat() -> STR.toLowerCase|toUpperCase|trim|repeat()
                                 ##  - _.flatten() -> ARR.flat()
                                 ##  - _.uniq() -> [...new Set()]
                                 ##  - _.first|last() -> ARR[] and ARR.slice()
                                 ##  - _.bind() -> FUNC.bind()
                                 ##  - _.omit|pick() -> { ...OBJ }
                                 ##  - _.startsWith|endsWith() -> STR.startsWith|endsWith()
                                 ##  - _.isNil|isNull|isUndefined() -> ==|=== null|undefined
                                 ##  - _.split() -> STR.split()
                                 ##  - _.takeRight|drop[Right]() -> ARR.slice()
                                 ##  - _.padStart|End() -> STR.padStart|End()
                                 ##  - _.upperFirst() -> STR[0].toUpperCase()
                                 ##  - _.throttle() -> small helper function
                                 ##  - _.get() -> OBJ?.VAR
                                 ##  - _.castArray() -> Array.isArray()
                                 ##Not checked:
                                 ##  - _.isString() -> typeof
                                 ##  - _.chunk() -> ARR.reduce()
                                 ##  - _.sortBy|orderBy() -> ARR.sort()
                                 ##  - _.pickBy() -> ARR.reduce()
                                 ##  - _.intersection|difference() -> ARR.reduce() + ARR.filter() + ARR.includes()
                                 ##  - _.times() -> Array.from()
                                 ##  - _.extend() -> Object.assign()
                                 ##  - _.sample() -> ARR[] + Math.random()
                                 ##  - _.isFinite() -> Number.isFinite()
                                 ##  - _.isEmpty() -> Object.keys().length
                                 ##  - _.keyBy() -> ARR.reduce()
                                 ##  - _.inRange() -> < >
                                 ##  - _.range() -> Array.from() or [...Array().keys()]
                                 ##  - _.flattenDeep() -> ARR.flat()
                                 ##  - _.partial() -> FUNC.bind()
                                 ##  - _.random() -> Math.random()
                                 ##  - _.clamp() -> Math.min|max()
                                 ##  - _.debounce() -> small helper function
                                 ##Node module "eslint-plugin-you-dont-need-lodash-underscore" (6.12.0)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TO AVOID            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


unicorn/no-null [OBJ]            ##Avoid null
                                 ##OBJ:
                                 ##  - checkStrictEquality BOOL: if false (def), ignore ===|!== null
fp/no-nil                        ##Avoid null|undefined, except in comparison
                                 ##Avoid VARs initialized to null|undefined
                                 ##Avoid FUNCs that return null|undefined (including no return statement)
unicorn/no-useless-undefined     ##Avoid undefined if could just be omitted
 [OBJ]                           ##OBJ:
                                 ##  - checkArguments BOOL (def: true): check FUNC arguments

no-void [OBJ]                     #Avoid void VAL
                                  #OBJ:
                                  #  - allowAsStatement BOOL (def: false): allow as statement but not as EXPR
no-with                           #Avoid "with"
no-caller                         #Avoid arguments.caller|callee
no-sequences [OBJ]                #Avoid comma operator, except in for(...) or if EXPR wrapped in parenthesis
                                  #OBJ:
                                  #  - allowInParentheses BOOL (def: true)
no-continue                       #Avoid continue statements
no-iterator                       #Avoid __iterator__ (non-standard)
no-console [OBJ]                  #Avoid console
                                  #OBJ: allow 'METHOD'_ARR (ignore if console.METHOD)
fp/no-events                     ##Avoid require('events')

no-eval [OBJ]                     #Avoid eval()
                                  #OBJ: allowIndirect BOOL (def: false): ignore if eval() is a FUNC_VAL
no-implied-eval                   #Avoid setTimeout|setInterval(STR)
no-new-func                       #Avoid new Function(STR)

no-buffer-constructor             #Avoid Buffer() or new Buffer()
unicorn/no-new-buffer            ##Avoid new Buffer() (prefer Buffer.from|alloc())
n/no-path-concat                  #Avoid __dirname|__filename + STR, use PATH.join|resolve()
n/no-process-env                  #Avoid process.env
n/no-process-exit                 #Avoid process.exit()
unicorn/no-process-exit          ##Same but allows if hashbang, or if inside process.on()

no-script-url                     #Avoid 'javascript:*' URLs
no-alert                          #Avoid alert|confirm|prompt()
unicorn/prefer-add-event-listener##Avoid on() and "on* = FUNC", use addEventListener|removeEventListener() instead
 [OBJ]                           ##OBJ:
                                 ##  - excludedPackages 'PKGNAME'_ARR
unicorn/
 no-invalid-remove-event-listener##Must be a FUNC reference, not new FUNC, to removeEventListener()
unicorn/prefer-event-target      ##Prefer EventTarget over EventEmitter

no-obj-calls                      #Avoid Math(), JSON(), Reflect(), Atomics() (those are not functions although capitalized)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           HTML/XML            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


html/*                           ##Node module 'eslint-plugin-html' (7.1.0)
                                 ##Allows parsing inside HTML|XML, but must adjust eslint --ext
                                 ##CONF.settings:
                                 ##  - html/html-extensions '.EXT'_ARR (def: .erb, .handlebars, .hbs, .htm, .html,
                                 ##    .mustache, .nunjucks, .php, .tag, .twig, .vue, .we)
                                 ##  - html/xml-extensions '.EXT'_ARR (def: .xml, .xhtml)
                                 ##  - html/fake-file-extension '.EXT' (def: true, i.e. '.js'): force specific extension
                                 ##  - html/javascript-mime-types STR_ARR|REGEXP
                                 ##    (def: /^(application|text)\/(x-)?(javascript|babel|ecmascript-6)$/i):
                                 ##    checked against <script type>
                                 ##  - html/javascript-tag-names 'TAG'_ARR (def: ['script'])
                                 ##  - html/indent NUM, 'tab' or '+NUM' (according to <script> indentation)
                                 ##  - html/report-bad-indent 'warn|error'
<!-- eslint-disable|enable -->   ##
<!-- eslint-disable-next-script
 -->                             ##


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MARKDOWN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


markdown/*                       ##Node module 'eslint-plugin-markdown' (3.0.0)
                                 ##Allows parsing inside Markdown
                                 ##Must specify ```js|javascript|jsx|node
                                 ##Must specify CONFIG.overrides OBJ_ARR:
                                 ##  - files ['**/*.md'], processor 'markdown/markdown'
                                 ##  - files ['**/*.md/*.js'] for the rules to ignore
<!-- eslint-* ... -->            ##Can add eslint comment as HTML comments before the ``` block
<!-- eslint-skip -->             ##Don't even parse next line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              DOM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


unicorn/prefer-query-selector    ##Prefer document.querySelector() over document.getElementById|ClassName|TagName()
unicorn/prefer-dom-node-append   ##Prefer NODE.append() over NODE.appendChild()
unicorn/prefer-dom-node-remove   ##Prefer NODE.remove() over NODE.removeChild()
unicorn/
 prefer-dom-node-text-content    ##Prefer NODE.textContent over ELEM.innerText
unicorn/prefer-keyboard-event-key##Prefer EVENT.key over EVENT.keyCode
unicorn/prefer-dom-node-dataset  ##Prefer ELEM.dataset over ELEM.setAttribute()
unicorn/prefer-modern-dom-apis   ##Prefer:
                                 ##  - NODE.replaceWith() over NODE.replaceChild()
                                 ##  - NODE.before() over NODE.insertBefore|AdjacentText|AdjacentElement()
unicorn/no-document-cookie       ##Prefer cookieStore over document.cookie
unicorn/require-post-message-
 target-origin                   ##Require 'ORIGIN'
