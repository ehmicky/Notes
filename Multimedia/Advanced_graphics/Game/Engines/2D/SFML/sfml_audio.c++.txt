
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   SFML_AUDIO   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

HEADER ==>              #<SFML/Audio.hpp>

CONCEPTS ==>            #Un son est un array (non compressé) de samples.
                        #Un sample est un signed integer (souvent 16 bits, plus
                        #c'est grand, plus il y a de précision dans l'amplitude)
                        #enregistrant une amplitude (volume) de son.
                        #Un son a un mouvement ondulatoire : il commence avec
                        #un sample d'environ 0, a plusieurs samples avec une
                        #amplitude positive, puis négative, puis à nouveau
                        #environ 0. Si le nombre total des samples de ce son est
                        #faible, sa fréquence est forte, et son son aigu ; 
                        #sinon, il est grave.
                        #Il y a un nombre prédéfini de samples dans une seconde
                        #(les CD utilisent 44100 samples par seconde), nommé
                        #sample rate (plus il est grand, plus clair est un son)
                        #Enfin, un fichier musical peut être composé de
                        #plusieurs de ces arrays concaténées, nommés channels : 
                        #1 pour mono, 2 pour stereo (gauche et droite), 8 pour 
                        #Dolby, qui envoie un son différent en fonction de 
                        #l'endroit.
                        #Une musique est la même chose, sauf qu'elle utilise un
                        #tampon (streaming)
                        #Extensions supportées : .ogg, .wav, .flac, .aiff,
                        #.au, .raw, .paf, .svx, .nist, .voc, .ircam, .w64,
                        #.mat4, .mat5, .pvf, .htk, .sds, .avr, .sd2, .caf,
                        #.wve, .mpc2k, .rf64
                        #Extensions non supportées : .wmv, .mp3

AudioResource           #Base classe abstraite pour les classes audio.

SoundBuffer             #Enfant de AudioResource et de Resource <SoundBuffer>.
                        #On peut faire un parallèle entre SoundBuffer / Sound et
                        #Image / Sprite. Désigne les ressources d'un son.

SOUNDBUFFER()           #Constructor vide.

SOUNDBUFFER.LoadFromFile#Associe SOUNDBUFFER au fichier musical dont le chemin
(STRING)                #est SOUNDBUFFER. 
SOUNDBUFFER.SaveToFile  #Enregistre SOUNDBUFFER dans le chemin STRING, avec
(STRING)                #le format en fonction de l'extension précisée.

SOUNDBUFFER.GetDuration #Renvoie la durée du son, en secondes, sous forme de
()                      #FLOAT_VAL.
SOUNDBUFFER.            
GetChannelsCount()      #Renvoie le nombre de channels, sous forme de UINT_VAL
SOUNDBUFFER.            
GetSampleRate()         #Renvoie le sample rate, sous forme de UINT_VAL
SOUNDBUFFER.            #Renvoie le nombre total de samples, sous forme de
GetSamplesCount()       #SIZE_T_VAL (deux fois plus si c'est stereo, etc.)
SOUNDBUFFER.GetSamples()#Renvoie un INT16_ADR vers l'ensemble des samples
                        #(formatés 16 bits donc) du son.

Sound::Status           #Enum désignant l'action d'un Sound
                        #Valeurs possibles :
Sound::Stopped          #Pas en lecture, ni en pause.
Sound::Paused           #En pause
Sound::Playing          #En lecture

Sound                   #Enfant de AudioResource, désignant un son, s'appuyant
                        #sur un SoundBuffer.

SOUND()                 #Constructor vide
SOUND(SOUNDBUFFER)      #Construit un SOUND lié à SOUNDBUFFER.

SOUND.SetBuffer         #
(SOUNDBUFFER)           #Associe SOUND à SOUNDBUFFER.
SOUND.ResetBuffer()     #N'associe plus SOUND à aucun SOUNDBUFFER.
SOUND.Play()            #Lit SOUND depuis le début s'il est stoppé, ou depuis
                        #le dernier sample s'il est en pause.
SOUND.Pause()           #Met en pause SOUND
SOUND.Stop()            #Stoppe SOUND

SOUND.GetStatus()       #Renvoie l'action de SOUND, sous forme de SOUND::STATUS

SOUND.SetLoop(BOOL_VAL) #Si BOOL_VAL == true, le SOUND sera joué en boucle.
                        #Sinon, non (défaut).
SOUND.SetPitch(FLOAT_VL)#Modifie le pitch de SOUND. Modifie en fait le sample
                        #rate en le multipliant par FLOAT_VAL. Ainsi, si
                        #FLOAT_VAL > 1, le son sera plus aigu et court, et
                        #inversement.
SOUND.SetVolume         #L'amplitude du son devient FLOAT_VAL (100 au début).
(FLOAT_VAL)             #Eviter d'avoir un FLOAT_VAL > 100.
SOUND.SetPlayingOffset  #Ne change pas l'action de SOUND, mais : s'il est en
(FLOAT_VAL)             #pause ou stoppé, la prochaîne fois qu'il sera lu, il
                        #commencera à la seconde FLOAT_VAL ; s'il est en 
                        #lecture, il retourne à la seconde FLOAT_VAL.

SOUND.GetLoop()         #
                        
SOUND.GetPitch()        #
SOUND.GetVolume()       #
SOUND.GetPlayingOffset()#Getters des setters.

SPATIALISATION DU SON   #Un son :
  ==>                   #  - est plus ou moins fort
                        #  - a une balance gauche/droite différente
                        #En fonction de sa position par rapport à un point de
                        #référence, qui est par défaut Listener.
                        #Par défaut tous les sons, et Listener, sont à 0,0,0,
                        #il n'y a donc pas de spatialisation.
                        #Cela semble ne marcher que sur les sons mono.

SOUND.SetPosition       #
(FLOAT_VAL1, FLOAT_VAL2,
FLOAT_VAL3)
SOUND.SetPosition       
(VECTOR3F)              #Modifie les coordonnées spatiaux de SOUND.
SOUND.RelativeToListener#Si BOOL_VAL == false (défaut), le point de référence
(BOOL_VAL)              #est Listener ; sinon, il s'agit toujours de 0,0,0.
SOUND.SetMinDistance    #Fait que l'atténuation du son ne commence qu'à une
(FLOAT_VAL)             #distance de FLOAT_VAL (défaut : 1)
SOUND.SetAttenuation    #Plus FLOAT_VAL est grand, plus l'atténuation du son est
(FLOAT_VAL)             #rapide (défaut : 1)

SOUND.GetPosition()     #
SOUND.
IsRelativeToListener()  #
SOUND.GetMinDistance()  #
SOUND.GetAttenuation()  #Getters des setters

Listener                #Désigne le point de référence pour la spatialisation
                        #des sons (doit être == personnage principal par 
                        #exemple)

Listener::SetPosition   #
(FLOAT_VAL1, FLOAT_VAL2,
FLOAT_VAL3)
SOUND.SetPosition       
(VECTOR3F)              #Modifie les coordonnées spatiaux du Listener.
Listener::SetTarget     #
(FLOAT_VAL1, FLOAT_VAL2,
FLOAT_VAL3)             #Modifie la direction dans laquelle regarde le Listener.
SOUND.SetTarget         #Par défaut 0,0,-1 (donc les sons sont inversés !).
(VECTOR3F)              #Seul la modification de z semble marcher.
Listener::
SetGlobalVolume         #Modifie le volume global de l'application. 100 par
(FLOAT_VAL)             #défaut. Ne pas mettre au-dessus de 100.

Listener::SetPosition() #
Listener::SetTarget()   #
Listener::
GetGlobalVolume()       #Getters des setters.

SoundStream::Chunk      #Désigne un morceau de son, utilisé par un SOUNDSTREAM.

SOUNDSTREAM::CHUNK.     #Pointeur vers les samples du SOUNDSTREAM::CHUNK, sous
Samples                 #forme d'INT16_ADR.
                        #Obtenu par exemple via SOUNDSTREAM.GetSamples() et/ou
                        #une arithmétique de pointeurs ou itérateur.
SOUNDSTREAM::CHUNK.     #Nombre de samples du SOUNDSTREAM::CHUNK, sous forme de
NbSample                #SIZE_T_VAL.

SoundStream             #Désigne un son en streaming. Enfant de Thread (dont il
                        #privatise les membres) et de Sound (dont il privatise
                        #les membres SetBuffer(), SetPitch(), SetVolume(), 
                        #SetPosition(), SetRelativeToListener(), 
                        #SetMinDistance(), SetAttenuation(), ResetBuffer(), et 
                        #les getters associés).
                        #Il s'agit d'une classe abstraite, qu'il faut dériver.
                        #Il faut redéfinir deux virtual CLASSFK : OnStart(),
                        #déclenchée lors d'un restart (redéfinition optionnelle,
                        #si on la redéfinie, remettre l'offset du son à 0 au
                        #moins) et OnGetDate(CHUNK), qui est appelé lorsqu'un
                        #nouveau CHUNK de son est requis, qu'il faut donc
                        #remplir. Puisqu'il faut le remplir, un SOUNDSTREAM
                        #doit donc lui-même avoir dans ses membres un
                        #SOUNDBUFFER, pour pouvoir disposer de samples, d'un
                        #sample rate, de l'offset courant, etc.
                        #Il peut aussi avoir un membre désignant la buffer 
                        #size, c'est-à-dire la taille de chaque CHUNK.
SOUNDSTREAM.Initialize  #Doit être appelé lors de l'initialisation sous la
(UINT_VAL1, UINT_VAL2)  #forme Initialize(BUFFERSTREAM.GetChannelsCount(), 
                        #BUFFERSTREAM.GetSampleRate()) pour que le SOUNDSTREAM
                        #fonctionne.
SOUNDSTREAM.OnStart     #Virtual CLASSFK que l'on doit redéfinir pour définir
(void)                  #l'action lors d'un restart (au moins faire en sorte
                        #que l'offset du SOUNDBUFFER interne soit remis à 0)
                    ----| Doit renvoyer false si erreur, true sinon.
SOUNDSTREAM.OnGetDate   #Virtual CLASSFK à redéfinir, appelée à chaque fois que
(CHUNK)                 #SOUNDSTREAM a nouveau besoin d'un CHUNK : il faut au
                        #moins remplir les deux membres de CHUNK pour désigner
                        #un nouveau morceau de son.
                    ----| Doit renvoyer false si erreur ou plus de chunks
                        | disponibles, true sinon.

Music                   #Enfant de SoundStream, définit une musique (comme un 
                        #Sound, mais avec un tampon). N'a pas les restrictions
                        #de SOUNDSTREAM (n'a pas besoin de redéfinir des
                        #virtual CLASSFK, etc.)

MUSIC([SIZE_T_VAL])     #Construit une MUSIC avec un buffer pouvant contenir
                        #SIZE_T_VAL samples (par défaut 44100)
MUSIC.OpenFromFile      #Associe MUSIC au fichier musical dont le chemin est
(STRING)                #STRING.
