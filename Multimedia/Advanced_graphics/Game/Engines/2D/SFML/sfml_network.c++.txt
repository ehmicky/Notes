
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   SFML_NETWORK   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

HEADER ==>              #<SFML/Network.hpp>

IPAddress               #Classe désignant une adresse IPv4

IPADDRESS()             #Constructor vide.
IPADDRESS(STRING)       #Contruit une IPADDRESS à partir de la châine de
IPADDRESS(STR)          #caractères, par exemple "192.168.0.1" ou l'host name
                        #"computer name"
IPADDRESS(UINT8_VAL1,
UINT8_VAL2, UINT8_VAL3,
UINT8_VAL4)             #Construit une IPADDRESS à partir du nombre de cette IP,
IPADDRESS(UINT32_VAL)   #décomposé en 4 nombres ou non.

IPADDRESS.IsValid()     #Renvoie true si IPADDRESS est valide.
IPADDRESS.ToString()    #Renvoie IPADDRESS sous forme de STRING
IPADDRESS.ToInteger()   #Renvoie IPADDRESS sous forme d'UINT32_VAL
IPADDRESS == IPADDRESS2 
IPADDRESS != IPADDRESS2 
IPADDRESS > IPADDRESS2  
IPADDRESS >= IPADDRESS2 
IPADDRESS < IPADDRESS2  
IPADDRESS <= IPADDRESS2 #Tests d'égalités

IPAddress::             #Renvoie l'adresse locale (du point de vue du réseau 
GetLocalAddress()       #local), sous forme d'IPADDRESS (j'ai 10.161.222.170)
IPAddress::
GetPublicAddress        #Renvoie l'adresse publique (du point de vue du web), 
([FLOAT_VAL])           #sous forme d'IPADDRESS (j'ai 62.201.142.27). Si 
                        #FLOAT_VAL != 0 (défaut), la fonction s'interrompt
                        #après FLOAT_VAL secondes d'attente

IPAddress::LocalHost    #Renvoie l'adresse hôte, sous forme d'IPADDRESS (j'ai
                        #127.0.0.1)

Http                    #Classe désignant un client/serveur HTTP (enfant de 
                        #NonCopyable)

HTTP()                  #Constructor vide
HTTP(STRING             #Construit un HTTP puis effectue un HTTP.SetHost
[, USHORT_VAL])         #(STRING[, USHORT_VAL])

HTTP.SetHost(STRING     #L'hôte (host) cible devient STRING (par exemple
[, USHORT_VAL])         #"www.sfml-dev.org" (sans http://, ni ce qui suit 
                        #l'hôte)), et le port utilisé USHORT_VAL (par défaut 0,
                        #ce qui signifie que le port par défaut est utilisé 
                        #(80 pour HTTP))
HTTP.SendRequest        #Lance une requête HTTP::REQUEST à l'hôte, et renvoie
(HTTP::REQUEST          #une HTTP::RESPONSE provenant de l'hôte. Si par exemple
[, FLOAT_VAL])          #l'URI d'HTTP::REQUEST est "documentation/1.6/
                        #classsf_1_1Http_1_1Request.htm", et que sa Method est
                        #Http::Request::Get, alors renvoie une HTTP::RESPONSE
                        #contenant notamment la page "www.sfml-dev.org/
                        #documentation/1.6/classsf_1_1Http_1_1Request.htm" dans
                        #HTTP::RESPONSE.GetBody()
                        #Si FLOAT_VAL != 0 (défaut), échoue après FLOAT_VAL
                        #secondes (HTTP::RESPONSE.GetStatus() sera == Http::
                        #Response::ConnectionFailed)
