
       
   GOT  
       



ALTERNATIVES ==>                  #See HTTP client summary

VERSION ==>                       #11.8.3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOT(['URL'|URL][, OPTS])          #HTTP request. Node.js only.
 ->GPROMISE|STREAM                #Add:
                                  #  - User-Agent: got (URL) [C]
                                  #  - Content-Type [C]
                                  #  - Content-Length [C]

GPROMISE                          #PROMISE that resolves to RES

OPTS.isStream                     #BOOL (def: false). Return STREAM instead of GPROMISE
                                  #Must write request body and read response body
STREAM.on('error', FUNC)          #Emitted, i.e. should use Stream.pipeline()
STREAM.once('retry', FUNC(NUM))   #Called on 'error'.
                                  #NUM is STREAM.retryCount (def: 0) + 1
                                  #  - to check to see if stop retrying
                                  #STREAM will be restarted, i.e. can pipe|read it again

GOT[.stream][.METHOD](...)        #Same with OPTS.method|stream set
GOT.extend(OPTS)->GOT             #Add to defaults OPTS
GOT.mergeOptions(OPTS, OPTS2)
 ->OPTS3                          #
OPTS.mutableDefaults              #BOOL (def: false). Allow mutating OPTS.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REQUEST            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.*                            #Same as HTTP.request(), i.e.:
                                  #  - protocol STR (def: 'http:')
                                  #  - host[name] STR (def: "localhost")
                                  #     - prefer hostname
                                  #     - will fire exception if non existing
                                  #  - family 4|6 (def: both)
                                  #  - port PORT_NUM (def: 80)
                                  #  - socketPath STR: incompatible with host[name] and port
                                  #  - localAddress STR
                                  #  - method STR (def: "GET")
                                  #  - path STR (def: "/"): including hash and query string
                                  #  - headers OBJ
                                  #  - auth STR: e.g. "auth:password"
                                  #  - https.rejectUnauthorized|checkServerIdentity|certificateAuthority|certificate|key|passphrase|pfx
                                  #  - agent.http|https|http2 AGENT|false (def: globalAgent)
                                  #  - keepAlive[Msecs]: see AGENT
                                  #  - createConnection(...): see AGENT

OPTS.url                          #URL|'URL'
OPTS.prefixUrl                    #URL|'URL': prepended to OPTS.url
                                  #When used, input URL must not start with /
RES.requestUrl                    #URL before redirects
RES.url                           #URL after redirects
OPTS.searchParams                 #OBJ|SEARCHPARAMS|'SEARCH'
                                  #null are converted to ''. undefined are skipped.
OPTS.socketPath                   #URL can be '[PROTO://]unix:/SOCKET_PATH:/URI_PATH' too
OPTS.agent                        #Can also be { PROTO: AGENT, ... } instead of AGENT

OPTS.body                         #STR|BUFFER|ISTREAM|FORM-DATA. Request body
                                  #FORMDATA (using FORM-DATA library, see its doc): multipart/form-data request body
OPTS.json                         #VAL. application/json request body
OPTS.form                         #OBJ. application/x-www-form-urlencoded request body

OPTS.allowGetBody                 #BOOL (def: false). Allow request body with GET

OPTS.http2                        #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESPONSE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES.*                             #Same as RES.* but with additional members.

OPTS.responseType                 #'json', 'buffer' or 'text' (def)
                                  #Parse RES.body as VAL|BUFFER|STR
RES.body                          #VAL|BUFFER|STR
OPTS.resolveBodyOnly              #BOOL (def: false)
                                  #Resolve with parsed response instead of RES
GPROMISE.json|buffer|text()
 ->GPROMISE                       #Same as setting OPTS.responseType|resolveBodyOnly
OPTS.parseJson(STR)->VAL          #On 'json' responseType. Def: JSON.parse
OPTS.stringifyJson(VAL)->STR      #On 'json' responseType. Def: JSON.stringify
OPTS.decompress                   #BOOL (def: true)
                                  #Decompress response (using DECOMPRESS-RESPONSE, see its doc)
                                  #Sets Accept-Encoding: gzip, deflate, br [C]
OPTS.encoding                     #'ENCODING' (def: 'utf8')

RES.ip                            #'IP'|undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REDIRECTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.followRedirect               #BOOL (def: true). Follow Redirect [S] if 3**
RES.redirectUrls                  #'URL'_ARR
GPROMISE|STREAM.on
 ('redirect', FUNC(RES, OPTS))    #On HTTP redirection

OPTS.maxRedirects                 #NUM (def: 10)

OPTS.methodRewriting              #BOOL (def: true). Change method to GET when receiving 302|303 (which is standard RFC behavior)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.throwHttpErrors              #BOOL (def: true)
                                  #Throw HTTPError if not 2**|3**

RequestError                      #Name 'RequestError', code STR. Network error (REQ.on('error'))
UnsupportedProtocolError          #Name 'UnsupportedProtocolError'. When not HTTP[S]
ReadError                         #Name 'ReadError'. When reading response body fails
ParseError                        #Name 'ParseError', response RES. When parsing response body fails. Error message shows URL
HTTPError                         #Name 'HTTPError', response RES. When not 2**|3**. Error message shows status code.
TimeoutError                      #Name 'TimeoutError', timings RES.timings, event ERROR.event, code 'ETIMEDOUT'. On OPTS.timeout.
MaxRedirectsError                 #Name 'MaxRedirectsError', response RES. When redirecting more than OPTS.maxRedirects times
CacheError                        #Name 'CacheError'. Cache store error
CancelError                       #Name 'CancelError', code STR. On cancel()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PAGINATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOT.paginate.each                 #Paginates.
 (['URL'|URL][, OPTS])            #Call HTTP request (using GOT(OPTS)) repeatedly
 ->ASYNC_ITERATOR_VAL             #Iterates over each VAL (not each response)
GOT.paginate.all
 (['URL'|URL][, OPTS])
 ->ARR                            #Paginates until the end

OPTS.pagination                   #POPTS
POPTS.paginate(RES, ARR, ARR2)    #Pagination logic
 ->false|OPTS                     #Should return false to stop iteration
                                  #Otherwise should return new OPTS for next HTTP request (using GOT(OPTS))
                                  #ARR are all previous VALs, ARR2 current one
                                  #By def, use Link: <URI>; rel="next" [S]
POPTS.transform(RES)->ARR         #Customize how response body is parsed.
                                  #Def: JSON.parse(RES.body)
POPTS.filter(VAL, ARR, ARR2)->BOOL#Whether to include a specific VAL
                                  #ARR are previous VALs
                                  #Def: none
POPTS.shouldContinue              #Same but to stop whole iteration
 (VAL, ARR, ARR2)->BOOL           #Def: none
POPTS.countLimit                  #NUM. Stop whole iteration at NUM items
                                  #Def: Infinity
POPTS.requestLimit                #NUM. Max amount of iterations
                                  #Def: 10000
POPTS.stackAllItems               #BOOL (def: true). If false, ARR in POPTS.paginate|filter|shouldContinue() is always empty
                                  #Useful to reduce memory consumption
POPTS.backoff                     #Wait NUMms (def: 0) between each request


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RETRY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.retry                        #NUM|OBJ
                                  #Retry-After [S]:
                                  #  - used if set
                                  #  - if 413, must use it
OPTS.retry.limit                  #NUM (def: 2)
OPTS.retry.calculateDelay(OBJ)    #Extra logic applied to `limit`
 ->[PROMISE_]NUM                  #OBJ:
                                  #  - computedValue NUM: double each time, starting at 1 second
                                  #  - attemptCount NUM2
                                  #  - error ERROR
                                  #  - retryAfter NUM (in ms): Retry-After [S] if set
                                  #  - retryOptions OPTS.retry
                                  #Def: OBJ.computedValue
OPTS.retry.methods                #'METHOD'_ARR (def: ['get', 'put', 'head', 'delete', 'options', 'trace'])
OPTS.retry.statusCodes            #NUM_ARR (def: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524])
OPTS.retry.errorCodes             #STR_ARR (def: 'ETIMEDOUT|ECONNRESET|EADDRINUSE|ECONNREFUSED|EPIPE|ENOTFOUND|ENETUNREACH|EAI_AGAIN')
                                  #For ERROR.code
OPTS.retry.maxRetryAfter          #NUM. Max Retry-After [S]
RES.retryCount                    #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TIMEOUT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.timeout                      #Request timeout (in ms) (def: none)
                                  #NUM|OBJ:
                                  #  - lookup NUM: DNS lookup
                                  #  - connect NUM: TCP handshake
                                  #  - secureConnect NUM: TLS setup
                                  #  - socket NUM: like HTTP.setTimeout()
                                  #  - send NUM: time to send request
                                  #  - response NUM: time between request sent and response starting to be received
                                  #  - request NUM: time between request started and response ended
GPROMISE.cancel()                 #Abort HTTP request
REQ.isCanceled                    #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COOKIES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.cookieJar TOUGHCOOKIE|OBJ    #Store and sets Cookie [C]
                                  #Must use tough-cookie library (see its doc) or OBJ:
                                  #  - setCookie('COOKIE', 'URL')->PROMISE
                                  #  - getCookieString('URL')->PROMISE_'COOKIE'
OPTS.ignoreInvalidCookies         #BOOL: if false (def), throw if cookie is invalid


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.cache                        #'URI'|STORE|BOOL. Cache responses (HTTP caching)
                                  #Passed to cacheable-request (see its doc)
RES|STREAM.isFromCache            #BOOL. Whether cache was used.

OPTS.dnsCache                     #KEYV|BOOL (def: false). Cache DNS responses (see keyv doc)
OPTS.dnsLookupIpVersion           #'auto' (def), 'ipv4' or 'ipv6'
OPTS.lookup                       #Customize DNS lookup (def: dns.lookup())


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROGRESS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GPROMISE|STREAM.on                #Request body upload progress event OBJ:
 ('uploadProgress', FUNC(OBJ))    #  - percent 0-1
                                  #     - 0 if unknown
                                  #  - transferred NUM
                                  #  - total NUM
                                  #     - use Content-Length [C] or body size (using Buffer.byteLength(), FS.stat(), etc.)
                                  #     - 0 if unknown
                                  #Sent every 150ms (unless did not change)
GPROMISE|STREAM.on                #Response body download progress event OBJ:
 ('downloadProgress', FUNC(OBJ))  #  - percent 0-1
                                  #     - 0 if unknown
                                  #  - transferred NUM
                                  #  - total NUM
                                  #     - use Content-Length [S]
                                  #     - 0 if unknown


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RESPONSE TIMES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES.timings                       #OBJ of how long request|response took:
                                  #  - start NUM: request start
                                  #  - socket NUM: TCP socket created
                                  #  - lookup NUM: DNS lookup done
                                  #  - connect NUM: TCP handshake done
                                  #  - upload NUM: request body sent
                                  #  - response NUM: response body received
                                  #  - end|error NUM: request end|error
                                  #  - phases:
                                  #     - wait NUM: start to socket
                                  #     - dns NUM: socket to lookup
                                  #     - tcp NUM: lookup to connect
                                  #     - request NUM: connect to upload
                                  #     - firstByte NUM: upload to response
                                  #     - download NUM: response to end
                                  #     - total NUM: start to end|error
                                  #Each NUM is a Unix timestamp (in ms)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CUSTOM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.hooks                        #Events callbacks. OBJ:
                                  #  - init ARR of FUNC(OPTS): before each request
                                  #  - beforeRequest ARR of FUNC(OPTS)[->PROMISE]
                                  #  - beforeRedirect ARR of FUNC(OPTS, RES)[->PROMISE]: before HTTP redirection
                                  #  - beforeRetry ARR of FUNC(OPTS, ERROR, NUM)[->PROMISE]
                                  #  - beforeError ARR of FUNC(ERROR)->[PROMISE_]ERROR
                                  #  - afterResponse ARR of FUNC(RES, FUNC2(OPTS)->GPROMISE)->GPROMISE

OPTS.request                      #FUNC instead of HTTP[S].request()

GPROMISE|STREAM.on('error',
 FUNC(ERROR, RES.body, RES))      #
GPROMISE|STREAM.on
 ('request', FUNC(REQ))           #
GPROMISE|STREAM.on
 ('upload-complete', FUNC(REQ))   #
GPROMISE|STREAM.on
 ('response', FUNC(RES))          #
