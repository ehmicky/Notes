
                                  ┏━━━━━━━━━━━━┓
                                  ┃   SPECCY   ┃
                                  ┗━━━━━━━━━━━━┛

VERSION ==>                       #0.7.3

ALTERNATIVES ==>                  #See Sway

                                  ┌──────────┐
                                  │   CORE   │
                                  └──────────┘

LINT(SPEC_PATH|URL[, OPTS])       #Validates and lints specification, printing errors and stopping process with exit code 0|1
 ->PROMISE                        #Validates:
                                  #  - with official JSON schema (with ajv)
                                  #  - with custom JavaScript, which redoes basically same as official JSON schema
                                  #  - JSON references
                                  #  - JSON schemas (with ajv)
                                  #  - not using OpenAPI 2.0 properties
                                  #  - duplicate PARAMs, operationId
                                  #  - '/PATH', including path variables syntax is valid and they are used in PARAMs
                                  #  - SERVER_VAR_NAME is in SERVER.url
                                  #  - TAGs are unique
                                  #  - SECURITY_USES.SEC_NAME matches a SECURITY_DEF
                                  #  - MIME
                                  #  - URL
                                  #  - HEADER name
                                  #Lints:
                                  #  - with OPTS.rules ['default'] (def):
                                  #     - required: SPEC|OPERATION.tags, INFO.contact, OPERATION.operationId, PARAM.description
                                  #     - required (either): OPERATION.summary|description
                                  #     - required (exclusive): EXAMPLE.value|externalValue
                                  #     - JSON references only have single $ref property
                                  #     - SPEC.tags in alphabetical order
                                  #     - no "eval()" nor "<script>" in "MARKDOWN"
                                  #     - SERVER.url has no trailing slash
                                  #  - with OPTS.rules ['strict'], also:
                                  #     - required: CONTACT.name|url|email, LICENSE.url, TAG.description
                                  #  - with OPTS.rules 'URL'_ARR: custom
                                  #OPTS:
                                  #  - skip 'RULE'_ARR (def: []): do not run those linting rules
                                  #  - verbose 1-2 (def: 0)
                                  #  - quiet BOOL (def: false): like OPTS.verbose 1
                                  #  - resolve BOOL (def: true): calls RESOLVE()
                                  #  - jsonSchema BOOL (def: false): see RESOLVE()

RESOLVE(SPEC_PATH|URL[, OPTS])    #Resolve JSON references (with own code and some help from REFTOOLS)
 ->PROMISE                        #Then prints to OPTS.output (def: stdout)
                                  #OPTS:
                                  #  - verbose NUM (def: 0), quiet BOOL (def: false)
                                  #  - jsonSchema BOOL (def: false): allow targetting JSON schemas, converted with JSON-SCHEMA-TO-OPENAPI-SCHEMA
                                  #  - agent AGENT: passed to NODE-FETCH

SERVE(SPEC_PATH[, OPTS])->PROMISE #Starts a HTTP server serving the specification as is, or as REDOC (see its doc)

                                  ┌─────────┐
                                  │   CLI   │
                                  └─────────┘

speccy lint SPEC_PATH|URL         #
-s RULE
--skip RULE
-v
--verbose
-q
--quiet
-r default|strict|URL
--rules default|strict|URL
-j
--json-schema

speccy resolve SPEC_PATH|URL      #
-o FILE
--output FILE
-v
--verbose
-q
--quiet
-j
--json-schema

speccy serve SPEC_PATH            #
