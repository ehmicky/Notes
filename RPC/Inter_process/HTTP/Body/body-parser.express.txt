
               
   BODY-PARSER  
               



VERSION ==>                   #2.0.1

BODY-PARSER.*([OPTS])->MDWR   #Express MIDWR:
                              #  - same signature FUNC(REQ, RES, NEXT)
                              #  - but actually does not depend on Express being loaded, nor use RES
                              #Sets REQ.body using HTTP request payload
                              #  - undefined if none
                              #Uses raw-body under-the-hood (see its doc)

BODY-PARSER.urlencoded([OPTS])#As an OBJ, for Content-Type [C] "application/x-www-form-urlencoded"
BODY-PARSER.json([OPTS])      #As an OBJ, for "application/json"
BODY-PARSER.text([OPTS])      #As a STR, for "text/plain"
BODY-PARSER.raw([OPTS])       #As a BUFFER, for "application/octet-stream"

OPTS.type                     #MIME[_ARR][(REQ)] (def: depends on type)
                              #Only applies to requests with that MIME
                              #Uses TYPE-IS(REQ, MIME[_ARR]) (see its doc)
OPTS.inflate                  #BOOL (def: true): automatically decompress gzip|deflate|brotli encodings according to Content-Encoding [C]
OPTS.limit                    #NUM (def: '100kb') (uses BYTES parsing, see its doc): max request size
OPTS.verify                   #FUNC(REQ, RES, BUFFER, ENCODING): should throw error if input is not proper

(only urlencoded())           #Uses QS.parse() (see its doc)
OPTS.extended                 #BOOL. QS OPTS.arrayLimit 100 (true, def) or 0 (false)
OPTS.depth                    #NUM (def: 32). QS OPTS.strictDepth
OPTS.parameterLimit           #NUM (def: 1000). QS OPTS.parameterLimit
OPTS.defaultCharset           #'utf-8' or 'iso-8859-1' (def: use Content-Type [C]). QS_OPTS.charset
OPTS.charsetSentinel          #BOOL (def: false). QS OPTS.charsetSentinel
OPTS.interpretNumericEntities #BOOL (def: false). QS OPTS.interpretNumericEntities

(only json())
OPTS.strict                   #BOOL (def: true): only parses OBJ|ARR
OPTS.reviver                  #FUNC passed to JSON.parse(..., FUNC)

(only text())
OPTS.defaultCharset           #'CHARSET' (def: "utf-8")

ERRORS ==>                    #next(ERROR):
                              #  - 400 (ERROR.type depends): any from raw-body (see its doc), except 415
                              #  - 400 (ERROR.type "entity.parse.failed"): parsing failed
                              #  - 400 (ERROR.type "querystring.parse.rangeError"): above OPTS.depth
                              #  - 403 (ERROR.type "entity.verify.failed"): wrong verify()
                              #  - 413 (ERROR.type "entity.too.large"): above OPTS.limit
                              #  - 413 (ERROR.type "parameters.too.many"): above OPTS.parameterLimit
                              #  - 415 (ERROR.type "encoding.unsupported"): one of:
                              #     - OPTS.inflate false and should decompress
                              #     - unsupported Content-Encoding [C]
                              #  - 415 (ERROR.type "charset.unsupported"): unsupported charset
