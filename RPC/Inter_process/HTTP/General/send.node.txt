
        
   SEND  
        



ALTERNATIVES ==>                  #  - express.js:
                                  #     - RES.sendFile(): reuse SEND() and add some convenience function to avoid using SENDSTREAM
                                  #     - RES.send(): send content directly, not file content. Fewer HTTP features

VERSION ==>                       #1.1.0
                                  #Does not depend on Express.js


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEND(REQ, 'PATH'[, OPTS])
 ->SENDSTREAM
SENDSTREAM.pipe(RES)->RES         #Similar to RES.end(STR) but using 'PATH' file contents.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FILE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'PATH'                            #Must be encodeURIComponent()'d
                                  #If wrong, sends 400
                                  #If contains .., sends 403
                                  #If cannot find, sends 404
                                  #If other filesystem error, sends 500

OPTS.root                         #'DIR'. Make 'PATH' relative to 'DIR'
OPTS.extensions                   #'EXT'_ARR or false (def)
                                  #If 'PATH' cannot be found, try 'PATH.EXT'

OPTS.index                        #'FILE'[_ARR]|false (def: 'index.html')
                                  #If 'PATH' cannot be found and is DIR, PATH/FILE

OPTS.dotfiles                     #What to do if 'PATH' contains dotfiles:
                                  #  - 'allow': nothing
                                  #  - 'deny': sends 403
                                  #  - 'ignore' (def): sends 404


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BODY              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NO BODY ==>                       #When using HEAD or 304
Content-Length [S]                #Set, unless empty body
Content-Type [S]                  #Deduced from 'PATH' (def: 'application/octet-stream'), unless empty body

OPTS.start|end                    #NUM. Only send the file content from those byte offsets
OPTS.acceptRanges                 #BOOL (def: true). Handle range requests, using RANGE-PARSER (see its doc)
                                  #I.e. Range [C], If-Range [C], Accept-Ranges: bytes [S], Content-Range [S], 206, 416


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REQ.fresh                         #Does not use REQ.fresh but similar logic (i.e. check conditional caching headers) to send 304
If-Match [C]
If-Unmodified-Since [C]           #If fail, send 412
OPTS.lastModified                 #BOOL (def: true). Sets Last-Modified: FILE_MTIME [S]
OPTS.etag                         #BOOL (def: true). Sets ETag [S], using ETAG(...) (see its doc), i.e. "SIZE-MTIME"

OPTS.cacheControl                 #BOOL (def: true). Sets default: Cache-Control: public, max-age=0 [S]
OPTS.maxAge                       #NUM (def: 0) used by default Cache-Control [S]
OPTS.immutable                    #BOOL (def: false). Make default Cache-Control [S] use `immutable`

Content-Security-Policy:
 "default-src 'none'" [S]         #If 3**|4**|5**


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SENDSTREAM.on('error',            #Fired when 4**|5** would be sent.
 FUNC(HTTPERROR, STATUS_NUM))     #Def: RES.sendStatus(STATUS_NUM)
                                  #  - also set Content-Range [S] if 416
                                  #HTTPERROR (see its doc)
SENDSTREAM.on                     #Fired when 'PATH' is DIR but misses last '/'
 ('directory', FUNC(RES,'PATH'))  #Def: send 301 with Location: 'PATH/' [S], and HTML body "Redirecting to PATH/"

SENDSTREAM.on
 ('file', FUNC('PATH', FSSTAT))   #When 'PATH' is FILE found, going to be sent
SENDSTREAM.on('headers',
 FUNC(RES, 'PATH', FSSTAT))       #Before setting response headers
SENDSTREAM.on
 ('stream', FUNC(ISTREAM))        #Sending body has started (if body)
SENDSTREAM.on('end', FUNC())      #Sending body has ended (if body)
