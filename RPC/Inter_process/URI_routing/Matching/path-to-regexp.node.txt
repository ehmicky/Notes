
                  
   PATH-TO-REGEXP  
                  



VERSION ==>                       #6.2.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONCEPT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'PATH'                            #URI path without template variables

PATH_PATTERN                      #URI path with template variables.
                                  #Can contain:
                                  #  - (REGEXP)
                                  #     - can include (?<VAR>...)
                                  #  - :VAR
                                  #     - VAR name is [:alnum:]_
                                  #     - ends at any possible OPTS.delimiter characters (def: '/#?')
                                  #(REGEXP) and :VAR can optionally be:
                                  #  - followed by modifier * ? +
                                  #     - * + do not stop at OPTS.delimiter
                                  #  - preceded by a single CHAR:
                                  #     - among possible OPTS.prefixes characters (def: './')
                                  #     - matched but not included in VAR
                                  #  - wrapped in {[PREFIX]...[SUFFIX]}: same as CHAR except PREFIX can be:
                                  #     - several characters
                                  #     - any character, not only OPTS.prefixes
                                  #     - at the end (SUFFIX)
                                  #Example: '/my/path/:var/.:varc/:varb+/(.*)/try(this)?/{a:b,}/{a(b),}'

TTOKEN                            #Path groups, either TOKEN or 'STR' (anything between TOKEN)
TOKEN                             #
TOKEN.name                        #'VAR' (if :VAR), 'VAR' (if REGEXP (?<VAR>...)) or NUM (parenthesis group)
TOKEN.pattern                     #REGEXP to fill in :VAR value
TOKEN.modifier                    #'*', '?', '+' or ''
TOKEN.prefix                      #'CHAR'|'PREFIX'
TOKEN.suffix                      #'SUFFIX'

PATH_REGEXP                       #REGEXP where each parenthesis group matches a TOKEN
                                  #OPTS:
                                  #  - sensitive BOOL (def: false): case-sensitive
                                  #  - strict BOOL: if false (def), optional OPTS.delimiter character (e.g. trailing slash)
                                  #  - start BOOL (def: true): must match from beginning
                                  #  - end BOOL (def: true): must match until end
                                  #  - endsWith STR[_ARR] (def: none):
                                  #     - stops parsing when encountering that character
                                  #     - e.g. '?' for query strings
                                  #  - encode(STR)->STR (def: none):
                                  #     - serialize 'STR' TTOKENs and TOKEN.prefix|suffix
                                  #     - should use encodeURI() if PATH_PATTERN might contain non-URI-encoded characters

PARAMS                            #Template variables as OBJ
                                  #Keys are TOKEN.name
                                  #Values can be:
                                  #  - STR
                                  #  - NUM -> 'NUM' (only serialization, not parsing)
                                  #  - ARR:
                                  #     - if modifier + *
                                  #     - is joined with 'PREFIX' and 'SUFFIX'

SUMMARY ==>                       #                                             compile()
                                  #              ------------------------------------------------------------------------>
                                  #                                                      tokensToFunction()
                                  #                                    -------------------------------------------------->
                                  #                          pathToRegExp()
                                  #              ---------------------------------------->
                                  #               parse()               tokensToRegExp()
                                  # PATH_PATTERN ---------> TTOKEN_ARR ------------------> PATH_REGEXP ------------------> 'PATH'
                                  #                                                        PARAMS <-----------------------
                                  #                                                                        match()
                                  #                                                                   regexpToFunction()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


parse(PATH_PATTERN[, OPTS])       #PATH_PATTERN -> TTOKEN_ARR
 ->TTOKEN_ARR                     #OPTS: delimiter|prefixes

tokensToRegExp                    #TTOKEN_ARR -> PATH_REGEXP
 (TTOKEN_ARR[, OBJ_ARR][, OPTS])  #If OBJ_ARR, filled with TOKEN_ARR
 ->PATH_REGEXP                    #OPTS: delimiter|sensitive|strict|start|end|endsWith|encode

pathToRegexp(PATH_PATTERN[_ARR]   #PATH_PATTERN -> PATH_REGEXP
 [, OBJ_ARR][, OPTS])             #If PATH_PATTERN_ARR: alternatives
 ->PATH_REGEXP                    #OPTS: delimiter|prefixes|sensitive|strict|start|end|endsWith|encode

pathToRegexp
 (PATH_REGEXP[, OBJ_ARR][, OPTS]) #Noop, except fills OBJ_ARR with TOKEN_ARR
 ->PATH_REGEXP                    #OPTS: delimiter|prefixes|sensitive|strict|start|end|endsWith|encode

match(PATH_PATTERN[, OPTS])       #PATH_PATTERN + 'PATH' -> PARAMS
 ->FUNC('PATH'[, OPTS])           #OBJ:
 ->OBJ|false                      #  - params PARAMS
                                  #  - path 'PATH'
                                  #  - index NUM: first matching group in PATH_REGEXP, usually 0
                                  #OPTS:
                                  #  - delimiter|prefixes|sensitive|strict|start|end|endsWith|encode: see above
                                  #  - decode(STR, 'VAR')->STR (def: none)
                                  #     - should use decodeURIComponent()
                                  #For better matching, it is recommended to normalize 'PATH':
                                  #  - Unicode: STR.normalize()
                                  #  - squash multiple delimiters: STR.replace(/\/+/g, '/')
regexpToFunction
 (PATH_REGEXP, TTOKEN_ARR)
 ->FUNC('PATH'[, OPTS])
 ->OBJ|false                      #PATH_REGEXP + 'PATH' -> PARAMS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SERIALIZING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


compile(PATH_PATTERN[, OPTS])     #PATH_PATTERN + PARAMS -> 'PATH'
 ->FUNC(PARAMS)                   #Replaces:
 ->'PATH'                         #  - :VAR by PARAMS.VAR
                                  #  - (...) by PARAMS[NUM]
                                  #OPTS:
                                  #  - delimiter|prefixes: see above
                                  #  - sensitive BOOL (def: false): case-sensitive
                                  #  - validate BOOL (def: true):
                                  #     - throw TypeError if PARAMS VAL matches TOKEN.name but not TOKEN.pattern, e.g. contains delimiters
                                  #     - TypeError is always thrown when missing PARAMS (no TOKEN with correct TOKEN.name)
                                  #  - encode(VAL, TOKEN)->STR (def: none)
                                  #     - should use encodeURIComponent()
tokensToFunction
 (TTOKEN_ARR[, OPTS])
 ->FUNC(PARAMS)                   #TTOKEN_ARR + PARAMS -> 'PATH'
 ->'PATH'                         #OPTS: sensitive|validate|encode
