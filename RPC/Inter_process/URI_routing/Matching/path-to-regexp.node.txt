
                  
   PATH-TO-REGEXP  
                  



ALTERNATIVES ==>                  #  - URLPattern (preferred if browser|Deno): standard DOM
                                  #  - path-to-regexp (preferred if Node): more features

VERSION ==>                       #7.1.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PATTERN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'PATH'                            #URI path without template variables

PATH_PATTERN                      #URI path with template variables
                                  #Can contain:
                                  #  - :VAR
                                  #     - VAR name is \p{XID_Continue}+, i.e. roughly same as valid JavaScript identifiers
                                  #     - matches anything until DELIM
                                  #  - (REGEXP)
                                  #     - can be nested
                                  #     - cannot be (?<NAME>...)
                                  #     - not stopped by DELIM
                                  #  - *
                                  #     - same as {([^DELIM]*);DELIM}*
                                  #     - i.e. match anything (including nothing), not stopped by DELIM
                                  #  - RAW: anything else
                                  #Can \-escape any special char: () {} * ? + ; \
                                  #Reserved chars that must be \-escaped: ! @ ,
                                  #Can wrap anything with {...}
                                  #  - can be {...} {...}? {...}* or {...}+
                                  #  - can include :VAR or (REGEXP) but only once
                                  #     - PREFIX|SUFFIX: any characters before|after
                                  #  - can end with ;SEPARATOR
                                  #     - def SEPARATOR: PREFIX + SUFFIX (if none: '')
                                  #  - with {...}* and {...}+
                                  #     - each match of :VAR or (REGEXP) is separated by SEPARATOR
                                  #     - but PREFIX|SUFFIX is before|after all matches (not each)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TOKENS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new TokenData(TOKEN|'RAW'_ARR
 [, 'SEPARATOR'])                 #TOKENS
TOKENS.tokens                     #TOKEN|'RAW'_ARR

TOKEN                             #OBJ representation of PATH_PATTERN's part
TOKEN.name                        #Can be:
                                  #  - 'VAR' (if :VAR)
                                  #  - 'NUM' (if (REGEXP))
                                  #  - '' (if {...} without :VAR|(REGEXP))
TOKEN.pattern                     #'REGEXP' (if (REGEXP))
TOKEN.modifier                    #'?', '*', '+' or undefined (if {...})
TOKEN.prefix                      #'PREFIX' (if {...:VAR} or {...(REGEXP)})
TOKEN.suffix                      #'SUFFIX' (if {:VAR...} or {(REGEXP)...})
TOKEN.separator                   #'SEPARATOR' (if {...}) or undefined (default one)

PATH_REGEXP                       #REGEXP where each parenthesis group matches a :VAR or (REGEXP)
PATH_REGEXP.keys                  #TOKEN_ARR of all :VAR and (REGEXP)

PARAMS                            #Template variables (:VAR and (REGEXP)) as OBJ
                                  #Keys are TOKEN.name
                                  #Values can be:
                                  #  - STR
                                  #  - ARR
                                  #     - each match of :VAR or (REGEXP) inside {...}* or {...}+ (separated by SEPARATOR)
                                  #     - not if OPTS.decode|encode false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OPTIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.sensitive                    #BOOL (def: false). Case-sensitive

OPTS|TOKENS.delimiter             #'DELIM' (def: '/')
OPTS.loose                        #BOOL (def: true). Allow multiple DELIMs in a row
OPTS.trailing                     #BOOL (def: true). End must match:
                                  #  - OPTS.trailing false + OPTS.end true: $
                                  #  - OPTS.trailing false + OPTS.end false: $ or DELIM
                                  #  - OPTS.trailing true + OPTS.end true: $ or DELIMs$
                                  #  - OPTS.trailing true + OPTS.end false: $ or DELIMs or DELIMs$
                                  #DELIMs is multiple DELIMs if OPTS.loose true
OPTS.strict                       #BOOL (def: false, recommended: true). Throw on unsafe REGEXPs

OPTS.start                        #BOOL (def: true). Must match from beginning
OPTS.end                          #BOOL (def: true). Must match until end

OPTS.encodePath                   #FUNC(STR)->STR (def: identity)
                                  #Transform 'RAW', 'PREFIX' and 'SUFFIX' in PATH_PATTERN, during serialization|parsing
                                  #Should use encodeURI() if PATH_PATTERN might contain non-URI-encoded characters
OPTS.encode                       #FUNC(VAL)->STR or false (same as identity function)
                                  #Transform PARAMS.* during serialization
                                  #Def: encodeURIComponent()
OPTS.decode                       #FUNC(STR)->STR or false (same as identity function)
                                  #Transform PARAMS.* during parsing
                                  #Def: decodeURIComponent()

OPTS.validate                     #BOOL (def: true). Throws if:
                                  #  - missing PARAM
                                  #  - PARAM VAL does not match pattern, e.g.
                                  #     - (PATTERN)
                                  #     - :VAR, i.e. contains DELIM
                                  #     - missing PREFIX|SUFFIX


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PARSE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


parse(PATH_PATTERN[, OPTS])       #PATH_PATTERN -> TOKENS
 ->TOKENS                         #OPTS: delimiter|encodePath

pathToRegexp                      #PATH_PATTERN|TOKENS -> PATH_REGEXP
 (PATH_PATTERN|TOKENS[, OPTS])    #If PATH_PATTERN_ARR: alternatives
 ->PATH_REGEXP                    #OPTS: sensitive|delimiter|trailing|strict|loose|start|end|encodePath

match(PATH_PATTERN|TOKENS[, OPTS])#PATH_PATTERN|TOKENS + 'PATH' -> PARAMS
 ->FUNC('PATH')                   #OPTS: sensitive|delimiter|trailing|strict|loose|start|end|encodePath|decode
 ->MATCH_RESULT|false             #For better matching, it is recommended to 'PATH'.normalize()
MATCH_RESULT.params               #PARAMS
MATCH_RESULT.path                 #STR. Whole part of 'PATH' that matched
MATCH_RESULT.index                #NUM. First matching group in PATH_REGEXP, usually 0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SERIALIZE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


compile                           #PATH_PATTERN|TOKENS + PARAMS -> 'PATH'
 (PATH_PATTERN|TOKENS[, OPTS])    #Replaces:
 ->FUNC([PARAMS])                 #  - :VAR by PARAMS.VAR
 ->'PATH'                         #  - (...) by PARAMS[NUM]
                                  #OPTS: sensitive|delimiter|strict|loose|encodePath|encode|validate
