
              
   URLPATTERN  
              



new URLPattern('URL'|UOBJ
 [, 'BASE_URL'][, OPTS])          #URL_PATTERN. Similar to REGEXP, but for a URL

OPTS.ignoreCase                   #BOOL (def: false)
UOBJ.baseURL                      #'BASE_URL': like new URL(..., 'BASE_URL')

URL_PATTERN|UOBJ.protocol|username#STR. Can contain:
 |password|hostname|port|pathname #  - (REGEXP)
 |search|hash                     #  - *
                                  #  - :VAR
                                  #     - like * but named
                                  #     - VAR name is any valid JavaScript VAR
                                  #  - {STR}: literal match
                                  #Each can optionally be followed by ? * +
                                  #  - * + do not stop at /
                                  #  - /*? is like /* but makes trailing slash optional
                                  #* and :VAR are up until next /
                                  #Can \-escape : \
                                  #Def: '*' if no 'BASE_URL', '' otherwise
URL_PATTERN.test
 ('URL'|UOBJ[, 'BASE_URL'])->BOOL #True if matches

URL_PATTERN.exec
 ('URL'|UOBJ[, 'BASE_URL'])
 ->URL_RESULT|null                #Return matches
URL_RESULT.inputs[0]              #'URL'|UOBJ
URL_RESULT.inputs[1]              #'BASE_URL'|undefined

URL_RESULT.protocol|username
 |password|hostname|port|pathname
 |search|hash                     #URL_PART_RESULT
URL_PART_RESULT.input             #STR. Input and|or match of {STR}
URL_PART_RESULT.groups.VAR        #STR|undefined. Match of :VAR
URL_PART_RESULT.groups[NUM]       #STR|undefined. Match of (REGEXP) or *
