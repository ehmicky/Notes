
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   JSON-RPC   ┃
                                  ┗━━━━━━━━━━━━━━┛

VERSION ==>                       #2.0

PROTOCOL ==>                      #Protocol/transport-agnostic

JSON ==>                          #Payloads are in JSON

REQ.jsonrpc                       #Always '2.0'
REQ.id                            #STR|INT|undefined
                                  #Is the request ID, not model ID. I.e. used to match request and response
                                  #If undefined, means no response should be sent, including error responses.
REQ.method                        #'METHOD'
                                  #Cannot start with 'rpc.'
REQ.params                        #OBJ (named arguments) or ARR (positional arguments)
                                  #Optional

RES.jsonrpc                       #Always '2.0'
RES.id                            #Must be same as REQ.id
                                  #If REQ.id could not be parsed, should be null
RES.result                        #Any value
                                  #Must be absent if an error occured
RES.error                         #Must only be present if an error occured
RES.error.code                    #INT
                                  #Predefined errors:
                                  #  - -32700: JSON parsing, message "Parse error"
                                  #  - -32600: invalid JSON-RPC REQ, message "Invalid Request"
                                  #  - -32601: 'METHOD' not available, message "Method not found"
                                  #  - -32602: invalid REQ.params, message "Invalid params"
                                  #  - -32603: internal error, message "Internal error"
                                  #  - -32000 to -32768: reserved, message "Server error"
RES.error.message                 #STR
RES.error.data                    #Any value. Optional

BATCH REQUEST ==>                 #When sending an ARR of REQ.
                                  #Server should respond with RES_ARR for each REQ, except if REQ.id undefined.
                                  #RES_ARR can be in any order.
                                  #If RES_ARR is empty, must return nothing instead
                                  #If REQ_ARR is mepty, must return single RES error
                                  #If invalid JSON, must return single RES error

OLDER VERSIONS ==>                #JSON-RPC 1.0:
                                  #  - no REQ|RES.jsonrpc
                                  #  - REQ.params is ARR only
                                  #  - REQ.params is required
                                  #  - RES.error|result|id must be null if unset, not undefined
                                  #  - encourage HTTP POST
                                  #  - __jsonclass__ type hint to use non-JSON types
