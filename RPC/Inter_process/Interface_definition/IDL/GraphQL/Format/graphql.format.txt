
           
   GRAPHQL  
           



VERSION ==>                       #Spec from 18 May 2017.
                                  #Former releases:
                                21#  - October 2021
                                18#  - June 2018
                                 !#Not in spec, but in graphQL.js

SUMMARY ==>                       #This is for the format itself, not implementation
                                  #  - IDL, resource-oriented like REST
                                  #  - properties:
                                  #     - client-oriented (attribute-oriented), good|declarative query language
                                  #     - read-oriented (as opposed to write)
                                  #     - good support for nested resources
                                  #     - semantics left to implementation, except for generic read|write (Query|Mutation)
                                  #     - geared towards HTTP and JSON
                                  #     - strongly typed: safer but less dynamic
                                  #  - types: String, Int, Float, Boolean, ID, Enum, Object, InputObject, [List], NonOptional!
                                  #  - definitions:
                                  #     - all types, plus interfaces, unions, custom scalar, custom objects
                                  #     - top-level METHOD (query|mutation|subscription)
                                  #     - operation can pass arguments to attributes
                                  #  - resolver:
                                  #     - ATTR(RPARENT, ARGS, CONTEXT)->RATTR
                                  #     - produce result for children, or for actual output if no children
                                  #     - context is request-wide info
                                  #  - operation:
                                  #     - arguments to attributes
                                  #     - compile-time $VAR
                                  #     - differentiate between ATTR (resolver) and ALIAS (output shape)
                                  #     - fragments (mixins, can be polymorphic)
                                  #     - directives (remove|add parts according to $VAR)
                                  #  - subscription: instead of live query, can use PubSub
                                  #  - introspection: get metaprogramming info, i.e. available types,
                                  #    type name|description|signature, deprecation status
                                  #  - validation: can be done client|server-side
                                  #  - implementation-specific: programming language, CONTEXT, initial value, default resolver,
                                  #    protocol (usually HTTP), format (usually JSON), return value extensions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        GENERAL SYNTAX         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAMING ==>                        #For most names
                                  #  - including OPERATION, $VAR|ARG, ALIAS|ATTR, TYPE, ENUM_VAL, FRAGMENT, DIRECTIVE
                                  #Rules:
                                  #  - [[:alnum:]_]
                                  #  - cannot start with __
                                  #  - case sensitive
                                  #  - by convention, Capitalize TYPE, camelCase ATTR|ARG

COMMAS ==>                        #Always optional, i.e.:
                                  #  - can be replaced by whitespace
                                  #  - trailing comma accepted
                                  #For ARG, ARR, OBJ

WHITESPACES ==>                   #Are ignored, except inside STR

VAL                               #  - any of scalar types, i.e. STR, INT, FLOAT, BOOL, ENUM_VAL
                                  #  - null:
                                  #     - providing TYPE!
                                  #  - nothing|undefined:
                                  #     - providing TYPE!
                                  #  - ARR, i.e. [VAL,...]
                                  #  - OBJ, i.e. { ATTR: VAL, ... }

#COMMENT                          #Before a TYPE|ATTR|..., used as description for introspection queries


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



TYPE                              #Either:
                                  #  - scalar: String, Int, Float, Boolean, ID, ENUM
                                  #  - complex: Object, InputObject

MODIFIER ==>                      #As opposed to base types, modifies an underlying type
                                  #Includes: [TYPE] and TYPE!

String                            #"STR" (double quotes)
                                  #Must escape " \ newline, with \
                                  #Can contain \uXXXX \/ \b \f \n \r \t
                                  #UTF-8

Int                               #Signed 32 bits

Float                             #Double precision

Boolean                           #true|false

ID                                #Same as String, but with ID semantics

ENUM                              #Defined by enum ENUM

InputObject                       #OBJ used as client input (e.g. as ARG)
                                  #Defined by input TYPE

Object                            #OBJ used as server output
                                  #Includes METHOD
                                  #Defined by type TYPE

[TYPE]                            #List, i.e. array
                                  #Can be nested, e.g. [[TYPE]]

null                              #Can be assigned to any TYPE, except non-nullable ARG|ATTR
                                  #Does not assign default value???

undefined                         #Can be assigned to any TYPE, except non-nullable ARG
                                  #Can always be assigned to ATTR
                                  #If "= VAL" on ARG|ATTR, assigns it as default value
                                  #null same as undefined for ATTR???

TYPE!                             #Not-nullable, i.e. query error otherwise
                                  #  - or resolver error too???
                                  #ARR:
                                  #  - [TYPE!]: TYPE required, TYPE_ARR optional
                                  #  - [TYPE]!: TYPE optional, TYPE_ARR required
                                  #  - TYPE_ARR required might still have length 0

TYPE COERCION ==>                 #"input coercion":
                                  #  - typecasing from client to graphQL
                                  #  - query error if cannot typecast
                                  #  - is strict (no coercion)
                                  #"result coercion":
                                  #  - typecasting from server to graphQL
                                  #  - resolver error if cannot typecast
                                  #  - is loose:
                                  #     - DOUBLE <-> 'NUM' <-> INT
                                  #     - any -> STR
                                  #     - NUM -> BOOL
                                  #Exception:
                                  #  - VAL -> [VAL] (list) is allowed for "input coercion" but not "result coercion"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEFINITION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEFINITIONS ==>                   #Types declarations, done server-side
                                  #Can be shared to client (e.g. for validation)

type TYPE {
  ATTR[(ARG: TYPE [= VAL],...)]:
    TYPE
  ...
}                                 #Object type definition

VARIADIC ARGS ==>                 #Should be last ARR
                                  #Query needs to supply ARR, but VAL -> [VAL] typecasting possible (see above)

METHOD                            #Object TYPE, used as top-level entrypoint.
                                  #Only one per METHOD (singleton), but can consider direct children as actual different entrypoints.
                                  #Also has extra semantics.
                                  #Can be:
                                  #  - query (def):
                                  #     - same semantics as GET in REST
                                  #     - field resolvers (for a given OBJ) are executed in parallel
                                  #  - mutation:
                                  #     - same semantics as PUT|POST|DELETE|PATCH in REST
                                  #     - field resolvers (for a given OBJ) are executed serially
                                  #  - subscription (see below)
                                  #  - are otherwise technically working the same way

input TYPE {
  ATTR: TYPE [= VAL]
}                                 #InputObject type definition

enum ENUM {                       #ENUM type definition.
  ENUM_VAL                        #ENUM_VAL are:
  ...                             #  - not surrounded by quote
}                                 #  - uppercase by convention
                                  #Translated (implementation-specific) into an ENUM_INTERNAL_NUM by server implementation

interface TYPE { ... }            #Inheritance:
type TYPE2 implements TYPE,...    #  - TYPE is parent
 { ... }                          #  - TYPE2 must reimplement TYPE, as a superset|covariant:
                                  #     - can add ATTR, ARG, !-modifier
                                  #  - TYPE2 can be used where TYPE is expected:
                                  #     - only TYPE's ATTR can be queried as is
                                  #     - TYPE2's ATTR must use fragment with "on TYPE2"

union TYPE = TYPE2 | ...          #Mixed type definition.
                                  #Same as using an empty interface TYPE, implemented by TYPE2, etc.
                                  #TYPE2 must:
                                  #  - be complex
                                  #  - not include modifiers
                                  #Can be use as a type aliasing, by picking only one TYPE2
                                
scalar TYPE                       #New scalar type definition.
                                  #Must be:
                                  #  - implemented|defined by server
                                  #  - serializable as string

extend type ...                  !#Like type ..., but meant as a mixin to existing type
                                 !#Only parsed|executed by extendSchema()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RESOLVER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESOLVER ==>                      #GraphQL from|to backend layer.
                                  #Each GraphQL query ATTR:
                                  #  - has its own resolver function
                                  #  - when combined, it produces the query result

{                                 #RATTR|RPARENT is VAL[_PROMISE][_ARR]
  TYPE: {                         #If RATTR is:
    ATTR(RPARENT, ARGS, CONTEXT)  #  - is OBJ: passed to child as RPARENT
     ->RATTR                      #  - otherwise: rendered as output
    ...                           #     - i.e. shape of return value and TYPE are the same.
  }                               #For top-level ATTR, implementation can allow client to provide "initial|root value" (RPARENT)
}                                 #ARGS: the ones passed by query, as OBJ
                                  #CONTEXT:
                                  #  - request-long object, i.e. holding request info
                                  #  - provided by server, implementation-specific
                                 !#Server implementation often provide default resolver
                                 !#  - e.g. returning RPARENT.ATTR

RESOLVER ERROR ==>                #Can arise on:
                                  #  - result coercion error
                                  #  - any general exception|error thrown (or returned, but prefer thrown) during ATTR()
                                  #Effect:
                                  #  - same as if resolver returned null
                                  #  - will be appended to return value "errors"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           OPERATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[METHOD [OPERATION]               #ATTR:
[($VAR: TYPE [= DEF_VAL],...)]] { #  - used to pick resolver
  [ALIAS:] ATTR[(ARG: VAL,...)] { #  - more like an action name, i.e. with METHOD:
    ... (recursive)               #     - query: conceptually like "getAttr"
  }]                              #     - mutation: conceptually like RPC action or specific REST method
  ...                             #ALIAS:
}                                 #  - used for return value output, i.e. response shape
                                  #  - def: same as ATTR
                                  #  - useful to differentiate to avoid collisions when using twice same ATTR but different arguments
                                  #ARG:
                                  #  - passed to resolver
                                  #Sub { ... }:
                                  #  - necessary if TYPE is complex
                                  #  - forbidden otherwise
                                  #  - same syntax as OBJ
                                  #$VAR:
                                  #  - can be used as const VAL inside query body, including fragments
                                  #     - macro substituted by server
                                  #  - if defined, has to be used
                                  #OPERATION:
                                  #  - allows query to define several top-level operations
                                  #  - server performs only one of them, selected using an "operationName" parameter provided by client
                                  #  - there is still only one top-level operation performed
                                  #How clients communicate $VAR values and "operationName" is server implementation-specific
                                  #  - e.g. with URL query variables

DOCUMENT ==>                      #File containing 0-n operations|fragments
                                  #  - providing they do not have same names

QUERY ERROR ==>                   #Produces { errors ... } return value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FRAGMENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


fragment FRAGMENT on TYPE { ... } #Declare named fragment

{                                 #Expand|mixes in named fragment
  [...]                           #Must be used in a query
  ...FRAGMENT                     #Parent must be TYPE (or subtype)
  [...]                           #  - if not, silently ignored
}                                 #  - parent can be polymorphic (e.g. using INTERFACE or union)
                                  #TYPE:
                                  #  - must be complex
                                  #  - cannot include modifiers
                                  #Can be nested

... [on TYPE] { ... }             #Inline fragment
                                  #Shortcut for ...FRAGMENT, followed by fragment FRAGMENT on TYPE {...}
                                  #Only useful usage is coupled with polymorphism
                                  #"on TYPE" is only optional if @DIRECTIVE is used


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DIRECTIVE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


... @DIRECTIVE(ARG: VAL,...)...   #Possibly change return value shape.
 [{ ... }]                        #Server implementation-defined.

@include|skip(if: BOOL)           #Skips field if false|true
                                  #Possibly used after:
                                  #  - ATTR[(...)]
                                  #  - fragment FRAGMENT on TYPE
                                  #  - ... [on TYPE]
                                  #  - ...FRAGMENT
                                  #  - type|input|enum|interface|union|scalar TYPE

@deprecated([reason: STR])       !#STR:
                                 !#  - can contain Markdown
                                 !#  - def: 'No longer supported'
                                 !#Shown in introspection
                                 !#Only used by graphql.js when parsing with build[AST]Schema() not with normal SCHEMA methods
                                 !#Possibly used after:
                                 !#  - ATTR[(...)]
                                 !#  - ENUM_VAL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RETURN VALUE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RETURN RESPONSE ==>               #  - data OBJ
                                  #     - absent if error before operation starts
                                  #     - null if error during operation
                                  #  - errors OBJ_ARR:
                                  #     - if queried data:
                                  #        - is not defined: always present (query error)
                                  #        - is defined: present if query|resolver error
                                  #     - always contain at least one element
                                  #     - contains:
                                  #        - message STR
                                  #        - locations OBJ_ARR (within GraphQL document):
                                  #           - line NUM
                                  #           - column NUM
                                  #        - path 'VAR'|NUM_ARR
                                  #        - any custom
                                 !#        - stack STR
                                 !#        - originalError ERROR
                                 !#        - positions NUM_ARR
                                 !#        - nodes AST_NODE_ARR
                                 !#        - source SOURCE
                                  #  - extensions OBJ (any custom)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INTROSPECTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INTROSPECTION ==>                 #Special attributes that request metadata

__typename                        #'TYPE'
                                  #It is:
                                  #  - SCHEMA: '__Schema'
                                  #  - TYPEINFO: '__Type'
                                  #  - DIRECTIVEINFO: '__Directive'
                                  #  - FIELD: '__Field'
                                  #  - INPUTVALUE: '__InputValue'
                                  #  - ENUMVALINFO: '__EnumValue'
                                  #  - TYPEKIND: '__TypeKind'
                                  #  - DIRECTIVE: '__Directive'
                                  #  - DIRECTIVELOCATION: '__DirectiveLocation'

__schema                          #SCHEMA:
                                  #  - types TYPEINFO_ARR:
                                  #     - all supported types, including scalar and __TYPE
                                  #  - queryType|mutationType|subscriptionType TYPEINFO (top-level types METHOD)
                                  #  - directives DIRECTIVEINFO_ARR
introspectionQuery               !#'QUERY' querying all possible introspection attributes from __schema

DIRECTIVEINFO                     #  - name 'DIRECTIVE'
                                  #  - description STR
                                  #  - args INPUTVALUE_ARR
                                  #  - locations DIRECTIVELOCATION_ARR

DIRECTIVELOCATION                 #Enum among:
                                  #  - (query) QUERY|MUTATION|SUBSCRIPTION|FIELD|FRAGMENT_DEFINITION|
                                  #    FRAGMENT_SPREAD|INLINE_FRAGMENT
                                 !#  - (definition) SCHEMA|SCALAR|OBJECT|FIELD_DEFINITION|ARGUMENT_DEFINITION|INTERFACE|
                                 !#    UNION|ENUM|ENUM_VALUE|INPUT_OBJECT|INPUT_FIELD_DEFINITION

__type(name: 'TYPE')              #TYPEINFO:
                                  #  - name 'TYPE'
                                  #  - description STR
                                  #  - kind TYPEKIND
                                  #  (only NonNull|List modifiers)
                                  #  - ofType TYPEINFO: when kind is a modifier (NON_NULL|LIST), use "ofType" to get subtype
                                  #  (only Objects|Interface)
                                  #  - fields[(includeDeprecated: true)] FIELD_ARR
                                  #  (only InputObjects)
                                  #  - inputFields INPUTVALUE_ARR
                                  #  (only Objects)
                                  #  - interfaces TYPEINFO_ARR
                                  #  (only Interface|Union)
                                  #  - possibleTypes TYPEINFO_ARR
                                  #  (only Enums)
                                  #  - enumValues[(includeDeprecated: true)] ENUMVALINFO_ARR

TYPEKIND                          #Enum among SCALAR|[INPUT_]OBJECT|INTERFACE|UNION|ENUM|NON_NULL|LIST

FIELD                             #  - name 'ATTR'
                                  #  - description STR
                                  #  - type TYPE_INFO
                                  #  - args INPUTVALUE_ARR
                                  #  - isDeprecated BOOL
                                  #  - deprecationReason STR

INPUTVALUE                        #  - name 'VAR'
                                  #  - description STR
                                  #  - type TYPE_INFO
                                  #  - defaultValue STR

ENUMVALINFO                       #  - name 'ENUMVAL'
                                  #  - description STR
                                  #  - isDeprecated BOOL
                                  #  - deprecationReason STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VALIDATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VALIDATION ==>                    #Since query has explicit typing, can validate against server definition compile-time
                                  #  - can be done by client and|or by server
                                  #List of possible errors is available in spec


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SUBSCRIPTION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUBSCRIPTIONS ==>                 #METHOD similar to query, except:
                                  #  - receives results when server wants, i.e. on push, e.g. via WebSocket
                                  #  - i.e. initial query ("subscription") is only an "addListener",
                                  #    although can perform a query too

type subscription {
  CHANNEL(...) { ... }
}                                 #Schema definition, similar to type query

subscription ANY_NAME {           #Client query, to subscribe to channel.
  CHANNEL(...) { ... }            #Arguments can be passed to server to customize event handling for that channel.
}                                 #When server wants to push to client:
                                  #  - it triggers an event
                                  #  - event PAYLOAD is used as initial value of query, and query is performed
                                  #  - query return value is communicated to client, e.g. via WebSocket
                                  #The server may (or not) push right away a query as the response to subscription.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    IMPLEMENTATION-SPECIFIC    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROTOCOL ==>                      #Single endpoint, usually /graphql
                                  #Parameters:
                                  #  - query JSON
                                  #  - variables JSON: VAR VAL
                                  #  - operationName 'METHOD': if query contains several possible top-level operations
                                  #Usually over HTTP, either:
                                  #  - GET with parameters as query variables
                                  #     - only for METHOD 'query'
                                  #  - POST with parameters as request body JSON, Content-Type: application/json [C]
                                  #  - POST with QUERY as request body, Content-Type: application/graphql [C]
                                  #    and query variables for other parameters

VERSIONING ==>                    #Recommends no versioning (but I don't agree with that)

OTHER IMPLEMENTATION-SPECIFIC ==> #  - programming language
                                  #  - CONTEXT
