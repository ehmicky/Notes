
             
   GRAPHQLJS  
             



VERSION ==>                       #0.10.1
                                  #Node.js server-side implementation of GraphQL
                                  #Only includes the bare minimum
                                  #Core:
                                  #  - performs operation according to spec
                                  #  - must:
                                  #     - provide definition as SCHEMA:
                                  #        - using either:
                                  #           - JavaScript (e.g. GraphQLInt)
                                  #           - 'DEFINITIONS' string
                                  #           - DOCUMENT_NODE
                                  #        - can be printed back to 'DEFINITIONS'
                                  #     - provide 'QUERY' (and VARIABLES, 'OPERATION'), which is lexed and parsed into
                                  #       plain object DOCUMENT_NODE (which includes AST_NODEs)
                                  #  - resolvers:
                                  #     - default one returns RPARENT.FIELD[(ARGS, CONTEXT, RESINFO)]
                                  #     - can provide INITIALVALUE, CONTEXT
                                  #     - provides fourth argument RESINFO with extra info
                                  #  - lots of validation:
                                  #     - including anything that can be done before performing operation
                                  #     - can perform it manually
                                  #     - can validate against deprecation
                                  #  - can check if schema changes introduce breaking changes


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


graphql(SCHEMA,'QUERY'|SOURCE,...)#Same as:
->PROMISE(OBJ)                    #  DOCUMENT_NODE = parse('QUERY'|SOURCE)
                                  #  validate(SCHEMA, DOCUMENT_NODE)
                                  #  execute(SCHEMA, DOCUMENT_NODE, ...)
                                  #Can also use named parameters (see execute())

execute(SCHEMA, DOCUMENT_NODE     #Perform query DOCUMENT_NODE, against definitions SCHEMA
[, INITIALVALUE][, CONTEXT]       #Parameters:
[, VARIABLES][, 'OPERATION']      #  - CONTEXT: request-wide object passed to resolvers. Can be anything
[, FUNC])->PROMISE(OBJ)           #  - VARIABLES OBJ: list of $VAR values
                                  #  - 'OPERATION': operationName (if query contains several possible)
                                  #Resolve functions:
                                  #  - specified in SCHEMA, i.e. in OBJTYPE.FIELD.resolve(...)
                                  #  - leaves|scalar return values are rendered by TYPE.serialize(VAL)
                                  #  - def is FUNC, which by def just returns RPARENT.FIELD[(ARGS, CONTEXT, RESINFO)]
                                  #Can throw GraphQLError if something wrong in query
                                  #Can also use named parameters OBJ.schema|document|rootValue|contextValue|variableValues|
                                  #operationName|fieldResolver

RESINFO                           #Extra fourth argument passed to resolve functions.
                                  #OBJ:
                                  #  - schema SCHEMA
                                  #  - rootValue INITIALVALUE
                                  #  - variableValues VARIABLES: after coercion
                                  #  - operation OPERATION_DEFINITION_NODE: from DOCUMENT_NODE + 'OPERATION'
                                  #  - fragments.FRAGMENT FRAGMENT_DEFINITION_NODE: from DOCUMENT_NODE
                                  #  - fieldName 'ATTR'
                                  #  - fieldNodes FIELD_NODE_ARR (siblings)
                                  #  - returnType OUTPUTTYPE (field's type)
                                  #  - parentType COMPOSITETYPE (parent field's type)
                                  #  - path null or { prev PATH, key NUM|'VAR' }

subscribe(SCHEMA, DOCUMENT_NODE   #Similar to execute() (including named parameters) but for subscriptions
[, INITIALVALUE][, CONTEXT]       #Subscribe functions:
[, VARIABLES][, 'OPERATION']      #  - specified in SCHEMA, i.e. in OBJTYPE.FIELD.resolve(...)
[, FUNC][, FUNC2])->PROMISE(OBJ)  #  - def is FUNC2
                                  #  - when using named parameter, called 'subscribeFieldResolver'
                                  #  - must return values as ASYNC_ITERABLE
                                  #First, registers subscription:
                                  #  - internally calls createSourceEventStream(...)
                                  #    (which is exported if needs to directly use)
                                  #  - this does execute(...) but using subscribe function as the resolve function
                                  #Then, pushes results:
                                  #  - by iterating INITIALVALUE over ASYNC_ITERABLE
                                  #  - then firing execute(...) with INITIALVALUE, with the normal resolve function


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEFINITION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOAL ==>                          #The following members only models graphQL definition format in JavaScript (SCHEMA), without adding anything more.

buildSchema('DEFINITIONS')
 ->SCHEMA                         #Shortcut.
buildASTSchema(DOCUMENT_NODE)     #Instead of using new GraphQL*Type(...), let graphql.js create them by parsing 'DEFINITIONS' or DOCUMENT_NODE
 ->SCHEMA                         #Will also add:
                                  #  - comments before anything -> description
                                  #  - @deprecated REASON -> deprecationReason
                                  #Problem:
                                  #  - does not add resolvers
                                  #  - does not add resolveType(), so cannot use interface|union
                                  #  - does not add serialize|parseValue|parseLiteral(), so cannot use custom scalars
                                 ##  - GraphQL-tools fixes all this (see its doc)


CATEGORIES ==>                    #  +-----------------+---------------+---------+---------------+-----------+------------+----------+--------------+
                                  #  | NonNullModifier | ArrayModifier | OBJTYPE | INTERFACETYPE | UNIONTYPE | SCALARTYPE | ENUMTYPE | INPUTOBJTYPE |
                                  #  +-------------------------------------------+---------------------------+-----------------------+--------------+
                                  #  |-------------------------------------------| ABSTRACTYPE               | LEAFTYPE              |--------------|
                                  #  +---------------------------------+---------+---------------------------+-----------------------+--------------+
                                  #  | INPUTTYPE-1                     | COMPOSITETYPE                       | INPUTTYPE-2                          |
                                  #  +---------------------------------+-------------------------------------+-----------------------+--------------+
                                  #  |                                   OUTPUTTYPE                                                  |--------------|
                                  #  +---------------------------------+-------------------------------------------------------------+--------------+
                                  #  |---------------------------------| NAMEDTYPE                                                                  |
                                  #  +-----------------+---------------+----------------------------------------------------------------------------+
                                  #  |-----------------| NULLABLETYPE                                                                               |
                                  #  +-----------------+--------------------------------------------------------------------------------------------+
                                  #  | TYPE                                                                                                         |
                                  #  +--------------------------------------------------------------------------------------------------------------+
is[Input|Output|Leaf|Composite|
Abstract|Named]Type(VAL)->BOOL    #
assert[Input|Output|Leaf|Composite
|Abstract|Named]Type(VAL)         #Throws exceptions if not
isEqualType(TYPE, TYPE2)->BOOL    #Recursively

TYPE.*                            #The following are only for created types (i.e. with a constructor) (except modifiers)
                                  #Are overriden by constructor's OPTS
TYPE.name                         #'TYPE'.
                                  #Returned by TYPE.toString(), which also adds potential [] or ! modifiers
TYPE.description                  #STR


new GraphQLList(TYPE)             #ARR modifier
getNamedType(TYPE)->TYPE          #Removes NonNull|ARR modifiers, if present

new GraphQLNonNull(TYPE)          #NonNull (!) modifier
getNullableType(TYPE)->TYPE       #Removes NonNull modifier, if present


CONSTRUCTORS ==>                  #All TYPE constructors creates custom TYPEs, not instance of that TYPE
                                  #I.e. GraphQLInt is not constructor

new GraphQLScalarType(OPTS)       #SCALARTYPE. Constructor is used for custom ones
                                  #OPTS:
                                  #  (server -> client)
                                  #  - serialize(VAL)->STR
                                  #  (client -> server)
                                  #  - parseValue(STR)->VAL
                                  #  - parseLiteral(AST_NODE)->VAL
                                  #VAL is of any type
                                  #Should throw TypeError if wrong input
GraphQLInt                        #INT TYPE
GraphQLFloat                      #FLOAT TYPE
GraphQLString                     #STR TYPE
GraphQLBoolean                    #BOOL TYPE
GraphQLID                         #ID TYPE

GraphQLJSON                      ##'JSON' non-OBJ TYPE
GraphQLJSONObject                ##'JSON' OBJ TYPE
                                 ##Package graphql-type-json (version 0.3.2)

PACKAGE ==>                      ##Package graphql-iso-date (version 3.1.0)
GraphQLDate                      ##Serialized as 'YYYY-MM-DD' (ISO-8601), parsed as DATE
GraphQLTime                      ##Same for 'HH:MM:SSZ' (ISO-8601), parsed as DATE
GraphQLDateTime                  ##Same for 'YYYY-MM-DDTHH:MM:SSZ' (ISO-8601), parsed as DATE

PACKAGE ==>                      ##Package graphql-custom-types (version 0.7.2)
GraphQLDate                      ##Of type string, validating using Date.parse()
GraphQLEmail                     ##Of type string, using regexp validation
                                 ##Checks:
                                 ##  - characters are not among <>()[\]\.,;:\s@\", unless surrounded by "..." (username only)
                                 ##  - @ in middle
                                 ##  - possible subdomains
                                 ##  - TLD with min 2 characters
GraphQLURL                       ##Of type string, using regexp validation
                                 ##Only for HTTP[S] and FTP
GraphQLUUID                      ##Of type string, using regexp validation. Any UUID version, i.e. just check AAAAAAAA-BBBB-CDDD-EEFF-GGGGGGGGGGGG with hexs
new GraphQLLimitedString         ##Of type string. Must:
(MIN[, MAX][, 'ALPHABET'])       ##  - have length between MIN and MAX (inclusive)
                                 ##  - only contains characters from 'ALPHABET'
new GraphQLPassword              ##Same but must also contain at least:
(MIN[, MAX][, 'ALPHABET'][,OPTS])##  - one number and one letter, if OPTS.alphaNumeric true
                                 ##  - one uppercase and one lowercase letter, if OPTS.mixedCase true
                                 ##  - one non-alphanumeric, if OPTS.specialChars true
Factory.getRegexScalar(OPTS)     ##Creates SCALARTYPE of type string, using OPTS:
                                 ##  - name, description
                                 ##  - regex REGEXP: for validation
                                 ##  - error 'ERROR' (def: 'Query error: NAME'): message from the GraphQLError exception thrown on validation
Factory.getCustomScalar('NAME',
'DESCRIPTION', FUNC(AST_NODE))
->SCALARTYPE                     ##Creates SCALARTYPE using name, description, parseLiteral()

new GraphQLEnumType(OPTS)         #OPTS.values.ENUM_VAL:
                                  #  - value ENUM_INTERNAL_NUM
                                  #  - description STR
                                  #  - deprecationReason STR

new GraphQLObjectType(OPTS)       #OPTS:
                                  #  - fields[()].FIELD:
                                  #     - type OUTPUTTYPE
                                  #     - args.ARG:
                                  #        - type INPUTTYPE
                                  #        - defaultValue VAL
                                  #        - description STR
                                  #     - resolve(...)->VAL: resolve function
                                 ##        - can validate all resolvers are defined, using GraphQL-tools (see its doc)
                                  #     - subscribe(...)->VAL: subscribe function
                                  #     - description STR
                                  #     - deprecationReason STR
                                  #  - interfaces[()] INTERFACETYPE_ARR
                                  #  - isTypeOf(VAL, RESINFO)->[PROMISE_]BOOL: VAL is RESOLVER return value

new GraphQLSchema(OPTS)           #OPTS:
                                  #  - query|mutation|subscription OBJTYPE
                                  #  - types NAMEDTYPE_ARR:
                                  #     - all possible types, used by introspection __schema.types
                                  #     - guessed by default by going through schema
                                  #  - directives DIRECTIVE_ARR

new GraphQLInputObjectType(OPTS)  #OPTS.fields[()].FIELD:
                                  #  - type INPUTTYPE
                                  #  - defaultValue VAL
                                  #  - description STR

new GraphQLInterfaceType(OPTS)    #OPTS:
                                  #  - fields: like OBJTYPE
                                  #  - resolveType(VAL, RESINFO)->OBJTYPE
                                  #     - used to determine which child type to pick
                                  #     - def: call each defined OBJTYPE.isTypeOf()

new GraphQLUnionType(OPTS)        #OPTS:
                                  #  - types OBJTYPE_ARR[()]
                                  #  - resolveType: like INTERFACETYPE


new GraphQLDirective(OPTS)        #OPTS:
                                  #  - name 'DIRECTIVE', description STR
                                  #  - locations ARR: among DirectiveLocation.*
                                  #  - args.ARG:
                                  #     - type INPUTTYPE
                                  #     - description STR:
                                  #     - defaultValue VAL
GraphQLInclude|SkipDirective      #Possible locations: FIELD, FRAGMENT_SPREAD, INLINE_FRAGMENT
GraphQLDeprecatedDirective        #Possible locations: FIELD_DEFINITION, ENUM_VALUE


__Schema|__Type|__Directive|
__Field|__InputValue|__EnumValue|
__TypeKind|__Directive|           #
__DirectiveLocation               #OBJTYPE, related to introspection, with default resolvers


extendSchema(SCHEMA,DOCUMENT_NODE)#Proper way to add new definitions (DOCUMENT_NODE) to existing SCHEMA
 ->SCHEMA                         #Also the only way to use "extend type ..." definitions (GraphQL-tools fixes all this (see its doc))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LEXING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Source('QUERY'[, 'FILE'])     #'FILE' is for debugging (def: 'GraphQL')

getLocation(SOURCE, NUM)->OBJ     #Converts NUM of characters into OBJ: line NUM, column NUM
                                  #I.e. after taking into account newlines as formatting

lex(SOURCE)->LEXER                #
LEXER([NUM])->AST_TOKEN           #Returns next AST_TOKEN, or EOF if none
                                  #NUM is position to seek (def: next one)
AST_TOKEN.kind                    #Among Kind.*:
                                  #  - SOF|EOF (start|end)
                                  #  - BANG: !
                                  #  - DOLLAR: $
                                  #  - COLON: :
                                  #  - EQUALS: =
                                  #  - AT: @
                                  #  - PIPE: |
                                  #  - BRACKET_L|BRACKET_R: [ ]
                                  #  - BRACE_L|BRACE_R: { }
                                  #  - PAREN_L|PAREN_R: ( )
                                  #  - SPREAD: ...
                                  #  - COMMENT: #COMMENT
                                  #  - NAME: 'ATTR', etc.
                                  #  - INT|FLOAT|STRING
AST_TOKEN.value                   #STR
AST_TOKEN.start|end               #Position NUM (in characters)
AST_TOKEN.line|column             #NUM
AST_TOKEN.prev|next               #AST_TOKEN2|null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOAL ==>                          #Only parse graphQL query format to JavaScript, without adding anything more.

parse*(LEXER)->*_NODE             #Parse at current LEXER position, advancing it
                                  #Throws SyntaxError if problem
parse(STR|SOURCE)->DOCUMENT_NODE
parseValue(STR|SOURCE)->VALUE_NODE
parseType(STR|SOURCE)->TYPE_NODE  #Same (for those types) but internally creates LEXER

getOperationAST
(DOCUMENT_NODE[, 'OPERATION'])
 ->OPERATION_DEFINITION_NODE      #

valueFromAST(SCHEMA, TYPE_NODE
 [, VARIABLES])->VAL              #
astFromValue(VAL, TYPE)
 ->VALUE_NODE                     #
typeFromAST
 (SCHEMA, TYPE_NODE)->TYPE        #

gql`QUERY`->DOCUMENT_NODE        ##Like parse('QUERY') except:
                                 ##  - memoized
                                 ##  - can use ${AST_NODE}
                                 ##  - remove AST_NODE.loc
                                 ##Package graphql-tag (1.2.4)
GRAPHQL-LOADER                   ##Loads 'QUERY' files as DOCUMENT_NODE, using gql`QUERY`
                                 ##QUERY can contain #import "FILE" to include another file (must contain top-level operation)
                                 ##Package graphql-tag (1.2.4)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AST_NODE                          #Any of following *_NODE
                                  #  - kind: CamelCase, e.g. OPERATION_DEFINITION_NODE has kind 'OperationDefinition'
                                  #  - loc
                                  #     - start|end NUM
                                  #     - start|endToken AST_TOKEN
                                  #     - source SOURCE

NAME_NODE                         #OBJ: value STR

TYPE_NODE                         #Any of the following *_TYPE_NODE
NAMED_TYPE_NODE                   #OBJ: name NAME_NODE
LIST_TYPE_NODE                    #OBJ: type TYPE_NODE
NON_NULL_TYPE_NODE                #OBJ: type NAMED_TYPE_NODE|LIST_TYPE_NODE

VALUE_NODE                        #Any of the following *_VALUE_NODE or VARIABLE_NODE
VARIABLE_NODE                     #OBJ: name NAME_NODE
INT_VALUE_NODE                    #OBJ: value STR
FLOAT_VALUE_NODE                  #OBJ: value STR
STRING_VALUE_NODE                 #OBJ: value STR
BOOLEAN_VALUE_NODE                #OBJ: value BOOL
NULL_VALUE_NODE                   #OBJ.
ENUM_VALUE_NODE                   #OBJ: value STR
LIST_VALUE_NODE                   #OBJ: values VALUE_NODE_ARR
OBJECT_VALUE_NODE                 #OBJ: fields OBJECT_FIELD_NODE_ARR
                                  #  - name NAME_NODE
                                  #  - value VALUE_NODE

ARGUMENT_NODE                     #OBJ:
                                  #  - name NAME_NODE
                                  #  - value VALUE_NODE

INPUT_VALUE_DEFINITION_NODE_ARR   #OBJ:
                                  #  - name NAME_NODE
                                  #  - type TYPE_NODE
                                  #  - defaultValue VALUE_NODE
                                  #  - directives DIRECTIVE_NODE_ARR

DIRECTIVE_NODE                    #OBJ:
                                  #  - name NAME_NODE
                                  #  - arguments ARGUMENT_NODE_ARR

DOCUMENT_NODE                     #OBJ: definitions OBJ_ARR, of either:
                                  #  (OPERATION_DEFINITON_NODE)
                                  #  (FRAGMENT_DEFINITION_NODE)
                                  #  (TYPE_SYSTEM_DEFINITION_NODE), of either
                                  #     (SCHEMA_DEFINITION_NODE)
                                  #     (TYPE_DEFINITION_NODE), of either
                                  #       (SCALAR_TYPE_DEFINITION_NODE)
                                  #       (OBJECT_TYPE_DEFINITION_NODE)
                                  #       (INTERFACE_TYPE_DEFINITION_NODE)
                                  #       (UNION_TYPE_DEFINITION_NODE)
                                  #       (ENUM_TYPE_DEFINITION_NODE)
                                  #       (INPUT_OBJECT_TYPE_DEFINITION_NODE)
                                  #    (TYPE_EXTENSION_DEFINITION_NODE)
                                  #    (DIRECTIVE_DEFINITION_NODE)

OPERATION_DEFINITON_NODE          #OBJ:
                                  #  - operation 'METHOD'
                                  #  - name NAME_NODE
                                  #  - variableDefinitions VARIABLE_DEFINITION_NODE_ARR
                                  #     - variable VARIABLE_NODE
                                  #     - type TYPE_NODE
                                  #     - defaultValue VALUE_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - selectionSet SELECTION_SET_NODE

SELECTION_SET_NODE                #OBJ: selections SELECTION_NODE_ARR, of either
                                  #  (FIELD_NODE)
                                  #  (FRAGMENT_SPREAD_NODE)
                                  #  (INLINE_FRAGMENT_NODE)

FIELD_NODE                        #OBJ:
                                  #  - alias NAME_NODE
                                  #  - name NAME_NODE
                                  #  - arguments ARGUMENT_NODE_ARR
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - selectionSet SELECTION_SET_NODE

FRAGMENT_SPREAD_NODE              #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR

INLINE_FRAGMENT_NODE              #OBJ:
                                  #  - typeCondition NAMED_TYPE_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - selectionSet SELECTION_SET_NODE

FRAGMENT_DEFINITION_NODE          #OBJ:
                                  #  - name NAME_NODE
                                  #  - typeCondition NAMED_TYPE_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - selectionSet SELECTION_SET_NODE

SCHEMA_DEFINITION_NODE            #OBJ:
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - operationTypes OPERATION_TYPE_DEFINITION_NODE_ARR
                                  #     - operation: 'METHOD'
                                  #     - type NAMED_TYPE_NODE

SCALAR_TYPE_DEFINITION_NODE       #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR

OBJECT_TYPE_DEFINITION_NODE       #OBJ:
                                  #  - name NAME_NODE
                                  #  - interfaces NAMED_TYPE_NODE_ARR
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - fields FIELD_DEFINITION_NODE_ARR
                                  #     - name NAME_NODE
                                  #     - arguments INPUT_VALUE_DEFINITION_NODE_ARR
                                  #     - type TYPE_NODE
                                  #     - directives DIRECTIVE_NODE_ARR

INTERFACE_TYPE_DEFINITION_NODE    #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - fields FIELD_DEFINITION_NODE_ARR (see above)

UNION_TYPE_DEFINITION_NODE        #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - types NAMED_TYPE_NODE_ARR

ENUM_TYPE_DEFINITION_NODE         #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - values ENUM_VALUE_DEFINITION_NODE_ARR
                                  #     - name NAME_NODE
                                  #     - directives DIRECTIVE_NODE_ARR

INPUT_OBJECT_TYPE_DEFINITION_NODE #OBJ:
                                  #  - name NAME_NODE
                                  #  - directives DIRECTIVE_NODE_ARR
                                  #  - fields INPUT_VALUE_DEFINITION_NODE_ARR

TYPE_EXTENSION_DEFINITION_NODE    #OBJ: definition OBJECT_TYPE_DEFINITION_NODE (see above)

DIRECTIVE_DEFINITION_NODE         #OBJ:
                                  #  - name NAME_NODE
                                  #  - arguments INPUT_VALUE_DEFINITION_NODE_ARR
                                  #  - locations NAME_NODE_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VISITOR            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


visit(AST_NODE, OPTS[, MAP])      #Iterates over AST_NODE and descendants
 ->AST_NODE2                      #OPTS visitor function return values can modify|skip part of the tree, returning new AST_NODE2
                                  #OPTS:
                                  #  - enter|leave[.KIND](AST_NODE, KEY, PARENT_AST_NODE, PATH, ANCESTORS_AST_NODE_ARR)
                                  #     - KIND is NODE.kind (def: any)
                                  #     - KEY is NUM (if iterating over ARR) or 'VAR' (if iterating over OBJ)
                                  #     - PATH is KEY_ARR, including ancestors
                                  #     - enter|leave is when starting|stopping to iterate over the AST_NODE and its descendants
                                  #     - can return:
                                  #        - undefined: no action
                                  #        - VAL: replace node by VAL
                                  #        - null: erase node
                                  #        - false: skips visiting current node, but keep it
                                  #        - BREAK: skips visiting any node
                                  #  - KIND[.enter|leave](...): same (def: enter)
                                  #MAP:
                                  #  - define which attribute each node has
                                  #  - only need to specify if adding custom AST_NODEs
                                  #  - default one is QueryDocumentKeys
                                  #  - key is KIND
                                  #  - value is 'ATTR'_ARR:
                                  #     - attributes to iterate over, in each AST_NODE
                                  #     - e.g. for 'Directive', ['name', 'value']

visitInParallel(OPTS_ARR)->OPTS   #Return OPTS that applies several OPTs
visitWithTypeInfo(OBJ, OPTS)
 ->OPTS                           #Returns OPTS that also fires OBJ.enter|leave(AST_NODE), for debugging


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SERIALIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


print(AST_NODE)->STR              #Serialize AST_NODE to graphQL query format

print[Introspection]Schema        #Serialize SCHEMA into graphQL query format, underlyingly using print(...)
 (SCHEMA)->STR                    #Automatically sorts
                                  #Includes:
                                  #  - no "Introspection": not @DIRECTIVE nor builtin scalar types nor introspection types
                                  #  - "Introspection": only introspection types


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VALIDATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


validate(SCHEMA, DOCUMENT_NODE)   #Validates query (not against deprecation)
 ->GRAPHQLERROR_ARR|null          #Using spec-defined validation rules, also available one by one if necessary (see source)

findDeprecatedUsages
(SCHEMA, DOCUMENT_NODE)
->GRAPHQL_ERROR_ARR               #Validates against deprecation

assertValidName('TYPE'[, BOOL])   #Used internally to check against all names, including 'TYPE', 'ATTR', 'ENUM_VAL', 'DIRECTIVE', 'ARG', etc:
                                  #  - check regexp /^[_a-zA-Z][_a-zA-Z0-9]*$/
                                  #  - check does not start with __, unless BOOL true
                                  #     - can ignore error with OPTS.isIntrospection true for OBJTYPE|ENUMTYPE
                                  #  - throws exception if error
isValidJSValue(VAL, TYPE)->BOOL   #From server to client
isValidLiteralValue
(TYPE, VALUE_NODE)->BOOL          #From client to server


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MIGRATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


findBreakingChanges               #Returns possible breaking changes from one schema to another
(OLD_SCHEMA, NEW_SCHEMA)->OBJ_ARR #OBJ:
                                  #  - type STR
                                  #  - description STR
                                  #Possible:
                                  #  - 'TYPE|ARG_REMOVED[_FROM_UNION|ENUM]'
                                  #  - 'TYPE|FIELD|ARG_CHANGED_KIND'
findDangerousChanges(...)         #Same but for non-breaking changes but still dangerous:
                                  #  - 'ARG_DEFAULT_VALUE_CHANGE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ERRORS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ERRORS ==>                        #On exceptions inside resolvers: ouputs in return value "errors" field, as GraphQLError
                                  #On everything else: throws error
                                 ##Can use GraphQL-tools (see its doc) to use custom function

GraphQLError                      #Every exception|error is of that type, including the ones below
                                  #OBJ:
                                  #  - message STR
                                  #  - stack STR
                                  #  - originalError ERROR
                                  #  - locations OBJ_ARR: line|column
                                  #  - path 'VAR'|NUM_ARR
                                  #  - nodes AST_NODE_ARR
                                  #  - source SOURCE
                                  #  - positions NUM_ARR
syntaxError                       #On parsing|lexing
locatedError                      #During resolvers
