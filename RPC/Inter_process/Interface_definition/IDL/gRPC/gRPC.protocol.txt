
        
   GRPC  
        



VERSION ==>                       #1.48.0
                                  #See also grpc-node

SUMMARY ==>                       #  - low payload size (protobuf)
                                  #  - request|response typing
                                  #  - streaming-friendly (uni|bi-directional)
                                  #  - on HTTP/2, but without any HTTP semantics
                                  #  - timeout|cancellation
                                  #  - SSL authentication
                                  #  - automatic connection retry
                                  #  - keepalive
                                  #  - proxy, load balancing

IDL ==>                           #Uses protobuf 'services' as endpoints IDL.

PAYLOADS ==>                      #Message OBJs
                                  #protobuf is also used for payloads most of the time. It can be customized, but difficult.
                                  #Can be compressed.

STREAMING ==>                     #Either|both request|response can be either streamed or not.
                                  #When streamed, order is preserved.
                                  #If request stream, server can start responding as soon as request stream starts.

METADATA ==>                      #For request|response
                                  #Custom OBJ, outside of request|response payloads
                                  #Key is dash-case
                                  #Value can be:
                                  #  - either STR or binary
                                  #     - if binary, key must end with '-bin' (sent as base64 in HTTP/2)
                                  #  - array of them
                                  #Request metadata is always sent before request message
                                  #Response metadata can be sent:
                                  #  - either before|after receiving response message
                                  #  - additionally after response message sent (trailing metadata)

TIMEOUT ==>                       #Client can specify timeout ("deadline")
                                  #Client can cancel request.

STATUS ==>                        #When response done
                                  #code NUM + details STR
                                  #Possible codes:
                                  #  - OK
                                  #  - INVALID_ARGUMENT: request user validation error
                                  #  - OUT_OF_RANGE: user limit validation
                                  #  - UNAUTHENTICATED: authentication
                                  #  - PERMISSION_DENIED: authorization
                                  #  - RESOURCE_EXHAUSTED: quota, or machine out-of-memory, or input too big
                                  #  - NOT_FOUND: entity not found
                                  #  - ALREADY_EXISTS: entity alredy exists
                                  #  - CANCELLED: client cancelled
                                  #  - DEADLINE_EXCEEDED: timeout
                                  #  - UNAVAILABLE: failed, but should retry
                                  #  - FAILED_PRECONDITION: failed, but client should fix something before retrying
                                  #  - ABORTED: server aborted the request, e.g. due to concurrency issues
                                  #  - UNIMPLEMENTED: method not implemented in server
                                  #  - DATA_LOSS: data corrupted or lost
                                  #  - INTERNAL: internal OS error
                                  #  - UNKNOWN: uncaught exception

CHANNEL ==>                       #Client-server socket|connection, and information about it.
                                  #Client->server and server->client are 2 different HTTP/2 streams
                                  #Possible connectivity states: IDLE, CONNECTING, READY, TRANSIENT_FAILURE, SHUTDOWN

HTTP/2 ==>                        #Under the hood, use HTTP/2, but without any of its semantics exposed.
                                  #Path is /SERVICE_NAME/RPC_NAME
                                  #Method is POST
                                  #Use HTTP/2 headers:
                                  #  (request|response)
                                  #  - grpc-*: reserved
                                  #  - 'content-type' 'application/grpc+proto'
                                  #  - grpc-encoding: identity|gzip|deflate|snappy|...
                                  #  (request)
                                  #  - grpc-timeout: deadline
                                  #  - 'user-agent' '[... ]grpc-LANG/X.Y.Z[ ...]'
                                  #  (response)
                                  #  - grpc-status NUM
                                  #  - date 'DATE'

BACKOFF ==>                       #Automatically tries to reconnect.
                                  #Use exponential backoff from initial (def: 1s) to max (def: 2m)

KEEPALIVE ==>                     #Send HTTP/2 pings to ensure connection is still alive.
                                  #By def, not sent by client, and sent by server every 2 hours (GRPC_ARG_KEEPALIVE_TIME_MS).
                                  #When ping sent, after timeout (def: 20s, GRPC_ARG_KEEPALIVE_TIMEOUT_MS), close connection.
                                  #Not sent if there are no ongoing REQ|RES (unless GRPC_ARG_KEEPALIVE_PERMIT_WITHOUT_CALLS 1, def: 0)

PROXY ==>                         #Built-in support for proxying

LOAD BALANCING ==>                #Built-in support for load balancing. Not documented yet.

SERVER REFLECTION ==>             #Endpoint to describe other endpoints.
                                  #There is a common protobuf at https://github.com/grpc/grpc-proto/blob/master/grpc/reflection/v1/reflection.proto
                                  #Not implemented in @grpc/grpc-js yet

RESOLUTION ==>                    #ORIGIN can be:
                                  #  - [dns:][//AUTHORITY/]HOST[:PORT]
                                  #     - default AUTHORITY can often be configured
                                  #  - unix:FILE (relative) or unix:/FILE (absolute): Unix socket
                                  #  - ipv4|ipv6:...
                                  #  (not implemented in @grpc/grpc-js)
                                  #  - unix-abstract:FILE (temporary file)

application/gprc[+FORMAT]         #MIME
