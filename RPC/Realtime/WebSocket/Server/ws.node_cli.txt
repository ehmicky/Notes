
      
   WS  
      


VERSION ==>                   #0.4.32


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLIENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new WS(WS[S]_URL[, OBJ])      #Returns WSOCKET
                              #OBJ (for upgrade request):
                              #  - protocol SUBPROTOCOL
                              #  - origin STR
                              #  - protocolVersion STR: "8", "13" (def) or "hixie-76"
                              #  - agent AGENT
                              #  - host STR
                              #  - pfx, key, cert, passphrase, ca, crl, ciphers: passed to CRYPTO.createCredentials()
                              #  - rejectUnauthorized BOOL: like TLS.createServer()
WSOCKET.on
("open", FUNC())              #
WSOCKET.on
("close", FUNC(UINT, STR))    #
WSOCKET.readyState            #WS.CONNECTING|OPEN|CLOSING|CLOSED
WSOCKET.close
([UINT, ][STR])               #
WSOCKET.terminate()           #Immediately close (still emit close event)
WSOCKET.on("error",FUNC(EROR))#
WSOCKET.pause|resume()        #Listening, not sending

WSOCKET.send(STR|BUFFER[,OBJ] #OBJ:
[, FUNC(ERROR)])              #  - binary BOOL: true if TDBUFFER
                              #  - mask BOOL: use masked bit
                              #If no FUNC(ERROR), throw ERROR
WSOCKET.ping|pong
([STR|BUFFER[, OBJ],][BOOL])  #If false, throws if connection closed
WSOCKT.on("message|ping|pong",
FUNC(STR|BUFFER, OBJ))        #OBJ: same as send(), but using masked, not mask

WSOCKET.protocol              #SUBPROTOCOL
WSOCKET.url                   #Not WSOCKETSERVER's WSOCKET
WSOCKET.bytesReceived         #So far. UINT
WSOCKET.protocolVersion       #
WSOCKET.supports              #{ binary: BOOL }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SERVER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new WS.Server(OBJ[, FUNC()])  #Returns WSOCKETSERVER, an HTTP[S].SERVER which returns 200 "Not implemented" on HTTP[S] requests
                              #and handle upgrade requests to Websocket. OBJ:
                              #  - host, path, port
                              #  - server HTTP[S].SERVER: use handleUpgrade() on HTTP[S].SERVER upgrade event handler instead.
                              #  - noServer BOOL: if true, manually use handleUpgrade() instead
                              #  - verifyClient FUNC(OBJ[, FUNC2(BOOL)])
                              #     - handles Origin [C]
                              #     - OBJ:
                              #        - origin STR: Origin [C]
                              #        - secure BOOL
                              #        - req REQ
                              #     - if no FUNC2, FUNC must return BOOL
                              #     - if BOOL false, send 401
                              #  - handleProtocols FUNC(SUBPROTOCOL_ARR, FUNC2(BOOL, SUBPROTOCOL)):
                              #     - handles Sec-Websocket-Protocol [C]
                              #     - FUNC() calls FUNC2() synchronously.
                              #     - If false, send 401
                              #     - if FUNC is undefined, returns first SUBPROTOCOL asked by client
                              #     - does not support any extension (e.g. permessage-deflate)
                              #  - clientTracking BOOL: if true (def), fill WSOCKETSERVER.clients
                              #Use HTTPS for wss://
                              #FUNC() not called if OBJ.server
WSOCKETSERVER.on
("headers", FUNC(OBJ))        #HTTP[S] upgrade response headers
WSOCKETSERVER.on
("connection", FUNC(WSOCKET)) #
WSOCKETSERVER.on
("error", FUNC(WSOCKET))      #
WSOCKETSERVER.close
([UINT, ][STR])               #
WSOCKETSERVER.handleUpgrade
(REQ, SOCKET, BUFFER,
FUNC(WSOCKET))                #To pass to a HTTP[S].SERVER "upgrade" event handler, to allow Upgrade: websocket [C]

WSOCKETSERVER.path            #
WSOCKETSERVER.clients         #WSOCKET_ARR
WSOCKETSERVER._server         #Underlying NET.SERVER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMMAND LINE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


wscat                         #Command line
-l PORT                       #Server mode
-c URL                        #Client mode

--host HOST                   #
-o ORIGIN                     #
-s SUBPROTOCOL                #
-n BOOL                       #Inverse of rejectUnauthorized
-H HEADER_VAR:VAL             #
--auth USERNAME:PASSWORDa     #
-p PROTOCOL_VERSION           #
