
             
   SOCKET.IO  
             



SOCKET.IO                     #Relies on ENGINE.IO, but higher-level: add concepts of namespaces, custom events, rooms,
                              #origin check, reconnections.
                              #Version 1.0.6
                              #Global objects:
                              #  - Server uses SIO = require("socket.io")(...)
                              #  - Client uses IO = require("socket.io-client") or using global object IO (from web script)
                              #URL:
                              #  - domain is HTTP[S].SERVER domain
                              #  - path is "/socket.io" by def. but can be changed
                              #  - IO(URL):
                              #     - uses http[s]://DOMAIN[/NAMESPACE]
                              #     - but underlyingly, will use ws[s]://DOMAIN/PATH
                              #        - must specify { path PATH } if not default
                              #  - client library is served at http[s]://DOMAIN/PATH/socket.io.js
                              #Messages:
                              #  - ENGINE.IO message, so prefixed by "4"
                              #  - then use SOCKET.IO-PARSER for the actual message sending, then:
                              #     - '2[/NAMESPACE,]["EVENT"[,JSON_VAL]]': STR message
                              #     - '51-[/NAMESPACE,]["EVENT",{"_placeholder":true,"num":0}]' followed by normal binary
                              #       packet: BUFFER message
                              #     - if sender ask for callback, ["EVENT" -> ,ID["EVENT", where ID is callback ID
                              #        - receiver replies with ,ID as well, and 3 instead of 2, or 6 instead of 5
                              #     - Error 4, Connect|disconnect 0|1, but I can't manage to simulate them
                              #  - so only adds:
                              #     - NAMESPACE and EVENT: keep it short
                              #     - binary packet have some overhead and two packets
                              #NAMESPACE:
                              #  - prefix in messages (def: "/", meaning no prefix)
                              #  - SION: SIO restricted to a NAMESPACE
                              #  - CL_WS are restricted to a NAMESPACE at connection
                              #Rooms:
                              #  - groups of SV_WS, maintained by SIO for a specific SION, to send messages to
                              #Concepts:
                              #  - SIO: server
                              #  - CL_WS: client socket
                              #  - SV_WS: server socket, to single CL_WS

CLUSTER ==>                   #Must:
                              #  - use SOCKET.IO-REDIS to allow any SIO to broadcast to all SIOs clients
                              #  - make sure clients stay connected to same SIO even with load balancing (sticky load
                              #    balancing)
                              #     - could balance using modulo sharding based on client's IP

                                  ┌────────────┐
                                  │   SERVER   │
                                  └────────────┘

SOCKETIO([HTTP[S].SERVER      #Returns SIO
[, OBJ]])                     #OBJ:
                              #  - serveClient BOOL: if true (def), serves client library as http://DOMAIN/PATH/socket.io.js
                              #    Must be done before SIO.attach()
                              #    Can also use SIO.serveClient(BOOL)
                              #  - adapter TYPE: see SIO.adapter()
                              #  - any OBJ to ENGINE.IO:
                              #     - def path is "/socket.io". Can also use SIO.path(PATH)
                              #       Don't forget first "/"
                              #If no SERVER, can set it later with SIO.attach(...) (same args as SOCKETIO(...))
                              #Usee HTTPS for wss://
SOCKETIO(NUM[, OBJ])          #Same as SOCKETIO(SERVER), but create a simple SERVER that listens on port NUM and return 404
                              #pages.
SIO.engine                    #Underlying ESERVER (see ENGINE.IO)

SIO.origins(STR_ARR)          #Allowed clients URL (replace ENGINE.IO allowRequest()):
                              #  - from Origin [C] or Referer [C]
                              #  - HOSTNAME:PORT (def: "*:*")
SIO.set("authorization",
FUNC(REQ, FUNC2(ERROR, BOOL)))#Like allowRequest()
SIO.adapter(TYPE)             #Sets underlying TYPE used to store information about rooms or to send messages.
                              #Underlying sockets remain in memory for the current SIO.
                              #TYPE:
                              #  - TYPE(NAMESPACE): constructor
                              #  - TYPE.add|del(CL_WS.id, ROOM_STR, FUNC()): add|remove CL_WS to ROOM
                              #  - TYPE.delAll(CL_WS.id)
                              #  - TYPE.broadcast(PACKET, OBJ): sending messages with broadcast.emit(), where OBJ has:
                              #     - flags.json|volatile BOOL
                              #     - except ID_STR
                              #     - rooms STR_ARR
                              #Possibilities:
                              #  - memory based (def)
                              #  - new SOCKET.IO-REDIS([OBJ]) (version 0.1.3):
                              #     - redefine TYPE.broadcast() so that it is sent also:
                              #        - to other SIO subscribed to same Redis server
                              #        - which broadcast themselves to their clients
                              #        - make network of SIO behave as one for emission (not reception)
                              #     - SIO communicate with use Redis Pubsub:
                              #        - emit with PUB_CLIENT: publish KEY#SIOID MESSAGE
                              #           - SIOID is random ID assigned at server start
                              #        - receive with SUB_CLIENT: psubscribe KEY#*
                              #        - PUB_CLIENT and SUB_CLIENT should be same
                              #     - OBJ:
                              #        - host, port or socket URL
                              #        - or pub|subClient REDIS CLIENT
                              #           - if supplying CLIENT, must use PARAM_OBJ.return_buffers true
                              #        - key (def: "socket.io")
                              #SOCKET.IO-EMITTER (not an ADAPTER):
                              #  - allow a process without SOCKET.IO to broadcast messages (not to listen), providing SIO use
                              #    SOCKET.IO-REDIS
                              #     - emit with Redis Pubsub: publish KEY#Emitter MESSAGE
                              #  - SOCKET.IO-EMITTER([REDIS CLIENT, ]OBJ)->EMITTER:
                              #     - host, port or socket URL
                              #     - key (def: "socket.io")
                              #  - EMITTER:
                              #     - json|volatile -> EMITTER
                              #     - to(ROOM) -> EMITTER
                              #     - of(NAMESPACE) -> EMITTER
                              #     - emit(EVENT_STR, VAL): broadcast message to all SIO suscribed to REDIS server, which
                              #       broadcast it to their own clients

SION.on
("connection", FUNC(SV_WS))   #
SION.use(SIOMIDWR
(SV_WS, NEXT([ERROR])))       #Similar to Express MIDWR, but for SIO, when a SV_WS is being created.

SION.connected                #{ id: SV_WS ... } of current clients
SION.sockets                  #Same as SV_WS_ARR

SV_WS.id                      #Not linked to single SV_WS, but to a specific client web page (several SV_WS can have same id)
SV_WS.handshake               #Handshake (first handshake, asking for polling) OBJ:
                              #  - url URL
                              #  - query OBJ
                              #  - headers OBJ
                              #  - time DATE_STR
                              #  - issued DATE_UINT
                              #  - address OBJ: { address, family, port }
                              #  - secure BOOL
                              #Can for example check user agent, or authentication.
SV_WS.request                 #Handshake REQ.

                                  ┌───────────────┐
                                  │   NAMESPACE   │
                                  └───────────────┘

SIO.nsps[NAMESPACE]           #Returns SION at NAMESPACE (must start with "/").
SIO.of(NAMESPACE)             #Client must connect to it using DOMAIN/NAMESPACE
                              #NAMESPACE are not hierarchical (no children)
SIO.sockets                   #Same as SIO.of("/")

SION.name                     #Current NAMESPACE
SV_WS.nsp                     #Socket SION
CL_WS.nsp                     #Socket NAMESPACE
SION|SV_WS.server             #Returns SIO

                                  ┌───────────┐
                                  │   ROOMS   │
                                  └───────────┘

SV_WS.rooms                   #Groups of SV_WS, as STR_ARR.
                              #By def., only [ SV_WS.id ] (can use to(SV_WS.id).broadcast.emit() to target a specific SV_WS.id)
SV_WS.join|leave
(ROOM_STR[, FUNC([ERROR])])   #Joins|leave a room, then fires FUNC([ERROR]).
SV_WS.to(ROOM_STR)            #
[.to(ROOM2_STR)]              #Make next emit() specific to those rooms.

                                  ┌────────────┐
                                  │   CLIENT   │
                                  └────────────┘

IO(DOMAIN[, OBJ])             #Returns CL_WS. OBJ:
                              #  - same OBJ as SOCKETIO, meaning also path PATH
                              #  - path STR (def: "/socket.io")
                              #  - timeout NUM (def: 20000): how long before considering losing touch
                              #  - reconnection BOOL: tries to reconnect if loses touch
                              #  - reconnectionDelay NUM: how long before trying to reconnect (def: 1000)
                              #  - reconnectionDelayMax NUM (def: 5000)

                                  ┌────────────┐
                                  │   EVENTS   │
                                  └────────────┘

CL|SV_WS.on(EVENT_STR,
FUNC(VAL[, FUNC2(VAL2)]))     #
SION.emit(EVENT_STR[, VAL])   #Server -> All clients in NAMESPACE. VAL must be JSON'd
CL_WS.emit(EVENT_STR,         #Client -> Server
[VAL[,FUNC2(VAL2)]])          #FUNC2() lets receiver fire FUNC2() in on(EVENT_STR) to acknowledge reception.
SV_WS.[volatile.]             #Server -> Single client
[broadcast.]emit(EVENT_STR,   #If "volatile", if sender cannot send it because too much traffic, just drop it.
[, VAL[,FUNC2(VAL2)]])        #If "broadcast", sent to everyone except one with same SV_WS.id as current SV_WS
                              #FUNC2() does not work if broadcast

CL_WS|SV_WS.[dis]connected    #BOOL
CL_WS.on
("[dis]connect", FUNC())      #Not needed to listen|emit EVENT_STR
CL_WS.on
("reconnect[ing]", FUNC(NUM)) #When successful|trying. NUM are number of times it tried to reconnect
CL_WS.on
("reconnect_error",FUNC(EROR))#
CL_WS.on
("reconnect_failed", FUNC())  #After too many reconnect_error
CL_WS.on
("error", FUNC(ERROR))        #

                                  ┌────────────────────────┐
                                  │   JWT AUTHENTICATION   │
                                  └────────────────────────┘

GOAL ==>                      #Client authenticate to server using any kind of credentials.
                              #Server issues connections tokens (JWT).
                              #Client uses JWT to connect to SIO.

SIO.on("connection",          #OBJ:
SOCKETIO-JWT.authorize(OBJ))  #  - secret STR
                              #  - timeout NUM (def: 5000)
                              #  - audience|issuer STR (def: false): checks them
                              #    Remember JWT use aud|iss fields instead.
                              #Adds authenticated event handler, fired when client sends secret STR via a JWS.
                              #Do SV_WS.disconnect() if:
                              #  - authenticated event not emitted before timeout
                              #  - wrong JWS received:
                              #     - cannot JSONWEBTOKEN.verify():
                              #        - if sync. algo, cannot decrypt with secret STR
                              #     - wrong audience|issuer
                              #Version 2.3.4
CL_WS.emit                    #OBJ
("authenticate", OBJ)         #  - token JWS
                              #Should be in connect event handler
SION|CL_WS.on                 #Only when right JWS has been sent
("authenticated",             #SV_WS only for SION.
FUNC(SV_WS))                  #SV_WS.decoded_token = PAYLOAD
                              #Only server-side authenticated can be trusted, as long as secret STR is secret.
