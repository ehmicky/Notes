
                           
   DENO_SERVER_SENT_EVENTS  
                           



VERSION ==>                       #Part of Deno
                                  #Browser compatible


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             START             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/http/
 unstable_server_sent_event.ts   !#
new ServerSentEventStreamTarget
 ([OPTS])                         #SSE server implementation
OPTS.keepAlive                    #False (def), true (30s) or NUM (in ms)
                                  #Send a 'keep-alive comment' ping every NUMms, to prevent client from closing socket due to idleness

SSE_TARGET.asResponse([RESS])->RES#Returns RES to initiate the stream
                                  #RESS are any additional response parameters
                                  #RES body is a RSTREAM
                                  #Headers:
                                  #  - Content-Type: text/event-stream [S]
                                  #  - Connection: Keep-Alive [S]
                                  #  - Keep-Alive: timeout=MAX_SAFE_INTEGER [S]
                                  #  - Cache-Control: no-cache [S]
SSE_TARGET.asResponseInit([RESS])
 ->[RSTREAM, RESS2]               #Same but returning as RES body + RES parameters


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              END              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSE_TARGET.close()->>             #
SSE_TARGET.addEventListener
 ('close', FUNC(CLOSE_EVENT))     #
SSE_TARGET.closed                 #BOOL. Might not be set right away after close()

SSE_TARGET.addEventListener
 ('error', FUNC(ERROR_EVENT))     #On streaming issue


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             EVENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSE_TARGET.dispatchEvent          #Send event.
 (SSE_EVENT)->BOOL                #Returns true if defaultPrevented
SSE_TARGET.dispatchMessage(VAL)
 ->BOOL                           #Send event with only TYPE '__message' and data VAL
SSE_TARGET.dispatchComment(STR)
 ->BOOL                           #Send event with only :COMMENT field

SSE_TARGET.addEventListener
 ('TYPE', FUNC(SSE_EVENT))        #On dispatchEvent|Message() (not dispatchComment())

new ServerSentEvent('TYPE'[,OPTS])#'TYPE' is event field
                                  #  - if '__message' -> ''
SSE_EVENT|OPTS.id                 #NUM|STR. Id field (def: '')
SSE_EVENT|OPTS.data               #Data field
                                  #JSON.stringify()'d unless already STR
                                  #Can be newline-delimited
SSE_EVENT.comment                 #':COMMENT' field
SSE_EVENT.event                   #'TYPE'. Event field
SSE_EVENT.retry                   #NUM. Retry field
OPTS.space                        #STR|NUM passed to JSON.stringify() second argument
OPTS.replacer                     #ARR|FUNC passed to JSON.stringify() third argument
SSE_EVENT.toString()->STR         #text/event-stream serialization


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



std/http/
 server_sent_event_stream.ts
new ServerSentEventStream()       #TSTREAM that serializes each SSE_EVENT as UINT8ARR
 ->TSTREAM                        #E.g. ReadableStream.from(SSE_EVENT_ARR).pipeThrough(TSTREAM)
                                  #Meant to be passed as new Response(TSTREAM, {headers}) with headers:
                                  #  - content-type 'text/event-stream'
                                  #  - cache-control 'no-cache'
