
                                  ┏━━━━━━━━━━━┓
                                  ┃   MIDDY   ┃
                                  ┗━━━━━━━━━━━┛

VERSION ==>                       #5.5.0

GOAL ==>                          #Server middleware for AWS Lambda

                                  ┌──────────┐
                                  │   CORE   │
                                  └──────────┘

@middy/core                       #Package name

MIDDY([HANDLER][, OPTS])          #HANDLER is AWS Lambda handler FUNC (def: noop)
 ->MIDDY_HANDLER                  #MIDDY_HANDLER must be used as the new HANDLER
MIDDY_HANDLER.handler(HANDLER)
 ->MIDDY_HANDLER                  #[Re-]set HANDLER

OPTS.timeoutEarlyInMillis         #NUM (in ms, def: 5)
OPTS.timeoutEarlyResponse         #FUNC()
                                  #Def: ???

OPTS.streamifyResponse            #BOOL (def: false)

OPTS.beforePrefetch               #FUNC() called during MIDDY() initialization
OPTS.requestStart                 #FUNC() called when MIDDY_HANDLER starts
OPTS.beforeMiddleware             #FUNC(STR) called before each MDWR_STEP. STR is its FUNC2.name
OPTS.afterMiddleware              #FUNC(STR) called after each MDWR_STEP. STR is its FUNC2.name
OPTS.beforeHandler                #FUNC() called before HANDLER starts
OPTS.afterHandler                 #FUNC() called after HANDLER ends
OPTS.requestEnd                   #FUNC()[->>] called when MIDDY_HANDLER ends (including throwing)

MIDDY_HANDLER.use(MDWR[_ARR])     #MDWR: before, after, onError
 ->MIDDY_HANDLER                  #Calls MIDDY_HANDLER.before|after|onError()
MIDDY_HANDLER.before(MDWR_STEP)
 ->MIDDY_HANDLER                  #Called before HANDLER
MIDDY_HANDLER.after(MDWR_STEP)
 ->MIDDY_HANDLER                  #Called after HANDLER (unless it threw)
MIDDY_HANDLER.onError(MDWR_STEP)  #Called if MDWR_STEP|HANDLER threw
 ->MIDDY_HANDLER                  #Then, no more MDWR_STEP|HANDLER is run

FUNC(INFO)[->[>]RES]              #MDWR_STEP
                                  #If RES is returned:
                                  #  - no further MDWR_STEP is run (from any STEP)
                                  #  - if before() STEP, HANDLER is not run
                                  #  - if onError() STEP:
                                  #     - do not throw (instead of propagating exception)
                                  #     - if onError() itself throws, its exception is propagated, with ERROR.originalError VAL2
                                  #  - RES is returned from MIDDY_HANDLER
INFO.event                        #Lambda REQ
INFO.context                      #Lambda NCONTEXT
INFO.response                     #RES returned by HANDLER
                                  #Only set in after() MDWR_STEP
INFO.error                        #Exception VAL
                                  #Only set in onError() MDWR_STEP
OPTS|INFO.internal                #OBJ (def: {})
