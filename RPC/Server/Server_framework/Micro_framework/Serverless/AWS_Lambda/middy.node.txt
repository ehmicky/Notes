
                                  ┏━━━━━━━━━━━┓
                                  ┃   MIDDY   ┃
                                  ┗━━━━━━━━━━━┛

VERSION ==>                       #5.5.0

GOAL ==>                          #Server middleware for AWS Lambda

                                  ┌──────────┐
                                  │   CORE   │
                                  └──────────┘

@middy/core                       #Package name

MIDDY([HANDLER][, OPTS])
 ->MHANDLER                       #Wraps Lambda HANDLER(REQ, NCONTEXT)->>RES (def: noop)
MHANDLER.handler(HANDLER)
 ->MHANDLER                       #[Re-]set HANDLER

OPTS.timeoutEarlyInMillis         #NUM (in ms, def: 5)???
OPTS.timeoutEarlyResponse         #FUNC()
                                  #Def: ???

OPTS.streamifyResponse            #BOOL (def: false)???

                                  ┌────────────────┐
                                  │   MIDDLEWARE   │
                                  └────────────────┘

MHANDLER.use(MDWR[_ARR])          #MDWR: before STEP, after STEP, onError STEP
 ->MHANDLER                       #Calls MHANDLER.before|after|onError()

MHANDLER.before(STEP)->MHANDLER   #Called before HANDLER
MHANDLER.after(STEP)->MHANDLER    #Called after HANDLER (unless it threw)
MHANDLER.onError(STEP)->MHANDLER  #Called if HANDLER, 'before|after' STEP or OPTS.before|afterHandler|Middleware() threw
                                  #No more HANDLER|STEP is run
                                  #Exception is still propagated
                                  #If it throws itself, that value is thrown instead
                                  #  - original exception available as ERROR.originalError

                                  ┌──────────┐
                                  │   STEP   │
                                  └──────────┘

FUNC(INFO)[->[>]RES]              #STEP
                                  #If RES is returned:
                                  #  - no more STEP is run
                                  #  - if 'before' STEP: HANDLER not run
                                  #  - if 'onError' STEP: exception not thrown|propagated
                                  #  - RES is returned from MHANDLER

INFO.event                        #REQ
INFO.context                      #NCONTEXT
INFO.response                     #RES returned by HANDLER
                                  #Only set in:
                                  #  - 'after' STEP
                                  #  - OPTS.requestEnd(), if HANDLER did not throw
INFO.error                        #Exception VAL
                                  #Only set in:
                                  #  - 'onError' STEP
                                  #  - OPTS.requestEnd(), if HANDLER threw
OPTS|INFO.internal                #MDWR_OPTS (def: {})

                                  ┌────────────┐
                                  │   EVENTS   │
                                  └────────────┘

OPTS.beforePrefetch()             #On MIDDY() call

OPTS.requestStart()               #On MHANDLER() start
OPTS.beforeHandler()              #On HANDLER() start
OPTS.afterHandler()               #On HANDLER() end (excluding throwing)
OPTS.requestEnd(INFO)[->>]        #On MHANDLER() end (including throwing)

OPTS.beforeMiddleware(STR)        #Before each STEP. STR is its FUNC.name
OPTS.afterMiddleware(STR)         #After each STEP. STR is its FUNC.name
