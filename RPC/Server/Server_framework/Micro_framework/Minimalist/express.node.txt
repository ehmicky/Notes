
           
   EXPRESS  
           



VERSION ==>                   #Node module (4.18.1)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPRESS()->APP                #APP is HTTP[S]SERVER 'request' event handler
APP.listen(...)               #Same as HTTP.createServer(APP).listen(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.CONFVAR                  #Must be set before used
APP.get('CONFVAR')->VAL       #
APP.enabled|disabled
 ('CONFVAR')->BOOL            #Same but cast to BOOL
APP.set('CONFVAR', VAL)->APP  #
APP.enable|disable('CONFVAR')
 ->APP                        #Same as APP.set('CONFVAR', true|false)

CONF.x-powered-by             #Adds X-Powered-By: Express [S] (def: true)
CONF.env                      #Defines whether it is run in "development", "test" or "production" (some MIDWR behaves accordingly).
                              #Default to ENVVAR NODE_ENV or, if unset, "development".


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ROUTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONNECT()                     #Returns APP like EXPRESS but only with APP.use|listen() and limited functionalities
                              #(e.g. no globbing, PARAM, CONF, etc.)
                              #Version 3.4.1


ORDER ==>                     #Should do in order: APP.set(), MIDWR (logging first), APP.METHOD(), ERROR_MIDWR, APP.listen()


APP.use                       #MIDWR are middleware functions, i.e. meant to modify incoming|outcoming REQ|RES
(['PATH'[_ARR],]MIDWR(REQ,RES,#NEXT():
[, NEXT([ERROR])])[_ARR]...)  #  - proceed to the next registered MIDWR
->APP                         #  - the endpoint, i.e. the final middleware:
                              #     - usually delivers the content to the client
                              #     - should not call NEXT()
                              #     - can be different from request to request
                              #        - e.g. static MIDWR calls NEXT() if find file, serve file otherwise
                              #  - If NEXT(ERROR) or throw ERROR, will call the next ERROR_MIDWR
                              #  - if no MIDWR has intercepted a request:
                              #     - send 404 with body "Cannot METHOD PATH"
                              #     - to redefine it, use a last MIDWR with no 'PATH' (but not an ERROR_MIDWR)
                              #Only applies to requests to 'PATH' (def: '/'):
                              #  - excluding query string or hash
                              #  - PATH 'route' matching:
                              #     - '^PATH[/...]'
                              #     - can use CONF."case sensitive routing" (def: false)
                              #     - can use globbing:
                              #        - quantifiers: ? + ( )
                              #        - anything: *
                              #     - can use PARAM (see below)

APP.use
(['PATH',] MIDWR(ERROR,REQ,RES
[, NEXT([ERROR])])[_ARR]...)  #ERROR_MIDWR.
->APP                         #Default ERROR_MIDWR will send 500 status code with response ERROR

APP.use(['PATH', ]APP2)->APP  #APP2:
                              #  - will be used when requests made to 'PATH[/...]'
                              #  - since PATH is "mounted", APP2 paths will be relative to PATH
                              #  - goal is to create sub-apps, which is why every app:
                              #     - should be assigned to module.exports
                              #     - only use APP.listen() if (! module.parent)
APP2.on('mount', FUNC(APP))   #Fired on mounting
APP2.mounthpath               #When mounted, parent 'PATH' (otherwise '/')
APP2.path()->'PATH'           #Same but recursively (otherwise '')
REQ.baseUrl                   #APP.path(), and (if APP.use()) 'PATH'
REQ.url                       #Full URL, without REQ.baseUrl
REQ.originalUrl               #Full URL

APP.METHOD(...)->APP          #Like APP.use(...) except:
                              #  - only fired when using HTTP METHOD:
                              #     - "all" for any
                              #     - "get" also catches "head" (unless APP.head() defined)
                              #     - "options" (unless APP.options() defined) sends back 200 with Allow: METHOD,... [C] for each defined METHOD
                              #  - 'PATH':
                              #     - mandatory
                              #     - must be exact match
                              #        - "PATH" == "PATH/" if CONF."strict routing" false (def)
                              #     - can be REGEXP (partial match):
                              #        - parenthesis matches are available at REQ.params ARR (empty if no parenthesis)
                              #  - if current APP.METHOD() use several MIDWRs (e.g. by passing an array):
                              #     - can bypass them with NEXT('route')
                              #        - as such, should prefer use only one APP.METHOD() (with several MIDWRs) for a given METHOD and 'PATH'
                              #  - cannot use APP.METHOD(..., APP2) nor be ERROR_MIDWR
APP.route('PATH')->ROUTE
ROUTE.METHOD(...)->ROUTE      #Same as APP.METHOD('PATH', ...)

EXPRESS.Router([OBJ])->ROUTER #OBJ:
                              #  - caseSensitive BOOL: like CONF."case sensitive routing"
                              #  - strict BOOL: like CONF."strict routing"
                              #  - mergeParams BOOL (def: false): if parent ROUTER, uses its PARAM too
ROUTER                        #MIDWR dedicated to routing.
                              #Using NEXT("router") in a ROUTER's middleware will skip all the following middleware inside that ROUTER
ROUTER.use|param|route|
 METHOD(...)                  #Like APP.*(...)


PARAM                         #Any part of URL in APP.use|METHOD() that matches :PARAM[?]
                              #  - up until next /
                              #  - if ?, optional
                              #  - variable name must be [:alnum:]_
REQ.params.PARAM              #PARAM_VAL
APP.param('PARAM'[_ARR],
MIDWR(..., PARAM_VAL,'PARAM'))#Fires FUNC() each time a route taken includes 'PARAM'
->APP                         #Since it is MIDWR, must call NEXT()
APP.param
('PARAM', FUNC(VAL)->BOOL)   ##Only use PARAM if true
APP.param(PARAM_VAR, REGEXP) ##Same with REGEXP.test()
                             ##If REGEXP uses parenthesis groups, REQ.params is an ARR of matches, where first element is the whole REGEXP match.
EXPRESS-PARAMS.extend(APP)   ##Version 0.0.3
                             ##Must be used to use APP.param(PARAM_VAR, REGEXP|FUNC(VAL)->BOOL)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              REQ              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REQ                           #Same as Node.js but augmented with extra properties
REQ.app                       #APP


REQ.route.methods.METHOD      #BOOL
REQ.url|originalUrl|baseUrl   #See above for difference
REQ.protocol                  #Request protocol, i.e. "http[s]"
REQ.secure                    #Same as REQ.protocol == "https"
REQ.hostname                  #Request hostname
REQ.subdomains                #REQ.hostname as STR_ARR:
                              #  - without top NUM subdomains (CONF.'subdomain offset', def: 2)
                              #  - top first
REQ.path                      #REQ.url but without '?SEARCH' nor '#HASH'

REQ.ip                        #Client 'ADDR'
REQ.ips                       #'ADDR'_ARR: client + reverse proxies list (furthest to server first)

CONF."trust proxy fn"         #Ignore reverse proxies, i.e.:
                              #  - REQ.hostname|ip|protocol uses first address after reverse proxies
                              #     - using X-Forwarded-Host|For|Proto [C]
                              #  - REQ.ips require it to work properly
                              #Is FUNC(...) declaring which addresses are "trusted", i.e. reverse proxies
                              #Uses PROXY-ADDR(...) (see its doc)
                              #Def: nothing is trusted|ignored
CONF."trust proxy"            #Same but can also be:
                              #  - true: same as FUNC()->true
                              #  - NUM: same as FUNC(VAL, NUM2)->NUM2 < NUM


REQ.query                     #GET variables as OBJ
                              #Use QS (see its doc)
                              #Can use QUERYSTRING instead if CONF."query parser" is "simple"
REQ.body                      #Only defined with BODY-PARSER


REQ.get('VAR')->'VAL'         #Retrieve header. Case insensitive.
REQ.range(...)->VAL           #Parses Range: TYPE=RANGE,... [C]
                              #See RANGE-PARSER doc for more info
REQ.xhr                       #X-Requested-With [C] === 'XMLHttpRequest' (case-insensitive)

REQ.accepts[Charsets|Languages#Returns current headers (if no STR2) or content negotiated headers (if STR2)
|Encodings]([STR2[_ARR],...]) #For Accept[-Charset|Language|Encoding] [C]
->STR[_ARR]                   #Uses ACCEPTS (see its doc)
                              #If undefined: should respond with error code 406 "Not Acceptable"
REQ.is('MIME'[_ARR]...)->BOOL #Check against Content-Type [C]
                              #MIME can contain TYPE/*, EXT, etc.
                              #Uses TYPE-IS (see its doc)
REQ.[signedC|c]ookies
REQ.secret                   ##See COOKIE-PARSER

REQ.fresh|stale               #Returns true|false if:
                              #  - method is GET|HEAD
                              #  - RES.statusCode is 2** or 304
                              #  - If-Modified-Since [C] matches Last-Modified [S] or If-None-Match [C] matches ETag [S], using FRESH(...)
                              #    (see its doc)
                              #Used by REQ.send(). REQ.sendFile() does not use it directly but uses same logic.
                              #Note:
                              #  - ETag [S] is set by REQ.send[File]()
                              #  - Last-Modified [S] is set by REQ.sendFile()

EXPRESS.
 json|urlencoded|text|raw(...)#Reference to BODY-PARSER.json|urlencoded|text|raw(...) (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RES              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RES                           #Same as Node.js but augmented with extra properties
RES.app                       #APP


RES.status(NUM)->RES          #Sets RES.statusCode
RES.set('VAR','VAL'[ARR])->RES#Like RES.setHeader() but:
RES.set(OBJ)->RES             #  - can use OBJ
                              #  - returns RES
                              #  - adds "; charset=UTF-8" if missing and Content-Type: text/... [C]
RES.get('VAR')->'VAL'[_ARR]   #Like RES.getHeader()
RES.append('VAR', VAL[_ARR])
 ->RES                        #Like RES.set(), but appends to current value if existing
RES.headersSent               #BOOL: true after headers have been sent


RES.location(URL)->RES        #Sets Location: URL [S]
                              #Calls encodeURI()
                              #If URL is 'back', use Referrer [C] (def: '/') as URL
RES.type('MIME')->RES         #Sets Content-Type: MIME [S]
                              #MIME can be '[.]EXT' or 'FILENAME.EXT', in which case it deduces actual MIME
RES.attachment(['FILE'])->RES #Sets Content-Disposition: attachment[; filename="FILE"] [S] (using CONTENT-DISPOSITION, see its doc)
                              #Sets Content-Type [S] if 'FILE'
RES.links(OBJ)->RES           #Appends|sets Link [S], where OBJ is { REL: 'URI' }
RES.cookie                    #Sets Set-Cookie: COOKIE [S], using COOKIE('VAR', 'VAL', OPTS) (see its doc)
('VAR', 'VAL'[, OPTS])->RES   #Also:
                              #  - 'VAL' can be OBJ -> 'j:JSON'
                              #  - OPTS: #     - path def '/'
                              #     - maxAge: ms instead of seconds
                              #     - expires def (using OPTS.maxAge)
                              #     - signed BOOL: if true (def: false):
                              #        - 'VAL' -> 's:VAL.HASH', using REQ.secret 'SECRET'
                              #           - uses COOKIE-SIGNATURE (see its doc)
                              #           - usually a middleware (like COOKIE-PARSER) sets REQ.secret and verifies 's:VAL.HASH'
RES.clearCookie('VAR'[, OBJ2])
 ->RES                        #Same as RES.cookie, with OPTS.expires 1970-01-01


RES.format({ MIME|default() })#Fire MIME(REQ, RES, NEXT) according to REQ.accepts('MIME'_ARR)
 ->RES                        #Sets Content-Type [S], Vary: Accept [S] (using VARY, see its doc)
                              #If no match:
                              #  - default()
                              #  - if no default, NEXT(ERROR) with ERROR: status[Code] 406, types 'MIME'_ARR


RES.sendFile('PATH'[, OPTS]   #Uses SEND(REQ, ...) (see its doc)
[, FUNC([ERROR])])            #On top of SEND():
                              #  - can add OPTS.headers HEADER_OBJ
                              #  - 'PATH' does not need to be encodeURIComponent'd
                              #  - fires FUNC(ERROR) (or, if undefined, NEXT(ERROR)) instead of sending 4**, 5**
                              #  - fires FUNC(ERROR) (or, if undefined, NEXT()) instead of 301
RES.download('PATH'[, 'FILE'],
[OPTS, ]FUNC)                 #Same as RES.attachment(['FILE']); RES.sendFile('PATH', OPTS, FUNC);
EXPRESS.static(...)           #Link to SERVE-STATIC(...) (see its doc), which uses same logic as sendFile() for a whole directory of files

RES.send([VAL])->RES          #Similar to sendFile() but:
                              #  - sends content directly, not file content
                              #     - VAL can be any JSON value except null:
                              #        - uses JSON.stringify(VAL[, APPNAME "json replacer"][, APPNAME "json spaces"])
                              #        - replace <>& by \uXXXX to avoid HTML sniffing if APPNAME "json escape" true (def: false)
                              #  - does not:
                              #     - set Last-Modified [S]
                              #     - allow range requests
                              #     - set Cache-Control [S]
                              #     - set Content-Security-Policy [S]
                              #     - allow conditional modification, i.e. If-Match [C] or If-Unmodified-Since [C]
                              #  - different ETag [S]: uses ETAG(..., {weak: BOOL}) (see its doc)
                              #     - BOOL according to CONF.etag 'weak' (def) or 'strong'
                              #     - i.e. '[W/]"SIZE-SHA1HASH"'
                              #     - can customize with CONF."etag fn"(STR, 'ENCODING')->'ETAG'
                              #  - if 204, no body
                              #  - never fires NEXT([ERROR])
RES.json(...)->RES            #Same as RES.send(OBJ)
RES.jsonp(...)->RES           #Same as RES.send(OBJ) but for JSONP, i.e. returns FUNC(BODY)
                              #  - 'FUNC' is REQ.query[CALLBACK]
                              #     - CALLBACK is "jsonp callback name" (def: 'callback')
RES.sendStatus(STATU_NUM)->RES#Like RES.status(STATUS_NUM).send(HTTP.STATUS_CODES[NUM])
RES.redirect([NUM, ]'URL')    #Same RES.location('URL'); RES.sendStatus(NUM);

TFUNC('PATH'[, OBJ]           #Template function:
[, FUNC(ERROR, STR)])         #  - processes 'PATH', using OBJ locals, then return STR
                              #  - can use CONSOLIDATE (see its doc)
APP.engine('EXT', TFUNC)      #Make APP.render('FILE[.EXT]') use TFUNC (def '.EXT' is CONF."view engine" (def: none))
APP.render(...)               #Fires TFUNC(...):
                              #  - 'PATH' should be relative to CONF.views 'DIR'[_ARR] (def: ./views)
                              #     - but is resolved when passed to TFUNC()
                              #  - OBJ: filled with APP.locals OBJ
                              #Use 'PATH'-based cache if OBJ.cache true (def: CONF."view cache" (def: true if NODE_ENV === "production"))
                              #Can customize low-level templating logic with CONF.view (see source code)
RES.render(...)               #Same as APP.render(...) except:
                              #  - can use RES.locals
                              #  - def FUNC2 is RES.send(STR)
