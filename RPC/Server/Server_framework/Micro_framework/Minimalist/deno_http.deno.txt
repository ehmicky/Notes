
             
   DENO_HTTP  
             



VERSION ==>                       #See deno doc

HTTP/2 ==>                        #Fallback to HTTP/1.1
                                  #With Deno.serve[Http](), std serveListener(), but not std serve()
                                  #Only with TLS, including:
                                  #  - cert and key
                                  #  - alpnProtocols ['h2', 'http/1.1']
                                  #     - automatically done with Deno.serve()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RAW              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serveHttp(TCP_CONN)
 ->HTTP_CONN                      #Handle a TCP connection as HTTP

HTTP_CONN                         #REQ_EVENT_ASYNC_ITERABLE
HTTP_CONN.nextRequest()
 ->>REQ_EVENT|null                #null if closed
REQ_EVENT.request                 #REQ
REQ_EVENT.respondWith([>]RES)->>  #

HTTP_CONN.rid
HTTP_CONN.close()
HTTP_CONN[Symbol.dispose]()       #Like TCP_CONN.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HANDLER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serve([OPTS][, FUNC])       N#Start HTTP server
 ->SERVER                         #FUNC is OPTS.handler
                                  #Higher-level than Deno.serveHttp(), but not based on top of it directly
                                  #Calls Deno.listen[Tls]() under the hood
                                  #Supports Accept-Encoding: gzip|br [C]

OPTS.signal                       #ABORT_SIGNAL. Close current connections
SERVER.shutdown()->>
SERVER[Symbol.asyncDispose]()->>  #No new connections but let current ones finish
SERVER.finished                   #BOOL. True when server ended
SERVER.[un]ref()                  #

OPTS.port|hostname|reusePort|     #Like STLS.*
 cert|key                         #Def port: 8000
OPTS.path                        !#'PATH' to Unix socket
OPTS.onListen                     #FUNC(ADDR) called on server start
                                  #Def: console.log('Listening on http://HOSTNAME:PORT/')

OPTS.handler                      #FUNC(REQ, TCP_CONN)->>RES called on request
                                  #TCP_CONN: only remoteAddr ADDR
OPTS.onError                      #FUNC(VAL)->>RES called on exception inside OPTS.handler
                                  #Should not throw itself
                                  #Def:
                                  #  - console.error(VAL)
                                  #  - return new Response('Internal Server Error', { status: 500 })
