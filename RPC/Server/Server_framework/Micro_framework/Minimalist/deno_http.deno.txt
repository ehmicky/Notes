
             
   DENO_HTTP  
             



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RAW              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serveHttp(TCP_CONN)
 ->HTTP_CONN                      #Handle a TCP connection as HTTP

HTTP_CONN                         #REQ_EVENT_ASYNC_ITERABLE
HTTP_CONN.nextRequest()
 ->>REQ_EVENT|null                #null if closed
REQ_EVENT.request                 #REQ
REQ_EVENT.respondWith([>]RES)->>  #

HTTP_CONN.rid
HTTP_CONN.close()                 #Like TCP_CONN.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HANDLER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serve([OPTS][, FUNC])->>   N!#Start HTTP server. Built on top of Deno.serveHttp()
                                  #FUNC is OPTS.handler

OPTS.port|hostname|reusePort|     #Like STLS.*
 cert|key                         #Def port: 9000
OPTS.onListen                     #FUNC(ADDR) called on server start
                                  #Def: console.log('Listening on http://HOSTNAME:PORT/')

OPTS.handler                      #FUNC(REQ, OBJ)->>RES called on request
                                  #OBJ: remoteAddr ADDR

OPTS.onError                      #FUNC(VAL)->>RES called on exception VAL
                                  #Def:
                                  #  - console.log(VAL)
                                  #  - close TCP connection
                                  #  - return new Response('Internal Server Error')
OPTS.signal                       #ABORT_SIGNAL
