
             
   DENO_HTTP  
             



VERSION ==>                       #See deno doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RAW              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serveHttp(TCP_CONN)
 ->HTTP_CONN                      #Handle a TCP connection as HTTP/2 (fallback to HTTP 1.1)

HTTP_CONN                         #REQ_EVENT_ASYNC_ITERABLE
HTTP_CONN.nextRequest()
 ->>REQ_EVENT|null                #null if closed
REQ_EVENT.request                 #REQ
REQ_EVENT.respondWith([>]RES)->>  #

HTTP_CONN.rid
HTTP_CONN.close()                 #Like TCP_CONN.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HANDLER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Deno.serve([OPTS][, FUNC])->>   N!#Start HTTP/2 server (fallback to HTTP 1.1)
                                  #FUNC is OPTS.handler
                                  #Calls Deno.listen[Tls]() under the hood
                                  #  - with alpnProtocols ['h2', 'http/1.1']

OPTS.port|hostname|reusePort|     #Like STLS.*
 cert|key                         #Def port: 9000 (TLS) or 8000 (not TLS)
OPTS.onListen                     #FUNC(ADDR) called on server start
                                  #Def: console.log('Listening on http://HOSTNAME:PORT/')

OPTS.handler                      #FUNC(REQ, OBJ)->>RES called on request
                                  #OBJ: remoteAddr ADDR

OPTS.signal                       #ABORT_SIGNAL
OPTS.onError                      #FUNC(VAL)->>RES called on exception inside OPTS.handler
                                  #Def:
                                  #  - console.error(VAL)
                                  #  - return new Response('Internal Server Error')
