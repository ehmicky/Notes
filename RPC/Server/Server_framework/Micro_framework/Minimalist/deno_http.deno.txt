
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   DENO_HTTP   ┃
                                  ┗━━━━━━━━━━━━━━━┛

VERSION ==>                       #See deno doc

HTTP/2 ==>                        #Fallback to HTTP/1.1
                                  #With Deno.serve[Http](), std serveListener(), but not std serve()
                                  #Only with TLS, including:
                                  #  - cert and key
                                  #  - alpnProtocols ['h2', 'http/1.1']
                                  #     - automatically done with Deno.serve()

deno serve FILE                   #FILE's default export must be SERVER_DEF OBJ
                                  #Calls Deno.serve() under the hood

Deno.serve([OPTS][, FUNC])       N#Start HTTP server
 ->SERVER                         #FUNC is OPTS.handler
                                  #Higher-level than Deno.serveHttp(), but not based on top of it directly
                                  #Calls Deno.listen[Tls]() under the hood
                                  #Supports Accept-Encoding: gzip|br [C]

OPTS.signal                       #ABORT_SIGNAL. Close current connections
SERVER.shutdown()->>
SERVER[Symbol.asyncDispose]()->>  #No new connections but let current ones finish
SERVER.finished                   #BOOL. True when server ended
SERVER.[un]ref()                  #

deno serve --port                 #Like STLS.*. Def: 8000
OPTS.port                         #Can be 0 for any port
deno serve --host
OPTS.hostname                     #Like STLS.*. Def: 0.0.0.0
SERVER.addr                       #ADDR (see deno tcp doc)
OPTS.reusePort|cert|key           #Like STLS.*
OPTS.path                         #'PATH' to Unix socket
OPTS.onListen                     #FUNC(ADDR) called on server start
                                  #Def: console.log('Listening on http://HOSTNAME:PORT/')
deno serve --parallel
OPTS.loadBalanced                 #BOOL (def: false). Spawn multiple worker threads
ENVVAR DENO_JOBS                  #NUM of parallel workers at once with --parallel. Def: NUM of CPUs

SERVER_DEF.fetch                  #FUNC(REQ)->>RES called on request
OPTS.handler                      #FUNC(REQ, REQ_INFO, URL_RESULT)->>RES called on request
                                  #URL_RESULT (see URLPattern doc) is only present when a ROUTE matches
REQ_INFO.remoteAddr               #Like TCP_CONN.*
REQ_INFO.completed()->>           #Resolved|rejected on RES successful|failed sent

@std/http/unstable-route         !#
route(ROUTE_ARR, FUNC)->FUNC2     #Returns a FUNC2 to use with OPTS.handler
                                  #FUNC is default OPTS.handler if no ROUTE matches
ROUTE.method                      #'HTTP_METHOD'[_ARR] (def: 'GET')
ROUTE.pattern                     #URL_PATTERN matched against REQ.url
ROUTE.handler                     #FUNC used as OPTS.handler

OPTS.onError                      #FUNC(VAL)->>RES called on exception inside OPTS.handler
                                  #Should not throw itself
                                  #Def:
                                  #  - console.error(VAL)
                                  #  - return new Response('Internal Server Error', { status: 500 })
