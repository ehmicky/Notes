
             
   POSTGREST  
             




VERSION ==>                       #11.1.0
                                  #Proxies postgres server to expose it as a REST API

postgrest                         #Start server

postgrest CONF_PATH               #PATH to CONF
                                  #INI format
postgrest --dump-config           #Print CONF

CONF.db-channel                   #"CHANNEL" (def: "pgrst"). Reload CONF when "CHANNEL" is notified
CONF.db-channel-enabled           #BOOL (def: true). Enable CONF.db-channel

CONF.db-uri                       #'LIBPQ' connection (def: 'postgresql://') to the postgres server
                                  #Also indicates DATABASE to use
LIBPQ.keepalives_interval         #Uses 75s by default
LIBPQ.keepalives_count            #Uses 9 by default
LIBPQ.keepalives_idle             #Uses 2h by default

CONF.server-host                  #STR (def: '!4'). Host of the postgrest server
CONF.server-port                  #NUM (def: 3000). Port of the postgrest server
CONF.server-unix-socket           #'PATH' to Unix socket of the postgrest server
CONF.server-unix-socket-mode      #STR (def: '600'). Permissions of Unix socket

CONF.admin-server-port            #NUM (def: none). Port of admin server used for checks

CONF.db-schemas                   #"SCHEMA,..." (def: "public") being exposed in REST routes
CONF.db-extra-search-path         #"SCHEMA" (def: "public") to prepend to SCONF.search_path

CONF.db-pre-config                #"FUNC" used for in-database configuration
CONF.db-config                    #BOOL (def: true). Enable CONF.db-pre-config

CONF.db-root-spec                 #STR (def: '')

Accept:
 application/vnd.pgrst.plan [C]   #Runs `explain` on GET
CONF.db-plan-enabled              #BOOL (def: false). Allows application/vnd.pgrst.plan

CONF.db-pool                      #NUM (def: 10) of sockets to keep in pool
CONF.db-pool-acquisition-timeout  #NUM (def: 10) of secs to wait for a socket in pool
CONF.db-pool-max-idletime         #NUM (def: 30s) of secs to keep unused sockets in pool
CONF.db-pool-max-lifetime         #NUM (def: 30min) of secs to keep sockets in pool (used or not)

CONF.db-prepared-statements       #BOOL (def: true). Enable PREPs
                                  #Might need to disable when behind a connection pooler

CONF.db-tx-end                    #Whether to allow using Prefer: tx=commit|rollback [C] to commit|rollback current transaction
                                  #Can be:
                                  #  - 'commit' (def): does not allow
                                  #  - 'commit-allow-override': allows
                                  #  - 'rollback[-allow-override]': same but defaults to always rolling back

CONF.log-level                    #Among: 'crit', 'error' (def), 'warn', 'info'
                                  #Sets SCONF.client_min_messages

CONF.openapi-mode                 #Whether OpenAPI route is:
                                  #  - 'disabled'
                                  #  - 'follow-provileges' (def): enabled
                                  #  - 'ignore-privileges': same but does not take into account ROLE PRIVILEGEs
                                  #Served as JSON
                                  #OpenAPI version 2.0
CONF.openapi-server-proxy-uri     #'URL' (def: '', i.e. root) of OpenAPI route
CONF.openapi-security-active      #BOOL (def: false)

CONF.raw-media-types              #'MIME,...' (def: '') of raw output

CONF.server-trace-header          #STR (def: '')

application/json [C|S]
application/                      #Request|response JSON payload
 vnd.pgrst.object+json [C|S]      #TABLEs are cast as JSON
text/csv [C|S]                    #Request|response CSV payload

Transfer-Encoding: chunked [S]    #Can be used

Server: postgrest/X.Y.Z [S]       #

Content-Location:
 /TABLE[?VAR=VAL,...] [S]         #

GET /TABLE                        #select [COL,...] from TABLE [where ...] [order by ...]
                                  #Request body: empty
                                  #Response: ROW_ARR

HEAD /TABLE                       #

POST /TABLE                       #insert into TABLE
                                  #Request: ROW
                                  #Response: empty

PATCH /TABLE                      #update TABLE [where ...]
                                  #Request: ROW
                                  #Response: empty

DELETE /TABLE                     #delete from TABLE [where ...]
                                  #Request body: empty
                                  #Response: empty

GET /rpc/FUNC                     #Call SQL FUNC(...)
                                  #Request: ?VAR=VAL... (named parameters)
                                  #Response: return value
POST /rpc/FUNC                    #Same using request body OBJ

OPTIONS ...                       #Can be used for CORS
Access-Control-Allow-Origin: * [S]
Allow: OPTIONS,GET,HEAD,POST,
 PATCH,DELETE [S]                 #

?COL=OP.VAL                       #where COL OP VAL [and ...]
                                  #With GET|PATCH|DELETE
                                  #VAL can be written '...' UNKNOWN
                                  #  - including {VAL,...} for ARR, [...] (...) [...) for RANGE, etc.
?COL=not.OP.VAL                   #not
?or=(COL.OP.VAL,...)
?and=(COL.OP.VAL,...)             #or|and. Can be nested
?COL=all.VAL                      #ALL comparison matches all the values in the list, see Logical operators
?COL=any.VAL                      #ANY comparison matches any value in the list, see Logical operators
?COL=eq.VAL                       #= VAL
?COL=neq.VAL                      #<> VAL
?COL=gt.VAL                       #> VAL
?COL=gte.VAL                      #>= VAL
?COL=lt.VAL                       #< VAL
?COL=lte.VAL                      #<= VAL
?COL=in.(VAL,...)                 #in (VAL,...)
?COL=isdistinct.VAL               #is distinct from VAL
?COL=is.null|true|false|unknown   #is null|true|false|unknown
?COL=like.GLOB                    #like GLOB. Can use * instead of % (to make it URL-friendlier)
?COL=ilike.GLOB                   #ilike GLOB. Can also use *
?COL=match.REGEXP                 #~ REGEXP
?COL=imatch.REGEXP                #~* REGEXP
?COL=fts.STR                      #@@ to_tsquery(STR)
?COL=plfts.STR                    #@@ plainto_tsquery(STR)
?COL=phfts.STR                    #@@ phraseto_tsquery(STR)
?COL=wfts.STR                     #@@ websearch_to_tsquery(STR)
?COL=cs.VAL                       #@> VAL
?COL=cd.VAL                       #<@ VAL
?COL=ov.VAL                       #&& VAL
?COL=sl.VAL                       #<< VAL
?COL=sr.VAL                       #>> VAL
?COL=nxr.VAL                      #&< VAL
?COL=nxl.VAL                      #&> VAL
?COL=adj.VAL                      #-|- VAL

?select=COL,...                   #`select COL,...`
                                  #With GET|POST

?order=COL,...                    #`order by COL,...`
                                  #With GET

?on_conflict=STR                  #

PAGINATION ==>                    #With GET
?offset=NUM                       #SQL `offset`
?limit=NUM                        #SQL `limit`
Content-Range: NUM-NUM2/* [S]     #
Range: STR [C]                    #
Range-Unit: STR [C]               #Def: 'items'
CONF.db-max-rows                  #Max NUM (def: unlimited) for `limit`

Prefer: single-object [C]         #
                                  #With GET|POST /rpc/FUNC

Prefer: return=                   #Whether to:
 representation|minimal|none [C]  #  - 'none|minimal': return nothing
                                  #  - 'representation': return updated|deleted ROW_ARR
                                  #With POST|PATCH|DELETE

Prefer: count=none [C]            #With GET

Prefer: resolution=
 ignore|merge-duplicates [C]      #With POST

ERROR_RESP                        #Error response
ERROR_RESP.code                   #STR. sqlstate
ERROR_RESP.message                #STR. sqlerrm
ERROR_RESP.details                #STR|null. pg_exception_detail
ERROR_RESP.hint                   #STR|null. pg_exception_hint

ROLE                              #CONF.db-uri decides the "authenticator" ROLE, i.e. the one used to connect postgrest to postgres
                                  #Clients use (in order):
                                  #  - user ROLE, if set by Authorization [C]
                                  #  - anonymous ROLE, if set in CONF
                                  #  - authenticator ROLE

AUTHENTICATOR ROLE ==>            #Switches to user|anonymous ROLE using `set role 'ROLE'`
                                  #  - i.e. must be a member of it
                                  #  - also means other ROLE can be `nologin`
                                  #Should itself have low PRIVILEGEs
                                  #  - e.g. noinherit, nocreatedb, nocreaterole, nosuperuser
                                  #But should have `login` PRIVILEGE

Authorization: Bearer JWT [C]     #Authentication as a "user" ROLE
WWW-Authenticate: Bearer [S]      #

JWT.ENVLOP.alg                    #Must be 'HS256'
JWT.PAYLOAD.role                  #"ROLE" to authenticate with
JWT.PAYLOAD.exp                   #DATE_NUM

CONF.jwt-secret                   #STR (def: ''). JWT private key
                                  #Can be '@PATH' to a file
                                  #Min 32 chars
                                  #Can also be 'JSON' of JWK|JWKS
CONF.jwt-secret-is-base64         #BOOL (def: false)
CONF.jwt-aud                      #STR (def: ''). Require JWT.PAYLOAD.aud to match
CONF.jwt-role-claim-key           #'.VARR' (def: '.role'). Customize attribute name of JWT.PAYLOAD.role

CONF.db-anon-role                 #"ROLE". "Anonymous ROLE" to use for unauthenticated clients

CONF.db-pre-request               #"SCHEMA.FUNC" called after any client authentication
                                  #No arguments nor return value
                                  #Meant to throw on authorization error

SCONF.*                           #Those are available inside FUNCs like CONF.db-pre-request
SCONF.request.jwt.claims          #'OBJ_JSON'|null of JWT.PAYLOAD.*
SCONF.role                        #'ROLE'
SCONF.request.path                #'/PATH' of HTTP request
SCONF.request.method              #'GET|...' HTTP method
SCONF.request.headers             #'OBJ_JSON' of HTTP headers
SCONF.request.cookies             #'OBJ_JSON' of Cookie [C]
SCONF.app.settings.*              #Set using CONF.app.settings.*
