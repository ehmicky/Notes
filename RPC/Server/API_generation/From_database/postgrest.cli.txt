
             
   POSTGREST  
             




VERSION ==>                       #11.1.0
                                  #Proxies postgres server to expose it as a REST API

postgrest                         #Start server

postgrest CONF_PATH               #PATH to CONF
                                  #INI format
postgrest --dump-config           #Print CONF

CONF.admin-server-port            #NUM (def: none). Port of admin server used for checks

CONF.db-anon-role                 #"ROLE" to use for unauthenticated clients
CONF.db-pre-request               #"FUNC" called after any client authentication

CONF.db-channel                   #"CHANNEL" (def: "pgrst") notified on schema cache reload
CONF.db-channel-enabled           #BOOL (def: true). Enable CONF.db-channel

CONF.db-pre-config                #"FUNC" used for in-database configuration
CONF.db-config                    #BOOL (def: true). Enable CONF.db-pre-config

CONF.db-schemas                   #"SCHEMA" (def: "public") exposing REST routes
CONF.db-extra-search-path         #"SCHEMA" (def: "public") to prepend to SCONF.search_path

CONF.db-max-rows                  #Max NUM (def: unlimited) of ROWs per response

CONF.db-plan-enabled              #BOOL (def: false). Allow runing `explain` using Accept: application/vnd.pgrst.plan [C]

CONF.db-pool                      #NUM (def: 10) of sockets to keep in pool
CONF.db-pool-acquisition-timeout  #NUM (def: 10) of secs to wait for a socket in pool
CONF.db-pool-max-idletime         #NUM (def: 30s) of secs to keep unused sockets in pool
CONF.db-pool-max-lifetime         #NUM (def: 30min) of secs to keep sockets in pool (used or not)

CONF.db-prepared-statements       #BOOL (def: true). Enable PREPs
                                  #Might need to disable when behind a connection pooler

CONF.db-tx-end                    #Whether to allow using Prefer: tx=commit|rollback [C] to commit|rollback current transaction
                                  #Can be:
                                  #  - 'commit' (def): does not allow
                                  #  - 'commit-allow-override': allows
                                  #  - 'rollback[-allow-override]': same but defaults to always rolling back

CONF.db-uri                       #'LIBPQ' connection (def: 'postgresql://')

CONF.jwt-aud                      #JWT claim

## Jspath to the role claim key
CONF.jwt-role-claim-key = ".role"

## Choose a secret, JSON Web Key (or set) to enable JWT auth
## (use "@filename" to load from separate file)
CONF.jwt-secret = "secret_with_at_least_32_characters"
CONF.jwt-secret-is-base64 = false

## Logging level, the admitted values are: crit, error, warn and info.
CONF.log-level = "error"

## Determine if the OpenAPI output should follow or ignore role privileges or be disabled entirely.
## Admitted values: follow-privileges, ignore-privileges, disabled
CONF.openapi-mode = "follow-privileges"

## Base url for the OpenAPI output
CONF.openapi-server-proxy-uri = ""

## Content types to produce raw output
CONF.raw-media-types="image/png, image/jpg"

CONF.server-host = "!4"
CONF.server-port = 3000

## Unix socket location
## if specified it takes precedence over server-port
CONF.server-unix-socket = "/tmp/pgrst.sock"

## Unix socket file mode
## When none is provided, 660 is applied by default
CONF.server-unix-socket-mode = "660"

GET /RESOURCE                     #select * from TABLE
                                  #Returned as OBJ_ARR
?COL=OP.VAL                       #where COL OP VAL [and ...]
?COL=eq.VAL                       #=
