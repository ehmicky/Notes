
             
   POSTGREST  
             




VERSION ==>                       #11.1.0
                                  #Proxies postgres server to expose it as a REST API

postgrest/postgrest               #Docker image
                                  #CLI binary also available

postgrest                         #Start server

postgrest CONF_PATH               #PATH to CONF
                                  #INI format
postgrest --dump-config           #Print CONF
ENVVAR PGRST_*                    #Sets CONF.*
SCONF.pgrst.*                     #CONF.*
                                  #Not for:
                                  #  - CONF that cannot be reloaded
                                  #  - db-config
                                  #  - db-channel*
                                  #  - app.settings.*

CONF.db-pre-config                #"SCHEMA.FUNC" called as FUNC() on server start
                                  #Meant to set SCONF.pgrst.*
CONF.db-config                    #BOOL (def: true). Enable CONF.db-pre-config

SIGUSR1
notify "pgrst", 'reload schema'   #Reloads DDL, which is cached at server start
SIGUSR2                           #Reloads CONF
notify "pgrst", 'reload config'   #Cannot reload:
                                  #  - connection parameters: db-uri, admin-server-port, db-pool-*, server-*
                                  #  - log-level
                                  #  - db-tx-end
CONF.db-channel-enabled           #BOOL (def: true). Enable `notify "pgrst"`
CONF.db-channel                   #"CHANNEL" (def: "pgrst") to override name

CONF.db-uri                       #'LIBPQ' connection (def: 'postgresql://') to the postgres server
                                  #Also indicates DATABASE to use
                                  #Can be '@PATH' to file
Retry-After: NUM [S]              #Set if disconnected, with 503. Also tries to reconnect every 30s
LIBPQ.keepalives_interval         #Uses 75s by default
LIBPQ.keepalives_count            #Uses 9 by default
LIBPQ.keepalives_idle             #Uses 2h by default

CONF.server-host                  #STR. Host of the postgrest server. Can also be:
                                  #  - '!4' (def), '!6': any IPv4|6
                                  #  - '*4', '*6': any IP, with IPv4|6 preferred
                                  #  - '*': any IP
CONF.server-port                  #NUM (def: 3000). Port of the postgrest server
CONF.server-unix-socket           #'PATH' to Unix socket of the postgrest server
CONF.server-unix-socket-mode      #STR (def: '600'). Permissions of Unix socket

CONF.admin-server-port            #ADMIN_PORT (def: none)
GET HOST:ADMIN_PORT/live          #200, empty response, if postgrest server running. Meant for status check
GET HOST:ADMIN_PORT/ready         #Same but also checks connection with Postgres database, and SCHEMA cache

CONF.db-schemas                   #"SCHEMA,..." (def: "public") being exposed in REST routes
Accept-Profile: SCHEMA [C]        #Specifies SCHEMA, when CONF.db-schemas has multiple ones
                                  #Def: CONF.db-schemas[0]
                                  #Always added to SCONF.search_path
                                  #For GET|HEAD
Content-Profile: SCHEMA [C]       #Same but for POST|PATCH|PUT|DELETE

CONF.db-extra-search-path         #"SCHEMA" (def: "public") to prepend to SCONF.search_path

Accept: application/
 vnd.pgrst.plan [C]               #Runs `explain` on GET
Accept: application/
 vnd.pgrst.plan+json [C]          #`explain` format 'json'
Accept: application/
 vnd.pgrst.plan; for="MIME" [C]   #Specifies Content-Type: MIME [C] used by `explain`
Accept: application/
 vnd.pgrst.plan;
 options=STR|... [C]              #`explain` options: analyze, verbose, settings, buffers, wal
CONF.db-plan-enabled              #BOOL (def: false). Allows application/vnd.pgrst.plan[+json]

CONF.db-prepared-statements       #BOOL (def: true). Create PREPs under-the-hood, for performance
                                  #Must disable if using an external connection pooler (like pgBouncer)
                                  #  - can only pool sessions, not statements

CONF.log-level                    #For Postgrest messages, among:
                                  #  - 'crit': connection errors
                                  #  - 'error' (def): also 5**
                                  #  - 'warn': also 4**
                                  #  - 'info': also 2**|3**
                                  #Logs to stdout requests info: IP, ROLE, DATE, METHOD, PATH, STATUS, USER_AGENT
                                  #Logs to stderr server info
                                  #Also sets SCONF.client_min_messages

CONF.openapi-mode                 #Generates a URL which produces OpenAPI 2.0 JSON definition.
                                  #Can be:
                                  #  - 'disabled'
                                  #  - 'follow-provileges' (def): enabled
                                  #  - 'ignore-privileges': same but does not take into account ROLE PRIVILEGEs
                                  #Includes COMMENTs on ENTITYs (e.g. SCHEMA, TABLE, COL)
                                  #  - can include newlines
                                  #  - first line on SCHEMA is used as API title
CONF.openapi-server-proxy-uri     #External 'URL' (def: '', i.e. root) of the API
CONF.openapi-security-active      #BOOL (def: false). Include `security[Definitions]` in response

CONF.db-root-spec                 #'FUNC' (def: '') to manually set OpenAPI response
                                  #Must be a PGSQL FUNC()->JSON calling: openapi json = '{...}'

CONF.server-trace-header          #'HEADER' (def: ''). Request header to repeat in response, e.g. 'X-Request-Id'

Accept: MIME [C]                  #
Content-Type: MIME [C|S]          #
application/json
application/
 vnd.pgrst.object+json            #JSON
application/x-www-form-urlencoded #urlencoded
text/csv                          #CSV
                                  #Empty fields are null
application/geo+json              #GeoJSON for geometry TYPEs
text/plain                        #STR, only for /rpc/FUNC
application/octet-stream          #Binary from BYTEA, only for /rpc/FUNC
text/xml                          #XML, only for /rpc/FUNC

CONF.raw-media-types              #'MIME,...' (def: '').
                                  #Prevents converting to JSON when using `Accept: MIME [C]` with BYTEA or with /rpc/FUNC

Transfer-Encoding: chunked [S]    #Can be used

URL ENCODING ==>                  #Must be used like any URL

Server: postgrest/X.Y.Z [S]       #

Content-Location:
 /TABLE[?VAR=VAL,...] [S]         #

Preference-Applied: ... [S]       #Set when Prefer: ... [C] was used

GET /TABLE                        #select [COL,...] from TABLE [where ...] [order by ...]
                                  #Request body: empty
                                  #Response: ROW_ARR

HEAD /TABLE                       #

POST /TABLE                       #insert into TABLE
                                  #Request: ROW[_ARR]
                                  #Response: empty

PATCH /TABLE                      #update TABLE [where ...]
                                  #Request: ROW
                                  #Response: empty

PUT /TABLE                        #Like PATCH but forces single ROW update

DELETE /TABLE                     #delete from TABLE [where ...]
                                  #Request body: empty
                                  #Response: empty

POST /rpc/FUNC                    #Call SQL FUNC(...)
                                  #Request: OBJ
                                  #Response: return value
                                  #Only if FUNC has named parameters
                                  #Variadic ARGs can be called by their name
                                  #If returns ROW_SET, can use same query variables as GET /TABLE (?COL, etc.)
                                  #Overloaded FUNCs are supported if their arguments differ by name or arity (not only by TYPE)

?VAR=VAL                          #VAL is interpreted as UNKNOWN
                                  #E.g. {VAL,...} for ARR, etc.
JSON REQUEST BODY ==>             #Can contain:
                                  #  - NUM|BOOL|STR: TYPE as is
                                  #  - ARR: TYPE[]
                                  #  - OBJ: JSON or ROW
                                  #  - '...': UNKNOWN, like ?VAR=VAL

GET /rpc/FUNC                     #Same using query variables ?VAR=VAL,... and with a `read only` transaction
                                  #Variadic ARGs must be repeated
                                  #The above also applies to POST with x-www-form-urlencoded [C]

Content-Type: text/plain [C]      #Can be used to call /rpc/FUNC with a single positional STR argument, i.e. FUNC(STR)
Content-Type:
 application/octet-stream [C]     #Same with BYTEA
Content-Type: application/json [C]#Same with JSON[B]
Content-Type: text/xml [C]        #Same with XML
Prefer: params=single-object [C]  #Can be used to call /rpc/FUNC with a single JSON argument, i.e. FUNC(JSON)

OPTIONS ...                       #Can be used for CORS
Access-Control-Allow-Origin: * [S]
Allow: OPTIONS,GET,HEAD,POST,
 PATCH,DELETE [S]                 #

VARR                              #Can use:
                                  #  - JSON[B]->[>]KEY
                                  #  - ROW|ARR|HJSON->[>]KEY: using to_jsonb(ROW|ARR|HJSON)->[>]KEY
                                  #     - works for any TYPE which explicit cast to JSON
                                  #Can use "virtual COLs", i.e. "FUNC" with a SQL FUNC(ROW)
                                  #  - can be indexed too, as any other EXPR
                                  #  - if `create function ... returns setof TYPE rows 1`, VAL not ARR

?COL=OP.VAL                       #where COL OP VAL [and ...]
                                  #With GET|PATCH|DELETE
?VARR=...                         #VARR OP ...
?COL=not.OP.VAL                   #not
?or=(COL.OP.VAL,...)
?and=(COL.OP.VAL,...)             #or|and. Can be nested
?COL=OP(any).ARR                  #OP any (ARR)
?COL=OP(all).ARR                  #OP all (ARR)
?COL=eq.VAL                       #= VAL
?COL=neq.VAL                      #<> VAL
?COL=gt.VAL                       #> VAL
?COL=gte.VAL                      #>= VAL
?COL=lt.VAL                       #< VAL
?COL=lte.VAL                      #<= VAL
?COL=in.(VAL,...)                 #in (VAL,...)
?COL=isdistinct.VAL               #is distinct from VAL
?COL=is.null|true|false|unknown   #is null|true|false|unknown
?COL=like.GLOB                    #like GLOB. Can use * instead of % (to make it URL-friendlier)
?COL=ilike.GLOB                   #ilike GLOB. Can also use *
?COL=match.REGEXP                 #~ REGEXP
?COL=imatch.REGEXP                #~* REGEXP
?COL=cs.VAL                       #@> VAL
?COL=cd.VAL                       #<@ VAL
?COL=ov.VAL                       #&& VAL
?COL=sl.VAL                       #<< VAL
?COL=sr.VAL                       #>> VAL
?COL=nxr.VAL                      #&< VAL
?COL=nxl.VAL                      #&> VAL
?COL=adj.VAL                      #-|- VAL
?COL=fts.STR                      #@@ to_tsquery(STR)
?COL=plfts.STR                    #@@ plainto_tsquery(STR)
?COL=phfts.STR                    #@@ phraseto_tsquery(STR)
?COL=wfts.STR                     #@@ websearch_to_tsquery(STR)
?COL=*ts(REGCONFIG).STR           #@@ *to_tsquery(REGCONFIG, STR)

?select=COL,...                   #select COL,...
                                  #With GET
?select=*                         #select *
?select=VARR                      #select VARR
?select=COL_ALIAS:COL             #select COL as "COL_ALIAS"
?select=COL::TYPE                 #select COL::TYPE

?select=TABLE2(COL,...)           #select TABLE2.COL,... from TABLE left outer join ...
                                  #  - n-1 (OBJ): TABLE2 on TABLE2.PRIMARY_KEY = TABLE.FOREIGN_KEY
                                  #  - 1-n (OBJ_ARR): TABLE2 on TABLE2.FOREIGN_KEY = TABLE.PRIMARY_KEY
                                  #  - 1-1 (OBJ): same but FOREIGN_KEY has a unique or primary key CONSTRAINT
                                  #  - n-n (OBJ_ARR): TABLE3 on TABLE3.FOREIGN_KEY = TABLE.PRIMARY_KEY join TABLE2 on TABLE3.FOREIGN_KEY2 = TABLE2.PRIMARY_KEY
                                  #Works also on [M]VIEWs or FUNCs when they return the foreign keys as is
                                  #  - e.g. `create view as select FOREIGN_KEY from TABLE`
?select=CONSTRAINT(...)           #Same but using the foreign key "CONSTRAINT" name instead of the referenced "TABLE2" name
?select=TABLE2!COL(...)           #Same but specifies the referenced COL. Only needed to avoid ambiguity in some edge cases
?select=TABLE2(TABLE3(...),...)   #Can be deep
?select=...TABLE2(...)            #Spreads to parent OBJ, i.e. like { ...OBJ } in JavaScript
?select=FUNC(COL,...)             #Virtual COL, i.e. FUNC(ROW)->ROW2_SET
?select=TABLE2!inner(...)         #select ... inner join ...
                                  #I.e. exclude TABLE ROWs where TABLE.TABLE2 is empty ARR
                                  #  - i.e. did not join to anything
                                  #  - including to a ?TABLE2.COL filter
?TABLE2=[not.]is.null             #Similar result than ?select=TABLE2!inner, since an empty ARR `is null`
?TABLE2.COL=OP.VAL
?TABLE2.and|or=(COL.OP.VAL,...)
?TABLE2.order=...
?order=TABLE2(COL)                #Same, but for a joined TABLE2
?TABLE2.offset|limit=NUM          #Can be deep

?order=COL,...                    #order by COL,...
                                  #With GET
?order=VARR                       #order by VARR
?order=COL.asc|desc               #order by COL asc|desc
?order=COL.nullsfirst|nullslast   #order by COL nullsfirst|nullslast

PAGINATION ==>                    #With GET
                                  #Can also be used with PATCH|DELETE to limit number of updated|deleted ROWs
                                  #  - uses: with (select ... offset|limit) update|delete ...
?offset=NUM                       #SQL `offset`
?limit=NUM                        #SQL `limit`
Content-Range: NUM-NUM2/* [S]     #
Range: NUM-[NUM2] [C]             #SQL `offset` + `limit`
Range-Unit: STR [C]               #Def: 'items'
CONF.db-max-rows                  #Max NUM (def: unlimited) for `limit`

Content-Range: NUM-NUM2/NUM3 [S]  #
Prefer: count=STR [C]             #Set NUM3 total amount of ROWs
Prefer: count=none [C]            #Def: always '*'
Prefer: count=exact [C]           #Use count(*)
Prefer: count=planned [C]         #Use `explain`
Prefer: count=estimated [C]       #'exact' if < CONF.db-max-rows, 'planned' if >=

Accept: application/              #Return response as OBJ (using ARR[0]) instead of OBJ_ARR
 vnd.pgrst.object+json [C]        #406 if OBJ_ARR.length 0

?columns=COL,...                  #Like ?select but for POST, i.e. ignore non-matching COLs

Prefer: return=STR [C]            #Whether to:
                                  #  - 'none|minimal': return nothing
                                  #  - 'headers-only': return primary key in Location [S]
                                  #  - 'representation': return updated|deleted ROW_ARR in body
                                  #      - can use ?select
                                  #With POST|PATCH|DELETE

Prefer: missing=default [C]       #Missing values are `default` instead of null
                                  #With POST|PATCH

Prefer:                           #insert on conflict do nothing
 resolution=ignore-duplicates [C] #With POST
Prefer:                           #insert on conflict do update set, i.e. upserts
 resolution=merge-duplicates [C]  #With POST
?on_conflict=VARR                 #Allow Prefer: resolution=merge-duplicates to work on COLs with `unique` CONSTRAINT, not only primary key

ERROR_RESP                        #Error response
ERROR_RESP.code                   #STR. sqlstate
                                  #Errors from Postgrest (not Postgres) start with 'PGRST'
ERROR_RESP.message                #STR. sqlerrm
ERROR_RESP.details                #STR|null. pg_exception_detail
ERROR_RESP.hint                   #STR|null. pg_exception_hint

ERROR STATUS CODE ==>             #Set based on sqlstate. Main ones:
                                  #  - 300: ambiguous overloaded FUNC
                                  #  - 400: `raise` in FUNC (unless overridden), invalid query parameters
                                  #  - 401: authentication, or missing PRIVILEGE + anonymous ROLE
                                  #  - 403: authorization
                                  #  - 404: unknown TABLE|FUNC
                                  #  - 405: `read only` transaction
                                  #  - 406: unknown SCHEMA
                                  #  - 409: foreign key, unique CONSTRAINT
                                  #  - 413: too many COLs, ARGs, statements
                                  #  - 415: invalid Content-Type [C]
                                  #  - 416: invalid Range [C]
                                  #  - 500: invalid SCONF.response.headers
                                  #  - 503: connection issue, resources limit
                                  #  - 504: CONF.db-pool-acquisition-timeout
                                  #  - 400|500: others
                                  #Can also set status code XXX with sqlstate 'PTXXX'

ROLE                              #CONF.db-uri decides the "authenticator" ROLE, i.e. the one used to connect postgrest to postgres
                                  #Clients use (in order):
                                  #  - user ROLE, if set by Authorization [C]
                                  #  - anonymous ROLE, if set in CONF
                                  #  - authenticator ROLE

AUTHENTICATOR ROLE ==>            #Switches to user|anonymous ROLE using `set role 'ROLE'`
                                  #  - i.e. must be a member of it
                                  #  - also means other ROLE can be `nologin`
                                  #Should itself have low PRIVILEGEs
                                  #  - e.g. noinherit, nocreatedb, nocreaterole, nosuperuser
                                  #But should have `login` PRIVILEGE

Authorization: Bearer JWT [C]     #Authentication as a "user" ROLE
WWW-Authenticate: Bearer [S]      #

JWT.ENVLOP.alg                    #Must be 'HS256'
JWT.PAYLOAD.role                  #"ROLE" to authenticate with
                                  #Def: CONF.db-anon-role
JWT.PAYLOAD.exp                   #DATE_NUM

CONF.jwt-secret                   #STR (def: ''). JWT private key
                                  #Can be '@PATH' to a file
                                  #Min 32 chars
                                  #Can also be 'JSON' of JWK|JWKS
CONF.jwt-secret-is-base64         #BOOL (def: false)
CONF.jwt-aud                      #STR (def: ''). Require JWT.PAYLOAD.aud to match
CONF.jwt-role-claim-key           #'.VARR' (def: '.role'). Customize attribute name of JWT.PAYLOAD.role

CONF.db-anon-role                 #"ROLE". "Anonymous ROLE" to use for unauthenticated clients

CONF.db-pre-request               #"SCHEMA.FUNC" called after any client authentication
                                  #No arguments nor return value
                                  #Meant to throw on authorization error, set SCONF.response.*, etc.

SCONF.*                           #Those are available inside FUNCs like /rpc/FUNC, CONF.db-pre-request, etc.

SCONF.request.jwt.claims          #'OBJ_JSON'|null of JWT.PAYLOAD.*
current_role
SCONF.role                        #'ROLE'

SCONF.request.path                #'/PATH' of HTTP request
SCONF.request.method              #'GET|...' HTTP method
SCONF.request.headers             #'OBJ_JSON' of HTTP headers
SCONF.request.cookies             #'OBJ_JSON' of Cookie [C]

SCONF.app.settings.*              #Set using CONF.app.settings.*

SCONF.response.status             #'NUM' of HTTP response, to set
SCONF.response.headers            #'OBJ_ARR' of HTTP headers, to set. Each OBJ has a single property

TRANSACTION ==>                   #Each request runs in a transaction
begin readonly                    #Used when either:
                                  #  - GET|HEAD
                                  #  - POST /rpc/FUNC on a stable|immutable FUNC
Prefer: tx=commit|rollback [C]    #Make the request's transaction:
                                  #  - commit at the end (def)
                                  #  - rollback: for a dry run
                                  #     - including with `explain`
CONF.db-tx-end                    #Whether to allow using Prefer: tx=commit|rollback [C], among:
                                  #  - 'commit' (def): does not allow
                                  #  - 'commit-allow-override': allows
                                  #  - 'rollback[-allow-override]': same but defaults to always rolling back

CONF.db-pool                      #Max NUM (def: 10) of sockets to keep in pool
                                  #Must be <= PCONF.max_connections
CONF.db-pool-acquisition-timeout  #NUM (def: 10) of secs to wait for a socket in pool
CONF.db-pool-max-idletime         #NUM (def: 30s) of secs to keep unused sockets in pool
CONF.db-pool-max-lifetime         #NUM (def: 30min) of secs to keep sockets in pool (used or not)
