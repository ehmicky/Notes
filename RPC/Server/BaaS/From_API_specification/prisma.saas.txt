
          
   PRISMA  
          



VERSION ==>                       #2023-10-16



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SCHEMA GENERAL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FORMAT ==>                        #GraphQL, with custom keywords

schema.prisma                     #Filename

env("ENVVAR")                     #"VAL"
.env                              #Dotenv is parsed
                                  #Must be in same DIR as schema


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA DATASOURCE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


datasource DB {
  VAR = VAL                       #Database
  ...                             #Only one per schema
}                                 #DB is often "db"

provider = "DB_PROVIDER"          #Database type ("connector") among:
                                  #  - "postgresql", "mysql", "sqlserver"
                                  #  - "sqlite"
                                  #  - "cockroachdb"
                                  #  - "mongodb"
url = "URL"                       #Connection URL to the main database, through connection pooler if any
                                  #E.g.:
                                  #  - Postgres: 'LIBPQ'
                                  #  - SQLite: 'file:./PATH.db'
directUrl = "URL"                 #Connection URL to the main database, without connection pooler if any
                                  #Used with prisma db|migrate|studio
shadowDatabaseUrl = "URL"         #Connection URL to the shadow database used by Prisma Migrate

relationMode = ENUM               #Whether @relation:
                                  #  - "foreignKeys":
                                  #     - creates a database foreign key
                                  #     - default with most databases
                                  #     - usually recommended
                                  #  - "prisma":
                                  #     - emulates foreign key at the ORM layer
                                  #     - default with "mongodb"

extensions =                      #Postgres EXTENSION. ARGs (all optional):
 [EXTENSION[(ARG: "VAL",...)],...]#  - version "EVERSION"
                                  #  - schema "SCHEMA"
                                  #  - map "EXTENSION2":
                                  #     - name used in Postgres, instead of "EXTENSION" used in schema
                                  #     - meant when "EXTENSION" contains invalid GraphQL characters, e.g. -


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA GENERATOR        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


generator CLIENT {
  VAR = VAL
  ...
}                                 #Generated client

provider = "CLIENT_PROVIDER"      #Client type among:
                                  #  - "prisma-client-js": Node.js client
                                  #  - "PATH"

output = "PATH"                   #Def: "./node_modules/.prisma/client"

engineType = ENUM                 #Whether query engine should be:
                                  #  - "library":
                                  #     - embedded in library
                                  #     - takes more space, which is an issue inside serverless functions
                                  #  - "binary"
                                  #     - separate executable file, as a daemon
                                  #     - slower due to IPC
binaryTargets = ENUM_ARR          #OS|CPU to compile query engine to, i.e. where it will run
                                  #Can be:
                                  #  - "native" (def): current
                                  #  - "debian-openssl-X.Y.x": Debian|Ubuntu|Mint|ArchLinux
                                  #  - "rhel-openssl-X.Y.x": Fedora|CentOS
                                  #  - "linux-musl[-arm64][-openssl-3.0.x]": Alpine >=|< 3.17, x86|ARM64
                                  #  - "linux-arm64-openssl-X.Y.x": other Linux ARM64, glibc
                                  #  - "darwin[-arm64]"
                                  #  - "windows"

previewFeatures = ENUM_ARR        #Beta opt-in PREVIEW features


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SCHEMA MODEL          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


model MODEL [@@ATTR]... {
  FIELD FTYPE [@ATTR]...
  ...
}                                 #MODEL. Database TABLE

MODEL                             #MODEL name
                                  #Must be [[:alnum:]_]
                                  #Usually CamelCase, singular
                                  #Cannot be one of the JavaScript reserved keywords, nor "Prisma[Client]"

FIELD                             #Database COL name
                                  #Must be [[:alnum:]_]
                                  #Usually camelCase
                                  #Cannot be "AND|OR|NOT"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA FIELD TYPE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FTYPE                             #One of the following types, using GraphQL syntax

FTYPE?                            #Optional

FTYPE[]                           #ARR ("list")
                                  #Not with SQLite, MySQL, SQL server
                                  #Cannot be FTYPE[]? nor FTYPE?[]

String                            #Postgres: text, MongoDB: String, SQLite: TEXT, also MySQL, SQL server, CDB
                                  #JavaScript client: STR
String @db.Text	                  #Postgres: text, SQLite: TEXT, also MySQL, SQL server
String @db.Char(NUM)	            #Postgres: char(NUM), also MySQL, SQL server, CDB
String @db.VarChar(NUM)		        #Postgres: varchar(NUM), also MySQL, SQL server
String @db.Bit(NUM)		            #Postgres: bit(NUM), also CDB
String @db.VarBit		              #Postgres: varbit, also CDB
String @db.Uuid		                #Postgres: uuid, also CDB
String @db.Xml		                #Postgres: xml, also SQL server
String @db.Inet		                #Postgres: inet, also CDB
String @db.Citext		              #Postgres: citext
String @db.Tiny|Medium|LongText   #Only MySQL
String @db.NText                  #Only SQL server
String @db.N[Var]Char(NUM)        #Only SQL server
String @db.UniqueIdentifier       #Only SQL server
String @db.CatalogSingleChar      #Only CDB
String @db.String                 #MongoDB: String, also CDB
String @db.ObjectId               #MongoDB: String, as objectId

Boolean                           #Postgres: boolean, MongoDB: Bool, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: BOOL
Boolean @db.Boolean               #Postgres: boolean
Boolean @db.TinyInt(NUM)          #Only MySQL
Boolean @db.Bool                  #Only CDB
Boolean @db.Bit                   #MongoDB: bit, also MySQL

Int                               #Postgres: int4, MongoDB: Int, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: NUM
Int @db.SmallInt	                #Postgres: int2, also MySQL, SQL server
Int @db.Integer	                  #Postgres: int4
Int @db.SmallInt
 @default(autoincrement())	      #Postgres: serial2
Int @db.Int
 @default(autoincrement())	      #Postgres: serial4
Int @db.Oid                       #Postgres: oid
Int @db.Int                       #MongoDB: Int, also MySQL, SQL server
Int @db.TinyInt                   #Only MySQL, SQL server
Int @db.MediumInt                 #Only MySQL
Int @db
 .Unsigned[Tiny|Small|Medium]Int  #Only MySQL
Int @db.Year                      #Only MySQL
Int @db.Bit                       #Only SQL server
Int @db.Int2|4|8                  #Only CDB
Int @db.Long                      #MongoDB: Long

BigInt                            #Postgres: int8, MongoDB: Long, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: BIGINT
BigInt @db.BigInt                 #Postgres: int8, also MySQL, SQL server
BigInt @db.BigInt
 @default(autoincrement())	      #Postgres: serial8
BigInt @db.UnsignedBigInt         #Only MySQL
BigInt @db.Int8                   #Only CDB

Float                             #Postgres: float8, MongoDB: Double, SQLite: REAL, also MySQL, SQL server, CDB
                                  #JavaScript client: NUM
Float @db.Real                    #Postgres: float4, also SQL server
Float @db.DoublePrecision         #Postgres: float8
Float @db.Float                   #Only MySQL, SQL server
Float @db.Double                  #Only MySQL
Float @db.[Small]Money            #Only SQL server
Float @db.Float4|8                #Only CDB

Decimal                           #Postgres: numeric(65, 30), SQLite: DECIMAL, also MySQL, SQL server, CDB
                                  #Not with MongoDB
                                  #JavaScript client: DECIMAL (from decimal.js library)
Decimal @db.Decimal(NUM, NUM2)    #Postgres: numeric(NUM, NUM2), also MySQL, SQL server, CDB
Decimal @db.Money                 #Postgres: money

DateTime                          #Postgres: timestamp(3), MongoDB: Timestamp, SQLite: NUMERIC|STRING, also MySQL, SQL server, CDB
                                  #JavaScript client: DATE
DateTime @db.Timestamp(NUM)       #Postgres: timestamp(NUM), also MySQL, CDB
DateTime @db.Timestamptz(NUM)     #Postgres: timestamptz(NUM), also CDB
DateTime @db.Date                 #Postgres: date, also SQL server, CDB
DateTime @db.Time(NUM)            #Postgres: time(NUM), also MySQL, CDB
DateTime @db.Timetz(NUM)          #Postgres: timetz(NUM), also CDB
DateTime @db.Date[Time](NUM)      #Only MySQL
DateTime @db.DateTime[2]          #Only SQL server
DateTime @db.SmallDateTime        #Only SQL server
DateTime @db.DateTimeOffset       #Only SQL server
DateTime @db.Time                 #Only SQL server

Json                              #Postgres: jsonb, MongoDB: BSON v2 relaxed, also MySQL, SQL server, CDB
                                  #Not with SQLite
                                  #JavaScript client: VAL
Json @db.Json                     #Postgres: json, also MySQL
Json @db.JsonB                    #Postgres: jsonb, also CDB
Json @db.NVarChar                 #Only with SQL server

Bytes                             #Postgres: bytea, MongoDB: BinData, SQLite: BLOB, also MySQL, SQL server, CDB
                                  #JavaScript client: Node.js BUFFER
Bytes @db.ByteA                   #Postgres: bytea
Bytes	@db.Binary                  #Only MySQL, SQL server
Bytes	@db.VarBinary               #Only MySQL, SQL server
Bytes	@db.Bit                     #Only MySQL
Bytes	@db.[Tiny|Medium|Long]Blob  #Only MySQL
Bytes	@db.Image                   #Only SQL server
Bytes	@db.Bytes                   #Only CDB
Bytes @db.BinData                 #MongoDB: BinData
Bytes @db.ObjectId                #MongoDB: ObjectId

Unsupported("TYPE")               #Database type called exactly TYPE
                                  #Not with MongoDB
                                  #Omitted by JavaScript client
                                  #  - if required, cannot create|update|upsert MODEL
                                  #But works with prisma db|migrate


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    SCHEMA FIELD ATTRIBUTE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@[@]ATTR[([ARG: ]VAL, ...)]       #Attribute. Options to PROP
                                  #Must include at least one @[@]id|unique
                                  #ARGs can always be named, and often also positional

@default[(VAL)]                   #FIELD's default VAL
                                  #Postgres: `default`
autoincrement()                   #Can be used as @default's VAL
                                  #Postgres: serial, SQLite: AUTOINCREMENT, also with MySQL, SQL server, CDB
                                  #Not with MongoDB
sequence(...)                     #Can be used as @default's VAL
                                  #SEQUENCE table
                                  #Only with CDB
now()                             #Can be used as @default's VAL
                                  #DateTime FTYPE
                                  #Postgres|MySQL|SQLite|SQL server|CDB: current_timestamp
                                  #MongoDB: done at ORM-level
uuid()                            #Can be used as @default's VAL
                                  #String FTYPE
                                  #Done at ORM-level, i.e. for any database
                                  #UUIDv4
dbgenerated('EXPR')               #Can be used as @default's VAL
                                  #Database-specific EXPR, e.g. FUNC(), OPs, etc.
