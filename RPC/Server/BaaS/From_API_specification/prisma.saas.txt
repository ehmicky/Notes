
          
   PRISMA  
          



TODO:
  - https://github.com/prisma/prisma-engines
  - https://github.com/prisma
  - https://www.prisma.io/docs/concepts/components/prisma-schema/generators#community-generators

VERSION ==>                       #5.4.2 (2023-10-16)

Done:
  - Concept:
     - Prisma schema
     - Database connectors
  - Reference: all but:
     - Prisma Client API reference
     - Prisma CLI reference
     - Error message reference
     - Environment variables reference



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SCHEMA GENERAL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCHEMA ==>                        #Defines data model in a declarative way

FORMAT ==>                        #PSL ("Prisma Schema Language"). GraphQL-like

prisma validate                   #Validate SCHEMA
prisma format                     #Validate and prettify SCHEMA, saving on-file

prisma generate|validate|format
 |studio
prisma db pull|push|execute       #PATH to SCHEMA
prisma migrate dev|reset|deploy   #Def:
 |resolve|status                  #  - package.json prisma.schema 'PATH'
--schema=PATH                     #  - [.../]./[prisma/]schema.prisma

VSCODE EXTENSION ==>              #SCHEMA's syntax highlighting, linting, autocomplete, formatting, jump-to-definition, hovering help
                                  #There is also for other IDEs

```prisma
...
```                               #Can be used on GitHub

//COMMENT                         #
///COMMENT                        #Same but present when parsing as AST, i.e. can be used by tooling

env("ENVVAR")                     #"VAL"
                                  #Only for datasource.url and generator.binaryTargets
.env                              #Dotenv is parsed
                                  #Must be in same DIR as schema


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA DATASOURCE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


datasource DB {
  VAR = VAL                       #Database
  ...                             #Only one per schema
}                                 #DB is often "db"
POPTS.datasource                  #Same as OBJ
                                  #Cannot set provider

datasource.provider               #"DB_PROVIDER". Database type ("connector") among:
                                  #  - "postgresql" (>=9.6), "mysql", "sqlserver"
                                  #  - "sqlite"
                                  #  - "cockroachdb"
                                  #  - "mongodb" (>=4.2)
datasource.url                    #Connection "URL" to the main database, through connection pooler if any
POPTS.datasourceUrl               #E.g.:
                                  #  - Postgres: 'LIBPQ'
                                  #  - SQLite: 'file:./PATH.db'
datasource.directUrl              #Connection "URL" to the main database, without connection pooler if any
                                  #Used with prisma db|migrate|studio
datasource.shadowDatabaseUrl      #Connection "URL" to the shadow database used by Prisma Migrate

LIBPQ.*                           #In connection 'URL', different from Postgres ones
LIBPQ.options|host|connect_timeout
 |application_name|sslcert
 |sslpassword|channel_binding     #Like Postgres
LIBPQ.schema                      #'SCHEMA'
LIBPQ.socket_timeout              #NUM (def: none). Query timeout
LIBPQ.connection_limit            #NUM (def: CPUs * 2 + 1). Keep pool of connections
LIBPQ.pool_timeout                #NUM (in sec, def: 10). If pool empty, how long to wait
LIBPQ.sslidentity                 #Like Postgres LIBPQ.ssl_key_file
LIBPQ.sslcert                     #Like Postgres LIBPQ.ssl_cert_file
LIBPQ.sslmode                     #Like Postgres, but no "allow" nor "verify-*"
LIBPQ.sslaccept                   #'accept_invalid_certs' (def) or 'strict'
                                  #Whether to allow missing values in certificates
LIBPQ.pgbouncer                   #BOOL (def: false). When using pgBouncer

datasource.extensions             #ARR of EXTENSION[(ARG: "VAL",...)]
                                  #Postgres EXTENSIONs. ARGs (all optional):
                                  #  - version "EVERSION"
                                  #  - schema "SCHEMA"
                                  #  - map "EXTENSION2": like @map but for "EXTENSION"
                                  #Requires PREVIEW postgresqlExtensions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SCHEMA TYPE COMPLEX      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


model MODEL {
  FIELD FTYPE [@ATTR]...          #Database TABLE
  ...                             #Can use MODEL as FTYPE
  [@@ATTR]                        #With any database
  ...                             #JavaScript client: OBJ|ARR
}                                 #In schema: ???

view VIEW { ... }                 #Database VIEW
                                  #Same syntax and behavior as MODEL
                                  #With any database
                                  #Requires PREVIEW views
./prisma/views/SCHEMA/VIEW.sql    #SQL query of VIEW
                                  #Created by `prisma db pull`

type OBJ_TYPE { ... }             #"Composite type"
                                  #Same syntax as `model MODEL`
                                  #No @unique, @id, @relation, @ignore, @updatedAt
                                  #Can use OBJ_TYPE as FTYPE
                                  #Only with MongoDB
                                  #JavaScript client: OBJ
                                  #In schema: ???

enum ENUM { ... }                 #Same syntax as `model MODEL`, except no FTYPE
                                  #Only @[@]map
                                  #Can use ENUM as FTYPE
                                  #Postgres|MySQL|CDB: enum type
                                  #MondoDB: done at ORM-level
                                  #Not with SQLite nor SQL server
                                  #JavaScript client: ???
                                  #In schema: FIELD

MODEL|VIEW|ENUM|OBJ_TYPE          #Name must be [[:alnum:]_] and not start with _ nor digit
                                  #Usually CamelCase, singular
                                  #Cannot be one of the JavaScript reserved keywords, nor "Prisma[Client]"

FIELD                             #Database COL name
                                  #Must be [[:alnum:]_] and not start with _ nor digit
                                  #Usually camelCase
                                  #Cannot be "AND|OR|NOT"

FIELD_VARR                        #FIELD name
                                  #Can be dot-delimited for OBJ_TYPE

FTYPE?                            #Optional FTYPE
                                  #Most databases: `not null`
                                  #MongoDB: done at ORM-level
                                  #Implies @default null

FTYPE[]                           #ARR ("list")
                                  #Not with SQLite, MySQL, SQL server
                                  #Cannot be FTYPE[]? nor FTYPE?[]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SCHEMA TYPE SIMPLE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


String                            #Postgres: text, MongoDB: String, SQLite: TEXT, also MySQL, SQL server, CDB
                                  #JavaScript client: STR
                                  #In schema: "..."
String @db.Text                   #Postgres: text, SQLite: TEXT, also MySQL, SQL server
String @db.Char(NUM)              #Postgres: char(NUM), also MySQL, SQL server, CDB
String @db.VarChar(NUM)           #Postgres: varchar(NUM), also MySQL, SQL server
String @db.Bit(NUM)               #Postgres: bit(NUM), also CDB
String @db.VarBit                 #Postgres: varbit, also CDB
String @db.Uuid                   #Postgres: uuid, also CDB
String @db.Xml                    #Postgres: xml, also SQL server
String @db.Inet                   #Postgres: inet, also CDB
String @db.Citext                 #Postgres: citext
String @db.Tiny|Medium|LongText   #Only MySQL
String @db.NText                  #Only SQL server
String @db.N[Var]Char(NUM)        #Only SQL server
String @db.UniqueIdentifier       #Only SQL server
String @db.CatalogSingleChar      #Only CDB
String @db.String                 #MongoDB: String, also CDB
String @db.ObjectId               #MongoDB: String, as objectId

Boolean                           #Postgres: boolean, MongoDB: Bool, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: BOOL
                                  #In schema: true|false
Boolean @db.Boolean               #Postgres: boolean
Boolean @db.TinyInt(NUM)          #Only MySQL
Boolean @db.Bool                  #Only CDB
Boolean @db.Bit                   #MongoDB: bit, also MySQL

Int                               #Postgres: int4, MongoDB: Int, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: NUM
                                  #In schema: INT
Int @db.SmallInt                  #Postgres: int2, also MySQL, SQL server
Int @db.Integer                   #Postgres: int4
Int @db.Oid                       #Postgres: oid
Int @db.Int                       #MongoDB: Int, also MySQL, SQL server
Int @db.TinyInt                   #Only MySQL, SQL server
Int @db.MediumInt                 #Only MySQL
Int @db
 .Unsigned[Tiny|Small|Medium]Int  #Only MySQL
Int @db.Year                      #Only MySQL
Int @db.Bit                       #Only SQL server
Int @db.Int2|4|8                  #Only CDB
Int @db.Long                      #MongoDB: Long

BigInt                            #Postgres: int8, MongoDB: Long, SQLite: INTEGER, also MySQL, SQL server, CDB
                                  #JavaScript client: BIGINT
                                  #In schema: INT
BigInt @db.BigInt                 #Postgres: int8, also MySQL, SQL server
BigInt @db.UnsignedBigInt         #Only MySQL
BigInt @db.Int8                   #Only CDB

Float                             #Postgres: float8, MongoDB: Double, SQLite: REAL, also MySQL, SQL server, CDB
                                  #JavaScript client: NUM
                                  #In schema: NUM
Float @db.Real                    #Postgres: float4, also SQL server
Float @db.DoublePrecision         #Postgres: float8
Float @db.Float                   #Only MySQL, SQL server
Float @db.Double                  #Only MySQL
Float @db.[Small]Money            #Only SQL server
Float @db.Float4|8                #Only CDB

Decimal                           #Postgres: numeric(65, 30), SQLite: DECIMAL, also MySQL, SQL server, CDB
                                  #Not with MongoDB
                                  #JavaScript client: DECIMAL (from decimal.js library)
                                  #In schema: NUM
Decimal @db.Decimal(NUM, NUM2)    #Postgres: numeric(NUM, NUM2), also MySQL, SQL server, CDB
Decimal @db.Money                 #Postgres: money

DateTime                          #Postgres: timestamp(3), MongoDB: Timestamp, SQLite: NUMERIC|STRING, also MySQL, SQL server, CDB
                                  #JavaScript client: DATE
                                  #In schema: "YYYY-MM-DDTHH:MM:SSTZ"
DateTime @db.Timestamp(NUM)       #Postgres: timestamp(NUM), also MySQL, CDB
DateTime @db.Timestamptz(NUM)     #Postgres: timestamptz(NUM), also CDB
DateTime @db.Date                 #Postgres: date, also SQL server, CDB
DateTime @db.Time(NUM)            #Postgres: time(NUM), also MySQL, CDB
DateTime @db.Timetz(NUM)          #Postgres: timetz(NUM), also CDB
DateTime @db.Date[Time](NUM)      #Only MySQL
DateTime @db.DateTime[2]          #Only SQL server
DateTime @db.SmallDateTime        #Only SQL server
DateTime @db.DateTimeOffset       #Only SQL server
DateTime @db.Time                 #Only SQL server

Json                              #Postgres: jsonb, MongoDB: BSON v2 relaxed, also MySQL, SQL server, CDB
                                  #Not with SQLite
                                  #JavaScript client: VAL
                                  #In schema: ???
Json @db.Json                     #Postgres: json, also MySQL
Json @db.JsonB                    #Postgres: jsonb, also CDB
Json @db.NVarChar                 #Only with SQL server

Bytes                             #Postgres: bytea, MongoDB: BinData, SQLite: BLOB, also MySQL, SQL server, CDB
                                  #JavaScript client: Node.js BUFFER
                                  #In schema: "BASE64"
Bytes @db.ByteA                   #Postgres: bytea
Bytes @db.Binary                  #Only MySQL, SQL server
Bytes @db.VarBinary               #Only MySQL, SQL server
Bytes @db.Bit                     #Only MySQL
Bytes @db.[Tiny|Medium|Long]Blob  #Only MySQL
Bytes @db.Image                   #Only SQL server
Bytes @db.Bytes                   #Only CDB
Bytes @db.BinData                 #MongoDB: BinData
Bytes @db.ObjectId                #MongoDB: ObjectId

Unsupported("TYPE")               #Database type called exactly TYPE
                                  #Not with MongoDB
                                  #Implies @ignore
                                  #In schema: not possible


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA ATTRIBUTE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@ATTR[([ARG: ]VAL, ...)]          #Attribute. Options to FIELD
                                  #ARGs can always be named, and often also positional
@@ATTR[([ARG: ]VAL, ...)]         #Same for options to multiple FIELDs, or to MODEL|ENUM

@map(STR)                         #Database COL name
                                  #Def: "FIELD"
                                  #Meant when:
                                  #  - "FIELD" contains invalid characters
                                  #  - want a different name in API than in database
@@map(STR)                        #Same but for database MODEL name

@ignore                           #Omit FIELD in JavaScript client, except in raw queries
                                  #If no @default, cannot create|update|upsert MODEL
                                  #But works with prisma db|migrate
                                  #Done at the ORM-level, i.e. on any database
@@ignore                          #Same but for a MODEL

@@schema("SCHEMA")                #MODEL's database "SCHEMA"
                                  #Only with Posgres, SQL server, CDB
                                  #Requires PREVIEW "multiSchema"
datasource.schemas                #Database "SCHEMA"_ARR available to @@schema


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SCHEMA DEFAULT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@updatedAt                        #Set on each MODEL update (unless overridden) with current time
                                  #DateTime FTYPE
                                  #Done at ORM-level, i.e. for any database

@default(OPTS[.value])            #FIELD's default VAL
                                  #For any database
                                  #If none, FIELD is required
OPTS.map                          #STR. Only for SQL server
OPTS.value                        #Default VAL
                                  #Can also use any of the following

now()                             #DateTime FTYPE
                                  #With most databases: current_timestamp
                                  #MongoDB: done at ORM-level

uuid()                            #String FTYPE
                                  #Done at ORM-level, i.e. for any database
                                  #UUIDv4
cuid()                            #String FTYPE
                                  #Done at ORM-level, i.e. for any database
                                  #CUID1 (min 30 chars)

autoincrement()                   #Postgres: serial2|4|8, SQLite: AUTOINCREMENT, also with MySQL, SQL server, CDB
                                  #Int FTYPE
                                  #  - Postgres: Int @db.[Small|Big]Int
                                  #Not with MongoDB

dbgenerated('EXPR')               #Database-specific EXPR, e.g. FUNC(), OPs, etc.
                                  #Not with MongoDB

auto()                            #ObjectId
                                  #String @db.ObjectId FTYPE
                                  #Must use @map("_id")
                                  #Only with MongoDB

sequence(...)                     #SEQUENCE table
                                  #Only with CDB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SCHEMA INDEX          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@id[(OPTS)]                       #Primary key constraint on one FIELD
                                  #Only one per MODEL
                                  #Required for each MODEL
                                  #  - alternative: one @[@]unique, if required and not MongoDB
                                  #For any database
                                  #MongoDB:
                                  #  - required
                                  #  - must use @map("_id")
                                  #  - if ObjectId, must use:
                                  #     - String|Bytes @db.ObjectId
                                  #     - optional: @default(auto())
                                  #Cannot be on optional FIELD
OPTS.map|length|clustered         #Like @@index
OPTS.sort                         #Like @@index
                                  #Only with SQL server

@@id(OPTS)                        #Like @id, but on multiple FIELDs
                                  #Not with MongoDB
OPTS.sort|map|length|clustered    #Like @id
OPTS.fields|name                  #Like @@index

@unique[(OPTS)]                   #Unique constraint on one FIELD
                                  #For any database
                                  #nulls are distinct
OPTS.sort|map|length|clustered    #Like @@index

@@unique(OPTS[.fields])           #Like @unique, but on multiple FIELDs
                                  #With MongoDB: index must be created manually
OPTS.sort|map|length|clustered    #Like @unique
OPTS.fields|name                  #Like @@index

@@fulltext(OPTS.fields)           #Text search index
                                  #Only with MySQL, MongoDB
                                  #Requires PREVIEW fullTextIndex

@@index(OPTS[.fields])            #Database index
OPTS.fields                       #ARR of FIELD_VARR[(OPTS)]
                                  #None must not be optional
OPTS.name                         #Dynamic 'FIELD' created with combination of all fields, i.e. can be queried
                                  #Def: 'FIELD_FIELD2_...'
OPTS.sort                         #ENUM. Asc (def) or Desc
OPTS.map                          #Database 'INDEX' name
                                  #Database INDEX can already exist
                                  #Def:
                                  #  - if database INDEX already exist: re-use its name
                                  #  - @[@]id: "TABLE_pkey"
                                  #  - @[@]unique: "TABLE_FIELD..._unique"
                                  #  - @[@]index: "TABLE_FIELD..._index"
                                  #  - @relation: "TABLE_FIELD..._fkey"
                                  #Not with MySQL, MongoDB
OPTS.type                         #ENUM. ACCESS_METHOD
                                  #Can be BTree (def), Gist, Gin, SpGist, Brin, Hash
                                  #Only with Postgres
OPTS.ops                          #ENUM. OPCLASS
                                  #Can be raw("OPCLASS") if value not available in ENUM
                                  #Only with Postgres
OPTS.length                       #NUM. Only with MySQL
OPTS.clustered                    #BOOL. Only with SQL server


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SCHEMA RELATIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@relation(OPTS)                   #Foreign key source|destination constraint on FIELDs
                                  #MODEL FTYPE, i.e. must be on populated FIELD, with key being a separate one
                                  #Cannot use @unique (but can use @@unique) nor @default
                                  #On any database
OPTS.name                         #"RELATION"
                                  #Used as database TABLE name, if n-n relationship
OPTS.map                          #Like @@index
OPTS.fields                       #FIELD_VARR_ARR of source
OPTS.references                   #FIELD_VARR_ARR of destination
OPTS.onUpdate|onDelete            #ENUM among NoAction (def) or Cascade
                                  #Like SQL `references ... on update|delete ACTION`

datasource.relationMode           #ENUM. Whether @relation:
                                  #  - "foreignKeys":
                                  #     - creates a database foreign key
                                  #     - default with most databases
                                  #     - usually recommended
                                  #  - "prisma":
                                  #     - emulates foreign key at the ORM layer
                                  #     - default with "mongodb"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           GENERATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


schema generate                   #Call all GENERATOR_PROVIDERs
--watch                           #Call on SCHEMA file change

GENERATOR_PROVIDER                #Module generating code base on SCHEMA. Can be:
                                  #  - "prisma-client-js": Node.js client
                                  #  - "MODULE|PATH": third-party

generator GENERATOR {
  VAR = VAL
  ...
}                                 #GENERATORs used by `schema generate`, in SCHEMA

generator.provider
schema generate --generator       #"GENERATOR_PROVIDER"

generator.output                  #"PATH". Def: "./node_modules/.prisma/client"

QUERY ENGINE ==>                  #Rust library performing database queries
generator.engineType              #ENUM. Whether query engine should be:
                                  #  - "library":
                                  #     - embedded in library, as a Node.js addon
                                  #     - takes more space, which is an issue inside serverless functions
                                  #  - "binary"
                                  #     - separate executable file, as a HTTP server
                                  #     - slower due to IPC
schema generate --no-engine       #When using neither Data Proxy nor Accelerate (default)
                                  #With "prisma-client-js" only
generator.binaryTargets           #STR_ARR. OS|CPU to compile all engines to, i.e. where CLI and client will run
                                  #Can be:
                                  #  - "native" (def): current
                                  #  - "debian-openssl-X.Y.x": Debian|Ubuntu|Mint|ArchLinux
                                  #  - "rhel-openssl-X.Y.x": Fedora|CentOS
                                  #  - "linux-musl[-arm64][-openssl-3.0.x]": Alpine >=|< 3.17, x86|ARM64
                                  #  - "linux-arm64-openssl-X.Y.x": other Linux ARM64, glibc
                                  #  - "darwin[-arm64]"
                                  #  - "windows"

generator.previewFeatures         #STR_ARR. Beta opt-in PREVIEW features


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLIENT MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@prisma/client                    #Node.js client

new PrismaClient([POPTS])         #CLIENT

CLIENT.MODEL                      #CMODEL
                                  #MODEL is lowercase'd
                                  #Fully typed according to SCHEMA, except nested|populated models
