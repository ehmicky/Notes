
            
   SUPABASE  
            



TODO:
  - stopped Auth at https://supabase.com/docs/guides/auth/auth-mfa

VERSION ==>                       #31-03-2023

UI ==>                            #Unless specified, most features can be done in UI
                                  #Called "dashboard" or "studio"

PROJECT                           #Main namespace

PROJECT_ID                        #PROJECT-specific ID
                                  #Also called "reference ID"
PROJECT_DOMAIN                    #https://PROJECT_ID.supabase.co

CLOUD PROVIDER ==>                #AWS. Can pick REGION

DATABASE ==>                      #Postgres 15.1
                                  #Automatically managed
                                  #One per PROJECT

DATABASE_URL                      #db.PROJECT_DOMAIN:5432
DATABASE_NAME                     #'postgres'
DATABASE_USER                     #'postgres'
DATABASE_PASSWORD                 #User-specified
                                  #Can be reset
SSL CONNECTION ==>                #Encrypts query in-transit.
                                  #sslmode=verify-full psql parameter
                                  #Must download SSL certificate, and pass it to sslrootcert psql parameter

SCHEMAS ==>                       #Uses 'public' by default
                                  #Any other SCHEMA not shown by REST|GraphQL|realtime API

PGBOUNCER ==>                     #Is used to pool connections
                                  #Runs on same credentials|URL, but port 6543
                                  #Meant for connections opened|closed often, e.g. in serverless functions
POOL MODE ==>                     #Of pgBouncer. Whether one connection per session, transaction, or statement
                                  #Lower has better performance, but disables some PG features

PG EXTENSIONS ==>                 #
                                  #Uses PG private SCHEMA 'extensions'

UUID-OSSP ==>                     #Extension enabled by default, which adds 'uuid' type
PG_HASHIDS ==>                    #Extension transforming serial INT into short, unique, non-serial STR
id_encode(INT)->STR               #SQL FUNC

PG_STAT_STATEMENTS ==>            #Extension enabled by default, which adds pg_stat_statements VIEW for all queries (query, time, number of rows, I/O).

PG_CRON ==>                       #Extension to run cron jobs
cron.schedule
 ('NAME', 'WHEN', 'SQL')          #
cron.unschedule('NAME')           #

PG_JSONSCHEMA ==>                 #Extension to validate JSON schema
json_matches_schema
 (SCHEMA_JSON, OBJ_JSON[B])->BOOL #SQL FUNC

PG_SAFEUPDATE ==>                 #Extension enabled by default
                                  #Makes SQL UPDATE|DELETE fail without a WHERE clause

PGSODIUM ==>                      #Uses libsodium (crypto library) from SQL
                                  #Extension enabled by default
PGCRYPO ==>                       #Extension enabled by default, to add crypto-related SQL FUNCs

TIMESCALE ==>                     #Extension to add time-series

WRAPPERS ==>                      #Extension that allow accessing some common REST APIs from SQL
                                  #Supports:
                                  #  - BigQuery, Stripe: read/write
                                  #  - Firebase, S3: read-only

PL LANGUAGES ==>                  #Can use:
                                  #  - PGSQL:
                                  #     - enabled by default
                                  #     - can use PG extension plpgsql_check, which is a linter
                                  #  - PLV8 (JavaScript)
                                  #  - PLJava

SUPABASE VAULT ==>                #PG extension to encrypt and store secrets

SQL QUERIES ==>                   #

SQL FUNCTIONS ==>                 #Must be managed through SQL
POST REST_DOMAIN/rpc/FUNC         #Call SQL FUNC
CLIENT.rpc('FUNC')->RES           #

PG TRIGGERS ==>                   #

WEBHOOKS ==>                      #Call either:
                                  #  - HTTP[S] request
                                  #     - GET|POST
                                  #  - EDGE_FUNC
                                  #Payload OBJ:
                                  #  - type 'INSERT|UPDATE|DELETE'
                                  #  - schema 'SCHEMA'
                                  #  - table 'TABLE'
                                  #  - record VAL_ARR|null
                                  #  - old_record VAL_ARR|null
                                  #Based on PG triggers
                                  #  - triggered on INSERT|UPDATE|DELETE
                                  #  - of a given TABLE
                                  #Uses PG extension "pg_net"
                                  #Uses PG private SCHEMA 'net'

PG BACKUPS ==>                    #Either cron or PITR

FULL TEXT SEARCH ==>              #

DATA MIGRATIONS ==>               #

Content-Type:
 application/json [C|S]           #

AUTH ==>                          #Many auth methods
                                  #Uses PG private SCHEMA 'auth'
                                  #Uses library "gotrue" (fork of Netlify Gotrue)

PUBLIC_API_KEY                    #For unprivileged requests
PRIVATE_API_KEY                   #For privileged requests
API_KEY                           #PUBLIC|PRIVATE_API_KEY
                                  #Both are JWTs OBJ:
                                  #  - role 'anon|service_role'
                                  #  - iat DATE_NUM: creation time
                                  #  - exp DATE_NUM: expiration time (in 10 years)
apikey: API_KEY [C]
Authorization: Bearer API_KEY [C] #Must specify both
?apikey=API_KEY                   #Alternative

ACCESS_TOKEN                      #JWT used to authenticate as a PUBLIC_API_KEY

ROLE                              #PG ROLE. One of:
                                  #  - 'anon': with PUBLIC_API_KEY, before authentication
                                  #  - 'authenticated': with PUBLIC_API_KEY, after authentication
                                  #  - 'service_role': with PRIVATE_API_KEY

AUTH_SETTINGS                     #Auth must be configured from the UI:
                                  #  - enabling
                                  #     - only one enabled by default: email
                                  #  - options

AUTH                              #CLIENT.auth

AUTH_DOMAIN                       #'PROJECT_DOMAIN/auth/v1'

supabase login                    #Login with ACCESS_KEY

POST AUTH_DOMAIN/signup           #Signup with email.
AUTH.signUp(OBJ)->RES             #Request payload OBJ:
                                  #  - email|password STR
                                  #  - options OBJ:
                                  #     - data OBJ: USER.data
                                  #     - captchaToken STR
                                  #        - must set hCaptcha secret key in UI first
                                  #        - then get the captchaToken using a React component
                                  #RES: user USER
POST AUTH_DOMAIN/token
 ?grant_type=password             #Login with email+password
AUTH.signInWithPassword(OBJ)->RES #Request payload OBJ: email|password STR
POST AUTH_DOMAIN/magiclink        #Login with email + one-time password sent by mail
AUTH.signInWithOtp(OBJ)->RES      #Request payload OBJ: email STR
POST AUTH_DOMAIN/recover          #Like signInWithOtp() but resets password.
AUTH.resetPasswordForEmail        #I.e. should redirect user to new password page.
 ('EMAIL')->RES                   #Request payload OBJ: email STR
POST AUTH_DOMAIN/invite           #Send one-time password by email
AUTH.api.inviteUserByEmail        #Must be privileged
 ('EMAIL')->RES                   #Request payload OBJ: email STR
EMAIL CONFIRMATION ==>            #By default, send email confirmation on signup
EMAIL CHANGE CONFIRMATION ==>     #By default, send emails to both addresses on email change
EMAIL CONFIRMATION TIMEOUT ==>    #Def: 1 day
MIN PASSWORD LENGTH ==>           #Def: 6
EMAIL TEMPLATES ==>               #For each of the above

POST AUTH_DOMAIN/signup           #Signup with phone number.
AUTH.signUp(OBJ)->RES             #Request payload OBJ: phone|password STR
POST AUTH_DOMAIN/otp              #Login with SMS sent.
AUTH.signInWithOtp(OBJ)->RES      #Request payload OBJ: phone STR
POST AUTH_DOMAIN/verify           #Verify SMS sent.
AUTH.verifyOtp(OBJ)->RES          #Request payload OBJ:
                                  #  - phone STR
                                  #  - token STR
                                  #  - type 'sms'
                                  #RES: session OBJ:
                                  #  - access_token 'API_KEY'
                                  #  - token_type 'bearer'
                                  #  - expires_in NUM
                                  #  - refresh_token STR
PROVIDER ==>                      #One of: Twilio, Messagebird, Textloca, Vonage
API KEY|TOKEN[S] ==>              #
SENDER FIELD ==>                  #
SMS RATE LIMIT ==>                #Def: 30/h
SMS PASSWORD TIMEOUT ==>          #Def: 1m
SMS PASSWORD LENGTH ==>           #Def: 6
SMS TEMPLATE ==>                  #Def: 'Your code is {{ .Code }}'

AUTH.signInWithOAuth(OPTS)->RES   #Signup|login with OAuth. OPTS:
                                  #  - provider STR among:
                                  #     - Google, Azure
                                  #     - Facebook, Apple, Twitter, LinkedIn
                                  #     - GitHub, Gitlab, Bitbucket
                                  #     - Notion, Slack, Discord, Zoom
                                  #     - Spotify, Twitch
                                  #     - Keycloak, WorkOS
                                  #  - options OBJ:
                                  #     - queryParams OBJ
                                  #     - scopes STR
                                  #  - redirectTo 'REDIRECT_URL'
CLIENT ID ==>                     #Public API key. Sometimes called differently, e.g. "API key"
CLIENT SECRET ==>                 #Private API key. Sometimes called differently, e.g. "secret key"
URL ==>                           #Not for all providers
OAUTH_DOMAIN/callback             #Done after login. Redirects to REDIRECT_URL
REDIRECT_URL                      #Def:
                                  #  - Site URL:
                                  #     - production domain
                                  #     - specified in UI
                                  #  - Redirect URLs:
                                  #     - additional URLs for development, e.g. http://localhost:3000/**
                                  #     - specified in UI
                                  #     - can use **

SAML ==>                          #Can be used too

POST AUTH_DOMAIN/logout
AUTH.signOut()->RES               #

DISABLE SIGNUPS ==>               #Can be one in UI

GET AUTH_DOMAIN/user
AUTH.getUser()->RES               #Retrieve RES.user USER
PUT AUTH_DOMAIN/user              #Update USER.
AUTH.updateUser(USER)->RES        #Request payload: USER
USER.email                        #STR
USER.password                     #STR
USER.data                         #OBJ custom metadata

auth.uid()->STR                   #SQL FUNC returning USER.id

auth.users                        #TABLE with USERs
USER.id                           #'UUID'
USER.role                         #'ROLE'
USER.email                        #'EMAIL'
USER.encrypted_password           #STR
USER.phone                        #STR

SESSION                           #Auth session specific OBJ
AUTH.getSession()->PROMISE_SESSION#
AUTH.setSession(SESSION)          #
AUTH.onAuthStateChange
 (FUNC(SESSION))->OBJ             #OBJ: data: subscription: unsubscribe()

JWT ==>                           #Used by API_KEY
                                  #Uses PG extension PGJWT
JWT_SECRET                        #To decode JWT tokens
sign('JWT', JWT_SECRET[, 'ALGO']) #
 ->'HASH'                         #Def ALGO: 'HS256'
verify
 ('HASH', JWT_SECRET[, 'ALGO'])
 ->OBJ                            #OBJ: header JWT, payload JWT, valid BOOL
JWT TIMEOUT ==>                   #Def: 1h

PG POLICY ==>                     #Row-level security
                                  #Does not apply to "service_level" ROLE

API DOCS ==>                      #Automatically generated

DATABASE REST API ==>             #Automatic REST CRUD endpoints
                                  #Uses library postgREST

REST_DOMAIN                       #'PROJECT_DOMAIN/rest/v1'

CLIENT.from('TABLE')->CLIENT      #

GET REST_DOMAIN/TABLE[?FILTERS]   #SQL select.
CLIENT....->RES                   #Returns OBJ_ARR

POST REST_DOMAIN/TABLE            #SQL insert.
                                  #With request payload OBJ[_ARR]
CLIENT.insert(OBJ_ARR[, OPTS])
 ->RES                            #Same
Prefer:
 resolution=merge-duplicates [C]
OPTS.upsert true                  #Upserts

PATCH REST_DOMAIN/TABLE[?FILTERS] #SQL update.
                                  #With request payload OBJ
CLIENT.update(OBJ)->CLIENT        #
Prefer: return=minimal [C]        #Only return updated rows

DELETE REST_DOMAIN/TABLE[?FILTERS]#SQL delete.
CLIENT.delete()->CLIENT           #

FILTERS ==>                       #
?select=VARR,...                  #Only include VARR
                                  #VARR is VAR0(VAR1(...),...)
                                  #Can be '*'
                                  #Whitespaces ignored, including newlines
CLIENT.select('VARR,...')->CLIENT #

Range: NUM-NUM2 [C]
CLIENT.range(NUM, NUM2)->CLIENT   #Only include from item NUM to NUM2

?VAR=eq.VAL
CLIENT.eq('COL', VAL)->CLIENT     #=
CLIENT.neq('COL', VAL)->CLIENT    #<>
CLIENT.is('COL', null)->CLIENT    #is null
CLIENT.gt[e]('COL', VAL)->CLIENT  #> >=
CLIENT.lt[e]('COL', VAL)->CLIENT  #< <=
CLIENT.[i]like('COL', STR)->CLIENT#[i]like
CLIENT.in('COL', ARR)->CLIENT     #in
CLIENT.cs('COL', ARR)->CLIENT     #@>
CLIENT.cd('COL', ARR)->CLIENT     #<@

DATABASE GRAPHQL ==>              #Automatic GraphQL CRUD endpoints
                                  #Includes introspection
                                  #Uses PG private SCHEMA 'graphql[_public]'
                                  #Uses PG extension "pg_graphql"
                                  #The extension uses itself postgREST, i.e. similar features as REST API
graphql.resolve('QUERY')          #SQL FUNC, returning JSON_OBJ
GRAPHIQL ==>                      #Available in API docs

GRAPHQL_DOMAIN                    #'PROJECT_DOMAIN/graphql/v1'
query                             #Automatically populates foreign keys
query.TABLECollection.edges       #OBJ_ARR:
                                  #  - node OBJ: row

REALTIME ==>                      #Repository "supabase/realtime"

CHANNEL                           #Namespace for events
EVENT_TYPE                        #'broadcast|postgres_changes|presence'
EVENT                             #Sub-type of EVENT_TYPE
PAYLOAD                           #Event payload VAL

CLIENT.channel('CHANNEL')->CHANNEL#
CHANNEL.on('EVENT_TYPE',          #Add listener
 OPTS, FUNC(PAYLOAD))->CHANNEL    #OPTS:
                                  #  - event '*|EVENT'
                                  #  - any other EVENT_TYPE-specific
CHANNEL.subscribe([FUNC(STR)])    #Start listening
                                  #FUNC() called when done
                                  #STR: 'SUBSCRIBED'
CHANNEL.send(OBJ)->PROMISE        #Send event. OBJ:
                                  #  - type 'EVENT_TYPE'
                                  #  - event 'EVENT'
                                  #  - payload PAYLOAD

EVENT_TYPE 'broadcast'            #Custom EVENT|PAYLOAD
COPTS.config.broadcast.ack        #BOOL (def: false). Make CHANNEL.send() PROMISE wait on first listener to receive
COPTS.config.broadcast.self       #BOOL (def: false). Whether to receive own events.

EVENT_TYPE 'postgres_changes'     #Database row change
                                  #Must:
                                  #  - have a `messages` TABLE with a specific format (see online doc)
                                  #  - have a PG publication 'supabase_realtime' looking for `messages` inserts
                                  #  - this is automatically done from the UI, in PG private SCHEMA 'realtime'
                                  #EVENT: 'INSERT|UPDATE|DELETE|TRUNCATE'
                                  #OPTS:
                                  #  - schema 'SCHEMA'
                                  #  - table 'TABLE' (def: all)
                                  #  - filter STR: like API query parameter
                                  #PAYLOAD:
                                  #  - new row OBJ
                                  #  - old row OBJ
                                  #     - only if TABLE `replica identity` is `full`, in SQL
                                  #Current ROLE must have access to the TABLE listened to, unless it is in "public" SCHEMA

EVENT_TYPE 'presence'             #CLIENT-specific VAL, sync automatically with all other CLIENTs
                                  #Several CLIENTs can have same VAL
                                  #  - by using same 'ID'
                                  #  - resolved using CRDT
                                  #EVENT:
                                  #  - 'sync': change
                                  #  - 'join': add
                                  #     - PAYLOAD OBJ: newPresences PRESENCE_STATE
                                  #  - 'leave': delete
                                  #     - PAYLOAD OBJ: leftPresences PRESENCE_STATE
COPTS.config.presence.key         #CLIENT-specific 'ID'
                                  #Def: random UUID
PRESENCE_STATE                    #OBJ, with keys being 'ID' and values being each CLIENT-specific VAL
CHANNEL.track(VAL)->PROMISE_STR   #Mark VAL as the value to sync for current CLIENT
                                  #STR is 'ok'
CHANNEL.untrack()->PROMISE_STR    #Undo
CHANNEL.presenceState()
 ->PRESENCE_STATE                 #

COPTS.realtime.params
 .eventsPerSecond                 #NUM (def: 10). Rate limit

WEBSOCKET BROADCASTING ==>        #

STATE SYNCING ==>                 #

FILE STORAGE ==>                  #
                                  #Not included in backups
                                  #Uses PG private SCHEMA 'storage'
                                  #Repository "supabase/storage-api"

CDN ==>                           #

IMAGE TRANSFORMATION ==>          #

statement_timeout                 #Def: 8s if authenticated, 3s if none
                                  #Max: 2m
                                  #Can be changed

EDGE FUNCTION ==>                 #Built on Deno Subhosting
                                  #Uses PG private SCHEMA 'supabase_functions'
                                  #Compared to SQL FUNC:
                                  #  - pros:
                                  #     - low-latency
                                  #     - JavaScript
                                  #  - con: slower compute
                                  #No access to filesystem
                                  #Content-Type [S] cannot be text/html

CLIENT.functions                  #FUNCTIONS

EDGE_FUNC                         #Edge function's name. Convention: hyphenated
./functions/EDGE_FUNC/index.ts    #Main file
./functions/_NOT_EDGE_FUNC        #Helpers
supabase functions new EDGE_FUNC  #Initializes ./functions/EDGE_FUNC/index.ts

supabase functions
 deploy EDGE_FUNC                 #
--no-verify-jwt                   #Unless specified, EDGE_FUNC requests must be authenticated with an API_KEY
--import-map FILE                 #Deno import maps
                                  #Def: ./functions/import_map.json

FUNC_DOMAIN                       #https://PROJECT_ID.functions.supabase.co
FUNC_DOMAIN/EDGE_FUNC             #Call EDGE_FUNC. Any HTTP method
FUNCTIONS.invoke                  #OPTS:
 ('EDGE_FUNC'[, OPTS])->RES       #  - body OBJ
                                  #RES: response as is

METRICS ==>                       #In UI: duration, number of invocations
MONITORING ==>                    #In UI: each request/response
LOGS ==>                          #In UI: stdout|stderr

./functions/.env                  #ENVVARs
supabase function serve
 --env-file FILE                  #

SECRETS ==>                       #Environment variables set for a given PROJECT
supabase secrets list             #Values only show checksums
supabase secrets set ENVVAR=VAL   #
supabase secrets set
 --env-file FILE
supabase secrets unset ENVVAR     #

ENVVAR SUPABASE_URL               #Current domain (from Kong)
ENVVAR SUPABASE_DB_URL            #Postgres connection URL
ENVVAR SUPABASE_ANON_KEY          #PUBLIC_API_KEY
ENVVAR SUPABASE_SERVICE_ROLE_KEY  #PRIVATE_API_KEY

ENVVAR HOSTNAME                   #STR
ENVVAR JWT_SECRET                 #STR
ENVVAR VERIFY_JWT_SECRET          #'true|false'

KONG ==>                          #Is used as the API gateway for all API calls

MANAGEMENT API ==>                #
                                  #Repository "supabase/postgres-meta"

JAVASCRIPT CLIENT ==>             #
@supabase/supabase-js             #

RES                               #PROMISE_OBJ:
                                  #  - error
                                  #  - anything else

createClient('PROJECT_DOMAIN',
 API_KEY[, COPTS])                #CLIENT

supabase gen types typescript     #Generates TypeScript types of database, to stdout
                                  #OBJ:
                                  #  - Database:
                                  #     - public:
                                  #        - Tables:
                                  #           - TABLE OBJ
                                  #        - Views OBJ
                                  #        - Functions:
                                  #           - FUNC:
                                  #              - Args OBJ
                                  #              - Returns VAL
                                  #        - Enums OBJ
                                  #        - CompositeTypes OBJ
--project-id PROJECT_ID           #
--schema SCHEMA                   #

createClient<Database>(...)       #Use Database TypeScript type

CLI CLIENT ==>                    #
                                  #Version 1.8.1

./supabase/seed.sql               #???
./supabase/migrations/            #???

CONFIG                            #CLI configuration
                                  #At ./subabase/config.toml
supabase init                     #Creates default CONFIG, seed.sql and migations/

supabase link
 --project-ref PROJECT_ID         #Set PROJECT_ID

supabase start                    #Run Supabase locally:
                                  #  - API: http://localhost:54321
                                  #  - UI: http://localhost:54323
                                  #  - Postgres database: postgresql://postgres:postgres@localhost:54322/postgres
                                  #  - Storage: http://localhost:54324
                                  #  - PUBLIC|PRIVATE_API_KEY
                                  #Uses Docker containers hosted on AWS ECR
supabase status                   #Prints local URLs and API_KEYs
supabase functions serve          #Run EDGE_FUNCs locally
                                  #FUNC_DOMAIN is http://localhost:54321/functions/v1
                                  #Print stdout|stderr logs
                                  #Hot reloading

OTHER CLIENTS ==>                 #Python, Ruby, Go, Swift, C#, Kotlin, Godot engine

supabase test db                  #Run PGTAP pg_prove on all supabase/tests/**/*.sql
                                  #PGTAP can also be added as PG extension
