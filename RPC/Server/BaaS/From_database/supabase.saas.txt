
            
   SUPABASE  
            



TODO:
  - MFA: https://supabase.com/docs/guides/auth/auth-mfa
  - management API
  - JavaScript client
  - CLI
  - Storage API: https://supabase.github.io/storage-api/#/
  - other APIS: https://supabase.com/docs/guides/self-hosting

VERSION ==>                       #04-04-2023

BREAKING FEATURES ==>             #New Supabase breaking features, or new Postgres versions
                                  #Can:
                                  #  - pause then restart PROJECT (free only)
                                  #  - manually backup PROJECT, then create a new one, restoring backup

PRICING ==>                       #Free: 0$, Pro: 25$/month per PROJECT, Enterprise: custom
                                  #Can set a spend cap
PAUSING ==>                       #Automatically done in free after 1 week inactivity


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORG ==>                           #Sets of USERs and PROJECTs
USER ==>                          #Supabase direct users, not end-USERs
                                  #Can have permissions:
                                  #  - billing only (read/write)
                                  #  - readonly: project read, PUBLIC_API_KEY read, database read, AUTH read, EDGE_FUNC read, logs, reports
                                  #  - developer: also API_KEYs, database write, STORAGE, AUTH write, READ_FUNC write
                                  #  - administrator: also user permissions, billing write, PROJECTs write
                                  #  - owner: also ORG, billing email address
                                  #Unless Enterprise, only: owner, developer

PROJECT                           #Main namespace for a given project
                                  #Max: 2 (free), unlim (pro)
PROJECT_ID                        #PROJECT-specific ID
                                  #Also called "reference ID"

CLOUD PROVIDER ==>                #AWS. Can pick REGION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           DATABASE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATABASE ==>                      #Postgres 15.1
                                  #Automatically managed
                                  #  - auto-vacuum
                                  #One per PROJECT
DATABASE SIZE ==>                 #40|60MB taken by Supabase utilities
                                  #Pricing: max 500MB (free), 8GB then 1$/8GB, up to 1PB (pro)
                                  #Autoscaling:
                                  #  - when reaching 90% of size
                                  #  - adds 50% more
                                  #  - max once per 6h
DATABASE EGRESS ==>               #2GB/month (free), 50GB/month then 1$/10GB (pro)

RDS INSTANCE TYPES ==>            #Per PROJECT
                                  #Max I/O is for 30m per day
                                  #
                                  #Pricing per month ($):   0    5   50  100  200  400  950 1860  2790  3720
                                  #Memory (GB):             1    2    4    8   16   32   64  128   192   256
                                  #Max I/O (Mbps):       2606 2606 2606 4750 4750 4750 4750 9500 14250 19000
                                  #Mean I/O (Mbps):        87  174  347  630 1188 2375 4750 9500 14250 19000
                                  #Max direct connections: 10   30   50  100  200  350  420  450   480   500
                                  #Max pooled connections: 50   75  150  300  600 1200 2800 5600  8600 11600
                                  #vCPUs:                   2    2    2    2    4    8   16   32    48    64
                                  #vCPUs shared:          yes  yes  yes   no   no   no   no   no    no    no
                                  #
                                  #Can see memory, I/O, vCPU, network usage in UI

MAX ROWS PER QUERY ==>            #Def: 1e3, max: 1e6
statement_timeout                 #Def: 8s if authenticated, 3s if none
                                  #Max: 2m
                                  #Can be changed

EXPOSED SCHEMAS ==>               #Available to public APIs
                                  #Def: public, graphql_public, storage


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CONNECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATABASE_URL                      #db.PROJECT_DOMAIN:5432
DATABASE_NAME                     #'postgres'
DATABASE_USER                     #'postgres'
DATABASE_PASSWORD                 #User-specified
                                  #Can be reset

SSL CONNECTION ==>                #Encrypts query in-transit.
                                  #sslmode=verify-full psql parameter
                                  #Must download SSL certificate, and pass it to sslrootcert psql parameter
SSL_ENFORCEMENT                   #Require SSL connection with database connections
supabase ssl-enforcement get      #
supabase ssl-enforcement update   #
---enable-db-ssl-enforcement      #
---disable-db-ssl-enforcement     #

NETWORK_RESTRICTIONS              #IP restrictions for PGBouncer and Postgres database
                                  #Not for Rest|GraphQL, Storage, Realtime APIs
                                  #Does not work if an EDGE_FUNC needs to connect to the database
                                  #Def: none

supabase network-restrictions
 update
--db-allow-cird ID[/MASK]         #Add NETWORK_RESTRICTIONS
                                  #Can be 0.0.0.0/0 to remove any

supabase network-restrictions get #Get NETWORK_RESTRICTIONS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BACKUPS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DAILY BACKUPS ==>                 #pg_dumpall, once per day, last 7 days (pro only)

PITR BACKUPS ==>                  #Per-second backup
                                  #Uses WAL replication, with WAL-G tool
                                  #Threshold: either specific WAL file size, or 2 mins
                                  #Keeps 7 days by default (can set it)
                                  #  - 100$ per 7d
                                  #Cannot be used together with daily backups


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MIGRATIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATA MIGRATIONS ==>               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DATABASE LOGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


postgres_logs                     #SQL TABLE with logs for SQL statements
                                  #Require enabling pgAudit PG Extension
                                  #  - can also configure it
POSTGRES_LOGS.id                  #'UUID'
POSTGRES_LOGS.timestamp           #TIMESTAMPTZ
POSTGRES_LOGS.event_message       #STR
POSTGRES_LOGS.metadata            #METADATA
METADATA.host                     #'db-PROJECT_ID'
METADATA.parsed                   #PARSED
PARSED.user_name                  #STR
PARSED.error_severity             #STR among 'LOG|ERROR|FATAL|PANIC'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PGBOUNCER           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PGBOUNCER ==>                     #Is used to pool connections
                                  #Runs on same credentials|URL, but port 6543
                                  #Meant for connections opened|closed often, e.g. in serverless functions
POOL MODE ==>                     #Of pgBouncer. Whether one connection per session, transaction, or statement
                                  #Lower has better performance, but disables some PG features

pgbouncer_logs                    #SQL TABLE with logs for PGBouncer
PGBOUNCER_LOGS.id                 #'UUID'
PGBOUNCER_LOGS.timestamp          #TIMESTAMPTZ
PGBOUNCER_LOGS.event_message      #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PG EXTENSIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PG EXTENSIONS ==>                 #Uses PG private SCHEMA 'extensions'

PG_STAT_STATEMENTS ==>            #Extension enabled by default, which adds pg_stat_statements VIEW for all queries (query, time, number of rows, I/O).
                                  #Also shown in UI "Reports > Query performance"

UUID-OSSP ==>                     #Extension enabled by default, which adds 'uuid' type

PG_HASHIDS ==>                    #Extension transforming serial INT into short, unique, non-serial STR
id_encode(INT)->STR               #SQL FUNC

PG_CRON ==>                       #Extension to run cron jobs
cron.schedule
 ('NAME', 'WHEN', 'SQL')          #
cron.unschedule('NAME')           #

PG_JSONSCHEMA ==>                 #Extension to validate JSON schema
json_matches_schema
 (SCHEMA_JSON, OBJ_JSON[B])->BOOL #SQL FUNC

PG_SAFEUPDATE ==>                 #Extension enabled by default
                                  #Makes SQL UPDATE|DELETE fail without a WHERE clause

PGSODIUM ==>                      #Uses libsodium (crypto library) from SQL
                                  #Extension enabled by default
PGCRYPO ==>                       #Extension enabled by default, to add crypto-related SQL FUNCs

TIMESCALE ==>                     #Extension to add time-series

SUPABASE VAULT ==>                #PG extension to encrypt and store secrets

WRAPPERS ==>                      #Extension that allow accessing some common REST APIs from SQL
                                  #Supports:
                                  #  - BigQuery, Stripe: read/write
                                  #  - Firebase, S3: read-only

PL LANGUAGES ==>                  #Can use:
                                  #  - PGSQL:
                                  #     - enabled by default
                                  #     - can use PG extension plpgsql_check, which is a linter
                                  #  - PLV8 (JavaScript)
                                  #  - PLJava


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DATABASE TESTING        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


supabase test db                  #Run PGTAP pg_prove on all supabase/tests/**/*.sql
                                  #PGTAP can also be added as PG extension


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WEBHOOKS ==>                      #Call either:
                                  #  - HTTP[S] request
                                  #     - GET|POST
                                  #  - EDGE_FUNC
                                  #Payload OBJ:
                                  #  - type 'INSERT|UPDATE|DELETE'
                                  #  - schema 'SCHEMA'
                                  #  - table 'TABLE'
                                  #  - record VAL_ARR|null
                                  #  - old_record VAL_ARR|null
                                  #Based on PG triggers
                                  #  - triggered on INSERT|UPDATE|DELETE
                                  #  - of a given TABLE
                                  #Uses PG extension "pg_net"
                                  #Uses PG private SCHEMA 'net'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JWT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JWT_OBJ                           #Session token, once logged in
                                  #Uses PG extension PGJWT
JWT_OBJ.role                      #'anon|authenticated|service_role'
JWT_OBJ.sub                       #'UUID' of USER
JWT_OBJ.name                      #'NAME' of USER
JWT_OBJ.iat                       #DATE_NUM. Creation time
JWT_OBJ.exp                       #DATE_NUM. Expiration time (in 10 years)
JWT_OBJ.*                         #Any custom data

JWT_SECRET                        #To decode JWT_OBJ
TOKEN                             #Encoded JWT_OBJ

sign
 (JWT_OBJ, JWT_SECRET[, 'ALGO'])
 ->'TOKEN'                        #Def ALGO: 'HS256'
verify                            #OBJ:
 ('TOKEN', JWT_SECRET[, 'ALGO'])  #  - header:
 ->OBJ                            #     - alg 'ALGO'
                                  #  - payload JWT_OBJ
                                  #  - valid BOOL

auth.jwt()->JWT_OBJ               #SQL FUNC

sb-access-token                   #Cookie for the access TOKEN
sb-refresh-token                  #Cookie for the refresh TOKEN

JWT EXPIRATION ==>                #Def: 1h, max: 7d
REFRESH TOKENS ==>                #To extend expiration
                                  #At most 10 (can be set) to avoid stolen token from having too much impact


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            API KEY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUBLIC_API_KEY                    #TOKEN for unprivileged anonymous requests
ACCESS_TOKEN                      #TOKEN for unprivileged authenticated requests
                                  #Created either:
                                  #  - through login endpoints
                                  #  - through UI, for CLI login, etc.
PRIVATE_API_KEY                   #TOKEN for privileged requests

API_KEY                           #Any TOKEN used for AUTH
apikey: API_KEY [C]
Authorization: Bearer API_KEY [C] #Must specify both
?apikey=API_KEY                   #Alternative

ROLE                              #PG ROLE. One of:
                                  #  - 'anon': with PUBLIC_API_KEY
                                  #  - 'authenticated': with ACCESS_TOKEN
                                  #  - 'service_role': with PRIVATE_API_KEY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTH ==>                          #Max USERs: 5e4 (free), 1e5 then 1$ per 300 USERs (pro)
                                  #Uses PG private SCHEMA 'auth'
                                  #Uses library "gotrue" (fork of Netlify Gotrue)

AUTH_PROVIDERS ==>                #Configured from the UI
                                  #  - enabling
                                  #     - only one enabled by default: email
                                  #  - options

DISABLE SIGNUPS ==>               #Can be done in UI

https://app.supabase.com/         #SSO sign-in page for: Google, Azure, Okta, SAML
 sign-in-sos                      #See online doc for how to setup
                                  #Enterprise only

CLIENT.auth                       #AUTH

AUTH_DOMAIN                       #'PROJECT_DOMAIN/auth/v1'

supabase login                    #Login with ACCESS_TOKEN

POST AUTH_DOMAIN/logout
AUTH.signOut()->RES               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             EMAIL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST AUTH_DOMAIN/signup           #Signup with email.
AUTH.signUp(OBJ)->RES             #Request payload OBJ:
                                  #  - email|password STR
                                  #  - options OBJ:
                                  #     - data OBJ: USER.data
                                  #     - captchaToken STR
                                  #        - must set hCaptcha secret key in UI first
                                  #        - then get the captchaToken using a React component
                                  #RES: user USER

POST AUTH_DOMAIN/token
 ?grant_type=password             #Login with email+password
AUTH.signInWithPassword(OBJ)->RES #Request payload OBJ: email|password STR

POST AUTH_DOMAIN/magiclink        #Login with email + one-time password sent by mail
AUTH.signInWithOtp(OBJ)->RES      #Request payload OBJ: email STR

POST AUTH_DOMAIN/recover          #Like signInWithOtp() but resets password.
AUTH.resetPasswordForEmail        #I.e. should redirect user to new password page.
 ('EMAIL')->RES                   #Request payload OBJ: email STR

POST AUTH_DOMAIN/invite           #Send one-time password by email
AUTH.api.inviteUserByEmail        #Must be privileged
 ('EMAIL')->RES                   #Request payload OBJ: email STR

EMAIL CONFIRMATION ==>            #By default, send email confirmation on signup
EMAIL CHANGE CONFIRMATION ==>     #By default, send emails to both addresses on email change

EMAIL CONFIRMATION TIMEOUT ==>    #Def: 1 day
MIN PASSWORD LENGTH ==>           #Def: 6

EMAIL TEMPLATES ==>               #For each of the above
                                  #If free, contains Supabase branding

EMAIL SERVER ==>                  #Can use private SMTP server
                                  #Otherwise max: 30/h (free), 100/h (pro)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SMS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROVIDER ==>                      #One of: Twilio, Messagebird, Textloca, Vonage
                                  #Usually configure:
                                  #  - API key|token[s]
                                  #  - sender field

POST AUTH_DOMAIN/signup           #Signup with phone number.
AUTH.signUp(OBJ)->RES             #Request payload OBJ: phone|password STR

POST AUTH_DOMAIN/otp              #Login with SMS sent.
AUTH.signInWithOtp(OBJ)->RES      #Request payload OBJ: phone STR
                                  #Max 30 per hour (can be set)

POST AUTH_DOMAIN/verify           #Verify SMS sent.
AUTH.verifyOtp(OBJ)->RES          #Request payload OBJ:
                                  #  - phone STR
                                  #  - token STR
                                  #  - type 'sms'
                                  #RES: session OBJ:
                                  #  - access_token 'API_KEY'
                                  #  - token_type 'bearer'
                                  #  - expires_in NUM
                                  #  - refresh_token STR

SMS RATE LIMIT ==>                #Def: 30/h
SMS PASSWORD TIMEOUT ==>          #Def: 1m
SMS PASSWORD LENGTH ==>           #Def: 6

SMS TEMPLATE ==>                  #Def: 'Your code is {{ .Code }}'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OAUTH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTH.signInWithOAuth(OPTS)->RES   #Signup|login with OAuth. OPTS:
                                  #  - provider STR among:
                                  #     - Google, Azure
                                  #     - Facebook, Apple, Twitter, LinkedIn
                                  #     - GitHub, Gitlab, Bitbucket
                                  #     - Notion, Slack, Discord, Zoom
                                  #     - Spotify, Twitch
                                  #     - Keycloak, WorkOS
                                  #  - options OBJ:
                                  #     - queryParams OBJ
                                  #     - scopes STR
                                  #  - redirectTo 'REDIRECT_URL'

CLIENT ID ==>                     #Public API key. Sometimes called differently, e.g. "API key"
CLIENT SECRET ==>                 #Private API key. Sometimes called differently, e.g. "secret key"
URL ==>                           #Not for all providers

OAUTH_DOMAIN/callback             #Done after login. Redirects to REDIRECT_URL
REDIRECT_URL                      #Def:
                                  #  - Site URL:
                                  #     - production domain
                                  #     - specified in UI
                                  #  - Redirect URLs:
                                  #     - additional URLs for development, e.g. http://localhost:3000/**
                                  #     - specified in UI
                                  #     - can use **

SAML ==>                          #Can be used too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET AUTH_DOMAIN/user
AUTH.getUser()->RES               #Retrieve RES.user USER

PUT AUTH_DOMAIN/user              #Update USER.
AUTH.updateUser(USER)->RES        #Request payload: USER

USER                              #USER JavaScript OBJ
USER.email                        #STR
USER.password                     #STR
USER.data                         #OBJ custom metadata

auth.users                        #TABLE with USERs
USER.id                           #'UUID'
auth.uid()->'UUID'                #SQL FUNC returning USER.id
USER.role                         #'ROLE'
USER.email                        #'EMAIL'
USER.encrypted_password           #STR
USER.phone                        #STR

SESSION                           #Auth session specific OBJ
AUTH.getSession()->PROMISE_SESSION#
AUTH.setSession(SESSION)          #
AUTH.onAuthStateChange
 (FUNC(SESSION))->OBJ             #OBJ: data: subscription: unsubscribe()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PG POLICY ==>                     #Row-level security
                                  #Does not apply to "service_level" ROLE
                                  #Applies to STORAGE too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           AUTH LOGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


auth_logs                         #SQL TABLE with logs for AUTH
AUTH_LOGS.id                      #'UUID'
AUTH_LOGS.timestamp               #TIMESTAMPTZ
AUTH_LOGS.event_message           #STR
AUTH_LOGS.metadata                #METADATA


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            AUTH UI            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTH UI ==>                       #React component for all AUTH features

FRONTEND HELPERS ==>              #For Next.js, Remix, SvelteKit


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           POSTGREST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT_DOMAIN/rest/v1/...        #Proxies to postgREST routes (see its doc)
                                  #Uses Cloudflare + Kong
                                  #Can use HTTP/3
Content-Encoding: br [S]          #
Strict-Transport-Security:
 max-age=2592000;
 includeSubDomains [S]            #

PROJECT_DOMAIN/rest/v1/           #/ route, i.e. OpenAPI as JSON
                                  #OpenAPI as HTML also available when logged in the UI
PROJECT_DOMAIN/rest/v1/TABLE      #/TABLE route, i.e. REST CRUD
PROJECT_DOMAIN/rest/v1/rpc/FUNC   #/rpc/FUNC route, i.e. SQL FUNC

CLIENT.*                          #@supabase/supabase-js forwards calls to @supabase/postgrest-js
COPTS.global.headers              #Forwards to POPTS.headers
COPTS.global.fetch                #Forwards to POPTS.fetch
COPTS.db.schema                   #Forwards to POPTS.schema

ROLES ==>                         #Uses:
                                  #  - user ROLE: 'authenticated'
                                  #  - anonymous ROLE: 'anon'
                                  #  - authenticator ROLE: 'service_role'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GRAPHQL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DATABASE GRAPHQL ==>              #Automatic GraphQL CRUD endpoints
                                  #Includes introspection
                                  #Uses PG private SCHEMA 'graphql[_public]'
                                  #Uses PG extension "pg_graphql"
                                  #The extension uses itself postgREST, i.e. similar features as REST API

graphql.resolve('QUERY')->JSON_OBJ#SQL FUNC

GRAPHIQL ==>                      #Available in API docs

GRAPHQL_DOMAIN                    #'PROJECT_DOMAIN/graphql/v1'

query                             #Automatically populates foreign keys
query.TABLECollection.edges       #OBJ_ARR:
                                  #  - node OBJ: row


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        EDGE FUNCTIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EDGE FUNCTION ==>                 #Built on Deno Subhosting
                                  #Uses PG private SCHEMA 'supabase_functions'
                                  #Compared to SQL FUNC:
                                  #  - pros:
                                  #     - low-latency
                                  #     - JavaScript
                                  #  - con: slower compute
                                  #No access to filesystem
                                  #Content-Type [S] cannot be text/html
                                  #Max requests per month: 5e5 (free), 2e6 then 1$ per 5e5 (pro)
                                  #Max size per EDGE_FUNC: 2MB (free), 10MB (pro)
                                  #Max count: 10 (free), 100 then 1$ per 10 (pro)

CLIENT.functions                  #FUNCTIONS

EDGE_FUNC                         #Edge function's name. Convention: hyphenated

./functions/EDGE_FUNC/index.ts    #Main file
./functions/_NOT_EDGE_FUNC        #Helpers
supabase functions new EDGE_FUNC  #Initializes ./functions/EDGE_FUNC/index.ts

supabase functions
 deploy EDGE_FUNC                 #
--no-verify-jwt                   #Unless specified, EDGE_FUNC requests must be authenticated with an API_KEY
--import-map FILE                 #Deno import maps
                                  #Def: ./functions/import_map.json

FUNC_DOMAIN                       #https://PROJECT_ID.functions.supabase.co
FUNC_DOMAIN/EDGE_FUNC             #Call EDGE_FUNC. Any HTTP method
FUNCTIONS.invoke                  #OPTS:
 ('EDGE_FUNC'[, OPTS])->RES       #  - body OBJ
                                  #RES: response as is

./functions/.env                  #ENVVARs
supabase function serve
 --env-file FILE                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      EDGE FUNCTIONS LOGS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


function_edge_logs                #SQL TABLE with logs for Edge FUNCs network
FUNCTION_EDGE_LOGS.id             #'UUID'
FUNCTION_EDGE_LOGS.timestamp      #TIMESTAMPTZ
FUNCTION_EDGE_LOGS.event_message  #STR

function_logs                     #SQL TABLE with logs for Edge FUNCs stdout|stderr
FUNCTION_LOGS.id                  #'UUID'
FUNCTION_LOGS.timestamp           #TIMESTAMPTZ
FUNCTION_LOGS.event_message       #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SECRETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SECRETS ==>                       #Environment variables set for a given PROJECT
supabase secrets list             #Values only show checksums
supabase secrets set ENVVAR=VAL   #
supabase secrets set
 --env-file FILE
supabase secrets unset ENVVAR     #

ENVVAR SUPABASE_URL               #Current domain (from Kong)
ENVVAR SUPABASE_DB_URL            #Postgres connection URL
ENVVAR SUPABASE_ANON_KEY          #PUBLIC_API_KEY
ENVVAR SUPABASE_SERVICE_ROLE_KEY  #PRIVATE_API_KEY

ENVVAR HOSTNAME                   #STR
ENVVAR JWT_SECRET                 #STR
ENVVAR VERIFY_JWT_SECRET          #'true|false'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REALTIME            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REALTIME ==>                      #Repository "supabase/realtime"

CHANNEL                           #Namespace for events
                                  #Max CHANNELs: 500 for all CLIENTs, 100 per CLIENT
                                  #Number of CLIENTs (with >=1 CHANNEL): 200 (free), 500 then .01$ per CLIENT (pro)
EVENT_TYPE                        #'broadcast|postgres_changes|presence'
EVENT                             #Sub-type of EVENT_TYPE

PAYLOAD                           #Event payload OBJ
                                  #Properties must be BOOL|NUM|STR|null|undefined
                                  #Max size: 250KB (free), 3MB (pro)
                                  #Max count: 2e6/month (free), 5e6 then 1$ per 4e5 (pro)

COPTS.realtime.params             #NUM (def: 10, max: 1000). Rate limit.
 .eventsPerSecond                 #10 times lower for EVENT_TYPE 'presence'

COPTS.realtime.headers|params     #API_KEY. Def: current one
 .apikey                          #To change, must set on both headers|params


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CHANNEL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLIENT.channel('CHANNEL')->CHANNEL#Max 500 per sec, for all CLIENTs

CHANNEL.on('EVENT_TYPE',          #Add listener
 OPTS, FUNC(PAYLOAD))->CHANNEL    #OPTS:
                                  #  - event '*|EVENT'
                                  #  - any other EVENT_TYPE-specific

CHANNEL.subscribe([FUNC(STR)])    #Start listening
                                  #FUNC() called when done
                                  #STR: 'SUBSCRIBED'

CHANNEL.send(OBJ)->PROMISE        #Send event. OBJ:
                                  #  - type 'EVENT_TYPE'
                                  #  - event 'EVENT'
                                  #  - payload PAYLOAD


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BROADCAST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_TYPE 'broadcast'            #Custom EVENT|PAYLOAD

COPTS.config.broadcast.ack        #BOOL (def: false). Make CHANNEL.send() PROMISE wait on first listener to receive

COPTS.config.broadcast.self       #BOOL (def: false). Whether to receive own events.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POSTGRES CHANGES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_TYPE 'postgres_changes'     #Database row change
                                  #Must:
                                  #  - have a `messages` TABLE with a specific format (see online doc)
                                  #  - have a PG publication 'supabase_realtime' looking for `messages` inserts
                                  #  - this is automatically done from the UI, in PG private SCHEMA 'realtime'
                                  #EVENT: 'INSERT|UPDATE|DELETE|TRUNCATE'
                                  #OPTS:
                                  #  - schema 'SCHEMA'
                                  #  - table 'TABLE' (def: all)
                                  #  - filter STR: like API query parameter
                                  #PAYLOAD:
                                  #  - new row OBJ
                                  #  - old row OBJ
                                  #     - only if TABLE `replica identity` is `full`, in SQL
                                  #Current ROLE must have access to the TABLE listened to, unless it is in "public" SCHEMA


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PRESENCE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EVENT_TYPE 'presence'             #CLIENT-specific VAL, sync automatically with all other CLIENTs
                                  #Several CLIENTs can have same VAL
                                  #  - by using same 'ID'
                                  #  - resolved using CRDT
                                  #EVENT:
                                  #  - 'sync': change
                                  #  - 'join': add
                                  #     - PAYLOAD OBJ: newPresences PRESENCE_STATE
                                  #  - 'leave': delete
                                  #     - PAYLOAD OBJ: leftPresences PRESENCE_STATE

COPTS.config.presence.key         #CLIENT-specific 'ID'
                                  #Def: random UUID
PRESENCE_STATE                    #OBJ, with keys being 'ID' and values being each CLIENT-specific VAL

CHANNEL.track(VAL)->PROMISE_STR   #Mark VAL as the value to sync for current CLIENT
                                  #STR is 'ok|error'
CHANNEL.untrack()->PROMISE_STR    #Undo

CHANNEL.presenceState()
 ->PRESENCE_STATE                 #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REALTIME LOGS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


realtime_logs                     #SQL TABLE wiht logs for Realtime
REALTIME_LOGS.id                  #'UUID'
REALTIME_LOGS.timestamp           #TIMESTAMPTZ
REALTIME_LOGS.event_message       #STR

COPTS.realtime.log_level          #Set to 'info' to log joins|leaves of CLIENTs|CHANNELs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STORAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STORAGE ==>                       #For big files
                                  #Uses PG private SCHEMA 'storage'
                                  #Not included in backups
                                  #  - see online doc for how to manually backup|restore, by using API calls on SCHEMA 'storage'
                                  #Max size: 1GB (free), 100GB then 1$/50GB (pro)
                                  #Max egress: 2GB (free), 200GB then 1$/100GB (pro)
                                  #Repository "supabase/storage-api"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BUCKETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUCKET                            #Main directory
SQL_BUCKET                        #Row in storage.buckets TABLE
SQL_BUCKET.id|name                #'NAME'
SQL_BUCKET.created|updated_at     #TIMESTAMPTZ
SQL_BUCKET.public                 #BOOL (def: true)
                                  #If false, can still download, but not create URL
SQL_BUCKET.avif_autodetection     #BOOL (def: false)
SQL_BUCKET.file_size_limit        #BIGINT (def: null)
SQL_BUCKET.allowed_mime_types     #STR_ARR (def: null)

FOLDER                            #Sub-directory
                                  #Actually just prefix in OBJECT's name
FNAME                             #'[FOLDER/]NAME'

OBJECT                            #Single file
OBJECT_CONTENT                    #BLOB|FILE|FORMDATA|ARRBUFFER
                                  #Max size: 50MB (free), 5GB (pro)
SQL_OBJECT                        #Row in storage.objects TABLE
SQL_OBJECT.id                     #'UUID'
SQL_OBJECT.bucket_id              #SQL_BUCKET.id
SQL_OBJECT.name                   #'FNAME'
storage.filename('FNAME')         #SQL FUNC to return 'NAME.EXT'
storage.extension('FNAME')        #SQL FUNC to return 'EXT'
SQL_OBJECT.path_tokens            #[...FOLDER, 'NAME']
storage.foldername('FNAME')       #SQL FUNC to return [...FOLDER]
SQL_OBJECT.created|updated_at     #TIMESTAMPTZ
SQL_OBJECT.last_accessed_at       #TIMESTAMPTZ
SQL_OBJECT.metadata               #JSONB of OBJ:
                                  #  - size NUM
                                  #  - contentLength NUM
                                  #  - eTag STR
                                  #  - mimetype 'MIME'
                                  #  - cacheControl STR: HTTP Cache-Control [S]
                                  #  - lastModified 'DATE'
                                  #  - httpStatusCode NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STORAGE API          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STORAGE_DOMAIN                    #'PROJECT_DOMAIN/storage/v1'
CLIENT.storage                    #STORAGE

STORAGE.from('BUCKET')->STORAGE   #

STORAGE.upload                    #Add an OBJECT
 ('FNAME', OBJECT_CONTENT[, OPTS])#OPTS:
 ->RES                            #  - cacheControl STR
                                  #     - def: 'max-age=3600'
                                  #     - can use query params for cache busting
                                  #  - contentType STR (def: 'text/plain;charset=UTF-8' for ARRBUFFER, guessed otherwise)
                                  #  - upsert BOOL (def: false)
STORAGE.update
 ('FNAME', OBJECT_CONTENT[, OPTS])#Replace an OBJECT
 ->RES                            #Same OPTS as upload()

STORAGE.download('FNAME'[, OPTS]) #Get an OBJECT
 ->RES                            #OPTS:
                                  #  - transform TRANSFORM

STORAGE.getPublicUrl              #Returns 'STORAGE_DOMAIN/object/public/BUCKET/FNAME', to get an OBJECT
 ('FNAME'[, OPTS])->RES           #Only if BUCKET is public
                                  #OPTS:
                                  #  - download BOOL|'FILENAME' (def: false): set HTTP headers to make it download
                                  #  - transform TRANSFORM
STORAGE.createSignedUrl           #Same for a private BUCKET.
 ('FNAME', NUM[, OPTS])->RES      #Includes a temporary private key.
                                  #  - included in cache key, i.e. poorer caching
                                  #NUM is expiration in secs
STORAGE.createSignedUrls
 ('FNAME'_ARR, NUM[, OPTS])->RES  #Same for multiple URLs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        IMAGE TRANSFORM        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRANSFORM                         #Transform image response
                                  #For PNG|JPEG|WebP|AVIF|GIF|ICO|SVG|HEIC|BMP|TIFF
                                  #Max 25MB
                                  #Max 50 megapixels
                                  #Max 100/month then 1$ per 200 transforms
                                  #Pro only
TRANSFORM.height|width            #1-2500
TRANSFORM.resize                  #'cover|contain|fill'
TRANSFORM.format                  #Unless set to 'origin', automatically convert to a better format,
                                  #e.g. to WebP if client supports it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CDN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CDN ==>                           #Cloudflare
SMART CDN CACHING ==>             #Automatically re-cache changed OBJECT on CDN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STORAGE LOGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


storage_logs                      #SQL TABLE wiht logs for Storage
STORAGE_LOGS.id                   #'UUID'
STORAGE_LOGS.timestamp            #TIMESTAMPTZ
STORAGE_LOGS.event_message        #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


*_logs                            #Accessible only through UI
                                  #Uses Logflare
                                  #Retention: 1d (free), 7f (pro)
REPORTS ==>                       #Charts built on top of *_logs. Mostly:
                                  #  - CPU, I/O, memory usage
                                  #  - network igress|egress, requests count for: Database, Auth, Storage, Realtime
                                  #  - users count for Auth
                                  #  - TRANSFORM
CUSTOMER_DOMAIN                   #PROJECT_DOMAIN/customers/v1
GET CUSTOMER_DOMAIN               #To integrate with Prometeus, for better charts
 /privileged/metrics              #Must be privileged
                                  #Pro only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             APIS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


APIS ==>                          #All of: Management, REST, GraphQL, Realtime, Auth, Storage, Edge Functions

KONG ==>                          #Is used as the API gateway for all API calls

Content-Type:
 application/json [C|S]           #

API USAGE ==>                     #Can see in Reports UI, for REST, GraphQL, Auth, Storage, Realtime
                                  #Can filter by request (method, path, query params, User-Agent [C], X-Client-Info [C])
                                  #and response (status code)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           APIS LOGS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


edge_logs                         #SQL TABLE with logs for REST, GraphQL, Auth, Storage, Realtime
EDGE_LOGS.id                      #'UUID'
EDGE_LOGS.timestamp               #TIMESTAMPTZ
EDGE_LOGS.event_message           #'METHOD | STATUS_NUM | IP | ID | URL | USER-AGENT'
EDGE_LOGS.metadata                #METADATA
METADATA.request                  #REQ
REQ.url                           #'URL'
REQ.protocol                      #'http[s]:'
REQ.method                        #STR, e.g. 'GET'
REQ.host                          #'DOMAIN'
REQ.port                          #NUM
EDGE_LOGS|REQ.path                #'/PATH'
REQ.search                        #'?...'
REQ.headers                       #OBJ
REQ.cf                            #CF
CF.country                        #STR, e.g. 'FR'
METADATA.response                 #RESP
RESP.status_code                  #NUM
RESP.origin_time                  #NUM. Duration
RESP.headers                      #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            DOMAIN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROJECT_DOMAIN                    #https://PROJECT_ID.supabase.co

CUSTOM_DOMAIN                     #Custom PROJECT_DOMAIN
                                  #Old PROJECT_DOMAIN does not work anymore
                                  #Pro only
supabase domains create           #Start CUSTOM_DOMAIN
                                  #Outputs TXT records to setup on DNS registrar
--custom-hostname DOMAIN          #

supabase domains reverify         #Finish CUSTOM_DOMAIN, once TXT records setup

supabase domains activate         #Activate CUSTOM_DOMAIN

supabase domains delete           #Delete CUSTOM_DOMAIN

SUBDOMAIN                         #Custom PROJECT_DOMAIN, but only changing PROJECT_ID
                                  #Old PROJECT_DOMAIN still works
                                  #Does not work with:
                                  #  - CUSTOM_DOMAIN
                                  #  - EDGE_FUNCs
                                  #Pro only
supabase vanity-subdomains
 check-availability
--desired-subdomain SUBDOMAIN     #Check not used by another customer

supabase vanity-subdomains
 activate
--desired-subdomain SUBDOMAIN     #Use SUBDOMAIN

supabase vanity-subdomains delete #Delete SUBDOMAIN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        MANAGEMENT API         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MANAGEMENT API ==>                #Repository "supabase/postgres-meta"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          JAVASCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JAVASCRIPT CLIENT ==>             #
@supabase/supabase-js             #

RES                               #PROMISE_OBJ:
                                  #  - error
                                  #  - anything else

createClient('PROJECT_DOMAIN',
 API_KEY[, COPTS])                #CLIENT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPESCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


supabase gen types typescript     #Generates TypeScript types of database, to stdout
                                  #OBJ:
                                  #  - Database:
                                  #     - public:
                                  #        - Tables:
                                  #           - TABLE OBJ
                                  #        - Views OBJ
                                  #        - Functions:
                                  #           - FUNC:
                                  #              - Args OBJ
                                  #              - Returns VAL
                                  #        - Enums OBJ
                                  #        - CompositeTypes OBJ
--project-id PROJECT_ID           #
--schema SCHEMA                   #

createClient<Database>(...)       #Use Database TypeScript type


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLI CLIENT ==>                    #Version 1.8.1

supabase ...
--experimental                    #Must be used with: supabase domains|vanity-subdomains|network-restrictions|ssl-enforcement
--project-ref PROJECT_ID          #

./supabase/seed.sql               #???
./supabase/migrations/            #???

CONFIG                            #CLI configuration
                                  #At ./subabase/config.toml
supabase init                     #Creates default CONFIG, seed.sql and migations/

supabase link
 --project-ref PROJECT_ID         #Set --project-ref default value

supabase start                    #Run Supabase locally:
                                  #  - API: http://localhost:54321
                                  #  - UI: http://localhost:54323
                                  #  - Postgres database: postgresql://postgres:postgres@localhost:54322/postgres
                                  #  - Storage: http://localhost:54324
                                  #  - PUBLIC|PRIVATE_API_KEY
                                  #Uses Docker containers hosted on AWS ECR
supabase status                   #Prints local URLs and API_KEYs
supabase functions serve          #Run EDGE_FUNCs locally
                                  #FUNC_DOMAIN is http://localhost:54321/functions/v1
                                  #Print stdout|stderr logs
                                  #Hot reloading


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UI ==>                            #Unless specified, most features can be done in UI
                                  #Called "dashboard" or "studio"

OTHER CLIENTS ==>                 #Python, Ruby, Go, Swift, C#, Kotlin, Godot engine

FRAMEWORK ADAPTERS ==>            #React, Vue, Nuxt

SUPPORT ==>                       #Pro only

SELF-HOSTING ==>                  #Can be done. See online doc

MARKETPLACE ==>                   #List of integrations
                                  #Many come up with guides only, not actual integrations


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WORK IDEA           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Inspiration:
  - Postgres extensions
  - Firebase extensions
  - Netlify plugins
  - GitHub actions

Why:
  - integrations: let Supabase users work with tools they already use
  - partnerships: visibility|traffic from related dev tooling companies

How:
  - integrations:
     - easy: 1-click install + optional parameters
     - dev-friendly:
        - can be managed as REST API, or config file
        - metadata in a Postgres table
     - maintainable: offload work to:
        - open source community
        - other dev tooling companies
  - partnerships:
     - visibility|traffic: we maintain another dev tooling company's integration

Integrations split:
  - Supabase Stack:
     - For: Integrations authors
     - Set of Supabase Resources
  - Marketplace:
     - For: Integrations consumers

Stack:
  - Provisioned through Pulumi
     - using a Provider package for Supabase
     - use file:// BACKEND
        - storing state either in database or in S3
        - using either passphrase or KMS secrets manager
  - Use a simpler declarative format, abstracting Pulumi complexity
  - pros:
     - easy to author: know Supabase -> know integration
     - monetize by increasing underlying usage (like many "free" AWS services)
     - dogfooding: point at missing capabilities
  - cons:
     - careful for canibalization, e.g. plugins allowing users to bypass Supabase built-in paid features like Auth

Stack examples:
  - OpenAI completion endpoint
     - Edge Function
  - Algolia search
     - Postgres trigger or Webhook syncing a Postgres table with Algolia
  - Custom webhook destination:
     - Edge Function forwarding to another service
     - E.g. to SES or other email provider
  - Custom metrics endpoint
     - Scheduled Edge Function forwarding|transforming main metrics endpoint
     - E.g. to CloudWatch
  - Custom auth provider

How to build following features through integrations???
  - Marketplace guides
  - offline syncing from mobile
  - Vercel
  - Netlify
  - existing Firebase extensions

Marketplace:
  - unify multiple integration types:
     - types:
        - Stacks
        - auth provider
        - hCaptcha
        - webhooks types: HTTP, Edge Function
        - Prometeus
        - PG extensions
        - "wrappers"
        - UI components
           - cannot install nor configure, only docs
     - reasons:
        - simpler DX
        - higher quantity of integrations
  - shared features:
     - enable|disable
     - options configuration|validation
     - versioning
     - branding
     - descriptions, documentation, changelog
     - "green check" / reviewing / featuring specific items
     - authorization / scopes / roles
     - pricing ("up to 10 integrations")
     - integration authoring documentation and guidelines
  - also allow community to add more of existing integration types: authentication providers, etc.
