
            
   SUPABASE  
            



VERSION ==>                       #31-03-2023

UI ==>                            #Unless specified, most features can be done in UI
                                  #Called "dashboard" or "studio"

PROJECT                           #Main namespace

REFERENCE_ID                      #PROJECT-specific ID
PROJECT_DOMAIN                    #https://REFERENCE_ID.supabase.co

CLOUD PROVIDER ==>                #AWS. Can pick REGION

DATABASE ==>                      #Postgres 15.1
                                  #Automatically managed
                                  #One per PROJECT

DATABASE_URL                      #db.PROJECT_DOMAIN:5432
DATABASE_NAME                     #'postgres'
DATABASE_USER                     #'postgres'
DATABASE_PASSWORD                 #User-specified
                                  #Can be reset
SSL CONNECTION ==>                #Encrypts query in-transit.
                                  #sslmode=verify-full psql parameter
                                  #Must download SSL certificate, and pass it to sslrootcert psql parameter

SCHEMAS ==>                       #Uses 'public' by default
                                  #Private SCHEMAs not shown by REST|GraphQL|realtime API

PGBOUNCER ==>                     #Is used to pool connections
                                  #Runs on same credentials|URL, but port 6543
                                  #Meant for connections opened|closed often, e.g. in serverless functions
POOL MODE ==>                     #Of pgBouncer. Whether one connection per session, transaction, or statement
                                  #Lower has better performance, but disables some PG features

PG EXTENSIONS ==>                 #
                                  #Uses PG private SCHEMA 'extensions'

UUID-OSSP ==>                     #Extension enabled by default, which adds 'uuid' type
PG_HASHIDS ==>                    #Extension transforming serial INT into short, unique, non-serial STR
id_encode(INT)->STR               #SQL FUNC

PG_STAT_STATEMENTS ==>            #Extension enabled by default, which adds pg_stat_statements VIEW for all queries (query, time, number of rows, I/O).

PG_CRON ==>                       #Extension to run cron jobs
cron.schedule
 ('NAME', 'WHEN', 'SQL')          #
cron.unschedule('NAME')           #

PG_JSONSCHEMA ==>                 #Extension to validate JSON schema
json_matches_schema
 (SCHEMA_JSON, OBJ_JSON[B])->BOOL #SQL FUNC

PG_SAFEUPDATE ==>                 #Extension enabled by default
                                  #Makes SQL UPDATE|DELETE fail without a WHERE clause

PGSODIUM ==>                      #Uses libsodium (crypto library) from SQL
                                  #Extension enabled by default
PGCRYPO ==>                       #Extension enabled by default, to add crypto-related SQL FUNCs

TIMESCALE ==>                     #Extension to add time-series

WRAPPERS ==>                      #Extension that allow accessing some common REST APIs from SQL
                                  #Supports:
                                  #  - BigQuery, Stripe: read/write
                                  #  - Firebase, S3: read-only

PL LANGUAGES ==>                  #Can use:
                                  #  - PGSQL:
                                  #     - enabled by default
                                  #     - can use PG extension plpgsql_check, which is a linter
                                  #  - PLV8 (JavaScript)
                                  #  - PLJava

SUPABASE VAULT ==>                #PG extension to encrypt and store secrets

SQL QUERIES ==>                   #

PG TRIGGERS ==>                   #

WEBHOOKS ==>                      #Call either:
                                  #  - HTTP[S] request
                                  #     - GET|POST
                                  #  - EDGE_FUNC
                                  #Payload OBJ:
                                  #  - type 'INSERT|UPDATE|DELETE'
                                  #  - schema 'SCHEMA'
                                  #  - table 'TABLE'
                                  #  - record VAL_ARR|null
                                  #  - old_record VAL_ARR|null
                                  #Based on PG triggers
                                  #  - triggered on INSERT|UPDATE|DELETE
                                  #  - of a given TABLE
                                  #Uses PG extension "pg_net"
                                  #Uses PG private SCHEMA 'net'

PG BACKUPS ==>                    #Either cron or PITR

FULL TEXT SEARCH ==>              #

DATA MIGRATIONS ==>               #

AUTH ==>                          #Many auth methods:
                                  #  - password + email
                                  #  - "magic links": one-time password + email
                                  #  - OAuth: Apple, GitHub, Slack
                                  #  - SMS
                                  #Uses PG private SCHEMA 'auth'
                                  #Uses library "gotrue" (fork of Netlify Gotrue)
PG ROLE "authenticated"           #Once authenticated, PG ROLE "anon" becomes "authenticated"

JWT ==>                           #
                                  #Uses PG extension PGJWT
JWT_SECRET                        #To decode JWT tokens
sign('JWT', JWT_SECRET[, 'ALGO']) #
 ->'HASH'                         #Def ALGO: 'HS256'
verify
 ('HASH', JWT_SECRET[, 'ALGO'])
 ->OBJ                            #OBJ: header JWT, payload JWT, valid BOOL

PG POLICY ==>                     #Row-level security
                                  #Does not apply to "service_level" ROLE

DATABASE REST API ==>             #Automatic REST CRUD endpoints
                                  #Uses library postgREST

REST_DOMAIN                       #'PROJECT_DOMAIN/rest/v1'
PUBLIC_API_KEY                    #For unprivileged|"anonymous" requests
                                  #Corresponds to PG ROLE "anon"
PRIVATE_API_KEY                   #For privileged requests
                                  #Also called "service role key"
                                  #Corresponds to PG ROLE "service_role"
API_KEY                           #PUBLIC|PRIVATE_API_KEY
                                  #Both are JWTs OBJ:
                                  #  - role 'anon|service_role'
                                  #  - iat DATE_NUM: creation time
                                  #  - exp DATE_NUM: expiration time (in 10 years)
apikey: API_KEY [C]
Authorization: Bearer API_KEY [C] #Must specify both
?apikey=API_KEY                   #Alternative

GET REST_DOMAIN/TABLE             #Returns OBJ_ARR
?select=VARR,...                  #Only include VARR
                                  #VARR is VAR0(VAR1(...),...)

DATABASE GRAPHQL ==>              #Automatic GraphQL CRUD endpoints
                                  #Includes introspection
                                  #Uses PG private SCHEMA 'graphql[_public]'
                                  #Uses PG extension "pg_graphql"
                                  #The extension uses itself postgREST, i.e. similar features as REST API
graphql.resolve('QUERY')          #SQL FUNC, returning JSON_OBJ

GRAPHQL_DOMAIN                    #'PROJECT_DOMAIN/graphql/v1'
query                             #Automatically populates foreign keys
query.TABLECollection.edges       #OBJ_ARR:
                                  #  - node OBJ: row

REALTIME ==>                      #Uses PG publication 'supabase_realtime' in PG private SCHEMA 'realtime'
                                  #Repository "supabase/realtime"
CLIENT.on('EVENT', FUNC(OBJ))     #EVENT can be 'INSERT|UPDATE|DELETE|TRUNCATE'
CLIENT.subscribe()                #

WEBSOCKET BROADCASTING ==>        #

STATE SYNCING ==>                 #

FILE STORAGE ==>                  #
                                  #Not included in backups
                                  #Uses PG private SCHEMA 'storage'
                                  #Repository "supabase/storage-api"

CDN ==>                           #

IMAGE TRANSFORMATION ==>          #

statement_timeout                 #Def: 8s if authenticated, 3s if none
                                  #Max: 2m
                                  #Can be changed

DENO EDGE FUNCTION ==>            #
                                  #Uses PG private SCHEMA 'supabase_functions'

KONG ==>                          #Is used as the API gateway for all API calls

MANAGEMENT API ==>                #
                                  #Repository "supabase/postgres-meta"

JAVASCRIPT CLIENT ==>             #

CLI CLIENT ==>                    #

supabase test db                  #Run PGTAP pg_prove on all supabase/tests/**/*.sql
                                  #PGTAP can also be added as PG extension
