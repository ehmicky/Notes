
                    
   DENO_FILE_SERVER  
                    



ALTERNATIVES ==>                  #See serve_static

VERSION ==>                       #Part of Deno

std/http/file_server.ts
serveFile(REQ, 'PATH'[, OPTS])  NR#Read regular file at 'PATH' and set its contents as RES
 ->>RES                           #Contents is streamed directly from file, i.e. does not use memory
                                  #Set:
                                  #  - Date: FILE_ATIME [S] (use current time if no atime)
                                  #  - Content-Type: MIME [S], based on PATH '.EXT'
                                  #  - Content-Length [S]
                                  #  - Server: deno [S]
                                  #Handles 404
                                  #Does conditional caching
                                  #  - 403 with If-None-Match [C] or If-Modified-Since [C] (but not Cache-Control [C])
                                  #  - Last-Modified: FILE_MTIME [S]
                                  #  - Etag: {SIZE_HEX}-{MTIME_HASH_BASE64} [S] (see deno_etag doc)
                                  #  (if no mtime but Deno deploy)
                                  #  - Etag: W/DEPLOYMENT_ID_HASH [S], based on ENVVAR DENO_DEPLOYMENT_ID
                                  #Handles range request:
                                  #  - Range[C], Accept-Range [S], Content-Range [S], 206, 416
                                  #  - does not support multiple ranges per request, nor If-Range [C]
                                  #  - only streams the part of the file being requested, i.e. fast and low-memory
OPTS.fileInfo                     #FILE_INFO from Deno.stat() (def: automatically done)
OPTS.etagAlgorithm                #'ALGO' used for the etag (see deno_etag doc) (def: 'SHA-256')

serveDir(REQ[, OPTS])->>        NR#Call serveFile() based on REQ path
                                  #Send 500 response on errors
OPTS.urlRoot                      #STR (def: none) stripped from REQ path to get 'PATH' to fetch
OPTS.fsRoot                       #'DIR' (def: '.') used to resolve local 'PATH' to read

OPTS.showIndex                    #BOOL (def: true). When requesting DIR, serve DIR/index.html if it exists (through 301 redirect)
OPTS.showDirListing               #BOOL (def: false). Serve an automatic DIR/index.html if it does not exist
                                  #Shows: link, filename, file size, permission mode
OPTS.showDotfiles                 #BOOL. If false (def), do not show 'PATH' starting with dot with OPTS.showDirListing true

OPTS.enableCors                   #BOOL (def: false). Set:
                                  #  - Access-Control-Allow-Origin: * [S]
                                  #  - Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Range [S]
OPTS.headers                      #'VAR:VAL'_ARR headers to add to response
                                  #E.g. Cache-Control [S]

OPTS.etagAlgorithm                #Like serveFile()
OPTS.quiet                        #BOOL. If false (def):
                                  #  - console.debug() requests: '[DATE] [METHOD] [PATH] STATUS'
                                  #  - console.error() exceptions

file_server [DIR]               NR#Binary for serveDir()
--host=HOSTNAME                   #Def: 0.0.0.0
--port|-p=NUM                     #Def: 4507
--cert|-c=PATH                    #
--key|-k=PATH                     #
--no-dir-listing                  #
--no-dotfiles                     #
--no-cors                         #
--header|-H=VAR:VAL               #
--verbose|-v                      #
