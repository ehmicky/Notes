
                    
   DENO_FILE_SERVER  
                    



VERSION ==>                       #Part of Deno

std/http/file_server.ts
serveFile(REQ, 'PATH'[, OPTS])  NR#Read regular file at 'PATH' and set its contents as RES
 ->>RES                           #Set:
                                  #  - Date: FILE_ATIME [S] (if no OPTS.fileInfo, use current time)
                                  #  - Content-Type: MIME [S], based on PATH '.EXT'
                                  #  - Server: deno [S]
                                  #Automatically does:
                                  #  - conditional caching
                                  #     - 403 with If-None-Match [C] or If-Modified-Since [C] (but not Cache-Control [C])
                                  #     (OPTS.fileInfo)
                                  #     - Last-Modified: FILE_MTIME [S]
                                  #     - Etag: {SIZE_HEX}-{MTIME_HASH_BASE64} [S] (see deno_etag doc)
                                  #     (no OPTS.fileInfo but Deno deploy)
                                  #     - Etag: W/DEPLOYMENT_ID_HASH [S], based on ENVVAR DENO_DEPLOYMENT_ID
                                  #  - range request:
                                  #     - Accept-Range: bytes [S]
                                  #  - 404
OPTS.fileInfo                     #FILE_INFO from Deno.stat()
OPTS.etagAlgorithm                #'ALGO' used for the etag (see deno_etag doc)

serveDir(REQ[, OPTS])->>        NR#
OPTS.fsRoot                       #'DIR' (def: '.') used to resolve local 'PATH' to read
OPTS.urlRoot                      #STR (def: none) stripped from REQ path to get 'PATH' to fetch
OPTS.showDotfiles                 #BOOL. If false (def), do not serve 'PATH' starting with dot
OPTS.showDirListing               #BOOL (def: false). Serve DIR listing
OPTS.showIndex                    #BOOL (def: true). Serve top listing index.html
OPTS.enableCors                   #BOOL (def: false). Set Access-Control-Allow-Origin [S]
OPTS.headers                      #'HEADER'_ARR to add to response
OPTS.quiet                        #BOOL. If false (def), log request
OPTS.etagAlgorithm                #Like serveFile()

file_server [DIR]               NR#Binary for serveDir()
--host=HOSTNAME                   #Def: 0.0.0.0
--port|-p=NUM                     #Def: 4507
--cert|-c=PATH                    #
--key|-k=PATH                     #
--no-dir-listing                  #
--cors                            #
