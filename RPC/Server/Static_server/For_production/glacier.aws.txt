
           
   GLACIER  
           



VERSION ==>                       #2013-12-31

GOAL ==>                          #Like S3 but for not frequent backups, few objects, almost never retrieval, high storage size:
                                  #  - three times cheaper storage costs
                                  #     - but metadata is 40KB/object, not 8KB like S3 (so should zip files)
                                  #     - always pay first three months, even if deleted during that time
                                  #  - same transfer costs
                                  #  - writes 10 times more expensive
                                  #  - reads like listing are same price
                                  #  - other reads (like restoring) are:
                                  #     - 300 times more expensive, but it should be almost nothing if only few a month
                                  #     - with additional cost GB/day, using highest daily average of the month
                                  #        - Substract 0.16%/total stored size from it (free)
                                  #        - So should spread over time as much as possible to make it fit in the free 0.16%
                                  #  - reads much slower (min. 5 hours)
                                  #If keeping few number of objects and transactions with high storage size, will be about three
                                  #times cheaper than S3 providing:
                                  #  - not retrieving too much
                                  #  - can spread over time a lot

S3 ==>                            #Can use Lifecycle with S3 to create|restore Glacier, which helps transition from S3 to Glacier,
                                  #but has less features than using Glacier directly (no control on how long to restore, etc.)
                                  #Should use Glacier for objects that don't need to use S3 in the first place.

LIMITS ==>                        #Vault:
                                  #  - 1000 vaults
                                  #  - unlimited archives
                                  #  - Name [[:alnum:]_-.]
                                  #Archive:
                                  #  - 4GB size, 40TB if Multipart write.

ARN ==>                           #  - vault: "arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT" (can include *)
                                  #  - archive: none. But can assign Archive permissions (e.g. deleteArchive) to a vault.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST ==>                          #Characteristics:
                                  #  - "Unusual" REST API.
                                  #  - Uses JSON not XML.
                                  #  - Sometimes uses request|response headers (like S3)
                                  #Domain: https://glacier[.REGION].amazonaws.com/ACCOUNT_ID/vaults/
                                  #Resources:
                                  #  - Archive:
                                  #     - like S3 object
                                  #     - /VAULT/archives/ARCHIVE_MID
                                  #  - MultipartUpload:
                                  #     - In-process multipart write
                                  #     - /VAULT/multipart-uploads/UPLOAD_ID
                                  #  - Job:
                                  #     - In-process retrieval or listing operation (not normal|multipart write)
                                  #     - /VAULT/jobs/JOB_ID
                                  #Multipart write, retrieving an archive, listing a vault is async (takes several hours)
                                  #Uses x-amz-glacier-version [C]
                                  #waitFor() STATE:
                                  #  - vault[Not]Exists: checks describeVault() every 3 seconds.

JAVASCRIPT SDK ==>                #Must use REQ_OBJ:
                                  #  - vaultName VAULT (for all resources, except listVaults())
                                  #  - archiveId ARCHIVE_MID (for Archive resource)
                                  #  - jobId JOB_ID (for Job resource)
                                  #Request body requires an extra englobbing OBJ name in JavaScript SDK, written directly in this doc.

PAGINATION ==>                    #Uses query variables:
                                  #  - limit NUM (max|def: 1000) (like max-keys in S3)
                                  #  - marker STR, also returned as Marker STR (null if no pagination)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             VAULT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /VAULT                        #Req: empty
createVault()                     #Res: empty, but Location: /ACCOUNT_ID/vaults/VAULT [S]
GET /VAULT                        #Req: empty
describeVault()                   #Res: VAULT
GET /                             #Req: empty
listVaults()                      #Res: VaultList VAULT_ARR
DELETE /VAULT                     #Req: empty
deleteVault()                     #Res: empty

VAULT                             #Like S3 BUCKET, but for Glacier
VAULT.VaultARN                    #VAULT_ARN. 'arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT'
                                  #Can use wildcard *
VAULT.VaultName                   #'VAULT'
VAULT.CreationDate                #'DATE'
VAULT.LastInventoryDate           #'DATE'|null
VAULT.NumberOfArchives            #NUM. 0 if LastIventoryDate null
VAULT.SizeInBytes                 #NUM. 0 if LastIventoryDate null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      VAULT NOTIFICATIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /VAULT
 /notification-configuration      #Req: vaultNotificationConfig VAULT_NOTIF
setVaultNotifications()           #Res: empty
GET /VAULT
 /notification-configuration      #Req: empty
getVaultNotifications()           #Res: VAULT_NOTIF
DELETE /VAULT
 /notification-configuration      #Req: empty
deleteVaultNotifications()        #Res: empty

VAULT_NOTIF                       #SNS notification when async job is done
VAULT_NOTIF.SNSTopic              #TOPIC_ARN
VAULT_NOTIF.Events                #'EVENT'_ARR, among:
                                  #  - 'ArchiveRetrievalCompleted'
                                  #  - 'InventoryRetrievalCompleted'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /VAULT/archives              #Req: ARCHIVE_CONTENT
uploadArchive()                   #Res: ARCHIVE
                                  #In JavaScript SDK:
                                  #  - uses checksum (x-amz-content-sha256 [C]) and checksum (x-amz-sha256-tree-hash [S])
                                  #  - can compute with GLACIER.computeChecksums(BUFFER|STR)->{linearHash|treeHash STR}
DELETE /VAULT/archives/ARCHIVE_MID
deleteArchive()                   #

ARCHIVE_CONTENT                   #ARCHIVE content, as is

ARCHIVE.archiveId                 #ARCHIVE_MID
ARCHIVE.location                  #/ACCOUNT_ID/vaults/VAULT/archives/ARCHIVE_MID
x-amz-archive-description:
 ARCHIVE_DESC [C]                 #
x-amz-content-sha256: HASH [C]    #Hash of whole ARCHIVE_CONTENT
x-amz-sha256-tree-hash: STR [C|S] #Hash tree of each ARCHIVE_CONTENT's 1MB parts


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /VAULT/multipart-uploads     #Like uploadArchive(), but multipart (initiate it). Should use Multipart for anything > 100MB
initiateMultipartUpload()         #Initiate writing several parts in a single UPLOAD_ID.
                                  #UPLOAD_ID is valid 24 hours. Can initiate a new UPLOAD_ID afterwards.
                                  #Max 10000 parts in a final archive.
                                  #Must specify x-amz-part-size NUM (1MB-4GB, must be power of 2).
                                  #Can use x-amz-archive-description ARCHIVE_DESC_STR [C]
                                  #Returns response headers:
                                  #  - Location /ACCOUNT_ID/vaults/VAULT/multipart-uploads/UPLOAD_ID [S]
                                  #  - x-amz-multipart-upload-id UPLOAD_ID [S]
PUT /VAULT/multipart-uploads      #Upload multipart part (raw request body).
 /UPLOAD_ID                       #Uses Content Hash the same way as uploadArchive().
uploadMultipartPart()             #Also uses Content-Range [C] (same format as Range [C]) ("range" in JavaScript SDK)
POST /VAULT/multipart-uploads     #Finishes a multipart write.
 /UPLOAD_ID                       #Must use request headers:
completeMultipartUpload()         #  - x-amz-sha256-tree-hash STR [C]: hash of all hashes
                                  #  - x-amz-archive-size STR [C]
                                  #Returns same as uploadArchive()
DELETE /VAULT/multipart-uploads
 /UPLOAD_ID
abortMultipartUpload()            #
GET /VAULT/multipart-uploads      #List all UPLOAD
listMultipartUploads()            #Returns:
                                  #  - UploadsList UPLOAD_OBJ_ARR:
                                  #     - ArchiveDescription ARCHIVE_DESC_STR
                                  #     - CreationDate DATE_STR
                                  #     - MultipartUploadId UPLOAD_ID
                                  #     - PartSizeInBytes NUM: initial x-amz-part-size
                                  #     - VaultARN ARN
GET /VAULT/multipart-uploads      #List uploaded parts
 /UPLOAD_ID                       #Returns UPLOAD_OBJ, with additional member:
listParts()                       #  - Parts OBJ_ARR:
                                  #     - RangeInBytes STR
                                  #     - SHA256TreeHash STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        READING ARCHIVE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /VAULT/jobs                  #Initiate a job. Request OBJ.jobParameters depends on OBJ.jobParameters.Type:
initiateJob()                     #"archive-retrieval" (read an archive):
                                  #  - Type "archive-retrieval"
                                  #  - ArchiveId ARCHIVE_MID
                                  #  - Description JOB_DESC_STR
                                  #  - RetrievalByteRange STR:
                                  #     - same as Range [C] syntax
                                  #     - goal is to spread out retrieval time (for pricing purpose)
                                  #     - part size must be integer in MB
                                  #  - SNSTopic TOPIC_SNS_ARN:
                                  #     - to notify the completion (same as setVaultNotifications() but on a job-basis
                                  #"inventory-retrieval" (list archives):
                                  #  - Type "inventory-retrieval"
                                  #  - Description JOB_DESC_STR
                                  #  - Format "CSV|JSON" (def: "JSON")
                                  #  - SNSTopic TOPIC_SNS_ARN:
                                  #  - InventoryRetrievalParameters:
                                  #     - StartDate|EndDate DATE_STR: for archives created then (optional)
                                  #     - Limit|Marker: paginates
                                  #Listing is according to last listing, which is done every 24 hours
                                  #Returns response headers:
                                  #  - Location /ACCOUNT_ID/vaults/VAULT/jobs/JOB_ID [S]
                                  #  - x-amz-job-id JOB_ID [S]
GET /VAULT/jobs                   #Can use request parameters:
listJobs()                        #  - completed BOOL: only return [non-]completed jobs
                                  #  - statuscode "InProgress|Succeeded|Failed": only return jobs with this StatusCode
                                  #Returns:
                                  #  - JobList JOB_OBJ_ARR
                                  #JOB_OBJ is:
                                  #  - all:
                                  #     - Action "ArchiveRetrieval|InventoryRetrieval" (instead of Type)
                                  #     - Completed BOOL
                                  #     - StatusCode "InProgress|Succeeded|Failed"
                                  #     - StatusMessage STR
                                  #     - VaultARN ARN
                                  #     - JobId JOB_ID
                                  #     - CreationDate DATE_STR
                                  #     - JobDescription JOB_DESC_STR (instead of Description)
                                  #     - RetrievalByteRange STR
                                  #  - "ArchiveRetrieval" only:
                                  #     - ArchiveId ARCHIVE_MID
                                  #     - ArchiveSizeInBytes NUM
                                  #     - [Archive]SHA256TreeHash STR
                                  #     - CompletionDate DATE_STR
                                  #  - "InventoryRetrieval" only:
                                  #     - InventorySizeInBytes NUM
                                  #     - InventoryRetrievalParameters (only if pagination)
GET /VAULT/jobs/JOB_ID
describeJob()                     #Returns JOB_OBJ
GET /VAULT/jobs/JOB_ID/output     #Returns result of a job (if it completed). JOB_ID expires 24 hours after it completed.
getJobOutput()                    #If "archive-retrieval" or CSV "inventory-retrieval", returns raw response body.
                                  #If JSON "inventory-retrieval", returns:
                                  #  - VaultARN ARN
                                  #  - InventoryDate DATE_STR
                                  #  - ArchiveList OBJ_ARR:
                                  #     - ArchiveId ARCHIVE_MID
                                  #     - ArchiveDescription ARCHIVE_DESC_STR
                                  #     - CreationDate DATE_STR
                                  #     - Size NUM
                                  #     - SHA256TreeHash STR
                                  #Can ask for Range [C]. Will return response headers:
                                  #  - Content-Range [S]
                                  #  - x-amz-sha256-tree-hash [S] (OBJ.checksum in JavaScript SDK)
                                  #  - Status code is 200 if last part, 206 if not (can use OBJ.status in JavaScript SDK)
                                  #Set Content-Type [S] to "application/octet-stream", "text/csv" or "application/json"
