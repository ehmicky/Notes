
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   GLACIER   ┃
                                  ┗━━━━━━━━━━━━━┛

VERSION ==>                       #2023-08-09

SUMMARY ==>                       #Cheap storage for readonly data not often retrieved
                                  #Vault: description, tags
                                  #Archive: simple|multipart upload, checksums
                                  #Read jobs: archive, list, select, SNS notifications
                                  #Read archive: range, tiers, provisioned capacity, retrieval limits
                                  #List archives: inventory, filters, CSV|JSON
                                  #Select archive: SQL, CSV|JSON, S3 output
                                  #Vault policy: lock

COMPARISON WITH S3 ==>            #S3 offers similar features through StorageClass 'GLACIER', with same pricing
                                  #S3 is a superset, with many more features, i.e. preferred
                                  #Except for few small features: AJOB.RetrievalByteRange, RETRIEVAL_LIMITS
                                  #Is somewhat deprecated, e.g. no CloudFormation|CDK support

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

DOMAIN ==>                        #SERVICE_FULL_DOMAIN/ACCOUNT_ID
                                  #ACCOUNT_ID can be -, to use the one from Authorization [C]
                                  #  - default value when using SDK|CLI

FORMAT ==>                        #JSON REST, with X-Amz-Glacier-Version: VERSION [C]
                                  #Uses some PARAMS|RESP headers
COPTS.apiVersion                  #Sets X-Amz-Glacier-Version [C]

REQ_ID                            #X-Amzn-RequestId [S]

PAGINATION ==>                    #Req: Marker STR, Limit NUM (def|max: 100 with VAULT, def 50 + max 1000 with others)
                                  #Res: Marker STR

PRICING ==>                       #Same as S3 StorageClass 'GLACIER' (see its doc)

AmazonGlacierFullAccess           #AWS managed POLICY. Grants all Glacier PACTIONs
AmazonGlacierReadOnlyAccess       #Same but readonly

@aws-sdk/middleware-sdk-glacier   #MFUNCs used by Glacier client

                                  ┌───────────┐
                                  │   VAULT   │
                                  └───────────┘

PUT /vaults/VAULT                 #Req: empty
CreateVault()                     #Res: Location [S]
                                  #Upserts
GET /vaults/VAULT                 #Req: empty
DescribeVault()                   #Res: VAULT
GET /vaults                       #Req: empty
ListVaults()                      #Res: VaultList VAULT_ARR
DELETE /vaults/VAULT              #Req: empty
DeleteVault()                     #Res: empty
                                  #Fails if either:
                                  #  - not empty in last inventory
                                  #  - upload since last inventory

VAULT                             #Like S3 BUCKET, but for Glacier
                                  #Max 1e3 per REGION
                                  #WAIT (DescribeVault(), every 3s, timeout 45s) Vault[Not]Exists: when it exists
VAULT.VaultARN                    #VAULT_ARN. 'arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT'
                                  #Can use wildcard *
VAULT.VaultName                   #'VAULT'
                                  #Must be [[:alnum:].-_], max 255 chars
Location: /vaults/VAULT [S]       #
VAULT.CreationDate                #'DATE'

x-amz-archive-description:
 ARCHIVE_DESC [C]                 #Must be only [:print:]
IJOB_ARCHIVE.ArchiveDescription   #Max 1024 chars
UPLOAD.ArchiveDescription         #'ARCHIVE_DESC'|null

POST /vaults/VAULT/tags
 ?operation=add                   #Req: Tags TAGS
AddTagsToVault()                  #Res: empty
GET /vaults/VAULT/tags            #Req: empty
ListTagsForVault()                #Res: Tags TAGS
POST /vaults/VAULT/tags?
 ?operation=remove                #Req: TagKeys 'TAG'_ARR
RemoveTagsFromVault()             #Res: empty

                                  ┌───────────────────┐
                                  │   SIMPLE UPLOAD   │
                                  └───────────────────┘

POST /vaults/VAULT/archives       #Req: ARCHIVE_CONTENTS, x-amz-content-sha256 [C], x-amz-sha256-tree-hash [C], x-amz-archive-description [C]
UploadArchive()                   #Res: x-amz-archive-id [S], Location [S], x-amz-sha256-tree-hash [S]
DELETE /vaults/VAULT
 /archives/ARCHIVE_MID            #Req: empty
DeleteArchive()                   #Res: empty

ARCHIVE                           #Like S3 object, but for Glacier
                                  #No limit per VAULT
                                  #Max 4GiB
x-amz-archive-id: ARCHIVE_MID [S] #
Location: /vaults/VAULT
 /archives/ARCHIVE_MID [S]        #

ARCHIVE_CONTENTS                  #ARCHIVE contents, as is
PARAMS.Body                       #ARCHIVE_CONTENTS can be STR, DATAVIEW|ARRBUFFER|UINT8ARR|BUFFER|BLOB or RSTREAM|ISTREAM
--body PATH                       #Same for CLI

                                  ┌──────────────────────┐
                                  │   MULTIPART UPLOAD   │
                                  └──────────────────────┘

POST /vaults/VAULT
 /multipart-uploads               #Req: x-amz-part-size [C], x-amz-archive-description [C]
InitiateMultipartUpload()         #Res: Location [S], x-amz-multipart-upload-id [S]
PUT /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: PART_CONTENTS, Content-Range [C], x-amz-content-sha256 [C], x-amz-sha256-tree-hash [C]
UploadMultipartPart()             #Res: x-amz-sha256-tree-hash [S]
GET /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: empty
ListParts()                       #Res: UPLOAD
GET /vaults/VAULT                 #Req: empty
 /multipart-uploads               #Res: UploadsList UPLOAD_ARR
ListMultipartUploads()            #  - no Parts
POST /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: x-amz-sha256-tree-hash [C], x-amz-archive-size [C]
CompleteMultipartUpload()         #Res: x-amz-archive-id [S]
DELETE /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: empty
AbortMultipartUpload()            #Res: empty

UPLOAD                            #Like ARCHIVE, but in several requests (PARTs)
                                  #Max 1e4 PARTs
                                  #Max 40TiB for total ARCHIVE
                                  #  - should be used if > 100MiB
                                  #Once complete, expires within 24h
x-amz-multipart-upload-id:
 UPLOAD_MID [S]
UPLOAD.MultipartUploadId          #UPLOAD_MID
UPLOAD.VaultARN                   #VAULT_ARN
Location: /vaults/VAULT
 /multipart-uploads/UPLOAD_MID [S]#
UPLOAD.CreationDate               #'DATE'

PART_CONTENTS                     #PART contents, as is
PARAMS.Body
--body PATH                       #Like ARCHIVE_CONTENTS

x-amz-archive-size: NUM [C]       #Total size, in bytes

x-amz-part-size: NUM [C]          #NUM. PART size, in bytes.
UPLOAD.PartSizeInBytes            #Min 4MiB, max 4GiB. Must be power of 2
                                  #Each PART must have same size, except last one

Content-Range:                    #Start|end indices of the PART
 bytes NUM-NUM2/* [C]             #Can upload PARTs in:
                                  #  - random order
                                  #  - parallel
UPLOAD.Parts                      #PART_ARR
PART.RangeInBytes                 #'NUM-NUM2'

                                  ┌───────────────┐
                                  │   CHECKSUMS   │
                                  └───────────────┘

x-amz-content-sha256: HASH [C]
AJOB.ArchiveSHA256TreeHash        #'HASH'. Hash of whole ARCHIVE_CONTENT
ARCHIVE_CHECKSUMS.linearHash      #Automatically computed by CLI

x-amz-sha256-tree-hash: HASH [C|S]
PART|AJOB|IJOB_ARCHIVE
 .SHA256TreeHash
ARCHIVE_CHECKSUMS.treeHash        #'HASH'. Markle tree of each ARCHIVE_CONTENT's 1MiB parts

@aws-sdk/
 body-checksum-node|browser
@aws-sdk/sha256-tree-hash         #Used by SDK|CLI to automatically compute x-amz-content-sha256 [C] and x-amz-sha256-tree-hash [C]
@aws-sdk/                         #Must specify those headers manually instead when using either
 chunked-stream-reader-node       #PARAMS.Body ISTREAM (unless createReadStream()) or RSTREAM

                                  ┌──────────────┐
                                  │   READ JOB   │
                                  └──────────────┘

POST /vaults/VAULT/jobs           #Req: jobParameters JOB
InitiateJob()                     #  - no JobId, VaultARN, CreationDate, CompletionDate, Completed, StatusCode, StatusMessage
                                  #  - Action 'ArchiveRetrieval|...' -> Type 'archive-retrieval|...'
                                  #  - JobDescription -> Description
                                  #  - (for AJOB) no *TreeHash, ArchiveSizeInBytes
                                  #  - (for IJOB) no InventorySizeInBytes
                                  #  - (for SJOB) no OutputPath
                                  #Res: Location [S], x-amz-job-id [S], x-amz-job-output-path [S]
GET /vaults/VAULT/jobs            #Req: JOB
ListJobs()                        #  - only Completed, StatusCode
                                  #Res: JobList JOB_ARR
GET /vaults/VAULT/jobs/JOB_MID    #Req: empty
DescribeJob()                     #Res: JOB
                                  #  - no SNSTopic
                                  #  - (for IJOB) no Format
GET /vaults/VAULT/jobs/JOB_MID
 /output                          #Req: (for AJOB) Range [C]
GetJobOutput()                    #Res: JOB_RES
                                  #  - (for IJOB) x-amz-sha256-tree-hash [S]

x-amz-job-id: JOB_MID [S]
JOB.JobId                         #JOB_MID
Location: /vaults/VAULT
 /jobs/JOB_MID [S]
JOB.VaultARN                      #VAULT_ARN

JOB.Action                        #'ArchiveRetrieval', 'InventoryRetrieval', 'Select'
JOB.JobDescription                #'JOB_DESC'

JOB.CreationDate                  #'DATE'
JOB.CompletionDate                #'DATE'|null
JOB.Completed                     #BOOL
JOB.StatusCode                    #'InProgress|Succeeded|Failed'
JOB.StatusMessage                 #STR

JOB_RES                           #Only available after JOB completes
                                  #Once completed, JOB expires within 24h

                                  ┌─────────────────────────┐
                                  │   VAULT NOTIFICATIONS   │
                                  └─────────────────────────┘

PUT /vaults/VAULT
 /notification-configuration      #Req: vaultNotificationConfig VAULT_NOTIF
SetVaultNotifications()           #Res: empty
GET /vaults/VAULT
 /notification-configuration      #Req: empty
GetVaultNotifications()           #Res: VAULT_NOTIF
DELETE /vaults/VAULT
 /notification-configuration      #Req: empty
DeleteVaultNotifications()        #Res: empty

VAULT_NOTIF                       #SNS notification when JOB succeeds|fails
VAULT_NOTIF.SNSTopic              #TOPIC_ARN
VAULT_NOTIF.Events                #'EVENT'_ARR, among:
                                  #  - 'ArchiveRetrievalCompleted'
                                  #  - 'InventoryRetrievalCompleted'

JOB.SNSTopic                      #TOPIC_ARN. Like VAULT_NOTIF, but for a single JOB

                                  ┌──────────────────┐
                                  │   READ ARCHIVE   │
                                  └──────────────────┘

AJOB                              #JOB with Action 'ArchiveRetrieval'
                                  #Get an ARCHIVE_CONTENT

AJOB.ArchiveId                    #ARCHIVE_MID

Range: bytes=NUM-NUM2 [C]
AJOB.RetrievalByteRange           #'NUM-NUM2'. Same as Range [C] when uploading, but for downloading, i.e. only download a PART
Content-Range:                    #Goal: streaming
 bytes NUM-NUM2/NUM3 [S]          #Status code is 206 for non-last part, 200 for last part

AJOB.ArchiveSizeInBytes           #NUM, i.e. size of whole archive

AJOB.Tier                         #Like S3 RESTORE.Tier

AJOB_RES                          #ARCHIVE_CONTENT
Content-Type:
 application/octet-stream [S]     #

                                  ┌──────────────────────────┐
                                  │   PROVISIONED CAPACITY   │
                                  └──────────────────────────┘

POST /provisioned-capacity        #Req: empty
PurchaseProvisionedCapacity()     #Res: x-amz-capacity-id [S]
GET /provisioned-capacity         #Req: empty
ListProvisionedCapacity()         #Res: ProvisionedCapacityList CAPACITY

CAPACITY                          #Ensures at least 3 AJOBs with Tier 'Expedited' every 5m, with up to 150MB/s
                                  #Max 2 per ACCOUNT
x-amz-capacity-id:
 CAPACITY_MID [S]
CAPACITY.CapacityId               #CAPACITY_MID
CAPACITY.StartDate                #'DATE'
CAPACITY.ExpirationDate           #End 'DATE', one month later

                                  ┌──────────────────────┐
                                  │   RETRIEVAL LIMITS   │
                                  └──────────────────────┘

PUT /policies/data-retrieval      #Req: RETRIEVAL_LIMITS
SetDataRetrievalPolicy()          #Res: empty
GET /policies/data-retrieval      #Req: empty
GetDataRetrievalPolicy()          #Res: RETRIEVAL_LIMITS

RETRIEVAL_LIMITS.Policy.Rules     #RETRIEVAL_RULE_ARR
RETRIEVAL_RULE                    #Sets max download bytes per hour|day of AJOBs
RETRIEVAL_RULE.Strategy           #One of:
                                  #  - 'None' (def): no restriction
                                  #  - 'FreeTier': only allow within free tier (prorated per day)
                                  #  - 'BytesPerHour': use RETRIEVAL_RULE.BytesPerHour
RETRIEVAL_RULE.BytesPerHour       #NUM (in bytes). Max download per hour

                                  ┌───────────────────┐
                                  │   LIST ARCHIVES   │
                                  └───────────────────┘

IJOB_RES.InventoryDate            #'DATE'|null of last "inventory", i.e. ARCHIVEs listing, done once per day
VAULT.LastInventoryDate           #Not updated if no changes in VAULT
VAULT.NumberOfArchives            #NUM. 0 if LastIventoryDate null
IJOB.InventorySizeInBytes
VAULT.SizeInBytes                 #NUM. Total of all ARCHIVE sizes, including 40KB metadata. 0 if LastIventoryDate null

IJOB                              #JOB with Action 'InventoryRetrieval'
                                  #List ARCHIVEs

IJOB.InventoryRetrievalParameters #IJOB_PARAMS
IJOB_PARAMS                       #Can be paginated
IJOB_PARAMS.StartDate|EndDate     #'DATE_STR'. IJOB_ARCHIVE.CreationDate

IJOB.Format                       #'JSON' (def) or 'CSV'
Content-Type: MIME [S]            #'application/json' or 'text/csv'

IJOB_RES.VaultARN                 #ARN

IJOB_RES.ArchiveList              #IJOB_ARCHIVE_ARR
IJOB_ARCHIVE.ArchiveId            #ARCHIVE_MID
IJOB_ARCHIVE.CreationDate         #'DATE'
IJOB_ARCHIVE.Size                 #NUM

                                  ┌────────────┐
                                  │   SELECT   │
                                  └────────────┘

SJOB                              #JOB with Action 'Select'
                                  #Transforms a CSV ARCHIVE using SQL, then outputs to S3

SJOB.*                            #Like AJOB.*, except no RetrievalByteRange|SHA256TreeHash

SJOB.SelectParameters             #Like S3 RESTORE.SelectParameters except:
                                  #  - no JSON, CompressionType, Parquet, AllowQuotedRecordDelimiter
x-amz-job-output-path: STR [S]
SJOB.OutputPath                   #'OBJECT'
SJOB.OutputLocation               #Like S3 RESTORE.OutputLocation except:
                                  #  - RESTORE_OUTPUT.StorageClass can only use 'STANDARD[_IA]|REDUCED_REDUNDANCY'
                                  #  - RESTORE_ENCRYPTION.EncryptionType -> Encryption, and no 'aws:kms:dsse'

SJOB_RES                          #None

                                  ┌───────────────────┐
                                  │   ACCESS POLICY   │
                                  └───────────────────┘

PUT /vaults/VAULT/access-policy   #Req: ACCESS_POLICY
SetVaultAccessPolicy()            #Res: empty
GET /vaults/VAULT/access-policy   #Req: empty
GetVaultAccessPolicy()            #Res: ACCESS_POLICY
DELETE /vaults/VAULT/access-policy#Req: empty
DeleteVaultAccessPolicy()         #Res: empty

ACCESS_POLICY.Policy              #'POLICY_DOC'. "Vault policy"
                                  #Resource-based POLICY,
                                  #Can use resource-level permission on a VAULT
                                  #Only one per VAULT
                                  #Max 20KB

COND_KEY glacier:ArchiveAgeInDays #NUM. On InitialJob() or DeleteArchive()

                                  ┌──────────┐
                                  │   LOCK   │
                                  └──────────┘

POST /vaults/VAULT/lock-policy    #Req: LOCK
InitiateVaultLock()               #  - only Policy
                                  #Res: x-amz-lock-id [S]
                                  #Sets LOCK.State 'InProgress'
GET /vaults/VAULT/lock-policy     #Req: empty
GetVaultLock()                    #Res: LOCK
POST /vaults/VAULT                #Req: empty
 /lock-policy/LOCK_MID            #Res: empty
CompleteVaultLock()               #Sets LOCK.State 'Locked'
DELETE /vaults/VAULT/lock-policy  #Req: empty
AbortVaultLock()                  #Res: empty

LOCK                              #Like ACCESS_POLICY, but becomes readonly once 'Locked'
x-amz-lock-id: LOCK_MID [S]       #
LOCK.Policy                       #Like ACCESS_POLICY.Policy
LOCK.State                        #Whether Policy can be changed, either 'InProgress' (yes) or 'Locked' (no)
LOCK.CreationDate                 #'DATE'
LOCK.ExpirationDate               #Max 'DATE' to set State 'Locked', otherwise deletes LOCK
                                  #null when State 'Locked'
                                  #24h after CreationDate
