
           
   GLACIER  
           



TO DOCUMENT:
  - https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations-range.html

VERSION ==>                       #2022-11-15

S3 ==>                            #Can use Glacier from S3 using StorageClass|Lifecycle
                                  #Pro: integrated with S3
                                  #Con: fewer features


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FORMAT ==>                        #JSON REST, with X-Amz-Glacier-Version: VERSION [C]
                                  #Uses some REQ|RES headers

DOMAIN ==>                        #SERVICE_FULL_DOMAIN/ACCOUNT_ID
                                  #ACCOUNT_ID can be -, to use the one from Authorization [C]

PAGINATION ==>                    #Req: Marker STR, Limit NUM (def|max: 1e2 with VAULT, 1e4 with others)
                                  #Res: Marker STR

ERRORS ==>                        #Uses ERROR_RES

REQ_ID                            #X-Amzn-RequestId [S]

PRICING ==>                       #The following is compared to S3
                                  #3x cheaper storage
                                  #  - but metadata is 40KB/object, compared to 8KB for S3
                                  #     - i.e. better for multiple files tar'd, or single big files
                                  #  - always pay first 3 months, even if deleted during that time
                                  #     - i.e. better for long-kept files
                                  #Transfer: same price
                                  #Writes 10x more expensive
                                  #  - i.e. better for read-only files
                                  #Reading metadata: same price
                                  #Reading contents
                                  #  - 300x more expensive
                                  #     - i.e. better for backups
                                  #  - additional cost GB/highestDay
                                  #     - highestDay is day of the month with highest GB
                                  #        - i.e. should spread over time as much as possible
                                  #     - free: 0.16% of total
                                  #        - i.e. free is spread over 2 years???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             VAULT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /vaults/VAULT                 #Req: empty
createVault()                     #Res: Location [S]
                                  #Upserts
GET /vaults/VAULT                 #Req: empty
describeVault()                   #Res: VAULT
GET /vaults                       #Req: empty
listVaults()                      #Res: VaultList VAULT_ARR
DELETE /vaults/VAULT              #Req: empty
deleteVault()                     #Res: empty
                                  #Fails if either:
                                  #  - not empty in last inventory
                                  #  - upload since last inventory

VAULT                             #Like S3 BUCKET, but for Glacier
                                  #Max 1000
                                  #WAIT (DescribeVault()) Vault[Not]Exists: when it exists
VAULT.VaultARN                    #VAULT_ARN. 'arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT'
                                  #Can use wildcard *
VAULT.VaultName                   #'VAULT'
                                  #Must be [[:alnum:].-_]
Location: /vaults/VAULT [S]       #
VAULT.CreationDate                #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /vaults/VAULT/archives       #Req: ARCHIVE_CONTENTS
uploadArchive()                   #Res: ARCHIVE
DELETE /vaults/VAULT
 /archives/ARCHIVE_MID            #Req: empty
deleteArchive()                   #Res: empty

ARCHIVE                           #Like S3 object, but for Glacier
                                  #No limit per VAULT
                                  #Max 4GB
ARCHIVE.archiveId                 #ARCHIVE_MID
ARCHIVE.location                  #/vaults/VAULT/archives/ARCHIVE_MID
x-amz-archive-description:
 ARCHIVE_DESC [C]                 #

ARCHIVE_CONTENTS                  #ARCHIVE contents, as is

CLIENT.computeChecksums
 (BUFFER|STR)->ARCHIVE_CHECKSUMS  #
x-amz-content-sha256: HASH [C]
ARCHIVE_CHECKSUMS.linearHash      #'HASH'. Hash of whole ARCHIVE_CONTENT
x-amz-sha256-tree-hash: HASH [C|S]
ARCHIVE_CHECKSUMS.treeHash        #'HASH'. Markle tree of each ARCHIVE_CONTENT's 1MB parts


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /vaults/VAULT
 /multipart-uploads               #Req: empty
initiateMultipartUpload()         #Res: Location [S], x-amz-multipart-upload-id [S]
PUT /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: PART_CONTENTS, Content-Range [C], x-amz-sha256-tree-hash [C]
uploadMultipartPart()             #Res: empty
GET /vaults/VAULT                 #Req: empty
 /multipart-uploads               #Res: UploadsList UPLOAD_ARR
listMultipartUploads()            #  - no Parts
GET /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: empty
listParts()                       #Res: UPLOAD
POST /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: only x-amz-sha256-tree-hash [C], x-amz-archive-size [C]
completeMultipartUpload()         #Res: ARCHIVE
DELETE /vaults/VAULT
 /multipart-uploads/UPLOAD_MID    #Req: empty
abortMultipartUpload()            #Res: empty

UPLOAD                            #Like ARCHIVE, but in several requests (PARTs)
                                  #Max 40TB for total ARCHIVE instead of 4GB
                                  #  - should be used if > 100MB
                                  #Valid 24h
x-amz-multipart-upload-id:
 UPLOAD_MID [S]
UPLOAD.MultipartUploadId          #UPLOAD_MID
UPLOAD.VaultARN                   #VAULT_ARN
Location: /vaults/VAULT
 /multipart-uploads/UPLOAD_MID [S]#
x-amz-archive-description:
 ARCHIVE_DESC [C]
UPLOAD.ArchiveDescription         #'ARCHIVE_DESC'
UPLOAD.CreationDate               #'DATE'

PART_CONTENTS                     #PART contents, as is

UPLOAD.Parts                      #PART_ARR
                                  #Max 1e4
PART.RangeInBytes                 #STR
Content-Range: STR [C]            #Same format as Range [C]

x-amz-archive-size: NUM [C]       #Total size
x-amz-part-size: NUM [C]          #NUM. PART size.
UPLOAD.PartSizeInBytes            #Min 1MB, max 4GB. Must be power of 2

x-amz-content-sha256: HASH [C]    #Like simple upload
PART.SHA256TreeHash               #
x-amz-sha256-tree-hash: HASH [C|S]#Like simple upload


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           READ JOB            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /vaults/VAULT/jobs           #Req: jobParameters JOB_REQ
initiateJob()                     #Res: Location [S], x-amz-job-id [S]
GET /vaults/VAULT/jobs            #Req: JOB
listJobs()                        #  - only Completed, StatusCode
                                  #Res: JobList JOB_ARR
GET /vaults/VAULT/jobs/JOB_MID    #Req: empty
describeJob()                     #Res: JOB
GET /vaults/VAULT/jobs/JOB_MID
 /output                          #Req: empty
getJobOutput()                    #Res: ARCHIVE_CONTENTS (for AJOB) or IJOB_RES

JOB_REQ.Type                      #'archive-retrieval' or 'inventory-retrieval'
JOB_REQ.Description               #'JOB_DESC'

Location: /vaults/VAULT
 /jobs/JOB_MID [S]                #
x-amz-job-id: JOB_MID [S]         #

JOB.JobId                         #JOB_MID
JOB.VaultARN                      #VAULT_ARN
JOB.Action                        #'ArchiveRetrieval' or 'InventoryRetrieval'
JOB.Completed                     #BOOL
                                  #Slow: min 5 hours
JOB.StatusCode                    #'InProgress|Succeeded|Failed'
JOB.StatusMessage                 #STR
JOB.JobDescription                #'JOB_DESC'
JOB.CreationDate                  #'DATE'

JOB_RES                           #Only available after JOB completes
                                  #Once completed, JOB expires after 24h


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         READ ARCHIVE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AJOB[_REQ|RES]                    #JOB[_REQ|RES] with Type 'archive-retrieval'
                                  #Get an ARCHIVE_CONTENT

AJOB_REQ.ArchiveId                #ARCHIVE_MID

Range: STR [C]                    #STR. Goal is to spread out retrieval time (for pricing purpose)
AJOB_REQ.RetrievalByteRange       #Part size must be integer in MB
                                  #Status code is 206 for non-last part, 200 for last part
Content-Range: STR [S]            #
x-amz-sha256-tree-hash: HASH [S]  #Like simple upload

AJOB.ArchiveId                    #ARCHIVE_MID
AJOB.ArchiveSizeInBytes           #NUM
AJOB.RetrievalByteRange           #STR
AJOB.SHA256TreeHash               #STR
AJOB.ArchiveSHA256TreeHash        #STR
AJOB.CompletionDate               #'DATE'

AJOB_RES                          #ARCHIVE_CONTENT
Content-Type:
 application/octet-stream [S]     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LIST ARCHIVES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAULT.LastInventoryDate           #'DATE'|null of last "inventory", i.e. ARCHIVEs listing, done once per day
VAULT.NumberOfArchives            #NUM. 0 if LastIventoryDate null
VAULT.SizeInBytes                 #NUM. Total of all ARCHIVE sizes, including 40KB metadata. 0 if LastIventoryDate null

IJOB[_REQ|RES]                    #JOB[_REQ|RES] with Type 'inventory-retrieval'
                                  #List ARCHIVEs

IJOB_REQ.Format                   #'JSON' (def) or 'CSV'
Content-Type:
 'application/json' [S]           #
Content-Type: 'text/csv' [S]      #
IJOB_REQ
 .InventoryRetrievalParameters    #IJOB_PARAMS
IJOB_PARAMS                       #Can be paginated
IJOB_PARAMS.StartDate|EndDate     #'DATE_STR'. IJOB_ARCHIVE.CreationDate

IJOB.InventorySizeInBytes         #NUM
IJOB.InventoryRetrievalParameters #IJOB_PARAMS

IJOB_RES.VaultARN                 #ARN
IJOB_RES.InventoryDate            #'DATE'
IJOB_RES.ArchiveList              #IJOB_ARCHIVE_ARR
IJOB_ARCHIVE.ArchiveId            #ARCHIVE_MID
IJOB_ARCHIVE.ArchiveDescription   #'ARCHIVE_DESC'
IJOB_ARCHIVE.CreationDate         #'DATE'
IJOB_ARCHIVE.Size                 #NUM
IJOB_ARCHIVE.SHA256TreeHash       #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      VAULT NOTIFICATIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /vaults/VAULT
 /notification-configuration      #Req: vaultNotificationConfig VAULT_NOTIF
setVaultNotifications()           #Res: empty
GET /vaults/VAULT
 /notification-configuration      #Req: empty
getVaultNotifications()           #Res: VAULT_NOTIF
DELETE /vaults/VAULT
 /notification-configuration      #Req: empty
deleteVaultNotifications()        #Res: empty

VAULT_NOTIF                       #SNS notification when async job is done
VAULT_NOTIF.SNSTopic              #TOPIC_ARN
VAULT_NOTIF.Events                #'EVENT'_ARR, among:
                                  #  - 'ArchiveRetrievalCompleted'
                                  #  - 'InventoryRetrievalCompleted'

JOB_REQ.SNSTopic                  #TOPIC_ARN. Like VAULT_NOTIF, but for a single JOB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



POST /vaults/VAULT/tags           #
GET /vaults/VAULT/tags            #

POST /vaults/VAULT/lock-policy    #
GET /vaults/VAULT/lock-policy     #
POST /vaults/VAULT
 /lock-policy/LOCK_MID            #
DELETE /vaults/VAULT/lock-policy  #

PUT /vaults/VAULT/access-policy   #
GET /vaults/VAULT/access-policy   #
DELETE /vaults/VAULT/access-policy#

GET /policies/data-retrieval      #
PUT /policies/data-retrieval      #

GET /provisioned-capacity         #
POST /provisioned-capacity        #
