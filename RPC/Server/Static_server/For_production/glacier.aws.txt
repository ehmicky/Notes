
           
   GLACIER  
           



VERSION ==>                       #2013-12-31

GOAL ==>                          #Like S3 but for not frequent backups, few objects, almost never retrieval, high storage size:
                                  #  - three times cheaper storage costs
                                  #     - but metadata is 40KB/object, not 8KB like S3 (so should zip files)
                                  #     - always pay first three months, even if deleted during that time
                                  #  - same transfer costs
                                  #  - writes 10 times more expensive
                                  #  - reads like listing are same price
                                  #  - other reads (like restoring) are:
                                  #     - 300 times more expensive, but it should be almost nothing if only few a month
                                  #     - with additional cost GB/day, using highest daily average of the month
                                  #        - Substract 0.16%/total stored size from it (free)
                                  #        - So should spread over time as much as possible to make it fit in the free 0.16%
                                  #  - reads much slower (min. 5 hours)
                                  #If keeping few number of objects and transactions with high storage size, will be about three
                                  #times cheaper than S3 providing:
                                  #  - not retrieving too much
                                  #  - can spread over time a lot

S3 ==>                            #Can use Lifecycle with S3 to create|restore Glacier, which helps transition from S3 to Glacier,
                                  #but has less features than using Glacier directly (no control on how long to restore, etc.)
                                  #Should use Glacier for objects that don't need to use S3 in the first place.

LIMITS ==>                        #Vault:
                                  #  - 1000 vaults
                                  #  - unlimited archives
                                  #  - Name [[:alnum:]_-.]
                                  #Archive:
                                  #  - 4GB size, 40TB if Multipart write.

ARN ==>                           #  - vault: "arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT" (can include *)
                                  #  - archive: none. But can assign Archive permissions (e.g. deleteArchive) to a vault.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST ==>                          #Characteristics:
                                  #  - "Unusual" REST API.
                                  #  - Uses JSON not XML.
                                  #  - Sometimes uses request|response headers (like S3)
                                  #Domain: https://glacier[.REGION].amazonaws.com/ACCOUNT_ID/vaults/
                                  #Resources:
                                  #  - Archive:
                                  #     - like S3 object
                                  #     - /VAULT/archives/ARCHIVE_MID
                                  #  - MultipartUpload:
                                  #     - In-process multipart write
                                  #     - /VAULT/multipart-uploads/UPLOAD_MID
                                  #  - Job:
                                  #     - In-process retrieval or listing operation (not normal|multipart write)
                                  #     - /VAULT/jobs/JOB_ID
                                  #Multipart write, retrieving an archive, listing a vault is async (takes several hours)
                                  #Uses x-amz-glacier-version [C]
                                  #waitFor() STATE:
                                  #  - vault[Not]Exists: checks describeVault() every 3 seconds.

JAVASCRIPT SDK ==>                #Must use REQ_OBJ:
                                  #  - vaultName VAULT (for all resources, except listVaults())
                                  #  - archiveId ARCHIVE_MID (for Archive resource)
                                  #  - jobId JOB_ID (for Job resource)
                                  #Request body requires an extra englobbing OBJ name in JavaScript SDK, written directly in this doc.

PAGINATION ==>                    #Uses query variables:
                                  #  - limit NUM (max|def: 1000) (like max-keys in S3)
                                  #  - marker STR, also returned as Marker STR (null if no pagination)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             VAULT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /VAULT                        #Req: empty
createVault()                     #Res: only Location [S]
GET /VAULT                        #Req: empty
describeVault()                   #Res: VAULT
GET /                             #Req: empty
listVaults()                      #Res: VaultList VAULT_ARR
DELETE /VAULT                     #Req: empty
deleteVault()                     #Res: empty

VAULT                             #Like S3 BUCKET, but for Glacier
VAULT.VaultARN                    #VAULT_ARN. 'arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT'
                                  #Can use wildcard *
VAULT.VaultName                   #'VAULT'
Location:
 /ACCOUNT_ID/vaults/VAULT [S]     #
VAULT.CreationDate                #'DATE'
VAULT.LastInventoryDate           #'DATE'|null
VAULT.NumberOfArchives            #NUM. 0 if LastIventoryDate null
VAULT.SizeInBytes                 #NUM. 0 if LastIventoryDate null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /VAULT/archives              #Req: ARCHIVE_CONTENTS
uploadArchive()                   #Res: ARCHIVE
DELETE /VAULT/archives/ARCHIVE_MID#Req: empty
deleteArchive()                   #Res: empty

ARCHIVE.archiveId                 #ARCHIVE_MID
ARCHIVE.location                  #/ACCOUNT_ID/vaults/VAULT/archives/ARCHIVE_MID
x-amz-archive-description:
 ARCHIVE_DESC [C]                 #

ARCHIVE_CONTENTS                  #ARCHIVE contents, as is

CLIENT.computeChecksums
 (BUFFER|STR)->ARCHIVE_CHECKSUMS  #
x-amz-content-sha256: HASH [C]
ARCHIVE_CHECKSUMS.linearHash      #'HASH'. Hash of whole ARCHIVE_CONTENT
x-amz-sha256-tree-hash: STR [C|S]
ARCHIVE_CHECKSUMS.treeHash        #STR. Hash tree of each ARCHIVE_CONTENT's 1MB parts


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /VAULT/multipart-uploads     #Req: empty
initiateMultipartUpload()         #Res: Location [S], x-amz-multipart-upload-id [S]
PUT /VAULT/multipart-uploads
 /UPLOAD_MID                      #Req: PART_CONTENTS + Content-Range [C]
uploadMultipartPart()             #Res: empty
GET /VAULT/multipart-uploads      #Req: empty
listMultipartUploads()            #Res: UploadsList UPLOAD_ARR
                                  #  - no Parts
GET /VAULT/multipart-uploads
 /UPLOAD_MID                      #Req: empty
listParts()                       #Res: UPLOAD
POST /VAULT/multipart-uploads
 /UPLOAD_MID                      #Req: only x-amz-sha256-tree-hash [C], x-amz-archive-size [C]
completeMultipartUpload()         #Res: ARCHIVE
DELETE /VAULT/multipart-uploads
 /UPLOAD_MID                      #Req: empty
abortMultipartUpload()            #Res: empty

UPLOAD                            #Like ARCHIVE, but in several requests (PART)
                                  #Should be used if total size > 100MB

x-amz-multipart-upload-id:
 UPLOAD_MID [S]
UPLOAD.MultipartUploadId          #UPLOAD_MID. Valid 24h
UPLOAD.VaultARN                   #VAULT_ARN
Location: /ACCOUNT_ID
 /vaults/VAULT
 /multipart-uploads/UPLOAD_MID [S]#
x-amz-archive-description:
 ARCHIVE_DESC [C]
UPLOAD.ArchiveDescription         #'ARCHIVE_DESC'
UPLOAD.CreationDate               #'DATE'

PART_CONTENTS                     #PART contents, as is

UPLOAD.Parts                      #PART_ARR
                                  #Max 1e4
PART.RangeInBytes                 #STR
Content-Range: STR [C]            #Same format as Range [C]

x-amz-archive-size: NUM [C]       #Total size
x-amz-part-size: NUM [C]          #NUM. PART size.
UPLOAD.PartSizeInBytes            #Min 1MB, max 4GB. Must be power of 2

x-amz-content-sha256: HASH [C]    #Like simple upload
PART.SHA256TreeHash               #
x-amz-sha256-tree-hash: STR [C|S] #Like simple upload


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        READING ARCHIVE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



POST /VAULT/jobs                  #Initiate a job. Request OBJ.jobParameters depends on OBJ.jobParameters.Type:
initiateJob()                     #"archive-retrieval" (read an archive):
                                  #  - Type "archive-retrieval"
                                  #  - Description JOB_DESC_STR
                                  #  - SNSTopic TOPIC_SNS_ARN:
                                  #     - to notify the completion (same as setVaultNotifications() but on a job-basis
                                  #  - ArchiveId ARCHIVE_MID
                                  #  - RetrievalByteRange STR:
                                  #     - same as Range [C] syntax
                                  #     - goal is to spread out retrieval time (for pricing purpose)
                                  #     - part size must be integer in MB
                                  #"inventory-retrieval" (list archives):
                                  #  - Type "inventory-retrieval"
                                  #  - Description JOB_DESC_STR
                                  #  - SNSTopic TOPIC_SNS_ARN:
                                  #  - Format "CSV|JSON" (def: "JSON")
                                  #  - InventoryRetrievalParameters:
                                  #     - StartDate|EndDate DATE_STR: for archives created then (optional)
                                  #     - Limit|Marker: paginates
                                  #Listing is according to last listing, which is done every 24 hours
                                  #Returns response headers:
                                  #  - Location /ACCOUNT_ID/vaults/VAULT/jobs/JOB_ID [S]
                                  #  - x-amz-job-id JOB_ID [S]
GET /VAULT/jobs                   #Can use request parameters:
listJobs()                        #  - completed BOOL: only return [non-]completed jobs
                                  #  - statuscode "InProgress|Succeeded|Failed": only return jobs with this StatusCode
                                  #Res: JobList JOB_ARR
GET /VAULT/jobs/JOB_ID
describeJob()                     #Returns JOB_OBJ
GET /VAULT/jobs/JOB_ID/output     #Returns result of a job (if it completed). JOB_ID expires 24 hours after it completed.
getJobOutput()                    #If "archive-retrieval" or CSV "inventory-retrieval", returns raw response body.
                                  #If JSON "inventory-retrieval", returns:
                                  #  - VaultARN ARN
                                  #  - InventoryDate DATE_STR
                                  #  - ArchiveList OBJ_ARR:
                                  #     - ArchiveId ARCHIVE_MID
                                  #     - ArchiveDescription ARCHIVE_DESC_STR
                                  #     - CreationDate DATE_STR
                                  #     - Size NUM
                                  #     - SHA256TreeHash STR
                                  #Can ask for Range [C]. Will return response headers:
                                  #  - Content-Range [S]
                                  #  - x-amz-sha256-tree-hash [S] (OBJ.checksum in JavaScript SDK)
                                  #  - Status code is 200 if last part, 206 if not (can use OBJ.status in JavaScript SDK)
                                  #Set Content-Type [S] to "application/octet-stream", "text/csv" or "application/json"

JOB.Action "ArchiveRetrieval|InventoryRetrieval"
JOB.Completed BOOL
JOB.StatusCode "InProgress|Succeeded|Failed"
JOB.StatusMessage STR
JOB.VaultARN ARN
JOB.JobId JOB_ID
JOB.CreationDate DATE_STR
JOB.JobDescription JOB_DESC_STR (instead of Description)
JOB.RetrievalByteRange STR

AJOB                              #JOB with Action 'ArchiveRetrieval'
AJOB.ArchiveId ARCHIVE_MID
AJOB.ArchiveSizeInBytes NUM
AJOB.[Archive]SHA256TreeHash STR
AJOB.CompletionDate DATE_STR

IJOB                              #JOB with Action 'InventoryRetrieval'
IJOB.InventorySizeInBytes NUM
IJOB.InventoryRetrievalParameters (only if pagination)

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      VAULT NOTIFICATIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /VAULT
 /notification-configuration      #Req: vaultNotificationConfig VAULT_NOTIF
setVaultNotifications()           #Res: empty
GET /VAULT
 /notification-configuration      #Req: empty
getVaultNotifications()           #Res: VAULT_NOTIF
DELETE /VAULT
 /notification-configuration      #Req: empty
deleteVaultNotifications()        #Res: empty

VAULT_NOTIF                       #SNS notification when async job is done
VAULT_NOTIF.SNSTopic              #TOPIC_ARN
VAULT_NOTIF.Events                #'EVENT'_ARR, among:
                                  #  - 'ArchiveRetrievalCompleted'
                                  #  - 'InventoryRetrievalCompleted'
