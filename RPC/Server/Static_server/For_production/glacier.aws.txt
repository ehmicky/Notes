
           
   GLACIER  
           



VERSION ==>                   #2013-12-31

GOAL ==>                      #Like S3 but for not frequent backups, few objects, almost never retrieval, high storage size:
                              #  - three times cheaper storage costs
                              #     - but metadata is 40KB/object, not 8KB like S3 (so should zip files)
                              #     - always pay first three months, even if deleted during that time
                              #  - same transfer costs
                              #  - writes 10 times more expensive
                              #  - reads like listing are same price
                              #  - other reads (like restoring) are:
                              #     - 300 times more expensive, but it should be almost nothing if only few a month
                              #     - with additional cost GB/day, using highest daily average of the month
                              #        - Substract 0.16%/total stored size from it (free)
                              #        - So should spread over time as much as possible to make it fit in the free 0.16%
                              #  - reads much slower (min. 5 hours)
                              #If keeping few number of objects and transactions with high storage size, will be about three
                              #times cheaper than S3 providing not retrieving too much and can spread over time a lot.

S3 ==>                        #Can use Lifecycle with S3 to create|restore Glacier, which helps transition from S3 to Glacier,
                              #but has less features than using Glacier directly (no control on how long to restore, etc.)
                              #Should use Glacier for objects that don't need to use S3 in the first place.

LIMITS ==>                    #Vault:
                              #  - 1000 vaults
                              #  - unlimited archives
                              #  - Name [[:alnum:]_-.]
                              #Archive:
                              #  - 4GB size, 40TB if Multipart write.

ARN ==>                       #  - vault: "arn:aws:glacier:REGION:ACCOUNT_ID:vaults/VAULT" (can include *)
                              #  - archive: none. But can assign Archive permissions (e.g. deleteArchive) to a vault.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST ==>                      #Characteristics:
                              #  - "Unusual" REST API.
                              #  - Uses JSON not XML.
                              #  - Sometimes uses request|response headers (like S3)
                              #Domain: https://glacier[.REGION].amazonaws.com/ACCOUNT_ID/vaults/
                              #Resources:
                              #  - Vault:
                              #     - like S3 bucket
                              #     - .../VAULT
                              #  - Archive:
                              #     - like S3 object
                              #     - .../VAULT/archives/ARCHIVE_ID
                              #  - MultipartUpload:
                              #     - In-process multipart write
                              #     - .../VAULT/multipart-uploads/UPLOAD_ID
                              #  - Job:
                              #     - In-process retrieval or listing operation (not normal|multipart write)
                              #     - .../VAULT/jobs/JOB_ID
                              #  - Notification:
                              #     - SNS notification when job is done
                              #     - .../VAULT/jobs/JOB_ID/notification-configuration
                              #Multipart write, retrieving an archive, listing a vault is async (takes several hours)
                              #Uses x-amz-glacier-version [C]
                              #waitFor() STATE:
                              #  - vault[Not]Exists: checks describeVault() every 3 seconds.

JAVASCRIPT SDK ==>            #Must use REQ_OBJ:
                              #  - vaultName VAULT (for all resources, except listVaults())
                              #  - archiveId ARCHIVE_ID (for Archive resource)
                              #  - jobId JOB_ID (for Job resource)
                              #Request body requires an extra englobbing OBJ name in JavaScript SDK, written directly in this
                              #doc.

PAGINATION ==>                #Uses query variables:
                              #  - limit NUM (max|def: 1000) (like max-keys in S3)
                              #  - marker STR, also returned as Marker STR (null if no pagination)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             VAULT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET .../                      #Returns: VaultList VAULT_OBJ_ARR:
listVaults()                  #  - CreationDate DATE_STR
                              #  - LastInventoryDate DATE_STR (null if no inventory date)
                              #  - NumberOfArchives NUM (0 if no inventory date)
                              #  - SizeInBytes NUM (0 if no inventory date)
                              #  - VaultARN ARN_STR
                              #  - VaultName VAULT
                              #Uses pagination

PUT .../VAULT
createVault()                 #Returns response header Location /ACCOUNT_ID/vaults/VAULT [S]
DELETE .../VAULT
deleteVault()                 #
GET .../VAULT
describeVault()               #Returns VAULT_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      VAULT NOTIFICATIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT .../VAULT/                #Sends notification JOB_OBJ when a job is finished
notification-configuration    #Request body NOTIF_OBJ:
setVaultNotifications()       #  - vaultNotificationConfig:
                              #     - SNSTopic TOPIC_SNS_ARN
                              #     - Events EVENT_ARR, among "ArchiveRetrievalCompleted" and "InventoryRetrievalCompleted"
DELETE .../VAULT/
notification-configuration
deleteVaultNotifications()    #
GET .../VAULT/
notification-configuration
getVaultNotifications()       #Returns NOTIF_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        WRITING ARCHIVE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST .../VAULT/archives       #Creates an archive (raw request body).
uploadArchive()               #Can use x-amz-archive-description ARCHIVE_DESC_STR [C]
                              #Returns:
                              #  - archiveId ARCHIVE_ID
                              #  - location /ACCOUNT_ID/vaults/VAULT/archives/ARCHIVE_ID
                              #Content Hash:
                              #  - x-amz-content-sha256 [C]: normal hash of whole content
                              #  - x-amz-sha256-tree-hash [C|S]: hash of each hash of subparts down to 1MB.
                              #In JavaScript SDK:
                              #  - uses checksum (x-amz-content-sha256 [C]) and checksum (x-amz-sha256-tree-hash [S])
                              #  - can compute with GLACIER.computeChecksums(BUFFER|STR)->{linearHash|treeHash STR}
DELETE
.../VAULT/archives/ARCHIVE_ID
deleteArchive()               #


POST                          #Like uploadArchive(), but multipart (initiate it). Should use Multipart for anything > 100MB
.../VAULT/multipart-uploads   #Initiate writing several parts in a single UPLOAD_ID.
initiateMultipartUpload()     #UPLOAD_ID is valid 24 hours. Can initiate a new UPLOAD_ID afterwards.
                              #Max 10000 parts in a final archive.
                              #Must specify x-amz-part-size NUM (1MB-4GB, must be power of 2).
                              #Can use x-amz-archive-description ARCHIVE_DESC_STR [C]
                              #Returns response headers:
                              #  - Location /ACCOUNT_ID/vaults/VAULT/multipart-uploads/UPLOAD_ID [S]
                              #  - x-amz-multipart-upload-id UPLOAD_ID [S]
PUT .../VAULT/                #Upload multipart part (raw request body).
multipart-uploads/UPLOAD_ID   #Uses Content Hash the same way as uploadArchive().
uploadMultipartPart()         #Also uses Content-Range [C] (same format as Range [C]) ("range" in JavaScript SDK)
POST .../VAULT/               #Finishes a multipart write.
multipart-uploads/UPLOAD_ID   #Must use request headers:
completeMultipartUpload()     #  - x-amz-sha256-tree-hash STR [C]: hash of all hashes
                              #  - x-amz-archive-size STR [C]
                              #Returns same as uploadArchive()
DELETE .../VAULT/
multipart-uploads/UPLOAD_ID
abortMultipartUpload()        #
GET .../VAUT/multipart-uploads#List all UPLOAD. Paginates.
listMultipartUploads()        #Returns:
                              #  - UploadsList UPLOAD_OBJ_ARR:
                              #     - ArchiveDescription ARCHIVE_DESC_STR
                              #     - CreationDate DATE_STR
                              #     - MultipartUploadId UPLOAD_ID
                              #     - PartSizeInBytes NUM: initial x-amz-part-size
                              #     - VaultARN ARN
GET .../VAULT/                #List uploaded parts. Paginates.
multipart-uploads/UPLOAD_ID   #Returns UPLOAD_OBJ, with additional member:
listParts()                   #  - Parts OBJ_ARR:
                              #     - RangeInBytes STR
                              #     - SHA256TreeHash STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        READING ARCHIVE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST .../VAULT/jobs           #Initiate a job. Request OBJ.jobParameters depends on OBJ.jobParameters.Type:
initiateJob()                 #"archive-retrieval" (read an archive):
                              #  - Type "archive-retrieval"
                              #  - ArchiveId ARCHIVE_ID
                              #  - Description JOB_DESC_STR
                              #  - RetrievalByteRange STR:
                              #     - same as Range [C] syntax
                              #     - goal is to spread out retrieval time (for pricing purpose)
                              #     - part size must be integer in MB
                              #  - SNSTopic TOPIC_SNS_ARN:
                              #     - to notify the completion (same as setVaultNotifications() but on a job-basis
                              #"inventory-retrieval" (list archives):
                              #  - Type "inventory-retrieval"
                              #  - Description JOB_DESC_STR
                              #  - Format "CSV|JSON" (def: "JSON")
                              #  - SNSTopic TOPIC_SNS_ARN:
                              #  - InventoryRetrievalParameters:
                              #     - StartDate|EndDate DATE_STR: for archives created then (optional)
                              #     - Limit|Marker: paginates
                              #Listing is according to last listing, which is done every 24 hours
                              #Returns response headers:
                              #  - Location /ACCOUNT_ID/vaults/VAULT/jobs/JOB_ID [S]
                              #  - x-amz-job-id JOB_ID [S]
GET .../VAULT/jobs            #Paginates.
listJobs()                    #Can use request parameters:
                              #  - completed BOOL: only return [non-]completed jobs
                              #  - statuscode "InProgress|Succeeded|Failed": only return jobs with this StatusCode
                              #Returns:
                              #  - JobList JOB_OBJ_ARR
                              #JOB_OBJ is:
                              #  - all:
                              #     - Action "ArchiveRetrieval|InventoryRetrieval" (instead of Type)
                              #     - Completed BOOL
                              #     - StatusCode "InProgress|Succeeded|Failed"
                              #     - StatusMessage STR
                              #     - VaultARN ARN
                              #     - JobId JOB_ID
                              #     - CreationDate DATE_STR
                              #     - JobDescription JOB_DESC_STR (instead of Description)
                              #     - RetrievalByteRange STR
                              #  - "ArchiveRetrieval" only:
                              #     - ArchiveId ARCHIVE_ID
                              #     - ArchiveSizeInBytes NUM
                              #     - [Archive]SHA256TreeHash STR
                              #     - CompletionDate DATE_STR
                              #  - "InventoryRetrieval" only:
                              #     - InventorySizeInBytes NUM
                              #     - InventoryRetrievalParameters (only if pagination)
GET .../VAULT/jobs/JOB_ID
describeJob()                 #Returns JOB_OBJ
GET                           #Returns result of a job (if it completed). JOB_ID expires 24 hours after it completed.
.../VAULT/jobs/JOB_ID/output  #If "archive-retrieval" or CSV "inventory-retrieval", returns raw response body.
getJobOutput()                #If JSON "inventory-retrieval", returns:
                              #  - VaultARN ARN
                              #  - InventoryDate DATE_STR
                              #  - ArchiveList OBJ_ARR:
                              #     - ArchiveId ARCHIVE_ID
                              #     - ArchiveDescription ARCHIVE_DESC_STR
                              #     - CreationDate DATE_STR
                              #     - Size NUM
                              #     - SHA256TreeHash STR
                              #Can ask for Range [C]. Will return response headers:
                              #  - Content-Range [S]
                              #  - x-amz-sha256-tree-hash [S] (OBJ.checksum in JavaScript SDK)
                              #  - Status code is 200 if last part, 206 if not (can use OBJ.status in JavaScript SDK)
                              #Set Content-Type [S] to "application/octet-stream", "text/csv" or "application/json"
