
      
   S3  
      



TODO ==>
  - `select` SQL syntax
  - https://docs.aws.amazon.com/AmazonS3/latest/userguide/inventory-configure-bops.html
  - https://aws.amazon.com/s3/faqs/
  - CLI:
     - aws s3|s3api|s3control ...
     - aws help topics s3-config
     - aws help topics s3-faq
     - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-s3
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-s3-access-point.html
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-s3-mrap.html
  - JavaScript SDK:
     - @aws-sdk/lib-storage
  - Pulumi:
     - https://www.pulumi.com/registry/packages/aws-static-website/
  - Glacier:
     - add comments on Glacier to describe difference between using Glacier directly, or through S3
  - check https://aws.amazon.com/new for CloudWatch, Lambda, IAM, S3, etc.

VERSION ==>                       #2023-06-13
SVERSION                          #v20180820


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                          #Simple Storage Service

s3.amazonaws.com                  #SERVICE_DOMAIN for BUCKET-specific ACTIONs
BUCKET.s3.amazonaws.com           #"Virtual hosting". Same but using BUCKET as subdomain instead of /BUCKET as path.
                                  #Preferred: /BUCKET path is deprecated
                                  #Allows BUCKET-specific:
                                  #  - CNAME
                                  #  - top-level files: robots.txt, favicon.ico, etc.
                                  #  - same origin, CORS
                                  #Requires:
                                  #  - specifying REGION in subdomain
                                  #     - 301 redirection if not in right REGION
                                  #  - CNAME == 'BUCKET' exactly, e.g. BUCKET called 'www.example.com'
BUCKET.ACCOUNT_ID.s3-control
 .amazonaws.com/SVERSION
 /bucket/BUCKET                   #SERVICE_DOMAIN for BUCKET-specific ACTIONs on AWS Outposts
ACCOUNT_ID.s3-control             #SERVICE_DOMAIN for ACTIONs that not BUCKET-specific
 .amazonaws.com/SVERSION          #Some ACTIONs have two variants s3[-control]: BUCKET-specific, and not
x-amz-account-id: ACCOUNT_ID [C]  #Alternative to specifying ACCOUNT_ID in subdomain

FORMAT ==>                        #XML REST
                                  #Uses some REQ|RES headers

ERRORS ==>                        #OBJ_ARR: Code, Message, Resource, RequestId

REQ_ID                            #x-amz-request-id [S] + x-amz-id-2 [S]

PAGINATION ==>                    #
REQ.nextToken
RES.NextToken                     #'TOKEN'
REQ.continuation-token
RES.[Next]ContinuationToken       #'TOKEN', alternative syntax for some ACTIONs
REQ.PROP-marker                   #'TOKEN', alternative syntax for some ACTIONs
RES.[Next]PROPMarker              #Sometimes has multiple PROPs

RES.IsTruncated                   #BOOL. Not with RES.NextToken

REQ.maxResults                    #NUM (def: 100 with INVENTORY|ANALYTICS|S3_METRICS, 1000 otherwise)
REQ.max-PROPs
RES.MaxPROPs                      #NUM (def: 1000), alternative syntax for some ACTIONs
RES.PROPCount                     #NUM. Only set with some ACTIONs, together with RES.MaxPROPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRICING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRICING ==>                       #Storage space, per byte
                                  #  - 1$/43GB
                                  #  - free (first year): 5GB
                                  #  - 4% cheaper after 50TB, 9% cheaper after 500TB
                                  #  - cheaper StorageClass:
                                  #     - STANDARD_IA: 2x
                                  #     - ONEZONE_IA: 2.3x
                                  #     - GLACIER_IR: 5.7x
                                  #     - GLACIER: 6.4x
                                  #     - DEEP_ARCHIVE: 23x
                                  #  - INTELLIGENT_TIERING: 1$/4e5 OBJECTs (with >128KB)
                                  #  - min metadata per OBJECT:
                                  #     - 8KB for all
                                  #        - always priced as StorageClass STANDARD
                                  #     - some additional ones for STANDARD_IA|ONEZONE_IA|GLACIER_IR if file <128KB
                                  #     - 32KB more if GLACIER[_IR]|DEEP_ARCHIVE, with that StorageClass
                                  #        - i.e. better for multiple files tar'd, or single big files
                                  #Number of requests:
                                  #  - 1$/2e6 requests
                                  #  - free (first year): 2e4 requests
                                  #  - more expensive StorageClass:
                                  #     - STANDARD_IA|ONEZONE_IA: 2x for list|write, 2.5x for read
                                  #     - GLACIER_IR: 4x for list|write, 25x for read
                                  #     - GLACIER: 6x for list|write, 1x for read
                                  #     - DEEP_ARCHIVE: 10x for list|write, 1x for read
                                  #     - i.e. better for read-only files
                                  #Specific types:
                                  #  - delete: free
                                  #  - list|write: 10x more expensive
                                  #  - read|restore contents, additional:
                                  #     - STANDARD: free
                                  #     - STANDARD_IA|ONEZONE_IA: 1$/100GB
                                  #     - GLACIER_IR: 1$/33GB
                                  #     - GLACIER:
                                  #        - Bulk: free
                                  #        - Standard: 1$/2e4 requests, 1$/100GB
                                  #        - Expedited: 1$/1e2 requests, 1$/33GB
                                  #     - DEEP_ARCHIVE:
                                  #        - Bulk: 1$/4e4 requests, 1$/400GB
                                  #        - Standard: 1$/1e4 requests, 1$/50GB
                                  #     - i.e. better for rarely accessed files, e.g. backups
                                  #  - select:
                                  #     - input: 1$/500GB
                                  #        - GLACIER + Expedited: 10x more expensive
                                  #        - GLACIER + Standard: 4x more expensive
                                  #        - GLACIER + Bulk: 2x cheaper
                                  #        - DEEP_ARCHIVE: free
                                  #     - output: 1$/1400GB
                                  #        - GLACIER_IR, GLACIER + Expedited: 43x more expensive
                                  #        - STANDARD_IA|ONEZONE_IA, GLACIER + Standard: 14x more expensive
                                  #        - GLACIER + Bulk: 4x more expensive
                                  #        - DEEP_ARCHIVE: free
                                  #In|out traffic:
                                  #  - Internet -> S3: free
                                  #  - S3 -> Internet: 1$/11GB
                                  #     - free: 100GB
                                  #     - after 10TB: 5% cheaper
                                  #     - after 50TB: 20% cheaper
                                  #     - after 150TB: 50% cheaper
                                  #  - S3 -> same region: free
                                  #  - S3 -> CloudFront: free
                                  #  - S3 -> another region:
                                  #     - 4x cheaper
                                  #     - must be done explicitly (e.g. copying OBJECT)
                                  #  - ACCELERATION: 1$/25GB
                                  #     - for both in|out
                                  #     - regardless of whether from|to Internet|AWS
                                  #     - 2x more expensive for Internet -> S3 if client's REGION is not US|Europe|Japan
                                  #Max 500 TB/month (flexible)
                                  #CAPACITY: 100$/month
                                  #OBJECT TAGs: 1$/1e6 TAGs
                                  #INVENTORY: 1$/4e8 OBJECTs
                                  #LOGGING: free
                                  #ANALYTICS: 1$/1e7 OBJECTs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PERMISSIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSIONS ==>                   #Some unusual:
                                  #  - DeleteBucketCors -> PutCORSConfiguration
                                  #  - Get|PutBucketCors -> Get|PutBucketCORS
                                  #  - DeleteBucketLifecycle -> PutLifecycleConfiguration
                                  #  - Get|PutBucketLifecycle -> Get|PutLifecycleConfiguration
                                  #  - DeleteBucketTagging -> PutBucketTagging
                                  #  - If VersionId in request parameter, Object -> ObjectVersion
                                  #  - HeadBucket -> ListBucket
                                  #  - Head* -> Get*
                                  #  - PostObject, CopyObject, Multipart writes (except AbortMultipartUpload) -> PutObject
                                  #  - ListBuckets -> ListAllMyBuckets
                                  #  - ListObjects, ListParts, ListObjectVersions -> GetObject
                                  #  - DeleteBucketTagging -> PutBucketTagging
                                  #  - GetBucketLocation -> GetBucket
                                  #  - DeleteObjects -> DeleteObject
                                  #  - ListMultipartUploads -> ListMultipartUploadParts
                                  #  - Get|PutRequestPayment -> Get|PutBucketRequestPayment

AmazonS3FullAccess                #AWS managed POLICY. Grants all s3[-object-lambda] PACTIONs
AmazonS3ReadOnlyAccess            #Same but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        HIGH-LEVEL CLI         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws s3 COMMAND [ARGS...]          #High-level S3 CLI.
                                  #Globbing not possible as is, but can use --exclude "*" --include "GLOB"
--debug                           #To see underlying HTTP

PATH|FILE|DIR                     #Local file path
S3PATH|S3FILE|S3DIR               #s3://BUCKET, s3://BUCKET/OBJECT or s3://BUCKET/PATH

aws s3 cp|mv
[S3]PATH [S3]PATH2                #
--recursive                       #If [S3]DIR, targets also all contained files.
--exclude|include GLOB_STR        #To use with --recursive. Priority on the one on the right.
--source-region STR               #

--storage-class STR               #"STANDARD|REDUCED_REDUDANCY"
--grants "STR=STR2=STR3"...       #STR is "read|write[acl]" or "full"
                                  #STR2 is "uri|emailaddress|id", specified by STR3.
--acl 'ACL'                       #
--website-redirect STR            #
--sse                             #
--expires STR                     #
--cache-control STR               #
--content-disposition STR         #
--content-encoding STR            #
--content-language STR            #
--no-guess-mime-type              #
--content-type STR                #

--follow-symlinks                 #
--dryrun                          #
--quiet                           #

aws s3 rm S3PATH                  #
--recursive                       #
--exclude|include GLOB_STR        #
--dryrun                          #
--quiet                           #

aws s3 sync [S3]PATH [S3]PATH2    #Make dest path copy of source path, possibly erasing some stuff in PATH2.
                                  #Like aws cp but only if:
                                  #  - files have different size.
                                  #Or if (unless --size-only):
                                  #  - file doesn't exist in dest path
                                  #  - file has newer mtime (unless --exact-timestamps)
                                  #Same options as aws cp|mv, plus:
--delete                          #If file exist in dest path, but not in source path, remove it.

aws s3 ls [S3BUCKET]              #If no S3BUCKET, do listAllBuckets() (show ctime+BUCKET)
                                  #Otherwise listBucket() (show mtime+size+OBJECT)
--recursive                       #

aws s3 mb S3BUCKET                #createBucket()
aws s3 rb S3BUCKET                #deleteBucket(). If OBJECT exists and --force, deleteObject() first.

aws s3 website S3BUCKET
--index|error-document STR        #Modifies it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BUCKET             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET                       #Req: BUCKET
CreateBucket()                    #  - no Name, CreationDate
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-object-ownership [C]
                                  #    x-amz-bucket-object-lock-enabled [C]
                                  #Res: Location [S]
HEAD /BUCKET                      #Req: empty
HeadBucket()                      #Res: x-amz-bucket-region [S], x-amz-access-point-alias [S]
GET /                             #Req: empty
ListBuckets()                     #Res: BUCKETS_LIST
                                  #  - no BUCKET.LocationConstraint
                                  #No pagination
DELETE /BUCKET                    #Req: empty
DeleteBucket()                    #Res: empty
                                  #BUCKET must be empty first

BUCKETS_LIST.Buckets              #BUCKET_ARR
BUCKET                            #Like a folder
                                  #Max 100
                                  #WAIT (HeadBucket()) Bucket[Not]Exists: when it exists

BUCKET_ARN                        #arn:aws:s3:::BUCKET
Location: /BUCKET [S]
BUCKET.Name                       #'BUCKET'
                                  #3-63 chars, [[:alnum:]-.]
                                  #Must be unique across any ORG
BUCKET.CreationDate               #'DATE'

PUT /BUCKET?tagging               #Req: TagSet TAG_PAIRS
PutBucketTagging()                #Res: empty
GET /BUCKET?tagging               #Req: empty
GetBucketTagging()                #Res: TagSet TAG_PAIRS
DELETE /BUCKET?tagging            #Req: empty
DeleteBucketTagging()             #Res: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT READ          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT                #Req:
GetObject()                       #  - READ_OBJECT
                                  #     - READ_OBJECT.response-*: must be authenticated
                                  #  - Range [C], If-[None-]Match [C], If-[Un]modified-Since [C],
                                  #    x-amz-server-side-encryption-customer-* [C], x-amz-checksum-mode [C]
                                  #Res:
                                  #  - RAW_OBJECT
                                  #  - Content-Range [S], Accept-Ranges [S], Content-Type [S], Content-Encoding [S],
                                  #    Content-Language [S], ETag [S], Last-Modified [S], Expires [S], Cache-Control [S],
                                  #    Content-Disposition [S], Content-Length [S], x-amz-meta-* [S], x-amz-version-id [S], x-amz-delete-marker [S],
                                  #    x-amz-restore [S], x-amz-restore-request-date [S], x-amz-archive-status [S],
                                  #    x-amz-expiration [S], x-amz-missing-meta [S], x-amz-website-redirect-location [S],
                                  #    x-amz-tagging-count [S], x-amz-server-side-encryption-* [S], x-amz-checksum-ALGO [S],
                                  #    x-amz-storage-class [S], x-amz-replication-status [S], x-amz-mp-parts-count [S]
                                  #    x-amz-object-lock* [S]
HEAD /BUCKET/OBJECT               #Req: like GetObject()
HeadObject()                      #  - no READ_OBJECT.response-*
                                  #Res: like GetObject()
GET /BUCKET/OBJECT?attributes     #Req:
GetObjectAttributes()             #  - like GetObject()
                                  #     - only versionId, x-amz-server-side-encryption-customer-* [C]
                                  #  - x-amz-object-attributes [C]
                                  #  - same pagination as ListParts(), but as x-amz-max-parts [C], x-amz-part-number-marker [C]
                                  #Res: OBJECT
                                  #  - only ETag, StorageClass, Size -> ObjectSize, ChecksumALGO -> Checksum.ChecksumALGO
                                  #  - only Last-Modified [S], x-amz-version-id [S], x-amz-delete-marker [S]
                                  #  - ObjectParts MUPLOAD: only Parts and pagination

OBJECT                            #Like a file
                                  #WAIT (HeadObject()) Object[Not]Exists: when it exists
                                  #Unlimited amount
OBJECT_ARN                        #arn:aws:s3:::BUCKET/OBJECT
OBJECT.Bucket                     #'BUCKET'
OBJECT.Key                        #'OBJECT', its name. Also named "key".
                                  #Is a file path, allows virtual "subfolders".
                                  #Due to internal storage details:
                                  #  - more performant when start with a random value
                                  #  - as opposed to serial integer, timestamp, etc.
                                  #Max 1KB, [[:alnum:]-_.*'()!] (should URL encode others)
OBJECT.Location                   #'.../BUCKET/OBJECT' URL

Range: bytes=NUM-NUM2 [C]
Content-Range:
 bytes NUM-NUM2/NUM3 [S]
Accept-Ranges: bytes [S]          #See HTTP doc
READ_OBJECT.partNumber            #NUM, 1-based index, max 1e4
x-amz-mp-parts-count: NUM3 [S]    #Total NUM3 of parts

RAW_OBJECT                        #OBJECT, as is
                                  #Max 5GB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TORRENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT?torrent        #Req: empty
GetObjectTorrent()                #Res: TORRENT

TORRENT                           #OBJECT as Content-Type: application/x-bittorrent [S]
                                  #Reading torrent requires PACTION s3:GetObject
                                  #Goal: readers upload to each other:
                                  #  - less server egress
                                  #  - faster download speed
                                  #Max OBJECT content 5GB instead of 5TB
Content-Disposition: attachment;
 filename=OBJECT.torrent; [S]     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT LIST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET                       #Req: OBJECTS
ListObjectsV2()                   #  - CamelCase -> dash-case
                                  #  - only EncodingType, StartAfter, Prefix, Delimiter, FetchOwner
                                  #  - x-amz-optional-object-attributes [C]
                                  #Res: OBJECTS
                                  #  - no FetchOwner
                                  #Paginates OBJECTS.Contents with ContinuationToken, MaxKeys, KeyCount

OBJECTS.Name                      #'BUCKET'

OBJECTS.EncodingType              #'url'. Percent encode the OBJECTS.* with value 'OBJECT'
                                  #I.e. for Key|StartAfter|Prefix|Delimiter
                                  #Needed if contains characters not allowed by XML 1.0

OBJECTS.StartAfter                #STR. Only include if 'OBJECT' is STR, or lexicographically after
OBJECTS.Prefix                    #STR. Only include if 'OBJECT' start with STR
OBJECTS.Delimiter                 #STR separating 'OBJECT' "subfolders". This is usually '/'
                                  #When specified, distinguishes between:
                                  #  - pseudo-regular files:
                                  #     - 'OBJECT' starts with Prefix, but does not include Delimiter
                                  #     - returned in OBJECTS.Contents
                                  #  - pseudo-directories:
                                  #     - 'OBJECT' starts with Prefix, but includes Delimiter
                                  #     - returned in OBJECTS.CommonPrefixes
OBJECTS.CommonPrefixes            #Unique COMMON_PREFIX_ARR
                                  #Max 1e3
COMMON_PREFIX.Prefix              #Prefix + 'OBJECT' until next Delimiter (included)

OBJECTS.Contents                  #OBJECT_ARR
                                  #  - no Bucket, Location, ChecksumALGO, VersionId, IsLatest
x-amz-object-attributes:
 VAR,... [C]
x-amz-optional-object-attributes:
 VAR,... [C]                      #Only return OBJECT.VAR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req:
PutObject()                       #  - RAW_OBJECT
                                  #  - Expect [C], Content-Type [C], Content-Encoding [C], Content-Language [C], Expires [C],
                                  #    Cache-Control [C], Content-Disposition [C], x-amz-meta-* [C], x-amz-storage-class [C],
                                  #    x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-website-redirect-location [C],
                                  #    x-amz-tagging [C], x-amz-server-side-encryption-* [C], x-amz-checksum-ALGO [C], x-amz-object-lock* [C]
                                  #  - max 8KB request headers
                                  #Res:
                                  #  - ETag [S], x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S],
                                  #    x-amz-checksum-ALGO [S]

Expect: 100-continue [C]          #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      BROWSER UPLOAD MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET                      #Req: BUPLOAD
PostObject()                      #  - BUPLOAD.HEADER: any PutObject() request header
                                  #     - strip x-amz-* prefix for: x-amz-acl [C], x-amz-tagging [C]
                                  #Res:
                                  #  - OBJECT
                                  #     - only Bucket, Key, Location
                                  #  - same headers as PutObject()
                                  #  - success_action_redirect [S], Redirect [S]
                                  #Not available in JavaScript SDK, but available with AWS Amplify

BUPLOAD                           #Like PutObject() but meant to be performed by a <form> submit (i.e. client-side)
                                  #Must use Content-Type: multipart/form-data [C]
                                  #Max 20KB
BUPLOAD.key                       #'OBJECT'
BUPLOAD.file                      #RAW_OBJECT
                                  #Must be last field
${filename}                       #Anywhere in BUPLOAD, replaced by FILENAME from BUPLOAD.file, i.e.:
                                  #  - Content-Disposition: form-data; name="file"; filename="FILENAME"
                                  #  - filename used in <form>

BUPLOAD.x-amz-signature|algorithm #Authenticate request (see AWS signature version 4 doc)
 |credential|security-token|date  #If not set, anonymous request

BUPLOAD.success_action_redirect
success_action_redirect: URL [S]
Redirect: URL [S]                 #URL to redirect to when response code is success_action_status NUM
BUPLOAD.success_action_status     #200, 201 or 204 (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     BROWSER UPLOAD POLICY     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUPLOAD.policy                    #BUPLOAD_POLICY, as Base64 JSON
                                  #Required with authenticated requests
                                  #Enforces values|constraints for BUPLOAD.*
                                  #  - so that client-side can upload, but not change intended request
BUPLOAD_POLICY.expiration         #'DATE'. After this, BUPLOAD_POLICY denies all.
BUPLOAD_POLICY.conditions         #ARR of either:
                                  #  - ['OP', 'VAL1', 'VAL2']
                                  #  - { PROP: 'VAL2' }: same as ['eq', '$PROP', 'VAL2']
                                  #Must include at least one PROP|$PROP for each BUPLOAD.PROP
                                  #  - except BUPLOAD: file, x-amz-signature, policy
                                  #  - also except BUPLOAD.x-ignore-PROP: behaves like BUPLOAD.PROP otherwise

PROP                              #Value of BUPLOAD.PROP. Can also be:
                                  #  - bucket 'BUCKET': as specified in request URI
$PROP                             #Can be included anywhere, to use its value

OP 'eq'                           #VAL1 == VAL2
OP 'starts-with'                  #VAL1 starts with VAL2
                                  #Can use 'VAL1,...' with Content-Type [C]
                                  #VAL2 can be '' to mean "always allow"
                                  #Only with PROP: acl, Cache-Control, Content-*, Expires, key, success_action_redirect, x-amz-meta-*
OP 'content-length-range'         #VAL1 <= Content-Length [S] <= VAL2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   BROWSER UPLOAD SIGNATURE    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-signature: STR [C]          #Unlike other ACTIONs, request body used in signature is BUPLOAD_POLICY
                                  #I.e. when authenticating with a pre-signed URL, client-side cannot modify BUPLOAD_POLICY
                                  #Using a pre-signed URL is recommended since this is done client-side

@aws-sdk/s3-presigned-post        #Part of JavaScript SDK
createPresignedPost
 (CLIENT, OPTS)->>OBJ             #Create pre-signed URL for PostObject()
OPTS.Bucket                       #'BUCKET'
OPTS.Key                          #BUPLOAD.key
OPTS.Expires                      #BUPLOAD_POLICY.expiration, as NUM (in secs, def: 1h)
OPTS.Conditions                   #BUPLOAD_POLICY.conditions
OPTS.Fields                       #BUPLOAD.PROPs, as OBJ
OBJ.fields                        #OBJ. Same but adds:
                                  #  - policy 'BASE64_JSON'
                                  #  - key 'OBJECT'
                                  #  - X-Amz-* of signature
OBJ.url                           #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?uploads       #Req: same headers as PutObject()
CreateMultipartUpload()           #  - x-amz-checksum-ALGO [C] -> x-amz-checksum-algorithm [C]
                                  #Res:
                                  #  - MUPLOAD
                                  #     - only Bucket, Key, UploadId
                                  #  - same headers as PutObject()
                                  #     - no x-amz-version-id [S]
                                  #     - x-amz-checksum-ALGO [S] -> x-amz-checksum-algorithm [S]
                                  #  - x-amz-abort* [S]
PUT /BUCKET/OBJECT                #Req:
UploadPart()                      #  - RAW_MPART
                                  #  - Expect [C], x-amz-server-side-encryption-customer-* [C], x-amz-checksum-ALGO [C]
                                  #  - query variables: MUPLOAD.uploadId, MPART.partNumber
                                  #Res: ETag [S], x-amz-server-side-encryption-* [S], x-amz-checksum-ALGO [S]
GET /BUCKET/OBJECT                #Req: MUPLOAD
ListParts()                       #  - only uploadId, x-amz-server-side-encryption-customer-* [C]
                                  #Res:
                                  #  - MUPLOAD
                                  #     - no Initiated
                                  #  - x-amz-abort* [S]
                                  #Paginates MUPLOAD.Parts with PartNumberMarker, MaxParts
GET /BUCKET                       #Req: MUPLOADS
ListMultipartUploads()            #  - CamelCase -> dash-case
                                  #  - no Bucket, CommonPrefixes, Uploads
                                  #Res: MUPLOADS
                                  #  - MUPLOAD.Bucket -> MUPLOADS.Bucket
                                  #  - no MUPLOAD.Parts
                                  #Paginates MUPLOADS.Uploads with UploadIdMarker + KeyMarker, MaxUploads
POST /BUCKET/OBJECT               #Req: MUPLOAD
CompleteMultipartUpload()         #  - only uploadId (as query variable)
                                  #  - only Parts
                                  #     - no LastModified, Size
                                  #  - x-amz-server-side-encryption-customer-* [C], x-amz-checksum-ALGO [C]
                                  #Res:
                                  #  - OBJECT
                                  #     - only Bucket, Location, ETag, LastModified, ChecksumALGO
                                  #  - x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S]
DELETE /BUCKET/OBJECT             #Req: MUPLOAD
AbortMultipartUpload()            #  - only uploadId
                                  #Res: empty

MUPLOADS.Uploads                  #MUPLOAD_ARR
MUPLOADS.EncodingType|Prefix
 |Delimiter|CommonPrefixes        #Like OBJECTS, except Contents -> Uploads

MUPLOAD                           #Upload OBJECT in multiple requests
                                  #Max OBJECT contents 5TB instead of 5GB
MUPLOAD.UploadId                  #MUPLOAD_MID
MUPLOAD.Bucket                    #'BUCKET'
MUPLOAD.Key                       #'OBJECT'
MUPLOAD.Initiated                 #'DATE'
MUPLOAD.Initiator                 #PRINCIPAL

RAW_MPART                         #OBJECT part, as is
                                  #Min 5MB, max 5GB

MUPLOAD.Parts                     #MPART_ARR
MPART.partNumber                  #NUM. 1-based index.
                                  #Max 1e4
MPART.Size                        #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT COPY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req:
CopyObject()                      #  - like PutObject()
                                  #     - x-amz-checksum-ALGO [C] -> x-amz-checksum-algorithm [C]
                                  #  - x-amz-copy-source* [C], x-amz-metadata-directive [C], x-amz-tagging-directive [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res:
                                  #  - OBJECT
                                  #     - only ETag, LastModified, ChecksumALGO
                                  #  - x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S],
                                  #    x-amz-copy-source* [S]
PUT /BUCKET/OBJECT                #Req:
UploadPartCopy()                  #  - like uploadPart()
                                  #     - no x-amz-checksum-ALGO [C]
                                  #  - x-amz-copy-source* [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res: like copyObject()
                                  #  - no x-amz-expiration [S], x-version-id [S]

x-amz-copy-source:                #Copy OBJECT
 /BUCKET/OBJECT [C]               #New OBJECT's ACL is 'private'

x-amz-metadata-directive:         #If 'COPY' (def):
 COPY|REPLACE [C]                 #  - only allows setting request headers related to SSE, storage class and x-amz-website-redirect-location [C]
                                  #  - those headers are erased if not specified
x-amz-tagging-directive: STR [C]  #Same for TAGs

x-amz-copy-source-HEADER: STR [C] #Same as [x-amz-]HEADER: STR [C] but targetting the copied OBJECT instead, from x-amz-copy-source [C]
                                  #For HEADERs:
                                  #  - If-[Un]modified-Since [C], If-[None-]Match [C], Range [C],
                                  #    x-amz-server-side-encryption-customer-* [C]
                                  #  - called x-amz-source-HEADER instead: x-amz-expected-bucket-owner [C]
x-amz-copy-source-HEADER: STR [S] #Reflects same request header [C]
                                  #Only for version-id, to distinguish from x-amz-version-id [S] (of new OBJECT)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OBJECT DELETE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETE /BUCKET/OBJECT             #Req:
DeleteObject()                    #  - OBJECT
                                  #     - only versionId
                                  #  - x-amz-mfa [C], x-amz-bypass-governance-retention [C]
                                  #Res: x-amz-version-id [S], x-amz-delete-marker [S]
POST /BUCKET?delete               #Req:
DeleteObjects()                   #  - DELETE_OBJECTS
                                  #     - no Errors, DeleteMarker*
                                  #  - x-amz-mfa [C], x-amz-bypass-governance-retention [C]
                                  #Res: DELETE_OBJECTS
                                  #  - no Quiet
                                  #  - Objects -> Deleted

DELETE_OBJECTS.Objects            #DELETE_OBJECT_ARR
                                  #Max 1e3
DELETE_OBJECT.Key                 #'OBJECT'

DELETE_OBJECTS.Quiet              #BOOL. If true (def: false), only return OBJECTs which errored
DELETE_OBJECTS.Errors             #DELETE_ERROR_ARR
DELETE_ERROR.Key                  #'OBJECT'
DELETE_ERROR.Code                 #STR
DELETE_ERROR.Message              #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CONTENT LENGTH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OBJECT.Size                       #NUM, in bytes

Content-Length: NUM [C]           #Like other SERVICEs: when there is a request payload

READ_OBJECT
 .response-content-encoding
Content-Encoding: STR [C|S]       #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONTENT TYPE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-content-type
Content-Type: STR [C|S]           #See HTTP doc

READ_OBJECT
 .response-content-disposition
Content-Disposition: STR [C|S]    #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-expires
Expires: DATE [C|S]               #See HTTP doc. Def: none
READ_OBJECT.response-cache-control
Cache-Control: STR [C|S]          #See HTTP doc. Def: none

OBJECT|MPART.LastModified
Last-Modified: DATE [S]           #'DATE'. When upload starteed
If-[Un]modified-Since: DATE [C]   #See HTTP doc

OBJECT|MPART.ETag                 #'ETAG'. MD5 checksum
ETag: ETAG [S]                    #Same behavior as x-amz-checksum-ALGO
                                  #  - including when using SSE-KMS, SSE-C or multipart
If-[None-]Match: ETAG [C]         #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CHECKSUMS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALGO                              #One of 'CRC32[C]', 'SHA1', 'SHA256'
x-amz-checksum-algorithm: ALGO [C]#Automatically generate x-amz-checksum-ALGO [C]
x-amz-sdk-checksum-algorithm:     #Same but:
 ALGO [C]                         #  - noop unless used through SDK or CLI
                                  #  - ALGO can be MD5, to generate Content-MD5 [C] instead
                                  #Can be used:
                                  #  - anywhere x-amz-checksum-ALGO [C] or Content-MD5 [C] is possible
                                  #  - except when x-amz-checksum-algorithm [C] is used instead
OBJECT|MUPLOAD.ChecksumAlgorithm  #ALGO

x-amz-checksum-ALGO [C]           #'BASE64_HASH'. Send checksum, for integrity: fail on checksum mismatch.
                                  #Only of the data, not metadata|headers
                                  #If SSE-KMS or SSE-C (but not SSE-S3):
                                  #  - checksum of encrypted data instead
                                  #  - if SSE-C: must pass x-amz-server-side-encryption-customer-* [C] to
                                  #    ListParts(), CompleteMultipartUpload()
                                  #If multipart:
                                  #  - each MPART has own checksum
                                  #  - OBJECT uses:
                                  #     - checksum of concatenation of MPART checksums
                                  #     - appended with -NUM (number of MPARTs)
                                  #  - i.e. CopyObject|UploadPartCopy() can change checksum if source used multipart,
                                  #    but not target, or vice-versa

x-amz-checksum-mode: ENABLED [C]  #Set x-amz-checksum-ALGO [S]
x-amz-checksum-ALGO [S]
OBJECT|MPART.ChecksumALGO         #'BASE64_HASH'

Content-MD5: MD5_HASH [C]         #Alternative to x-amz-checksum-ALGO [C]
                                  #Matches ETag [S], except when using SSE-KMS, SSE-C or multipart
                                  #  - unlike x-amz-checksum-ALGO [C], always checksum of the whole data
                                  #Pros:
                                  #  - can be used in any request with a body, as opposed to only specific ACTIONs
                                  #  - can match ETag [S]
                                  #  - standard
                                  #Cons:
                                  #  - when not matching ETag [S], cannot retrieve checksum
                                  #  - no MPART checksum, i.e. integrity failures happen only at end of multipart upload


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT
 .response-content-language
Content-Language: STR [C|S]       #See HTTP doc

Server: AmazonS3 [S]              #

x-amz-meta-*: VAL [C|S]           #'VAL'. Arbitrary metadata
RESTORE_OUTPUT.UserMetadata.VAR   #If set multiple times, joined as 'VAL,...'
                                  #Key is lowercased
                                  #Max 2KB

x-amz-missing-meta: NUM [S]       #NUM of x-amz-meta-* with invalid keys


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT TAGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT?tagging        #Req: Tags TAG_PAIRS
PutObjectTagging()                #Res: x-amz-version-id [S]
                                  #Max 10 TAGs per OBJECT
GET /BUCKET/OBJECT?tagging        #Req: empty
GetObjectTagging()                #Res: Tags TAG_PAIRS, x-amz-version-id [S]
DELETE /BUCKET/OBJECT?tagging     #Req: empty
DeleteObjectTagging()             #Res: x-amz-version-id [S]

x-amz-tagging: TAG=VAL&... [C]    #
x-amz-tagging-count: NUM [S]      #

RESTORE_OUTPUT.Tagging            #TAG_PAIRS

FILTER.Tags                       #TAG_PAIRS. Only if TAGs match


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      LOCATION CONSTRAINT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET?location              #Req: empty
GetBucketLocation()               #Res: BUCKET
                                  #  - only LocationConstraint

x-amz-bucket-region: REGION [S]   #'REGION' (def: 'us-east-1') where BUCKET is located
BUCKET.LocationConstraint         #Can differ from REGION of ACTION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACCELERATE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?accelerate            #Req: ACCELERATE
PutBucketAccelerateConfiguration()#Res: empty
GET /BUCKET?accelerate            #Req: empty
GetBucketAccelerateConfiguration()#Res: ACCELERATE

ACCELERATE.Status                 #undefined (def, i.e. disabled), 'Enabled' or 'Suspended'
                                  #Enables BUCKET.s3-accelerate.amazonaws.com
                                  #Takes up to 30m to change

BUCKET.s3-accelerate.amazonaws.com#Like BUCKET.s3.amazonaws.com but faster
                                  #Done by using CloudFront network to route requests instead of normal internet route
                                  #Especially fast when clients are far from BUCKET's REGION
                                  #Can benchmark speed at https://s3-accelerate-speedtest.s3-accelerate.amazonaws.com/en/accelerate-speed-comparsion.html
                                  #  - test (from my location)
                                  #     - same speed: Europe
                                  #     - 25% faster: US East
                                  #     - 50-200% faster: elsewhere
                                  #Max 500TB/month (soft limit)
                                  #'BUCKET' name must not contain dots


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VERSIONING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?versioning            #Req: VERSIONING, x-amz-mfa [C]
PutBucketVersioning()             #Res: empty
GET /BUCKET?versioning            #Req: empty
GetBucketVersioning()             #Res: VERSIONING
GET /BUCKET?versions              #Req: OBJECT_VERSIONS
ListObjectVersions()              #  - CamelCase -> dash-case
                                  #  - only EncodingType, Prefix, Delimiter
                                  #  - x-amz-optional-object-attributes [C]
                                  #Res: OBJECT_VERSIONS
                                  #  - Versions: no Bucket, Location, ChecksumALGO
                                  #Paginates OBJECTS.Versions with KeyMarker + VersionIdMarker, MaxKeys

VERSIONING                        #Make OBJECTs:
                                  #  - writes update latest VERSION, keep previous VERSIONs
                                  #  - reads show latest VERSION
                                  #To restore a previous VERSION, either:
                                  #  - copy previous VERSION to latest one
                                  #  - delete latest VERSIONs
                                  #To retrieve, must be BUCKET_OWNER
VERSIONING.Status                 #One of:
                                  #  - 'Disabled' (def): cannot be set once unset
                                  #  - 'Enabled'
                                  #  - 'Suspended': paused

READ_OBJECT.versionId
OBJECT.VersionId                  #VERSION_MID
x-amz-version-id: VERSION_MID [S] #null if VERSIONING.Status 'Disabled|Suspended'
OBJECT.IsLatest                   #BOOL

OBJECT_VERSIONS.Name              #'BUCKET'
OBJECT_VERSIONS.Versions          #OBJECT_ARR
OBJECT_VERSIONS.EncodingType
 |Prefix|Delimiter|CommonPrefixes #Like OBJECTS, except Contents -> Versions

DELETE_OBJECT|DELETE_ERROR        #VERSION_MID
 .VersionId                       #When versioning enabled and VERSION_MID not specified:
                                  #  - current VERSION is kept but not current anymore
                                  #  - a new current VERSION is added ("delete marker"):
                                  #     - no data|metadata, except 'OBJECT' name
                                  #        - i.e. results in 404
                                  #     - its VERSION_MID is not set in VersionId (null) but in DeleteMarkerVersionId instead
                                  #When versioning disabled, or when enabled but VERSION_MID specified:
                                  #  - permanent delete
                                  #  - if targets a delete marker, restores previous version
x-amz-delete-marker: true [S]
DELETE_OBJECT.DeleteMarker        #BOOL. True if OBJECT is a delete marker
DELETE_OBJECT
 .DeleteMarkerVersionId           #VERSION_MID
OBJECT_VERSIONS.DeleteMarkers     #OBJECT_ARR
                                  #  - only VersionId, IsLatest, Key, LastModified, Owner
                                  #VERSIONs that are delete markers

VERSIONING.MfaDelete              #'Disabled' (def) or 'Enabled'
                                  #When enabled:
                                  #  - requires deleteObject[s]|*BucketVersioning() to use x-amz-mfa [C]
                                  #  - cannot use lifecycle
                                  #Can only be set if all of:
                                  #  - VERSIONING.Status 'Enabled'
                                  #  - x-amz-mfa [C] used
                                  #  - BUCKET_OWNER
x-amz-mfa:
 MFA_DEVICE_MID TOKEN [C]         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STORAGE CLASS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-storage-class: STR [C|S]
OBJECT|MUPLOAD|RESTORE_OUTPUT
 .StorageClass                    #'STORAGE_CLASS', among the ones below

StorageClass 'STANDARD'           #"Frequent access". Default value

StorageClass 'STANDARD_IA'        #"Infrequent access". Min 30 days, 128KB per OBJECT
                                  #Cheaper storage, more expensive retrieval. Cheaper if <1 read/month
StorageClass 'ONEZONE_IA'         #Like STANDARD_IA, but replicates in only 1 AZ, instead of 3 for all other StorageClasses
StorageClass 'GLACIER_IR'         #"Instant retrieval". Like STANDARD_IA but:
                                  #  - min 90 days
                                  #  - cheaper if <1 read/2 months

StorageClass 'GLACIER'            #"S3 Glacier". Cannot read|copy|write, i.e. must RestoreObject()
                                  #Min 90 days
                                  #Cheaper if can wait for restore
StorageClass 'DEEP_ARCHIVE'       #Like GLACIER but:
                                  #  - min 180 days
                                  #  - slower restore
                                  #  - cannot use Tier 'expedited'

StorageClass 'INTELLIGENT_TIERING'#See below

StorageClass 'REDUCED_REDUNDANCY' #"RRS". 1/1e5 loss a year, instead of 1/1e11 for all other StorageClasses
                                  #405 if lost
                                  #Deprecated, and same cost, i.e. not useful

StorageClass 'SNOW'               #AWS Snowball
StorageClass 'OUTPOSTS'           #AWS Outposts

StorageType                       #CloudWatch DVAR that can be used on AWS/S3/BucketSizeBytes|NumberOfObjects
                                  #One of:
                                  #  - [IntelligentTiering]{STORAGE_CLASS}Storage: main data
                                  #  - {STORAGE_CLASS}Overhead: metadata for STANDARD_IA|ONEZONE_IA|GLACIER_IR
                                  #  - [IntelligentTiering]{STORAGE_CLASS}S3ObjectOverhead: metadata for GLACIER|DEEP_ARCHIVE (normal 8KB)
                                  #  - [IntelligentTiering]{STORAGE_CLASS}ObjectOverhead: metadata for GLACIER|DEEP_ARCHIVE (additional 32KB)
                                  #  - {STORAGE_CLASS}StagingStorage: MPARTs
                                  #STORAGE_CLASS is:
                                  #  - Standard|StandardIA|OneZoneIA|GlacierInstantRetrieval|Glacier|DeepArchive
                                  #  - with INTELLIGENT_TIERING: FA|IA|(none)|AIA|AA|DAA


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESTORE MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?restore       #Req:
RestoreObject()                   #  - RESTORE
                                  #  - query variables: OBJECT.VersionId
                                  #Res: x-amz-restore-output-path [S]
                                  #Max 1e3/sec

RESTORE                           #With StorageClass 'GLACIER|DEEP_ARCHIVE':
                                  #  - without INTELLIGENT_TIERING: copy OBJECT but with StorageClass 'STANDARD'
                                  #  - with INTELLIGENT_TIERING: set current OBJECT StorageClass to 'STANDARD'
RESTORE.Description               #'JOB_DESC'

RESTORE                           #Duration, among:
 [.GlacierJobParameters].Tier     #  - 'Expedited': 1-5m, longer if >250MB
                                  #  - 'Standard' (def): 3-5h (12h with StorageClass DEEP_ARCHIVE)
                                  #  - 'Bulk': 5-12h (48h with StorageClass DEEP_ARCHIVE)
x-amz-restore: NUM [S]
OBJECT.RestoreStatus              #RESTORE_STATUS
x-amz-restore-request-date:
 DATE [S]                         #
RESTORE_STATUS.IsRestoreInProgress#BOOL

RESTORE.Days                      #NUM of days before copy expires
                                  #Not with Type 'SELECT', nor INTELLIGENT_TIERING
RESTORE_STATUS.RestoreExpiryDate  #'DATE' when copy expires

x-amz-restore-output-path:
 OBJECT [S]                       #'OBJECT'
RESTORE.OutputLocation.S3         #RESTORE_OUTPUT
RESTORE_OUTPUT.BucketName         #'BUCKET'
RESTORE_OUTPUT.Prefix             #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RESTORE SELECT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESTORE.Type                      #Whether can use SelectParameters: not (def) or 'SELECT'
RESTORE.SelectParameters          #SELECT_PARAMS. Transforms OBJECT being restored, using SQL
                                  #OBJECT must be CSV|JSON

SELECT_PARAMS.ExpressionType      #Always 'SQL'
SELECT_PARAMS.Expression          #STR. SQL expression
                                  #Max 1.3e5 chars

SELECT_PARAMS
 .InputSerialization              #SELECT_INPUT. For parsing ARCHIVE
SELECT_PARAMS                     #SELECT_OUTPUT. For serializing filtered ARCHIVE
 .OutputSerialization             #No JSON.Type, CSV.AllowQuotedRecordDelimiter|FileHeaderInfo|Comments
SELECT_INPUT.CompressionType      #'NONE' (def), 'GZIP' or 'BZIP2'

SELECT_INPUT.Parquet              #OBJ. Use Apache Parquet

SELECT_INPUT|OUTPUT.JSON          #SELECT_JSON
SELECT_JSON.Type                  #Either:
                                  #  - 'DOCUMENT': JSON OBJ_ARR
                                  #  - 'LINES': ndjson

SELECT_INPUT|OUTPUT.CSV           #SELECT_CSV
SELECT_CSV.FileHeaderInfo         #Whether first line is header:
                                  #  - 'USE': yes, and can use as "COL" in SQL
                                  #  - 'IGNORE': yes, but cannot use as "COL" in SQL, only "_NUM"
                                  #  - 'NONE': no
SELECT_CSV|JSON.RecordDelimiter   #'CHAR' (def: \n)
SELECT_CSV
 .AllowQuotedRecordDelimiter      #BOOL (def: false). Allow quoting RecordDelimiter. Slower
SELECT_CSV.FieldDelimiter         #'CHAR' (def: ,)
SELECT_CSV.QuoteCharacter         #'CHAR' (def: ") for quoting
SELECT_CSV.QuoteEscapeCharacter   #'CHAR' (def: ") for escaping QuoteCharacter
SELECT_CSV.QuoteFields            #Whether to quote, among 'ASNEEDED' (def) or 'ALWAYS'
SELECT_CSV.Comments               #'CHAR' (def: #) used to comment a line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INTELLIGENT TIERING      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutBucketIntelligentTiering       #Req: INTELLIGENT_TIERING
 Configuration()                  #  - also query variables: ITELLIGENT_TIERING.id
                                  #Res: empty
GetBucketIntelligentTiering       #Req: INTELLIGENT_TIERING
 Configuration()                  #  - only id
                                  #Res: INTELLIGENT_TIERING
ListBucketIntelligentTiering      #Req: empty
 Configurations()                 #Res: IntelligentTieringConfiguration INTELLIGENT_TIERING_ARR
                                  #Paginates with ContinuationToken
DeleteBucketIntelligentTiering    #Req: INTELLIGENT_TIERING
 Configuration()                  #  - only id
                                  #Res: empty

INTELLIGENT_TIERING               #Automatically set StorageClass to:
                                  #  - STANDARD: always used if OBJECT <128KB
                                  #  - STANDARD_IA: when not used for 30 days
                                  #  - GLACIER_IR: when not used for 90 days
                                  #  - GLACIER: when not used for NUM days (min 90, max 730)
                                  #  - DEEP_ARCHIVE: when not used for NUM days (min 180, max 730)
                                  #"Used" means any of:
                                  #  - content read|write: GetObject(), CopyObject|UploadPartCopy(), RestoreObject(),
                                  #    PutObject|CompleteMultipartUpload|ListParts()
                                  #  - SelectObjectContent(), only for GLACIER|DEEP_ARCHIVE
                                  #  - but not metadata read|write: ListObjectsV2(), HeadObject(), etc.
                                  #Only impacts effective StorageClass: the one reported is always 'INTELLIGENT_TIERING'
                                  #Max 1e3 per BUCKET

INTELLIGENT_TIERING.Id            #INTELLIGENT_TIERING_MID
INTELLIGENT_TIERING.Status        #'Enabled' (def) or 'Disabled'

INTELLIGENT_TIERING.Tiering       #TIERING_CONF_ARR (def: empty, i.e. does not use '[DEEP_]GLACIER')
x-amz-archive-status: STR [S]
TIERING_CONF.AccessTier           #StorageClass, among '[DEEP_]ARCHIVE_ACCESS' (for '[DEEP_]GLACIER')
TIERING_CONF.Days                 #NUM. After OBJECT not read for NUM days, sets StorageClass to TIERING_CONF.AccessTier

INTELLIGENT_TIERING.Filter        #FILTER. Only apply INTELLIGENT_TIERING to matching OBJECTs.
FILTER.Prefix                     #STR. Only if 'OBJECT' start with STR
FILTER.And                        #FILTER_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LIFECYCLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?lifecycle             #Req: LIFECYCLE
PutBucketLifecycleConfiguration() #Res: empty
GET /BUCKET?lifecycle             #Req: empty
GetBucketLifecycleConfiguration() #Res: LIFECYCLE
DELETE /BUCKET?lifecycle          #Req: empty
DeleteBucketLifecycle()           #Res: empty

LIFECYCLE                         #Rotate an OBJECT, i.e. delete or set its StorageClass after a specific time
LIFECYCLE.Rules                   #RULE_ARR. If an OBJECT match multiple ones, use only last one
                                  #Max 1e3
RULE.Id                           #'RULE'. Max 255 chars.
RULE.Status                       #'Enabled' (def) or 'Disabled'

RULE.Filter                       #LIFECYCLE_FILTER. Only apply to matching OBJECTs
LIFECYCLE_FILTER.*                #Like FILTER.*
LIFECYCLE_FILTER
 .ObjectSizeGreater|LessThan      #NUM (in bytes)

RULE.Transitions                  #TRANSITION_ARR. Sets StorageClass to TRANSITION.StorageClass, after a specific time
[N]TRANSITION.StorageClass        #Same values as OBJECT.StorageClass, except no 'STANDARD|REDUCED_REDUNDANCY|SNOW|OUTPOSTS'
TRANSITION|EXPIRATION.Days        #NUM days from OBJECT creation
TRANSITION|EXPIRATION.Date        #Specific 'DATE'

RULE.Expiration                   #EXPIRATION. Delete OBJECT, after a specific time
EXPIRATION                        #BOOL (def: false). Permanent delete OBJECT as soon as it has only one VERSION
 .ExpiredObjectDeleteMarker       #and that VERSION is a delete marker.
                                  #Cannot be specified together with EXPIRATION.Days|Date
x-amz-expiration:
 expiry-date=DATE,
 rule-id=RULE [S]                 #Set by EXPIRATION

RULE
 .AbortIncompleteMultipartUpload
 .DaysAfterInitiation             #NUM. Delete MUPLOADs if not completed within NUM days
x-amz-abort-rule-id: RULE_MID [S]
x-amz-abort-date: DATE [S]        #When aborted

RULE.NonCurrentVersionTransitions #NTRANSITION_ARR. Same but applies to all VERSIONs except current one
                                  #As opposed to RULE.Transitions, which only applies to current VERSION
RULE.NonCurrentVersionExpiration  #NEXPIRATION. Same but applies to all VERSIONs except current one
                                  #Delete with a versionId, i.e. permanent delete
                                  #As opposed to RULE.Expiration, which only applies to current VERSION, and delete without a versionId
NTRANSITION|NEXPIRATION
 .NoncurrentDays                  #NUM days from OBJECT not being the current VERSION anymore
NTRANSITION|NEXPIRATION
 .NewerNoncurrentVersions         #Applies to all VERSIONs except NUM+1 most recent (including current one)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOCK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?object-lock           #Req: OBJECT_LOCK, x-amz-bucket-object-lock-token [C]
PutObjectLockConfiguration()      #Res: empty
GET /BUCKET?object-lock           #Req: empty
GetObjectLockConfiguration()      #Res: OBJECT_LOCK

PUT /BUCKET/OBJECT?retention      #Req:
PutObjectRetention()              #  - OBJECT_RETENTION
                                  #  - x-amz-bypass-governance-retention [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: empty
GET /BUCKET/OBJECT?retention      #Req: OBJECT
GetObjectRetention()              #  - only versionId
                                  #Res: OBJECT_RETENTION

PUT /BUCKET/OBJECT?legal-hold     #Req:
PutObjectLegalHold()              #  - LEGAL_HOLD
                                  #  - query variables: OBJECT.versionId
                                  #Res: empty
GET /BUCKET/OBKECT?legal-hold     #Req: OBJECT
GetObjectLegalHold()              #  - only versionId
                                  #Res: LEGAL_HOLD

OBJECT_LOCK                       #Do not allow deleting OBJECT VERSIONs for a specific duration
                                  #Does not prevent new VERSIONs from being created for this OBJECT
                                  #  - including adding a delete marker
                                  #Versioning must be enabled

x-amz-bucket-object-lock-enabled:
 STR [C]
OBJECT_LOCK.ObjectLockEnabled     #'Disabled' (def) or 'Enabled'
x-amz-bucket-object-lock-token:   #'TOKEN' received from AWS support
 STR [C]                          #Allows changing OBJECT_LOCK.ObjectLockEnabled for an existing BUCKET

OBJECT_LOCK.Rule.DefaultRetention #DEFAULT_RETENTION. Default OBJECT_RETENTION for OBJECTs in this BUCKET
DEFAULT_RETENTION.Years|Days      #"Retention period". NUM used to computed default x-amz-object-lock-retain-until-date [C]
                                  #Def: none, i.e. only locked when using x-amz-object-lock-retain-until-date [C]
x-amz-object-lock-retain-
 until-date: DATE [C|S]
OBJECT_RETENTION.RetainUntilDate  #'DATE'

x-amz-object-lock-mode: STR [C|S]
DEFAULT_RETENTION|OBJECT_RETENTION#Whether x-amz-bypass-governance-retention [C] is allowed:
 .Mode                            #'GOVERNANCE' (yes, def) or 'COMPLIANCE' (no)
x-amz-bypass-governance-retention:#Required to call PutObjectRetention() on an OBJECT already locked
 BOOL [C]                         #Even for root

LEGAL_HOLD                        #Like OBJECT_LOCK but:
                                  #  - no expiry DATE
                                  #  - can always be changed
x-amz-object-lock-legal-hold:
 STR [C|S]
LEGAL_HOLD.Status                 #'ON' or 'OFF' (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OWNER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUCKETS_LIST.Owner                #PRINCIPAL. BUCKET_OWNER, ACCOUNT that called CreateBucket()

x-amz-expected-bucket-owner:      #403 if BUCKET_OWNER is different
 ACCOUNT_ID [C]                   #On all ACTIONs except: CreateBucket(), ListBuckets(), WriteGetObjectResponse()

PUT /BUCKET?ownershipControls     #Req: BUCKET_OWNERSHIP
PutBucketOwnershipControls()      #Res: empty
GET /BUCKET?ownershipControls     #Req: empty
GetBucketOwnershipControls()      #Res: BUCKET_OWNERSHIP
DELETE /BUCKET?ownershipControls  #Req: empty
DeleteBucketOwnershipControls()   #Res: empty

BUCKET_OWNERSHIP.Rule             #BUCKET_OWNERSHIP_RULE_ARR
BUCKET_OWNERSHIP_RULE             #Who is OBJECT_OWNER, among:
 .ObjectOwnership                 #  - 'BucketOwnerEnforced' (def): BUCKET_OWNER
x-amz-object-ownership: STR [C]   #     - also disables ACLs (but not POLICYs)
                                  #  - 'BucketOwnerPreferred': BUCKET_OWNER if 'ACL' bucket-owner-full-control,
                                  #    PRINCIPAL uploading the OBJECT otherwise
                                  #  - 'ObjectWriter': PRINCIPAL uploading the OBJECT

OBJECTS.FetchOwner                #BOOL (def: false). Whether to return OBJECT.Owner
OBJECT|MUPLOAD.Owner              #PRINCIPAL. OBJECT_OWNER.

PRINCIPAL.DisplayName             #'PRINCIPAL' shown in UI
PRINCIPAL.ID                      #CANONICAL_ACCOUNT_ID

GRANTEE.DisplayName               #'GRANTEE' shown in UI
GRANTEE.Type                      #One of:
                                  #  - 'CanonicalUser': GRANTEE.ID
                                  #  - 'AmazonCustomerByEmail': GRANTEE.EmailAddress
                                  #  - 'Group': GRANTEE.URI
GRANTEE.ID                        #CANONICAL_ACCOUNT_ID
GRANTEE.EmailAddress              #'EMAIL' (of ACCOUNT)
GRANTEE.URI                       #One of:
                                  #  - http://acs.amazonaws.com/groups/global/AuthenticatedUsers: anyone authenticated
                                  #  - http://acs.amazonaws.com/groups/global/AllUsers: anyone
                                  #     - same as in POLICY_DOC: Principal '*'
                                  #     - CANONICAL_ACCOUNT_ID '65a011a29cdf8ec533ec3d1ccaae921c'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?policy                #Req:
                                  #  - POLICY_DOC
                                  #  - x-amz-confirm-remove-self-bucket-access [C]
PutBucketPolicy()                 #Res: empty
GET /BUCKET?policy                #Req: empty
GetBucketPolicy()                 #Res: POLICY_DOC
DELETE /BUCKET?policy             #Req: empty
DeleteBucketPolicy()              #Res: empty

POLICY_DOC                        #IAM POLICY_DOC, as OBJ. "Bucket policy"
                                  #Resource-based POLICY, with resource-level permissions
                                  #Applies to a BUCKET, including all its OBJECTs
                                  #OBJECTs not owned by BUCKET_OWNER:
                                  #  - ignored by Allow STATEMENTs (but not Deny STATEMENTs)
                                  #  - OBJECT_OWNER must use ACLs instead
                                  #OWNERs are ACCOUNTs
                                  #  - to allow their USERs, ACCOUNTs must create user-based POLICYs
                                  #  - user-based POLICYs cannot be used for cross-ACCOUNT permissions
                                  #     - but can setup ROLEs for other ACCOUNTs to assume
                                  #Allow by default:
                                  #  - any PACTION on:
                                  #     - BUCKET by BUCKET_OWNER
                                  #     - OBJECT by OBJECT_OWNER
                                  #  - DeleteObject[s]() on any OBJECT by BUCKET_OWNER
                                  #     - even if not owned by it
                                  #Max 20KB

x-amz-confirm-remove-self-
 bucket-access: true [C]          #Forbid any further PutBucketPolicy()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ACL MAIN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?acl                   #Req:
PutBucketAcl()                    #  - ACL
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C]
                                  #Res: empty
GET /BUCKET?acl                   #Req: empty
GetBucketAcl()                    #Res: ACL
PUT /BUCKET/OBJECT?acl            #Req:
PutObjectAcl()                    #  - ACL
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: x-amz-version-id [S]
GET /BUCKET/OBJECT?acl            #Req: OBJECT
GetObjectAcl()                    #  - only versionId
                                  #Res: ACL, x-amz-version-id [S]

x-amz-grant-PERMISSION:           #PERMISSION is 'read[-acp]', 'write[-acp]', 'full-control' (GRANT.Permission) or 'private'
 GRANTEE,... [C]                  #GRANTEE is VAR=VAL (GRANT.Grantee) with VAR id|emailAddress|uri

ACL                               #Like BUCKET POLICY but:
                                  #  - pros:
                                  #     - on OBJECT (not BUCKET)
                                  #     - VERSION-specific (def: current)
                                  #     - can use logic based on OBJECT_OWNER
                                  #     - can allow permissions on OBJECTs not owned by BUCKET_OWNER
                                  #     - simpler
                                  #  - cons:
                                  #     - less flexible: no Deny, CONDITION_KEY, etc.
                                  #     - give broader permissions
                                  #     - PRINCIPAL type is only ACCOUNT, not USER|SERVICE
                                  #Generally discouraged except when need one of the pros above:
                                  #  - although most is possible with BUCKET POLICY using:
                                  #     - CONDITION_KEYs
                                  #     - x-amz-meta-* [C|S] or TAGs to emulate OBJECT ownership
ACL.Owner                         #BUCKET_OWNER
ACL|RESTORE_OUTPUT                #GRANT_ARR
 .AccessControlList.Grants        #Max 100
GRANT.Grantee                     #GRANTEE
GRANT.Permission                  #If BUCKET:
                                  #  - "READ": s3:ListBucket*
                                  #  - "WRITE": s3:PutObject
                                  #     - if BUCKET_OWNER|OBJECT_OWNER: s3:DeleteObject*
                                  #  - "READ_ACP": s3:GetBucketAcl
                                  #  - "WRITE_ACP": s3:PutBucketAcl
                                  #  - "FULL_CONTROL": all of above
                                  #If OBJECT:
                                  #  - "READ": s3:GetObject[Torrent|Version]
                                  #  - "WRITE": does not exist
                                  #  - "READ_ACP": s3:GetObject[Version]Acl
                                  #  - "WRITE_ACP": s3:PutObject[Version]Acl
                                  #  - "FULL_CONTROL": all of above


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACL CANNED           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-acl: 'ACL' [C]
RESTORE_OUTPUT.CannedACL          #'ACL'

'ACL'                             #Shortcut for ACL
                                  #Default for any BUCKET|OBJECT: private
'ACL' private                     #BUCKET|OBJECT_OWNER: FULL_CONTROL
'ACL' public-read[-write]         #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #AllUsers: READ [and WRITE]
'ACL' authenticated-read          #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #AuthenticatedUsers: READ
'ACL' bucket-owner-full-control   #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #Only for OBJECTs
'ACL' bucket-owner-read           #OBJECT_OWNER: FULL_CONTROL
                                  #BUCKET_OWNER: READ
                                  #Only for OBJECTs
'ACL' aws-exec-read               #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #EC2: READ (only to GET an AMI)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PUBLIC ACCESS BLOCK      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?publicAccessBlock     #Req: PUBLIC_BLOCK
PutPublicAccessBlock()            #Res: empty
GET /BUCKET?publicAccessBlock     #Req: empty
GetPublicAccessBlock()            #Res: PUBLIC_BLOCK
DELETE /BUCKET?publicAccessBlock  #Req: empty
DeletePublicAccessBlock()         #Res: empty

PUT|GET|DELETE                    #Same but for all BUCKETs
 /configuration/publicAccessBlock #If BUCKET also has a PUBLIC_BLOCK, and'd, i.e. use most restrictive

PUBLIC_BLOCK                      #Any of the properties effected is reflected in GetBucketAcl|GetObjectAcl() too
PUBLIC_BLOCK.BlockPublicAcls      #BOOL (def: false). Prevent new public ACLs (PutBucketAcl|PutObjectAcl())
PUBLIC_BLOCK.IgnorePublicAcls     #BOOL (def: false). Ignore existing public ACLs
PUBLIC_BLOCK.BlockPublicPolicy    #BOOL (def: false). Prevent PutBucketPolicy() with public POLICY STATEMENTs
PUBLIC_BLOCK.RestrictPublicBuckets#BOOL (def: false). Ignore cross-account + public BUCKET POLICY STATEMENTs

GET /BUCKET?policyStatus          #Req: empty
GetBucketPolicyStatus()           #Res: POLICY_STATUS

POLICY_STATUS.IsPublic            #BOOL. Whether has public STATEMENTs

PUBLIC ACL ==>                    #ACL with GRANTEE AllUsers|AuthenticatedUsers
PUBLIC POLICY STATEMENTS ==>      #BUCKET POLICY's STATEMENT using neither:
                                  #  - PRINCIPAL
                                  #     - except '*', ACCOUNT, FEDERATED_USER
                                  #  - one of following CONDITION_KEYs:
                                  #     - aws:SourceIp
                                  #        - at least /8 netmask for IPv4, /32 for IPv6
                                  #     - aws:SourceArn|Account
                                  #     - aws:SourceVpc[e]
                                  #     - aws:userid
                                  #     - s3:x-amz-server-side-encryption-aws-kms-key-id
                                  #     - s3:DataAccessPointArn|Account


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PRE-SIGNED URL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRE-SIGNED URL ==>                #Computing the AWS signature of a specific REQ (path, query, headers, body) for a given ACTION
                                  #Then sharing the URL with the AWS signature as query variables
                                  #E.g. share a URL to GetObject() a private OBJECT
                                  #If using SSE, the actual request must still include x-server-side-encryption-* [C]
                                  #Cannot use x-amz-checksum-* [C]

x-amz-expires: NUM [C]            #Can be used (see AWS signature doc). Mostly meant for pre-signed URLs
                                  #Max depends on current authentication method
                                  #  - INSTANCE_PROFILE: 6h
                                  #  - STS: min (36h, TEMP_CREDS)
                                  #  - otherwise: 7d

x-amz-content-sha256: STR [C]     #Can be used for AWS signature (see its doc) to either:
                                  #  - ignore request body (mostly meant for pre-signed URLs)
                                  #  - use a chunked request body
                                  #Must not use Content-MD5 [C]

@aws-sdk/s3-request-presigner     #Part of JavaScript SDK
getSignedUrl
 (CLIENT, COMMAND[, OPTS])->>'URL'#Create pre-signed URL
OPTS.expiresIn                    #NUM (in secs, def: 15m). x-amz-expires [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STATIC WEBSITE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?website               #Req: STATIC_WEBSITE
PutBucketWebsite()                #Res: empty
GET /BUCKET?website               #Req: empty
GetBucketWebsite()                #Res: STATIC_WEBSITE
DELETE /BUCKET?website            #Req: empty
DeleteBucketWebsite()             #Res: empty

STATIC_WEBSITE                    #Optimizes BUCKET for static website hosting
                                  #Max 128KB

GET|HEAD http://BUCKET.s3-website #Redirects to GET|HEAD BUCKET.s3.REGION.amazonaws.com/OBJECT
 .REGION.amazonaws.com/OBJECT     #Only when STATIC_WEBSITE enabled
                                  #All STATIC_WEBSITE.* apply only to this call
                                  #Does not support HTTPS (must use CloudFront)
                                  #Requests are always considered unauthenticated

STATIC_WEBSITE.ErrorDocument.Key  #'OBJECT' returned for 4** errors
                                  #Def: HTML error response
STATIC_WEBSITE                    #'FILENAME' (e.g. 'index.html') appended to 'OBJECT' that is a folder, i.e. either:
 .IndexDocument.Suffix            #  - no /OBJECT
                                  #  - ends with Delimiter
                                  #  - OBJECT does not exist but OBJECT/FILENAME does
                                  #E.g. 'index.html'
                                  #Only for GET|HEAD

STATIC_WEBSITE
 .RedirectsAllRequestsTo          #STATIC_REDIRECT
STATIC_REDIRECT.HostName          #'HOSTNAME' to redirect to, instead of BUCKET.s3.REGION.amazonaws.com
STATIC_REDIRECT.Protocol          #'http[s]' (def: same)

STATIC_WEBSITE.RoutingRules       #ROUTING_RULE_ARR. Redirects
                                  #Max 50
ROUTING_RULE.Condition            #ROUTING_CONDITION that must be met to redirect
ROUTING_CONDITION
 .HttpErrorCodeReturnedEquals     #'NUM' of status code
ROUTING_CONDITION.KeyPrefixEquals #STR. Redirect if 'OBJECT' starts with STR
ROUTING_RULE.Redirect             #ROUTING_REDIRECT. Where to redirect
ROUTING_REDIRECT.Protocol         #'http[s]' (def: same)
ROUTING_REDIRECT.HostName         #'HOSTNAME'
ROUTING_REDIRECT.ReplaceKeyWith   #'OBJECT'
ROUTING_REDIRECT
 .ReplaceKeyPrefixWith            #STR replacing part in 'OBJECT' matched by KeyPrefixEquals
ROUTING_REDIRECT.HttpRedirectCode #'NUM'

x-amz-website-redirect-location:  #301 redirect to URL, for this specific OBJECT
 URL [C|S]                        #Applied to STATIC_WEBSITE endpoint, not to direct GetObject()
                                  #URL can be relative


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?cors                  #Req: CORS
PutBucketCors()                   #Res: empty
GET /BUCKET?cors                  #Req: empty
GetBucketCors()                   #Res: CORS
DELETE /BUCKET?cors               #Req: empty
DeleteBucketCors()                #Res: empty

CORS                              #Set CORS response headers
                                  #Max 64KB
CORS.CORSRules                    #CORD_RULE_ARR
                                  #Max 100
CORS_RULE.ID                      #STR. Max 255 chars
CORS_RULE.AllowedMethods          #'METHOD'_ARR. Access-Control-Allow-Methods [S]
CORS_RULE.AllowedOrigins          #'ORIGIN'_ARR. Access-Control-Allow-Origin [S]. Can contain *
CORS_RULE.AllowedHeaders          #'HEADER'_ARR. Access-Control-Allow-Headers [S]. Can contain *
CORS_RULE.ExposeHeaders           #'HEADER'_ARR. Access-Control-Expose-Headers [S]
CORS_RULE.MaxAgeSeconds           #NUM. Access-Control-Max-Age [S]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENCRYPTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVER-SIDE ENCRYPTION ==>        #Encrypt OBJECT before writing, decrypt before reading
                                  #"SSE", "encryption at rest"
                                  #Uses AES256 GCM
                                  #Cannot be disabled, but can configured algorithm and key

x-amz-server-side-encryption:     #"SSE-S3". Default behavior: uses AWS KMS to generate one data key per OBJECT
 AES256 [C|S]                     #'aws/s3' KMS_KEY, managed by AWS, automatically rotated
                                  #Other ACCOUNTs cannot access OBJECTs

x-amz-server-side-encryption:     #"SSE-KMS". Like SSE-S3 but with a specific KMS_KEY
 aws:kms [C|S]                    #By default, use 'aws/s3' (like SSE-S3)
                                  #Induce cost for traffic between S3 and KMS
                                  #  - on write: get a data key
                                  #  - on read: request KMS to send decrypted OBJECT full contents
                                  #In addition to encrypting the data, also encrypts the checksums
                                  #For other ACCOUNTs to access OBJECTs, must:
                                  #  - use x-amz-server-side-encryption-aws-kms-key-id [C]
                                  #  - have permission to access KMS_KEY
x-amz-server-side-encryption:     #"DSSE-KMS". Like "SSE-KMS" but with dual-layer encryption
 aws:kms:dsse [C|S]               #I.e. encrypt|decrypt twice:
                                  #  - same algorithm, but different implementation
                                  #  - same KMS_KEY, but different data keys
x-amz-server-side-encryption      #"Customer managed key". Use a specific KMS_KEY
 -aws-kms-key-id:                 #KMS_KEY must be in same REGION as BUCKET
 KMS_KEY_MID|ARN [C|S]            #Should prefer KMS_KEY_ARN over KMS_KEY_MID
x-amz-server-side-encryption      #BOOL (def: false). Use a KMS_KEY:
 -bucket-key-enabled: true [C]    #  - BUCKET-specific
                                  #  - requester-specific
                                  #     - also ROLE session-specific
                                  #     - i.e. cheaper when fewer requesters
                                  #  - stored in S3
                                  #  - automatically rotated
                                  #Goal: reduce traffic between S3 and KMS
x-amz-server-side-encryption      #'JSON_BASE64' of { VAR: VAL,... } of KMS EncryptionContext
 -context: STR [C|S]              #I.e. metadata stored and not encrypted
                                  #Always added: { aws:s3:arn: OBJECT_ARN }
                                  #  - if x-amz-server-side-encryption-bucket-key-enabled, BUCKET_ARN instead

x-amz-server-side-encryption      #"SSE-C". Use a client-provided key
 -customer-algorithm: AES256 [C|S]#For other ACCOUNTs to access OBJECTs, must have the key
x-amz-server-side-encryption      #'BASE64' of key. Discarded after usage.
 -customer-key: STR [C]           #Unlike AWS-provided keys, this must be supplied each time OBJECT is read|written
x-amz-server-side-encryption
 -customer-MD5: STR [C|S]         #'MD5_HASH_BASE64' of key

PUT /BUCKET?encryption            #Req: BUCKET_ENCRYPTION
PutBucketEncryption()             #Res: empty
GET /BUCKET?encryption            #Req: empty
GetBucketEncryption()             #Res: BUCKET_ENCRYPTION
DELETE /BUCKET?encryption         #Req: empty
DeleteBucketEncryption()          #Res: empty

BUCKET_ENCRYPTION                 #Default SSE for OBJECTs in a BUCKET
BUCKET_ENCRYPTION.Rules           #BUCKET_ENCRYPTION_RULE_ARR
BUCKET_ENCRYPTION_RULE.Apply
 ServerSideEncryptionByDefault    #BUCKET_SSE
BUCKET_SSE.SSEAlgorithm           #STR, like x-amz-server-side-encryption [C]
BUCKET_SSE.KMSMasterKeyID         #STR, like x-amz-server-side-encryption-aws-kms-key-id [C]
BUCKET_ENCRYPTION_RULE
 .BucketKeyEnabled                #BOOL, like x-amz-server-side-encryption-bucket-key-enabled [C]

RESTORE_OUTPUT.Encryption         #RESTORE_ENCRYPTION
RESTORE_ENCRYPTION.EncryptionType #STR, like x-amz-server-side-encryption [C]
RESTORE_ENCRYPTION.KMSKeyId       #STR, like x-amz-server-side-encryption-aws-kms-key-id [C]
RESTORE_ENCRYPTION.KMSContext     #STR, like x-amz-server-side-encryption-context [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PAYMENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?requestPayment        #Req: PAYMENT
PutBucketRequestPayment()         #Res: empty
GET /BUCKET?requestPayment        #Req: empty
GetBucketRequestPayment()         #Res: PAYMENT

PAYMENT                           #Must be BUCKET_OWNER
PAYMENT.Payer                     #Who is charged, either:
                                  #  - 'BucketOwner' (def)
                                  #  - 'Requester' ("requester pay")
                                  #Only for transfer costs, not storage
                                  #Only for successful requests
                                  #Requester must be authenticated
                                  #Cannot be on a logging target BUCKET
                                  #Cannot be used through STATIC_WEBSITE endpoint
x-amz-request-payer: requester [C]#Must be used if PAYMENT.Payer 'Requester'
x-amz-request-charged:
 requester [S]                    #

ACTIONS ==>                       #Only for following ACTIONs:
                                  #  - GetObject HeadObject GetObjectAttributes GetObjectTorrent
                                  #  - ListObjectsV2 ListObjectVersions
                                  #  - PutObject PostObject
                                  #  - CopyObject UploadPartCopy
                                  #  - DeleteObject DeleteObjects
                                  #  - CreateMultipartUpload UploadPart ListParts ListMultipartUploads CompleteMultipartUpload AbortMultipartUpload
                                  #  - PutObjectTagging GetObjectTagging
                                  #  - RestoreObject
                                  #  - PutObjectAcl GetObjectAcl
                                  #  - PutObjectLockConfiguration PutObjectRetention GetObjectRetention PutObjectLegalHold GetObjectLegalHold
                                  #  - GetBucketAccelerateConfiguration


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INVENTORY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?inventory             #Req: INVENTORY
PutBucketInventoryConfiguration() #  - query variable: INVENTORY.id
                                  #Res: empty
GET /BUCKET?inventory             #Req: empty
GetBucketInventoryConfiguration() #Res: INVENTORY
GET /BUCKET?inventory             #Req: empty
ListBucketInventory               #Res: InventoryConfiguration INVENTORY_ARR
 Configurations()                 #Paginates with ContinuationToken
DELETE /BUCKET?inventory          #Req: INVENTORY
DeleteBucketInventory             #  - only id
 Configuration()                  #Res: empty

INVENTORY                         #Every day|week, list a BUCKET's OBJECT|VERSIONs and write result to an OBJECT
                                  #Because of eventual consistency, OBJECTs about to be:
                                  #  - created might not appear yet
                                  #  - deleted might still appear
                                  #Max 1000 per BUCKET
INVENTORY.Id                      #'INVENTORY'
INVENTORY.IsEnabled               #BOOL

INVENTORY.Filter                  #FILTER (only Prefix). Only include those OBJECTs
INVENTORY.IncludedObjectVersions  #Either:
                                  #  - 'All': all VERSIONs
                                  #  - 'Current':
                                  #     - latest VERSION only
                                  #     - does not include INVENTORY_LINE.VersionId|IsLatest|IsDeleteMarker
INVENTORY.OptionalFields          #'PROP'_ARR. Only include those INVENTORY_LINE.PROPs
                                  #Cannot be VersionId|IsLatest|DeleteMarker nor Bucket|Key

INVENTORY.Schedule.Frequency      #'Daily' or 'Weekly' (on Sunday)

INVENTORY
 .Destination.S3BucketDestination #INVENTORY_DESTINATION
INVENTORY_DESTINATION.Bucket      #BUCKET_ARN
                                  #Must be in same REGION as source BUCKET
INVENTORY_DESTINATION.AccountId   #ACCOUNT_ID. Fails if BUCKET is not owned by that ACCOUNT
INVENTORY_DESTINATION.Prefix      #'DEST_PREFIX'
INVENTORY_DESTINATION.Format      #One of:
                                  #  - 'CSV'
                                  #  - 'ORC': Apache ORC
                                  #  - 'Parquet': Apache Parquet
INVENTORY_DESTINATION.Encryption  #INVENTORY_ENCRYPTION
INVENTORY_ENCRYPTION.SSE-S3       #Empty OBJ
INVENTORY_ENCRYPTION.SSE-KMS.KeyId#KMS_KEY_ID

PERMISSIONS ==>                   #Must grant:
                                  #  - PACTION s3:PutObject
                                  #  - to Principal.Service 's3.amazonaws.com'
                                  #  - on Resource DEST_BUCKET_ARN
                                  #  - CONDITION_KEY aws:SourceArn = SOURCE_BUCKET_ARN
                                  #  - CONDITION_KEY aws:SourceAccount = ACCOUNT_ID
                                  #  - access to KMS_KEY (if used)

DEST_PREFIX/SOURCE_BUCKT/INVENTORY#DEST_PATH
DEST_PATH/YYYY-MM-DDTHH-MMZ
 /manifest.json                   #PATH of MANIFEST
DEST_PATH/YYYY-MM-DDTHH-MMZ
 /manifest.checksum               #MD5 checksum of MANIFEST
DEST_PATH/hive
 /dt=YYYY-MM-DD-HH-MM/symlink.txt #Like MANIFEST but for Apache Hive

MANIFEST                          #List of all INVENTORY_FILEs of an INVENTORY
MANIFEST.version                  #'2016-11-30'
MANIFEST.creationTimestamp        #DATE_NUM
MANIFEST.sourceBucket             #'BUCKET'
MANIFEST.destinationBucket        #BUCKET_ARN
MANIFEST.fileFormat               #'CSV|ORC|Parquet'
MANIFEST.fileSchema               #VARs included
                                  #With CSV: 'PROP, ...' of COLs (including order)
                                  #With ORC|Parquet: specific to those formats
MANIFEST.files                    #MANIFEST_FILE_ARR
MANIFEST_FILE.key                 #INVENTORY_FILE_PATH
MANIFEST_FILE.size                #NUM (in bytes)
MANIFEST_FILE.MD5checksum         #'HASH'

DEST_PATH/data/HASH.FORMAT        #INVENTORY_FILE_PATH
                                  #HASH is INVENTORY_FILE's MD5 checksum
                                  #FORMAT is csv.gz, orc or parquet
INVENTORY_FILE                    #
INVENTORY_LINE.Bucket             #'BUCKET'
INVENTORY_LINE.Key                #'OBJECT'
INVENTORY_LINE.VersionId          #VERSION_MID
INVENTORY_LINE.IsLatest           #BOOL. OBJECT.IsLatest
INVENTORY_LINE.IsDeleteMarker     #BOOL. DELETE_OBJECT.DeleteMarker
INVENTORY_LINE.Size               #NUM. OBJECT.Size
INVENTORY_LINE.LastModifiedDate   #'DATE'. OBJECT.LastModified
INVENTORY_LINE.ETag               #'ETAG'
INVENTORY_LINE.StorageClass       #'STORAGE_CLASS'
INVENTORY_LINE.IsMultipartUpload  #BOOL. Whether used a MUPLOAD
INVENTORY_LINE.ReplicationStatus  #STR. x-amz-replication-status [S]
INVENTORY_LINE.EncryptionStatus   #'NOT-SSE', 'SSE-S3', 'SSE-KMS' or 'SSE-C'
INVENTORY_LINE
 .ObjectLockRetainUntilDate       #STR. OBJECT_RETENTION.RetainUntilDate
INVENTORY_LINE.ObjectLockMode     #STR. OBJECT_RETENTION.Mode
INVENTORY_LINE
 .ObjectLegalHoldStatus           #STR. LEGAL_HOLD.Status
INVENTORY_LINE
 .IntelligentTieringAccessTier    #'STORAGE_CLASS' of TIERING_CONF.AccessTier
INVENTORY_LINE.BucketKeyStatus    #'ENABLED|DISABLED'. BUCKET_ENCRYPTION_RULE.BucketKeyEnabled
INVENTORY_LINE.ChecksumAlgorithm  #ALGO. OBJECT.ChecksumAlgorithm
INVENTORY_LINE
 .ObjectAccessControlList         #'BASE64_JSON' of ACL
INVENTORY_LINE.ObjectOwner        #OBJECT_OWNER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?logging               #Req: LOGGING
PutBucketLogging()                #Res: empty
GET /BUCKET?logging               #Req: empty
GetBucketLogging()                #Res: LOGGING

LOGGING                           #Logs all requests to a BUCKET ("source")
                                  #Written to an OBJECT
                                  #Batched every few hours. Changes also take some time.
                                  #Some requests might be missing or duplicate
                                  #Must be BUCKET_OWNER
                                  #Different from CloudTrail. Prefer CloudTrail instead.
LOGGING.LoggingEnabled            #LOG_CONF. Omit to disable
LOG_CONF.TargetBucket             #'BUCKET' ("target") where to store LOG_FILE
                                  #Must be be in same REGION as logged BUCKET and have same BUCKET_OWNER
                                  #Must not use OBJECT_LOCK|LEGAL_HOLD
LOG_CONF.TargetPrefix             #STR prefixed to 'OBJECT' storing LOG_FILE

LOG_FILE                          #TSV file, space-delimited
                                  #'OBJECT' ends with YYYY-MM-DD-HH-MM-SS-RANDOM (same as LOG_LINE[2|5])
LOG_LINE[0]                       #CANONICAL_ACCOUNT_ID of BUCKET_OWNER
LOG_LINE[1]                       #'BUCKET'
LOG_LINE[2]                       #[DD/MM/YYYY:HH:MM:SS TZ]
LOG_LINE[3]                       #IP
LOG_LINE[4]                       #CANONICAL_ACCOUNT_ID of requester. - if anynomous
LOG_LINE[5]                       #x-amz-request-id [S]
LOG_LINE[6]                       #One of:
                                  #  - REST.HTTP_METHOD.ACTION
                                  #  - WEBSITE.HTTP_METHOD.ACTION
                                  #  - BATCH.DELETE.OBJECT
                                  #  - S3.ACTION.RESOURCE:
                                  #     - for LIFECYCLE:
                                  #        - S3.TRANSITION_SIA|ZIA|INT|GIR|(nothing)|GDA.OBJECT: TRANSITION.StorageClass
                                  #        - S3.EXPIRE.OBJECT: RULE.Expiration permanently deletes OBJECT
                                  #        - S3.CREATE.DELETEMARKER: RULE.Expiration creates a delete marker
                                  #        - S3.DELETE.UPLOAD: RULE.AbortIncompleteMultipartUpload.DaysAfterInitiation
                                  #     - not captured by CloudTrail
LOG_LINE[7]                       #'OBJECT'. - if none
LOG_LINE[8]                       #HTTP_METHOD + PATH + HTTP version
                                  #PATH does not include query variables, except x-*
                                  #  - this can be used for requester to add query variables ?x-* only meant for logging
LOG_LINE[9]                       #HTTP_STATUS_NUM
LOG_LINE[10]                      #Error code. - if none
LOG_LINE[11]                      #NUM of bytes sent. - if 0
LOG_LINE[12]                      #NUM of OBJECT.Size
LOG_LINE[13]                      #NUM (in ms) like AWS/S3/FirstByteLatency
LOG_LINE[14]                      #NUM (in ms) like AWS/S3/TotalRequestLatency
LOG_LINE[15]                      #Referrer [C]
LOG_LINE[16]                      #User-Agent [C]
LOG_LINE[17]                      #VERSION_MID. - if none
LOG_LINE[18]                      #x-amz-id-2 [S]
LOG_LINE[19]                      #SigV2|SigV4 (of x-amz-signature [C]). - if unauthenticated
LOG_LINE[20]                      #CIPHER used with HTTPS. - if HTTP
LOG_LINE[21]                      #AuthHeader (header) or QueryString, for x-amz-signature [C]. - if unauthenticated
LOG_LINE[22]                      #Host [C]
LOG_LINE[23]                      #TLSv1.1|2|3. - if no TLS
LOG_LINE[24]                      #ACCESS_POINT_ARN. - if none
LOG_LINE[25]                      #Yes|No. Whether an ACL was needed

PERMISSIONS ==>                   #Must allow PutObject|GetBucketAcl PACTIONs to S3 logger SERVICE
logging.s3.amazonaws.com          #SERVICE_DOMAIN used as POLICY_DOC Principal.Service for S3 logger (SERVICE_ASYNC_ACTION)
http://acs.amazonaws.com
 /groups/s3/LogDelivery           #Same but as GRANTEE.URI, for ACLs
'ACL' log-delivery-write          #LogDelivery: WRITE and READ_ACP
                                  #Only for BUCKETs

LOG_CONF.TargetGrants             #GRANT_ARR of LOG_FILE, to grant permissions to others than BUCKET_OWNER
                                  #Target BUCKET must not disable ACLs with BUCKET_OWNERSHIP_RULE.ObjectOwnership 'BucketOwnerEnforced'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            METRICS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?metrics               #Req: S3_METRICS
PutBucketMetricsConfiguration()   #  - query variables: id
                                  #Res: empty
GET /BUCKET?metrics               #Req: S3_METRICS
GetBucketMetricsConfiguration()   #  - only id
                                  #Res: S3_METRICS
GET /BUCKET?metrics               #Req: empty
ListBucketMetricsConfigurations() #Res: MetricsConfigurations S3_METRICS_ARR
                                  #Paginates with ContinuationToken
DELETE /BUCKET?metrics            #Req: empty
DeleteBucketMetricsConfiguration()#Res: empty

S3_METRICS                        #CloudWatch METRICs for specific OBJECTs in a given BUCKET
                                  #Max 1000 per BUCKET
S3_METRICS.Id                     #'S3_METRICS'. Max 64 chars, [[:alnum:].-_]
S3_METRICS.Filter                 #S3_METRICS_FILTER. Filters which OBJECTs to include
S3_METRICS_FILTER.*               #Like FILTER.*
S3_METRICS_FILTER.AccessPointArn  #ACCESS_POINT_ARN. Only in this ACCESS_POINT

FilterId                          #'S3_METRICS'. CloudWatch DVAR to use on AWS/S3/*
BucketName                        #'BUCKET'. CloudWatch DVAR to use on AWS/S3/*

MANAGED METRICS ==>               #The following 2 METRICs are automatically available without S3_METRICS
                                  #The other AWS/S3/* require a S3_METRICS
AWS/S3/NumberOfObjects            #NUM of OBJECTs (including VERSIONs) + ongoing MPARTs
AWS/S3/BucketSizeBytes            #NUM of bytes for OBJECT data|metadata

AWS/S3/AllRequests                #NUM of requests to OBJECT|MUPLOADs (not BUCKETs or other resources)
AWS/S3/PutRequests                #Same for PUT
AWS/S3/PostRequests               #Same for POST
AWS/S3/GetRequests                #Same for GET (except list)
AWS/S3/HeadRequests               #Same for HEAD
AWS/S3/ListRequests               #Same for GET (list)
AWS/S3/DeleteRequests             #Same for DELETE

AWS/S3/4xxErrors|5xxErrors        #NUM of 4**|5** responses

AWS/S3/BytesDownloaded            #NUM of bytes to BUCKETs as input
AWS/S3/BytesUploaded              #NUM of bytes to BUCKETs as output

AWS/S3/FirstByteLatency           #NUM of ms between first byte request received -> last byte sent
AWS/S3/TotalRequestLatency        #NUM of ms between last byte request received -> first byte sent


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STORAGE LENS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /storagelens/SLENS            #Req: StorageLensConfiguration SLENS, Tags TAG_PAIRS
PutStorageLensConfiguration()     #  - no HomeRegion
                                  #Res: empty
GET /storagelens/SLENS            #Req: empty
GetStorageLensConfiguration()     #Res: SLENS
                                  #  - no HomeRegion
GET /storagelens/SLENS            #Req: empty
ListStorageLensConfigurations()   #Res: StorageLensConfigurationList SLENS_ARR
                                  #  - only StorageLensArn, Id, IsEnabled, HomeRegion
                                  #Paginates with NextToken
DELETE /storagelens/SLENS         #Req: empty
DeleteStorageLensConfiguration()  #Res: empty

SLENS                             #Dashboard in UI console
                                  #There a default SLENS dashboard 'default-account-dashboard', i.e. must only create for custom ones
                                  #Can customize metrics of default SLENS???
                                  #Data is generated daily. Free METRICs kept for 14 days, advanced for 15 months
                                  #Metrics???
                                  #  - AWS/S3/NumberOfObjects
                                  #  - AWS/S3/BucketSizeBytes: total, average per OBJECT
                                  #Can filter by ORG, ACCOUNT, BUCKET, OBJECTS prefix, OBJECT???
                                  #Max 50 per REGION
SLENS.StorageLensArn              #SLENS_ARN. arn:aws:s3:REGION:ACCOUNT_ID:storage_lens/STORAGE_LENS
SLENS.Id                          #'SLENS'. Max 64 chars, [[:alnum:].-_]
SLENS.IsEnabled                   #BOOL
SLENS.HomeRegion                  #'REGION' of SLENS itself
SLENS.AwsOrg.Arn                  #ORG_ARN. Filter by ORG
                                  #Default SLENS: all

SLENS.Include|Exclude.Buckets     #BUCKET_ARN_ARR. Filter by BUCKET
                                  #Default SLENS: all
SLENS.Include|Exclude.Regions     #'REGION'_ARR. Filter by REGION
                                  #Default SLENS: all

SLENS.AccountLevel                #SLENS_ACCOUNT, for all BUCKETs
SLENS_ACCOUNT.BucketLevel         #SLENS_BUCKET, for one BUCKETs

SLENS_ACCOUNT|BUCKET
 .ActivityMetrics.IsEnabled       #BOOL
SLENS_ACCOUNT|BUCKET
 .AdvancedCostOptimizationMetrics
 .IsEnabled                       #BOOL
SLENS_ACCOUNT|BUCKET
 .AdvancedDataProtectionMetrics
 .IsEnabled                       #BOOL
SLENS_ACCOUNT|BUCKET
 .DetailedStatusCodesMetrics
 .IsEnabled                       #BOOL

SLENS_BUCKET
 .PrefixLevel.StorageMetrics      #SLENS_OBJECTS, for specific OBJECTs in a BUCKET
SLENS_OBJECTS.IsEnabled           #BOOL
SLENS_OBJECTS.SelectionCriteria   #SLENS_CRITERIA
SLENS_CRITERIA.Delimiter          #STR
SLENS_CRITERIA.MaxDepth           #NUM
                                  #Max 10
SLENS_CRITERIA
 .MinStorageBytesPercentage       #1-100

SLENS.DataExport                  #SLENS_EXPORT. Export data to a SLENS_FILE
SLENS_EXPORT
 .CloudWatchMetrics.IsEnabled     #BOOL
SLENS_EXPORT.S3BucketDestination  #SLENS_DESTINATION
                                  #Target BUCKET must be in same REGION as SLENS
SLENS_DESTINATION.*               #Like INVENTORY_DESTINATION.* except:
                                  #  - Bucket -> Arn
                                  #  - no ORC format
SLENS_DESTINATION
 .OutputSchemaVersion             #'V_1'

SLENS_FILE???

PUT /storagelens/SLENS/tagging
PutStorageLensConfiguration       #Req: Tags TAG_PAIRS
 Tagging()                        #Res: empty
GET /storagelens/SLENS/tagging
GetStorageLensConfiguration       #Req: empty
 Tagging()                        #Res: Tags TAG_PAIRS
DELETE /storagelens/SLENS/tagging
DeleteStorageLensConfiguration    #Req: empty
 Tagging()                        #Res: empty

https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage_lens_view_metrics.html POLICYs: https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-service-linked-roles.html
  - https://docs.aws.amazon.com/aws-managed-policy/latest/reference/S3StorageLensServiceRolePolicy.html

https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html#storage-lens-metrics-cloudwatch-publish
https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html#storage-lens-dimensions
  - see also https://docs.aws.amazon.com/AmazonS3/latest/userguide/cloudwatch-monitoring.html

ADVANCED METRICS ==>              #All in categories:
                                  #  - Cost optimization: only ones about LIFECYCLE
                                  #  - Data protection: only ones about requests signing|TLS, and about REPLICATION rules
                                  #  - Activity
                                  #  - Detailed status code

AWS/S3/Storage-Lens/*             #METRIC available either in SLENS UI or sent to CloudWatch
SLENS_METRIC                      #METRIC only available in SLENS UI, inferred from CloudWatch METRIC

SUMMARY ==>                       #
AWS/S3/Storage-Lens/StorageBytes  #The total storage, inclusive of incomplete multipart uploads, object metadata, and delete markers
AWS/S3/Storage-Lens/ObjectCount   #The total object count
SLENS_METRIC Average object size  #Average AWS/S3/Storage-Lens/StorageBytes per OBJECT
SLENS_METRIC Active buckets       #The total number of buckets in active usage with storage > 0 bytes
SLENS_METRIC Buckets              #The total number of buckets
SLENS_METRIC Accounts             #The number of accounts whose storage is in scope

COST OPTIMIZATION ==>             #
AWS/S3/Storage-Lens/
 CurrentVersionStorageBytes       #The number of bytes that are a current version of an object
SLENS_METRIC                      #The percentage of bytes in scope that are current versions of objects
 % current version bytes          #sum(CurrentVersionStorageBytes)/sum(StorageBytes)
AWS/S3/Storage-Lens/
 CurrentVersionObjectCount        #The count of current version objects
SLENS_METRIC                      #The percentage of objects in scope that are a current version
 % current version objects        #sum(CurrentVersionObjectCount)/sum(ObjectCount)
AWS/S3/Storage-Lens/
 NonCurrentVersionStorageBytes    #The number of noncurrent version bytes
SLENS_METRIC                      #The percentage of bytes in scope that are noncurrent versions
 % noncurrent version bytes       #sum(NonCurrentVersionStorageBytes)/sum(StorageBytes)
AWS/S3/Storage-Lens/
 NonCurrentVersionObjectCount     #The count of the noncurrent object versions
SLENS_METRIC                      #The percentage of objects in scope that are a noncurrent version
 % noncurrent version objects     #sum(NonCurrentVersionObjectCount)/sum(ObjectCount)
AWS/S3/Storage-Lens/
 DeleteMarkerStorageBytes         #The number of bytes in scope that are delete markers
SLENS_METRIC % delete marker bytes#The percentage of bytes in scope that are delete markers
                                  #sum(DeleteMarkerStorageBytes)/sum(StorageBytes)
AWS/S3/Storage-Lens/
 DeleteMarkerObjectCount          #The total number of objects with a delete marker
SLENS_METRIC                      #The percentage of objects in scope with a delete marker
 % delete marker objects          #sum(DeleteMarkerObjectCount)/sum(ObjectCount)
AWS/S3/Storage-Lens/Incomplete
 MultipartUploadStorageBytes      #The total bytes in scope for incomplete multipart uploads
SLENS_METRIC % incomplete         #The percentage of bytes in scope that are the result of incomplete multipart uploads
 multipart upload bytes           #sum(IncompleteMultipartUploadStorageBytes)/sum(StorageBytes)
AWS/S3/Storage-Lens/Incomplete
 MultipartUploadObjectCount       #The number of objects in scope that are incomplete multipart uploads
SLENS_METRIC % incomplete         #The percentage of objects in scope that are incomplete multipart uploads
 multipart upload objects         #sum(IncompleteMultipartUploadObjectCount)/sum(ObjectCount)
AWS/S3/Storage-Lens/Incomplete
 MPUStorageBytesOlderThan7Days    #The total bytes in scope for incomplete multipart uploads that are more than 7 days old
SLENS_METRIC % incomplete
 multipart upload storage bytes   #The percentage of bytes for incomplete multipart uploads that are more than 7 days old
 greater than 7 days old          #sum(IncompleteMPUStorageBytesOlderThan7Days)/sum(StorageBytes)
AWS/S3/Storage-Lens/Incomplete
 MPUObjectCountOlderThan7Days     #The number of objects that are incomplete multipart uploads more than 7 days old
SLENS_METRIC % incomplete
 multipart upload object count    #The percentage of objects that are incomplete multipart uploads more than 7 days old
 greater than 7 days old          #sum(IncompleteMPUObjectCountOlderThan7Days)/sum(ObjectCount)
AWS/S3/Storage-Lens/
 TransitionLifecycleRuleCount     #The count of lifecycle rules to transition objects to another storage class
SLENS_METRIC Average transition   #The average number of lifecycle rules to transition objects to another storage class
 lifecycle rules per bucket       #sum(TransitionLifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 ExpirationLifecycleRuleCount     #The count of lifecycle rules to expire objects
SLENS_METRIC Average expiration   #The average number of lifecycle rules to expire objects
 lifecycle rules per bucket       #sum(ExpirationLifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 NoncurrentVersionTransition
 LifecycleRuleCount               #The count of lifecycle rules to transition noncurrent object versions to another storage class
SLENS_METRIC Average noncurrent
 version transition lifecycle     #The average number of lifecycle rules to transition noncurrent object versions to another storage class
 rules per bucket                 #sum(NoncurrentVersionTransitionLifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 NoncurrentVersionExpiration
 LifecycleRuleCount               #The count of lifecycle rules to expire noncurrent object versions
SLENS_METRIC Average noncurrent
 version expiration lifecycle     #The average number of lifecycle rules to expire noncurrent object versions
 rules per bucket                 #sum(NoncurrentVersionExpirationLifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/Abort
 IncompleteMPULifecycleRuleCount  #The count of lifecycle rules to delete incomplete multipart uploads
SLENS_METRIC Average abort
 incomplete multipart upload      #The average number of lifecycle rules to delete incomplete multipart uploads
 lifecycle rules per bucket       #sum(AbortIncompleteMPULifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/ExpiredObject
 DeleteMarkerLifecycleRuleCount   #The count of lifecycle rules to remove expired object delete markers
SLENS_METRIC Average expired
 object delete marker lifecycle   #The average number of lifecycle rules to remove expired object delete markers
 rules per bucket                 #sum(ExpiredObjectDeleteMarkerLifecycleRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 TotalLifecycleRuleCount          #The total count of lifecycle rules
SLENS_METRIC Average lifecycle    #The average number of lifecycle rules
 rule count per bucket            #sum(TotalLifecycleRuleCount)/sum(DistinctNumberOfBuckets)

DATA PROTECTION ==>
AWS/S3/Storage-Lens/
 EncryptedStorageBytes            #The total number of encrypted bytes
SLENS_METRIC % encrypted bytes    #The percentage of total bytes that are encrypted
                                  #sum(EncryptedObjectCount)/sum(StorageBytes)
AWS/S3/Storage-Lens/
 EncryptedObjectCount             #The total count of objects that are encrypted
SLENS_METRIC % encrypted objects  #The percentage of objects that are encrypted
                                  #sum(EncryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/              #The number of bytes that are unencrypted
 UnencryptedStorageBytes          #sum(StorageBytes) - sum(EncryptedStorageBytes)
SLENS_METRIC % unencrypted bytes  #The percentage of bytes that are unencrypted
                                  #sum(UnencryptedStorageBytes)/sum(StorageBytes)
AWS/S3/Storage-Lens/              #The total count of objects that are unencrypted
 UnencryptedObjectCount           #sum(ObjectCount) - sum(EncryptedObjectCount)
SLENS_METRIC % unencrypted objects#The percentage of unencrypted objects
                                  #sum(UnencryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/
 ReplicatedStorageBytesSource     #The total number of bytes that are replicated from the source bucket
SLENS_METRIC                      #The percentage of total bytes that are replicated from the source bucket
 % replicated bytes source        #sum(ReplicatedStorageBytesSource)/sum(StorageBytes)
AWS/S3/Storage-Lens/
 ReplicatedObjectCountSource      #The count of replicated objects from the source bucket
SLENS_METRIC                      #The percentage of total objects that are replicated from the source bucket
 % replicated objects source      #sum(ReplicatedStorageObjectCount)/sum(ObjectCount)
AWS/S3/Storage-Lens/              #The total number of bytes that are replicated to the destination bucket
 ReplicatedStorageBytes           #sum(UnencryptedStorageBytes)/sum(ObjectCount)
SLENS_METRIC                      #The percentage of total bytes that are replicated to the destination bucket
 % replicated bytes destination   #sum(UnencryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/              #The count of objects that are replicated to the destination bucket
 ReplicatedObjectCount            #sum(UnencryptedStorageBytes)/sum(ObjectCount)
SLENS_METRIC                      #The percentage of total objects that are replicated to the destination bucket
 % replicated objects destination #sum(UnencryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/              #The total count of Object Lock enabled storage bytes
 ObjectLockEnabledStorageBytes    #sum(UnencryptedStorageBytes)/sum(ObjectCount)
SLENS_METRIC % Object Lock bytes  #The percentage of Object Lock enabled storage bytes
                                  #sum(UnencryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/              #The total count of Object Lock objects
 ObjectLockEnabledObjectCount     #sum(UnencryptedStorageBytes)/sum(ObjectCount)
SLENS_METRIC % Object Lock objects#The percentage of total objects that have Object Lock enabled
                                  #sum(UnencryptedStorageBytes)/sum(ObjectCount)
AWS/S3/Storage-Lens/
 VersioningEnabledBucketCount     #The count of buckets that have S3 Versioning enabled
SLENS_METRIC                      #The percentage of buckets that have S3 Versioning enabled
 % versioning-enabled buckets     #sum(VersioningEnabledBucketCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 MFADeleteEnabledBucketCount      #The count of buckets that have MFA (multi-factor authentication) delete enabled
SLENS_METRIC                      #The percentage of buckets that have MFA (multi-factor authentication) delete enabled
 % MFA delete-enabled buckets     #sum(MFADeleteEnabledBucketCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 SSEKMSEnabledBucketCount         #The count of buckets that use server-side encryption with AWS Key Management Service keys (SSE-KMS) for default bucket encryption
SLENS_METRIC                      #The percentage of buckets that SSE-KMS for default bucket encryption
 % SSE-KMS enabled buckets        #sum(SSEKMSEnabledBucketCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 AllUnsupportedSignatureRequests  #The total number of requests that use unsupported AWS signature versions
SLENS_METRIC % all unsupported    #The percentage of requests that use unsupported AWS signature versions
 signature requests               #sum(AllUnsupportedSignatureRequests)/sum(AllRequests)
AWS/S3/Storage-Lens/
 AllUnsupportedTLSRequests        #The number of requests that use unsupported Transport Layer Security (TLS) versions
SLENS_METRIC                      #The percentage of requests that use unsupported TLS versions
 % all unsupported TLS requests   #sum(AllUnsupportedTLSRequests)/sum(AllRequests)
AWS/S3/Storage-Lens/
 AllSSEKMSRequests                #The total number of requests that specify SSE-KMS
SLENS_METRIC                      #The percentage of requests that specify SSE-KMS
 % all SSE-KMS requests           #sum(AllSSEKMSRequests)/sum(AllRequests)
AWS/S3/Storage-Lens/
 SameRegionReplicationRuleCount   #The count of replication rules for Same-Region Replication (SRR)
SLENS_METRIC Average Same-Region  #The average number of replication rules for SRR
 Replication rules per bucket     #sum(SameRegionReplicationRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 CrossRegionReplicationRuleCount  #The count of replication rules for Cross-Region Replication (CRR)
SLENS_METRIC Average Cross-Region #The average number of replication rules for CRR
 Replication rules per bucket     #sum(CrossRegionReplicationRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 SameAccountReplicationRuleCount  #The count of replication rules for replication within the same account
SLENS_METRIC Average same-account #The average number of replication rules for replication within the same account
 replication rules per bucket     #sum(SameAccountReplicationRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 CrossAccountReplicationRuleCount #The count of replication rules for cross-account replication
SLENS_METRIC Average cross-account#The average number of replication rules for cross-account replication
 replication rules per bucket     #sum(CrossAccountReplicationRuleCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/Invalid
 DestinationReplicationRuleCount  #The count of replication rules with a replication destination that's not valid
SLENS_METRIC Average invalid
 destination replication          #The average number of replication rules with a replication destination that's not valid
 rules per bucket                 #sum(InvalidReplicationRuleCount)/sum(DistinctNumberOfBuckets)
SLENS_METRIC
 Total replication rule count     #The total replication rule count
SLENS_METRIC Average replication  #The average total replication rule count
 rule count per bucket            #sum(all replication rule count metrics)/sum(DistinctNumberOfBuckets)

ACCESS MANAGEMENT ==>             #
AWS/S3/Storage-Lens/
 ObjectOwnershipBucketOwner
 EnforcedBucketCount              #The total count of buckets that have access control lists (ACLs) disabled by using the bucket owner enforced setting for Object Ownership
SLENS_METRIC % Object Ownership   #The percentage of buckets that have ACLs disabled by using the bucket owner enforced setting for Object Ownership
 bucket owner enforced buckets    #sum(ObjectOwnershipBucketOwnerEnforcedBucketCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 ObjectOwnershipBucketOwner
 PreferredBucketCount             #The total count of buckets that use the bucket owner preferred setting for Object Ownership
SLENS_METRIC % Object Ownership   #The percentage of buckets that use the bucket owner preferred setting for Object Ownership
 bucket owner preferred buckets   #sum(ObjectOwnershipBucketOwnerPreferredBucketCount)/sum(DistinctNumberOfBuckets)
AWS/S3/Storage-Lens/
 ObjectOwnershipObjectWriter
 BucketCount                      #The total count of buckets that use the object writer setting for Object Ownership
SLENS_METRIC % Object Ownership   #The percentage of buckets that use the object writer setting for Object Ownership
 object writer buckets            #sum(ObjectOwnershipObjectWriterBucketCount)/sum(DistinctNumberOfBuckets)

PERFORMANCE ==>                   #
AWS/S3/Storage-Lens/Transfer
 AccelerationEnabledBucketCount   #The total count of buckets that have Transfer Acceleration enabled
SLENS_METRIC % Transfer           #The percentage of buckets that have Transfer Acceleration enabled
 Acceleration enabled buckets     #sum(TransferAccelerationEnabledBucketCount)/sum(DistinctNumberOfBuckets)

EVENTS ==>                        #
AWS/S3/Storage-Lens/Event
 NotificationEnabledBucketCount   #The total count of buckets that have Event Notifications enabled
SLENS_METRIC % Event Notification #The percentage of buckets that have Event Notifications enabled
 enabled buckets                  #sum(EventNotificationEnabledBucketCount)/sum(DistinctNumberOfBuckets)

ACTIVITY ==>                      #
AWS/S3/Storage-Lens/AllRequests
AWS/S3/Storage-Lens/GetRequests
AWS/S3/Storage-Lens/PutRequests
AWS/S3/Storage-Lens/HeadRequests
AWS/S3/Storage-Lens/DeleteRequests
AWS/S3/Storage-Lens/ListRequests
AWS/S3/Storage-Lens/PostRequests  #Like AWS/S3/*
AWS/S3/Storage-Lens/SelectRequests
AWS/S3/Storage-Lens/
 SelectScannedBytes
AWS/S3/Storage-Lens/
 SelectReturnedBytes              #Like AWS/S3/*
AWS/S3/Storage-Lens/
 BytesDownloaded                  #Like AWS/S3/*
SLENS_METRIC % retrieval rate     #The percentage of bytes downloaded
                                  #sum(BytesDownloaded)/sum(StorageBytes)
AWS/S3/Storage-Lens/BytesUploaded #Like AWS/S3/*
SLENS_METRIC % ingest ratio       #The percentage of bytes uploaded
                                  #sum(BytesUploaded)/sum(StorageBytes)
AWS/S3/Storage-Lens/4xxErrors     #Like AWS/S3/*
AWS/S3/Storage-Lens/5xxErrors     #Like AWS/S3/*
SLENS_METRIC Total errors         #The sum of all 4xx and 5xx errors
                                  #sum(4xxErrors) + sum(5xxErrors)
SLENS_METRIC % error rate         #The total number of 4xx and 5xx errors as a percentage of total requests
                                  #sum(TotalErrors)/sum(TotalRequests)

DETAILED STATUS CODE ==>          #
AWS/S3/Storage-Lens/
 200OKStatusCount                 #The total count of 200 OK status codes
SLENS_METRIC % 200 OK status      #The total number of 200 OK status codes as a percentage of total requests
                                  #sum(200OKStatusCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 206PartialContentStatusCount     #The total count of 206 Partial Content status codes
SLENS_METRIC                      #The total number of 206 Partial Content status codes as a percentage of total requests
 % 206 Partial Content status     #sum(206PartialContentStatusCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 400BadRequestErrorCount          #The total count of 400 Bad Request status codes
SLENS_METRIC                      #The total number of 400 Bad Request status codes as a percentage of total requests
 % 400 Bad Request errors         #sum(400BadRequestErrorCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 403ForbiddenErrorCount           #The total count of 403 Forbidden status codes
SLENS_METRIC                      #The total number of 403 Forbidden status codes as a percentage of total requests
 % 403 Forbidden errors           #sum(403ForbiddenErrorCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 404NotFoundErrorCount            #The total count of 404 Not Found status codes
SLENS_METRIC                      #The total number of 404 Not Found status codes as a percentage of total requests
 % 404 Not Found errors           #sum(404NotFoundErrorCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 500InternalServerErrorCount      #The total count of 500 Internal Server Error status codes
SLENS_METRIC                      #The total number of 500 Internal Server Error status codes as a percentage of total requests
 % 500 Internal Server Errors     #sum(500InternalServerErrorCount)/sum(AllRequests)
AWS/S3/Storage-Lens/
 503ServiceUnavailableErrorCount  #The total count of 503 Service Unavailable status codes
SLENS_METRIC                      #The total number of 503 Service Unavailable status codes as a percentage of total requests
 % 503 Service Unavailable errors #sum(503ServiceUnavailableErrorCount)/sum(AllRequests)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    STORAGE CLASS ANALYSIS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?analytics             #Req: ANALYTICS
PutBucketAnalyticsConfiguration() #  - query variables: id
GET /BUCKET?analytics             #Req: ANALYTICS
GetBucketAnalyticsConfiguration() #  - only id
                                  #Res: ANALYTICS
GET /BUCKET?analytics             #Req: empty
ListBucketAnalytics               #Res: AnalyticsConfigurations ANALYTICS_ARR
 Configurations()                 #Paginates with ContinuationToken
DELETE /BUCKET?analytics          #Req: ANALYTICS
DeleteBucketAnalytics             #  - only id
 Configuration()                  #Res: empty

ANALYTICS                         #Stats about STORAGE_CLASSs
                                  #Goal: help optimize STORAGE_CLASS|LIFECYCLE|INTELLIGENT_TIERING settings
                                  #Daily. Only include last 30 days.
                                  #Max 1000 per BUCKET
ANALYTICS.Id                      #'ANALYTICS'
ANALYTICS.Filter                  #FILTER. Only for those OBJECTs

ANALYTICS                         #ANALYTICS_EXPORT. Export to CSV file.
 .StorageClassAnalysis.DataExport #Always available: stats in UI console
ANALYTICS_EXPORT
 .OutputSchemaVersion             #'V_1'
ANALYTICS_EXPORT
 .S3BucketDestination             #ANALYTICS_DEST
ANALYTICS_DEST.Bucket             #BUCKET_ARN
                                  #Must be in same REGION as source BUCKET
ANALYTICS_DEST.BucketAccountId    #ACCOUNT_ID. Fails if target BUCKET not owned by ACCOUNT
ANALYTICS_DEST.Prefix             #'OBJECT'
ANALYTICS_DEST.Format             #'CSV'

ANALYTICS_FILE                    #CSV composed of ANALYTICS_LINEs
ANALYTICS_LINE[0-4]               #Group the other fields
                                  #I.e. one line per day + ANALYTICS + STORAGE_CLASS + OBJECT age group
ANALYTICS_LINE[0] Date            #'YYYY-MM-DD'
ANALYTICS_LINE[1] ConfigId        #'ANALYTICS'
ANALYTICS_LINE[2] Filter          #FILTER
ANALYTICS_LINE[3] StorageClass    #'STORAGE_CLASS'
ANALYTICS_LINE[4] ObjectAge       #Age since creation.
                                  #'NUM-NUM2':
                                  #  - range of days
                                  #  - 0-padded
                                  #  - thresholds:
                                  #     - 15d: until 3m
                                  #     - 1m: until 6m
                                  #     - 6m: until 1y
                                  #     - 1y: until 2y
                                  #  - only if Size >128KB and STORAGE_CLASS STANDARD
                                  #There is also 'ALL': any OBJECT of any Size and age
ANALYTICS_LINE[5] ObjectCount     #NUM of OBJECTs
                                  #Only if ObjectAge 'ALL'
ANALYTICS_LINE[6] DataUploaded_MB #NUM (in MB) of written OBJECT data for that day
                                  #Only if ObjectAge 'ALL'
ANALYTICS_LINE[7] Storage_MB      #NUM (in MB) of total OBJECT data
ANALYTICS_LINE[8] DataRetrieved_MB#NUM (in MB) of read OBJECT data for that day
ANALYTICS_LINE[9] GetRequestCount #NUM of GET|PUT requests for OBJECT data
ANALYTICS_LINE[10]
 CumulativeAccessRatio            #NUM. Percentage of OBJECTs read
ANALYTICS_LINE[11]                #NUM of days where STORAGE_CLASS STANDARD_IA would be recommended
 ObjectAgeForSIATransition        #Only if ObjectAge 'ALL' and STORAGE_CLASS STANDARD
ANALYTICS_LINE[12]
 RecommendedObjectAgeForSIA       #NUM. If ObjectAgeForSIATransition > it, should use STANDARD_IA instead
 Transition                       #Only if ObjectAge 'ALL' and STORAGE_CLASS STANDARD

PERMISSIONS ==>                   #Must grant permissions to S3 SERVICE_DOMAIN on target BUCKET
                                  #Same as INVENTORY (see below)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NOTIFICATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?notification          #Send SNS notification if RRS object lost.
PutBucketNotification()           #Request body NOTIF_OBJ:
                                  #  - NotificationConfiguration (none if disabling):
                                  #     - TopicConfiguration:
                                  #        - Event "s3:ReducedRedundancyLostObject"
                                  #        - Topic TOPIC_SNS_ARN
                                  #First send a test notification. Returns x-amz-sns-test-message-id ID [S]
                                  #Message is:
                                  #  - Service "Amazon S3"
                                  #  - Event "s3:ReducedRedundancyLostObject"
                                  #  - Time "TIMESTAMP"
                                  #  - Bucket BUCKET
                                  #  - Key OBJECT
                                  #  - VersionId VERSION_MID
                                  #  - RequestId ID
                                  #  - HostId: ID identifying requester host
GET /BUCKET?notification
GetBucketNotification()           #Returns NOTIF_OBJ

GetBucketNotificationConfiguration()???
PutBucketNotificationConfiguration()???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OBJECT LAMBDA         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WriteGetObjectResponse()

CreateAccessPointForObjectLambda()
GetAccessPointForObjectLambda()
ListAccessPointsForObjectLambda()
DeleteAccessPointForObjectLambda()

PutAccessPointConfigurationForObjectLambda()
GetAccessPointConfigurationForObjectLambda()

PutAccessPointPolicyForObjectLambda()
GetAccessPointPolicyForObjectLambda()
DeleteAccessPointPolicyForObjectLambda()

GetAccessPointPolicyStatusForObjectLambda()

https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AmazonS3ObjectLambdaExecutionRolePolicy.html

https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html#olap-cloudwatch-metrics
https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html#olap-dimensions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCESS POINT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccessPoint()
GetAccessPoint()
ListAccessPoints()
DeleteAccessPoint()

PutAccessPointPolicy()
GetAccessPointPolicy()
DeleteAccessPointPolicy()

GetAccessPointPolicyStatus()

CreateMultiRegionAccessPoint()
GetMultiRegionAccessPoint()
ListMultiRegionAccessPoints()
DeleteMultiRegionAccessPoint()

GetMultiRegionAccessPointPolicy()
PutMultiRegionAccessPointPolicy()

GetMultiRegionAccessPointPolicyStatus()

GetMultiRegionAccessPointRoutes()
SubmitMultiRegionAccessPointRoutes()

DescribeMultiRegionAccessPointOperation()

x-amz-access-point-alias: BOOL [S]

Endpoints in https://docs.aws.amazon.com/general/latest/gr/s3.html
The "access point" part in https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html#access-control-block-public-access-policy-status


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SELECT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SelectObjectContent()

https://docs.aws.amazon.com/AmazonS3/latest/API/RESTSelectObjectAppendix.html

AWS/S3/SelectRequests             #NUM of SELECT requests
AWS/S3/SelectBytesScanned         #NUM of bytes as SELECT input
AWS/S3/SelectBytesReturned        #NUM of bytes as SELECT output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BATCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateJob()
UpdateJobPriority()
UpdateJobStatus()
DescribeJob()
ListJobs()

PUT /jobs/JOB_MID/tagging         #Req: Tags TAG_PAIRS
PutJobTagging()                   #Res: empty
GET /jobs/JOB_MID/tagging         #Req: empty
GetJobTagging()                   #Res: Tags TAG_PAIRS
DELETE /jobs/JOB_MID/tagging      #Req: empty
DeleteJobTagging()                #Res: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          REPLICATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutBucketReplication()
GetBucketReplication()
DeleteBucketReplication()

x-amz-replication-status: COMPLETE|PENDING|FAILED|REPLICA [S]

https://docs.aws.amazon.com/AmazonS3/latest/userguide/metrics-dimensions.html#s3-cloudwatch-replication-metrics
  - see also https://docs.aws.amazon.com/AmazonS3/latest/userguide/cloudwatch-monitoring.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONDITION_KEYs ==>                #  - s3:x-amz-acl|x-amz-grant-* STR
                                  #  - s3:x-amz-copy-source STR
                                  #  - s3:x-amz-server-side-encryption STR
                                  #  - s3:x-amz-metadata-directive STR
                                  #  - s3:x-amz-storage-class STR
                                  #  - s3:VersionId STR
                                  #  - s3:prefix STR
                                  #  - s3:delimiter STR
                                  #  - s3:max-keys STR
                                  #  - s3:LocationConstraint REGION: for s3:CreateBucket only STR
                                  #Also: https://docs.aws.amazon.com/AmazonS3/latest/API/bucket-policy-s3-sigv4-conditions.html
                                  #Also: https://docs.aws.amazon.com/AmazonS3/latest/userguide/list_amazons3.html???
                                  #Also: https://docs.aws.amazon.com/AmazonS3/latest/userguide/tagging-and-policies.html


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           S3FS-FUSE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MUST INSTALL MANUALLY ==>         #  - download from GitHub
                                  #  - dependencies: build-essential git libfuse-dev libcurl4-openssl-dev libxml2-dev mime-support
                                  #    automake libtool
                                  #  - ./autogen.sh, ./configure --prefix=/usr --with-openssl, make, make install

MOUNTING ==>                      #Either:
                                  #  - s3fs ... (manually)
                                  #  - /etc/fstab: s3fs#BUCKET DIR fuse nodev,nosuid,rw,OPT... 0 0
                                  #     - where OPT is any below, e.g. allow_other
                                  #     - it seems it bugs, and needs to be remounted at startup: umount DIR, mount DIR (as root)

CREDENTIALS ==>                   #  - ENVVAR WSACCESSKEYID, AWSSECRETACCESSKEY
                                  #  - or ~/.passwd-s3fs (permission 600), /etc/passwd-s3fs (permission 640) or --passwd_file FILE
                                  #     - content "accessKeyId:secretAccessKey"
                                  #     - ~ is /root/ if root
                                  #  - or use option iam_role ROLE

s3fs BUCKET DIR -oVAR=VAL         #BOOL is 1 or nothing
use_cache TMP_DIR                 #Caching mechanism (limit number of downloads) (only for reads, except first download)
allow_other BOOL                  #(def: false) allow other OS_USER to use it
ahbe_conf FILE                    #To add HTTP headers when writing. Each line:
                                  #  [.EXT] HEADER_VAR [HEADER_VAL]
                                  #Can use #comment
retries NUM                       #(def: 2)
default_acl 'ACL'                 #(def: "private")
use_rrs BOOL                      #(def: false) (ReducedRedundancy)
use_sse BOOL                      #(def: false) (Server side encryption)
nomultipart BOOL                  #(def: false)
multireq_max NUM                  #(def: 500): max number of parallel requests when paginating
parallel_count NUM                #(def: 5): max number of parallel multipart upload requests (use multipart over 20MB)
enable_content_md5 BOOL           #(def: false)
public_bucket BOOL                #(def: false): anonymous access
connect_timeout NUM               #(def: 10 secs)
readwrite_timeout NUM             #(def: 30 secs)
max_stat_cache_size NUM           #(def: 10000, e.g. about 4MB)
enable_noobj_cache BOOL           #(def: false): cache non-existing files, to limit the number of calls to ListBucket()
stat_cache_expire NUM             #(def: no expire)
url "https://s3.amazonaws.com"    #To use HTTPS instead
nodnscache BOOL                   #

NOTES ==>                         #  - Max file size 64GB
                                  #  - Supports modes (chmod), mtime, uid|gid (chown) using x-amz-meta-mode|mtime|uid|gid
                                  #  - Sets Content-Type
