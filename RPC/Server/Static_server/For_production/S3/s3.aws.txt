
      
   S3  
      



VERSION ==>                       #2023-06-13
SVERSION                          #v20180820

S3FS-FUSE ==>                     #See its doc

SUMMARY ==>                       #API: virtual hosting, s3|s3-control, high-level CLI
                                  #Buckets: region, accelerate, tags
                                  #Download: range, torrent, request payment
                                  #Upload: simple, streams, browser, multipart, 100-continue
                                  #Copy: contents, headers, batch, sync
                                  #Prefix: list, delimiter, delete
                                  #Attributes: length, checksum, encoding, MIME, content-disposition, [un]conditional caching
                                  #Metadata: custom, tags, language
                                  #Versioning: versionId, delete marker, MFA delete
                                  #Storage class: STANDARD_IA, ONEZONE_IA, GLACIER_IR, intelligent tiering
                                  #Archive restore: GLACIER|DEEP_ARCHIVE, tier, duration, select
                                  #Lifecycle: filter, [non]current, duration, storage class, expiration, delete marker, abort multipart
                                  #Lock: duration|date, bypass, legal hold
                                  #Ownership: bucket|object, BucketOwnerEnforced|ObjectWriter
                                  #Permissions: bucket policy, immutable policy, ACL OBJ|canned, public access block, CORS
                                  #Pre-signed URL: duration, ignore body
                                  #Static website: error document, index, redirects
                                  #Encryption: SSE-S3, [D]SSE-KMS, SSE-C
                                  #Select: range, CSV|ndjson|Parquet, compression, SQL
                                  #Replication: source|destination, bidirectional, filter, existing OBJECTs, delete markers, RTC, batch
                                  #Inventory: filter, daily|weekly, CSV|ORC|Parquet
                                  #Requests logging
                                  #Metrics: size, I/O, requests
                                  #Storage lens: Cloudwatch|dashboard|file, daily, filter, account|bucket|prefix grouping
                                  #Storage class analysis: daily, CSV
                                  #Notifications: SNS|SQS|Lambda|EventBridge, filter, test event
                                  #Access point: own policy|public_block|vpc, fewer actions
                                  #Multi-region access point: regions, fewer actions, failovers
                                  #Lambda: object|supporting access point, GetObject|HeadObject|ListObjectsV2(), payload, range, batch, builtins (decompress, PII)
                                  #Batch: operations, manifest|inventory, priority, status, progress, report


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                          #Simple Storage Service

s3.amazonaws.com                  #SERVICE_DOMAIN for BUCKET-specific ACTIONs
BUCKET.s3.amazonaws.com           #"Virtual hosting". Same but using BUCKET as subdomain instead of /BUCKET as path.
                                  #Preferred: /BUCKET path is deprecated
                                  #Allows BUCKET-specific:
                                  #  - CNAME
                                  #  - top-level files: robots.txt, favicon.ico, etc.
                                  #  - same origin, CORS
                                  #Requires:
                                  #  - specifying REGION in subdomain
                                  #     - 301 redirection if not in right REGION
                                  #  - CNAME == 'BUCKET' exactly, e.g. BUCKET called 'www.example.com'
COPTS.forcePathStyle              #BOOL (def: false). Use /BUCKET instead of virtual hosting
S3_CONF.addressing_style          #'virtual' (def) or 'path'

ACCOUNT_ID.s3-control             #SERVICE_DOMAIN for ACTIONs that not BUCKET-specific
 .amazonaws.com/SVERSION          #Some ACTIONs have two variants s3[-control]: BUCKET-specific, and not
x-amz-account-id: ACCOUNT_ID [C]  #Alternative to specifying ACCOUNT_ID in subdomain

FORMAT ==>                        #XML REST
                                  #Uses some PARAMS|RESP headers

ERRORS ==>                        #OBJ_ARR: Code, Message, Resource, RequestId

REQ_ID                            #x-amz-request-id [S] + x-amz-id-2 [S]

PAGINATION ==>                    #SDK lacks paginateList*() for: ListBucket*(), ListMultipartUploads(), ListObjectVersions()
                                  #CLI lacks --page-size and --starting-token (but not automatic pagination) for ListBucket*() and s3-control
PARAMS.nextToken
RESP.NextToken                    #'TOKEN'
PARAMS.continuation-token
RESP.[Next]ContinuationToken      #'TOKEN', alternative syntax for some ACTIONs
PARAMS.PROP-marker                #'TOKEN', alternative syntax for some ACTIONs
RESP.[Next]PROPMarker             #Sometimes has multiple PROPs

RESP.IsTruncated                  #BOOL. Not with RESP.NextToken

PARAMS.maxResults                 #NUM (def: 100 with INVENTORY|ANALYTICS|MAIN_METRICS, 1000 otherwise)
PARAMS.max-PROPs
RESP.MaxPROPs                     #NUM (def: 1000), alternative syntax for some ACTIONs
RESP.PROPCount                    #NUM. Only set with some ACTIONs, together with RESP.MaxPROPs

AmazonS3[Outposts]FullAccess      #AWS managed POLICY. Grants all 's3[-object-lambda][-outposts]:*' PACTIONs
AmazonS3[Outposts]ReadOnlyAccess  #Same but readonly


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLIENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



@aws-sdk/client-s3                #SDK CLIENT for s3 SERVICE
@aws-sdk/client-s3-control        #SDK CLIENT for s3-control SERVICE
@aws-sdk/
 middleware-sdk-s3[-control]      #MFUNC used by S3[-control] CLIENT
@aws-sdk/
 middleware-bucket-endpoint       #Used internally by @aws-sdk/middleware-sdk-s3-control

aws s3api ...                     #CLI for s3 SERVICE
aws s3control ...                 #CLI for s3-control SERVICE

CONF.s3                           #S3_CONF. Only used by CLI.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        HIGH-LEVEL CLI         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws s3 ...                        #High-level S3 CLI on top of aws s3api|s3control
--OPT                             #Same as other CLI commands
--debug                           #Show HTTP request|response

DIR|FILE|PATH                     #Local file path, using OS-specific syntax
S3BUCKET                          #s3://BUCKET or s3://ACCESSPOINT_ARN
S3DIR                             #S3BUCKET[/PREFIX/]
S3FILE                            #S3DIR/OBJECT
S3PATH                            #S3DIR|S3FILE

HS3_CONF                          #S3_CONF, but only for `aws s3`
HS3_CONF.max_bandwidth            #NUM[UNIT] (def: no limit) (def UNIT: 'B/s'). Max bandwidth for GetObject|PutObject()
HS3_CONF.max_concurrent_requests  #Max NUM (def: 10) of concurrent requests
HS3_CONF.max_queue_size           #Max NUM (def: 1e3) of ACTIONs waiting to be run (due to max_concurrent_requests)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRICING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STORAGE SPACE ==>                 #1$/43GB
                                  #Free (first year): 5GB
                                  #4% cheaper after 50TB, 9% cheaper after 500TB
                                  #Cheaper STORAGE_CLASS:
                                  #  - STANDARD_IA: 2x
                                  #  - ONEZONE_IA: 2.3x
                                  #  - GLACIER_IR: 5.7x
                                  #  - GLACIER: 6.4x
                                  #  - DEEP_ARCHIVE: 23x

METADATA ==>                      #8KB for all
                                  #  - always priced as STORAGE_CLASS STANDARD
                                  #Some additional ones for STANDARD_IA|ONEZONE_IA|GLACIER_IR if file <128KB
                                  #32KB more if GLACIER[_IR]|DEEP_ARCHIVE, with that STORAGE_CLASS
                                  #  - i.e. better for multiple files tar'd, or single big files

REQUEST COUNT ==>                 #1$/2e6 requests
                                  #List|write: 10x more expensive
                                  #Delete: free
                                  #Free (first year): 2e4 requests
                                  #More expensive STORAGE_CLASS:
                                  #  - STANDARD_IA|ONEZONE_IA: 2x for list|write, 2.5x for read
                                  #  - GLACIER_IR: 4x for list|write, 25x for read
                                  #  - GLACIER: 6x for list|write, 1x for read
                                  #  - DEEP_ARCHIVE: 10x for list|write, 1x for read
                                  #  - i.e. better for read-only files

STORAGE CLASS READ|RESTORE ==>    #STORAGE_CLASS, on read|restore contents:
                                  #  - STANDARD: free
                                  #  - STANDARD_IA|ONEZONE_IA: 1$/100GB
                                  #  - GLACIER_IR: 1$/33GB
                                  #  - GLACIER:
                                  #     - Bulk: free
                                  #     - Standard: 1$/2e4 requests, 1$/100GB
                                  #     - Expedited: 1$/1e2 requests, 1$/33GB
                                  #  - DEEP_ARCHIVE:
                                  #     - Bulk: 1$/4e4 requests, 1$/400GB
                                  #     - Standard: 1$/1e4 requests, 1$/50GB
                                  #I.e. better for rarely accessed files, e.g. backups

SELECT ==>                        #Input: 1$/500GB
                                  #  - GLACIER + Expedited: 10x more expensive
                                  #  - GLACIER + Standard: 4x more expensive
                                  #  - GLACIER + Bulk: 2x cheaper
                                  #  - DEEP_ARCHIVE: free
                                  #Output: 1$/1400GB
                                  #  - GLACIER_IR, GLACIER + Expedited: 43x more expensive
                                  #  - STANDARD_IA|ONEZONE_IA, GLACIER + Standard: 14x more expensive
                                  #  - GLACIER + Bulk: 4x more expensive
                                  #  - DEEP_ARCHIVE: free

IN|OUT TRAFFIC ==>                #Internet -> S3: free
                                  #S3 -> Internet: 1$/11GB
                                  #  - free: 100GB
                                  #  - after 10TB: 5% cheaper
                                  #  - after 50TB: 20% cheaper
                                  #  - after 150TB: 50% cheaper
                                  #S3 -> same region: free
                                  #S3 -> CloudFront: free
                                  #S3 -> another region: 4x cheaper
                                  #Max 500 TB/month (flexible)

MULTI-REGION ACCESS POINT ==>     #Always: 1$/300GB
                                  #S3 <-> AWS: in|out traffic charge
                                  #S3 <-> internet:
                                  #  - same continent:
                                  #     - internet -> S3: 1$/400GB
                                  #     - S3 -> internet: 1$/200GB
                                  #     - ~4x more expensive in Asia, ~10x in South America
                                  #  - between continents: 1$/20GB

ACCELERATE ==>                    #1$/25GB
                                  #For both in|out
                                  #Regardless of whether from|to Internet|AWS
                                  #2x more expensive for Internet -> S3 if client's REGION is not US|Europe|Japan

METRICS ==>                       #MAIN_METRICS: free
                                  #ADVANCED_METRICS: 1$/5e6 OBJECTs per SLENS
                                  #  - 20% cheaper if >2.5e10 OBJECTs
                                  #  - 40% cheaper if >1e11 OBJECTs

REPLICATION ==>                   #Free, except normal traffic|requests|storage cost of copying
                                  #Each write creates up to 5 reads requests
                                  #RTC: 1$/67GB

BATCH ==>                         #1$/4 JOBs
                                  #1$ per 1e6 tasks (JOB_OP + OBJECT)
                                  #1$ per 7e7 OBJECTs, when using JOB.ManifestGenerator

OTHERS ==>                        #OBJECT TAGs: 1$/1e6 TAGs
                                  #CAPACITY: 100$/month
                                  #INTELLIGENT_TIERING: 1$/4e5 OBJECTs (with >128KB)
                                  #DSSE-KMS: 1$/333GB
                                  #INVENTORY: 1$/4e8 OBJECTs
                                  #LOGGING: free
                                  #ANALYTICS: 1$/1e7 OBJECTs
                                  #LACCESSPOINT: 1$/200GB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BUCKET MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET                       #Req: BUCKET
CreateBucket()                    #  - no Name, CreationDate
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-object-ownership [C]
                                  #    x-amz-bucket-object-lock-enabled [C]
                                  #Res: Location [S]
HEAD /BUCKET                      #Req: empty
HeadBucket()                      #Res: x-amz-bucket-region [S], x-amz-access-point-alias [S]
                                  #No own PACTION: use 's3:ListBucket' instead
GET /                             #Req: empty
ListBuckets()                     #Res: BUCKETS_LIST
                                  #  - no BUCKET.LocationConstraint
                                  #No pagination
                                  #PACTION named 's3:ListAllMyBuckets' instead
DELETE /BUCKET                    #Req: empty
DeleteBucket()                    #Res: empty
                                  #BUCKET must be empty first
                                 ##  - with Pulumi, can use RPROPS.forceDestroy true

BUCKETS_LIST.Buckets              #BUCKET_ARR
BUCKET                            #Like a folder
                                  #Max 100 per REGION (soft)
                                  #WAIT (HeadBucket()) Bucket[Not]Exists: when it exists

BUCKET_ARN                        #arn:aws:s3:::BUCKET
Location: /BUCKET [S]
BUCKET.Name                       #'BUCKET'
                                  #3-63 chars, [[:alnum:]-.]
                                  #Must be unique across AWS
BUCKET.CreationDate               #'DATE'

aws s3 mb S3BUCKET                #CreateBucket()
--region                          #'REGION'

aws s3 ls                         #ListBuckets()

aws s3 rb S3BUCKET                #DeleteBucket()
--force                           #If OBJECTs exist, delete them first
                                  #Fail if OBJECTs are versioned

XW.defaultBucket                 ##With Pulumi, like new CW.s3.Bucket(...) except:
 ('BUCKET', OBJ, NRPROPS, NROPTS)##  - can set OBJ.existing.arn 'BUCKET_ARN' or name 'BUCKET'
                                 ##    to retrieve already existing BUCKET instead.
                                 #   - OBJ.skip true to be a noop, with no outputs
DEFAULT_BUCKET.bucket            ##BUCKET. Undefined if OBJ.existing.arn
DEFAULT_BUCKET.bucketId.arn      ##}'BUCKET_ARN'{
DEFAULT_BUCKET.bucketId.name     ##}'BUCKET'{

XW.requiredBucket(...)           ##Same but cannot use `skip`


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BUCKET TAGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?tagging               #Req: TagSet TAG_PAIRS, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketTagging()                #Res: empty
GET /BUCKET?tagging               #Req: empty
GetBucketTagging()                #Res: TagSet TAG_PAIRS
DELETE /BUCKET?tagging            #Req: empty
DeleteBucketTagging()             #Res: empty
                                  #No own PACTION: use 's3:PutBucketTagging' instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT READ          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT                #Req:
GetObject()                       #  - READ_OBJECT
                                  #     - READ_OBJECT.response-*: must be authenticated
                                  #  - Range [C], If-[None-]Match [C], If-[Un]modified-Since [C],
                                  #    x-amz-server-side-encryption-customer-* [C], x-amz-checksum-mode [C]
                                  #Res:
                                  #  - RAW_OBJECT
                                  #  - Content-Range [S], Accept-Ranges [S], Content-Type [S], Content-Encoding [S],
                                  #    Content-Language [S], ETag [S], Last-Modified [S], Expires [S], Cache-Control [S],
                                  #    Content-Disposition [S], Content-Length [S], x-amz-meta-* [S], x-amz-version-id [S], x-amz-delete-marker [S],
                                  #    x-amz-restore [S], x-amz-restore-request-date [S], x-amz-archive-status [S],
                                  #    x-amz-expiration [S], x-amz-missing-meta [S], x-amz-website-redirect-location [S],
                                  #    x-amz-tagging-count [S], x-amz-server-side-encryption-* [S], x-amz-checksum-ALGO [S],
                                  #    x-amz-storage-class [S], x-amz-replication-status [S], x-amz-mp-parts-count [S]
                                  #    x-amz-object-lock* [S]
HEAD /BUCKET/OBJECT               #Req: like GetObject()
HeadObject()                      #  - no READ_OBJECT.response-*
                                  #Res: like GetObject()
                                  #No own PACTION: use 's3:GetObject' instead
GET /BUCKET/OBJECT?attributes     #Req:
GetObjectAttributes()             #  - like GetObject()
                                  #     - only versionId, x-amz-server-side-encryption-customer-* [C]
                                  #  - x-amz-object-attributes [C]
                                  #  - same pagination as ListParts(), but as x-amz-max-parts [C], x-amz-part-number-marker [C]
                                  #Res: OBJECT
                                  #  - only ETag, StorageClass, Size -> ObjectSize, ChecksumALGO -> Checksum.ChecksumALGO
                                  #  - only Last-Modified [S], x-amz-version-id [S], x-amz-delete-marker [S]
                                  #  - ObjectParts MUPLOAD: only Parts and pagination
                                  #Requires PACTIONs 's3:GetObjectAttributes' + 's3:GetObject'
MISSING OBJECT ==>                #For GetObject|HeadObject|GetObjectAttributes: 404 becomes 403 if no PACTION 's3:ListBucket'

OBJECT                            #Like a file
                                  #WAIT (HeadObject()) Object[Not]Exists: when it exists
                                  #  - not needed after a write, since write waits for it already
                                  #  - i.e. OBJECTs use "read-after-write consistency", not eventual consistency
                                  #Unlimited amount
                                  #All OBJECT-related ACTIONs are CloudTrail DATA_ACTIONs. If current ACCOUNT is:
                                  #  - OBJECT_OWNER, BUCKET can be in a different ACCOUNT
                                  #  - not OBJECT_OWNER, can still log if BUCKET is in current ACCOUNT
OBJECT_ARN                        #arn:aws:s3:::BUCKET/OBJECT
OBJECT.Bucket                     #'BUCKET'
OBJECT.Key                        #'OBJECT', its name. Also named "key".
                                  #Is a file path, allows virtual "subfolders" ("prefixes")
                                  #  - delimiter can be anything, but is usually /
                                  #  - max 5500 reads/sec, 3500 writes/sec per prefix
                                  #Due to internal storage details:
                                  #  - more performant when start with a random value
                                  #  - as opposed to serial integer, timestamp, etc.
                                  #Max 1KB, [[:alnum:]-_.*'()!] (should URL encode others)
OBJECT.Location                   #'.../BUCKET/OBJECT' URL

Range: bytes=NUM-NUM2 [C]
Content-Range:
 bytes NUM-NUM2/NUM3 [S]
Accept-Ranges: bytes [S]          #See HTTP doc
READ_OBJECT.partNumber            #NUM, 1-based index, max 1e4, size 5MiB
x-amz-mp-parts-count: NUM3 [S]    #Total NUM3 of parts

x-amz-object-attributes:
 VAR,... [C]                      #Only return OBJECT.VAR

RAW_OBJECT                        #OBJECT, as is
                                  #Max 5GB
                                  #In SDK, returned as RESP.Body RESP_STREAM
                                 ##With Pulumi:
                                 ##  - can be set either with:
                                 ##     - RPROPS.content[Base64] STR
                                 ##     - RPROPS.source ASSET
                                 ##  - RPROPS.sourceHash 'TRIGGER'
PARAMS.Body                       #As request, RAW_OBJECT can be STR or UINT8ARR|BUFFER|BLOB
                                  #It can also be RSTREAM|ISTREAM:
                                  #  - uses Transfer-Encoding: chunked [C]
                                  #    and x-amz-content-sha256: STREAMING-UNSIGNED-PAYLOAD-TRAILER [C]
                                  #  - requires setting PARAMS.checksumAlgorithm
--body PATH                       #Same for CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TORRENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT?torrent        #Req: empty
GetObjectTorrent()                #Res: TORRENT

TORRENT                           #OBJECT as Content-Type: application/x-bittorrent [S]
                                  #Goal: readers upload to each other:
                                  #  - less server egress
                                  #  - faster download speed
                                  #Max OBJECT content 5GB instead of 5TB
                                  #In SDK, returned as RESP.Body RESP_STREAM
                                  #In CLI, must specify output file
Content-Disposition: attachment;
 filename=OBJECT.torrent; [S]     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT LIST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET                       #Req: OBJECTS
ListObjectsV2()                   #  - CamelCase -> dash-case
                                  #  - only EncodingType, StartAfter, Prefix, Delimiter, FetchOwner
                                  #  - x-amz-optional-object-attributes [C]
                                  #Res: OBJECTS
                                  #  - no FetchOwner
                                  #Paginates OBJECTS.Contents with ContinuationToken, MaxKeys, KeyCount
                                  #PACTION named 's3:ListBucket' instead

OBJECTS.Name                      #'BUCKET'

OBJECTS.EncodingType              #'url'. Percent encode the OBJECTS.* with value 'OBJECT'
                                  #I.e. for Key|StartAfter|Prefix|Delimiter
                                  #Needed if contains characters not allowed by XML 1.0

OBJECTS.StartAfter                #STR. Only include if 'OBJECT' is STR, or lexicographically after
OBJECTS.Prefix                    #STR. Only include if 'OBJECT' start with STR
OBJECTS.Delimiter                 #STR separating 'OBJECT' "subfolders". This is usually '/'
                                  #When specified, distinguishes between:
                                  #  - pseudo-regular files:
                                  #     - 'OBJECT' starts with Prefix, but does not include Delimiter
                                  #     - returned in OBJECTS.Contents
                                  #  - pseudo-directories:
                                  #     - 'OBJECT' starts with Prefix, but includes Delimiter
                                  #     - returned in OBJECTS.CommonPrefixes
OBJECTS.CommonPrefixes            #Unique COMMON_PREFIX_ARR
                                  #Max 1e3
COMMON_PREFIX.Prefix              #Prefix + 'OBJECT' until next Delimiter (included)

COND_KEY s3:prefix                #OBJECTS.Prefix. Only for PACTIONs 's3:ListBucket[Versions]'
COND_KEY s3:delimiter             #OBJECTS.Delimiter. Only for PACTIONs 's3:ListBucket[Versions]'
COND_KEY s3:max-keys              #OBJECTS.MaxKeys. Only for PACTIONs 's3:ListBucket[Versions]'

OBJECTS.Contents                  #OBJECT_ARR
                                  #  - no Bucket, Location, ChecksumALGO, VersionId, IsLatest
x-amz-optional-object-attributes:
 VAR,... [C]                      #Return OBJECT.VAR (otherwise not) among: 'RestoreStatus'

aws s3 ls S3DIR                   #ListObjectsV2()
--recursive                       #Include OBJECTs in subfolders
--human-readable                  #Print size as KiB|MiB|etc.
--summarize                       #Print NUM of OBJECTs and total size
--request-payer                   #x-amz-request-payer: requester [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req:
PutObject()                       #  - RAW_OBJECT (including PARAMS.Body STREAM)
                                  #  - Expect [C], Content-Type [C], Content-Encoding [C], Content-Language [C], Expires [C],
                                  #    Cache-Control [C], Content-Disposition [C], x-amz-meta-* [C], x-amz-storage-class [C],
                                  #    x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-website-redirect-location [C],
                                  #    x-amz-tagging [C], x-amz-server-side-encryption-* [C], Content-MD5 [C], x-amz-checksum-ALGO [C],
                                  #    x-amz-object-lock* [C]
                                  #  - max 8KB request headers
                                  #Res:
                                  #  - ETag [S], x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S],
                                  #    x-amz-checksum-ALGO [S]

Expect: 100-continue [C]          #See HTTP doc
@aws-sdk/
 middleware-expect-continue       #Always use Expect: 100-continue [C], used by S3 client

NEVENT s3:ObjectCreated:Put       #On PutObject() success


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      BROWSER UPLOAD MAIN      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET                      #Req: BUPLOAD
PostObject()                      #  - BUPLOAD.HEADER: any PutObject() request header
                                  #     - strip x-amz-* prefix for: x-amz-acl [C], x-amz-tagging [C]
                                  #Res:
                                  #  - OBJECT
                                  #     - only Bucket, Key, Location
                                  #  - same headers as PutObject()
                                  #  - success_action_redirect [S], Redirect [S]
                                  #Not available in SDK|CLI, but available with AWS Amplify
                                  #No own PACTION: use 's3:PutObject' instead

BUPLOAD                           #Like PutObject() but meant to be performed by a <form> submit (i.e. client-side)
                                  #Must use Content-Type: multipart/form-data [C]
                                  #Max 20KB
BUPLOAD.key                       #'OBJECT'
BUPLOAD.file                      #RAW_OBJECT (excluding PARAMS.body STREAM)
                                  #Must be last field
${filename}                       #Anywhere in BUPLOAD, replaced by FILENAME from BUPLOAD.file, i.e.:
                                  #  - Content-Disposition: form-data; name="file"; filename="FILENAME"
                                  #  - filename used in <form>

BUPLOAD.x-amz-signature|algorithm #Authenticate request (see AWS signature version 4 doc)
 |credential|security-token|date  #If not set, anonymous request

BUPLOAD.success_action_redirect
success_action_redirect: URL [S]
Redirect: URL [S]                 #URL to redirect to when response code is success_action_status NUM
BUPLOAD.success_action_status     #200, 201 or 204 (def)

NEVENT s3:ObjectCreated:Post      #On PostObject() success


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     BROWSER UPLOAD POLICY     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUPLOAD.policy                    #BUPLOAD_POLICY, as Base64 JSON
                                  #Required with authenticated requests
                                  #Enforces values|constraints for BUPLOAD.*
                                  #  - so that client-side can upload, but not change intended request
BUPLOAD_POLICY.expiration         #'DATE'. After this, BUPLOAD_POLICY denies all.
BUPLOAD_POLICY.conditions         #ARR of either:
                                  #  - ['OP', 'VAL1', 'VAL2']
                                  #  - { PROP: 'VAL2' }: same as ['eq', '$PROP', 'VAL2']
                                  #Must include at least one PROP|$PROP for each BUPLOAD.PROP
                                  #  - except BUPLOAD: file, x-amz-signature, policy
                                  #  - also except BUPLOAD.x-ignore-PROP: behaves like BUPLOAD.PROP otherwise

PROP                              #Value of BUPLOAD.PROP. Can also be:
                                  #  - bucket 'BUCKET': as specified in request URI
$PROP                             #Can be included anywhere, to use its value

OP 'eq'                           #VAL1 == VAL2
OP 'starts-with'                  #VAL1 starts with VAL2
                                  #Can use 'VAL1,...' with Content-Type [C]
                                  #VAL2 can be '' to mean "always allow"
                                  #Only with PROP: acl, Cache-Control, Content-*, Expires, key, success_action_redirect, x-amz-meta-*
OP 'content-length-range'         #VAL1 <= Content-Length [S] <= VAL2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   BROWSER UPLOAD SIGNATURE    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-signature: STR [C]          #Unlike other ACTIONs, request body used in signature is BUPLOAD_POLICY
                                  #I.e. when authenticating with a pre-signed URL, client-side cannot modify BUPLOAD_POLICY
                                  #Using a pre-signed URL is recommended since this is done client-side

@aws-sdk/s3-presigned-post        #Part of JavaScript SDK
createPresignedPost
 (CLIENT, OPTS)->>OBJ             #Create pre-signed URL for PostObject()
OPTS.Bucket                       #'BUCKET'
OPTS.Key                          #BUPLOAD.key
OPTS.Expires                      #BUPLOAD_POLICY.expiration, as NUM (in secs, def: 1h)
OPTS.Conditions                   #BUPLOAD_POLICY.conditions
OPTS.Fields                       #BUPLOAD.PROPs, as OBJ
OBJ.fields                        #OBJ. Same but adds:
                                  #  - policy 'BASE64_JSON'
                                  #  - key 'OBJECT'
                                  #  - X-Amz-* of signature
OBJ.url                           #'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?uploads       #Req:
CreateMultipartUpload()           #  - same headers as PutObject()
                                  #  - x-amz-checksum-algo-ALGO [C], x-amz-checksum-algorithm [C]
                                  #Res:
                                  #  - MUPLOAD
                                  #     - only Bucket, Key, UploadId
                                  #  - same headers as PutObject()
                                  #     - no x-amz-version-id [S]
                                  #     - x-amz-checksum-ALGO [S] -> x-amz-checksum-algorithm [S]
                                  #  - x-amz-abort* [S]
                                  #No own PACTION: use 's3:PutObject' instead
PUT /BUCKET/OBJECT                #Req:
UploadPart()                      #  - RAW_MPART
                                  #  - Expect [C], x-amz-server-side-encryption-customer-* [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
                                  #  - query variables: MUPLOAD.uploadId, MPART.partNumber
                                  #Res: ETag [S], x-amz-server-side-encryption-* [S], x-amz-checksum-ALGO [S]
                                  #No own PACTION: use 's3:PutObject' instead
GET /BUCKET/OBJECT                #Req: MUPLOAD
ListParts()                       #  - only uploadId, x-amz-server-side-encryption-customer-* [C]
                                  #Res:
                                  #  - MUPLOAD
                                  #     - no Initiated
                                  #  - x-amz-abort* [S]
                                  #Paginates MUPLOAD.Parts with PartNumberMarker, MaxParts
                                  #PACTION named 's3:ListMultipartUploadParts' instead (automatically granted to MUPLOAD.Initiator)
GET /BUCKET                       #Req: MUPLOADS
ListMultipartUploads()            #  - CamelCase -> dash-case
                                  #  - no Bucket, CommonPrefixes, Uploads
                                  #Res: MUPLOADS
                                  #  - MUPLOAD.Bucket -> MUPLOADS.Bucket
                                  #  - no MUPLOAD.Parts
                                  #Paginates MUPLOADS.Uploads with UploadIdMarker + KeyMarker, MaxUploads
                                  #PACTION named 's3:ListBucketMultipartUploads' instead
POST /BUCKET/OBJECT               #Req: MUPLOAD
CompleteMultipartUpload()         #  - only uploadId (as query variable)
                                  #  - only Parts
                                  #     - no LastModified, Size
                                  #  - x-amz-server-side-encryption-customer-* [C], x-amz-checksum-ALGO [C]
                                  #Res:
                                  #  - OBJECT
                                  #     - only Bucket, Location, ETag, LastModified, ChecksumALGO
                                  #  - x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S]
                                  #No own PACTION: use 's3:PutObject' instead
DELETE /BUCKET/OBJECT             #Req: MUPLOAD
AbortMultipartUpload()            #  - only uploadId
                                  #Res: empty
                                  #PACTION 's3:AbortMultipartUpload' (automatically granted to MUPLOAD.Initiator)

MUPLOADS.Uploads                  #MUPLOAD_ARR
MUPLOADS.EncodingType|Prefix
 |Delimiter|CommonPrefixes        #Like OBJECTS, except Contents -> Uploads

MUPLOAD                           #Upload OBJECT in multiple requests
                                  #Max OBJECT contents 5TB (160GB in UI console) instead of 5GB. Recommended over 100MB
MUPLOAD.UploadId                  #MUPLOAD_MID
MUPLOAD.Bucket                    #'BUCKET'
MUPLOAD.Key                       #'OBJECT'
MUPLOAD.Initiated                 #'DATE'
MUPLOAD.Initiator                 #S3_OWNER

RAW_MPART                         #OBJECT part, as is (including PARAMS.Body STREAM)
                                  #Min 5MB, max 5GB

MUPLOAD.Parts                     #MPART_ARR
MPART.partNumber                  #NUM. 1-based index.
                                  #Max 1e4
MPART.Size                        #NUM

NEVENT s3:ObjectCreated:
 CompleteMultipartUpload          #On CompleteMultipartUpload() success

HS3_CONF.multipart_threshold      #NUM[UNIT] (def: 8MB) (def UNIT: 'B')
                                  #When uploading files larger than this, use a MUPLOAD
HS3_CONF.multipart_chunksize      #MPART.Size (def: 8MB)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART HELPER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@aws-sdk/lib-storage              #
new Upload(UOPTS)                 #Upload an OBJECT using a MUPLOAD
                                  #If OBJECT < MPART.Size, use PutObject() instead

UOPTS.client                      #S3_CLIENT
UOPTS.params                      #PutObject()'s PARAMS, including PARAMS.Body (including STREAM)
UOPTS.partSize                    #MPART.Size (in bytes, min|def: 5MB)
UOPTS.queueSize                   #NUM (def: 4) of MPARTs to upload in parallel
UOPTS.tags                        #TAG_PAIRS, added with PutObjectTagging()

UPLOAD.done()->>RESP              #RESP is same as PutObject()
                                  #RESP also has: Bucket 'BUCKET', Key 'OBJECT', Location 'URI'

UPLOAD.abort()->>                 #Does not seem to work
UOPTS.abortController             #ABORT_CONTROLLER calling UPLOAD.abort()
UOPTS.leavePartsOnError           #BOOL. If false (def), abort MUPLOAD if any MPART fails. Does not seem to work

UPLOAD.on
 ('httpUploadProgress', FUNC(OBJ))#
OBJ.loaded                        #NUM of bytes sent
OBJ.total                         #NUM of bytes to be sent
OBJ.part                          #MPART.partNumber
OBJ.Bucket                        #'BUCKET'
OBJ.Key                           #'OBJECT'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       OBJECT COPY MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req:
CopyObject()                      #  - like PutObject()
                                  #  - x-amz-copy-source* [C], x-amz-metadata-directive [C], x-amz-tagging-directive [C],
                                  #    x-amz-checksum-algorithm [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res:
                                  #  - OBJECT
                                  #     - only ETag, LastModified, ChecksumALGO
                                  #  - x-amz-version-id [S], x-amz-expiration [S], x-amz-server-side-encryption-* [S],
                                  #    x-amz-copy-source* [S]
                                  #No own PACTION: use 's3:GetObject' on source + 's3:PutObject' on destination instead
PUT /BUCKET/OBJECT                #Req:
UploadPartCopy()                  #  - like uploadPart()
                                  #  - x-amz-copy-source* [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res: like copyObject()
                                  #  - no x-amz-expiration [S], x-version-id [S]
                                  #Same PACTIONs as CopyObject()

x-amz-copy-source:                #Copy OBJECT
 /BUCKET/OBJECT [C]               #New OBJECT's ACL is 'private'
COND_KEY s3:x-amz-copy-source     #x-amz-copy-source [C]. Only for PACTIONs 's3:PutObject|BypassGovernanceRetention'

x-amz-metadata-directive:         #If 'COPY' (def):
 COPY|REPLACE [C]                 #  - only allows setting request headers related to SSE, storage class and x-amz-website-redirect-location [C]
                                  #  - those headers are erased if not specified
COND_KEY
 s3:x-amz-metadata-directive      #x-amz-metadata-directive [C]. Only for PACTIONs 's3:PutObject|BypassGovernanceRetention'
x-amz-tagging-directive: STR [C]  #Same as x-amz-metadata-directive [C] for TAGs

x-amz-copy-source-HEADER: STR [C] #Same as [x-amz-]HEADER: STR [C] but targetting the copied OBJECT instead, from x-amz-copy-source [C]
                                  #For HEADERs:
                                  #  - If-[Un]modified-Since [C], If-[None-]Match [C], Range [C],
                                  #    x-amz-server-side-encryption-customer-* [C]
                                  #  - called x-amz-source-HEADER instead: x-amz-expected-bucket-owner [C]
x-amz-copy-source-HEADER: STR [S] #Reflects same request header [C]
                                  #Only for version-id, to distinguish from x-amz-version-id [S] (of new OBJECT)

NEVENT s3:ObjectCreated:Copy      #On CopyObject() success

CW.s3.ObjectCopy                 ##Pulumi REZ to keep an OBJECT as a copy of another


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       OBJECT COPY BATCH       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB_OP.S3PutObjectCopy            #JOB_COPY. Call CopyObject() on multiple OBJECTs
                                  #JOB.RoleArn must be allowed to PACTIONs:
                                  #  - s3:GetObject[Version][Acl|Tagging], s3:ListBucket on source BUCKET
                                  #  - s3:PutObject[Version][Acl|Tagging] on destination BUCKET

JOB_COPY.TargetResource           #Destination BUCKET_ARN
JOB_COPY.TargetKeyPrefix          #Destination 'OBJECT' prefix

JOB_COPY.MetadataDirective        #STR. x-amz-metadata-directive [C]
JOB_COPY
 .[Un]ModifiedSinceConstraint     #'DATE'. x-amz-copy-source-if-[un]modified-since [C]
JOB_COPY.NewObjectTagging         #TAG_PAIRS. x-amz-tagging [C]
JOB_COPY.StorageClass             #STR. x-amz-storage-class [C]
JOB_COPY.AccessControlGrants      #Like JOB_ACLIST.Grants. x-amz-grant-PERMISSION [C]
JOB_COPY.CannedAccessControlList  #'ACL'. x-amz-acl [C]
JOB_COPY.SSEAwsKmsKeyId           #STR. x-amz-server-side-encryption-aws-kms-key-id [C]
JOB_COPY.BucketKeyEnabled         #BOOL. x-amz-server-side-encryption-bucket-key-enabled [C]
JOB_COPY.ChecksumAlgorithm        #STR. x-amz-checksum-algorithm [C]
JOB_COPY.ObjectLockLegalHoldStatus#STR. x-amz-object-lock-legal-hold [C]
JOB_COPY.ObjectLockMode           #STR. x-amz-object-lock-mode [C]
JOB_COPY.ObjectLockRetainUntilDate#'DATE'. x-amz-object-lock-retain-until-date [C]
JOB_COPY.RedirectLocation         #STR. x-amz-website-redirect-location [C]
JOB_COPY.RequesterPays            #BOOL. x-amz-request-payer [C]

JOB_COPY.NewObjectMetadata        #JOB_COPY_PARAMS. Def: copy source's. If set, do not copy any from source's.
JOB_COPY_PARAMS.CacheControl      #STR. Cache-Control [C]
JOB_COPY_PARAMS.ContentDisposition#STR. Content-Disposition [C]
JOB_COPY_PARAMS.ContentEncoding   #STR. Content-Encoding [C]
JOB_COPY_PARAMS.ContentLanguage   #STR. Content-Language [C]
JOB_COPY_PARAMS.ContentLength     #STR. Content-Length [C]
JOB_COPY_PARAMS.ContentMD5        #STR. Content-MD5 [C]
JOB_COPY_PARAMS.ContentType       #STR. Content-Type [C]
JOB_COPY_PARAMS.HttpExpiresDate   #'DATE'. Expires [C]
JOB_COPY_PARAMS.SSEAlgorithm      #'AES256|KMS'. x-amz-server-side-encryption [C]
JOB_COPY_PARAMS.RequesterCharged  #BOOL. x-amz-request-payer [C]
JOB_COPY_PARAMS.UserMetadata      #OBJ. x-amz-meta-* [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        OBJECT HELPERS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws s3 cp S3PATH PATH2            #GetObject()
                                  #PATH2 can be - for stdout

aws s3 cp PATH S3PATH2            #PutObject()
                                  #PATH can be - for stdin

aws s3 cp S3PATH S3PATH2          #CopyObject()

aws s3 mv [S3]PATH [S3]PATH2      #Like aws cp + aws rm

aws s3 sync [S3]PATH [S3]PATH2    #Same as aws s3 cp, but only copy files if either file size differs, or local mtime newer
--delete                          #If copied file exist in [S3]PATH2, delete it
--size-only                       #Do not check mtime
--exact-timestamps                #Also copy files if local mtime is older (but not equal)

FLAGS ==>                         #Following flags are for aws cp|mv|sync
--recursive                       #Allows [S3]PATH to be a [S3]DIR, targetting also all its OBJECTs
--exclude|include                 #'GLOB'. With --recursive
                                  #Priority to rightmost
                                  #  - --include '*' is always prepended
                                  #  - i.e. --include requires using --exclude before it first, e.g. --exclude '*'
                                  #cwd is [S3]PATH
--follow-symlinks                 #
--source-region                   #'REGION' of [S3]PATH. Def: same as --region
--region                          #'REGION' of [S3]PATH2

--dryrun                          #
--no-progress                     #Do not print progress
--only-show-errors                #Print only warnings|errors
--quiet                           #Print nothing

--ignore-glacier-warnings         #Do not warn when STORAGE_CLASS is GLACIER|DEEP_ARCHIVE
--force-glacier-transfer          #RestoreObject() if STORAGE_CLASS is GLACIER|DEEP_ARCHIVE

--no-guess-mime-type              #Do not guess Content-Type [C]
--expected-size                   #NUM (in bytes) of OBJECT.Size. Required if uploading >50GB
--copy-props                      #Similar to --metadata-directive, but with values:
                                  #  - none: x-amz-metadata-directive: REPLACE [C]
                                  #  - default: x-amz-metadata-directive: COPY [C]
                                  #  - metadata-directive: like x-amz-metadata-directive: COPY [C] but using instead:
                                  #    x-amz-* [C], content-* [C], cache-control [C], expires [C]

--acl
--cache-control
--content-disposition
--content-encoding
--content-language
--content-type
--expires
--grants
--metadata
--metadata-directive
--request-payer
--sse
--sse-c
--sse-c-copy-source
--sse-c-copy-source-key
--sse-c-key
--sse-kms-key-id
--storage-class
--website-redirect                #Same as request headers


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OBJECT DELETE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETE /BUCKET/OBJECT             #Req:
DeleteObject()                    #  - OBJECT
                                  #     - only versionId
                                  #  - x-amz-mfa [C], x-amz-bypass-governance-retention [C]
                                  #Res: x-amz-version-id [S], x-amz-delete-marker [S]
POST /BUCKET?delete               #Req:
DeleteObjects()                   #  - DELETE_OBJECTS
                                  #     - no Errors, DeleteMarker*
                                  #  - x-amz-mfa [C], x-amz-bypass-governance-retention [C], x-amz-checksum-ALGO [C]
                                  #Res: DELETE_OBJECTS
                                  #  - no Quiet
                                  #  - Objects -> Deleted
                                  #No own PACTION: use 's3:DeleteObject' instead

DELETE_OBJECTS.Objects            #DELETE_OBJECT_ARR
                                  #Max 1e3
DELETE_OBJECT.Key                 #'OBJECT'

DELETE_OBJECTS.Quiet              #BOOL. If true (def: false), only return OBJECTs which errored
DELETE_OBJECTS.Errors             #DELETE_ERROR_ARR
DELETE_ERROR.Key                  #'OBJECT'
DELETE_ERROR.Code                 #STR
DELETE_ERROR.Message              #STR

NEVENT s3:ObjectRemoved:Delete    #On OBJECT permanent deletion (not from LIFECYCLE)
NEVENT s3:ObjectRemoved:
 DeleteMarkerCreated              #On delete marker creation (not from LIFECYCLE)

aws s3 rm S3PATH                  #DeleteObject[s]()
--recursive
--exclude|include
--request-payer
--dryrun
--only-show-errors
--quiet                           #Like aws s3 cp


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CONTENT LENGTH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OBJECT.Size                       #NUM, in bytes

Content-Length: NUM [C]           #Like other SERVICEs: when there is a request payload

READ_OBJECT
 .response-content-encoding
Content-Encoding: STR [C|S]       #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONTENT TYPE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-content-type
Content-Type: STR [C|S]           #See HTTP doc

READ_OBJECT
 .response-content-disposition
Content-Disposition: STR [C|S]    #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-expires
Expires: DATE [C|S]               #See HTTP doc. Def: none
READ_OBJECT.response-cache-control
Cache-Control: STR [C|S]          #See HTTP doc. Def: none

OBJECT|MPART.LastModified
Last-Modified: DATE [S]           #'DATE'. When upload starteed
If-[Un]modified-Since: DATE [C]   #See HTTP doc

OBJECT|MPART.ETag                 #'ETAG'. MD5 checksum
ETag: ETAG [S]                    #Same behavior as x-amz-checksum-ALGO
                                  #  - including when using SSE-KMS, SSE-C or multipart
If-[None-]Match: ETAG [C]         #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CHECKSUMS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALGO                              #One of 'CRC32[C]', 'SHA1', 'SHA256'
OBJECT|MUPLOAD.ChecksumAlgorithm  #ALGO

x-amz-checksum-ALGO [C]           #'BASE64_HASH'. Send checksum, for integrity: fail on checksum mismatch.
                                  #Only of the data, not metadata|headers
                                  #If SSE-KMS or SSE-C (but not SSE-S3):
                                  #  - checksum of encrypted data instead
                                  #  - if SSE-C: must pass x-amz-server-side-encryption-customer-* [C] to
                                  #    ListParts(), CompleteMultipartUpload()
                                  #If multipart:
                                  #  - each MPART has own checksum
                                  #  - OBJECT uses:
                                  #     - checksum of concatenation of MPART checksums
                                  #     - appended with -NUM (number of MPARTs)
                                  #  - i.e. CopyObject|UploadPartCopy() can change checksum if source used multipart,
                                  #    but not target, or vice-versa

Content-MD5: MD5_HASH [C]         #Alternative to x-amz-checksum-ALGO [C]
                                  #Matches ETag [S]
                                  #  - except when using SSE-KMS, SSE-C or multipart
                                  #  - i.e. unlike x-amz-checksum-ALGO [C], always checksum of the whole decrypted data
                                  #Pros:
                                  #  - can match ETag [S]
                                  #  - standard
                                  #Cons:
                                  #  - when not matching ETag [S], cannot retrieve checksum
                                  #  - no MPART checksum, i.e. integrity failures happen only at end of multipart upload

PARAMS.ChecksumAlgorithm          #'ALGO'
--checksum-algorithm ALGO         #Must be used instead of x-amz-checksum-ALGO [C], computing it automatically, except:
                                  #  - CompleteMultipartUpload(), WriteGetObjectResponse(): only x-amz-checksum-ALGO [C], no PARAMS.ChecksumAlgorithm
                                  #  - PutObject(), UploadPart(): can use either x-amz-checksum-ALGO [C] or PARAMS.ChecksumAlgorithm
                                  #  - PutBucketOwnershipControls(): only Content-MD5 [C], automatically computed
                                  #Def:
                                  #  - PutObject(), UploadPart(), RestoreObject(), PutBucketAccelerateConfiguration(): noop
                                  #  - otherwise: computes Content-MD5 [C] instead
                                  #Only with SDK|CLI, not API
                                  #  - sometimes called dummy name x-amz-sdk-checksum-algorithm [C] in the online doc
S3_CONF.payload_signing_enabled   #BOOL (def: true). Enables --checksum-algorithm

x-amz-checksum-algorithm: ALGO [C]#When copying OBJECTs, change the checksum ALGO

x-amz-checksum-mode: ENABLED [C]  #Set x-amz-checksum-ALGO [S]
x-amz-checksum-ALGO [S]
OBJECT|MPART.ChecksumALGO         #'BASE64_HASH'. SDK|CLI validate response body against it

@aws-sdk/                         #Implements PARAMS.ChecksumAlgorithm, x-amz-checksum-ALGO [S] validation,
 middleware-flexible-checksums    #and x-amz-content-sha256 [C], in S3 client


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT
 .response-content-language
Content-Language: STR [C|S]       #See HTTP doc

Server: AmazonS3 [S]              #

x-amz-meta-*: VAL [C|S]           #'VAL'. Arbitrary metadata
RESTORE_OUTPUT.UserMetadata.VAR   #If set multiple times, joined as 'VAL,...'
                                  #Key is lowercased
                                  #Max 2KB

x-amz-missing-meta: NUM [S]       #NUM of x-amz-meta-* with invalid keys


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT TAGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT?tagging        #Req: Tags TAG_PAIRS, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutObjectTagging()                #Res: x-amz-version-id [S]
                                  #Max 10 TAGs per OBJECT
GET /BUCKET/OBJECT?tagging        #Req: empty
GetObjectTagging()                #Res: Tags TAG_PAIRS, x-amz-version-id [S]
DELETE /BUCKET/OBJECT?tagging     #Req: empty
DeleteObjectTagging()             #Res: x-amz-version-id [S]

x-amz-tagging: TAG=VAL&... [C]    #Requires PACTION 's3:GetObjectTagging'
x-amz-tagging-count: NUM [S]      #Requires PACTION 's3:GetObjectTagging'

RESTORE_OUTPUT.Tagging            #TAG_PAIRS

FILTER.Tags                       #TAG_PAIRS. Only if TAGs match

COND_KEY s3:ExistingObjectTag/TAG #STR. Like aws:ResourceTag/TAG, but when resource is an OBJECT
COND_KEY s3:RequestObjectTag/TAG  #STR. Same for aws:RequestTag/TAG
COND_KEY s3:RequestObjectTagKeys  #STR_ARR. Same for aws:TagKeys

NEVENT s3:ObjectTagging:Put       #On PutObjectTagging() success
NEVENT s3:ObjectTagging:Delete    #On DeleteObjectTagging() success

JOB_OP.S3PutObjectTagging.TagSet  #TAG_PAIRS. Call PutObjectTagging() on multiple OBJECTs
                                  #JOB.RoleArn must be allowed to PACTIONs 's3:PutObject[Version]Tagging'
JOB_OP.S3DeleteObjectTagging      #Empty OBJ. Call DeleteObjectTagging() on multiple OBJECTs
                                  #JOB.RoleArn must be allowed to PACTIONs 's3:DeleteObject[Version]Tagging'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      LOCATION CONSTRAINT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET?location              #Req: empty
GetBucketLocation()               #Res: BUCKET
                                  #  - only LocationConstraint

x-amz-bucket-region: REGION [S]   #'REGION' (def: 'us-east-1') where BUCKET is located
BUCKET.LocationConstraint         #Can differ from REGION of ACTION

@aws-sdk/
 middleware-location-constraint   #MFUNC used by S3 client to default BUCKET.LocationConstraint to COPTS.region

COND_KEY s3:locationconstraint    #'REGION'. Only for PACTIONs 's3:CreateBucket|CreateAccessPoint'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACCELERATE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?accelerate            #Req: ACCELERATE, x-amz-checksum-ALGO [C]
PutBucketAccelerateConfiguration()#Res: empty
                                  #PACTION named 's3:PutAccelerateConfiguration' instead
GET /BUCKET?accelerate            #Req: empty
GetBucketAccelerateConfiguration()#Res: ACCELERATE
                                  #PACTION named 's3:GetAccelerateConfiguration' instead

ACCELERATE.Status                 #undefined (def, i.e. disabled), 'Enabled' or 'Suspended'
                                  #Enables BUCKET.s3-accelerate.amazonaws.com
                                  #Takes up to 30m to change

BUCKET.s3-accelerate.amazonaws.com#Like BUCKET.s3.amazonaws.com but faster
                                  #Done by using Edge locations to route requests instead of normal internet route
                                  #Especially faster when clients are far from BUCKET's REGION
                                  #Can benchmark speed at https://s3-accelerate-speedtest.s3-accelerate.amazonaws.com/en/accelerate-speed-comparsion.html
                                  #  - test (from my location)
                                  #     - same speed: Europe
                                  #     - 25% faster: US East
                                  #     - 50-200% faster: elsewhere
                                  #Max 500TB/month (soft)
                                  #'BUCKET' name must not contain dots
COPTS.useAccelerateEndpoint
S3_CONF.use_accelerate_endpoint   #BOOL (def: false). Use BUCKET.s3-accelerate.amazonaws.com

AWS/S3/Storage-Lens/Transfer
 AccelerationEnabledBucketCount   #Like Buckets, but only with ACCELERATE enabled
SLENS_METRIC % Transfer
 Acceleration enabled buckets     #% of TransferAccelerationEnabledBucketCount/Buckets


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VERSIONING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?versioning            #Req: VERSIONING, x-amz-mfa [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketVersioning()             #Res: empty
GET /BUCKET?versioning            #Req: empty
GetBucketVersioning()             #Res: VERSIONING
GET /BUCKET?versions              #Req: OBJECT_VERSIONS
ListObjectVersions()              #  - CamelCase -> dash-case
                                  #  - only EncodingType, Prefix, Delimiter
                                  #  - x-amz-optional-object-attributes [C]
                                  #Res: OBJECT_VERSIONS
                                  #  - Versions: no Bucket, Location, ChecksumALGO
                                  #Paginates OBJECTS.Versions with KeyMarker + VersionIdMarker, MaxKeys
                                  #PACTION named 's3:ListBucketVersions' instead

VERSIONING                        #Make OBJECTs:
                                  #  - writes update latest VERSION, keep previous VERSIONs
                                  #  - reads show latest VERSION
                                  #To restore a previous VERSION, either:
                                  #  - copy previous VERSION to latest one
                                  #  - delete latest VERSIONs
                                  #To retrieve, must be BUCKET_OWNER
VERSIONING.Status                 #One of:
                                  #  - 'Disabled' (def): cannot be set once unset
                                  #  - 'Enabled'
                                  #  - 'Suspended': paused

READ_OBJECT.versionId             #VERSION_MID
OBJECT.VersionId                  #null if VERSIONING.Status 'Disabled|Suspended'
x-amz-version-id: VERSION_MID [S] #If PACTION 's3:*Object*', requires PACTION 's3:*ObjectVersion*' too (e.g. 's3:GetObjectVersion' or 's3:GetObjectVersionAcl')
COND_KEY
 s3[-object-lambda]:versionid     #VERSION_MID. Only for PACTIONs 's3:*ObjectVersion*'
OBJECT.IsLatest                   #BOOL

OBJECT_VERSIONS.Name              #'BUCKET'
OBJECT_VERSIONS.Versions          #OBJECT_ARR
OBJECT_VERSIONS.EncodingType
 |Prefix|Delimiter|CommonPrefixes #Like OBJECTS, except Contents -> Versions

DELETE_OBJECT|DELETE_ERROR        #VERSION_MID
 .VersionId                       #When versioning enabled and VERSION_MID not specified:
                                  #  - current VERSION is kept but not current anymore
                                  #  - a new current VERSION is added ("delete marker"):
                                  #     - no data|metadata, except 'OBJECT' name
                                  #        - i.e. results in 404
                                  #     - its VERSION_MID is not set in VersionId (null) but in DeleteMarkerVersionId instead
                                  #When versioning disabled, or when enabled but VERSION_MID specified:
                                  #  - permanent delete
                                  #  - if targets a delete marker, restores previous version
                                  #Requires PACTION 's3:*ObjectVersion*' like OBJECT.VersionId

x-amz-delete-marker: true [S]
DELETE_OBJECT.DeleteMarker        #BOOL. True if OBJECT is a delete marker
DELETE_OBJECT
 .DeleteMarkerVersionId           #VERSION_MID
OBJECT_VERSIONS.DeleteMarkers     #OBJECT_ARR
                                  #  - only VersionId, IsLatest, Key, LastModified, Owner
                                  #VERSIONs that are delete markers

AWS/S3/Storage-Lens/
 VersioningEnabledBucketCount     #Like Buckets, but only when VERSIONING enabled
SLENS_METRIC
 % versioning-enabled buckets     #% of VersioningEnabledBucketCount/Buckets

AWS/S3/Storage-Lens/
 CurrentVersionStorageBytes       #Like StorageBytes, but only for current VERSIONs
AWS/S3/Storage-Lens/
 NonCurrentVersionStorageBytes    #Like StorageBytes, but only for non-current VERSIONs
AWS/S3/Storage-Lens/
 CurrentVersionObjectCount        #Like ObjectCount, but only for current VERSIONs
AWS/S3/Storage-Lens/
 NonCurrentVersionObjectCount     #Like ObjectCount, but only for non-current VERSIONs
SLENS_METRIC
 % current version bytes          #% of CurrentVersionStorageBytes/StorageBytes
SLENS_METRIC
 % noncurrent version bytes       #% of NonCurrentVersionStorageBytes/StorageBytes
SLENS_METRIC
 % current version objects        #% of CurrentVersionObjectCount/ObjectCount
SLENS_METRIC
 % noncurrent version objects     #% of NonCurrentVersionObjectCount/ObjectCount

AWS/S3/Storage-Lens/
 DeleteMarkerStorageBytes         #Like StorateBytes, but only for delete markers
AWS/S3/Storage-Lens/
 DeleteMarkerObjectCount          #Like ObjectCount, but only for delete markers
SLENS_METRIC % delete marker bytes#% of DeleteMarkerStorageBytes/StorageBytes
SLENS_METRIC
 % delete marker objects          #% of DeleteMarkerObjectCount/ObjectCount


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MFA DELETE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSIONING.MfaDelete              #'Disabled' (def) or 'Enabled'
                                  #When enabled:
                                  #  - requires deleteObject[s]|*BucketVersioning() to use x-amz-mfa [C]
                                  #  - cannot use LIFECYCLE
                                  #Can only be set if all of:
                                  #  - VERSIONING.Status 'Enabled'
                                  #  - x-amz-mfa [C] used
                                  #  - BUCKET_OWNER
x-amz-mfa:
 MFA_DEVICE_MID TOKEN [C]         #

AWS/S3/Storage-Lens/
 MFADeleteEnabledBucketCount      #Like Buckets, but only when VERSIONING.MfaDelete true
SLENS_METRIC
 % MFA delete-enabled buckets     #% of MFADeleteEnabledBucketCount/DistinctNumberOfBuckets


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STORAGE CLASS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-storage-class: STR [C|S]
OBJECT|MUPLOAD|RESTORE_OUTPUT
 .StorageClass                    #'STORAGE_CLASS', among the ones below
COND_KEY s3:x-amz-storage-class   #x-amz-storage-class [C]. Only for PACTIONs 's3:PutObject|PutObject[Version]Acl|BypassGovernanceRetention'

StorageClass 'STANDARD'           #"Frequent access". Default value

StorageClass 'STANDARD_IA'        #"Infrequent access". Min 30 days, 128KB per OBJECT
                                  #Cheaper storage, more expensive retrieval. Cheaper if <1 read/month
                                  #99.9% availability (instead of 99.99% of other STORAGE_CLASSs)
StorageClass 'ONEZONE_IA'         #Like STANDARD_IA, but replicates in only 1 AZ, instead of 3 for all other StorageClasses
                                  #Still replicates as much, i.e. same durability, but more vulnerable if issues in that 1 AZ
StorageClass 'GLACIER_IR'         #"Instant retrieval". Like STANDARD_IA but:
                                  #  - min 90 days
                                  #  - cheaper if <1 read/2 months

StorageClass 'GLACIER'            #"S3 Glacier". Cannot read|copy|write, i.e. must RestoreObject()
                                  #Min 90 days
                                  #Cheaper if can wait for restore
CAPACITY ==>                      #Can be used for StorageClass 'GLACIER'
                                  #Must use AWS Glacier, or through S3 console
StorageClass 'DEEP_ARCHIVE'       #Like GLACIER but:
                                  #  - min 180 days
                                  #  - slower restore
                                  #  - cannot use Tier 'expedited'

StorageClass 'INTELLIGENT_TIERING'#See below

StorageClass 'REDUCED_REDUNDANCY' #"RRS". 1/1e5 loss a year, instead of 1/1e11 for all other StorageClasses
                                  #405 if lost
                                  #Deprecated, and same cost, i.e. not useful

StorageClass 'SNOW'               #AWS Snowball

MAIN_METRICS DVAR StorageType     #Can be used on AWS/S3/BucketSizeBytes|NumberOfObjects
                                  #One of:
                                  #  - [IntelligentTiering]{STORAGE_CLASS}Storage: main data
                                  #  - {STORAGE_CLASS}Overhead: metadata for STANDARD_IA|ONEZONE_IA|GLACIER_IR
                                  #  - [IntelligentTiering]{STORAGE_CLASS}S3ObjectOverhead: metadata for GLACIER|DEEP_ARCHIVE (normal 8KB)
                                  #  - [IntelligentTiering]{STORAGE_CLASS}ObjectOverhead: metadata for GLACIER|DEEP_ARCHIVE (additional 32KB)
                                  #  - {STORAGE_CLASS}StagingStorage: MPARTs
                                  #STORAGE_CLASS is:
                                  #  - Standard|StandardIA|OneZoneIA|GlacierInstantRetrieval|Glacier|DeepArchive
                                  #  - with INTELLIGENT_TIERING: FA|IA|(none)|AIA|AA|DAA
SLENS DVAR storage_class          #'STORAGE_CLASS'

NEVENT
 s3:ReducedRedundancyLostObject   #When OBJECT with REDUCED_REDUDANCY is lost


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RESTORE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?restore       #Req:
RestoreObject()                   #  - RESTORE
                                  #  - query variables: OBJECT.VersionId
                                  #  - x-amz-checksum-ALGO [C]
                                  #Res: x-amz-restore-output-path [S]

RESTORE                           #With StorageClass 'GLACIER|DEEP_ARCHIVE':
                                  #  - without INTELLIGENT_TIERING: copy OBJECT but with StorageClass 'STANDARD'
                                  #  - with INTELLIGENT_TIERING: set current OBJECT StorageClass to 'STANDARD'
                                  #Max 1e3/sec
RESTORE.Description               #'JOB_DESC'

RESTORE                           #Duration, among:
 [.GlacierJobParameters].Tier     #  - 'Expedited': 1-5m, longer if >250MB
                                  #  - 'Standard' (def): 3-5h (12h with StorageClass DEEP_ARCHIVE)
                                  #  - 'Bulk': 5-12h (48h with StorageClass DEEP_ARCHIVE)
x-amz-restore: NUM [S]
OBJECT.RestoreStatus              #RESTORE_STATUS
x-amz-restore-request-date:
 DATE [S]                         #
RESTORE_STATUS.IsRestoreInProgress#BOOL

RESTORE.Days                      #NUM of days before copy expires
                                  #Not with Type 'SELECT', nor INTELLIGENT_TIERING
RESTORE_STATUS.RestoreExpiryDate  #'DATE' when copy expires

x-amz-restore-output-path:
 OBJECT [S]                       #'OBJECT'
RESTORE.OutputLocation.S3         #RESTORE_OUTPUT
RESTORE_OUTPUT.BucketName         #'BUCKET'
RESTORE_OUTPUT.Prefix             #STR

RESTORE.Type                      #Whether can use SelectParameters: not (def) or 'SELECT'
RESTORE.SelectParameters          #Apply SELECT_REQ (except ScanRange, RequestProgress) on OBJECT being restored

NEVENT s3:ObjectRestore:Post      #On RestoreObject() start
NEVENT s3:ObjectRestore:Delete    #On RestoreObject() expiration
NEVENT s3:ObjectRestore:Completed #On RestoreObject() success
NMESSAGE.glacierEventData
 .restoreEventData                #NMESSAGE_RESTORE. For NEVENT s3:RestoreObject:Completed only
NMESSAGE_RESTORE
 .lifecycleRestorationExpiryTime  #RESTORE_STATUS.RestoreExpiryDate
NMESSAGE_RESTORE
 .lifecycleRestoreStorageClass    #New 'STORAGE_CLASS'

JOB_OP.S3InitiateRestoreObject    #JOB_RESTORE. Call RestoreObject() on multiple OBJECTs
                                  #OBJECTs can use INTELLIGENT_TIERING or not, but not both
                                  #JOB.RoleArn must be allowed to PACTION 's3:RestoreObject'
JOB_RESTORE.ExpirationInDays      #NUM. RESTORE.Days
JOB_RESTORE.GlacierJobTier        #STR. RESTORE.Tier. Cannot be 'EXPEDITED'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INTELLIGENT TIERING      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?intelligent-tiering   #Req: INTELLIGENT_TIERING
PutBucketIntelligentTiering       #  - also query variables: ITELLIGENT_TIERING.id
 Configuration()                  #Res: empty
                                  #PACTION named 's3:PutIntelligentTieringConfiguration' instead
GET /BUCKET?intelligent-tiering   #Req: INTELLIGENT_TIERING
GetBucketIntelligentTiering       #  - only id
 Configuration()                  #Res: INTELLIGENT_TIERING
                                  #PACTION named 's3:GetIntelligentTieringConfiguration' instead
GET /BUCKET?intelligent-tiering   #Req: empty
ListBucketIntelligentTiering      #Res: IntelligentTieringConfiguration INTELLIGENT_TIERING_ARR
 Configurations()                 #Paginates with continuationToken
                                  #No own PACTION: use 's3:GetIntelligentTieringConfiguration' instead
DELETE /BUCKET?intelligent-tiering#Req: INTELLIGENT_TIERING
DeleteBucketIntelligentTiering    #  - only id
 Configuration()                  #Res: empty
                                  #No own PACTION: use 's3:PutIntelligentTieringConfiguration' instead

INTELLIGENT_TIERING               #Automatically set StorageClass to:
                                  #  - STANDARD: always used if OBJECT <128KB
                                  #  - STANDARD_IA: when not used for 30 days
                                  #  - GLACIER_IR: when not used for 90 days
                                  #  - GLACIER: when not used for NUM days (min 90, max 730)
                                  #  - DEEP_ARCHIVE: when not used for NUM days (min 180, max 730)
                                  #"Used" means any of:
                                  #  - content read|write: GetObject(), CopyObject|UploadPartCopy(), RestoreObject(),
                                  #    PutObject|CompleteMultipartUpload|ListParts()
                                  #  - SelectObjectContent(), only for GLACIER|DEEP_ARCHIVE
                                  #  - but not metadata read|write: ListObjectsV2(), HeadObject(), etc.
                                  #Only impacts effective StorageClass: the one reported is always 'INTELLIGENT_TIERING'
                                  #Max 1e3 per BUCKET

INTELLIGENT_TIERING.Id            #INTELLIGENT_TIERING_MID
INTELLIGENT_TIERING.Status        #'Enabled' (def) or 'Disabled'

INTELLIGENT_TIERING.Tiering       #TIERING_CONF_ARR (def: empty, i.e. does not use '[DEEP_]GLACIER')
x-amz-archive-status: STR [S]
TIERING_CONF.AccessTier           #StorageClass, among '[DEEP_]ARCHIVE_ACCESS' (for '[DEEP_]GLACIER')
TIERING_CONF.Days                 #NUM. After OBJECT not read for NUM days, sets StorageClass to TIERING_CONF.AccessTier

INTELLIGENT_TIERING.Filter        #FILTER. Only apply INTELLIGENT_TIERING to matching OBJECTs.
FILTER.Prefix                     #STR. Only if 'OBJECT' start with STR
FILTER.And                        #FILTER_ARR

NEVENT s3:IntelligentTiering      #When INTELLIGENT_TIERING sets STORAGE_CLASS to GLACIER|DEEP_ARCHIVE
NMESSAGE
 .intelligentTieringEventData
 .destinationAccessTier           #New 'STORAGE_CLASS'. For NEVENT s3:IntelligentTiering only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LIFECYCLE MAIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?lifecycle             #Req: LIFECYCLE, x-amz-checksum-ALGO [C]
PutBucketLifecycleConfiguration() #Res: empty
                                  #PACTION named 's3:PutLifecycleConfiguration' instead
GET /BUCKET?lifecycle             #Req: empty
GetBucketLifecycleConfiguration() #Res: LIFECYCLE
                                  #PACTION named 's3:GetLifecycleConfiguration' instead
DELETE /BUCKET?lifecycle          #Req: empty
DeleteBucketLifecycle()           #Res: empty
                                  #No own PACTION: use 's3:PutLifecycleConfiguration' instead

LIFECYCLE                         #Rotate an OBJECT, i.e. delete or set its StorageClass after a specific time
LIFECYCLE.Rules                   #LIFECYCLE_RULE_ARR. If an OBJECT match multiple ones, use only last one
                                  #Max 1e3
LIFECYCLE_RULE.Id                 #'LIFECYCLE_RULE'. Max 255 chars.
LIFECYCLE_RULE.Status             #'Enabled' (def) or 'Disabled'

LIFECYCLE_RULE.Filter             #LIFECYCLE_FILTER. Only apply to matching OBJECTs
LIFECYCLE_FILTER.*                #Like FILTER.*
LIFECYCLE_FILTER
 .ObjectSizeGreater|LessThan      #NUM (in bytes)

AWS/S3/Storage-Lens/
 TotalLifecycleRuleCount          #NUM of LIFECYCLE_RULEs
SLENS_METRIC Average lifecycle
 rule count per bucket            #Average TotalLifecycleRuleCount per BUCKET


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    LIFECYCLE STORAGE CLASS    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIFECYCLE_RULE.Transitions        #TRANSITION_ARR. Sets StorageClass to TRANSITION.StorageClass, after a specific time
                                  #Does not require PACTION 's3:PutObject[Version]'
[N]TRANSITION.StorageClass        #Same values as OBJECT.StorageClass, except no 'STANDARD|REDUCED_REDUNDANCY|SNOW|OUTPOSTS'
TRANSITION.Days                   #NUM days from OBJECT creation
TRANSITION.Date                   #Specific 'DATE'

LIFECYCLE_RULE                    #NTRANSITION_ARR. Same but applies to all VERSIONs except current one
 .NonCurrentVersionTransitions    #As opposed to LIFECYCLE_RULE.Transitions, which only applies to current VERSION
NTRANSITION.NoncurrentDays        #NUM days from OBJECT not being the current VERSION anymore
NTRANSITION
 .NewerNoncurrentVersions         #Applies to all VERSIONs except NUM+1 most recent (including current one)

AWS/S3/Storage-Lens/
 TransitionLifecycleRuleCount     #Like TotalLifecycleRuleCount, but only with Transition set
AWS/S3/Storage-Lens/
 NoncurrentVersionTransition
 LifecycleRuleCount               #Like TotalLifecycleRuleCount, but only with NonCurrentVersionTransition set
SLENS_METRIC Average transition
 lifecycle rules per bucket       #Average TransitionLifecycleRuleCount per BUCKET
SLENS_METRIC Average noncurrent
 version transition lifecycle
 rules per bucket                 #Average NoncurrentVersionTransitionLifecycleRuleCount per BUCKET

NEVENT s3:LifecycleTransition     #When [N]TRANSITION changes a STORAGE_CLASS
NMESSAGE.lifecycleEventData
 .transitionEventData
 .destinationStorageClass         #New 'STORAGE_CLASS'. For NEVENT s3:LifecycleTransition only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     LIFECYCLE EXPIRATION      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIFECYCLE_RULE.Expiration         #EXPIRATION. Delete OBJECT, after a specific time
                                  #Does not require PACTION 's3:DeleteObject[Version]'
EXPIRATION.Days|Date              #Like TRANSITION.*

LIFECYCLE_RULE                    #NEXPIRATION. Same but applies to all VERSIONs except current one
 .NonCurrentVersionExpiration     #Delete with a versionId, i.e. permanent delete
                                  #As opposed to LIFECYCLE_RULE.Expiration, which only applies to current VERSION, and delete without a versionId
NEXPIRATION.NoncurrentDays
 |NewerNoncurrentVersions         #Like NTRANSITION.*

x-amz-expiration:
 expiry-date=DATE,
 rule-id=LIFECYCLE_RULE [S]       #Set by EXPIRATION

AWS/S3/Storage-Lens/
 ExpirationLifecycleRuleCount     #Like TotalLifecycleRuleCount, but only with Expiration set
AWS/S3/Storage-Lens/
 NoncurrentVersionExpiration
 LifecycleRuleCount               #Like TotalLifecycleRuleCount, but only with NonCurrentVersionExpiration set and ExpiredObjectDeleteMarker false
SLENS_METRIC Average expiration
 lifecycle rules per bucket       #Average ExpirationLifecycleRuleCount per BUCKET
SLENS_METRIC Average noncurrent
 version expiration lifecycle
 rules per bucket                 #Average NoncurrentVersionExpirationLifecycleRuleCount per BUCKET

NEVENT
 s3:LifecycleExpiration:Delete    #When [N]EXPIRATION permanently deletes
NEVENT s3:LifecycleExpiration:
 DeleteMarkerCreated              #When [N]EXPIRATION creates a delete marker


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    LIFECYCLE DELETE MARKER    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPIRATION                        #BOOL (def: false). Permanent delete OBJECT as soon as it has only one VERSION
 .ExpiredObjectDeleteMarker       #and that VERSION is a delete marker.
                                  #Cannot be specified together with EXPIRATION.Days|Date
                                  #Not if LIFECYCLE_FILTER uses TAGs
                                  #Does not require PACTION 's3:DeleteObject[Version]'

AWS/S3/Storage-Lens/ExpiredObject
 DeleteMarkerLifecycleRuleCount   #Like TotalLifecycleRuleCount, but only with NonCurrentVersionExpiration set and ExpiredObjectDeleteMarker true
SLENS_METRIC Average expired
 object delete marker lifecycle
 rules per bucket                 #Average ExpiredObjectDeleteMarkerLifecycleRuleCount per BUCKET


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      LIFECYCLE MULTIPART      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIFECYCLE_RULE                    #NUM. Delete MUPLOADs if not completed within NUM days
 .AbortIncompleteMultipartUpload  #Does not require PACTION 's3:AbortMultipartUpload'
 .DaysAfterInitiation             #Not if LIFECYCLE_FILTER uses TAGs

x-amz-abort-rule-id:
 LIFECYCLE_RULE [S]
x-amz-abort-date: DATE [S]        #When aborted

AWS/S3/Storage-Lens/Abort
 IncompleteMPULifecycleRuleCount  #Like TotalLifecycleRuleCount, but only with AbortIncompleteMultipartUpload set
SLENS_METRIC Average abort
 incomplete multipart upload
 lifecycle rules per bucket       #Average AbortIncompleteMPULifecycleRuleCount per BUCKET

AWS/S3/Storage-Lens/Incomplete
 MultipartUploadStorageBytes      #Like StorageBytes, but only for MPARTs
AWS/S3/Storage-Lens/Incomplete
 MPUStorageBytesOlderThan7Days    #Like IncompleteMultipartUploadStorageBytes, but only for MPARTs older than 7 days
AWS/S3/Storage-Lens/Incomplete
 MultipartUploadObjectCount       #Like ObjectCount, but only for MPARTs
AWS/S3/Storage-Lens/Incomplete
 MPUObjectCountOlderThan7Days     #Like IncompleteMultipartUploadCount, but only for MPARTs older than 7 days
SLENS_METRIC % incomplete
 multipart upload bytes           #% of IncompleteMultipartUploadStorageBytes/StorageBytes
SLENS_METRIC % incomplete
 multipart upload storage bytes
 greater than 7 days old          #% of IncompleteMPUStorageBytesOlderThan7Days/StorageBytes
SLENS_METRIC % incomplete
 multipart upload objects         #% of IncompleteMultipartUploadObjectCount/ObjectCount
SLENS_METRIC % incomplete
 multipart upload object count
 greater than 7 days old          #% of IncompleteMPUObjectCountOlderThan7Days/ObjectCount


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOCK              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?object-lock           #Req: OBJECT_LOCK, x-amz-bucket-object-lock-token [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
PutObjectLockConfiguration()      #Res: empty
                                  #PACTION named 's3:PutBucketObjectLockConfiguration' instead
GET /BUCKET?object-lock           #Req: empty
GetObjectLockConfiguration()      #Res: OBJECT_LOCK
                                  #PACTION named 's3:GetBucketObjectLockConfiguration' instead

PUT /BUCKET/OBJECT?retention      #Req:
PutObjectRetention()              #  - OBJECT_RETENTION
                                  #  - x-amz-bypass-governance-retention [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: empty
GET /BUCKET/OBJECT?retention      #Req: OBJECT
GetObjectRetention()              #  - only versionId
                                  #Res: OBJECT_RETENTION

OBJECT_LOCK                       #Do not allow deleting OBJECT VERSIONs for a specific duration
                                  #Does not prevent new VERSIONs from being created for this OBJECT
                                  #  - including adding a delete marker
                                  #Versioning must be enabled

x-amz-bucket-object-lock-enabled:
 STR [C]                          #'Disabled' (def) or 'Enabled'
OBJECT_LOCK.ObjectLockEnabled     #Requires PACTIONs 's3:PutBucketObjectLockConfiguration' + 's3:PutBucketVersioning'
x-amz-bucket-object-lock-token:   #'TOKEN' received from AWS support
 STR [C]                          #Allows changing OBJECT_LOCK.ObjectLockEnabled for an existing BUCKET

OBJECT_LOCK.Rule.DefaultRetention #DEFAULT_RETENTION. Default OBJECT_RETENTION for OBJECTs in this BUCKET
DEFAULT_RETENTION.Years|Days      #"Retention period". NUM used to computed default x-amz-object-lock-retain-until-date [C]
                                  #Def: none, i.e. only locked when using x-amz-object-lock-retain-until-date [C]
COND_KEY s3:object-lock-remaining
 -retention-days                  #DEFAULT_RETENTION.Days. Only for PACTIONs 's3:PutObjectRetention|PutObject|BypassGovernanceRetention'

x-amz-object-lock-retain-
 until-date: DATE [C|S]           #'DATE'
OBJECT_RETENTION.RetainUntilDate  #Requires PACTION 's3:Put|GetObjectRetention'
COND_KEY
 s3:object-lock-retain-until-date #OBJECT_RETENTION.RetainUntilDate. Only for PACTIONs 's3:PutObjectRetention|PutObject|BypassGovernanceRetention'

x-amz-object-lock-mode: STR [C|S] #Whether x-amz-bypass-governance-retention [C] is allowed:
DEFAULT_RETENTION|OBJECT_RETENTION#'GOVERNANCE' (yes, def) or 'COMPLIANCE' (no)
 .Mode                            #Requires PACTION 's3:Put|GetObjectRetention'
COND_KEY s3:object-lock-mode      #OBJECT_RETENTION.Mode. Only for PACTIONs 's3:PutObjectRetention|PutObject|BypassGovernanceRetention'

x-amz-bypass-governance-retention:#Required to call PutObjectRetention() on an OBJECT already locked
 BOOL [C]                         #Even for root
                                  #Requires PACTION 's3:BypassGovernanceRetention'

AWS/S3/Storage-Lens/
 ObjectLockEnabledStorageBytes    #Like StorageBytes, but only when OBJECT_LOCK enabled
AWS/S3/Storage-Lens/
 ObjectLockEnabledObjectCount     #Like ObjectCount, but only when OBJECT_LOCK enabled
SLENS_METRIC % Object Lock bytes  #% of ObjectLockEnabledStorageBytes/StorageBytes
SLENS_METRIC % Object Lock objects#% of ObjectLockEnabledObjectCount/ObjectCount

JOB_OP.S3PutObjectRetention       #JOB_LOCK. Call PutObjectRetention() on multiple OBJECTs
                                  #JOB.RoleArn must be allowed to PACTIONs:
                                  #  - 's3:PutObjectRetention|GetBucketObjectLockConfiguration'
                                  #  - 's3:BypassGovernanceRetention': if JOB_LOCK.BypassGovernanceRetention true
JOB_LOCK.Retention.RetainUntilDate#'DATE'. OBJECT_RETENTION.RetainUntilDate
JOB_LOCK.Retention.Mode           #STR. OBJECT_RETENTION.Mode
JOB_LOCK.BypassGovernanceRetention#BOOL. x-amz-bypass-governance-retention [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          LEGAL HOLD           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT?legal-hold     #Req:
PutObjectLegalHold()              #  - LEGAL_HOLD
                                  #  - Content-MD5 [C], x-amz-checksum-ALGO [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: empty
GET /BUCKET/OBJECT?legal-hold     #Req: OBJECT
GetObjectLegalHold()              #  - only versionId
                                  #Res: LEGAL_HOLD

LEGAL_HOLD                        #Like OBJECT_LOCK but:
                                  #  - no expiry DATE
                                  #  - can always be changed
                                 ##With Pulumi, can be deleted from OBJECT using RPROPS.forceDestroy true
x-amz-object-lock-legal-hold:
 STR [C|S]                        #'ON' or 'OFF' (def)
LEGAL_HOLD.Status                 #Requires PACTION 's3:Put|GetObjectLegalHold'
COND_KEY s3:object-lock-legal-hold#LEGAL_HOLD.Status. Only for PACTIONs 's3:PutObjectLegalHold|PutObject|BypassGovernanceRetention'

JOB_OP.S3PutObjectLegalHold       #STR. Call PutObjectLegalHold() on multiple OBJECTs
 .LegalHold.Status                #JOB.RoleArn must be allowed to PACTIONs 's3:PutObjectLegalHold|GetBucketObjectLockConfiguration'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BUCKET OWNER          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUCKETS_LIST.Owner                #S3_OWNER. BUCKET_OWNER, ACCOUNT that called CreateBucket()

x-amz-expected-bucket-owner:      #403 if BUCKET_OWNER is different
 ACCOUNT_ID [C]                   #On all ACTIONs except: CreateBucket(), ListBuckets(), WriteGetObjectResponse()

S3_OWNER                          #BUCKET_OWNER|OBJECT_OWNER
S3_OWNER.DisplayName              #'S3_OWNER' shown in UI
S3_OWNER.ID                       #CANONICAL_ACCOUNT_ID

COND_KEY s3:ResourceAccount       #'ACCOUNT_ID'. Same as aws:ResourceAccount, but only for S3


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OBJECT OWNER          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?ownershipControls     #Req: BUCKET_OWNERSHIP, Content-MD5 [C]
PutBucketOwnershipControls()      #Res: empty
GET /BUCKET?ownershipControls     #Req: empty
GetBucketOwnershipControls()      #Res: BUCKET_OWNERSHIP
DELETE /BUCKET?ownershipControls  #Req: empty
DeleteBucketOwnershipControls()   #Res: empty
                                  #No own PACTION: use 's3:PutBucketOwnershipControls' instead

BUCKET_OWNERSHIP.Rule             #BUCKET_OWNERSHIP_RULE_ARR
BUCKET_OWNERSHIP_RULE             #Who is OBJECT_OWNER, among:
 .ObjectOwnership                 #  - 'BucketOwnerEnforced' (def): BUCKET_OWNER
x-amz-object-ownership: STR [C]   #     - also disables ACLs (but not POLICYs)
                                  #  - 'BucketOwnerPreferred': BUCKET_OWNER if 'ACL' bucket-owner-full-control,
                                  #    PRINCIPAL uploading the OBJECT otherwise
                                  #  - 'ObjectWriter': PRINCIPAL uploading the OBJECT
                                  #Requires PACTION 's3:PutBucketOwnershipControls'
COND_KEY s3:x-amz-object-ownership#BUCKET_OWNERSHIP_RULE.ObjectOwnership. Only for PACTION 's3:CreateBucket'

OBJECTS.FetchOwner                #BOOL (def: false). Whether to return OBJECT.Owner
OBJECT|MUPLOAD.Owner              #S3_OWNER. OBJECT_OWNER.

AWS/S3/Storage-Lens/
 ObjectOwnershipBucketOwner
 EnforcedBucketCount              #Like Buckets, but only with BucketOwnerEnforced
AWS/S3/Storage-Lens/
 ObjectOwnershipBucketOwner
 PreferredBucketCount             #Like Buckets, but only with BucketOwnerPreferred
AWS/S3/Storage-Lens/
 ObjectOwnershipObjectWriter
 BucketCount                      #Like Buckets, but only with ObjectWriter
SLENS_METRIC % Object Ownership
 bucket owner enforced buckets    #% of ObjectOwnershipBucketOwnerEnforcedBucketCount/Buckets
SLENS_METRIC % Object Ownership
 bucket owner preferred buckets   #% of ObjectOwnershipBucketOwnerPreferredBucketCount/Buckets
SLENS_METRIC % Object Ownership
 object writer buckets            #% of ObjectOwnershipObjectWriterBucketCount/Buckets


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BUCKET POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?policy                #Req:
PutBucketPolicy()                 #  - BUCKET_POLICY
                                  #  - x-amz-confirm-remove-self-bucket-access [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
                                  #Res: empty
GET /BUCKET?policy                #Req: empty
GetBucketPolicy()                 #Res: BUCKET_POLICY
DELETE /BUCKET?policy             #Req: empty
DeleteBucketPolicy()              #Res: empty

BUCKET_POLICY                     #IAM POLICY_DOC, as OBJ
                                  #Resource-based POLICY, with resource-level permissions
                                  #Applies to a BUCKET, including all its OBJECTs
                                  #OBJECTs not owned by BUCKET_OWNER:
                                  #  - ignored by Allow STATEMENTs (but not Deny STATEMENTs)
                                  #  - OBJECT_OWNER must use ACLs instead
                                  #OWNERs are ACCOUNTs
                                  #  - to allow their USERs, ACCOUNTs must create user-based POLICYs
                                  #  - user-based POLICYs cannot be used for cross-ACCOUNT permissions
                                  #     - but can setup ROLEs for other ACCOUNTs to assume
                                  #Allow by default:
                                  #  - any PACTION on:
                                  #     - BUCKET by BUCKET_OWNER
                                  #     - OBJECT by OBJECT_OWNER
                                  #  - DeleteObject[s]() on any OBJECT by BUCKET_OWNER
                                  #     - even if not owned by it
                                  #Max 20KB

x-amz-confirm-remove-self-
 bucket-access: true [C]          #Forbid any further PutBucketPolicy()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ACL MAIN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?acl                   #Req:
PutBucketAcl()                    #  - ACL
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-checksum-ALGO [C]
                                  #Res: empty
GET /BUCKET?acl                   #Req: empty
GetBucketAcl()                    #Res: ACL
PUT /BUCKET/OBJECT?acl            #Req:
PutObjectAcl()                    #  - ACL
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: x-amz-version-id [S]
GET /BUCKET/OBJECT?acl            #Req: OBJECT
GetObjectAcl()                    #  - only versionId
                                  #Res: ACL, x-amz-version-id [S]

x-amz-grant-PERMISSION:           #PERMISSION is 'read[-acp]', 'write[-acp]', 'full-control' (GRANT.Permission) or 'private'
 GRANTEE,... [C]                  #GRANTEE is VAR=VAL (GRANT.Grantee) with VAR id|emailAddress|uri
                                  #Requires PACTION 's3:PutBucketAcl|PutObjectAcl'
COND_KEY s3:x-amz-grant-PERMISSION#x-amz-grant-permission [C]. Only for PACTIONs 's3:CreateBucket|PutObject|PutBucketAcl|PutObject[Version]Acl'

ACL                               #Like BUCKET POLICY but:
                                  #  - pros:
                                  #     - on OBJECT (not BUCKET)
                                  #     - VERSION-specific (def: current)
                                  #     - can use logic based on OBJECT_OWNER
                                  #     - can allow permissions on OBJECTs not owned by BUCKET_OWNER
                                  #     - simpler
                                  #  - cons:
                                  #     - less flexible: no Deny, COND_KEY, etc.
                                  #     - give broader permissions
                                  #     - PRINCIPAL type is only ACCOUNT, not USER|SERVICE
                                  #Generally discouraged except when need one of the pros above:
                                  #  - although most is possible with BUCKET POLICY using:
                                  #     - COND_KEYs
                                  #     - x-amz-meta-* [C|S] or TAGs to emulate OBJECT ownership
ACL.Owner                         #BUCKET_OWNER
ACL|RESTORE_OUTPUT                #GRANT_ARR
 .AccessControlList.Grants        #Max 100

GRANT.Permission                  #If BUCKET:
                                  #  - "READ": s3:ListBucket*
                                  #  - "WRITE": s3:PutObject
                                  #     - if BUCKET_OWNER|OBJECT_OWNER: s3:DeleteObject*
                                  #  - "READ_ACP": s3:GetBucketAcl
                                  #  - "WRITE_ACP": s3:PutBucketAcl
                                  #  - "FULL_CONTROL": all of above
                                  #If OBJECT:
                                  #  - "READ": s3:GetObject[Torrent|Version]
                                  #  - "WRITE": does not exist
                                  #  - "READ_ACP": s3:GetObject[Version]Acl
                                  #  - "WRITE_ACP": s3:PutObject[Version]Acl
                                  #  - "FULL_CONTROL": all of above

GRANT.Grantee                     #GRANTEE
GRANTEE.DisplayName               #'GRANTEE' shown in UI
GRANTEE.Type                      #One of:
                                  #  - 'CanonicalUser': GRANTEE.ID
                                  #  - 'AmazonCustomerByEmail': GRANTEE.EmailAddress
                                  #  - 'Group': GRANTEE.URI
GRANTEE.ID                        #CANONICAL_ACCOUNT_ID
GRANTEE.EmailAddress              #'EMAIL' (of ACCOUNT)
GRANTEE.URI                       #One of:
                                  #  - http://acs.amazonaws.com/groups/global/AuthenticatedUsers: anyone authenticated
                                  #  - http://acs.amazonaws.com/groups/global/AllUsers: anyone
                                  #     - same as in BUCKET_POLICY: Principal '*'
                                  #     - CANONICAL_ACCOUNT_ID '65a011a29cdf8ec533ec3d1ccaae921c'

NEVENT s3:ObjectAcl:Put           #On PutObjectAcl() success

JOB_OP.S3PutObjectAcl             #JOB_ACL. Call PutObjectAcl() on multiple OBJECTs
 .AccessControlPolicy             #JOB.RoleArn must be allowed to PACTIONs 's3:PutObject[Version]Acl'
JOB_ACL.CannedAccessControlList   #'ACL'. x-amz-acl [C]
JOB_ACL.AccessControlList         #JOB_ACLIST
JOB_ACLIST.Grants                 #GRANT_ARR. ACL.AccessControlList[*].Grantee but:
                                  #  - Id|EmailAddress|URI -> Identifier
                                  #  - type -> TypeIdentifier
JOB_ACLIST.Owner                  #BUCKET_OWNER. ACL.Owner


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACL CANNED           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-acl: 'ACL' [C]              #'ACL'
RESTORE_OUTPUT.CannedACL          #Requires PACTION 's3:PutBucketAcl|PutObjectAcl'
COND_KEY s3:x-amz-acl             #x-amz-acl [C]. Only for PACTIONs 's3:CreateBucket|PutObject|PutBucketAcl|PutObject[Version]Acl'

'ACL'                             #Shortcut for ACL
                                  #Default for any BUCKET|OBJECT: private
'ACL' private                     #BUCKET|OBJECT_OWNER: FULL_CONTROL
'ACL' public-read[-write]         #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #AllUsers: READ [and WRITE]
'ACL' authenticated-read          #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #AuthenticatedUsers: READ
'ACL' bucket-owner-full-control   #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #Only for OBJECTs
'ACL' bucket-owner-read           #OBJECT_OWNER: FULL_CONTROL
                                  #BUCKET_OWNER: READ
                                  #Only for OBJECTs
'ACL' aws-exec-read               #BUCKET|OBJECT_OWNER: FULL_CONTROL
                                  #EC2: READ (only to GET an AMI)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PUBLIC ACCESS BLOCK      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?publicAccessBlock     #Req: PUBLIC_BLOCK, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutPublicAccessBlock()            #Res: empty
                                  #PACTION named 's3:PutBucketPublicAccessBlock' instead
GET /BUCKET?publicAccessBlock     #Req: empty
GetPublicAccessBlock()            #Res: PUBLIC_BLOCK
                                  #PACTION named 's3:GetBucketPublicAccessBlock' instead
DELETE /BUCKET?publicAccessBlock  #Req: empty
DeletePublicAccessBlock()         #Res: empty
                                  #No own PACTION: use 's3:PutBucketPublicAccessBlock' instead

PUT|GET|DELETE
 /configuration/publicAccessBlock #Same but for all BUCKETs
Put|Get|DeletePublicAccessBlock() #If BUCKET also has a PUBLIC_BLOCK, and'd, i.e. use most restrictive
                                  #PACTION named 's3:Put|GetAccountPublicAccessBlock' instead

ACCESSPOINT
 .PublicAccessBlockConfiguration
MACCESSPOINT.PublicAccessBlock
LACCESSPOINT                      #PUBLIC_BLOCK
 .PublicAccessBlockConfiguration  #Requires PACTION 's3:PutAccessPointPublicAccessBlock'

PUBLIC_BLOCK                      #Any of the properties impacted is reflected in GetBucketAcl|GetObjectAcl() too
                                  #Def for all BOOLs: true
PUBLIC_BLOCK.BlockPublicAcls      #BOOL. Prevent new public ACLs (PutBucketAcl|PutObjectAcl())
PUBLIC_BLOCK.IgnorePublicAcls     #BOOL. Ignore existing public ACLs
PUBLIC_BLOCK.BlockPublicPolicy    #BOOL. Prevent PutBucketPolicy() with public POLICY STATEMENTs
PUBLIC_BLOCK.RestrictPublicBuckets#BOOL. Ignore cross-account + public BUCKET POLICY STATEMENTs

GET /BUCKET?policyStatus          #Req: empty
GetBucketPolicyStatus()           #Res: POLICY_STATUS
GET /accesspoint/ACCESSPOINT
 /policyStatus                    #Req: empty
GetAccessPointPolicyStatus()      #Res: PolicyStatus POLICY_STATUS
GET /mrap/instances/MACCESSPOINT
 /policystatus
GetMultiRegionAccessPoint         #Req: empty
 PolicyStatus()                   #Res: Established POLICY_STATUS
GET /accesspointforobjectlambda
 /LACCESSPOINT/policyStatus
GetAccessPointPolicyStatus        #Req: empty
 ForObjectLambda()                #Res: PolicyStatus POLICY_STATUS

POLICY_STATUS.IsPublic            #BOOL. Whether has public STATEMENTs

PUBLIC ACL ==>                    #ACL with GRANTEE AllUsers|AuthenticatedUsers
PUBLIC POLICY STATEMENTS ==>      #BUCKET POLICY's STATEMENT using neither:
                                  #  - PRINCIPAL
                                  #     - except '*', ACCOUNT, FEDERATED_USER
                                  #  - one of following COND_KEYs:
                                  #     - aws:SourceIp
                                  #        - at least /8 netmask for IPv4, /32 for IPv6
                                  #     - aws:SourceArn|Account
                                  #     - aws:SourceVpc[e]
                                  #     - aws:userid
                                  #     - s3:x-amz-server-side-encryption-aws-kms-key-id
                                  #     - s3:DataAccessPointArn|Account
                                  #  - ACCESSPOINT.NetworkOrigin 'VPC'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PRE-SIGNED URL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRE-SIGNED URL ==>                #Computing the AWS signature of a specific PARAMS (path, query, headers, body) for a given ACTION
                                  #Then sharing the URL with the AWS signature as query variables
                                  #E.g. share a URL to GetObject() a private OBJECT
                                  #If using SSE, the actual request must still include x-server-side-encryption-* [C]
                                  #Cannot use x-amz-checksum-* [C]

x-amz-expires: NUM [C]            #Can be used (see AWS signature doc). Mostly meant for pre-signed URLs
                                  #Max depends on current authentication method
                                  #  - INSTANCE_PROFILE: 6h
                                  #  - STS: min (36h, TEMP_CREDS)
                                  #  - otherwise: 7d

x-amz-content-sha256: STR [C]     #Can be used for AWS signature (see its doc) to either:
COND_KEY x-amz-content-sha256     #  - ignore request body (mostly meant for pre-signed URLs)
                                  #  - use a chunked request body
                                  #Must not use Content-MD5 [C]

@aws-sdk/s3-request-presigner     #Part of JavaScript SDK
getSignedUrl
 (CLIENT, COMMAND[, OPTS])->>'URL'#Create pre-signed URL
OPTS.expiresIn                    #NUM (in secs, def: 15m). x-amz-expires [C]

COND_KEY
 s3[-object-lambda]:TlsVersion    #NUM. TLS version of request
CLOUDTRAIL_METADATA CipherSuite   #STR, e.g. 'ECDHE-RSA-AES128-SHA'
COND_KEY                          #How request is signed, among:
 s3[-object-lambda]:authType      #  - 'REST-HEADER': request header
                                  #  - 'REST-QUERY-STRING': query variable
                                  #  - 'POST': BUPLOAD signature
CLOUDTRAIL_METADATA
 AuthenticationMethod             #'AuthHeader|QueryString|Post'
COND_KEY s3:signatureversion      #'AWS' (v2) or 'AWS4-HMAC-SHA256' (v4)
CLOUDTRAIL_METADATA
 SignatureVersion                 #'SigV2|4'
COND_KEY
 s3[-object-lambda]:signatureAge  #NUM (in ms) difference between now and signature's DATE

aws s3 presign S3FILE             #Print pre-signed URL for GetObject()
--expires-in                      #NUM (def: 7 days)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STATIC WEBSITE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?website               #Req: STATIC_WEBSITE, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketWebsite()                #Res: empty
GET /BUCKET?website               #Req: empty
GetBucketWebsite()                #Res: STATIC_WEBSITE
DELETE /BUCKET?website            #Req: empty
DeleteBucketWebsite()             #Res: empty

STATIC_WEBSITE                    #Optimizes BUCKET for static website hosting
                                  #Max 128KB

GET|HEAD http://BUCKET.s3-website #Redirects to GET|HEAD BUCKET.s3.REGION.amazonaws.com/OBJECT
 .REGION.amazonaws.com/OBJECT     #Only when STATIC_WEBSITE enabled
                                  #All STATIC_WEBSITE.* apply only to this call
                                  #Does not support HTTPS (must use CloudFront)
                                  #Requests are always considered unauthenticated

STATIC_WEBSITE.ErrorDocument.Key  #'OBJECT' returned for 4** errors
                                  #Def: HTML error response
STATIC_WEBSITE                    #'FILENAME' (e.g. 'index.html') appended to 'OBJECT' that is a folder, i.e. either:
 .IndexDocument.Suffix            #  - no /OBJECT
                                  #  - ends with Delimiter
                                  #  - OBJECT does not exist but OBJECT/FILENAME does
                                  #E.g. 'index.html'
                                  #Only for GET|HEAD

STATIC_WEBSITE
 .RedirectsAllRequestsTo          #STATIC_REDIRECT
STATIC_REDIRECT.HostName          #'HOSTNAME' to redirect to, instead of BUCKET.s3.REGION.amazonaws.com
STATIC_REDIRECT.Protocol          #'http[s]' (def: same)

STATIC_WEBSITE.RoutingRules       #ROUTING_RULE_ARR. Redirects
                                  #Max 50
ROUTING_RULE.Condition            #ROUTING_CONDITION that must be met to redirect
ROUTING_CONDITION
 .HttpErrorCodeReturnedEquals     #'NUM' of status code
ROUTING_CONDITION.KeyPrefixEquals #STR. Redirect if 'OBJECT' starts with STR
ROUTING_RULE.Redirect             #ROUTING_REDIRECT. Where to redirect
ROUTING_REDIRECT.Protocol         #'http[s]' (def: same)
ROUTING_REDIRECT.HostName         #'HOSTNAME'
ROUTING_REDIRECT.ReplaceKeyWith   #'OBJECT'
ROUTING_REDIRECT
 .ReplaceKeyPrefixWith            #STR replacing part in 'OBJECT' matched by KeyPrefixEquals
ROUTING_REDIRECT.HttpRedirectCode #'NUM'

x-amz-website-redirect-location:  #301 redirect to URL, for this specific OBJECT
 URL [C|S]                        #Applied to STATIC_WEBSITE endpoint, not to direct GetObject()
                                  #URL can be relative
COND_KEY s3:x-amz-website-
 redirect-location                #x-amz-website-redirect-location [C]. Only for PACTIONs 's3:PutObject|BypassGovernanceRetention'

aws s3 website S3BUCKET           #PutBucketWebsite()
--index-document
--error-document                  #Same as request headers


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?cors                  #Req: CORS, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketCors()                   #Res: empty
                                  #PACTION named 's3:PutBucketCORS' instead
GET /BUCKET?cors                  #Req: empty
GetBucketCors()                   #Res: CORS
                                  #PACTION named 's3:GetBucketCORS' instead
DELETE /BUCKET?cors               #Req: empty
DeleteBucketCors()                #Res: empty
                                  #No own PACTION: use 's3:PutBucketCORS' instead

CORS                              #Set CORS response headers
                                  #Max 64KB
CORS.CORSRules                    #CORD_RULE_ARR
                                  #Max 100
CORS_RULE.ID                      #STR. Max 255 chars
CORS_RULE.AllowedMethods          #'METHOD'_ARR. Access-Control-Allow-Methods [S]
CORS_RULE.AllowedOrigins          #'ORIGIN'_ARR. Access-Control-Allow-Origin [S]. Can contain *
CORS_RULE.AllowedHeaders          #'HEADER'_ARR. Access-Control-Allow-Headers [S]. Can contain *
CORS_RULE.ExposeHeaders           #'HEADER'_ARR. Access-Control-Expose-Headers [S]
CORS_RULE.MaxAgeSeconds           #NUM. Access-Control-Max-Age [S]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENCRYPTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVER-SIDE ENCRYPTION ==>        #Encrypt OBJECT before writing, decrypt before reading
                                  #"SSE", "encryption at rest"
                                  #Uses AES256 GCM
                                  #Cannot be disabled, but can configured algorithm and key

x-amz-server-side-encryption:     #"SSE-S3". Default behavior: uses AWS KMS to generate one data key per OBJECT
 AES256 [C|S]                     #'aws/s3' KMS_KEY, managed by AWS, automatically rotated
                                  #Other ACCOUNTs cannot access OBJECTs
COND_KEY                          #x-amz-server-side-encryption [C|S]
 s3:x-amz-server-side-encryption  #Only for PACTIONs 's3:PutObject|ReplicateObject|BypassGovernanceRetention'

x-amz-server-side-encryption:     #"SSE-KMS". Like SSE-S3 but with a specific KMS_KEY
 aws:kms [C|S]                    #By default, use 'aws/s3' (like SSE-S3)
                                  #Induce cost for traffic between S3 and KMS
                                  #  - on write: get a data key
                                  #  - on read: request KMS to send decrypted OBJECT full contents
                                  #In addition to encrypting the data, also encrypts the checksums
                                  #For other ACCOUNTs to access OBJECTs, must use x-amz-server-side-encryption-aws-kms-key-id [C]
                                  #Requires PACTIONs on KMS_KEY:
                                  #  - 'kms:Encrypt' + 'kms:GenerateDataKey': on write
                                  #  - 'kms:Decrypt': on read
x-amz-server-side-encryption:     #"DSSE-KMS". Like "SSE-KMS" but with dual-layer encryption
 aws:kms:dsse [C|S]               #I.e. encrypt|decrypt twice:
                                  #  - same algorithm, but different implementation
                                  #  - same KMS_KEY, but different data keys
x-amz-server-side-encryption      #"Customer managed key". Use a specific KMS_KEY
 -aws-kms-key-id:                 #KMS_KEY must be in same REGION as BUCKET
 KMS_KEY_MID|ARN [C|S]            #Should prefer KMS_KEY_ARN over KMS_KEY_MID
COND_KEY s3:x-amz-server-side     #x-amz-server-side-encryption-aws-kms-key-id [C|S]
 -encryption-aws-kms-key-id       #Only for PACTIONs 's3:PutObject|ReplicateObject|BypassGovernanceRetention'
x-amz-server-side-encryption      #BOOL (def: false). Use a KMS_KEY:
 -bucket-key-enabled: true [C]    #  - BUCKET-specific
                                  #  - requester-specific
                                  #     - also ROLE session-specific
                                  #     - i.e. cheaper when fewer requesters
                                  #  - stored in S3
                                  #  - automatically rotated
                                  #Goal: reduce traffic between S3 and KMS
x-amz-server-side-encryption      #'JSON_BASE64' of { VAR: VAL,... } of KMS EncryptionContext
 -context: STR [C|S]              #I.e. metadata stored and not encrypted
                                  #Always added: { aws:s3:arn: OBJECT_ARN }
                                  #  - if x-amz-server-side-encryption-bucket-key-enabled, BUCKET_ARN instead

x-amz-server-side-encryption      #"SSE-C". Use a client-provided key
 -customer-algorithm: AES256 [C|S]#For other ACCOUNTs to access OBJECTs, must have the key
COND_KEY s3:x-amz-server-side     #x-amz-server-side-encryption-customer-algorithm [C|S].
 -encryption-customer-algorithm   #Only for PACTIONs 's3:PutObject|ReplicateObject|BypassGovernanceRetention'
x-amz-server-side-encryption      #'BASE64' of key. Discarded after usage.
 -customer-key: STR [C]           #Unlike AWS-provided keys, this must be supplied each time OBJECT is read|written
x-amz-server-side-encryption
 -customer-MD5: STR [C|S]         #'MD5_HASH_BASE64' of key

@aws-sdk/middleware-ssec          #MFUNC with S3 client, which automatically handles:
                                  #  - x-amz-server-side-encryption-customer-md5 [C]: computed
                                  #  - x-amz-server-side-encryption-customer-key [C]:
                                  #     - converted to base64
                                  #     - can be STR|DATAVIEW|UINT8ARR or INT_ARRAYLIKE|ITERABLE

PUT /BUCKET?encryption            #Req: BUCKET_ENCRYPTION, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketEncryption()             #Res: empty
                                  #PACTION named 's3:PutEncryptionConfiguration' instead
GET /BUCKET?encryption            #Req: empty
GetBucketEncryption()             #Res: BUCKET_ENCRYPTION
                                  #PACTION named 's3:GetEncryptionConfiguration' instead
DELETE /BUCKET?encryption         #Req: empty
DeleteBucketEncryption()          #Res: empty
                                  #No own PACTION: use 's3:PutEncryptionConfiguration' instead

BUCKET_ENCRYPTION                 #Default SSE for OBJECTs in a BUCKET
BUCKET_ENCRYPTION.Rules           #BUCKET_ENCRYPTION_RULE_ARR
BUCKET_ENCRYPTION_RULE.Apply
 ServerSideEncryptionByDefault    #BUCKET_SSE
BUCKET_SSE.SSEAlgorithm           #STR, like x-amz-server-side-encryption [C]
BUCKET_SSE.KMSMasterKeyID         #STR, like x-amz-server-side-encryption-aws-kms-key-id [C]
BUCKET_ENCRYPTION_RULE
 .BucketKeyEnabled                #BOOL, like x-amz-server-side-encryption-bucket-key-enabled [C]

REPLICATION_SRC
 .SseKmsEncryptedObjects.Status   #'Enabled' or 'Disabled' (def). Whether to replicate source OBJECTs that use SSE-KMS
REPLICATION_DEST                  #KMS_KEY_ARN of the target BUCKET
 .EncryptionConfiguration         #Must be in same REGION as target BUCKET
 .ReplicaKmsKeyID                 #Must allow SERVICE_DOMAIN 's3.REGION.amazonaws.com' of source|target REGION to PACTIONs 'kms:Decrypt|Encrypt'

RESTORE_OUTPUT.Encryption         #RESTORE_ENCRYPTION
RESTORE_ENCRYPTION.EncryptionType #STR, like x-amz-server-side-encryption [C]
RESTORE_ENCRYPTION.KMSKeyId       #STR, like x-amz-server-side-encryption-aws-kms-key-id [C]
RESTORE_ENCRYPTION.KMSContext     #STR, like x-amz-server-side-encryption-context [C]

INVENTORY_DESTINATION.Encryption  #INVENTORY_ENCRYPTION
INVENTORY_ENCRYPTION.SSE-S3       #Empty OBJ
INVENTORY_ENCRYPTION.SSE-KMS.KeyId#STR, like x-amz-server-side-encryption-aws-kms-key-id [C]

AWS/S3/Storage-Lens/
 EncryptedStorageBytes            #Like StorageBytes, but only when using SSE
AWS/S3/Storage-Lens/
 UnencryptedStorageBytes          #Like StorageBytes, but not when using SSE
AWS/S3/Storage-Lens/
 EncryptedObjectCount             #Like ObjectCount, but only when using SSE
AWS/S3/Storage-Lens/
 UnencryptedObjectCount           #Like ObjectCount, but not when using SSE
SLENS_METRIC % encrypted bytes    #% of EncryptedStorageBytes/StorageBytes
SLENS_METRIC % unencrypted bytes  #% of UnencryptedStorageBytes/StorageBytes
SLENS_METRIC % encrypted objects  #% of EncryptedObjectCount/ObjectCount
SLENS_METRIC % unencrypted objects#% of UnencryptedStorageBytes/ObjectCount

AWS/S3/Storage-Lens/
 SSEKMSEnabledBucketCount         #Like Buckets, but only when SSE-KMS default
AWS/S3/Storage-Lens/
 AllSSEKMSRequests                #Like AllRequests, but only with SSE-KMS
SLENS_METRIC
 % SSE-KMS enabled buckets        #% of SSEKMSEnabledBucketCount/DistinctNumberOfBuckets
SLENS_METRIC
 % all SSE-KMS requests           #% of AllSSEKMSRequests/AllRequests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PAYMENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?requestPayment        #Req: PAYMENT, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketRequestPayment()         #Res: empty
GET /BUCKET?requestPayment        #Req: empty
GetBucketRequestPayment()         #Res: PAYMENT

PAYMENT                           #Must be BUCKET_OWNER
PAYMENT.Payer                     #Who is charged, either:
                                  #  - 'BucketOwner' (def)
                                  #  - 'Requester' ("requester pay")
                                  #Only for transfer costs, not storage
                                  #Only for successful requests
                                  #Only for OBJECT-related ACTIONs
                                  #Requester must be authenticated
                                  #Cannot be on a logging target BUCKET
                                  #Cannot be used through STATIC_WEBSITE endpoint
x-amz-request-payer: requester [C]#Must be used if PAYMENT.Payer 'Requester'
x-amz-request-charged:
 requester [S]                    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SELECT MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT               #Req: SELECT_REQ, x-amz-server-side-encryption-customer-* [C]
 ?select&select-type=2            #Res: SELECT_RES
SelectObjectContent()             #No own PACTION: use 's3:GetObject' instead

SELECT_REQ                        #Reads OBJECT but transforms it using SQL
                                  #OBJECT must be CSV, ndjson, or Parquet
                                  #"Record": single CSV|JSON|Parquet line (max 1MB)

SELECT_REQ.ScanRange.Start|End    #NUM (in bytes) to only use part of OBJECT
                                  #If falls in the middle of a record, process whole record
                                  #Not with SELECT_JSON.Type 'DOCUMENT' nor SELECT_CSV.AllowQuotedRecordDelimiter true

AWS/S3/[Storage-Lens/]
 SelectRequests                   #NUM of SELECT requests
AWS/S3/[Storage-Lens/]
 SelectBytesScanned               #NUM. SELECT_STATS.BytesScanned
AWS/S3/[Storage-Lens/]
 SelectBytesReturned              #NUM. SELECT_STATS.BytesReturned


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SELECT FORMATS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SELECT_REQ.InputSerialization     #SELECT_INPUT. Input format
                                  #No CSV.QuoteFields
SELECT_REQ.OutputSerialization    #SELECT_OUTPUT. Output format
                                  #No JSON.Type, CSV.AllowQuotedRecordDelimiter|FileHeaderInfo|Comments

SELECT_INPUT.CompressionType      #'NONE' (def), 'GZIP', 'BZIP2'
                                  #Not with Parquet

SELECT_INPUT|OUTPUT.JSON          #SELECT_JSON
SELECT_JSON.Type                  #Either:
                                  #  - 'DOCUMENT': JSON OBJ_ARR
                                  #  - 'LINES': ndjson

SELECT_INPUT|OUTPUT.CSV           #SELECT_CSV
SELECT_CSV.FileHeaderInfo         #Whether first line is header:
                                  #  - 'USE': yes, and can use as "COL" in SQL
                                  #  - 'IGNORE': yes, but cannot use as "COL" in SQL, only "_NUM"
                                  #  - 'NONE': no
SELECT_CSV|JSON.RecordDelimiter   #'CHAR' (def: \n)
SELECT_CSV
 .AllowQuotedRecordDelimiter      #BOOL (def: false). Allow quoting RecordDelimiter. Slower
SELECT_CSV.FieldDelimiter         #'CHAR' (def: ,)
SELECT_CSV.QuoteCharacter         #'CHAR' (def: ") for quoting
SELECT_CSV.QuoteEscapeCharacter   #'CHAR' (def: ") for escaping QuoteCharacter
SELECT_CSV.QuoteFields            #Whether to quote, among 'ASNEEDED' (def) or 'ALWAYS'
SELECT_CSV.Comments               #'CHAR' (def: #) used to comment a line

SELECT_INPUT.Parquet              #OBJ. Use Apache Parquet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SELECT RESPONSE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SELECT_RES                        #Result of SELECT_REQ
                                  #Is a stream of SELECT_MESSAGE, using Transfer-Encoding: chunked [S]
                                  #In a nutshell, it mostly just returns CSV|JSON|Parquet data, but in multiple chunks
                                  #In SDK, is ASYNC_ITERABLE of SELECT_MESSAGEs
                                  #In CLI, must specify a FILE instead

SELECT_MESSAGE                    #Structure:
                                  #  - prelude:
                                  #     - 4 bytes: message size
                                  #     - 4 bytes: message headers size
                                  #  - 4 bytes: CRC of prelude
                                  #  - data:
                                  #     - 0-n SELECT_HEADER
                                  #     - payload
                                  #  - 4 bytes: CRC of message, except this field itself

SELECT_HEADER                     #Structure:
                                  #  - 1 byte: name length
                                  #  - name ':NAME'
                                  #  - 1 byte: type, always 7
                                  #  - 2 bytes: value length
                                  #  - value
SELECT_HEADER message-type 'event'#Always set except when message-type 'error'
SELECT_HEADER content-type        #'MIME' of payload (not set if none).
                                  #'application/octet-stream' for Records, 'text/xml' for Progress|Stats

SELECT_HEADER event-type 'Records'#SELECT_MESSAGE with SELECT actual response
                                  #Payload is 'BASE64' of CSV|JSON|Parquet 1-n records

SELECT_HEADER event-type 'Cont'   #SELECT_MESSAGE with ping. No payload
SELECT_HEADER event-type 'End'    #SELECT_MESSAGE at the end. No payload

SELECT_HEADER message-type 'error'#SELECT_MESSAGE when there is an error. No payload
SELECT_HEADER error-code          #'CODE'
SELECT_HEADER error-message       #STR

SELECT_REQ.RequestProgress.Enabled#BOOL (def: false). Enables event-type 'Progress'
SELECT_HEADER
 event-type 'Progress'            #SELECT_MESSAGE with SELECT_RES_STATS payload, sent progressively
SELECT_HEADER event-type 'Stats'  #SELECT_MESSAGE with SELECT_RES_STATS payload, sent at the end
SELECT_RES_STATS.BytesScanned     #NUM of bytes as input before decompression
SELECT_RES_STATS.BytesProcessed   #NUM of bytes as input after decompression
SELECT_RES_STATS.BytesReturned    #NUM of bytes as output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SELECT SQL           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SELECT_REQ.ExpressionType         #Always 'SQL'
SELECT_REQ.Expression             #STR. SQL SELECT expression
                                  #Max 1.3e5 chars

SQL ==>                           #See Postgres for the syntax of most of what follows
WHITESPACES ==>                   #Ignored, but cannot use newlines

select VAL|* [as COL_ALIAS],...
 from S3Object                    #Operates record-wise
select ... from S3Object.VARR     #Only if JSON
                                  #OBJ: .VAR, ['VAR'], .*
                                  #ARR: [NUM], [*]
                                  #* creates one ROW per item
                                  #Missing|empty VARs are silently skipped, including by SQL FUNCs
                                  #Since JSON is always an ARR, always start with [*]
select ... from S3Object          #Def ROW_ALIAS:
 [as] ROW_ALIAS                   #  - last VAR in VARR
                                  #  - if *: _1
select ... where BOOL_REXPR       #
select ... limit NUM              #

[ROW_ALIAS.]VARR                  #JSON: .VAR or [NUM]
                                  #CSV: .VAR (using header) or ._NUM (1-based index)

"NAME"                            #Make VARR case-sensitive. Also needed if reserved keyword

VAL is [not] missing              #Missing|empty VARR
VAL is [not] null                 #
coalesce(VAL,...)->VAL            #
nullif(VAL, VAL2)->VAL|null       #

VAL = <> != VAL2                  #
VAL in (VAL2,...)                 #
case [VAL]
when VAL2 then VAL3
...
[else VAL4]
end                               #

VAL < <= > >= VAL2                #
VAL [not] between VAL2 and VAL3   #

cast(VAL as TYPE)                 #Explicit type casting
                                  #There is no implicit type casting

bool                              #TYPE. true|false
BOOL and BOOL2                    #
BOOL or BOOL2                     #
not BOOL                          #

int[eger]                         #TYPE. 8 bytes, signed
float                             #TYPE. 8 bytes
decimal|numeric                   #TYPE. Fixed precision float. Max 38 significant digits, max 31 integer digits
NUM + - * / NUM2                  #
-NUM                              #
NUM % NUM2                        #

string[(NUM)]                     #TYPE. Def NUM: 1. Max NUM: 2e9
char[acter]_length(STR)->NUM      #
lower|upper(STR)->STR             #
trim([leading|trailing|both
 ['CHAR...'] from] STR)->STR      #
substring
 (STR from NUM [for NUM2])->STR2  #NUM can be negative if NUM2 specified
STR like 'GLOB' [escape 'CHAR']   #

timestamp                         #TYPE. 'YYYY-MM-DDT[HH:MM[:SS[.SSS[SSS]]]][Z]'
PERIOD                            #year, month, day, hour, minute, second
                                  #Only with extract(): timezone_hour|minute
to_timestamp(STR)->TIMESTAMP      #
to_string
 (TIMESTAMP, 'FORMAT')->STR       #'FORMAT': see online doc
extract
 (PERIOD from TIMESTAMP)->NUM     #
date_add|date_diff
 (PERIOD, NUM, TIMESTAMP)
 ->TIMESTAMP2                     #
utcnow()->TIMESTAMP               #

count(SET)->NUM                   #
min|max(NUM_SET)->NUM2            #
sum(NUM_SET)->NUM2                #
avg(NUM_SET)->NUM2                #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REPLICATION MAIN        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?replication           #Req: REPLICATION, x-amz-bucket-object-lock-token [C], Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketReplication()            #Res: empty
                                  #PACTION named 's3:PutReplicationConfiguration' instead
GET /BUCKET?replication           #Req: empty
GetBucketReplication()            #Res: REPLICATION
                                  #PACTION named 's3:GetReplicationConfiguration' instead
DELETE /BUCKET?replication        #Req: empty
DeleteBucketReplication()         #Res: empty
                                  #No own PACTION: use 's3:PutReplicationConfiguration' instead

REPLICATION                       #Replicate OBJECTs from a source BUCKET to a target BUCKET
                                  #To setup "bidirectional"/"two-way" replication, must use 2 REPLICATIONs in different directions
                                  #Both BUCKETs must have VERSIONING enabled
                                  #Max 125MB/sec (soft)

REPLICATION.Rule                  #REPLICATION_RULE_ARR. Max 1e3
                                  #If hitting max of 5500 reads/secs, 3500 writes/secs per FILTER.Prefix,
                                  #can split into multiple REPLICATION_RULEs with different prefixes
REPLICATION_RULE.ID               #'REPLICATION_RULE'. Max 255 chars
REPLICATION_RULE.Status           #'Enabled' or 'Disabled'

REPLICATION_RULE.Destination      #REPLICATION_DEST. Target BUCKET and configuration
                                  #Max 28 (soft) different ones across all REPLICATION_RULEs
REPLICATION_DEST.Account          #ACCOUNT_ID
REPLICATION_DEST.Bucket           #BUCKET_ARN
                                  #Can be in same region ("SRR") or not ("CRR")
REPLICATION_DEST.StorageClass     #'STORAGE_CLASS' (def: same as source)

x-amz-replication-status: STR [S] #If OBJECT is:
                                  #  - source: 'PENDING|COMPLETE|FAILED'
                                  #  - target: 'REPLICA'
                                  #     - can also be 'PENDING|FAILED':
                                  #        - if REPLICATION_SRC.ReplicaModifications enabled
                                  #        - i.e. metadata is being copied back from target to source

@pulumi/aws-s3-replicated-bucket
REZ.type
 'aws-s3-replicated-bucket       ##Pulumi REZ for a REPLICATION between a 'BUCKETSource' and 'BUCKETDestination'.
 :index:ReplicatedBucket'        ##Not documented because not very helpful


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      REPLICATION FILTER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INCLUDES ==>                      #Replicated:
                                  #  - VERSIONs
                                  #  - ACLs, TAGs, LOCK
                                  #  - SSE
                                  #Including changes on existing VERSIONs (not just new ones)

EXCLUDES ==>                      #Not replicated:
                                  #  - permanent deletions
                                  #  - OBJECTs created themselves by another REPLICATION
                                  #  - OBJECTs with STORAGE_CLASS GLACIER|DEEP_ARCHIVE
                                  #  - OBJECTs|changes due to a LIFECYCLE_RULE
                                  #  - LIFECYCLE
                                  #     - TRANSITION.Days and NTRANSITION.NoncurrentDays are always based on source OBJECT,
                                  #       even in TARGET_BUCKET

REPLICATION_RULE.Filter           #FILTER. Only replicate those source OBJECTs
                                  #Required (including empty)
REPLICATION_RULE.Priority         #NUM. If 2 REPLICATION_RULEs replicate to same target OBJECT, one with highest NUM prevails
                                  #Required

REPLICATION_RULE                  #Whether to replicate:
 .ExistingObjectReplication.Status#  - 'Enabled': OBJECTs that existed before REPLICATION creation
                                  #  - 'Disabled' (def): only new ones
REPLICATION_RULE                  #'Enabled' or 'Disabled' (def). Whether to replicate delete markers.
 .DeleteMarkerReplication.Status  #Must be 'Disabled' if there is a REPLICATION_RULE.Filter by TAG
REPLICATION_RULE
 .SourceSelectionCriteria         #REPLICATION_SRC
REPLICATION_SRC                   #'Enabled' or 'Disabled' (def). Whether to replicate changes of ACLs|TAGs|LOCK bidirectionally
 .ReplicaModifications.Status     #I.e. changes in target OBJECTs are copied to source OBJECTs
                                  #Only when using bidirectional replication, i.e. must be enabled on both REPLICATIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       REPLICATION BATCH       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB_OP.S3ReplicateObject          #Empty OBJ. Copy OBJECTs using JOB_MANIFEST + current REPLICATION settings
                                  #Goal: allowing to replicate OBJECTs that:
                                  #  - failed to replicate
                                  #  - existed before REPLICATION creation
                                  #  - were created by another REPLICATION
                                  #JOB.RoleArn must be allowed to PACTIONs:
                                  #  - 's3:InitiateReplication'
                                  #  - 's3:GetReplicationConfiguration|PutInventoryConfiguration': only if using JOB.ManifestGenerator
                                  #Should temporarily disable LIFECYCLEs while JOB is ongoing

JOB_FILTER.EligibleForReplication #BOOL (def: false). Only include if OBJECT is replicated by some REPLICATION

JOB_FILTER                        #STR_ARR. Filter by x-amz-replication-status [S] among:
 .ObjectReplicationStatuses       #  - 'REPLICA': created itself by another REPLICATION
                                  #  - 'NONE': never replicated
                                  #  - 'COMPLETED|FAILED'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    REPLICATION PERMISSIONS    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPLICATION_DEST                  #Whether target OBJECT_OWNER is:
 .AccessControlTranslation.Owner  #  - def: source OBJECT_OWNER
                                  #  - 'Destination': target BUCKET_OWNER ("owner override")
                                  #     - does not replicate OBJECT ACLs

REPLICATION.Role                  #'ROLE' assumed by SERVICE_DOMAIN 's3.amazonaws.com'
                                  #Trust policy must allow sts:AssumeRole to it
                                  #Requester must be allowed to PACTION 'sts:PassRole'
                                  #Used to both read target OBJECTs and write target OBJECTs

PERMISSIONS ==>                   #ROLE must have PACTIONs:
                                  #  - arn:aws:s3:::SOURCE_BUCKET:
                                  #     - 's3:GetReplicationConfiguration'
                                  #     - 's3:ListBucket': if replicate delete markers
                                  #  - arn:aws:s3:::SOURCE_BUCKET/*:
                                  #     - 's3:GetObjectVersionForReplication':
                                  #        - same as 's3:GetObjectVersion' but:
                                  #           - fewer permissions, only ones needed for REPLICATION
                                  #           - works with SSE-KMS
                                  #     - 's3:GetObjectVersionAcl': if replicate ACL
                                  #     - 's3:GetObjectVersionTagging': if replicate TAGs
                                  #  - arn:aws:s3:::TARGET_BUCKET/*:
                                  #     - 's3:ReplicateObject'
                                  #        - also allows replicating ACL|TAGs
                                  #           - i.e. 's3:ReplicateTags' is technically redundant
                                  #           - but can Deny 's3:ReplicateTags' to not replicate TAGs
                                  #     - 's3:ReplicateDelete': if replicate delete markers
                                  #     - 's3:ReplicateTags': if replicate TAGs
                                  #     - 's3:ObjectOwnerOverrideToBucketOwner':
                                  #        - if REPLICATION_DEST.AccessControlTranslation 'Destination'
                                  #        - not needed if BUCKET_OWNERSHIP_RULE.ObjectOwnership 'BucketOwnerEnforced'
                                  #     - 's3:GetObjectVersionTagging': if REPLICATION_DEST.AccessControlTranslation 'Destination'

CROSS-ACCOUNT PERMISSIONS ==>     #If cross-ACCOUNT, TARGET_BUCKET must have POLICY allowing ROLE to do PACTIONs:
                                  #  - arn:aws:s3:::TARGET_BUCKET/*: same as above
                                  #  - arn:aws:s3:::TARGET_BUCKET:
                                  #     - 's3:List*'
                                  #     - 's3:GetBucketVersioning|PutBucketVersioning'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      REPLICATION EVENTS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPLICATION_DEST.ReplicationTime  #REPLICATION_TIME. "RTC"/"Replication Time Control"
REPLICATION_TIME.Status           #'Enabled' or 'Disabled'
REPLICATION_TIME.Time.Minutes     #NUM (must be 15). Ensures that REPLICATION happens within NUM minutes
                                  #99.9% of times, covered by SLA
                                  #Max 1GB/sec (soft)
                                  #Does not cover replication of delete markers
                                  #Also emits the s3:Replication:* NOTIFICATION events
                                  #Can also limit problems of delayed REPLICATION by using explicit VERSION_MIDs in requests

REPLICATION_METRICS
 .EventThreshold.Minutes          #NUM (must be 15) used by s3:Replication:OperationMissedThreshold
NEVENT s3:Replication:
 OperationMissedThreshold         #When a REPLICATION ACTION does not happen within RTC time threshold
NEVENT s3:Replication:
 OperationReplicatedAfterThreshold#When a REPLICATION ACTION succeeds but after RTC time threshold
NEVENT s3:Replication:
 OperationNotTracked              #When METRICs failed to be emitted for a source OBJECT, providing it uses RTC

NEVENT s3:Replication:
 OperationFailedReplication       #When a source OBJECT failed to be replicated

NMESSAGE.replicationEventData     #NMESSAGE_REPLICATION. For NEVENT s3:Replication:* only
NMESSAGE_REPLICATION
 .replicationRuleId               #'REPLICATION_RULE'
NMESSAGE_REPLICATION.requestTime  #'DATE' of start
NMESSAGE_REPLICATION
 .replicationTime                 #'DATE' of end
NMESSAGE_REPLICATION
 .destinationBucket               #'BUCKET'
NMESSAGE_REPLICATION.s3Operation  #'ACTION'
NMESSAGE_REPLICATION.failureReason#STR
NMESSAGE_REPLICATION.threshold    #NUM (for RTC)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      REPLICATION METRICS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPLICATION_DEST.Metrics          #REPLICATION_METRICS
REPLICATION_METRICS.Status        #'Enabled' or 'Disabled'. Def: 'Enabled' if RTC, otherwise not
                                  #Whether to enable REPLICATION-related AWS/S3/* (except AWS/S3/Storage-Lens/*)

AWS/S3/ReplicationLatency         #NUM of secs of lag between source and target BUCKET
AWS/S3/BytesPendingReplication    #NUM of bytes pending REPLICATION
AWS/S3/                           #NUM of REPLICATION-related ACTIONs that are pending
 OperationsPendingReplication     #ACTIONs are read|write on OBJECTs, delete markers, ACLs, TAGs, LOCK.
AWS/S3/OperationsFailedReplication#NUM of REPLICATION-related ACTIONs that failed

AWS/S3/Storage-Lens/
 ReplicatedStorageBytesSource     #Like StorageBytes, but only for replication source OBJECTs
AWS/S3/Storage-Lens/
 ReplicatedStorageBytes           #Like StorageBytes, but only for replication target OBJECTs
AWS/S3/Storage-Lens/
 ReplicatedObjectCountSource      #Like ObjectCount, but only for replication source OBJECTs
AWS/S3/Storage-Lens/
 ReplicatedObjectCount            #Like ObjectCount, but only for replication target OBJECTs
SLENS_METRIC
 % replicated bytes source        #% of ReplicatedStorageBytesSource/StorageBytes
SLENS_METRIC
 % replicated bytes destination   #% of ReplicatedStorageBytes/StorageBytes
SLENS_METRIC
 % replicated objects source      #% of ReplicatedObjectCountSource/ObjectCount
SLENS_METRIC
 % replicated objects destination #% of ReplicatedObjectCount/ObjectCount

SLENS_METRIC
 Total replication rule count     #NUM of REPLICATION_RULEs
AWS/S3/Storage-Lens/
 SameRegionReplicationRuleCount   #NUM of REPLICATION_RULEs that is not cross-REGIONs
AWS/S3/Storage-Lens/
 CrossRegionReplicationRuleCount  #NUM of REPLICATION_RULEs that is cross-REGIONs
AWS/S3/Storage-Lens/
 SameAccountReplicationRuleCount  #NUM of REPLICATION_RULEs that is not cross-ACCOUNT
AWS/S3/Storage-Lens/
 CrossAccountReplicationRuleCount #NUM of REPLICATION_RULEs that is cross-ACCOUNT
AWS/S3/Storage-Lens/Invalid
 DestinationReplicationRuleCount  #NUM of REPLICATION_RULEs with invalid TARGET_BUCKET
SLENS_METRIC Average replication
 rule count per bucket            #Average REPLICATION_RULEs per BUCKET
SLENS_METRIC Average Cross-Region
 Replication rules per bucket     #Average CrossRegionReplicationRuleCount per BUCKET
SLENS_METRIC Average Same-Region
 Replication rules per bucket     #Average SameRegionReplicationRuleCount per BUCKET
SLENS_METRIC Average same-account
 replication rules per bucket     #Average SameAccountReplicationRuleCount per BUCKET
SLENS_METRIC Average cross-account
 replication rules per bucket     #% of CrossAccountReplicationRuleCount per BUCKET
SLENS_METRIC Average invalid
 destination replication
 rules per bucket                 #Average InvalidReplicationRuleCount per BUCKET


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INVENTORY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?inventory             #Req: INVENTORY
PutBucketInventoryConfiguration() #  - query variable: INVENTORY.id
                                  #Res: empty
                                  #PACTION named 's3:PutInventoryConfiguration' instead
GET /BUCKET?inventory             #Req: empty
GetBucketInventoryConfiguration() #Res: INVENTORY
                                  #PACTION named 's3:GetInventoryConfiguration' instead
GET /BUCKET?inventory             #Req: empty
ListBucketInventory               #Res: InventoryConfiguration INVENTORY_ARR
 Configurations()                 #Paginates with continuationToken
                                  #No own PACTION: use 's3:GetInventoryConfiguration' instead
DELETE /BUCKET?inventory          #Req: INVENTORY
DeleteBucketInventory             #  - only id
 Configuration()                  #Res: empty
                                  #No own PACTION: use 's3:PutInventoryConfiguration' instead

INVENTORY                         #Every day|week, list a BUCKET's OBJECT|VERSIONs and write result to an OBJECT
                                  #Because of eventual consistency, OBJECTs about to be:
                                  #  - created might not appear yet
                                  #  - deleted might still appear
                                  #Max 1000 per BUCKET
INVENTORY.Id                      #'INVENTORY'
INVENTORY.IsEnabled               #BOOL

INVENTORY.Filter                  #FILTER (only Prefix). Only include those OBJECTs
INVENTORY.IncludedObjectVersions  #Either:
                                  #  - 'All': all VERSIONs
                                  #  - 'Current':
                                  #     - latest VERSION only
                                  #     - does not include INVENTORY_LINE.VersionId|IsLatest|IsDeleteMarker
INVENTORY.OptionalFields          #'PROP'_ARR. Only include those INVENTORY_LINE.PROPs
                                  #Cannot be VersionId|IsLatest|DeleteMarker nor Bucket|Key (always included)

INVENTORY.Schedule.Frequency      #'Daily' or 'Weekly' (on Sunday)

INVENTORY
 .Destination.S3BucketDestination #INVENTORY_DESTINATION
INVENTORY_DESTINATION.Bucket      #BUCKET_ARN
                                  #Must be in same REGION as source BUCKET
INVENTORY_DESTINATION.AccountId   #ACCOUNT_ID. Fails if BUCKET is not owned by that ACCOUNT
INVENTORY_DESTINATION.Prefix      #'DEST_PREFIX'
INVENTORY_DESTINATION.Format      #One of:
                                  #  - 'CSV'
                                  #  - 'ORC': Apache ORC
                                  #  - 'Parquet': Apache Parquet

PERMISSIONS ==>                   #Must grant:
                                  #  - PACTION 's3:PutObject'
                                  #  - to Principal.Service 's3.amazonaws.com'
                                  #  - on Resource DEST_BUCKET_ARN
                                  #  - COND_KEY aws:SourceArn = SOURCE_BUCKET_ARN
                                  #  - COND_KEY aws:SourceAccount = ACCOUNT_ID

DEST_PREFIX/SOURCE_BUCKT/INVENTORY#DEST_PATH
DEST_PATH/YYYY-MM-DDTHH-MMZ
 /manifest.json                   #PATH of MANIFEST
DEST_PATH/YYYY-MM-DDTHH-MMZ
 /manifest.checksum               #MD5 checksum of MANIFEST
DEST_PATH/hive
 /dt=YYYY-MM-DD-HH-MM/symlink.txt #Like MANIFEST but for Apache Hive

MANIFEST                          #List of all INVENTORY_FILEs of an INVENTORY
MANIFEST.version                  #'2016-11-30'
MANIFEST.creationTimestamp        #DATE_NUM
MANIFEST.sourceBucket             #'BUCKET'
MANIFEST.destinationBucket        #BUCKET_ARN
MANIFEST.fileFormat               #'CSV|ORC|Parquet'
MANIFEST.fileSchema               #VARs included
                                  #With CSV: 'PROP, ...' of COLs (including order)
                                  #With ORC|Parquet: specific to those formats
MANIFEST.files                    #MANIFEST_FILE_ARR
MANIFEST_FILE.key                 #INVENTORY_FILE_PATH
MANIFEST_FILE.size                #NUM (in bytes)
MANIFEST_FILE.MD5checksum         #'HASH'

DEST_PATH/data/UUID.FORMAT        #INVENTORY_FILE_PATH
                                  #FORMAT is csv.gz, orc or parquet
INVENTORY_FILE                    #
INVENTORY_LINE.Bucket             #'BUCKET'
INVENTORY_LINE.Key                #'OBJECT'
INVENTORY_LINE.VersionId          #VERSION_MID
INVENTORY_LINE.IsLatest           #BOOL. OBJECT.IsLatest
INVENTORY_LINE.IsDeleteMarker     #BOOL. DELETE_OBJECT.DeleteMarker
INVENTORY_LINE.Size               #NUM. OBJECT.Size
INVENTORY_LINE.LastModifiedDate   #'DATE'. OBJECT.LastModified
INVENTORY_LINE.ETag               #'ETAG'
INVENTORY_LINE.StorageClass       #'STORAGE_CLASS'
INVENTORY_LINE.IsMultipartUpload  #BOOL. Whether used a MUPLOAD
INVENTORY_LINE.ReplicationStatus  #STR. x-amz-replication-status [S]
INVENTORY_LINE.EncryptionStatus   #'NOT-SSE', 'SSE-S3', 'SSE-KMS' or 'SSE-C'
INVENTORY_LINE
 .ObjectLockRetainUntilDate       #STR. OBJECT_RETENTION.RetainUntilDate
INVENTORY_LINE.ObjectLockMode     #STR. OBJECT_RETENTION.Mode
INVENTORY_LINE
 .ObjectLegalHoldStatus           #STR. LEGAL_HOLD.Status
INVENTORY_LINE
 .IntelligentTieringAccessTier    #'STORAGE_CLASS' of TIERING_CONF.AccessTier
INVENTORY_LINE.BucketKeyStatus    #'ENABLED|DISABLED'. BUCKET_ENCRYPTION_RULE.BucketKeyEnabled
INVENTORY_LINE.ChecksumAlgorithm  #ALGO. OBJECT.ChecksumAlgorithm
INVENTORY_LINE
 .ObjectAccessControlList         #'BASE64_JSON' of ACL
INVENTORY_LINE.ObjectOwner        #OBJECT_OWNER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?logging               #Req: LOGGING, Content-MD5 [C], x-amz-checksum-ALGO [C]
PutBucketLogging()                #Res: empty
GET /BUCKET?logging               #Req: empty
GetBucketLogging()                #Res: LOGGING

LOGGING                           #Logs all requests to a BUCKET ("source")
                                  #Written to an OBJECT
                                  #Batched every few hours. Changes also take some time.
                                  #Some requests might be missing or duplicate
                                  #Must be BUCKET_OWNER
                                  #Different from CloudTrail:
                                  #  - less features
                                  #     - except only it has:
                                  #        - LOG_LINE[6] BATCH.DELETE.OBJECT and S3.ACTION.RESOURCE
                                  #        - LOG_LINE[12|13|14|15]
                                  #  - less frequent
                                  #  - cheaper: no cost per event, and smaller files (i.e. storage cost)
LOGGING.LoggingEnabled            #LOG_CONF. Omit to disable
LOG_CONF.TargetBucket             #'BUCKET' ("target") where to store LOG_FILE
                                  #Must be be in same REGION as logged BUCKET and have same BUCKET_OWNER
                                  #Must not use OBJECT_LOCK|LEGAL_HOLD
LOG_CONF.TargetPrefix             #STR prefixed to 'OBJECT' storing LOG_FILE

LOG_FILE                          #TSV file, space-delimited
                                  #'OBJECT' ends with YYYY-MM-DD-HH-MM-SS-RANDOM (same as LOG_LINE[2|5])
LOG_LINE[0]                       #CANONICAL_ACCOUNT_ID of BUCKET_OWNER
LOG_LINE[1]                       #'BUCKET'
LOG_LINE[2]                       #[DD/MM/YYYY:HH:MM:SS TZ]
LOG_LINE[3]                       #IP
LOG_LINE[4]                       #CANONICAL_ACCOUNT_ID of requester. - if anynomous
LOG_LINE[5]                       #x-amz-request-id [S]
LOG_LINE[6]                       #One of:
                                  #  - REST.HTTP_METHOD.ACTION
                                  #  - WEBSITE.HTTP_METHOD.ACTION
                                  #  - BATCH.DELETE.OBJECT
                                  #  - S3.ACTION.RESOURCE: for LIFECYCLE:
                                  #     - S3.TRANSITION_SIA|ZIA|INT|GIR|(nothing)|GDA.OBJECT: TRANSITION.StorageClass
                                  #     - S3.EXPIRE.OBJECT: LIFECYCLE_RULE.Expiration permanently deletes OBJECT
                                  #     - S3.CREATE.DELETEMARKER: LIFECYCLE_RULE.Expiration creates a delete marker
                                  #     - S3.DELETE.UPLOAD: LIFECYCLE_RULE.AbortIncompleteMultipartUpload.DaysAfterInitiation
LOG_LINE[7]                       #'OBJECT'. - if none
LOG_LINE[8]                       #HTTP_METHOD + PATH + HTTP version
                                  #PATH does not include query variables, except x-*
                                  #  - this can be used for requester to add query variables ?x-* only meant for logging
LOG_LINE[9]                       #HTTP_STATUS_NUM
LOG_LINE[10]                      #Error code. - if none
LOG_LINE[11]                      #NUM of bytes sent. - if 0
LOG_LINE[12]                      #NUM of OBJECT.Size
LOG_LINE[13]                      #NUM (in ms) like AWS/S3/FirstByteLatency
LOG_LINE[14]                      #NUM (in ms) like AWS/S3/TotalRequestLatency
LOG_LINE[15]                      #Referrer [C]
LOG_LINE[16]                      #User-Agent [C]
LOG_LINE[17]                      #VERSION_MID. - if none
LOG_LINE[18]                      #x-amz-id-2 [S]
LOG_LINE[19]                      #SigV2|SigV4 (of x-amz-signature [C]). - if unauthenticated
LOG_LINE[20]                      #CIPHER used with HTTPS. - if HTTP
LOG_LINE[21]                      #AuthHeader (header) or QueryString, for x-amz-signature [C]. - if unauthenticated
LOG_LINE[22]                      #Host [C]
LOG_LINE[23]                      #TLSv1.1|2|3. - if no TLS
LOG_LINE[24]                      #ACCESSPOINT_ARN. - if none
LOG_LINE[25]                      #Yes|No. Whether an ACL was needed

PERMISSIONS ==>                   #Must allow PACTIONs 's3:PutObject|GetBucketAcl' to S3 logger SERVICE
logging.s3.amazonaws.com          #SERVICE_DOMAIN used as POLICY_DOC Principal.Service for S3 logger (SERVICE_ASYNC_ACTION)
http://acs.amazonaws.com
 /groups/s3/LogDelivery           #Same but as GRANTEE.URI, for ACLs
'ACL' log-delivery-write          #LogDelivery: WRITE and READ_ACP
                                  #Only for BUCKETs

LOG_CONF.TargetGrants             #GRANT_ARR of LOG_FILE, to grant permissions to others than BUCKET_OWNER
                                  #Target BUCKET must not disable ACLs with BUCKET_OWNERSHIP_RULE.ObjectOwnership 'BucketOwnerEnforced'

s3BucketLoggingEnabled           ##Pulumi POLICY that checks that each BUCKET has LOGGING enabled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRICS MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?metrics               #Req: MAIN_METRICS
PutBucketMetricsConfiguration()   #  - query variables: id
                                  #Res: empty
                                  #PACTION named 's3:PutMetricsConfiguration' instead
GET /BUCKET?metrics               #Req: MAIN_METRICS
GetBucketMetricsConfiguration()   #  - only id
                                  #Res: MAIN_METRICS
                                  #PACTION named 's3:GetMetricsConfiguration' instead
GET /BUCKET?metrics               #Req: empty
ListBucketMetricsConfigurations() #Res: MetricsConfigurations MAIN_METRICS_ARR
                                  #Paginates with continuationToken
                                  #No own PACTION: use 's3:GetMetricsConfiguration' instead
DELETE /BUCKET?metrics            #Req: empty
DeleteBucketMetricsConfiguration()#Res: empty
                                  #No own PACTION: use 's3:PutMetricsConfiguration' instead

MAIN_METRICS                      #Main CloudWatch METRICs for S3 (as opposed to SLENS, which is more advanced)
                                  #Each MAIN_METRICS sends those METRICs but filtered per 'OBJECT' prefix, TAGs, ACCESSPOINT
                                  #Only 2 METRICs are available without a MAIN_METRICS: AWS/S3/BucketSizeBytes|NumberOfObjects
                                  #Max 1000 per BUCKET
MAIN_METRICS.Id                   #'MAIN_METRICS'. Max 64 chars, [[:alnum:].-_]
MAIN_METRICS.Filter               #MAIN_METRICS_FILTER. Filters which OBJECTs to include
MAIN_METRICS_FILTER.*             #Like FILTER.*
MAIN_METRICS_FILTER.AccessPointArn#ACCESSPOINT_ARN. Only in this ACCESSPOINT

MAIN_METRICS DVAR FilterId        #'MAIN_METRICS'. To use on AWS/S3/*
MAIN_METRICS DVAR BucketName      #'BUCKET'. To use on AWS/S3/*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         METRICS SIZE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SLENS_METRIC Accounts             #NUM of ACCOUNTs

SLENS_METRIC Buckets              #NUM of BUCKETs
SLENS_METRIC Active buckets       #Like Buckets, but only with StorageBytes > 0

AWS/S3/NumberOfObjects
AWS/S3/Storage-Lens/ObjectCount   #NUM of OBJECTs, including VERSIONs, delete markets, MPARTs

AWS/S3/BucketSizeBytes
AWS/S3/Storage-Lens/StorageBytes  #NUM of bytes for OBJECT data|metadata, including VERSIONs, delete markers, MPARTs
SLENS_METRIC Average object size  #Average StorageBytes per OBJECT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METRICS I/O          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS/S3/[Storage-Lens/]
 BytesDownloaded                  #NUM of bytes to BUCKETs as input
AWS/S3/[Storage-Lens/]
 BytesUploaded                    #NUM of bytes to BUCKETs as output
SLENS_METRIC % retrieval rate     #Ratio of BytesDownloaded/StorageBytes
SLENS_METRIC % ingest ratio       #Ratio of BytesUploaded/StorageBytes

AWS/S3/FirstByteLatency           #NUM of ms between first byte request received -> last byte sent
AWS/S3/TotalRequestLatency        #NUM of ms between last byte request received -> first byte sent


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       METRICS REQUESTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS/S3/[Storage-Lens/]AllRequests #NUM of requests to OBJECT|MUPLOADs (not BUCKETs or other resources)
AWS/S3/[Storage-Lens/]PutRequests #Same for PUT
AWS/S3/[Storage-Lens/]PostRequests#Same for POST
AWS/S3/[Storage-Lens/]GetRequests #Same for GET (except list)
AWS/S3/[Storage-Lens/]HeadRequests#Same for HEAD
AWS/S3/[Storage-Lens/]ListRequests#Same for GET (list)
AWS/S3/[Storage-Lens/]
 DeleteRequests                   #Same for DELETE

AWS/S3/Storage-Lens/
 200OKStatusCount                 #Like AllRequests, but only with 200 status code
AWS/S3/Storage-Lens/
 206PartialContentStatusCount     #Same with 206
AWS/S3/Storage-Lens/
 400BadRequestErrorCount          #Same with 400
AWS/S3/Storage-Lens/
 403ForbiddenErrorCount           #Same with 403
AWS/S3/Storage-Lens/
 404NotFoundErrorCount            #Same with 404
AWS/S3/Storage-Lens/
 500InternalServerErrorCount      #Same with 500
AWS/S3/Storage-Lens/
 503ServiceUnavailableErrorCount  #Same with 503
SLENS_METRIC % 200 OK status      #% of 200OKStatusCount/AllRequests
SLENS_METRIC
 % 206 Partial Content status     #Same with 206
SLENS_METRIC
 % 400 Bad Request errors         #Same with 400
SLENS_METRIC
 % 403 Forbidden errors           #Same with 403
SLENS_METRIC
 % 404 Not Found errors           #Same with 404
SLENS_METRIC
 % 500 Internal Server Errors     #Same with 500
SLENS_METRIC
 % 503 Service Unavailable errors #Same with 503

AWS/S3/[Storage-Lens/]4xxErrors   #Like AllRequests, but only with 4** status code
AWS/S3/[Storage-Lens/]5xxErrors   #Like AllRequests, but only with 5** responses
SLENS_METRIC Total errors         #4xxErrors + 5xxErrors
SLENS_METRIC % error rate         #% of TotalErrors/AllRequests

AWS/S3/Storage-Lens/
 AllUnsupportedSignatureRequests  #Like AllRequests, but only with AWS signature with an old version
AWS/S3/Storage-Lens/
 AllUnsupportedTLSRequests        #Like AllRequests, but only with TLS with an old version
SLENS_METRIC % all unsupported
 signature requests               #% of AllUnsupportedSignatureRequests/AllRequests
SLENS_METRIC
 % all unsupported TLS requests   #% of AllUnsupportedTLSRequests/AllRequests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       STORAGE LENS MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /storagelens/SLENS            #Req: StorageLensConfiguration SLENS, Tags TAG_PAIRS
PutStorageLensConfiguration()     #  - no HomeRegion
                                  #Res: empty
GET /storagelens/SLENS            #Req: empty
GetStorageLensConfiguration()     #Res: SLENS
                                  #  - no HomeRegion
GET /storagelens/SLENS            #Req: empty
ListStorageLensConfigurations()   #Res: StorageLensConfigurationList SLENS_ARR
                                  #  - only StorageLensArn, Id, IsEnabled, HomeRegion
                                  #Paginates with nextToken
DELETE /storagelens/SLENS         #Req: empty
DeleteStorageLensConfiguration()  #Res: empty

SLENS                             #CloudWatch METRICs under AWS/S3/Storage-Lens/*
                                  #Compared to MAIN_METRICS, i.e. the others AWS/S3/*:
                                  #  - many more of them
                                  #  - superset to most of them
                                  #  - not sent to CloudWatch for free
                                  #Available:
                                  #  - in CloudWatch: SLENS_EXPORT.CloudWatchMetrics
                                  #  - as SLENS_FILE
                                  #  - as dashboard in UI console
                                  #     - requires PACTION 's3:GetStorageLensDashboard'
                                  #Dashboard in UI console:
                                  #  - one per SLENS
                                  #  - 'default-account-dashboard' SLENS always available
                                  #  - cannot view as ROOT
                                  #Data:
                                  #  - generated daily
                                  #  - kept for 15 months if ADVANCED_METRICS, 14 days otherwise
SLENS.StorageLensArn              #SLENS_ARN. arn:aws:s3:REGION:ACCOUNT_ID:storage_lens/STORAGE_LENS
SLENS.Id                          #'SLENS'. Max 64 chars, [[:alnum:].-_]
SLENS.IsEnabled                   #BOOL
SLENS.HomeRegion                  #'REGION' of SLENS itself


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   STORAGE LENS FILTER/GROUP   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SLENS.AwsOrg.Arn                  #ORG_ARN. Filter by ORG
                                  #Default SLENS: all
SLENS.Include|Exclude.Regions     #'REGION'_ARR. Filter by REGION
                                  #Default SLENS: all
SLENS.Include|Exclude.Buckets     #BUCKET_ARN_ARR. Filter by BUCKET
                                  #Default SLENS: all
                                  #Not if SLENS.AwsOrg set
STORAGE CLASS FILTERING ==>       #Only in UI console

SLENS.AccountLevel                #SLENS_ACCOUNT. Group METRICs per ACCOUNT
SLENS_ACCOUNT.BucketLevel         #SLENS_BUCKET. Group METRICs per BUCKET

SLENS_BUCKET                      #SLENS_OBJECTS. Group METRICs per OBJECT subfolder
 .PrefixLevel.StorageMetrics      #Only if ADVANCED_METRICS
SLENS_OBJECTS.IsEnabled           #BOOL
SLENS_OBJECTS.SelectionCriteria   #SLENS_CRITERIA
SLENS_CRITERIA.MaxDepth           #NUM. Max subfolder depth to group by
                                  #Def: 1, max: 10
SLENS_CRITERIA.Delimiter          #Like OBJECTS.Delimiter
SLENS_CRITERIA
 .MinStorageBytesPercentage       #NUM (1-100). Only subfolder containing at least NUM% of StorageBytes

SLENS DVAR configuration_id       #'SLENS'
SLENS DVAR metrics_version        #Always '1.0'
SLENS DVAR aws_region             #'REGION'
SLENS DVAR record_type            #METRICs are sent once per group ("granularity"):
                                  #  - ORGANIZATION: DVAR organization_id
                                  #  - ACCOUNT: DVAR aws_account_number
                                  #  - BUCKET: DVAR bucket_name
                                  #     - not if SLENS.AwsOrg set
SLENS DVAR organization_id        #ORG_ID
SLENS DVAR aws_account_number     #ACCOUNT_ID
SLENS DVAR bucket_name            #'BUCKET'

TIME SERIES ==>                   #Can show METRICs as time series in UI console
COMPARING ==>                     #Can compare grouped METRICs in UI console, as time series, histograms, x|y plots or sorted tables
RECOMMENDATIONS ==>               #Based on METRICs. Only in UI console
                                  #Includes: suggestions, outliers, big increase|decrease
                                  #Only with ADVANCED_METRICS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     STORAGE LENS METRICS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS/S3/Storage-Lens/*             #METRICs of SLENS
SLENS_METRIC                      #Same but only available in UI console, not in CloudWatch nor SLENS_FILE
                                  #Inferred from other METRICs

CATEGORIES ==>                    #UI console groups METRICs per category:
                                  #  - summary: StorageBytes, ObjectCount
                                  #  - cost optimization: VERSIONING (per OBJECT), LIFECYCLE_RULEs, MPARTs
                                  #  - date protection: VERSIONING (per BUCKET), SSE, OBJECT_LOCK, requests signature|TLS, REPLICATION
                                  #  - activity: request count, in|out traffic
                                  #  - detailed status code: response statuses
                                  #  - access management: BUCKET_OWNERSHIP_RULE
                                  #  - performance: ACCELERATE
                                  #  - events: NOTIFICATION

ADVANCED_METRICS                  #Enabled when any of IsEnabled BOOL below is true
SLENS_ACCOUNT|BUCKET
 .AdvancedCostOptimizationMetrics
 .IsEnabled                       #BOOL (def: false). Enables METRICs related to LIFECYCLE_RULEs
SLENS_ACCOUNT|BUCKET
 .AdvancedDataProtectionMetrics
 .IsEnabled                       #BOOL (def: false). Enables METRICs related to REPLICATION_RULEs and to requests signature|TLS
SLENS_ACCOUNT|BUCKET
 .ActivityMetrics.IsEnabled       #BOOL (def: false). Enables METRICs related to requests count and in|out traffic
SLENS_ACCOUNT|BUCKET
 .DetailedStatusCodesMetrics
 .IsEnabled                       #BOOL (def: false). Enables METRICs related to response statuses

SLENS_EXPORT                      #BOOL (def: false). Send METRICs to CloudWatch
 .CloudWatchMetrics.IsEnabled     #Only if ADVANCED_METRICs
                                  #1 day PERIOD


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       STORAGE LENS FILE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SLENS.DataExport                  #SLENS_EXPORT. Export METRICs to a SLENS_FILE
SLENS_EXPORT.S3BucketDestination  #SLENS_DESTINATION
                                  #Target BUCKET must be in same REGION as SLENS
SLENS_DESTINATION.*               #Like INVENTORY_DESTINATION.* except:
                                  #  - Bucket -> Arn
                                  #  - no ORC format
SLENS_DESTINATION
 .OutputSchemaVersion             #'V_1'

DEST_PREFIX/StorageLens
 /ACCOUNT_ID/SLENS/V_1            #DEST_PATH
DEST_PATH/manifest.json           #PATH of MANIFEST
MANIFEST                          #List of all SLENS_FILEs of a SLENS
MANIFEST.reportVersion            #'V_1'
MANIFEST.reportDate               #'YYYY-MM-DD'
MANIFEST.configId                 #'SLENS'
MANIFEST.sourceAccount            #ACCOUNT_ID
MANIFEST.destinationBucket        #BUCKET_ARN
MANIFEST.reportFormat             #'CSV|Parquet'
MANIFEST.reportSchema             #VARs included
                                  #With CSV: 'PROP,...' of COLs (including order)
                                  #With Parquet: specific to those formats
MANIFEST.reportFiles              #MANIFEST_FILE_ARR
MANIFEST_FILE.key                 #SLENS_FILE_PATH
MANIFEST_FILE.size                #NUM (in bytes)
MANIFEST_FILE.md5checksum         #'HASH'

DEST_PATH/reports/dt=YYYY-MM-DD
 /UUID.FORMAT                     #SLENS_FILE_PATH
SLENS_FILE                        #In CSV, has a header with under_scored names
                                  #Has following lines
SLENS_LINE.VersionNumber          #'V_1'
SLENS_LINE.ConfigurationId        #'SLENS'
SLENS_LINE.ReportDate             #'DD/MM/YYYY'
SLENS_LINE.AwsAccountNumber       #ACCOUNT_ID
SLENS_LINE.AwsRegion              #'REGION'
SLENS_LINE.StorageClass           #'STORAGE_CLASS'
SLENS_LINE.RecordType             #METRICs are grouped per:
                                  #  - ACCOUNT: SLENS.AccountLevel
                                  #  - BUCKET: SLENS_ACCOUNT.BucketLevel
                                  #  - PREFIX: SLENS_OBJECTS
SLENS_LINE.RecordValue            #'PREFIX', if RecordType PREFIX
SLENS_LINE.BucketName             #'BUCKET'
SLENS_LINE.MetricName             #'METRIC'
SLENS_LINE.MetricValue            #METRIC_DATUM value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   STORAGE LENS PERMISSIONS    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PERMISSIONS ==>                   #Like INVENTORY except:
                                  #  - Principal.Service 'storage-lens.s3.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn = SLENS_ARN

ORGANIZATION PERMISSIONS ==>      #When ORGs are used:
                                  #  - must use AWSServiceRoleForS3StorageLens SERVICE_LINKED_ROLE (automatically done)
                                  #  - must EnableAWSServiceAccess() for 'storage-lens.s3.amazonaws.com'
                                  #  - can RegisterDelegatedAdministrator() for 'storage-lens.s3.amazonaws.com' (max 5)

AWSServiceRoleForS3StorageLens    #SERVICE_LINKED_ROLE used by SLENS to allow 'storage-lens.s3.amazonaws.com' to access ORGs and their ACCOUNTs
                                  #Only when ORGs are used
                                  #Allows organizations:DescribeOrganization|ListAccounts|ListAWSServiceAccessForOrganization|ListDelegatedAdministrators
                                  #Created by the first PutStorageLensConfiguration()
S3StorageLensServiceRolePolicy    #AWS managed POLICY used by AWSServiceRoleForS3StorageLens


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       STORAGE LENS TAGS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /storagelens/SLENS/tagging
PutStorageLensConfiguration       #Req: Tags TAG_PAIRS
 Tagging()                        #Res: empty
GET /storagelens/SLENS/tagging
GetStorageLensConfiguration       #Req: empty
 Tagging()                        #Res: Tags TAG_PAIRS
DELETE /storagelens/SLENS/tagging
DeleteStorageLensConfiguration    #Req: empty
 Tagging()                        #Res: empty


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    STORAGE CLASS ANALYSIS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?analytics             #Req: ANALYTICS
PutBucketAnalyticsConfiguration() #  - query variables: id
                                  #PACTION named 's3:PutAnalyticsConfiguration' instead
GET /BUCKET?analytics             #Req: ANALYTICS
GetBucketAnalyticsConfiguration() #  - only id
                                  #Res: ANALYTICS
                                  #PACTION named 's3:GetAnalyticsConfiguration' instead
GET /BUCKET?analytics             #Req: empty
ListBucketAnalytics               #Res: AnalyticsConfigurations ANALYTICS_ARR
 Configurations()                 #Paginates with continuationToken
                                  #No own PACTION: use 's3:GetAnalyticsConfiguration' instead
DELETE /BUCKET?analytics          #Req: ANALYTICS
DeleteBucketAnalytics             #  - only id
 Configuration()                  #Res: empty
                                  #No own PACTION: use 's3:PutAnalyticsConfiguration' instead

ANALYTICS                         #Stats about STORAGE_CLASSs
                                  #Goal: help optimize STORAGE_CLASS|LIFECYCLE|INTELLIGENT_TIERING settings
                                  #Daily. Only include last 30 days.
                                  #Max 1000 per BUCKET
ANALYTICS.Id                      #'ANALYTICS'
ANALYTICS.Filter                  #FILTER. Only for those OBJECTs

ANALYTICS                         #ANALYTICS_EXPORT. Export to CSV file.
 .StorageClassAnalysis.DataExport #Always available: stats in UI console
ANALYTICS_EXPORT
 .OutputSchemaVersion             #'V_1'
ANALYTICS_EXPORT
 .S3BucketDestination             #ANALYTICS_DEST
ANALYTICS_DEST.Bucket             #BUCKET_ARN
                                  #Must be in same REGION as source BUCKET
ANALYTICS_DEST.BucketAccountId    #ACCOUNT_ID. Fails if target BUCKET not owned by ACCOUNT
ANALYTICS_DEST.Prefix             #'OBJECT'
ANALYTICS_DEST.Format             #'CSV'

ANALYTICS_FILE                    #CSV composed of ANALYTICS_LINEs
ANALYTICS_LINE[0-4]               #Group the other fields
                                  #I.e. one line per day + ANALYTICS + STORAGE_CLASS + OBJECT age group
ANALYTICS_LINE[0] Date            #'YYYY-MM-DD'
ANALYTICS_LINE[1] ConfigId        #'ANALYTICS'
ANALYTICS_LINE[2] Filter          #FILTER
ANALYTICS_LINE[3] StorageClass    #'STORAGE_CLASS'
ANALYTICS_LINE[4] ObjectAge       #Age since creation.
                                  #'NUM-NUM2':
                                  #  - range of days
                                  #  - 0-padded
                                  #  - thresholds:
                                  #     - 15d: until 3m
                                  #     - 1m: until 6m
                                  #     - 6m: until 1y
                                  #     - 1y: until 2y
                                  #  - only if Size >128KB and STORAGE_CLASS STANDARD
                                  #There is also 'ALL': any OBJECT of any Size and age
ANALYTICS_LINE[5] ObjectCount     #NUM of OBJECTs
                                  #Only if ObjectAge 'ALL'
ANALYTICS_LINE[6] DataUploaded_MB #NUM (in MB) of written OBJECT data for that day
                                  #Only if ObjectAge 'ALL'
ANALYTICS_LINE[7] Storage_MB      #NUM (in MB) of total OBJECT data
ANALYTICS_LINE[8] DataRetrieved_MB#NUM (in MB) of read OBJECT data for that day
ANALYTICS_LINE[9] GetRequestCount #NUM of GET|PUT requests for OBJECT data
ANALYTICS_LINE[10]
 CumulativeAccessRatio            #NUM. Percentage of OBJECTs read
ANALYTICS_LINE[11]                #NUM of days where STORAGE_CLASS STANDARD_IA would be recommended
 ObjectAgeForSIATransition        #Only if ObjectAge 'ALL' and STORAGE_CLASS STANDARD
ANALYTICS_LINE[12]
 RecommendedObjectAgeForSIA       #NUM. If ObjectAgeForSIATransition > it, should use STANDARD_IA instead
 Transition                       #Only if ObjectAge 'ALL' and STORAGE_CLASS STANDARD

PERMISSIONS ==>                   #Must grant permissions to S3 SERVICE_DOMAIN on target BUCKET
                                  #Same as INVENTORY (see below)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      NOTIFICATIONS MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?notification          #Req: NOTIFICATIONS, x-amz-skip-destination-validation [C]
PutBucketNotification             #Res: empty
 Configuration()                  #PACTION named 's3:PutBucketNotification' instead
GET /BUCKET?notification          #Req: empty
GetBucketNotification             #Res: NOTIFICATIONS
 Configuration()                  #PACTION named 's3:GetBucketNotification' instead

NOTIFICATIONS                     #Send messages to SNS, SQS, Lambda or EventBridge on S3 events
                                  #Must be in same REGION
                                  #Delivered at least once, but can rarely be sent multiple times
                                  #Usually sent in seconds, but can be minutes
                                  #Max 100 per REGION

NOTIFICATIONS.TopicConfigurations #NOTIFICATIONS_SNS_ARR
NOTIFICATIONS_SNS.Topic           #TOPIC_ARN. Cannot be FIFO

NOTIFICATIONS.QueueConfigurations #NOTIFICATIONS_SQS_ARR
NOTIFICATIONS_SQS.Queue           #QUEUE_ARN. Cannot be FIFO

NOTIFICATIONS
 .CloudFunctionConfigurations     #NOTIFICATIONS_LAMBDA_ARR
NOTIFICATIONS_LAMBDA.CloudFunction#FUNC_ARN. Async Lambda trigger with Payload NPAYLOAD

NOTIFICATIONS
 .EventBridgeConfiguration        #NOTIFICATIONS_EVENTBRIDGE

NOTIFICATIONS_SNS|SQS|LAMBDA.Id   #STR (def: automatic)
NOTIFICATIONS_SNS|SQS|LAMBDA      #'NEVENT'_ARR
 .Events                          #Can use * after second `:`
NOTIFICATIONS_SNS|SQS|LAMBDA
 .Filter.S3Key.FilterRules        #NOTIFICATIONS_FILTER_ARR
NOTIFICATIONS_FILTER.Name         #'prefix|suffix'
NOTIFICATIONS_FILTER.Value        #STR. Only emits events for OBJECTs starting|ending with STR
                                  #Cannot overlap with other NOTIFICATIONS_FILTER, i.e. match some of the same OBJECTs

PERMISSIONS ==>                   #Must grant:
                                  #  - one of:
                                  #     - SNS:Publish on TOPIC
                                  #     - SQS:SendMessage on QUEUE
                                  #     - Lambda:InvokeFunction on Lambda FUNCTION
                                  #  - to Principal.Service 's3.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn = SOURCE_BUCKET_ARN
                                  #  - COND_KEY aws:SourceAccount = ACCOUNT_ID

AWS/S3/Storage-Lens/Event
 NotificationEnabledBucketCount   #Like Buckets, but only with NOTIFICATION enabled
SLENS_METRIC % Event Notification
 enabled buckets                  #% of EventNotificationEnabledBucketCount/Buckets

BUCKET.onObjectCreated|Removed
 ('FUNC', EFUNC, RPROPS, KROPTS)
 ->NOTIFICATIONS_LAMBDA
new BucketEventSubscription      ##With Pulumi, BUCKET_NOTIFICATION.
 ('FUNC', BUCKET, EFUNC, KROPTS) ##Child of CW.lambda.EventSubscription (see its doc)
RPROPS.events                    ##NOTIFICATIONS_LAMBDA.Events
                                 ##Only with new BucketEventSubscription()
RPROPS.event                     ##STR (def: '*') passed to RPROPS.events as ['s3:ObjectCreated|Removed:STR']
                                 ##Not with new BucketEventSubscription()
RPROPS.filterPrefix|Suffix       ##NOTIFICATIONS_FILTER.Value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     NOTIFICATIONS PAYLOAD     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPAYLOAD                          #Event message JSON payload
NPAYLOAD.Records                  #NMESSAGE_ARR
NMESSAGE.eventVersion             #One of:
                                  #  - '2.3': on NEVENT s3:ObjectRestore|Lifecycle*|IntelligentTiering|ObjectAcl|ObjectTagging
                                  #  - '2.2': on NEVENT s3:Replication, if cross-REGIONs
                                  #  - '2.1': otherwise
NMESSAGE.eventSource              #Always 'aws:s3'
NMESSAGE.awsRegion                #'REGION'
NMESSAGE.eventTime                #'DATE'
NMESSAGE.eventName                #'NEVENT' without 's3:' prefix
NMESSAGE.s3                       #NMESSAGE_S3
NMESSAGE_S3.s3SchemaVersion       #Always '1.0'

NMESSAGE.userIdentity.principalId #PRINCIPAL id of requester (same values as CloudTrail)
NMESSAGE.requestParameters
 .sourceIPAddress                 #'IP' of requester
NMESSAGE.responseElements         #NRES_HEADERS
NRES_HEADERS.x-amz-request-id     #'REQ_ID'
NRES_HEADERS.x-amz-id-2           #STR

NMESSAGE_S3.bucket                #NMESSAGE_BUCKET
NMESSAGE_BUCKET.arn               #BUCKET_ARN
NMESSAGE_BUCKET.name              #'BUCKET'
NMESSAGE_BUCKET
 .ownerIdentity.principalId       #ACCOUNT_ID of BUCKET_OWNER

NMESSAGE_S3.object                #NMESSAGE_OBJECT
NMESSAGE_OBJECT.key               #'OBJECT'
NMESSAGE_OBJECT.size              #NUM (in bytes)
NMESSAGE_OBJECT.eTag              #STR
NMESSAGE_OBJECT.versionId         #VERSION_MID
NMESSAGE_OBJECT.sequencer         #'HEX' of NUM, used to know time order between NOTIFICATIONs on a given OBJECT
                                  #Only for PUT|DELETE ACTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   NOTIFICATIONS TEST EVENT    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-skip-destination-validation:
 BOOL [C]                         #If false (def), fails is SNS|SQS|Lambda|EventBridge destination is not correctly configured

NEVENT s3:TestEvent               #On PutBucketNotificationConfiguration()

TEST_NPAYLOAD                     #Event message payload for NEVENT s3:TestEvent
TEST_NPAYLOAD.Service             #'Amazon S3'
TEST_NPAYLOAD.Event               #'NEVENT'
TEST_NPAYLOAD.Time                #'DATE'
TEST_NPAYLOAD.Bucket              #'BUCKET'
TEST_NPAYLOAD.RequestId           #REQ_ID
TEST_NPAYLOAD.HostId              #ID of requester host


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       ACCESS POINT MAIN       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /accesspoint/ACCESSPOINT      #Req: ACCESSPOINT
CreateAccessPoint()               #  - no AccessPointArn, Name, Alias, CreationDate, NetworkOrigin, Endpoints
                                  #Res: ACCESSPOINT
                                  #  - only AccessPointArn, Alias
GET /accesspoint/ACCESSPOINT      #Req: empty
GetAccessPoint()                  #Res: ACCESSPOINT
GET /accesspoint                  #Req: empty
ListAccessPoints()                #Res: AccessPointList ACCESSPOINT_ARR
                                  #  - no CreationDate, Endpoints, PublicAccessBlockConfiguration
                                  #Paginates with nextToken, maxResults
DELETE /accesspoint/ACCESSPOINT   #Req: empty
DeleteAccessPoint()               #Res: empty

ACCESSPOINT                       #Alias for a BUCKET
                                  #Can have own POLICY, PUBLIC_BLOCK, VPC
                                  #I.e. allows multiple settings for a single BUCKET
                                  #Max 1e4 per REGION (soft) (100 if Outposts)
                                  #All ACCESSPOINT-related ACTIONs are CloudTrail DATA_ACTIONs
ACCESSPOINT.AccessPointArn        #ACCESSPOINT_ARN
ACCESSPOINT.Name                  #'ACCESSPOINT'. Max 50 chars, [[:alnum:]-]
ACCESSPOINT.BucketAccountId       #ACCOUNT_ID
ACCESSPOINT.Bucket                #'BUCKET'
x-amz-access-point-alias:         #'BUCKET_ALIAS'. Max 63 chars, [[:alnum:]-]
 BUCKET_ALIAS [S]                 #Is 'ACCESSPOINT-RANDOMID-s3alias'
ACCESSPOINT.Alias                 #Can only be used in BUCKET_ALIAS.s3.amazonaws.com
ACCESSPOINT.CreationDate          #'DATE'

PARAMS.Name|Bucket                #When using ACCESSPOINTs with SDK|CLI, must use ACCESSPOINT_ARN|BUCKET_ARN instead of 'ACCESSPOINT|BUCKET'
--name|bucket                     #This computes x-amz-account-id [C] and x-amz-outpost-id [C] automatically
                                  #Exception: not with CreateBucket|ListRegionalBuckets()
                                  #  - must use PARAMS.AccountId|OutpostId STR instead
CONFIG.s3_use_arn_region
ENVVAR AWS_S3_USE_ARN_REGION
COPTS.useArnRegion                #BOOL (def: false). Prefer PARAMS.Name|Bucket's ARN's REGION over one specifying in hostname

ACCESSPOINT.NetworkOrigin         #Whether can be accessed from 'Internet' (def) or 'VPC' (VpcConfiguration.VpcId)
ACCESSPOINT.VpcConfiguration.VpcId#VPC_ID
ACCESSPOINT.Endpoints             #OBJ. VPC endpoints

arn:aws:s3:REGION:ACCOUNT_ID      #ACCESSPOINT_ARN
 :accesspoint/ACCESSPOINT         #Can be used as a BUCKET_ARN
ACCESSPOINT_ARN/object/OBJECT     #OBJECT in ACCESSPOINT
                                  #Can be used as an OBJECT_ARN

BUCKET_ALIAS.s3.REGION
 .amazonaws.com                   #Like BUCKET.s3.REGION.amazonaws.com, but through ACCESSPOINT
ACCESSPOINT-ACCOUNT_ID
 .s3-accesspoint.REGION
 .amazonaws.com                   #Same

ALLOWED ACTIONS ==>               #Can only use ACTIONs for:
                                  #  - BUCKET (read-only)
                                  #     - including LocationConstraint, CORS, POLICY, ACL, NOTIFICATIONS
                                  #     - excluding everything else
                                  #  - OBJECT (read-write)
                                  #     - including RestoreObject(), ACL, TAGS, OBJECT_LOCK, LEGAL_HOLD
                                  #     - including CopyObject(), UploadPartCopy(), but only if same-REGION
                                  #     - excluding HeadObject(), GetObjectAttributes(), GetObjectTorrent(), DeleteObjects(), PostObject(), SelectObjectContent()
                                  #Requester must be authenticated


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ACCESS POINT POLICY      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /accesspoint/ACCESSPOINT
 /policy                          #Req: ACCESSPOINT_POLICY
PutAccessPointPolicy()            #Res: empty
GET /accesspoint/ACCESSPOINT
 /policy                          #Req: empty
GetAccessPointPolicy()            #Res: ACCESSPOINT_POLICY
DELETE /accesspoint/ACCESSPOINT
 /policy                          #Req: empty
DeleteAccessPointPolicy()         #Res: empty

ACCESSPOINT_POLICY.Policy         #IAM 'POLICY_DOC', as STR
                                  #Resource-based POLICY, with resource-level permissions
                                  #Resource is ACCESSPOINT or OBJECTs within it
                                  #To access BUCKET|OBJECT through ACCESSPOINT:
                                  #  - must be allowed both in the ACCESSPOINT and the underlying BUCKET|OBJECT
                                  #  - i.e. must also have a BUCKET_POLICY to grant same permissions, either:
                                  #     - by copying same STATEMENTs
                                  #     - "delegation" (preferred): by allowing anything providing
                                  #       COND_KEY s3:DataAccessPointAccount matches
                                  #Max 20KB

COND_KEY s3:DataAccessPointArn    #[M]ACCESSPOINT_ARN
COND_KEY s3:DataAccessPointAccount#[M]ACCESSPOINT owner's ACCOUNT_ID
COND_KEY
 s3:AccessPointNetworkOrigin      #[M]ACCESSPOINT.NetworkOrigin


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    MULTI ACCESS POINT MAIN    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /async-requests/mrap/create   #Req: Details MACCESSPOINT, ClientToken CLIENTTOKEN
CreateMultiRegionAccessPoint()    #  - no Status
                                  #Res: MACCESSPOINT_JOB
GET /async-requests/mrap
 /instances/MACCESSPOINT          #Req: empty
GetMultiRegionAccessPoint()       #Res: AccessPoint MACCESSPOINT
GET /async-requests/mrap/instances#Req: empty
ListMultiRegionAccessPoints()     #Res: AccessPoints MACCESSPOINT_ARR
                                  #Paginates with nextToken, maxResults
POST /async-requests/mrap/delete  #Req: MACCESSPOINT_REQ
DeleteMultiRegionAccessPoint()    #  - only ClientToken, Details.Name
                                  #Res: MACCESSPOINT_JOB

MACCESSPOINT                      #Like ACCESSPOINT, but with BUCKETs in multiple REGIONs
                                  #Requests are routed to the closest REGION
                                  #Routing happens regardless of whether BUCKET in that REGION has the OBJECT or not
                                  #  - i.e. usually the BUCKETs use REPLICATION
                                  #  - if BUCKETs are written to through MACCESSPOINT (instead of directly),
                                  #    must be bidirectional REPLICATION
                                  #Uses Edge locations under the hood (like ACCELERATE)
                                  #Goals:
                                  #  - reduce latency
                                  #     - like ACCELERATE, except route to closer replicated BUCKETs instead of a single one
                                  #  - increase availability, when one REGION is down
                                  #Uses signature v4a
                                  #  - i.e. cannot use x-amz-content-sha256 [C]
                                  #Max 100 per REGION
MACCESSPOINT.Name                 #'MACCESSPOINT'. Max 50 chars, [[:alnum:]-]
MACCESSPOINT.Alias                #'MBUCKET_ALIAS'. Is 'RANDOM_ID.mrap'.
MACCESSPOINT.Status               #One of:
                                  #  - 'READY'
                                  #  - 'CREATING|DELETING': ongoing REQ_TOKEN
                                  #  - 'PARTIALLY_CREATED|DELETED': creation|deletion failed for some REGIONs
                                  #  - 'INCONSISTENT_ACROSS_REGIONS'
MACCESSPOINT.CreatedAt            #'DATE'

MACCESSPOINT.Regions              #MACCESSPOINT_REGION_ARR
MACCESSPOINT_REGION
 .BucketAccountId                 #ACCOUNT_ID
MACCESSPOINT_REGION.Bucket        #'BUCKET'
MACCESSPOINT_REGION.Region        #'REGION'. Cannot specify two different BUCKETs in same REGION

arn:aws:s3::ACCOUNT_ID            #MACCESSPOINT_ARN
 :accesspoint/MBUCKET_ALIAS       #Can be used as a BUCKET_ARN
MACCESSPOINT_ARN/object/OBJECT    #OBJECT in MACCESSPOINT
                                  #Can be used as an OBJECT_ARN

MBUCKET_ALIAS.accesspoint
 .s3-global.amazonaws.com         #Like BUCKET.s3.amazonaws.com, but through MACCESSPOINT

ALLOWED ACTIONS ==>               #Same as ACCESSPOINT except:
                                  #  - only on OBJECTs, not BUCKETs
                                  #  - no CopyObject|UploadPartCopy()
                                  #No IPv6

REGIONS ==>                       #Must make call in us-west-2 REGION
                                  #With MACCESSPOINT_ROUTE, can also use a few more: us-east-1, eu-west-1, ap-northeast-1, ap-southeast-2
                                  #MACCESSPOINT_REGION|ROUTE.Region can be any REGION
                                  #Actual calls to OBJECTs through MACCESSPOINT have no REGION

CONFIG.s3_disable_multiregion
 _access_points
ENVVAR AWS_S3_DISABLE_MULTIREGION
 _ACCESS_POINTS
COPTS
 .disableMultiregionAccessPoints  #BOOL (def: false). Do not allow MACCESSPOINTs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   MULTI ACCESS POINT POLICY   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /async-requests/mrap
 /put-policy                      #Req: Details MACCESSPOINT_POLICY, ClientToken CLIENTTOKEN
PutMultiRegionAccessPointPolicy() #Res: MACCESSPOINT_JOB
GET /async-requests/mrap
 /instances/MACCESSPOINT/policy   #Req: empty
GetMultiRegionAccessPointPolicy() #Res: Policy MACCESSPOINT_POLICY_RES

MACCESSPOINT_POLICY.Name          #'MACCESSPOINT'
MACCESSPOINT_POLICY.Policy        #Like ACCESSPOINT_POLICY.Policy but for MACCESSPOINT
MACCESSPOINT_POLICY_RES
 .Proposed.Policy                 #MACCESSPOINT_POLICY.Policy currently being updated
MACCESSPOINT_POLICY_RES
 .Established.Policy              #MACCESSPOINT_POLICY.Policy successfully updated


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   MULTI ACCESS POINT ROUTE    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PATCH /mrap/instances/MACCESSPOINT
 /routes
SubmitMultiRegionAccessPoint      #Req: RouteUpdates MACCESSPOINT_ROUTE_ARR
 Routes()                         #Res: empty
GET /mrap/instances/MACCESSPOINT
 /routes                          #Req: empty
GetMultiRegionAccessPointRoutes() #Res: Mrap MACCESSPOINT_ARN, Routes MACCESSPOINT_ROUTE_ARR

MACCESSPOINT_ROUTE                #Ignore specific BUCKET|REGIONs, for a given percentage of requests
                                  #Meant to use MACCESSPOINT for failovers
                                  #Can specify BUCKET, REGION or both
                                  #Takes up to 2 minutes to update
MACCESSPOINT_ROUTE.Bucket         #'BUCKET'
MACCESSPOINT_ROUTE.Region         #'REGION'
MACCESSPOINT_ROUTE
 .TrafficDialPercentage           #0-100


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    MULTI ACCESS POINT JOB     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /async-requests/mrap
 /MACCESSPOINT_JOB
DescribeMultiRegionAccessPoint    #Req: empty
 Operation()                      #Res: AsyncOperation MACCESSPOINT_STATUS

MACCESSPOINT_JOB                  #Ongoing async job on a MACCESSPOINT
MACCESSPOINT_JOB|STATUS
 .RequestTokenARN                 #'MACCESSPOINT_JOB'
MACCESSPOINT_STATUS.CreationTime  #'DATE'
MACCESSPOINT_STATUS.Operation     #'ACTION'

MACCESSPOINT_STATUS
 .ResponseDetails                 #MACCESSPOINT_DETAILS
MACCESSPOINT_DETAILS
 .MultiRegionAccessPointDetails
 .Regions                         #MACCESSPOINT_STATUS_REGION_ARR. Status in each REGION performing the job
MACCESSPOINT_STATUS_REGION.Name   #'REGION'
MACCESSPOINT_STATUS[_REGION]
 .RequestStatus                   #One of: 'NEW', 'IN_PROGRESS', 'SUCCESS|FAILED'

MACCESSPOINT_STATUS
 .RequestParameters.ACTION        #OBJ with request parameters

MACCESSPOINT_DETAILS.ErrorDetails #ERROR_RES: Code, Message, RequestId, Resource

CLIENTTOKEN                       #STR. Idempotence token. Max 64 chars, no spaces


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:   LAMBDA ACCESS POINT MAIN    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /accesspointforobjectlambda   #Req: Configuration S3LAMBDA
 /LACCESSPOINT                    #Res: LACCESSPOINT
CreateAccessPointForObjectLambda()#  - no Name, CreationDate, PublicAccessBlockConfiguration
GET /accesspointforobjectlambda   #Req: empty
 /LACCESSPOINT                    #Res: LACCESSPOINT
GetAccessPointForObjectLambda()   #  - no ObjectLambdaAccessPointArn
GET /accesspointforobjectlambda   #Req: empty
 /LACCESSPOINT                    #Res: ObjectLambdaAccessPointList LACCESSPOINT_ARR
ListAccessPointsForObjectLambda() #  - no CreationDate, PublicAccessBlockConfiguration
                                  #Paginates with nextToken, maxResults
DELETE /accesspointforobjectlambda
 /LACCESSPOINT                    #Req: empty
DeleteAccessPointForObjectLambda()#Res: empty

LACCESSPOINT                      #Like ACCESSPOINT, but transforms requests|responses with a Lambda FUNCTION
                                  #Only transforms GetObject|HeadObject|ListObjectsV2()
                                  #Max 1000 per REGION
                                  #All LACCESSPOINT-related ACTIONs are CloudTrail DATA_ACTIONs
                                  #Called "S3 Object Lambda"
LACCESSPOINT
 .ObjectLambdaAccessPointArn      #LACCESSPOINT_ARN
LACCESSPOINT.Name                 #'LACCESSPOINT'
LACCESSPOINT.CreationDate         #'DATE'
LACCESSPOINT.Alias.Value          #'LBUCKET_ALIAS'. Is 'LACCESSPOINT-RANDOM_ID--ol-s3'
LACCESSPOINT.Alias.Status         #'PROVISIONING' or 'READY'

arn:aws:s3-object-lambda
 :REGION:ACCOUNT_ID               #LACCESSPOINT_ARN
 :accesspoint/LACCESSPOINT        #Can be used as a BUCKET_ARN
LACCESSPOINT_ARN/object/OBJECT    #OBJECT in LACCESSPOINT
                                  #Can be used as an OBJECT_ARN

LBUCKET_ALIAS.s3.REGION
 .amazonaws.com                   #Like BUCKET.s3.REGION.amazonaws.com, but through LACCESSPOINT
LACCESSPOINT-ACCOUNT_ID
 .s3-object-lambda.REGION
 .amazonaws.com                   #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:  LAMBDA ACCESS POINT POLICY   :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /accesspointforobjectlambda
 /LACCESSPOINT/policy
PutAccessPointPolicy              #Req: LACCESSPOINT_POLICY
 ForObjectLambda()                #Res: empty
GET /accesspointforobjectlambda
 /LACCESSPOINT/policy
GetAccessPointPolicy              #Req: empty
 ForObjectLambda()                #Res: LACCESSPOINT_POLICY
DELETE /accesspointforobjectlambda
 /LACCESSPOINT/policy
DeleteAccessPointPolicy           #Req: empty
 ForObjectLambda()                #Res: empty

LACCESSPOINT_POLICY.Policy        #Like ACCESSPOINT_POLICY.Policy but for LACCESSPOINT

s3-object-lambda.amazonaws.com    #SERVICE_DOMAIN

PERMISSIONS ==>                   #Requester must have permissions on all of:
                                  #  - LACCESSPOINT
                                  #     - PACTIONs 's3-object-lambda:*' instead of 's3:*'
                                  #  - FUNCTION:
                                  #     - PACTION 'lambda:InvokeFunction'
                                  #     - PACTION 's3-object-lambda:WriteGetObjectResponse': if calls it (i.e. transforms GetObject())
                                  #     - is a DEPENDENT_ACTION
                                  #        - i.e. can restrict with COND_KEY aws:CalledVia s3-object-lambda.amazonaws.com
                                  #  - ACCESSPOINT and underlying BUCKET
                                  #     - PACTIONs 's3:*'
                                  #     - is a DEPENDENT_ACTION too, i.e. can restrict the same way

AmazonS3ObjectLambdaExecution     #AWS managed POLICY for FUNC_VERSION.Role. Allows FUNCTION to PACTIONs:
 RolePolicy                       #  - 's3-object-lambda:WriteGetObjectResponse'
                                  #  - 'logs:CreateLogGroup|CreateLogStream|PutLogEvents': needed by Lambda logging


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       LAMBDA TRANSFORM        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /accesspointforobjectlambda
 /LACCESSPOINT/configuration
PutAccessPointConfiguration       #Req: Configuration S3LAMBDA
 ForObjectLambda()                #Res: empty
GET /accesspointforobjectlambda
 /LACCESSPOINT/configuration
GetAccessPointConfiguration       #Req: empty
 ForObjectLambda()                #Res: Configuration S3LAMBDA

S3LAMBDA.SupportingAccessPoint    #ACCESSPOINT_ARN. Also called "standard ACCESSPOINT"
                                  #Used by LACCESSPOINT to read OBJECTs, i.e.:
                                  #  - if uses a FUNCTION: LACCESSPOINT <-> FUNCTION <-> ACCESSPOINT <-> OBJECT
                                  #  - otherwise: LACCESSPOINT <-> ACCESSPOINT <-> OBJECT

S3LAMBDA
 .TransformationConfigurations    #S3TRANSFORM_ARR
S3TRANSFORM.Actions               #'ACTION'_ARR among 'GetObject', 'HeadObject', 'ListObjectsV2'
                                  #Only transform if one of those ACTIONs
                                  #Other ACTIONs allowed by MACCESSPOINT:
                                  #  - also allowed by LACCESSPOINT
                                  #  - but not transformed

S3TRANSFORM.ContentTransformation
 .AwsLambda                       #S3CTRANSFORM
S3CTRANSFORM.FunctionArn          #FUNC_ARN. Transforms both input and output
                                  #Must be in same REGION as LACCESSPOINT

S3CTRANSFORM.FunctionPayload      #STR payload passed to FUNCTION
REQ_CONF.payload                  #STR

S3LAMBDA.AllowedFeatures          #STR_ARR among:
                                  #  - 'GetObject-Range': allow Range [C]
                                  #  - 'GetObject-PartNumber': allow READ_OBJECT.partNumber
                                  #  - 'HeadObject-*': like GetObject-* but for HeadObject()
                                  #When using Range [C] or READ_OBJECT.partNumber:
                                  #  - performed on the transformed response, not the original one
                                  #  - if FUNCTION does not transform (or does not change byte-to-byte relation),
                                  #    it can forward those to ACCESSPOINT
                                  #  - otherwise, it must retrieved full OBJECT and perform the slice after transformation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LAMBDA REQUEST         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HANDLER                           #FUNCTION HANDLER. Usually, it must:
                                  #  - forward request params to ACCESSPOINT, to fetch OBJECT
                                  #  - transform response OBJECT|headers
                                  #     - requires recomputing Content-Length [S], ETag [S]
                                  #  - forward them otherwise
                                  #See aws-samples/amazon-s3-object-lambda-default-configuration for an example

REQ                               #Passed to FUNCTION
REQ.xAmzrequestId                 #REQ_ID
REQ.getObjectContext              #REQ_GET. Only if GetObject()
REQ.headObjectContext             #REQ_HEAD. Only if HeadObject()
REQ.listObjectsV2Context          #REQ_LIST. Only if ListObjectsV2()
REQ.configuration                 #REQ_CONF

REQ_CONF.accessPointArn           #LACCESSPOINT_ARN
REQ.userRequest.url               #'URL' to LACCESSPOINT, including query variables
REQ.userRequest.headers           #OBJ. Request headers passed to LACCESSPOINT
REQ.protocolVersion               #Always '1.00'. Version of REQ.

REQ_CONF.supportingAccessPointArn #ACCESSPOINT_ARN
REQ_GET|HEAD|LIST.inputS3Url      #'URL' to ACCESSPOINT, pre-signed
                                  #Request headers:
                                  #  - pre-signed URL always includes:
                                  #     - ?versionId
                                  #     - all query parameters, if ListObjectsV2()
                                  #     - x-amz-checksum-mode [C], x-amz-expected-bucket-owner [C], x-amz-request-payer [C]
                                  #     - If-[None-]Match [C], If-[Un]modified-Since [C]
                                  #  - can add others by passing REQ.userRequest.headers though

REQ.userIdentity                  #REQ_IDENTITY
REQ_IDENTITY|ISSUER.type          #'IDENTITY' (see IAM doc)
REQ_IDENTITY|ISSUER.arn           #IDENTITY ARN, e.g. ROLE_ARN
REQ_IDENTITY|ISSUER.principalId   #IDENTITY ID, e.g. ROLE_MID
REQ_IDENTITY|ISSUER.userName      #'IDENTITY' name, e.g. 'ROLE'
REQ_IDENTITY|ISSUER.accountId     #ACCOUNT_ID
REQ_IDENTITY.accessKeyId          #ACCESS_KEY_ID
REQ_IDENTITY.invokedBy            #'SERVICE_DOMAIN', if called by another SERVICE
REQ_IDENTITY.sessionContext       #REQ_SESSION. Only set if using STS
REQ_SESSION.sessionIssuer         #REQ_ISSUER
REQ_SESSION.attributes            #REQ_ATTRS
REQ_ATTRS.mfaAuthenticated        #'BOOL'
REQ_ATTRS.creationDate            #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LAMBDA RESPONSE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HANDLER RESPONSE ==>              #For:
                                  #  - GetObject():
                                  #     - call WriteGetObjectResponse()
                                  #        - including on errors
                                  #        - within 60s
                                  #     - return null
                                  #  - HeadObject(): return HEAD_RES
                                  #  - ListObjectsV2(): return LIST_RES

POST /WriteGetObjectResponse      #Req:
WriteGetObjectResponse()          #  - RAW_OBJECT (including PARAMS.Body STREAM)
                                  #  - x-amz-fwd-* [C], x-amz-request-* [C], x-amz-meta-* [C], x-amz-checksum-ALGO [C]
                                  #Res: empty

REQ_GET.outputToken
x-amz-request-token: STR [C]      #Must pass REQ_GET.outputToken, for authentication
REQ_GET.outputRoute
x-amz-request-route: STR [C]      #Same with REQ_GET.outputRoute

RAW_OBJECT                        #STR. Response body for GetObject()
LIST_RES.listBucketResult         #OBJ. Response body for ListObjectsV2()
LIST_RES.listResultXml            #Same but as 'XML' instead

HEAD_RES.headers                  #OBJ. Response headers
x-amz-fwd-header-HEADER: STR [C]  #Only allows same ones as GetObject|HeadObject()
HEAD_RES.metadata
x-amz-meta-*: STR [C]             #OBJ. x-amz-meta-* [S]

HEAD|LIST_RES.statusCode
x-amz-fwd-status: NUM [C]         #NUM. Status code
HEAD|LIST_RES.errorCode
x-amz-fwd-error-code: STR [C]     #STR. ERROR_RES.Code
HEAD|LIST_RES.errorMessage
x-amz-fwd-error-message: STR [C]  #STR. ERROR_RES.Message


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LAMBDA BUILTIN         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


arn:aws:serverlessrepo:REGION
 :ACCOUNT_ID:applications/FUNCTION#AWS managed FUNCTIONs to use with LACCESSPOINTs

S3ObjectLambdaDecompression       #Decompress OBJECT
                                  #gzip, bzip2, zlib, ZIP, zstandard, snappy

ComprehendPiiRedaction            #Sends 403 if PIIs in OBJECT
 S3ObjectLambda                   #Uses AWS Comprehend
                                  #Not fully documented yet

ComprehendPiiAccessControl        #Replace's PIIs in OBJECT by * chars
 S3ObjectLambda                   #Uses AWS Comprehend
                                  #Not fully documented yet


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LAMBDA METRICS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


S3LAMBDA.CloudWatchMetricsEnabled #BOOL (def: false). Enables following METRICs
                                  #Also enables:
                                  #  - AWS/S3ObjectLambda: like AWS/S3/* for *Requests, *Errors, BytesUploaded|Downloaded, *Latency
                                  #  - only for requests using LACCESSPOINT

AWS/S3ObjectLambda/ProxiedRequests#Like AllRequests, but only when used a LACCESSPOINT but no FUNCTION was called
AWS/S3ObjectLambda/InvokedLambda  #Like AllRequests, but only when used a LACCESSPOINT and called a FUNCTION
AWS/S3ObjectLambda
 /LambdaResponseRequests          #NUM of WriteGetObjectResponse() calls
AWS/S3ObjectLambda
 /LambdaResponse4xx|5xx           #NUM of WriteGetObjectResponse() with 4**|5** status code

DVAR AccessPointName              #'LACCESSPOINT'
DVAR DataSourceARN                #Either:
                                  #  - if uses a FUNCTION: FUNC_ARN
                                  #  - otherwise: ACCESSPOINT_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LAMBDA BATCH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB_OP.LambdaInvoke.FunctionArn   #FUNC_ARN. Call Lambda FUNCTION using an OBJECT as input.
                                  #JOB.RoleArn must be allowed to PACTION 'lambda:InvokeFunction'
                                  #Sync Lambda trigger with Payload REQ, returning RES

REQ|RES.invocationSchemaVersion   #Always '1.0'
REQ|RES.invocationId              #MID
REQ.job.id                        #JOB_MID

REQ.tasks                         #REQ_TASK_ARR
REQ|RES_TASK.taskId               #MID
REQ_TASK.s3BucketArn              #BUCKET_ARN
REQ_TASK.s3Key                    #'OBJECT'
                                  #Can also be |-delimited OBJ values, by passing an URL-encoded OBJ to JOB_MANIFEST_FILE Key COL
REQ_TASK.s3VersionId              #VERSION_MID

RES.treatMissingKeysAs            #Default RES_TASK.resultCode for tasks present as REQ_TASK but not as RES_TASK
RES.results                       #RES_TASK_ARR
RES_TASK.resultCode               #STR among:
                                  #  - 'Succeeded'
                                  #  - 'TemporaryFailure': failed but should retry
                                  #  - 'PermanentFailure'
RES_TASK.resultString             #STR for JOB_OUT_TASK.ResultMessage


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BATCH MAIN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /jobs                         #Req: JOB
CreateJob()                       #  - no JobArn, JobId
                                  #  - no ProgressSummary, CreationTime, Status*, Suspended*, TerminationDate, FailureReasons
                                  #  - no GeneratedManifestDescriptor
                                  #Res: JOB
                                  #  - only JobId
GET /jobs/JOB_MID                 #Req: empty
DescribeJob()                     #Res: Job JOB
                                  #  - no ClientRequestToken, Tags
GET /jobs                         #Req: jobStatuses STR_ARR (JOB.Status)
ListJobs()                        #Res: Jobs JOB_ARR
                                  #  - only JobId, CreationTime, Description, Priority, ProgressSummary, TerminationDate, Status
                                  #  - Operation.OP -> Operation 'OP'
                                  #Paginates with nextToken, maxResults

JOB                               #Perform S3 ACTIONs ("Operation", JOB_OP) on multiple OBJECTs ("source OBJECT")
                                  #Each JOB_OP is done once per OBJECT ("task")
JOB.JobArn                        #JOB_ARN. arn:aws:s3:REGION:ACCOUNT_ID:job/JOB_MID
JOB.JobId                         #JOB_MID
JOB.Description                   #STR. Max 256 chars
JOB.ClientRequestToken            #STR. Idempotency token

JOB.Operation                     #JOB_OP
COND_KEY s3:RequestJobOperation   #New 'JOB_OP'. Only for PACTIONs 's3:CreateJob'
COND_KEY s3:ExistingJobOperation  #Current 'JOB_OP'. Only for PACTIONs 's3:UpdateJob*' or 's3:Put|DeleteJobTagging'

JOB.RoleArn                       #ROLE_ARN performing JOB_OPs
                                  #Trust policy must allow PACTION 'sts:AssumeRole' to SERVICE_DOMAIN 'batchoperations.s3.amazonaws.com'
                                  #Requester must be allowed to PACTION 'sts:PassRole'
                                  #Other permissions depend on JOB_OP

PUT /jobs/JOB_MID/tagging         #Req: Tags TAG_PAIRS
PutJobTagging()                   #Res: empty
GET /jobs/JOB_MID/tagging         #Req: empty
GetJobTagging()                   #Res: Tags TAG_PAIRS
DELETE /jobs/JOB_MID/tagging      #Req: empty
DeleteJobTagging()                #Res: empty

JOB.Tags                          #TAG_PAIRS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      BATCH MANIFEST CSV       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.Manifest                      #JOB_MANIFEST. List of the source OBJECTs
                                  #Unordered
JOB_MANIFEST.Spec                 #JOB_SPEC
JOB_SPEC.Format                   #Either:
                                  #  - 'S3BatchOperations_CSV_20180820': JOB_MANIFEST_FILE
                                  #  - 'S3InventoryReport_CSV_20161130': INVENTORY MANIFEST
                                  #     - empty INVENTORY_LINE.VersionId must first be converted to "null" instead
                                  #JOB.RoleArn must be allowed to PACTION 's3:GetObject[Version]' that file

JOB_MANIFEST.Location             #JOB_MANIFEST_LOCATION. Where JOB_MANIFEST_FILE is located
JOB_MANIFEST_LOCATION.ObjectArn   #OBJECT_ARN
                                  #Must be in same REGION
JOB_MANIFEST_LOCATION
 .ObjectVersionId                 #VERSION_MID
JOB_MANIFEST_LOCATION.ETag        #'ETAG'. MD5 checksum

JOB_MANIFEST_FILE                 #CSV format
JOB_SPEC.Fields                   #'COL'_ARR used by JOB_MANIFEST_FILE among:
                                  #  - 'Bucket': 'BUCKET'
                                  #  - 'Key': 'OBJECT'
                                  #  - 'VersionId': VERSION_MID (def: latest)
                                  #  - 'Ignore': anything
                                  #Def: 'Bucket', 'Key'[, 'VersionId']


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     BATCH MANIFEST PARAMS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.ManifestGenerator
 .S3JobManifestGenerator          #JOB_GMANIFEST. Alternative to JOB_MANIFEST, using parameters instead of JOB_MANIFEST_FILE
JOB_GMANIFEST.SourceBucket        #'BUCKET' with source OBJECTs
JOB_GMANIFEST.ExpectedBucketOwner #ACCOUNT_ID of BUCKET_OWNER

JOB_GMANIFEST.Filter              #JOB_FILTER selecting source OBJECTs
JOB_FILTER.CreatedBefore|After    #'DATE'

JOB_GMANIFEST.EnableManifestOutput#BOOL (def: false). Save JOB_GMANIFEST as an INVENTORY MANIFEST
JOB_GMANIFEST
 .ManifestOutputLocation          #JOB_GLOCATION. OBJECT storing INVENTORY MANIFEST
JOB_GLOCATION.Bucket              #Like INVENTORY_DESTINATION.Bucket
JOB_GLOCATION
 .ExpectedManifestBucketOwner     #ACCOUNT_ID of BUCKET_OWNER
JOB_GLOCATION.ManifestPrefix      #Like INVENTORY_DESTINATION.Prefix
JOB_GLOCATION.ManifestEncryption  #Like INVENTORY_DESTINATION.Encryption
JOB_GLOCATION.ManifestFormat      #Always 'S3InventoryReport_CSV_20161130'

JOB.GeneratedManifestDescriptor   #JOB_GGMANIFEST. INVENTORY MANIFEST generated by JOB_GMANIFEST
JOB_GGMANIFEST.Location           #Like JOB_MANIFEST.Location
JOB_GGMANIFEST.Format             #Always 'S3InventoryReport_CSV_20161130'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BATCH STATUS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /jobs/JOB_MID/status         #Req: query variables:
UpdateJobStatus()                 #  - requestedJobStatus: JOB.Status, only 'Ready' or 'Cancelled'
                                  #  - statusUpdateReason
                                  #Res: JOB
                                  #  - only JobId, Status, StatusUpdateReason
POST /jobs/JOB_MID/priority       #Req: query variables: priority (JOB.Priority)
UpdateJobPriority()               #Res: JOB
                                  #  - only JobId, Priority

JOB.ConfirmationRequired          #BOOL. Make JOB.Status go from 'Preparing' to 'Suspended' (instead of 'Ready')
                                  #Must explicitly UpdateJobStatus() to 'Ready' to continue
                                  #Def: true in UI console, false otherwise

JOB.Priority                      #UINT. Only one JOB is running at once per REGION, according to Priority
COND_KEY s3:RequestJobPriority    #New JOB.Priority. Only for PACTIONs 's3:CreateJob|UpdateJobPriority'
COND_KEY s3:ExistingJobPriority   #Current JOB.Priority. Only for PACTIONs 's3:UpdateJob*' or 's3:Put|DeleteJobTagging'

JOB.Status                        #One of:
                                  #  - 'New': just created
                                  #  - 'Preparing': reading parameters|manifest
                                  #  - 'Suspended'
                                  #  - 'Ready': ready to start, but JOB_OP not started yet
                                  #  - 'Pausing', 'Paused': wait for other JOBs with higher Priority to end
                                  #  - 'Active': processing JOB_OPs
                                  #  - 'Cancelling', 'Cancelled': abort
                                  #  - 'Completing', 'Complete': all tasks succeeded
                                  #  - 'Failing', 'Failed': error
JOB.StatusUpdateReason            #STR. Max 256 chars
JOB.CreationTime                  #'DATE'
JOB.SuspendedDate                 #'DATE' when Status 'Suspended'
JOB.SuspendedCause                #STR
COND_KEY s3:JobSuspendedCause     #JOB.SuspendedCause. Only for PACTION 's3:UpdateJobStatus'
JOB.TerminationDate               #'DATE' when Status 'Complete|Cancelled|Failed'

JobStatusChanged                  #ACTION logged to CloudTrail on change, with following.
CLOUDTRAIL_SMETADATA jobArn       #JOB_ARN
CLOUDTRAIL_SMETADATA jobId        #JOB_MID
CLOUDTRAIL_SMETADATA status       #JOB.Status
CLOUDTRAIL_SMETADATA jobEventId   #STR
CLOUDTRAIL_SMETADATA failureCodes #ARR
CLOUDTRAIL_SMETADATA
 statusChangeReason               #ARR

JOB.FailureReasons                #JOB_FAILURE_ARR when Status 'Failed'
                                  #Also fails either:
                                  #  - after 90 days (30 if 'Suspended')
                                  #  - as soon as both 50% of tasks failed, and 1000+ tasks completed
JOB_FAILURE.FailureCode           #'CODE'
JOB_FAILURE.FailureReason         #STR. Max 256 chars

JOB.ProgressSummary               #JOB_PROGRESS
JOB_PROGRESS.Timers
 .ElapsedTimeInActiveSeconds      #NUM of secs in Status 'Active'
JOB_PROGRESS.TotalNumberOfTasks   #NUM of tasks
JOB_PROGRESS
 .NumberOfTasksSucceeded          #NUM of tasks with Status 'Complete'
JOB_PROGRESS.NumberOfTasksFailed  #NUM of tasks with Status 'Failed'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BATCH REPORT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.Report                        #JOB_OUT. Results of each task of a JOB
                                  #Output even if JOB canceled|failed, but not if all tasks failed
                                  #JOB.RoleArn must be allowed to PACTION 's3:PutObject' those files

JOB_OUT.Enabled                   #BOOL (def: false)
JOB_OUT[_RESULTS].Bucket          #BUCKET_ARN
JOB_OUT.Prefix                    #'JOB_OUT_PREFIX'
JOB_OUT[_SUMMARY].Format          #Always 'Report_CSV_20180820'
JOB_OUT.ReportScope               #Whether to include: 'AllTasks' or 'FailedTasksOnly'

JOB_OUT_PREFIX/job-JOB_MID
 /manifest.json                   #JOB_OUT_SUMMARY path
JOB_OUT_SUMMARY.ReportCreationDate#'DATE'
JOB_OUT_SUMMARY.ReportSchema      #CSV 'COL, ...'
JOB_OUT_SUMMARY.Results           #JOB_OUT_RESULTS_ARR: one for each TaskExecutionStatus
JOB_OUT_RESULTS
 .TaskExecutionStatus             #'succeeded|failed'
JOB_OUT_RESULTS.Key               #JOB_OUT_TASKS path
JOB_OUT_RESULTS.MD5Checksum       #'HASH'

JOB_OUT_PREFIX/job-JOB_MID
 /results/RANDOM_ID.csv           #JOB_OUT_TASKS path
JOB_OUT_TASKS                     #CSV file. One line per JOB_OUT_TASK
JOB_OUT_TASK.Bucket               #'BUCKET'
JOB_OUT_TASK.Key                  #'OBJECT'
JOB_OUT_TASK.VersionId            #VERSION_MID
JOB_OUT_TASK.TaskStatus           #'succeeded|failed'
JOB_OUT_TASK.HTTPStatusCode       #NUM
JOB_OUT_TASK.ErrorCode            #'ERROR'. Empty if JOB failed
JOB_OUT_TASK.ResultMessage        #STR. If JOB succeeded, pseudo-JSON with result
                                  #If JOB failed, error message


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           OUTPOSTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OUTPOSTS ON S3 ==>                #Not fully documented yet
                                  #See:
                                  #  - API: https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html
                                  #  - JavaScript client: https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/s3outposts
                                  #  - Pulumi: https://www.pulumi.com/registry/packages/aws/api-docs/s3outposts
                                  #  - CloudTrail:
                                  #     - LOG_FILE.edgeDeviceDetails: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-record-contents.html
                                  #     - https://docs.aws.amazon.com/AmazonS3/latest/userguide/cloudtrail-logging-understanding-s3-entries.html#cloudtrail-logging-understanding-s3outposts-entries

NOT SUPPORTED ==>                 #  - TORRENT, LocationConstraint, ACL, LOCK, LEGAL_HOLD, SELECT, RESTORE, PUBLIC_BLOCK,
                                  #  - x-amz-confirm-remove-self-bucket-access [C], ListObjectVersions()
                                  #  - ACCESSPOINT without a VpcConfiguration
                                  #  - IPv6

ACCESSPOINT-ACCOUNT_ID.OUTPOST_ID
 .s3-outposts.REGION.amazonaws.com#SERVICE_DOMAIN instead of s3.REGION.amazonaws.com
s3-outposts.REGION.amazonaws.com
x-amz-outpost-id: OUTPOST_ID [C]  #SERVICE_DOMAIN + request header instead of s3-control.amazonaws.com

arn:aws:s3-outposts:REGION:
 ACCOUNT_ID:outpost/OUTPOST_ID    #OUTPOST_ARN
OUTPOST_ARN/bucket/BUCKET         #BUCKET_ARN
OUTPOST_ARN/object/OBJECT         #OBJECT_ARN
OUTPOST_ARN
 /accesspoint/ACCESSPOINT         #ACCESSPOINT_ARN

PACTION 's3-outposts:*'           #Instead of 's3:*'

Create|Get|DeleteBucket()
Put|Get|DeleteBucket
 LifecycleConfiguration()
Put|Get|DeleteBucketPolicy()
Put|Get|DeleteBucketReplication()
Put|Get|DeleteBucketTagging()
Put|GetBucketVersioning()         #Must use s3-control endpoints instead. Fewer features

ListRegionalBuckets()             #No own PACTION: use 's3:ListAllMyBuckets' instead

StorageClass 'OUTPOSTS'           #Only 'STORAGE_CLASS' possible
