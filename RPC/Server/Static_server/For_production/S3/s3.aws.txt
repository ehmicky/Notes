
      
   S3  
      



TODO ==>
  - CLI:
     - aws help topics s3-config
     - aws help topics s3-faq
     - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html    #cli-configure-files-s3
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-s3-access-point.html
     - https://docs.aws.amazon.com/sdkref/latest/guide/feature-s3-mrap.html
  - JavaScript SDK:
     - @aws-sdk/lib-storage
  - headers:
      Content-MD5 [C]                   #
      X-Amz-Content-SHA256 [C]          #'SHA256' hash of request body
      Server [S]                        #'AmazonS3'
      ETag [S]                          #MD5. Of content, not metadata.
  - Pulumi:
     - https://www.pulumi.com/registry/packages/aws-static-website/
  - Glacier:
     - add comments on Glacier to describe difference between using Glacier directly, or through S3

VERSION ==>                       #2014-06-12


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST API ==>                      #  - Domain: https://[BUCKET.]s3[-REGION].amazonaws.com
                                  #     - Can use /BUCKET/ as beginning of PATH instead
                                  #        - Must then use REGION
                                  #        - Gives 301 redirection if not in right REGION
                                  #     - using BUCKET as subdomain:
                                  #        - allows accessing BUCKET_DNS_ALIAS as a domain name
                                  #        - makes BUCKET root (practical for robots.txt, favicon.ico, etc.)
                                  #  - "Unusual" REST API

PAGINATION ==>                    #
REQ.nextToken
RES.NextToken                     #'TOKEN'
REQ.continuation-token
RES.[Next]ContinuationToken       #'TOKEN', alternative syntax for some endpoints
REQ.PROP-marker                   #'TOKEN', alternative syntax for some endpoints
RES.[Next]PROPMarker              #Sometimes has multiple PROPs

RES.IsTruncated                   #BOOL. Not with RES.NextToken

REQ.maxResults                    #NUM (def: 100 with S3 Outputs, 1000 otherwise)
REQ.max-PROPs
RES.MaxPROPs                      #NUM (def: 1000), alternative syntax for some endpoints
RES.PROPCount                     #NUM. Only set with some endpoints, together with RES.MaxPROPs

REQ_ID                            #x-amz-request-id [S] + x-amz-id-2 [S]

PERMISSIONS ==>                   #Some unusual:
                                  #  - DeleteBucketCors -> PutCORSConfiguration
                                  #  - Get|PutBucketCors -> Get|PutBucketCORS
                                  #  - DeleteBucketLifecycle -> PutLifecycleConfiguration
                                  #  - Get|PutBucketLifecycle -> Get|PutLifecycleConfiguration
                                  #  - DeleteBucketTagging -> PutBucketTagging
                                  #  - If VersionId in request parameter, Object -> ObjectVersion
                                  #  - HeadBucket -> ListBucket
                                  #  - Head* -> Get*
                                  #  - PostObject, CopyObject, Multipart writes (except AbortMultipartUpload) -> PutObject
                                  #  - ListBuckets -> ListAllMyBuckets
                                  #  - ListObjects, ListParts, ListObjectVersions -> GetObject
                                  #  - DeleteBucketTagging -> PutBucketTagging
                                  #  - GetBucketLocation -> GetBucket
                                  #  - DeleteObjects -> DeleteObject
                                  #  - ListMultipartUploads -> ListMultipartUploadParts
                                  #  - Get|PutRequestPayment -> Get|PutBucketRequestPayment

PRICING ==>                       #Storage space, per byte
                                  #  - 1$/43GB
                                  #  - free (first year): 5GB
                                  #  - 4% cheaper after 50TB, 9% cheaper after 500TB
                                  #  - cheaper StorageClass:
                                  #     - STANDARD_IA: 2x
                                  #     - ONEZONE_IA: 2.3x
                                  #     - GLACIER_IR: 5.7x
                                  #     - GLACIER: 6.4x
                                  #     - DEEP_ARCHIVE: 23x
                                  #  - INTELLIGENT_TIERING: 1$/4e5 OBJECTs (with >128KB)
                                  #  - min metdata per OBJECT:
                                  #     - 8KB, always with StorageClass STANDARD
                                  #     - 32KB more if GLACIER[_IR]|DEEP_ARCHIVE, with that StorageClass
                                  #        - i.e. better for multiple files tar'd, or single big files
                                  #Number of requests:
                                  #  - 1$/2e6 requests
                                  #  - free (first year): 2e4 requests
                                  #  - more expensive StorageClass:
                                  #     - STANDARD_IA|ONEZONE_IA: 2x for list|write, 2.5x for read
                                  #     - GLACIER_IR: 4x for list|write, 25x for read
                                  #     - GLACIER: 6x for list|write, 1x for read
                                  #     - DEEP_ARCHIVE: 10x for list|write, 1x for read
                                  #     - i.e. better for read-only files
                                  #Specific types:
                                  #  - delete: free
                                  #  - list|write: 10x more expensive
                                  #  - read|restore contents, additional:
                                  #     - STANDARD: free
                                  #     - STANDARD_IA|ONEZONE_IA: 1$/100GB
                                  #     - GLACIER_IR: 1$/33GB
                                  #     - GLACIER:
                                  #        - Bulk: free
                                  #        - Standard: 1$/2e4 requests, 1$/100GB
                                  #        - Expedited: 1$/1e2 requests, 1$/33GB
                                  #     - DEEP_ARCHIVE:
                                  #        - Bulk: 1$/4e4 requests, 1$/400GB
                                  #        - Standard: 1$/1e4 requests, 1$/50GB
                                  #     - i.e. better for rarely accessed files, e.g. backups
                                  #  - select:
                                  #     - input: 1$/500GB
                                  #        - GLACIER + Expedited: 10x more expensive
                                  #        - GLACIER + Standard: 4x more expensive
                                  #        - GLACIER + Bulk: 2x cheaper
                                  #        - DEEP_ARCHIVE: free
                                  #     - output: 1$/1400GB
                                  #        - GLACIER_IR, GLACIER + Expedited: 43x more expensive
                                  #        - STANDARD_IA|ONEZONE_IA, GLACIER + Standard: 14x more expensive
                                  #        - GLACIER + Bulk: 4x more expensive
                                  #        - DEEP_ARCHIVE: free
                                  #CAPACITY: 100$/month
                                  #In|out traffic:
                                  #  - Internet -> S3: free
                                  #  - S3 -> Internet: 1$/11GB
                                  #     - free: 100GB
                                  #     - after 10TB: 5% cheaper
                                  #     - after 50TB: 20% cheaper
                                  #     - after 150TB: 50% cheaper
                                  #  - S3 -> same region: free
                                  #  - S3 -> CloudFront: free
                                  #  - S3 -> another region:
                                  #     - 4x cheaper
                                  #     - must be done explicitly (e.g. copying OBJECT)
                                  #Max 500 TB/month (flexible)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        HIGH-LEVEL CLI         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws s3 COMMAND [ARGS...]          #High-level S3 CLI.
                                  #Globbing not possible as is, but can use --exclude "*" --include "GLOB"
--debug                           #To see underlying HTTP

PATH|FILE|DIR                     #Local file path
S3PATH|S3FILE|S3DIR               #s3://BUCKET, s3://BUCKET/OBJECT or s3://BUCKET/PATH

aws s3 cp|mv
[S3]PATH [S3]PATH2                #
--recursive                       #If [S3]DIR, targets also all contained files.
--exclude|include GLOB_STR        #To use with --recursive. Priority on the one on the right.
--source-region STR               #

--storage-class STR               #"STANDARD|REDUCED_REDUDANCY"
--grants "STR=STR2=STR3"...       #STR is "read|write[acl]" or "full"
                                  #STR2 is "uri|emailaddress|id", specified by STR3.
--acl 'ACL'                       #
--website-redirect STR            #
--sse                             #
--expires STR                     #
--cache-control STR               #
--content-disposition STR         #
--content-encoding STR            #
--content-language STR            #
--no-guess-mime-type              #
--content-type STR                #

--follow-symlinks                 #
--dryrun                          #
--quiet                           #

aws s3 rm S3PATH                  #
--recursive                       #
--exclude|include GLOB_STR        #
--dryrun                          #
--quiet                           #

aws s3 sync [S3]PATH [S3]PATH2    #Make dest path copy of source path, possibly erasing some stuff in PATH2.
                                  #Like aws cp but only if:
                                  #  - files have different size.
                                  #Or if (unless --size-only):
                                  #  - file doesn't exist in dest path
                                  #  - file has newer mtime (unless --exact-timestamps)
                                  #Same options as aws cp|mv, plus:
--delete                          #If file exist in dest path, but not in source path, remove it.

aws s3 ls [S3BUCKET]              #If no S3BUCKET, do listAllBuckets() (show ctime+BUCKET)
                                  #Otherwise listBucket() (show mtime+size+OBJECT)
--recursive                       #

aws s3 mb S3BUCKET                #createBucket()
aws s3 rb S3BUCKET                #deleteBucket(). If OBJECT exists and --force, deleteObject() first.

aws s3 website S3BUCKET
--index|error-document STR        #Modifies it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BUCKET             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET                       #Req: CreateBucketConfiguration BUCKET
CreateBucket()                    #  - no Name, CreationDate
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C], x-amz-object-ownership [C]
                                  #    x-amz-bucket-object-lock-enabled [C]
                                  #Res: Location [S]
HEAD /BUCKET                      #Req: empty
HeadBucket()                      #Res: x-amz-bucket-region [S], x-amz-access-point-alias [S]
GET /                             #Req: empty
ListBuckets()                     #Res: BUCKETS_LIST
                                  #  - no BUCKET.LocationConstraint
                                  #No pagination
DELETE /BUCKET                    #Req: x-amz-expected-bucket-owner [C]
DeleteBucket()                    #Res: empty
                                  #BUCKET must be empty first

BUCKETS_LIST.Buckets              #BUCKET_ARR
BUCKET                            #Like a folder
                                  #Max 100
                                  #WAIT (HeadBucket()) Bucket[Not]Exists: when it exists

BUCKET_ARN                        #arn:aws:s3:::BUCKET
Location: /BUCKET [S]
BUCKET.Name                       #'BUCKET'
                                  #3-63 chars, [[:alnum:]-]
                                  #Must be unique across any ORG
BUCKET.CreationDate               #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT READ          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT                #Req: READ_OBJECT, Range [C], If-[None-]Match [C], If-[Un]modified-Since [C], x-amz-meta-* [C]
GetObject()                       #Res: RAW_OBJECT, Content-Range [S], Accept-Range [S], Content-Type [S],
                                  # Content-Encoding [S], Content-Language [S], Expires [S], Cache-Control [S],
                                  # Content-Disposition [S], x-amz-meta-* [S], x-amz-version-id [S], x-amz-delete-marker [S],
                                  # x-amz-restore [S], x-amz-restore-request-date [S], x-amz-archive-status [S], x-amz-expiration [S]
HEAD /BUCKET/OBJECT               #Req: like getObject()
HeadObject()                      #Res: like getObject()

OBJECT                            #Like a file
                                  #WAIT (HeadObject()) Object[Not]Exists: when it exists
                                  #Unlimited amount
OBJECT_ARN                        #arn:aws:s3:::BUCKET/OBJECT
OBJECT.Bucket                     #'BUCKET'
OBJECT.Key                        #'OBJECT', its name. Also named "key".
                                  #Is a file path, allows virtual "subfolders".
                                  #Due to internal storage details:
                                  #  - more performant when start with a random value
                                  #  - as opposed to serial integer, timestamp, etc.
                                  #Max 1KB, [[:alnum:]-_.*'()!] (should URL encode others)
OBJECT.Location                   #'.../BUCKET/OBJECT' URL

Range: bytes=NUM-NUM2 [C]
Content-Range:
 bytes NUM-NUM2/NUM3 [S]
Accept-Ranges: bytes [S]          #See HTTP doc
READ_OBJECT.partNumber            #NUM, 1-based index, max 1e4

RAW_OBJECT                        #OBJECT, as is
                                  #Max 5GB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TORRENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET/OBJECT?torrent        #Req: empty
GetObjectTorrent()                #Res: TORRENT

TORRENT                           #OBJECT as Content-Type: application/x-bittorrent [S]
                                  #Reading torrent requires PACTION s3:GetObject
                                  #Goal: readers upload to each other:
                                  #  - less server egress
                                  #  - faster download speed
                                  #Max OBJECT content 5GB instead of 5TB
Content-Disposition: attachment;
 filename=OBJECT.torrent; [S]     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT LIST          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GET /BUCKET                       #Req: OBJECTS
ListObjectsV2()                   #  - CamelCase -> dash-case
                                  #  - only EncodingType, StartAfter, Prefix, Delimiter, FetchOwner
                                  #Res: OBJECTS
                                  #  - no FetchOwner
                                  #Paginates OBJECTS.Contents with ContinuationToken, MaxKeys, KeyCount

OBJECTS.Name                      #'BUCKET'

OBJECTS.EncodingType              #'url'. Percent encode the OBJECTS.* with value 'OBJECT'
                                  #I.e. for Key|StartAfter|Prefix|Delimiter
                                  #Needed if contains characters not allowed by XML 1.0

OBJECTS.StartAfter                #STR. Only include if 'OBJECT' is STR, or lexicographically after
OBJECTS.Prefix                    #STR. Only include if 'OBJECT' start with STR
OBJECTS.Delimiter                 #STR separating 'OBJECT' "subfolders". This is usually '/'
                                  #When specified, distinguishes between:
                                  #  - pseudo-regular files:
                                  #     - 'OBJECT' starts with Prefix, but does not include Delimiter
                                  #     - returned in OBJECTS.Contents
                                  #  - pseudo-directories:
                                  #     - 'OBJECT' starts with Prefix, but includes Delimiter
                                  #     - returned in OBJECTS.CommonPrefixes
OBJECTS.Contents                  #OBJECT_ARR
                                  #  - no Bucket, Location, ChecksumCRC|SHA*, VersionId, IsLatest
OBJECTS.CommonPrefixes            #Unique COMMON_PREFIX_ARR
                                  #Max 1e3
COMMON_PREFIX.Prefix              #Prefix + 'OBJECT' until next Delimiter (included)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SIMPLE UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req: RAW_OBJECT, Expect [C], Content-Type [C], Content-Encoding [C], Content-Language [C], Expires [C],
PutObject()                       # Cache-Control [C], Content-Disposition [C], x-amz-meta-* [C], x-amz-storage-class [C],
                                  # x-amz-acl [C], x-amz-grant-PERMISSION [C]
                                  #Res: ETag [S], x-amz-version-id [S], x-amz-expiration [S]

Expect: "100-continue" [C]        #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        BROWSER UPLOAD         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET                      #Req: BUPLOAD, same headers as putObject()
PostObject()                      #Res: OBJECT, same headers as putObject()
                                  #  - only Bucket, Key, Location, ETag
                                  #Not available in JavaScript SDK

BUPLOAD                           #Like putObject() but meant to be performed by a <form> submit
                                  #Must use multipart/form-data
BUPLOAD.file                      #RAW_OBJECT
                                  #Must be last field
BUPLOAD.Key                       #'OBJECT'

BUPLOAD.AWSAccessKeyId            #ACCESS_KEY_ID
BUPLOAD.x-amz-algorithm|
 credential|signed-headers|
 signature|security-token|date    #Like authorization headers

BUPLOAD.success_action_redirect   #URL to redirect to when response code is success_action_status NUM
BUPLOAD.success_action_status     #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       MULTIPART UPLOAD        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?uploads       #Req: same headers as putObject()
CreateMultipartUpload()           #Res: MUPLOAD, same headers as putObject()
                                  #  - no Parts, Initiated, Initiator, Owner, StorageClass, ChecksumAlgorithm
PUT /BUCKET/OBJECT                #Req:
UploadPart()                      #  - RAW_MPART, Expect [C]
                                  #  - query variables: MUPLOAD.uploadId, MPART.partNumber
                                  #Res: ETag [S]
GET /BUCKET/OBJECT                #Req: MUPLOAD
ListParts()                       #  - only uploadId
                                  #Res: MUPLOAD
                                  #  - no Initiated
                                  #Paginates MUPLOAD.Parts with PartNumberMarker, MaxParts
GET /BUCKET                       #Req: MUPLOADS
ListMultipartUploads()            #  - CamelCase -> dash-case
                                  #  - no Bucket, CommonPrefixes, Uploads
                                  #Res: MUPLOADS
                                  #  - MUPLOAD.Bucket -> MUPLOADS.Bucket
                                  #  - no MUPLOAD.Parts
                                  #Paginates MUPLOADS.Uploads with UploadIdMarker + KeyMarker, MaxUploads
POST /BUCKET/OBJECT               #Req: MUPLOAD
CompleteMultipartUpload()         #  - only uploadId (as query variable)
                                  #  - only Parts
                                  #     - no LastModified, Size
                                  #Res: OBJECT, x-amz-version-id [S], x-amz-expiration [S]
                                  #  - only Bucket, Location, ETag, LastModified, ChecksumCRC|SHA*
DELETE /BUCKET/OBJECT             #Req: MUPLOAD
AbortMultipartUpload()            #  - only uploadId
                                  #Res: empty

MUPLOADS.Uploads                  #MUPLOAD_ARR
MUPLOADS.EncodingType|Prefix
 |Delimiter|CommonPrefixes        #Like OBJECTS, except Contents -> Uploads

MUPLOAD                           #Upload OBJECT in multiple requests
                                  #Max OBJECT contents 5TB instead of 5GB
MUPLOAD.UploadId                  #MUPLOAD_MID
MUPLOAD.Bucket                    #'BUCKET'
MUPLOAD.Key                       #'OBJECT'
MUPLOAD.Initiated                 #'DATE'
MUPLOAD.Initiator                 #PRINCIPAL

RAW_MPART                         #OBJECT part, as is
                                  #Min 5MB, max 5GB

MUPLOAD.Parts                     #MPART_ARR
MPART.partNumber                  #NUM. 1-based index.
                                  #Max 1e4
MPART.Size                        #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          OBJECT COPY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET/OBJECT                #Req:
CopyObject()                      #  - like putObject()
                                  #  - x-amz-copy-source* [C], x-amz-metadata-directive [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res: CopyObjectResult OBJECT, x-amz-version-id [S], x-amz-expiration [S]
                                  #  - only ETag, LastModified, ChecksumCRC|SHA*
PUT /BUCKET/OBJECT                #Req:
UploadPartCopy()                  #  - like uploadPart()
                                  #  - x-amz-copy-source* [C]
                                  #  - query variables: OBJECT.versionId (source)
                                  #Res: like copyObject()

x-amz-copy-source:                #Copy OBJECT
 /BUCKET/OBJECT [C]               #New OBJECT's ACL is 'private'

x-amz-metadata-directive:         #If 'COPY' (def):
 COPY|REPLACE [C]                 #  - only allows setting request headers related to server-side encryption,
                                  #    storage class and x-amz-website-redirect-location [C]
                                  #  - those headers are erased if not specified

x-amz-copy-source-HEADER: STR [C] #Same as [x-amz-]HEADER: STR [C] but using x-amz-copy-source [C]
                                  #For HEADERs:
                                  #  - If-[Un]modified-Since [C], If-[None-]Match [C], Range [C],
                                  #    x-amz-server-side-encryption-customer-* [C]
                                  #  - called x-amz-source-HEADER instead: x-amz-expected-bucket-owner [C]
x-amz-copy-source-HEADER: STR [S] #Reflects same request header [C]
                                  #Only for version-id, to distinguish from x-amz-version-id [S] (of new OBJECT)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         OBJECT DELETE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DELETE /BUCKET/OBJECT             #Req: OBJECT, x-amz-mfa [C]
DeleteObject()                    #  - only versionId
                                  #Res: x-amz-version-id [S], x-amz-delete-marker [S]
POST /BUCKET?delete               #Req: Delete DELETE_OBJECTS, x-amz-mfa [C]
DeleteObjects()                   #  - no Errors, DeleteMarker*
                                  #Res: DELETE_OBJECTS
                                  #  - no Quiet
                                  #  - Objects -> Deleted

DELETE_OBJECTS.Objects            #DELETE_OBJECT_ARR
                                  #Max 1e3
DELETE_OBJECT.Key                 #'OBJECT'

DELETE_OBJECTS.Quiet              #BOOL. If true (def: false), only return OBJECTs which errored
DELETE_OBJECTS.Errors             #DELETE_ERROR_ARR
DELETE_ERROR.Key                  #'OBJECT'
DELETE_ERROR.Code                 #STR
DELETE_ERROR.Message              #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      LOCATION CONSTRAINT      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-bucket-region: REGION [S]   #'REGION' (def: 'us-east-1') where BUCKET is located
BUCKET.LocationConstraint         #Can differ from REGION of API endpoint


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-expires
Expires: DATE [C|S]               #See HTTP doc
READ_OBJECT.response-cache-control
Cache-Control: STR [C|S]          #See HTTP doc

OBJECT|MPART.LastModified         #'DATE'
If-[Un]modified-Since: DATE [C]   #See HTTP doc

OBJECT|MPART.ETag                 #STR
ETag: ETAG [S]                    #'ETAG'
If-[None-]Match: STR [C]          #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CONTENT LENGTH         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OBJECT.Size                       #NUM, in bytes

READ_OBJECT
 .response-content-encoding
Content-Encoding: STR [C|S]       #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONTENT TYPE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT.response-content-type
Content-Type: STR [C|S]           #See HTTP doc

READ_OBJECT
 .response-content-disposition
Content-Disposition: STR [C|S]    #See HTTP doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


READ_OBJECT
 .response-content-language
Content-Language: STR [C|S]       #See HTTP doc

x-amz-meta-*: STR [C|S]           #Arbitrary metadata


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CHECKSUMS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OBJECT.ChecksumAlgorithm          #'CRC32[C]|SHA1|SHA256'

OBJECT|MPART
 .ChecksumCRC32[C]|SHA1|SHA256    #'BASE64_HASH'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VERSIONING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?versioning            #Req: VERSIONING
PutBucketVersioning()             #Res: empty
GET /BUCKET?versioning            #Req: empty
GetBucketVersioning()             #Res: VERSIONING
GET /BUCKET?versions              #Req: OBJECT_VERSIONS
ListObjectVersions()              #  - CamelCase -> dash-case
                                  #  - only EncodingType, Prefix, Delimiter
                                  #Res: OBJECT_VERSIONS
                                  #  - Versions: no Bucket, Location, ChecksumCRC|SHA*
                                  #Paginates OBJECTS.Versions with KeyMarker + VersionIdMarker, MaxKeys

VERSIONING                        #Make OBJECTs:
                                  #  - writes update latest VERSION, keep previous VERSIONs
                                  #  - reads show latest VERSION
                                  #To restore a previous VERSION, either:
                                  #  - copy previous VERSION to latest one
                                  #  - delete latest VERSIONs
                                  #To retrieve, must be BUCKET OWNER
VERSIONING.Status                 #One of:
                                  #  - 'Disabled' (def): cannot be set once unset
                                  #  - 'Enabled'
                                  #  - 'Suspended': paused

READ_OBJECT.versionId
OBJECT.VersionId                  #VERSION_MID
x-amz-version-id: VERSION_MID [S] #null if VERSIONING.Status 'Disabled|Suspended'
OBJECT.IsLatest                   #BOOL

OBJECT_VERSIONS.Name              #'BUCKET'
OBJECT_VERSIONS.Versions          #OBJECT_ARR
OBJECT_VERSIONS.EncodingType
 |Prefix|Delimiter|CommonPrefixes #Like OBJECTS, except Contents -> Versions

DELETE_OBJECT|DELETE_ERROR        #VERSION_MID
 .VersionId                       #When versioning enabled and VERSION_MID not specified:
                                  #  - current VERSION is kept but not current anymore
                                  #  - a new current VERSION is added ("delete marker"):
                                  #     - no data|metadata, except 'OBJECT' name
                                  #        - i.e. results in 404
                                  #     - its VERSION_MID is not set in VersionId (null) but in DeleteMarkerVersionId instead
                                  #When versioning disabled, or when enabled but VERSION_MID specified:
                                  #  - permanent delete
                                  #  - if targets a delete marker, restores previous version
x-amz-delete-marker: true [S]
DELETE_OBJECT.DeleteMarker        #BOOL. True if OBJECT is a delete marker
DELETE_OBJECT
 .DeleteMarkerVersionId           #VERSION_MID
OBJECT_VERSIONS.DeleteMarkers     #OBJECT_ARR
                                  #  - only VersionId, IsLatest, Key, LastModified, Owner
                                  #VERSIONs that are delete markers

VERSIONING.MfaDelete              #'Disabled' (def) or 'Enabled'
                                  #When enabled:
                                  #  - requires deleteObject[s]|*BucketVersioning() to use x-amz-mfa [C]
                                  #  - cannot use lifecycle
                                  #Can only be set if all of:
                                  #  - VERSIONING.Status 'Enabled'
                                  #  - x-amz-mfa [C] used
                                  #  - BUCKET OWNER
x-amz-mfa:
 MFA_DEVICE_MID TOKEN [C]         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         STORAGE CLASS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-storage-class: STR [C]
OBJECT|MUPLOAD.StorageClass       #'STORAGE_CLASS', among the ones below

StorageClass 'STANDARD'           #"Frequent access". Default value

StorageClass 'STANDARD_IA'        #"Infrequent access". Min 30 days, 128KB per OBJECT
                                  #Cheaper storage, more expensive retrieval. Cheaper if <1 read/month
StorageClass 'ONEZONE_IA'         #Like STANDARD_IA, but replicates in only 1 AZ, instead of 3 for all other StorageClasses
StorageClass 'GLACIER_IR'         #"Instant retrieval". Like STANDARD_IA but:
                                  #  - min 90 days
                                  #  - cheaper if <1 read/2 months

StorageClass 'GLACIER'            #"S3 Glacier". Cannot read|copy|write, i.e. must RestoreObject()
                                  #Min 90 days
                                  #Cheaper if can wait for restore
StorageClass 'DEEP_ARCHIVE'       #Like GLACIER but:
                                  #  - min 180 days
                                  #  - slower restore
                                  #  - cannot use Tier 'expedited'

StorageClass 'INTELLIGENT_TIERING'#See below

StorageClass 'REDUCED_REDUNDANCY' #"RRS". 1/1e5 loss a year, instead of 1/1e11 for all other StorageClasses
                                  #405 if lost
                                  #Deprecated, and same cost, i.e. not useful

StorageClass 'SNOW'               #AWS Snowball
StorageClass 'OUTPOSTS'           #AWS Outposts


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RESTORE MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POST /BUCKET/OBJECT?restore       #Req:
RestoreObject()                   #  - RESTORE
                                  #  - query variables: OBJECT.VersionId
                                  #Res: empty
                                  #Max 1e3/sec

RESTORE                           #With StorageClass 'GLACIER|DEEP_ARCHIVE':
                                  #  - without INTELLIGENT_TIERING: copy OBJECT but with StorageClass 'STANDARD'
                                  #  - with INTELLIGENT_TIERING: set current OBJECT StorageClass to 'STANDARD'
RESTORE.Description               #'JOB_DESC'

RESTORE                           #Duration, among:
 [.GlacierJobParameters].Tier     #  - 'Expedited': 1-5m, longer if >250MB
                                  #  - 'Standard' (def): 3-5h (12h with StorageClass DEEP_ARCHIVE)
                                  #  - 'Bulk': 5-12h (48h with StorageClass DEEP_ARCHIVE)
x-amz-restore: NUM [S]
OBJECT.RestoreStatus              #RESTORE_STATUS
x-amz-restore-request-date:
 DATE [S]                         #
RESTORE_STATUS.IsRestoreInProgress#BOOL

RESTORE.Days                      #NUM of days before copy expires
                                  #Not with Type 'SELECT', nor INTELLIGENT_TIERING
RESTORE_STATUS.RestoreExpiryDate  #'DATE' when copy expires


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RESTORE OUTPUT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-restore-output-path:
 OBJECT [S]                       #'OBJECT'
RESTORE.OutputLocation.S3         #RESTORE_OUTPUT
RESTORE_OUTPUT.BucketName         #'BUCKET'
RESTORE_OUTPUT.Prefix             #STR

RESTORE_OUTPUT.StorageClass       #'STORAGE_CLASS'
RESTORE_OUTPUT.Tagging            #TAGS
RESTORE_OUTPUT.UserMetadata.VAR   #'VAL'

RESTORE_OUTPUT.Encryption         #RESTORE_ENCRYPTION
RESTORE_ENCRYPTION.EncryptionType #'aws:kms[:dsse]' or 'AES256'
RESTORE_ENCRYPTION.KMSKeyId       #KMS_KEY_MID
RESTORE_ENCRYPTION.KMSContext     #STR

RESTORE_OUTPUT.CannedACL          #'ACL'
RESTORE_OUTPUT
 .AccessControlList.Grants        #GRANT_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        RESTORE SELECT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RESTORE.Type                      #Whether can use SelectParameters: not (def) or 'SELECT'
RESTORE.SelectParameters          #SELECT_PARAMS. Transforms OBJECT being restored, using SQL
                                  #OBJECT must be CSV|JSON

SELECT_PARAMS.ExpressionType      #Always 'SQL'
SELECT_PARAMS.Expression          #STR. SQL expression
                                  #Max 1.3e5 chars

SELECT_PARAMS
 .InputSerialization              #SELECT_INPUT. For parsing ARCHIVE
SELECT_PARAMS                     #SELECT_OUTPUT. For serializing filtered ARCHIVE
 .OutputSerialization             #No JSON.Type, CSV.AllowQuotedRecordDelimiter|FileHeaderInfo|Comments
SELECT_INPUT.CompressionType      #'NONE' (def), 'GZIP' or 'BZIP2'

SELECT_INPUT.Parquet              #OBJ. Use Apache Parquet

SELECT_INPUT|OUTPUT.JSON          #SELECT_JSON
SELECT_JSON.Type                  #Either:
                                  #  - 'DOCUMENT': JSON OBJ_ARR
                                  #  - 'LINES': ndjson

SELECT_INPUT|OUTPUT.CSV           #SELECT_CSV
SELECT_CSV.FileHeaderInfo         #Whether first line is header:
                                  #  - 'USE': yes, and can use as "COL" in SQL
                                  #  - 'IGNORE': yes, but cannot use as "COL" in SQL, only "_NUM"
                                  #  - 'NONE': no
SELECT_CSV|JSON.RecordDelimiter   #'CHAR' (def: \n)
SELECT_CSV
 .AllowQuotedRecordDelimiter      #BOOL (def: false). Allow quoting RecordDelimiter. Slower
SELECT_CSV.FieldDelimiter         #'CHAR' (def: ,)
SELECT_CSV.QuoteCharacter         #'CHAR' (def: ") for quoting
SELECT_CSV.QuoteEscapeCharacter   #'CHAR' (def: ") for escaping QuoteCharacter
SELECT_CSV.QuoteFields            #Whether to quote, among 'ASNEEDED' (def) or 'ALWAYS'
SELECT_CSV.Comments               #'CHAR' (def: #) used to comment a line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      INTELLIGENT TIERING      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutBucketIntelligentTiering       #Req: INTELLIGENT_TIERING
 Configuration()                  #  - also query variables: ITELLIGENT_TIERING.id
                                  #Res: empty
GetBucketIntelligentTiering       #Req: INTELLIGENT_TIERING
 Configuration()                  #  - only id
                                  #Res: INTELLIGENT_TIERING
ListBucketIntelligentTiering      #Req: empty
 Configurations()                 #Res: IntelligentTieringConfiguration INTELLIGENT_TIERING_ARR
                                  #Paginates with ContinuationToken
DeleteBucketIntelligentTiering    #Req: INTELLIGENT_TIERING
 Configuration()                  #  - only id
                                  #Res: empty

INTELLIGENT_TIERING               #Automatically set StorageClass to:
                                  #  - STANDARD: always used if OBJECT <128KB
                                  #  - STANDARD_IA: when not used for 30 days
                                  #  - GLACIER_IR: when not used for 90 days
                                  #  - GLACIER: when not used for NUM days (min 90, max 730)
                                  #  - DEEP_GLACIER: when not used for NUM days (min 180, max 730)
                                  #"Used" means any of:
                                  #  - content read|write: GetObject(), CopyObject|UploadPartCopy(), RestoreObject(),
                                  #    PutObject|CompleteMultipartUpload|ListParts()
                                  #  - SelectObjectContent(), only for [DEEP_]GLACIER
                                  #  - but not metadata read|write: ListObjectsV2(), HeadObject(), etc.
                                  #Only impacts effective StorageClass: the one reported is always 'INTELLIGENT_TIERING'
                                  #Max 1e3 per BUCKET

INTELLIGENT_TIERING.Id            #INTELLIGENT_TIERING_MID
INTELLIGENT_TIERING.Status        #'Enabled' (def) or 'Disabled'

INTELLIGENT_TIERING.Tiering       #TIERING_CONF_ARR (def: empty, i.e. does not use '[DEEP_]GLACIER')
x-amz-archive-status: STR [S]
TIERING_CONF.AccessTier           #StorageClass, among '[DEEP_]ARCHIVE_ACCESS' (for '[DEEP_]GLACIER')
TIERING_CONF.Days                 #NUM. After OBJECT not read for NUM days, sets StorageClass to TIERING_CONF.AccessTier

INTELLIGENT_TIERING.Filter        #FILTER (no ObjectSize*). Only apply INTELLIGENT_TIERING to matching OBJECTs.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LIFECYCLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?lifecycle             #Req: LIFECYCLE
PutBucketLifecycleConfiguration() #Res: empty
GET /BUCKET?lifecycle             #Req: empty
GetBucketLifecycleConfiguration() #Res: LIFECYCLE
DELETE /BUCKET?lifecycle          #Req: empty
DeleteBucketLifecycle()           #Res: empty

LIFECYCLE                         #Delete an OBJECT or sets its StorageClass after a specific time
LIFECYCLE.Rules                   #RULE_ARR. If an OBJECT match multiple ones, use only last one
                                  #Max 1e3
RULE.Id                           #'RULE'. Max 255 chars.
RULE.Status                       #'Enabled' (def) or 'Disabled'

RULE.Filter                       #FILTER. Only apply to matching OBJECTs
FILTER.Prefix                     #STR. Only if 'OBJECT' start with STR
FILTER.Tag                        #TAGS. Only if TAGS match
FILTER.ObjectSizeGreater|LessThan #NUM (in bytes)
FILTER.And                        #FILTER_ARR

RULE.Transitions                  #TRANSITION_ARR. Sets StorageClass to TRANSITION.StorageClass, after a specific time
[N]TRANSITION.StorageClass        #Same values as OBJECT.StorageClass, except no 'STANDARD|REDUCED_REDUNDANCY|SNOW|OUTPOSTS'
TRANSITION|EXPIRATION.Days        #NUM days from OBJECT creation
TRANSITION|EXPIRATION.Date        #Specific 'DATE'

RULE.Expiration                   #EXPIRATION. Delete OBJECT, after a specific time
EXPIRATION                        #BOOL (def: false). Permanent delete OBJECT as soon as it has only one VERSION
 .ExpiredObjectDeleteMarker       #and that VERSION is a delete marker.
                                  #Cannot be specified together with EXPIRATION.Days|Date
x-amz-expiration:
 expiry-date=DATE,
 rule-id=RULE [S]                 #Set by EXPIRATION

RULE
 .AbortIncompleteMultipartUpload
 .DaysAfterInitiation             #NUM. Delete MUPLOADs if not completed within NUM days

RULE.NonCurrentVersionTransitions #NTRANSITION_ARR. Same but applies to all VERSIONs except current one
                                  #As opposed to RULE.Transitions, which only applies to current VERSION
RULE.NonCurrentVersionExpiration  #NEXPIRATION. Same but applies to all VERSIONs except current one
                                  #Delete with a versionId, i.e. permanent delete
                                  #As opposed to RULE.Expiration, which only applies to current VERSION, and delete without a versionId
NTRANSITION|NEXPIRATION
 .NoncurrentDays                  #NUM days from OBJECT not being the current VERSION anymore
NTRANSITION|NEXPIRATION
 .NewerNoncurrentVersions         #Applies to all VERSIONs except NUM+1 most recent (including current one)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             OWNER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-object-ownership [C]
  - see description in https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html ???

BUCKETS_LIST|OBJECT|MUPLOAD.Owner #PRINCIPAL

x-amz-expected-bucket-owner:
 ACCOUNT_ID [C]                   #403 if BUCKET's owner is different

GRANTEE.Type                      #'CanonicalUser|Group|AmazonCustomerByEmail'
GRANTEE|PRINCIPAL.ID              #Either:
                                  #  - USER_ARN (if USER)
                                  #  - CANONICAL_ACCOUNT_ID (if ACCOUNT)
GRANTEE.URI                       #One of:
                                  #  - http://acs.amazonaws.com/groups/global/AuthenticatedUsers: anyone authenticated
                                  #  - http://acs.amazonaws.com/groups/global/AllUsers: anyone
                                  #  - http://acs.amazonaws.com/groups/s3/LogDelivery: logger (see above)
GRANTEE.EmailAddress              #STR, if Type 'AmazonCustomerByEmail'
GRANTEE|PRINCIPAL.DisplayName     #'USER' (if USER)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?policy                #Req: POLICY_DOC
PutBucketPolicy()                 #Res: empty
DELETE /BUCKET?policy             #Req: empty
DeleteBucketPolicy()              #Res: empty
GET /BUCKET?policy                #Req: empty
GetBucketPolicy()                 #Res: POLICY_DOC

POLICY_DOC                        #IAM POLICY_DOC, as OBJ. Resource-based POLICY on BUCKET, with resource-level permissions
                                  #Does not apply to OBJECTs not created by BUCKET OWNER

CONDITION_KEYs ==>                #  - s3:x-amz-acl|x-amz-grant-* STR
                                  #  - s3:x-amz-copy-source STR
                                  #  - s3:x-amz-server-side-encryption STR
                                  #  - s3:x-amz-metadata-directive STR
                                  #  - s3:x-amz-storage-class STR
                                  #  - s3:VersionId STR
                                  #  - s3:prefix STR
                                  #  - s3:delimiter STR
                                  #  - s3:max-keys STR
                                  #  - s3:LocationConstraint REGION: for s3:CreateBucket only STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ACL MAIN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?acl                   #Req: ACL, x-amz-acl [C], x-amz-grant-PERMISSION [C]
PutBucketAcl()                    #Res: empty
GET /BUCKET?acl                   #Req: empty
GetBucketAcl()                    #Res: ACL
PUT /BUCKET/OBJECT?acl            #Req:
PutObjectAcl()                    #  - ACL
                                  #  - x-amz-acl [C], x-amz-grant-PERMISSION [C]
                                  #  - query variables: OBJECT.versionId
                                  #Res: x-amz-version-id [S]
GET /BUCKET/OBJECT?acl            #Req: OBJECT
GetObjectAcl()                    #  - only versionId
                                  #Res: ACL, x-amz-version-id [S]

x-amz-grant-PERMISSION:           #PERMISSION is 'read[-acp]', 'write[-acp]', 'full-control' (GRANT.Permission) or 'private'
 GRANTEE,... [C]                  #GRANTEE is VAR=VAL (GRANT.Grantee) with VAR id|emailAddress|uri

ACL                               #Like resource-based POLICY but:
                                  #  - either on BUCKET|OBJECT
                                  #  - can filter by BUCKET OWNER
                                  #  - simpler
                                  #OBJECT is on a specific VERSION (def: current)
ACL.Owner                         #BUCKET OWNER
ACL.AccessControlList.Grants      #GRANT_ARR
                                  #Max 100
GRANT.Grantee                     #GRANTEE
GRANT.Permission                  #If BUCKET:
                                  #  - "READ": s3:ListBucket[MultipartUploads], s3:ListBucketVersions
                                  #  - "WRITE": s3:PutObject, s3:DeleteObject, (if bucket owner), s3:DeleteObject[Version]
                                  #  - "READ_ACP": s3:GetBucketAcl
                                  #  - "WRITE_ACP": s3:PutBucketAcl
                                  #  - "FULL_CONTROL": all of above
                                  #If OBJECT:
                                  #  - "READ": s3:GetObject[Torrent|Version]
                                  #  - "WRITE": does not exist
                                  #  - "READ_ACP": s3:GetObject[Version]Acl
                                  #  - "WRITE_ACP": s3:PutObject[Version]Acl
                                  #  - "FULL_CONTROL": all of above


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACL CANNED           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-acl: 'ACL' [C]              #

'ACL'                             #Shortcut for ACL
                                  #Default for any BUCKET|OBJECT: private
'ACL' private                     #BUCKET|OBJECT OWNER: FULL_CONTROL
'ACL' public-read[-write]         #BUCKET|OBJECT OWNER: FULL_CONTROL
                                  #AllUsers: READ [and WRITE]
'ACL' authenticated-read          #BUCKET|OBJECT OWNER: FULL_CONTROL
                                  #AuthenticatedUsers: READ
'ACL' bucket-owner-full-control   #BUCKET|OBJECT OWNER: FULL_CONTROL
                                  #Only for OBJECTs
'ACL' bucket-owner-read           #OBJECT OWNER: FULL_CONTROL
                                  #BUCKET OWNER: READ
                                  #Only for OBJECTs
'ACL' log-delivery-write          #LogDelivery: WRITE and READ_ACP
                                  #Only for BUCKETs
'ACL' aws-exec-read               #BUCKET|OBJECT OWNER: FULL_CONTROL
                                  #EC2: READ (only to GET an AMI)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     POLICY BROWSER UPLOAD     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUPLOAD.acl                       #'ACL'

BUPLOAD.Policy                    #OBJECT_POLICY, as Base64
OBJECT_POLICY.expiration          #'DATE'
OBJECT_POLICY.conditions          #ARR of either:
                                  #  - ['OP', 'KEY', 'VAL2']
                                  #  - { KEY: 'VAL2' }: same as ['eq', 'KEY', 'VAL2']

KEY                               #Points to a VAL1
                                  #Can be any field name???
                                  #Can use $FIELDNAME for any field name (e.g. [ "start-with", "$key", "user1/" ])???
                                  #Can contain ${filename}???
KEY 'acl'                         #'ACL'
KEY 'bucket'                      #'BUCKET'
KEY 'content-length-range'        #[MIN_NUM, MAX_NUM] for Content-Length [S]

OP                                #
OP 'eq'                           #VAL1 == VAL2
OP 'starts-with'                  #VAL1 starts with VAL2 (can be '')
OP 'content-length-range'         #VAL1 <= Content-Length [S] <= VAL2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        STATIC WEBSITE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?website               #Optimizes BUCKET for static website hosting.
PutBucketWebsite()                #Req: WebsiteConfiguration OBJ:
                                  #  - ErrorDocument:
                                  #     - Key OBJECT: returned for 4** errors (instead of XML)
                                  #  - IndexDocument:
                                  #     - Suffix STR: GET|HEAD to a DIR appends STR (e.g. "index.html")
                                  #  - RedirectsAllRequestsTo:
                                  #     - HostName STATIC_URL: by def., URL http://BUCKET.s3 -> http://BUCKET.s3-website
                                  #     - Protocol "http[s]" (def: both)
                                  #  - RoutingRules OBJ_ARR:
                                  #     - Condition:
                                  #        - HttpErrorCodeReturnedEquals STR
                                  #        - KeyPrefixEquals STR: if OBJECT starts with STR
                                  #     - Redirect (where to redirect):
                                  #        - Protocol "http[s]"
                                  #        - HostName STR
                                  #        - HttpRedirectCode UINT_STR
                                  #        - ReplaceKey[Prefix]With STR
                                  #When on STATIC_URL:
                                  #  - can only be used with usual browser GET|HEAD requests, not REST API actions
                                  #  - can't use https://
                                  #  - can do buckets|objects 301 redirects with x-amz-website-redirect-location URL|PATH [C]
                                  #     - write [C] by putObject()
                                  #     - read [S] by getObject()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?cors                  #Sets CORS (bucket-level)
PutBucketCors()                   #Request body CORS_OBJ:
                                  #  - CORSConfiguration:
                                  #     - CORSRules OBJ_ARR:
                                  #        - ID STR
                                  #        - AllowedMethod STR_ARR
                                  #        - AllowedOrigin STR_ARR
                                  #        - AllowedHeader STR_ARR. Can be "*"
                                  #        - MaxAgeSeconds NUM: caching the preflight request
                                  #        - ExposeHeader STR_ARR (e.g. server side encryption)
GET /BUCKET?cors
GetBucketCors()                   #Returns CORS_OBJ
DELETE /BUCKET?cors
DeleteBucketCors()                #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?logging               #Enable|disable logging of all BUCKET owned access, written to log OBJECTs
PutBucketLogging()                #Different from CloudTrail.
                                  #Process:
                                  #  - from time to time (few hours), written to log OBJECTs named after current time
                                  #     - LOG_PREFIXYYYY-MM-DD-HH-MM-SS-RANDOM_STR
                                  #     - means any logs <= this date, and after last log write
                                  #  - not guarantee that everything is logged
                                  #Must be BUCKET owner. Can set who can write|read log OBJECTs with TargetGrants.
                                  #Must give PutObject and GetBucketAcl permissions to logger (see above)
                                  #Request body LOGGING_OBJ:
                                  #  - BucketLoggingStatus:
                                  #     - LoggingEnabled (none to disable):
                                  #        - TargetBucket BUCKET: where to store the logs
                                  #        - TargetPrefix PREFIX: prefix to the log OBJECTs
                                  #        - TargetGrants OBJ: same as Grant OBJ in ACL, except using Type
                                  #          "CanonicalUser|AmazonCustomerByEmail|Group" and ID|EmailAddress|DisplayName
                                  #Log lines are (space-delimited):
                                  #  - owner CANONICAL_ACCOUNT_ID
                                  #  - BUCKET
                                  #  - [TIMESTAMP]
                                  #  - IP
                                  #  - requester CANONICAL_ACCOUNT_ID
                                  #  - RANDOM_STR (to avoid overwritting)
                                  #  - REST|WEBSITE.HTTP_METHOD.ACTION
                                  #  - URL (without query variables)
                                  #  - HTTP_METHOD + URL (without query variables, except any VAR x-*)
                                  #  - Response HTTP status|code
                                  #  - Bytes sent
                                  #  - Object size
                                  #  - Time (ms) first byte request received -> last byte sent
                                  #  - Time (ms) last byte request received -> first byte sent
                                  #  - Referrer
                                  #  - User-Agent
                                  #  - VersionId
GET /BUCKET?logging
GetBucketLogging()                #Must be BUCKET owner.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENCRYPTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVER-SIDE-ENCRYPTION ==>        #Encrypts objects before writing, decrypts before reading
                                  #Uses AES-256 with:
                                  #  - keys managed by Amazon: a unique key derived from rotating master key.
                                  #     - Must use x-amz-server-side-encryption "AES256" [C] in putObject(), uploadPart[Copy]()
                                  #     - Will return same header [S] for getObject(), putObject(), uploadPart[Copy]()
                                  #  - keys managed by client:
                                  #     - Must use headers [C] in putObject(), uploadPart():
                                  #        - x-amz-server-side-custom-algorithm "AES256"
                                  #        - x-amz-server-side-encryption-customer-key BASE64_STR (for both writing and reading)
                                  #          (discarded after use)
                                  #        - x-amz-server-side-encryption-customer-key-MD5 STR: Integrity MD5 hash of BASE64_STR
                                  #     - Will return same header [S] except *-customer-key for getObject(), putObject(),
                                  #       uploadPart[Copy](), completeMultipartUpload()
                                  #  - for copyObject() and uploadPartCopy(), can use x-amz-copy-source-server-* for source OBJECT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PAYMENT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?requestPayment        #Make requester pay for transfer costs (but not storage costs):
PutRequestPayment()               #  - must use x-amz-request-payer: requester [C], and request not fail (unless BUCKET owner)
                                  #  - does not work with BitTorrent and logging
                                  #Request body PAYMENT_OBJ:
                                  #  - RequestPaymentConfiguration
                                  #     - Payer: "Requester|BucketOwner" (def: "BucketOwner")
GET /BUCKET?requestPayment
GetRequestPayment()               #Returns PAYMENT_OBJ

DEVPAY ==>                        #Goal:
                                  #  - Charges requester for S3 costs.
                                  #  - Induces a transaction percentage fee.
                                  #Requests must send:
                                  #  - product token: ID of client application
                                  #  - user token: ID of client application user
                                  #Requests authentication as usual except:
                                  #  - if client-side, client should not access SECRET_ACCESS_KEY, so needs to derive a second
                                  #    SECRET_ACCESS_KEY2

PUT /BUCKET?tagging               #Apply tags to BUCKET
PutBucketTagging()                #Request body TAG_OBJ:
                                  #  - Tagging:
                                  #     - Tags OBJ_ARR:
                                  #        - Key STR
                                  #        - Value STR
DELETE /BUCKET?tagging
DeleteBucketTagging()             #
GET /BUCKET?tagging
GetBucketTagging()                #Returns TAG_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NOTIFICATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUT /BUCKET?notification          #Send SNS notification if RRS object lost.
PutBucketNotification()           #Request body NOTIF_OBJ:
                                  #  - NotificationConfiguration (none if disabling):
                                  #     - TopicConfiguration:
                                  #        - Event "s3:ReducedRedundancyLostObject"
                                  #        - Topic TOPIC_SNS_ARN
                                  #First send a test notification. Returns x-amz-sns-test-message-id ID [S]
                                  #Message is:
                                  #  - Service "Amazon S3"
                                  #  - Event "s3:ReducedRedundancyLostObject"
                                  #  - Time "TIMESTAMP"
                                  #  - Bucket BUCKET
                                  #  - Key OBJECT
                                  #  - VersionId VERSION_MID
                                  #  - RequestId ID
                                  #  - HostId: ID identifying requester host
GET /BUCKET?notification
GetBucketNotification()           #Returns NOTIF_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PRE-SIGNED URL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRE-SIGNED URL ==>                #Allow anonymous to do a specific S3 ACTION for specific BUCKET+OBJECT.
                                  #BUCKET or OBJECT can be non-existing if write operation.
                                  #Is time-limited (uses expiration). Uses STS under the hood.
                                  #For example: private URL for a getObject(), or to create a file with putObject()
                                  #Must use JavaScript SDK:
                                  #  - S3.getSignedUrl(ACTION_STR, REQ_OBJ, FUNC(ERROR, URL))
                                  #     - REQ_OBJ can have member Expires NUM too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           S3FS-FUSE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MUST INSTALL MANUALLY ==>         #  - download from GitHub
                                  #  - dependencies: build-essential git libfuse-dev libcurl4-openssl-dev libxml2-dev mime-support
                                  #    automake libtool
                                  #  - ./autogen.sh, ./configure --prefix=/usr --with-openssl, make, make install

MOUNTING ==>                      #Either:
                                  #  - s3fs ... (manually)
                                  #  - /etc/fstab: s3fs#BUCKET DIR fuse nodev,nosuid,rw,OPT... 0 0
                                  #     - where OPT is any below, e.g. allow_other
                                  #     - it seems it bugs, and needs to be remounted at startup: umount DIR, mount DIR (as root)

CREDENTIALS ==>                   #  - ENVVAR WSACCESSKEYID, AWSSECRETACCESSKEY
                                  #  - or ~/.passwd-s3fs (permission 600), /etc/passwd-s3fs (permission 640) or --passwd_file FILE
                                  #     - content "accessKeyId:secretAccessKey"
                                  #     - ~ is /root/ if root
                                  #  - or use option iam_role ROLE

s3fs BUCKET DIR -oVAR=VAL         #BOOL is 1 or nothing
use_cache TMP_DIR                 #Caching mechanism (limit number of downloads) (only for reads, except first download)
allow_other BOOL                  #(def: false) allow other OS_USER to use it
ahbe_conf FILE                    #To add HTTP headers when writing. Each line:
                                  #  [.EXT] HEADER_VAR [HEADER_VAL]
                                  #Can use #comment
retries NUM                       #(def: 2)
default_acl 'ACL'                 #(def: "private")
use_rrs BOOL                      #(def: false) (ReducedRedundancy)
use_sse BOOL                      #(def: false) (Server side encryption)
nomultipart BOOL                  #(def: false)
multireq_max NUM                  #(def: 500): max number of parallel requests when paginating
parallel_count NUM                #(def: 5): max number of parallel multipart upload requests (use multipart over 20MB)
enable_content_md5 BOOL           #(def: false)
public_bucket BOOL                #(def: false): anonymous access
connect_timeout NUM               #(def: 10 secs)
readwrite_timeout NUM             #(def: 30 secs)
max_stat_cache_size NUM           #(def: 10000, e.g. about 4MB)
enable_noobj_cache BOOL           #(def: false): cache non-existing files, to limit the number of calls to ListBucket()
stat_cache_expire NUM             #(def: no expire)
url "https://s3.amazonaws.com"    #To use HTTPS instead
nodnscache BOOL                   #

NOTES ==>                         #  - Max file size 64GB
                                  #  - Supports modes (chmod), mtime, uid|gid (chown) using x-amz-meta-mode|mtime|uid|gid
                                  #  - Sets Content-Type


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


x-amz-bucket-object-lock-enabled: BOOL [C]
  - see description in https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html

x-amz-access-point-alias: BOOL [S]
