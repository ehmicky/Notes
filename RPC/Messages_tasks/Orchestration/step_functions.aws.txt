
                                  ┏━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   STEP_FUNCTIONS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2024-11-28

TODO:
  - https://docs.aws.amazon.com/step-functions/latest/apireference/Welcome.html
  - part in https://docs.aws.amazon.com/step-functions/latest/dg/input-output-resultwriter.html:
     - from "If you export the child workflow execution results,"
     - to "to record the remaining results"
  - new_services doc
     - already done:
        - https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsstepfunctions.html
  - CDK:
     - document which properties are supported by --hotswap
     - API Gateway:
        - StepFunctionsIntegration:
           - v1: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/lib/integrations/stepfunctions.ts
           - v2: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigatewayv2-integrations/lib/http/stepfunctions.ts
        - StepFunctionsRestApi: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/lib/stepfunctions-api.ts
        - https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/README.md#aws-stepfunctions-backed-apis
  - SAM:
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
        - RESPROP Policies: document like AWS::Serverless::Function, i.e. just refer to SAM_POLICIES
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-statemachine.html
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-step-functions-in-sam.html
     - `aws cloudformation package` and `sam package` can be used with:
        - AWS::StepFunctions::StateMachine RESPROP DefinitionS3Location
        - AWS::Serverless::StateMachine RESPROP DefinitionUri
     - document that hot reloading is supported by `sam sync`
        - including part which documents that contents caching is done using STATE_MACHINE definition
     - move documentation about `sam remote invoke`
     - move documentation about AWS::Serverless::Connector
     - move POLICY_TEMPLATE doc from SAM transform doc
     - mention that SAM_POLICIES apply to AWS::Serverless::StateMachine RESPROP Policies too
     - see example of how to document this with AWS::Serverless::Function documentation in CloudWatch Logs
     - test locally using sam-translate binary
  - Infrastructure Composer
     - https://docs.aws.amazon.com/infrastructure-composer/latest/dg/using-composer-services-sf.html
     - https://docs.aws.amazon.com/infrastructure-composer/latest/dg/using-composer-external-files-new.html
     - connection from API Gateway API to Step Functions STATE_MACHINE
  - JSONata
  - https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html
     - already done:
        - Processing input and output:
           - Map state input and output fields in Step Functions
  - https://github.com/awslabs/statelint
  - add summary
  - compare with SWF

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE                           #'states'
SERVICE_DOMAIN                    #'[sync-]states.amazonaws.com'
                                  #'sync'???

FORMAT ==>                        #JSON REQ|RES

PAGINATION ==>                    #Uses REQ.maxResults (def 100, max 1000) + REQ|RES.nextToken
                                  #ValidateStateMachineDefinition(): REQ.maxResults (def|max 100), no REQ|RES.nextToken, RES.truncated BOOL
                                  #No pagination: ListTagsForResource()

PRICING ==>                       #ENCRYPT: no KMS charge if type 'AWS_OWNED_KEY'

                                  ┌─────────────┐
                                  │   MACHINE   │
                                  └─────────────┘

CreateStateMachine()              #Req: MACHINE + NEW_VERSION
                                  #  - no creationDate, label, status
                                  #  - no stateMachineArn
                                  #  - only one with tags
                                  #Res: VERSION
                                  #  - no updateDate, revisionId
UpdateStateMachine()              #Req: MACHINE + NEW_VERSION
                                  #  - no creationDate, label, status
                                  #  - no name, type
                                  #Res: VERSION
                                  #  - no stateMachineArn, creationDate
ListStateMachines()               #Req: empty
                                  #Res: stateMachines MACHINE_ARR
                                  #  - only stateMachineArn, name, creationDate, type
DescribeStateMachine()            #Req:
                                  #  - MACHINE: only stateMachineArn
                                  #  - MACHINE_GET
                                  #Res:
                                  #  - MACHINE
                                  #  - VERSION: no stateMachineVersionArn, no updateDate
DescribeStateMachineForExecution()#Req:
                                  #  - EXEC: only executionArn
                                  #  - MACHINE_GET
                                  #Res:
                                  #  - MACHINE: no creationDate, status, type
                                  #  - VERSION: no stateMachineVersionArn, description
                                  #  - MAP_RUN: only mapRunArn
DeleteStateMachine()              #Req: MACHINE
                                  #  - only stateMachineArn
                                  #Res: empty

MACHINE                           #Creation is idempotent (if exactly same)
MACHINE.stateMachineArn           #'MACHINE_ARN'. 'arn:aws:states:REGION:ACCOUNT_ID:stateMachine:MACHINE'
MACHINE.name                      #'MACHINE'
                                  #Max 80 chars, [:alnum:]-_
MACHINE.creationDate              #DATE_NUM

MACHINE.status                    #STR

MACHINE.label                     #STR

                                  ┌──────────────────┐
                                  │   MACHINE AUTH   │
                                  └──────────────────┘

MACHINE.roleArn                   #'ROLE_ARN'. Required

EVENT_INFO.roleArn                #STR
                                  #With EVENT_TYPE ExecutionStarted

TEST_IN.roleArn                   #STR

PACTION iam:PassRole              #Must be allowed on current PRINCIPAL

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

PublishStateMachineVersion()      #Req: VERSION
                                  #  - no stateMachineVersionArn, *Date
                                  #  - only one with description, revisionId
                                  #Res: VERSION
                                  #  - only stateMachineVersionArn, creationDate
ListStateMachineVersions()        #Req: MACHINE
                                  #  - only stateMachineArn
                                  #Res: stateMachineVersions VERSION_ARR
                                  #  - only stateMachineVersionArn, creationDate
CreateStateMachine()
UpdateStateMachine()
DescribeStateMachine()            #Return VERSION too (see above)
DeleteStateMachineVersion()       #Req: VERSION
                                  #  - only stateMachineVersionArn
                                  #Res: empty

VERSION.stateMachineVersionArn    #'VERSION_ARN'. 'MACHINE_ARN:VERSION_ID'
VERSION.stateMachineArn           #'MACHINE_ARN'
VERSION_ID                        #NUM, starting at 1
VERSION.description
NEW_VERSION.versionDescription    #STR. Max 256 chars
VERSION.creationDate              #DATE_NUM
VERSION.updateDate                #DATE_NUM

NEW_VERSION.publish               #BOOL (def: false). Create a new VERSION, incrementing it

VERSION.revisionId                #STR

                                  ┌──────────────────┐
                                  │   VERSION AUTH   │
                                  └──────────────────┘

PACTION
 states:PublishStateMachineVersion#Required for NEW_VERSION.publish true

                                  ┌───────────┐
                                  │   ALIAS   │
                                  └───────────┘

CreateStateMachineAlias()         #Req: ALIAS
                                  #  - no stateMachineAliasArn, *Date
                                  #Res: ALIAS
                                  #  - only stateMachineAliasArn, creationDate
UpdateStateMachineAlias()         #Req: ALIAS
                                  #  - no name, *Date
                                  #Res: ALIAS
                                  #  - only updateDate
ListStateMachineAliases()         #Req: STATE_MACHINE
                                  #  - only stateMachineArn
                                  #Res: stateMachineAliases ALIAS_ARR
                                  #  - only stateMachineAliasArn, creationDate
DescribeStateMachineAlias()       #Req: ALIAS
                                  #  - only stateMachineAliasArn
                                  #Res: ALIAS
DeleteStateMachineAlias()         #Req: ALIAS
                                  #  - only stateMachineAliasArn
                                  #Res: empty

ALIAS.stateMachineAliasArn        #'ALIAS_ARN'. 'MACHINE_ARN:ALIAS'
ALIAS.name                        #'ALIAS'
ALIAS.description                 #STR
ALIAS.creationDate                #DATE_NUM
ALIAS.updateDate                  #DATE_NUM

ALIAS.routingConfiguration        #ALIAS_ROUTING_ARR
ALIAS_ROUTING
 .stateMachineVersionArn          #'VERSION_ARN'
ALIAS_ROUTING.weight              #NUM

COND_KEY                          #'VERSION_ID|ALIAS'
 states:StateMachineQualifier     #Only with DeleteStateMachineVersion(), *Alias*(), DescribeStateMachine(),
                                  #Start[Sync]Execution|ListExecutions()

                                  ┌─────────────┐
                                  │   EXPRESS   │
                                  └─────────────┘

MACHINE.type                      #Either 'STANDARD' (def) or 'EXPRESS'

DIFFERENCES ==>                   #No
EXEC_ARN                          #'arn:aws:states:REGION:ACCOUNT_ID:express:MACHINE:EXECUTION:EXPRESS_MID'
MAP_RUN_EXEC_ARN                  #'arn:aws:states:REGION:ACCOUNT_ID:express:MACHINE/STATE_MAP_LABEL:EXECUTION:EXPRESS_MID'

                                  ┌────────────────┐
                                  │   DEFINITION   │
                                  └────────────────┘

MACHINE.definition                #DEFINITION. 'DMACHINE_JSON'
                                  #Max 1MB

TEST_IN.definition                #STR

D*                                #Fields in 'DMACHINE_JSON'
DMACHINE.Version                  #Always '1.0' (def)
                                  #Only for top-level MACHINE

DMACHINE|DSTATE.Comment           #STR. Description
                                  #Only for top-level MACHINE

                                  ┌────────────────┐
                                  │   VALIDATION   │
                                  └────────────────┘

ValidateStateMachineDefinition()  #Req:
                                  #  - MACHINE: only definition|type
                                  #  - DIAGNOSTIC: only severity
                                  #Res: VALIDATE_RES

VALIDATE_RES.result               #'OK' or 'FAIL'
VALIDATE_RES.diagnostics          #DIAGNOSTIC_ARR
DIAGNOSTIC.code                   #'CODE'
DIAGNOSTIC.message                #'MESSAGE'
DIAGNOSTIC.severity               #'ERROR' (def) or 'WARNING'
DIAGNOSTIC.location               #STR

                                  ┌───────────────┐
                                  │   EXECUTION   │
                                  └───────────────┘

StartExecution()                  #Req: EXEC
                                  #  - only stateMachineArn, name, input, traceHeader
                                  #Res: EXEC
                                  #  - only executionArn, startDate
StartSyncExecution()              #Req:
                                  #  - EXEC: only stateMachineArn, name, input, traceHeader
                                  #  - EXEC_GET
                                  #Res: EXEC
                                  #  - no mapRunArn, redrive*, stateMachineVersionArn|stateMachineAliasArn
                                  #  - only one with billingDetails
ListExecutions()                  #Req: EXEC
                                  #  - only either stateMachineArn or mapRunArn
                                  #  - only status -> statusFilter
                                  #  - only one with redriveFilter
                                  #Res: executions EXEC_ARR
                                  #  - no cause, error, input*|output*, redriveStatus[Reason], traceHeader
                                  #  - only one with itemCount
DescribeExecution()               #Req:
                                  #  - EXEC: only executionArn
                                  #  - EXEC_GET
                                  #Res: EXEC
StopExecution()                   #Req: EXEC
                                  #  - only executionArn, cause, error
                                  #Res: EXEC
                                  #  - only stopDate

EXEC.executionArn                 #'EXEC_ARN'. 'arn:aws:states:REGION:ACCOUNT_ID:execution:MACHINE:EXECUTION'
EXEC.name                         #'EXEC'
EXEC.startDate                    #DATE_NUM
EXEC.stopDate                     #DATE_NUM

EXEC.stateMachineArn              #'MACHINE_ARN'
EXEC.stateMachineVersionArn       #'VERSION_ARN'
EXEC.stateMachineAliasArn         #'ALIAS_ARN'

EXEC.status                       #STR

AVAILABLE EVENT_TYPES ==>         #ExecutionStarted ExecutionSucceeded ExecutionAborted ExecutionTimedOut ExecutionFailed
EVENT_INFO.stateMachineAliasArn   #STR
                                  #With EVENT_TYPE ExecutionStarted
EVENT_INFO.stateMachineVersionArn #STR
                                  #With EVENT_TYPE ExecutionStarted

                                  ┌─────────────┐
                                  │   REDRIVE   │
                                  └─────────────┘

RedriveExecution()                #Req: REDRIVE
                                  #Res: EXEC
                                  #  - only redriveDate

REDRIVE.executionArn              #'EXEC_ARN'
REDRIVE.clientToken               #STR

EXEC|MAP_RUN.redriveCount         #NUM
EXEC|MAP_RUN.redriveDate          #DATE_NUM
EXEC.redriveStatus                #STR
EXEC.redriveStatusReason          #STR
EXEC.redriveFilter                #STR

AVAILABLE EVENT_TYPES ==>         #ExecutionRedriven MapRunRedriven
EVENT_INFO.redriveCount           #NUM
                                  #With EVENT_TYPEs ExecutionRedriven and MapRunRedriven
                                  #Different descriptions in
                                  #https://docs.aws.amazon.com/step-functions/latest/apireference/API_ExecutionRedrivenEventDetails.html#StepFunctions-Type-ExecutionRedrivenEventDetails-redriveCount???
                                  #And
                                  #https://docs.aws.amazon.com/step-functions/latest/apireference/API_MapRunRedrivenEventDetails.html#StepFunctions-Type-MapRunRedrivenEventDetails-redriveCount???

                                  ┌────────────┐
                                  │   EVENTS   │
                                  └────────────┘

GetExecutionHistory()             #Req: EVENTS_REQ
                                  #Res: events EVENT_ARR

EVENTS_REQ.executionArn           #'EXEC_ARN'

EVENT.id                          #EVENT_MID. Serial NUM, 1-indexed
EVENT.previousEventId             #EVENT_MID, if any

EVENT.timestamp                   #DATE_NUM
EVENTS_REQ.reverseOrder           #BOOL

EVENTS_REQ.includeExecutionData   #BOOL

EVENT.type                        #'EVENT_TYPE' (PascalCase)
                                  #Available ones documented in this doc
EVENT.EVENT_TYPEEventDetails      #EVENT_TYPE-specific EVENT_INFO
                                  #EVENT_TYPE is camelCase
                                  #EVENT_TYPE *StateEntered|StateExited -> stateEntered|stateExited
                                  #undefined some EVENT_TYPEs

                                  ┌───────────┐
                                  │   DEBUG   │
                                  └───────────┘

TestState()                       #Req: TEST_IN
                                  #Res: TEST_OUT

TEST_OUT.status                   #STR

TEST_IN.inspectionLevel           #STR
TEST_OUT.inspectionData           #TEST_DATA

TEST_IN.revealSecrets             #BOOL

                                  ┌────────────────┐
                                  │   DEBUG AUTH   │
                                  └────────────────┘

PACTION states:RevealSecrets      #Required for TEST_IN.revealSecrets true

                                  ┌───────────┐
                                  │   INPUT   │
                                  └───────────┘

INPUT                             #VAL (def: {}) passed to each STATE
                                  #INPUT to first STATE is set by caller, for a given EXEC
                                  #INPUT to other STATEs is previous STATE's OUTPUT
                                  #JSON types only
                                  #Max 256KB (else throw ERROR_CODE 'States.DataLimitExceeded')

TRANSFORM INPUT ==>               #By default, INPUT is kept as is

DSTATE.Arguments                 %#DOEXPR (def: keep as is). Transforms INPUT
                                 %#Only with STATE_TASK|MAP|PARALLEL
$states.input                    %#INPUT

DSTATE.InputPath                 $#DSEXPR. Transforms INPUT
                                 $#null is same as empty OBJ
                                 $#Not with STATE_FAIL
DSTATE.Parameters                $#DOEXPR. Transforms INPUT
                                 $#Done after InputPath
                                 $#Throws ERROR_CODE 'States.ParameterPathFailure' if some DSEXPR does not match
                                 $#Only with STATE_TASK|MAP|PARALLEL|PASS

EXEC.input                        #STR
EXEC.inputDetails.included        #BOOL

TEST_IN.input                     #STR
TEST_DATA.input                   #STR
TEST_DATA.afterArguments          #STR
TEST_DATA.afterInputPath          #STR
TEST_DATA.afterParameters         #STR

TASK.input                        #STR

EVENT_INFO.input                  #'JSON'
                                  #Max 260KB
                                  #With EVENT_TYPEs:
                                  #  - *StateEntered
                                  #  - ActivityScheduled
                                  #  - ExecutionStarted
                                  #  - LambdaFunctionScheduled
EVENT_INFO.inputDetails.truncated #BOOL
                                  #With same EVENT_TYPEs as EVENT_INFO.input

                                  ┌────────────┐
                                  │   OUTPUT   │
                                  └────────────┘

OUTPUT                            #VAL (def: INPUT) returned by each STATE
                                  #OUTPUT from final STATE is EXEC's output
                                  #JSON types only
                                  #Max 256KB (else throw ERROR_CODE 'States.DataLimitExceeded')

TRANSFORM OUTPUT ==>              #By default, OUTPUT is kept as is

DSTATE.Output                    %#DOEXPR (def: keep as is). Transforms OUTPUT
                                 %#Not with STATE_FAIL
$states.result                   %#OUTPUT
                                 %#Only in DSTATE.Output|Assign
                                 %#Only with STATE_TASK|MAP|PARALLEL

DSTATE.ResultSelector            $#DOEXPR. Transforms OUTPUT
                                 $#Only with STATE_TASK|MAP|PARALLEL
DSTATE.ResultPath                $#DZEXPR. Sets OUTPUT as {...INPUT, DZEXPR: OUTPUT}
                                 $#If INPUT.DZEXPR already exists, overrides it
                                 $#null sets OUTPUT as {...INPUT}
                                 $#Cannot use CONTEXT nor $DVAR
                                 $#Done after ResultSelector
                                 $#Throws ERROR_CODE 'States.ResultPathMatchFailure' if some DSEXPR does not match
                                 $#Only with STATE_TASK|MAP|PARALLEL|PASS
DSTATE.OutputPath                $#DSEXPR. Transforms OUTPUT
                                 $#null is same as empty OBJ
                                 $#Done after ResultPath
                                 $#Not with STATE_FAIL

EXEC.output                       #STR
EXEC.outputDetails.included       #BOOL

TEST_OUT.output                   #STR
TEST_DATA.afterResultPath         #STR
TEST_DATA.afterResultSelector     #STR
TEST_DATA.result                  #STR

TASK.output                       #STR

EVENT_INFO.output                 #'JSON'
                                  #Max 260KB
                                  #With EVENT_TYPEs:
                                  #  - *StateExited
                                  #  - ActivitySucceeded
                                  #  - ExecutionSucceeded
                                  #  - LambdaFunctionSucceeded
                                  #  - TaskSubmitted, TaskSucceeded
EVENT_INFO.outputDetails.truncated#BOOL
                                  #With same EVENT_TYPEs as EVENT_INFO.output

                                  ┌─────────────┐
                                  │   CONTEXT   │
                                  └─────────────┘

CONTEXT                           #'OBJ_JSON' passed to each STATE
                                  #Set by caller, for a given EXEC

$states.context                  %#CONTEXT
$$...                            $#Like $... but root value is CONTEXT instead

                                  ┌───────────────┐
                                  │   VARIABLES   │
                                  └───────────────┘

DSTATE.Assign.DVAR                #VAL. "State machine variable"
                                  #Sets $DVAR in any later STATE (not current STATE)
                                  #Can only reference $DVAR inside JSONPath|JSONata
                                 %#$DVAR cannot be set inside a query
                                 %#Other variables assigned inside a query ($VAR := VAL) can only be used inside that query
                                  #Child MACHINEs:
                                  #  - have their own DVAR scope
                                  #  - can use upper scope's DVARs, but not set them
                                  #  - cannot use lower|sibling scopes' DVARs
                                  #DVAR:
                                  #  - max 80 chars
                                  #  - ID_Continue: letters-like, numbers-like, _, diacretics, U+200C U+200D (zero-width space)
                                  #  - first char: ID_Start: letters-like
                                  #Not with STATE_SUCCEED|FAIL

MACHINE.variableReferences.MVAR   #STR_ARR

TEST_IN.variables                 #STR
TEST_DATA.variables               #STR

EVENT_INFO.assignedVariables.STR  #STR
                                  #With EVENT_TYPE *StateExited
EVENT_INFO
 .assignedVariablesDetails        #BOOL
 .truncated                       #With EVENT_TYPE *StateExited

                                  ┌───────────┐
                                  │   STATE   │
                                  └───────────┘

DMACHINE.States.STATE             #DSTATE. Like `case` in a `switch` statement
                                  #'STATE' name max 80 chars

DSTATE.Type                       #'STATE_TYPE'
DSTATE_*.*                        #STATE_TYPE-specific, e.g. DSTATE_CHOICE.Default

                                  ┌──────────┐
                                  │   FLOW   │
                                  └──────────┘

DMACHINE.StartAt                  #'STATE'. First STATE

DSTATE.Next                       #'STATE'. Next STATE
                                  #Cannot target a 'STATE' in parent|child MACHINEs
                                  #Together with DCHOICE.Next, called "transition"

DSTATE.End                        #BOOL (def: false). End MACHINE successfully
                                  #Continue parent MACHINEs
                                  #Not with STATE_CHOICE|SUCCEED|FAIL
                                  #Together with STATE_SUCCEED|FAIL, called "terminal state" (of a MACHINE)

DSTATE.Type                       #'Succeed'. STATE is STATE_SUCCEED
                                  #End MACHINE successfully
                                  #Continue parent MACHINEs

TEST_OUT.nextState                #STR

AVAILABLE EVENT_TYPES ==>         #SucceedStateEntered SucceedStateExited

                                  ┌────────────┐
                                  │   CHOICE   │
                                  └────────────┘

DSTATE.Type                       #'Choice'. STATE is STATE_CHOICE
                                  #Like a `switch` statement

DSTATE_CHOICE.Default             #'STATE'
                                  #Def: throw ERROR_CODE 'States.NoChoiceMatched'

DSTATE_CHOICE.Choices             #DCHOICE_ARR
                                  #Cannot be empty
DCHOICE.Next                      #Like DSTATE.Next. Required

DCHOICE.Assign                    #Like DSTATE_CHOICE.Assign
                                  #DSTATE_CHOICE.Assign is not used if any DCHOICE matches (even if it has no DCHOICE.Assign)

AVAILABLE EVENT_TYPES ==>         #ChoiceStateEntered ChoiceStateExited

                                  ┌───────────────┐
                                  │   CONDITION   │
                                  └───────────────┘

DCHOICE.Condition                %#BOOL_DOEXPR. Required
DCHOICE.Output                   %#OUTPUT_DOEXPR (def: keep as is). Transforms OUTPUT

DCHOICE.*                        $#DCOND, i.e. condition deciding whether to pick DCHOICE
DCHOICE.Variable                 $#DSEXPR. VAL to compare

DCOND.Not                        $#DCOND2
DCOND.And|Or                     $#DCOND_ARR
                                 $#Cannot be empty

DCOND.IsPresent                  $#BOOL. VAL !== undefined
DCOND.IsNull                     $#BOOL. VAL === null

DCOND.IsBoolean                  $#BOOL. VAL is a BOOL
DCOND.BooleanEquals              $#BOOL[_DZEXPR]. VAL === BOOL

DCOND.IsNumeric                  $#BOOL. VAL is a NUM
DCOND.NumericEquals              $#NUM[_DZEXPR]. VAL === NUM
DCOND
.NumericLess|GreaterThan[Equals] $#NUM[_DZEXPR]. VAL < <= > >= NUM

DCOND.IsString                   $#BOOL. VAL is a STR
DCOND.StringEquals               $#STR[_DZEXPR]. VAL === STR
DCOND.StringMatches              $#'GLOB'. VAL matches GLOB
                                 $#GLOB can only use *
                                 $#Must \-escape * \
DCOND
 .StringLess|GreaterThan[Equals] $#STR[_DZEXPR]. VAL < <= > >= STR

DCOND.IsTimestamp                $#BOOL. VAL is a DATE
DCOND.TimestampEquals            $#'DATE'[_DZEXPR]. VAL === DATE
DCOND.TimestampLess
 |GreaterThan[Equals]            $#'DATE'[_DZEXPR]. VAL < <= > >= DATE

                                  ┌───────────┐
                                  │   ERROR   │
                                  └───────────┘

ERROR                             #STATEs can throw ERRORs
                                  #In addition to ERRORs documented in this doc, any STATE might fail due to network ERRORs
                                  #ERRORs are propagated to parent STATE|MACHINEs
                                  #When ERROR reaches top-level MACHINE, ends it with failure, using ERROR as OUTPUT

ERROR_OUTPUT                      #On error, used as OUTPUT
ERROR_OUTPUT.Error                #'ERROR_CODE'
                                  #'States.*' reserved, i.e. should not use inside STATE_TASK
ERROR_OUTPUT.Cause                #'MESSAGE'

DSTATE.Type                       #'Fail'. STATE is STATE_FAIL
                                  #End MACHINE with failure, including parent ones
                                  #OUTPUT is ERROR_OUTPUT
DSTATE.Error                      #'ERROR_CODE'[_DZEXPR] (def: ???). ERROR_OUTPUT.Error
DSTATE.Cause                      #'MESSAGE'[_DZEXPR] (def: none). ERROR_OUTPUT.Cause

AVAILABLE EVENT_TYPES ==>         #FailStateEntered

EXEC.error                        #STR
EXEC.cause                        #STR

TEST_OUT.error                    #STR
TEST_OUT.cause                    #STR

TASK.error                        #STR
TASK.cause                        #STR

EVENT_INFO.error                  #STR
                                  #With EVENT_TYPEs:
                                  #  - *Failed (except MapIterationFailed, MapStateFailed, ParallelStateFailed)
                                  #  - *TimedOut
                                  #  - ExecutionAborted
EVENT_INFO.cause                  #STR
                                  #With same EVENT_TYPEs as EVENT_INFO.error

                                  ┌───────────┐
                                  │   CATCH   │
                                  └───────────┘

DSTATE.Catch                      #DCATCH_ARR. On error, execute some logic
                                  #Only with STATE_TASK|MAP|PARALLEL
DCATCH.Next                       #Like DSTATE.Next. Required

DCATCH.ErrorEquals                #'ERROR_CODE'_ARR. Required, not empty
'States.ALL'                      #Special ERROR_CODE, matching any ERROR_CODE
                                  #  - except 'States.DataLimitExceeded|Runtime'
                                  #Only in DCATCH|DRETRY.ErrorEquals
                                  #Must be in last DCATCH|DRETRY of its ARR

DCATCH's INPUT ==>                #In first matching DCATCH: STATE's INPUT
                                  #In next ones: previous matching DCATCH's ERROR_OUTPUT

DCATCH.Output                    %#ERROR_OUTPUT_DOEXPR (def: keep as is). Transforms ERROR_OUTPUT
$states.errorOutput              %#ERROR_OUTPUT
                                 %#Only in DCATCH.Output|Assign
                                 %#Only with STATE_TASK|MAP|PARALLEL
DCATCH.ResultPath                $#Like DSTATE.ResultPath, but on ERROR_OUTPUT

DCATCH.Assign                     #Like DSTATE.Assign

                                  ┌───────────┐
                                  │   RETRY   │
                                  └───────────┘

DSTATE.Retry                      #DRETRY_ARR. Retry STATE if throws
                                  #If a retry succeeds:
                                  #  - STATE does not throw anymore
                                  #  - CATCHs not run
                                  #Def: no retry
                                  #Only with STATE_TASK|MAP|PARALLEL

DRETRY.ErrorEquals                #Same as DCATCH.ErrorEquals

DRETRY.MaxAttempts                #NUM (def: 3). Max NUM of retries
                                  #Can be 0 to not retry
DRETRY.IntervalSeconds            #NUM (in secs, def: 1). Initial delay
DRETRY.BackoffRate                #NUM (def: 2). Multiplies delay after each retry
DRETRY.JitterStrategy             #'NONE' (def) or 'FULL'. Applies random jitter to delay, which helps spread the load
DRETRY.MaxDelaySeconds            #NUM (def: none). Max delay
                                  #If reached, continues to retry, but with this delay

                                  ┌─────────────┐
                                  │   TIMEOUT   │
                                  └─────────────┘

DMACHINE.TimeoutSeconds           #NUM (def: none). After NUMs, throw ERROR_CODE 'States.Timeout'
                                  #Only for top-level MACHINE
DSTATE_TASK.TimeoutSeconds        #NUM[_DZEXPR] (in secs, def: 60). Same but on STATE_TASK

DSTATE_TASK.HeartbeatSeconds      #NUM[_DZEXPR] (in secs, def: none). Heartbeat timeout, reset after each heartbeat
                                  #On timeout, throw ERROR_CODE 'States.HeartbeatTimeout' + 'States.Timeout'
                                  #Must be < TimeoutSeconds

EVENT_INFO.timeoutInSeconds       #NUM
                                  #With EVENT_TYPEs *Scheduled

EVENT_INFO.heartbeatInSeconds     #NUM
                                  #With EVENT_TYPEs ActivityScheduled and TaskScheduled

                                  ┌──────────┐
                                  │   PASS   │
                                  └──────────┘

DSTATE.Type                       #'Pass'. STATE is STATE_PASS
                                  #Noop. Potential goals: set OUTPUT, set DVARs, apply parent STATE_MAP

DSTATE_PASS.Output               %#OUTPUT_DOEXPR (def: INPUT). Transforms OUTPUT, like other STATEs
DSTATE_PASS.Result               $#OUTPUT (def: INPUT). Sets OUTPUT
                                 $#Cannot use DSEXPR|DFUNCs

AVAILABLE EVENT_TYPES ==>         #PassStateEntered PassStateExited

                                  ┌──────────────┐
                                  │   PARALLEL   │
                                  └──────────────┘

DSTATE.Type                       #'Parallel'. STATE is STATE_PARALLEL
                                  #Executes multiple child MACHINEs in parallel, with same INPUT
                                  #OUTPUT is ARR of their OUTPUTs
                                  #If any child MACHINE throws, other childs are terminated
                                  #On error, throws ERROR_CODE 'States.BranchFailed'

DSTATE_PARALLEL.Branches          #DMACHINE_ARR

AVAILABLE EVENT_TYPES ==>         #ParallelStateEntered ParallelStateExited ParallelStateStarted ParallelStateSucceeded
                                  #ParallelStateAborted ParallelStateFailed

                                  ┌──────────────┐
                                  │   MAP MAIN   │
                                  └──────────────┘

DSTATE.Type                       #'Map'. STATE is STATE_MAP
                                  #Executes one child MACHINEs per ITEM_ARR, in parallel
                                  #OUTPUT is ARR of their OUTPUTs
                                  #Order is:
                                 %#  - Arguments -> ItemReader -> Items -> ItemSelector -> ItemBatcher
                                 $#  - InputPath -> ItemReader -> ItemsPath -> ItemSelector -> ItemBatcher

DSTATE_MAP.Label                  #'STATE_MAP_LABEL' (def: random ID). STATE_MAP name
                                  #Use by executor, as opposed to 'STATE' which is used inside DEFINITION
                                  #Max 40 chars, [:alnum:]-_

DSTATE_MAP.ItemProcessor          #DMACHINE, performed on each ITEM

DSTATE_MAP.Items                 %
DSTATE_MAP.ItemsPath             $#DZEXPR selecting ITEM_ARR
                                  #Def: INPUT, i.e. must be an ARR then

DSTATE_MAP.ItemSelector           #DOEXPR, transforming each ITEM
                                  #Def: keep ITEM as is
CONTEXT.Map.Item.Index            #NUM (0-based)
                                  #Only in DSTATE_MAP.ItemSelector
CONTEXT.Map.Item.Value            #VAL. ITEM's value
                                  #Uses both:
                                 %#  - DSTATE_MAP.Arguments|Items
                                 $#  - DSTATE_MAP.InputPath|ItemsPath
                                  #Only in DSTATE_MAP.ItemSelector

DSTATE_MAP.**                     #In any DZEXPR|DOEXPR, does not use ITEM_ARR, ITEM nor DSTATE_MAP.Item*:
                                 %#  - $states.input is INPUT
                                 %#     - i.e. uses only DSTATE_MAP.Arguments's result
                                 $#  - $ is INPUT
                                 $#     - i.e. uses only DSTATE_MAP.InputPath's result

AVAILABLE EVENT_TYPES ==>         #MapStateEntered MapStateExited MapStateStarted MapStateSucceeded MapStateAborted MapStateFailed
EVENT_INFO.length                 #NUM
                                  #With EVENT_TYPE MapStateStarted

                                  ┌────────────────┐
                                  │   MAP CONFIG   │
                                  └────────────────┘

MAP_RUN.maxConcurrency            #NUM
MAP_RUN.toleratedFailureCount     #NUM
MAP_RUN.toleratedFailurePercentage#NUM

DMACHINE.ProcessorConfig.Mode     #DMAP_CONF
                                  #Only on a child MACHINE inside DSTATE_MAP.ItemProcessor
DMAP_CONF.Mode                    #'INLINE' or 'DISTRIBUTED'???
DMAP_CONF.ExecutionType           #'STANDARD' (def) or 'EXPRESS'???
                                  #Only if DMAP_CONF.Mode 'DISTRIBUTED'

DSTATE_MAP.MaxConcurrency         #NUM[_DZEXPR] (def: 0, i.e. unlimited) of MACHINEs to run at once
                                  #Can be 1 for serial

DSTATE_MAP.ToleratedFailureCount  #When > NUM[_DZEXPR] (def: 0) ITEMs throw:
                                  #  - terminate every child MACHINE
                                  #  - make DSTATE_MAP throw ERROR_CODE 'States.ExceedToleratedFailureThreshold'
                                  #Else, ITEMs that throw:
                                  #  - do not make parent MACHINE throw
                                  #  - produce ERROR_OUTPUTs
DSTATE_MAP
 .ToleratedFailurePercentage      #Same but as NUM[_DZEXPR] 0-100 percentage (def: 0)

                                  ┌───────────────┐
                                  │   MAP BATCH   │
                                  └───────────────┘

DSTATE_MAP.ItemBatcher            #DBATCH. Pass BATCHs to each MACHINE, i.e. groups of multiple ITEMs
                                  #INPUT becomes {Items ITEM_ARR, BatchInput VAL}
                                  #OUTPUT is ARR of each MACHINE's OUTPUT, i.e. one output element per BATCH
                                  #Def: no BATCHs

DBATCH.MaxItemsPerBatch           #Max NUM[_DZEXPR] of ITEMs per BATCH
DBATCH.MaxInputBytesPerBatch      #Max NUM[_DZEXPR] (in bytes, def|max 256KB) total size per BATCH
                                  #Must be explicitly set if no MaxItemsPerBatch
                                  #Combined with MaxItemsPerBatch (if any)

DBATCH.BatchInput                 #DOEXPR (def: undefined), to set as INPUT.BatchInput

                                  ┌─────────────┐
                                  │   MAP RUN   │
                                  └─────────────┘

UpdateMapRun()                    #Req: MAP_RUN
                                  #  - no *Date, status, executionArn, redrive*, *Counts
                                  #Res: empty
ListMapRuns()                     #Req: MAP_RUN
                                  #  - only executionArn
                                  #Res: mapRuns MAP_RUN_ARR
                                  #  - only mapRunArn, executionArn, startDate, stopDate
                                  #  - only one with stateMachineArn
DescribeMapRun()                  #Req: MAP_RUN
                                  #  - only mapRunArn
                                  #Res: MAP_RUN
DescribeStateMachineForExecution()#Also returns mapRunArn (see above)

MAP_RUN.mapRunArn                 #'MAP_RUN_ARN'. 'arn:aws:states:REGION:ACCOUNT_ID:mapRun:MACHINE/STATE_MAP_LABEL:MAP_RUN_MID'
MAP_RUN.startDate                 #DATE_NUM
MAP_RUN.stopDate                  #DATE_NUM

MAP_RUN.status                    #STR

MAP_RUN.stateMachineArn           #'MACHINE_ARN'
MAP_RUN.executionArn              #'EXEC_ARN'
EXEC.mapRunArn                    #'MAP_RUN_ARN'
EXEC.itemCount                    #NUM
MAP_RUN_EXEC_ARN                  #'EXEC_ARN'. 'arn:aws:states:REGION:ACCOUNT_ID:execution:MACHINE/STATE_MAP_LABEL:EXECUTION'???

MAP_RUN.executionCounts           #MAP_COUNT
MAP_RUN.itemCounts                #MAP_COUNT
MAP_COUNT.aborted                 #NUM
MAP_COUNT.failed                  #NUM
MAP_COUNT.failuresNotRedrivable   #NUM
MAP_COUNT.pending                 #NUM
MAP_COUNT.pendingRedrive          #NUM
MAP_COUNT.resultsWritten          #NUM
MAP_COUNT.running                 #NUM
MAP_COUNT.succeeded               #NUM
MAP_COUNT.timedOut                #NUM
MAP_COUNT.total                   #NUM

AVAILABLE EVENT_TYPES ==>         #MapRunStarted MapRunSucceeded MapRunAborted MapRunFailed
EVENT_INFO.mapRunArn              #'MAP_RUN_ARN'
                                  #With EVENT_TYPEs MapRunStarted and MapRunRedriven

                                  ┌───────────────────┐
                                  │   MAP ITERATION   │
                                  └───────────────────┘

AVAILABLE EVENT_TYPES ==>         #MapIterationStarted MapIterationSucceeded MapIterationAborted MapIterationFailed
EVENT_INFO.index                  #NUM
                                  #With EVENT_TYPEs MapIteration*
EVENT_INFO.name                   #'STATE'
                                  #Max 80 chars, [:alnum:]-_
                                  #With EVENT_TYPEs MapIteration*, *StateEntered, *StateExited

                                  ┌─────────────────┐
                                  │   MAP S3 READ   │
                                  └─────────────────┘

DSTATE_MAP.ItemReader             #DREADER. Set INPUT using S3 OBJECTs
                                  #On error, throws ERROR_CODE:
                                  #  - 'States.Permissions': auth-related
                                  #  - 'States.ItemReaderFailed': else

DREADER.Resource                  #Always 'arn:aws:states:::s3:getObject'

DREADER.Arguments                %
DREADER.Parameters               $#DREADER_PARAMS, as DOEXPR
DREADER_PARAMS.Bucket             #S3 'BUCKET'
                                  #Must be in same ACCOUNT|REGION as MACHINE

DREADER_PARAMS.Prefix             #'PREFIX'. S3 OBJECT prefix. Does ListObjectsV2()
                                  #New INPUT is response's OBJECTS.Contents OBJECT_ARR
                                  #Excludes proper FOLDERs, i.e. 'OBJECT' ends with delimiter (e.g. /) and has empty contents
                                  #See also S3 JOB_LAMBDA, as an alternative

DREADER_PARAMS.Key                #S3 'OBJECT'. Alternative to DREADER_PARAMS.Prefix, doing GetObject()
                                  #New INPUT is ARR items contained in OBJECT
DREADER.ReaderConfig              #DREADER_CONF
                                  #Only if DEADER_PARAMS.Key used
DREADER_CONF.MaxItems             #NUM[_DZEXPR] (def|max: 1e8). Only use first NUM items
DREADER_CONF.InputType            #'JSON', 'CSV' or 'MANIFEST'

DREADER_CONF.InputType 'JSON'     #OBJ_ARR
                                  #Max 8MB
                                  #Max 256KB after DSTATE_MAP.Item* applied

DREADER_CONF.InputType 'CSV'      #Values are always considered STRs
                                  #Same limits as JSON
DREADER_CONF.CSVHeaderLocation    #Whether OBJ keys are specified:
                                  #  - 'FIRST_ROW' (def): as first CSV row
                                  #  - 'GIVEN': with DREADER_CONF.CSVHeaders
                                  #OBJ keys max 10KB
DREADER_CONF.CSVHeaders           #'KEY'_ARR

DREADER_CONF.InputType 'MANIFEST' #S3 INVENTORY MANIFEST
                                  #New INPUT is INVENTORY_LINE_ARR
                                  #Max 10GB
                                  #Max 256KB after DSTATE_MAP.Item* applied

                                  ┌──────────────────────┐
                                  │   MAP S3 READ AUTH   │
                                  └──────────────────────┘

PACTION s3:ListBucket             #If DREADER_PARAMS.Prefix, must be allowed:
                                  #  - on MACHINE.roleArn
                                  #  - Resource BUCKET
                                  #  - COND_KEY s3:prefix 'PREFIX'

PACTION s3:GetObject              #If DREADER_PARAMS.Key, must be allowed:
                                  #  - on MACHINE.roleArn
                                  #  - Resource:
                                  #     - if JSON|CSV: OBJECT
                                  #     - if MANIFEST:
                                  #        - arn:aws:s3:::DEST_PREFIX/SOURCE_BUCKET/INVENTORY/YYYY-MM-DDTHH-MMZ/manifest.json
                                  #        - arn:aws:s3:::DEST_PREFIX/SOURCE_BUCKET/INVENTORY/data/*

                                  ┌──────────────────┐
                                  │   MAP S3 WRITE   │
                                  └──────────────────┘

DSTATE_MAP.ResultWriter           #DWRITER. Write each OUTPUT item as a JSON S3 OBJECT, using PutObject()
                                  #Order is:
                                 %#  - ResultWriter -> Output
                                 $#  - ResultWriter -> ResultSelector -> ResultPath -> OutputPath
                                  #On error, throws ERROR_CODE:
                                  #  - 'States.Permissions': auth-related
                                  #  - 'States.ResultWriterFailed': else

DWRITER.Resource                  #Always 'arn:aws:states:::s3:putObject'

DWRITER.Arguments                %
DWRITER.Parameters               $#DWRITER_PARAMS, as DOEXPR
DWRITER_PARAMS.Bucket             #S3 'BUCKET'
                                  #Must be in same ACCOUNT|REGION as MACHINE
DREADER_PARAMS.Prefix             #'PREFIX'. S3 OBJECT prefix
                                  #Where is it written to???

DWRITER_OUTPUT                    #Each OUTPUT item
                                  #No size limit initial total OUTPUT (can be > 256KB)
                                  #  - as opposed to total DWRITER_OUTPUTs, which is max 256KB
DWRITER_OUTPUT.statusCode         #STATUS_NUM
DWRITER_OUTPUT.inputReceived      #OBJ. OUTPUT item

                                  ┌───────────────────────┐
                                  │   MAP S3 WRITE AUTH   │
                                  └───────────────────────┘

PACTION s3:PutObject|GetObject    #Must be allowed:
 |ListMultipartUploadParts        #  - on MACHINE.roleArn
 |AbortMultipartUpload            #  - Resource BUCKET/PREFIX/*

                                  ┌──────────┐
                                  │   WAIT   │
                                  └──────────┘

DSTATE.Type                       #'Wait'. STATE is STATE_WAIT
                                  #Wait for a specific duration

DSTATE_WAIT.Timestamp             #'DATE'[_DZEXPR]
DSTATE_WAIT.Seconds               #NUM[_DZEXPR]. Alternative to Timestamp

AVAILABLE EVENT_TYPES ==>         #WaitStateEntered WaitStateExited WaitStateAborted

                                  ┌──────────┐
                                  │   TASK   │
                                  └──────────┘

DSTATE.Type                       #'Task'. STATE is STATE_TASK
                                  #On error, throws ERROR_CODE:
                                  #  - 'States.Permissions': auth-related
                                  #  - 'States.TaskFailed': else

DSTATE_TASK.Resource              #'ARN'. Available ones documented below

AVAILABLE EVENT_TYPES ==>         #TaskSubmitted TaskSubmitFailed TaskScheduled TaskStarted TaskStartFailed TaskSucceeded TaskTimedOut TaskFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPEs Task* (except TaskState*)
EVENT_INFO.resourceType           #STR
                                  #With same EVENT_TYPEs as EVENT_INFO.resource
EVENT_INFO.parameters             #STR
                                  #With EVENT_TYPE TaskScheduled
EVENT_INFO.region                 #STR
                                  #With EVENT_TYPE TaskScheduled

AVAILABLE EVENT_TYPES ==>         #TaskStateEntered TaskStateExited TaskStateAborted

                                  ┌───────────────┐
                                  │   TASK AUTH   │
                                  └───────────────┘

DSTATE_TASK.Credentials           #DCREDS, as DOEXPR
DCREDS.RoleArn                    #'ROLE_ARN' assumed by Resource

EVENT_INFO.taskCredentials.roleArn#'ROLE_ARN'
                                  #With EVENT_TYPEs LambdaFunctionScheduled and TaskScheduled

                                  ┌──────────────┐
                                  │   ACTIVITY   │
                                  └──────────────┘

CreateActivity()                  #Req: ACTIVITY
                                  #  - no activityArn
                                  #  - only one with tags
                                  #Res: ACTIVITY
                                  #  - no name, encryptionConfiguration
ListActivities()                  #Req: empty
                                  #Res: activities ACTIVITY_ARR
                                  #  - no encryptionConfiguration
DescribeActivity()                #Req: ACTIVITY
                                  #  - only activityArn
                                  #Res: ACTIVITY
DeleteActivity()                  #Req: ACTIVITY
                                  #  - only activityArn
                                  #Res: empty

ACTIVITY.activityArn              #'ACTIVITY_ARN'. 'arn:aws:states:REGION:ACCOUNT_ID:activity:ACTIVITY'
ACTIVITY.name                     #'ACTIVITY'
ACTIVITY.creationDate             #DATE_NUM

AVAILABLE EVENT_TYPES ==>         #ActivityScheduled ActivityScheduleFailed ActivityStarted ActivitySucceeded ActivityTimedOut ActivityFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPE ActivityScheduled
EVENT_INFO.workerName             #STR
                                  #With EVENT_TYPE ActivityStarted

                                  ┌───────────────────┐
                                  │   ACTIVITY TASK   │
                                  └───────────────────┘

DSTATE_TASK.Resource              #'TASK_ARN'

GetActivityTask()                 #Req: TASK_GET
                                  #Res: TASK
                                  #  - only one with input
SendTaskSuccess()                 #Req: TASK
                                  #  - only one with output
                                  #Res: empty
SendTaskFailure()                 #Req: TASK
                                  #  - only one with error, cause
                                  #Res: empty
SendTaskHeartbeat()               #Req: TASK
                                  #Res: empty

TASK.taskToken                    #'TASK_MID'
TASK_GET.activityArn              #
TASK_GET.workerName               #

                                  ┌────────────┐
                                  │   LAMBDA   │
                                  └────────────┘

DSTATE_TASK.Resource              #'FUNC_ARN': run Lambda FUNCTION, with INPUT|OUTPUT as REQ|RES

AVAILABLE EVENT_TYPES ==>         #LambdaFunctionScheduled LambdaFunctionScheduleFailed LambdaFunctionStarted
                                  #LambdaFunctionStartFailed LambdaFunctionSucceeded LambdaFunctionTimedOut LambdaFunctionFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPE LambdaFunctionScheduled

                                  ┌──────────┐
                                  │   HTTP   │
                                  └──────────┘

TEST_DATA.request                 #TEST_REQ
TEST_REQ.body                     #STR
TEST_REQ.headers                  #STR
TEST_REQ.method                   #STR
TEST_REQ.protocol                 #STR
TEST_REQ.url                      #STR

TEST_DATA.response                #TEST_RES
TEST_RES.body                     #STR
TEST_RES.headers                  #STR
TEST_RES.protocol                 #STR
TEST_RES.statusCode               #STR
TEST_RES.statusMessage            #STR

                                  ┌───────────────┐
                                  │   HTTP AUTH   │
                                  └───────────────┘

PACTION states:InvokeHTTPEndpoint #???

                                  ┌────────────────┐
                                  │   ENCRYPTION   │
                                  └────────────────┘

MACHINE.encryptionConfiguration   #ENCRYPT. Encrypts 'DMACHINE_JSON' and EVENTs at rest
ACTIVITY.encryptionConfiguration  #ENCRYPT

ENCRYPT.type                      #Either:
                                  #  - 'AWS_OWNED_KEY' (def): AWS managed KMS KEY
                                  #  - 'CUSTOMER_MANAGED_KMS_KEY': ENCRYPT.kmsKeyId
ENCRYPT.kmsKeyId                  #KMS 'KEY_ARN' or (if same ACCOUNT) 'KEY_MID'

ENCRYPT
 .kmsDataKeyReusePeriodSeconds    #NUM of secs (min 1m, def 5m, max 15m) to re-use KMS data key, for performance and cost

EXEC_GET.includedData             #STR
MACHINE_GET.includedData          #STR

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

MACHINE.loggingConfiguration      #MACHINE_LOGGING. Log EVENTs to CloudWatch Logs
MACHINE_LOGGING.destinations[0]
 .cloudWatchLogsLogGroup
 .logGroupArn                     #'LOG_GROUP_ARN'

MACHINE_LOGGING.level             #One of 'OFF' (def), 'ERROR', 'FATAL' (???) or 'ALL'

MACHINE_LOGGING
 .includeExecutionData            #Like EVENTS_REQ.includeExecutionData

                                  ┌─────────────┐
                                  │   TRACING   │
                                  └─────────────┘

MACHINE
 .tracingConfiguration.enabled    #BOOL (def: false). Enables X-Ray

EXEC.traceHeader                  #STR

                                  ┌─────────────┐
                                  │   BILLING   │
                                  └─────────────┘

EXEC.billingDetails               #EXEC_BILLING
EXEC_BILLING
 .billedDurationInMilliseconds    #NUM
EXEC_BILLING.billedMemoryUsedInMB #NUM

                                  ┌────────────────────┐
                                  │   QUERY LANGUAGE   │
                                  └────────────────────┘

DMACHINE.QueryLanguage            #'JSONPath' (def) or 'JSONata'
                                  #Prefer JSONata: simpler, more features, better maintained
                                  #Inherited by child MACHINEs
                                  #Only for top-level MACHINE
DSTATE.QueryLanguage              #'JSONPath|JSONata'. Override for a given STATE
                                  #Not inherited by child MACHINEs

AVAILABLE EVENT_TYPES ==>         #EvaluationFailed
EVENT_INFO.location               #STR
                                  #With EVENT_TYPE EvaluationFailed
EVENT_INFO.state                  #STR
                                  #With EVENT_TYPE EvaluationFailed

                                  ┌─────────────┐
                                  │   JSONATA   │
                                  └─────────────┘

NOTATION ==>                     %#Notation for JSONata-specific documentation

DSEXPR|DZEXPR|DFEXPR|DOEXPR      %#All mean the same thing: any value can be "{% ... %}" where ... is a JSONata query
                                 %#Substituted with its result
                                 %#On error, throws ERROR_CODE 'States.QueryEvaluationError'
                                 %#Does not error if no match, just substitute with undefined

$states.*                        %#Special DVARs, documented below
                                 %#Cannot be set
                                 %#Every query must start with either $states or $DVAR
                                 %#  - not with $$ nor implicit|explicit $
                                 %#     - e.g. $$.VAR, $.VAR or VAR
                                 %#  - but can use nested implicit|explicit $
                                 %#     - e.g. $states.input[VAR = true] or $states.input[$.VAR = true]

                                  ┌──────────────┐
                                  │   JSONPATH   │
                                  └──────────────┘

NOTATION ==>                     $#Notation for JSONPath-specific documentation

$...                             $#JSONPath (see its doc)
                                 $#Root value is INPUT (after transforming)
                                 $#Exception: root value is OUTPUT (after transforming) in *.Assign (except DSTATE_CHOICE|WAIT.Assign)
                                 $#Cannot use [(EXPR)] and [?(EXPR)]

DSEXPR                           $#"Path". '$...' or '$$...'
                                 $#Substituted with its result, which can be any JSON type
DZEXPR                           $#"Reference path". DSEXPR but result must be a single value
                                 $#Can only use .VAR [NUM]
                                 $#No * .. [...,...] [...:...:...]
VAL[_DZEXPR]                     $#Means VAL can be a DZEXPR, providing key is appended with 'Path'
                                 $#E.g. DSTATE_TASK.TimeoutSecondsPath NUM_DZEXPR

DFEXPR                           $#DSEXPR or 'DFUNC(...)'
DOEXPR                           $#"Payload template". OBJ where top|nested PROPs:
                                 $#  - value can be DFEXPR
                                 $#  - providing key is 'PROP.$' (which becomes 'PROP')

                                  ┌───────────────────────┐
                                  │   INTRISIC FUNCTION   │
                                  └───────────────────────┘

DFUNC([ARG[_DFEXPR],...])        $#"Intrinsic function"
                                 $#ARG can be '-quoted STR, NUM or null
                                 $#Must \-escape ' { } \
                                 $#On syntax error, throws ERROR_CODE 'States.IntrinsicFailure'

States.*                         $#Available DFUNCs, among the following

MathAdd(NUM, NUM2)->NUM3         $#NUM + NUM2

Format(STR, VAL,...)->STR        $#Replaces any {} with each VAL
                                 $#VAL must be STR|NUM|BOOL|null, not OBJ|ARR
StringSplit(STR, "CHAR")
 ->STR2_ARR                      $#STR.split("CHAR")

JsonMerge(OBJ, OBJ2, BOOL)->OBJ3 $#Merge. BOOL is whether deep

Array(VAL,...)->ARR              $#
ArrayRange(NUM, NUM2, NUM3)->ARR $#From NUM (included) to NUM2 (included) with step NUM3
                                 $#ARR max length 1e3
ArrayLength(ARR)->NUM            $#ARR.length
ArrayGetItem(ARR, NUM)->VAL      $#ARR[NUM]
ArrayContains(ARR, VAL)->BOOL    $#ARR.includes()
ArrayUnique(ARR)->ARR            $#[...new Set(ARR)]
ArrayPartition(ARR, NUM)
 ->ARR_ARR                       $#Chunks into sub-ARRs of length NUM

StringToJson('JSON')->VAL        $#JSON.parse()
JsonToString(DSEXPR)->'JSON'     $#JSON.stringify()
Base64Encode(STR)->'BASE64'      $#STR max 1e4 chars
Base64Decode('BASE64')->STR      $#STR max 1e4 chars

Hash(STR, 'ALGO')->'HASH'        $#ALGO can be 'MD5' or 'SHA-1|256|384|512'
                                 $#STR max 1e4 chars

MathRandom(INT, INT2)->INT3      $#From INT (included) to INT2 (included). Pseudo-random
UUID()->'UUIDv4'                 $#

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

TagResource()                     #Req: TAGS
                                  #Res: empty
ListTagsForResource()             #Req: TAGS
                                  #  - only resourceArn
                                  #Res: TAGS
                                  #  - no resourceArn
UntagResource()                   #Req: TAGS
                                  #  - tags -> tagKeys 'TAG'_ARR
                                  #Res: empty

TAGS.resourceArn                  #'MACHINE_ARN|ACTIVITY_ARN'
TAGS.tags
MACHINE|ACTIVITY.tags             #TAG_PAIRS

aws:ResourceTag/TAG               #Can apply to EXEC too
