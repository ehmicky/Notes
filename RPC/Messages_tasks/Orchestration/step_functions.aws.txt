
                                  ┏━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   STEP_FUNCTIONS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #2024-11-28

TODO:
  - https://states-language.net/spec.html
  - JSONata
     - including all references in https://states-language.net/spec.html
  - https://docs.aws.amazon.com/step-functions/latest/apireference/Welcome.html
  - new_services doc
  - CDK:
     - document which properties are supported by --hotswap
     - API Gateway:
        - StepFunctionsIntegration:
           - v1: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/lib/integrations/stepfunctions.ts
           - v2: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigatewayv2-integrations/lib/http/stepfunctions.ts
        - StepFunctionsRestApi: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/lib/stepfunctions-api.ts
        - https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-apigateway/README.md#aws-stepfunctions-backed-apis
  - SAM:
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
        - RESPROP Policies: document like AWS::Serverless::Function, i.e. just refer to SAM_POLICIES
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-statemachine.html
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-step-functions-in-sam.html
     - `aws cloudformation package` and `sam package` can be used with:
        - AWS::StepFunctions::StateMachine RESPROP DefinitionS3Location
        - AWS::Serverless::StateMachine RESPROP DefinitionUri
     - document that hot reloading is supported by `sam sync`
        - including part which documents that contents caching is done using STATE_MACHINE definition
     - move documentation about `sam remote invoke`
     - move documentation about AWS::Serverless::Connector
     - move POLICY_TEMPLATE doc from SAM transform doc
     - mention that SAM_POLICIES apply to AWS::Serverless::StateMachine RESPROP Policies too
     - see example of how to document this with AWS::Serverless::Function documentation in CloudWatch Logs
     - test locally using sam-translate binary
  - Infrastructure Composer
     - https://docs.aws.amazon.com/infrastructure-composer/latest/dg/using-composer-services-sf.html
     - https://docs.aws.amazon.com/infrastructure-composer/latest/dg/using-composer-external-files-new.html
     - connection from API Gateway API to Step Functions STATE_MACHINE
  - https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html
  - https://github.com/awslabs/statelint

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

PAGINATION ==>                    #Uses REQ.maxResults (def 100, max 1000) + REQ|RES.nextToken
                                  #ValidateStateMachineDefinition(): REQ.maxResults (def|max 100), no REQ|RES.nextToken, RES.truncated BOOL
                                  #No pagination: ListTagsForResource()

                                  ┌─────────────┐
                                  │   MACHINE   │
                                  └─────────────┘

CreateStateMachine()              #Req: MACHINE + NEW_VERSION
                                  #  - no creationDate, label, status
                                  #  - no stateMachineArn
                                  #  - only one with tags
                                  #Res: VERSION
                                  #  - no updateDate, revisionId
UpdateStateMachine()              #Req: MACHINE + NEW_VERSION
                                  #  - no creationDate, label, status
                                  #  - no name, type
                                  #Res: VERSION
                                  #  - no stateMachineArn, creationDate
ListStateMachines()               #Req: empty
                                  #Res: stateMachines MACHINE_ARR
                                  #  - only stateMachineArn, name, creationDate, type
DescribeStateMachine()            #Req:
                                  #  - MACHINE: only stateMachineArn
                                  #  - MACHINE_GET
                                  #Res:
                                  #  - MACHINE
                                  #  - VERSION: no stateMachineVersionArn, no updateDate
DescribeStateMachineForExecution()#Req:
                                  #  - EXEC: only executionArn
                                  #  - MACHINE_GET
                                  #Res:
                                  #  - MACHINE: no creationDate, status, type
                                  #  - VERSION: no stateMachineVersionArn, description
                                  #  - MAP_RUN: only mapRunArn
DeleteStateMachine()              #Req: MACHINE
                                  #  - only stateMachineArn
                                  #Res: empty

MACHINE.stateMachineArn           #'MACHINE_ARN'
MACHINE.name                      #'MACHINE'
MACHINE.creationDate              #DATE_NUM

MACHINE.status                    #STR

MACHINE.type                      #STR

MACHINE.label                     #STR

MACHINE.roleArn                   #'ROLE_ARN'

MACHINE.variableReferences.MVAR   #STR_ARR

                                  ┌─────────────┐
                                  │   VERSION   │
                                  └─────────────┘

PublishStateMachineVersion()      #Req: VERSION
                                  #  - no stateMachineVersionArn, *Date
                                  #  - only one with description, revisionId
                                  #Res: VERSION
                                  #  - only stateMachineVersionArn, creationDate
ListStateMachineVersions()        #Req: MACHINE
                                  #  - only stateMachineArn
                                  #Res: stateMachineVersions VERSION_ARR
                                  #  - only stateMachineVersionArn, creationDate
CreateStateMachine()
UpdateStateMachine()
DescribeStateMachine()            #Return VERSION too (see above)
DeleteStateMachineVersion()       #Req: VERSION
                                  #  - only stateMachineVersionArn
                                  #Res: empty

VERSION.stateMachineVersionArn    #'VERSION_ARN'
VERSION.stateMachineArn           #'MACHINE_ARN'
VERSION.description
NEW_VERSION.versionDescription    #STR
VERSION.creationDate              #DATE_NUM
VERSION.updateDate                #DATE_NUM

NEW_VERSION.publish               #BOOL

VERSION.revisionId                #STR

                                  ┌───────────┐
                                  │   ALIAS   │
                                  └───────────┘

CreateStateMachineAlias()         #Req: ALIAS
                                  #  - no stateMachineAliasArn, *Date
                                  #Res: ALIAS
                                  #  - only stateMachineAliasArn, creationDate
UpdateStateMachineAlias()         #Req: ALIAS
                                  #  - no name, *Date
                                  #Res: ALIAS
                                  #  - only updateDate
ListStateMachineAliases()         #Req: STATE_MACHINE
                                  #  - only stateMachineArn
                                  #Res: stateMachineAliases ALIAS_ARR
                                  #  - only stateMachineAliasArn, creationDate
DescribeStateMachineAlias()       #Req: ALIAS
                                  #  - only stateMachineAliasArn
                                  #Res: ALIAS
DeleteStateMachineAlias()         #Req: ALIAS
                                  #  - only stateMachineAliasArn
                                  #Res: empty

ALIAS.stateMachineAliasArn        #'ALIAS_ARN'
ALIAS.name                        #'ALIAS'
ALIAS.description                 #STR
ALIAS.creationDate                #DATE_NUM
ALIAS.updateDate                  #DATE_NUM

ALIAS.routingConfiguration        #ALIAS_ROUTING_ARR
ALIAS_ROUTING
 .stateMachineVersionArn          #'VERSION_ARN'
ALIAS_ROUTING.weight              #NUM

                                  ┌────────────────┐
                                  │   DEFINITION   │
                                  └────────────────┘

MACHINE.definition                #STR
MACHINE_GET.includedData          #STR

                                  ┌────────────────┐
                                  │   VALIDATION   │
                                  └────────────────┘

ValidateStateMachineDefinition()  #Req:
                                  #  - MACHINE: only definition|type
                                  #  - DIAGNOSTIC: only severity
                                  #Res: VALIDATE_RES

VALIDATE_RES.result               #'OK' or 'FAIL'
VALIDATE_RES.diagnostics          #DIAGNOSTIC_ARR
DIAGNOSTIC.code                   #'CODE'
DIAGNOSTIC.message                #'MESSAGE'
DIAGNOSTIC.severity               #'ERROR' (def) or 'WARNING'
DIAGNOSTIC.location               #STR

                                  ┌───────────────┐
                                  │   EXECUTION   │
                                  └───────────────┘

StartExecution()                  #Req: EXEC
                                  #  - only stateMachineArn, name, input, traceHeader
                                  #Res: EXEC
                                  #  - only executionArn, startDate
StartSyncExecution()              #Req:
                                  #  - EXEC: only stateMachineArn, name, input, traceHeader
                                  #  - EXEC_GET
                                  #Res: EXEC
                                  #  - no mapRunArn, redrive*, stateMachineVersionArn|stateMachineAliasArn
                                  #  - only one with billingDetails
ListExecutions()                  #Req: EXEC
                                  #  - only either stateMachineArn or mapRunArn
                                  #  - only status -> statusFilter
                                  #  - only one with redriveFilter
                                  #Res: executions EXEC_ARR
                                  #  - no cause, error, input*|output*, redriveStatus[Reason], traceHeader
                                  #  - only one with itemCount
DescribeExecution()               #Req:
                                  #  - EXEC: only executionArn
                                  #  - EXEC_GET
                                  #Res: EXEC
StopExecution()                   #Req: EXEC
                                  #  - only executionArn, cause, error
                                  #Res: EXEC
                                  #  - only stopDate

EXEC.executionArn                 #'EXEC_ARN'
EXEC.name                         #'EXEC'
EXEC.startDate                    #DATE_NUM
EXEC.stopDate                     #DATE_NUM

EXEC.stateMachineArn              #'MACHINE_ARN'
EXEC.stateMachineVersionArn       #'VERSION_ARN'
EXEC.stateMachineAliasArn         #'ALIAS_ARN'

EXEC.status                       #STR
EXEC.cause                        #STR
EXEC.error                        #STR

EXEC.input                        #STR
EXEC.inputDetails.included        #BOOL
EXEC.output                       #STR
EXEC.outputDetails.included       #BOOL

EXEC.traceHeader                  #STR

EXEC.billingDetails               #EXEC_BILLING
EXEC_BILLING
 .billedDurationInMilliseconds    #NUM
EXEC_BILLING.billedMemoryUsedInMB #NUM

EXEC_GET.includedData             #STR

AVAILABLE EVENT_TYPES ==>         #ExecutionStarted ExecutionSucceeded ExecutionAborted ExecutionTimedOut ExecutionFailed
EVENT_INFO.roleArn                #STR
                                  #With EVENT_TYPE ExecutionStarted
EVENT_INFO.stateMachineAliasArn   #STR
                                  #With EVENT_TYPE ExecutionStarted
EVENT_INFO.stateMachineVersionArn #STR
                                  #With EVENT_TYPE ExecutionStarted

                                  ┌─────────────┐
                                  │   REDRIVE   │
                                  └─────────────┘

RedriveExecution()                #Req: REDRIVE
                                  #Res: EXEC
                                  #  - only redriveDate

REDRIVE.executionArn              #'EXEC_ARN'
REDRIVE.clientToken               #STR

EXEC|MAP_RUN.redriveCount         #NUM
EXEC|MAP_RUN.redriveDate          #DATE_NUM
EXEC.redriveStatus                #STR
EXEC.redriveStatusReason          #STR
EXEC.redriveFilter                #STR

AVAILABLE EVENT_TYPES ==>         #ExecutionRedriven MapRunRedriven
EVENT_INFO.redriveCount           #NUM
                                  #With EVENT_TYPEs ExecutionRedriven and MapRunRedriven
                                  #Different descriptions in
                                  #https://docs.aws.amazon.com/step-functions/latest/apireference/API_ExecutionRedrivenEventDetails.html#StepFunctions-Type-ExecutionRedrivenEventDetails-redriveCount???
                                  #And
                                  #https://docs.aws.amazon.com/step-functions/latest/apireference/API_MapRunRedrivenEventDetails.html#StepFunctions-Type-MapRunRedrivenEventDetails-redriveCount???

                                  ┌────────────┐
                                  │   EVENTS   │
                                  └────────────┘

GetExecutionHistory()             #Req: EVENTS_REQ
                                  #Res: events EVENT_ARR

EVENTS_REQ.executionArn           #'EXEC_ARN'
EVENTS_REQ.includeExecutionData   #BOOL
EVENTS_REQ.reverseOrder           #BOOL

EVENT.id                          #EVENT_MID. Serial NUM, 1-indexed
EVENT.previousEventId             #EVENT_MID, if any
EVENT.timestamp                   #DATE_NUM

EVENT.type                        #'EVENT_TYPE' (PascalCase)
                                  #Available ones documented in this doc
EVENT.EVENT_TYPEEventDetails      #EVENT_TYPE-specific EVENT_INFO
                                  #EVENT_TYPE is camelCase
                                  #EVENT_TYPE *StateEntered|StateExited -> stateEntered|stateExited
                                  #undefined some EVENT_TYPEs

EVENT_INFO.input                  #'JSON'
                                  #Max 260KB
                                  #With EVENT_TYPEs:
                                  #  - *StateEntered
                                  #  - ActivityScheduled
                                  #  - ExecutionStarted
                                  #  - LambdaFunctionScheduled
EVENT_INFO.inputDetails.truncated #BOOL
                                  #With same EVENT_TYPEs as EVENT_INFO.input

EVENT_INFO.output                 #'JSON'
                                  #Max 260KB
                                  #With EVENT_TYPEs:
                                  #  - *StateExited
                                  #  - ActivitySucceeded
                                  #  - ExecutionSucceeded
                                  #  - LambdaFunctionSucceeded
                                  #  - TaskSubmitted, TaskSucceeded
EVENT_INFO.outputDetails.truncated#BOOL
                                  #With same EVENT_TYPEs as EVENT_INFO.output

EVENT_INFO.assignedVariables.STR  #STR
                                  #With EVENT_TYPE *StateExited
EVENT_INFO
 .assignedVariablesDetails        #BOOL
 .truncated                       #With EVENT_TYPE *StateExited

EVENT_INFO.error                  #STR
                                  #With EVENT_TYPEs:
                                  #  - *Failed (except MapIterationFailed, MapStateFailed, ParallelStateFailed)
                                  #  - *TimedOut
                                  #  - ExecutionAborted
EVENT_INFO.cause                  #STR
                                  #With same EVENT_TYPEs as EVENT_INFO.error

EVENT_INFO.timeoutInSeconds       #NUM
                                  #With EVENT_TYPEs *Scheduled

EVENT_INFO.heartbeatInSeconds     #NUM
                                  #With EVENT_TYPEs ActivityScheduled and TaskScheduled

EVENT_INFO.taskCredentials.roleArn#'ROLE_ARN'
                                  #With EVENT_TYPEs LambdaFunctionScheduled and TaskScheduled

                                  ┌──────────────┐
                                  │   ACTIVITY   │
                                  └──────────────┘

CreateActivity()                  #Req: ACTIVITY
                                  #  - no activityArn
                                  #  - only one with tags
                                  #Res: ACTIVITY
                                  #  - no name, encryptionConfiguration
ListActivities()                  #Req: empty
                                  #Res: activities ACTIVITY_ARR
                                  #  - no encryptionConfiguration
DescribeActivity()                #Req: ACTIVITY
                                  #  - only activityArn
                                  #Res: ACTIVITY
DeleteActivity()                  #Req: ACTIVITY
                                  #  - only activityArn
                                  #Res: empty

ACTIVITY.activityArn              #'ACTIVITY_ARN'
ACTIVITY.name                     #'ACTIVITY'
ACTIVITY.creationDate             #DATE_NUM

AVAILABLE EVENT_TYPES ==>         #ActivityScheduled ActivityScheduleFailed ActivityStarted ActivitySucceeded ActivityTimedOut ActivityFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPE ActivityScheduled
EVENT_INFO.workerName             #STR
                                  #With EVENT_TYPE ActivityStarted

                                  ┌──────────┐
                                  │   TASK   │
                                  └──────────┘

GetActivityTask()                 #Req: TASK_GET
                                  #Res: TASK
                                  #  - only one with input
SendTaskSuccess()                 #Req: TASK
                                  #  - only one with output
                                  #Res: empty
SendTaskFailure()                 #Req: TASK
                                  #  - only one with error, cause
                                  #Res: empty
SendTaskHeartbeat()               #Req: TASK
                                  #Res: empty

TASK.taskToken                    #'TASK_MID'
TASK_GET.activityArn              #
TASK_GET.workerName               #

TASK.input                        #STR
TASK.output                       #STR
TASK.error                        #STR
TASK.cause                        #STR

AVAILABLE EVENT_TYPES ==>         #TaskSubmitted TaskSubmitFailed TaskScheduled TaskStarted TaskStartFailed TaskSucceeded TaskTimedOut TaskFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPEs Task* (except TaskState*)
EVENT_INFO.resourceType           #STR
                                  #With same EVENT_TYPEs as EVENT_INFO.resource
EVENT_INFO.parameters             #STR
                                  #With EVENT_TYPE TaskScheduled
EVENT_INFO.region                 #STR
                                  #With EVENT_TYPE TaskScheduled

                                  ┌────────────────┐
                                  │   ENCRYPTION   │
                                  └────────────────┘

MACHINE|ACTIVITY
 .encryptionConfiguration         #ENCRYPT
ENCRYPT.type                      #'AWS_OWNED_KEY' or 'CUSTOMER_MANAGED_KMS_KEY'
ENCRYPT.kmsKeyId                  #KMS 'KEY_ID'
ENCRYPT
 .kmsDataKeyReusePeriodSeconds    #NUM

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

MACHINE
 .tracingConfiguration.enabled    #BOOL

MACHINE.loggingConfiguration      #MACHINE_LOGGING
MACHINE_LOGGING.destinations[*]
 .cloudWatchLogsLogGroup
 .logGroupArn                     #'LOG_GROUP_ARN'
MACHINE_LOGGING.level             #STR
MACHINE_LOGGING
 .includeExecutionData            #BOOL

                                  ┌─────────────┐
                                  │   MAP RUN   │
                                  └─────────────┘

UpdateMapRun()                    #Req: MAP_RUN
                                  #  - no *Date, status, executionArn, redrive*, *Counts
                                  #Res: empty
ListMapRuns()                     #Req: MAP_RUN
                                  #  - only executionArn
                                  #Res: mapRuns MAP_RUN_ARR
                                  #  - only mapRunArn, executionArn, startDate, stopDate
                                  #  - only one with stateMachineArn
DescribeMapRun()                  #Req: MAP_RUN
                                  #  - only mapRunArn
                                  #Res: MAP_RUN
DescribeStateMachineForExecution()#Also returns mapRunArn (see above)

MAP_RUN.mapRunArn                 #'MAP_RUN_ARN'
MAP_RUN.startDate                 #DATE_NUM
MAP_RUN.stopDate                  #DATE_NUM

MAP_RUN.status                    #STR

MAP_RUN.stateMachineArn           #'MACHINE_ARN'
MAP_RUN.executionArn              #'EXEC_ARN'
EXEC.mapRunArn                    #'MAP_RUN_ARN'
EXEC.itemCount                    #NUM

MAP_RUN.maxConcurrency            #NUM
MAP_RUN.toleratedFailureCount     #NUM
MAP_RUN.toleratedFailurePercentage#NUM

MAP_RUN.executionCounts           #MAP_COUNT
MAP_RUN.itemCounts                #MAP_COUNT
MAP_COUNT.aborted                 #NUM
MAP_COUNT.failed                  #NUM
MAP_COUNT.failuresNotRedrivable   #NUM
MAP_COUNT.pending                 #NUM
MAP_COUNT.pendingRedrive          #NUM
MAP_COUNT.resultsWritten          #NUM
MAP_COUNT.running                 #NUM
MAP_COUNT.succeeded               #NUM
MAP_COUNT.timedOut                #NUM
MAP_COUNT.total                   #NUM

AVAILABLE EVENT_TYPES ==>         #MapRunStarted MapRunSucceeded MapRunAborted MapRunFailed
EVENT_INFO.mapRunArn              #'MAP_RUN_ARN'
                                  #With EVENT_TYPEs MapRunStarted and MapRunRedriven

                                  ┌───────────────┐
                                  │   MAP STATE   │
                                  └───────────────┘

AVAILABLE EVENT_TYPES ==>         #MapStateEntered MapStateExited MapStateStarted MapStateSucceeded MapStateAborted MapStateFailed
EVENT_INFO.length                 #NUM
                                  #With EVENT_TYPE MapStateStarted

                                  ┌───────────────────┐
                                  │   MAP ITERATION   │
                                  └───────────────────┘

AVAILABLE EVENT_TYPES ==>         #MapIterationStarted MapIterationSucceeded MapIterationAborted MapIterationFailed
EVENT_INFO.index                  #NUM
                                  #With EVENT_TYPEs MapIteration*
EVENT_INFO.name                   #'STATE'
                                  #Max 80 chars, [:alnum:]-_
                                  #With EVENT_TYPEs MapIteration*, *StateEntered, *StateExited

                                  ┌───────────┐
                                  │   STATE   │
                                  └───────────┘

TestState()                       #Req: TEST_IN
                                  #Res: TEST_OUT

TEST_IN.definition                #STR
TEST_IN.input                     #STR
TEST_IN.revealSecrets             #BOOL
TEST_IN.roleArn                   #STR
TEST_IN.variables                 #STR

TEST_OUT.error                    #STR
TEST_OUT.cause                    #STR
TEST_OUT.nextState                #STR
TEST_OUT.output                   #STR
TEST_OUT.status                   #STR

TEST_IN.inspectionLevel           #STR
TEST_OUT.inspectionData           #TEST_DATA
TEST_DATA.afterArguments          #STR
TEST_DATA.afterInputPath          #STR
TEST_DATA.afterParameters         #STR
TEST_DATA.afterResultPath         #STR
TEST_DATA.afterResultSelector     #STR
TEST_DATA.input                   #STR
TEST_DATA.result                  #STR
TEST_DATA.variables               #STR

TEST_DATA.request                 #TEST_REQ
TEST_REQ.body                     #STR
TEST_REQ.headers                  #STR
TEST_REQ.method                   #STR
TEST_REQ.protocol                 #STR
TEST_REQ.url                      #STR

TEST_DATA.response                #TEST_RES
TEST_RES.body                     #STR
TEST_RES.headers                  #STR
TEST_RES.protocol                 #STR
TEST_RES.statusCode               #STR
TEST_RES.statusMessage            #STR

AVAILABLE EVENT_TYPES ==>         #TaskStateEntered TaskStateExited TaskStateAborted
                                  #SucceedStateEntered SucceedStateExited
                                  #PassStateEntered PassStateExited
                                  #ChoiceStateEntered ChoiceStateExited
                                  #FailStateEntered
                                  #ParallelStateEntered ParallelStateExited ParallelStateStarted ParallelStateSucceeded
                                  #ParallelStateAborted ParallelStateFailed
                                  #WaitStateEntered WaitStateExited WaitStateAborted

                                  ┌───────────────┐
                                  │   TRANSFORM   │
                                  └───────────────┘

AVAILABLE EVENT_TYPES ==>         #EvaluationFailed
EVENT_INFO.location               #STR
                                  #With EVENT_TYPE EvaluationFailed
EVENT_INFO.state                  #STR
                                  #With EVENT_TYPE EvaluationFailed

                                  ┌────────────┐
                                  │   LAMBDA   │
                                  └────────────┘

AVAILABLE EVENT_TYPES ==>         #LambdaFunctionScheduled LambdaFunctionScheduleFailed LambdaFunctionStarted
                                  #LambdaFunctionStartFailed LambdaFunctionSucceeded LambdaFunctionTimedOut LambdaFunctionFailed
EVENT_INFO.resource               #STR
                                  #With EVENT_TYPE LambdaFunctionScheduled

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

TagResource()                     #Req: TAGS
                                  #Res: empty
ListTagsForResource()             #Req: TAGS
                                  #  - only resourceArn
                                  #Res: TAGS
                                  #  - no resourceArn
UntagResource()                   #Req: TAGS
                                  #  - tags -> tagKeys 'TAG'_ARR
                                  #Res: empty

TAGS.resourceArn                  #'MACHINE_ARN|ACTIVITY_ARN'
TAGS.tags
MACHINE|ACTIVITY.tags             #TAG_PAIRS

                                  ┌────────────────┐
                                  │   DEFINITION   │
                                  └────────────────┘

DEFINITION                        #JSON
DEFINITION.Version                #Always '1.0' (def)
                                  #Only for top-level DEFINITION

DEFINITION|STATE.Comment          #STR. Description

DEFINITION.States.STATE           #STATE. Either a task or flow control
                                  #'STATE' name max 80 chars
STATE.Type                        #'STATE_TYPE'
STATE.*                           #STATE_TYPE-specific

DEFINITION.StartAt                #'STATE'. First state
STATE.Next                        #'STATE'. Next state
TRANSITION ==>                    #STATE|CHOICE.Next
STATE.End                         #BOOL (def: false). Whether last state
                                  #Difference with SUCCEED_STATE is that it does not end nested DEFINITIONs???
                                  #Not with CHOICE|SUCCEED|FAIL_STATE
TERMINAL STATE ==>                #SUCCEED_STATE, FAIL_STATE or STATE.End true (top-level???)

DEFINITION.TimeoutSeconds         #NUM (def: none). After NUMs, fail with ERROR 'States.Timeout'

STATE.Retry                       #RETRY_ARR
                                  #Only with TASK|PARALLEL|MAP_STATE
RETRY.ErrorEquals                 #'ERROR'_ARR
RETRY.IntervalSeconds             #NUM
RETRY.MaxAttempts                 #NUM
RETRY.BackoffRate                 #NUM
RETRY.JitterStrategy              #STR

STATE.Catch                       #CATCH_ARR
                                  #Only with TASK|PARALLEL|MAP_STATE
CATCH.ErrorEquals                 #'ERROR'_ARR
CATCH.Next|Assign|Output          #Like STATE.*

INPUT                             #'VAL_JSON' (def: '{}') passed to each STATE
                                  #INPUT to first STATE is set by caller, for a given EXEC
                                  #INPUT to other STATEs is OUTPUT of previous STATE
OUTPUT                            #'VAL_JSON' (def: INPUT) returned by each STATE
                                  #OUTPUT from final STATE is EXEC's output

CONTEXT                           #'OBJ_JSON' passed to each STATE
                                  #Set by caller, for a given EXEC

STATE.Assign.SVAR                 #VAL. "State machine variable"
                                  #Sets $VAR in any later STATE (not current STATE)
                                  #To use inside JSONPath|JSONata
                                  #Cannot use $VAR in STATE.ResultPath
                                  #Inner DEFINITIONs:
                                  #  - have their own SVAR scope
                                  #  - can use upper scope's SVARs, but not set them
                                  #  - cannot use lower|sibling scopes' SVARs
                                  #SVAR:
                                  #  - max 80 chars
                                  #  - ID_Continue: letters-like, numbers-like, _, diacretics, U+200C U+200D (zero-width space)
                                  #  - first char: ID_Start: letters-like
                                  #Not with SUCCEED|FAIL_STATE

DEFINITION|STATE.QueryLanguage    #'JSONPath' (def) or 'JSONata'
                                  #If MAP|PARALLEL_STATE, not inherited by child STATEs

JSONPATH ==>                      #
STATE.InputPath                   #Not with FAIL_STATE
STATE.OutputPath                  #Not with FAIL_STATE
STATE.Parameters                  #Only with TASK|PARALLEL|MAP|PASS_STATE
STATE.ResultPath                  #Only with TASK|PARALLEL|MAP|PASS_STATE
STATE.ResultSelector              #Only with TASK|PARALLEL|MAP_STATE
SVAR states                       #Always empty

$...                              #JSONPath (see its doc) using INPUT as input
$$...                             #JSONPath using CONTEXT as input
...[Path]                         #Means that the value can use JSONPath
                                  #But only if results in a single value:
                                  #  - only .VAR .NUM [(EXPR)]
                                  #  - no * .. [...,...] [...:...:...] [?(EXPR)] @

JSONATA ==>                       #
STATE.Output                      #Not with FAIL_STATE
STATE.Arguments                   #Only with TASK|PARALLEL|MAP_STATE
SVAR states                       #

STATE.Type                        #'Succeed'. End successfully

STATE.Type                        #'Fail'. End with failure

STATE.Type                        #'Choice'. Like a `switch` statement
CHOICE_STATE.Default              #'STATE'
CHOICE_STATE.Choices              #CHOICE_ARR
CHOICE.Next|Assign                #Like STATE.*

STATE.Type                        #'Pass'. Noop. I.e. only meant for setting SVARs, OUTPUT, parameters or result

STATE.Type                        #'Map'
MAP_STATE.ItemProcessor           #DEFINITION
MAP_STATE.MaxConcurrency          #NUM

STATE.Type                        #'Parallel'
PARALLEL_STATE.Branches           #DEFINITION_ARR

STATE.Type                        #'Wait'

STATE.Type                        #'Task'. Run a Lambda FUNCTION
                                  #REQ is INPUT
                                  #RES is OUTPUT
TASK_TYPE.Resource                #'FUNC_ARN'
