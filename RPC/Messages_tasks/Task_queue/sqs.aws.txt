
                                  ┏━━━━━━━━━┓
                                  ┃   SQS   ┃
                                  ┗━━━━━━━━━┛

To learn:
  - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
  - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcome.html
  - @aws-sdk/middleware-sdk-sqs
  - IAM:
     - root-task/SQSUnlockQueuePolicy: allows sqs:Set|GetQueueAttributes and sqs:ListQueues|GetQueueUrl
        - document like root-task/S3UnlockBucketPolicy in my S3 doc
  - SAM:
     - move documentation about `sam remote invoke`
     - move documentation about AWS::Serverless::Connector
     - move POLICY_TEMPLATE doc from SAM transform doc
  - search "SQS" in my docs

FORMAT ==>                        #Use either:
                                  #  - X-Amz-Target: AmazonSQS.ACTION [C], JSON request|response
                                  #  - REQ.Action 'ACTION', query string request (ARR uses VAR.NUM), XML response

RES.ResponseMetadata.RequestId    #REQ_ID

PAGINATION ==>                    #Uses REQ.MaxResults (def|max: 1e3) + REQ|RES.NextToken
                                  #Only REQ.MaxResults (def: 1, max: 10): ListMessageMoveTasks()
                                  #No pagination: ListQueueTags()

CreateQueue()                     #Req: QUEUE
                                  #  - no QueueUrl
                                  #  - only one with tags
                                  #  - no QUEUE_ATTRS: QueueArn, *Timestamp, Approximate*
                                  #Res: QUEUE
                                  #  - only QueueUrl
SetQueueAttributes()              #Req: QUEUE
                                  #  - only QueueUrl, Attributes
                                  #  - no QUEUE_ATTRS: QueueArn, *Timestamp, Approximate*, FifoQueue
                                  #Res: empty
GetQueueAttributes()              #Req: QUEUE
                                  #  - only QueueUrl, Attributes -> AttributeNames 'PROP'_ARR or ['All']
                                  #Res: QUEUE
                                  #  - only Attributes
GetQueueUrl()                     #Req: QUEUE
                                  #  - only QueueName
                                  #  - only one with QueueOwnerAWSAccountId
                                  #Res: QUEUE
                                  #  - only QueueUrl
ListQueues()                      #Req: QUEUE
                                  #  - only QueueName -> QueueNamePrefix
                                  #Res: QUEUE
                                  #  - only QueueUrl -> QueueUrls ARR
DeleteQueue()                     #Req: QUEUE
                                  #  - only QueueUrl
                                  #Res: empty

QUEUE                             #CreateQueue() is idempotent, if using exact same QUEUE.*
                                  #Deleting removes any MESSAGE
                                  #Updating|deleting take up to 1m
                                  #  - including QUEUE_ATTRS.Approximate*, which need that time to stabilize
QUEUE_ATTRS.QueueArn              #'QUEUE_ARN'. 'arn:aws:sqs:REGION:ACCOUNT_ID:QUEUE'
QUEUE.QueueUrl                    #QUEUE_URL. 'https://sqs.REGION.amazonaws.com/ACCOUNT_ID/QUEUE'
QUEUE.QueueName                   #'QUEUE'
                                  #Max 80 chars, [:alnum:]-_
QUEUE.QueueOwnerAWSAccountId      #'ACCOUNT_ID' (def: current)
QUEUE_ATTRS.CreatedTimestamp      #DATE_NUM
QUEUE_ATTRS.LastModifiedTimestamp #DATE_NUM
QUEUE.Attributes                  #QUEUE_ATTRS

QUEUE_ATTRS.MessageRetentionPeriod#NUM (in secs, min 1m, def 4d, max 14d)
                                  #Delete MESSAGEs older than NUMs
                                  #Updates impact existing MESSAGEs, and take up to 15m
QUEUE_ATTRS
 .ApproximateNumberOfMessages     #

QUEUE_ATTRS
 .ContentBasedDeduplication       #
QUEUE_ATTRS.DeduplicationScope    #

QUEUE_ATTRS.SqsManagedSseEnabled  #BOOL (def: true). "SSE-SQS". Encrypts MESSAGEs at rest using SQS-managed KMS key 'aws/sqs'
                                  #If true, SendMessage|ReceiveMessage() cannot be anonymous
QUEUE_ATTRS.KmsMasterKeyId        #KMS_ID (def: none). "SSE-KMS". Same but with custom key
QUEUE_ATTRS
 .KmsDataKeyReusePeriodSeconds    #

QUEUE_ATTRS.FifoQueue             #
                                  #'QUEUE' must end with '.fifo'
                                  #If not specified considered "standard QUEUE"
QUEUE_ATTRS.FifoThroughputLimit   #

ListDeadLetterSourceQueues()      #Req: QUEUE
                                  #  - only QueueUrl
                                  #Res: QUEUE
                                  #  - only QueueUrl -> QueueUrls ARR

QUEUE_ATTRS.RedrivePolicy         #'REDRIVE_POLICY_JSON'. Send failed MESSAGEs from this QUEUE to a dead-letter QUEUE2
REDRIVE_POLICY.deadLetterTargetArn#QUEUE2_ARN
                                  #Can be in different REGION|ACCOUNT, but less performant
REDRIVE_POLICY.maxReceiveCount    #NUM (def: 10) of MESSAGE failures before moving MESSAGE to dead-letter QUEUE2
                                  #I.e. max NUM of retries

QUEUE_ATTRS.RedriveAllowPolicy    #'REDRIVE_APOLICY_JSON'. Restrict which other QUEUE2 can use this QUEUE as dead-letter
                                  #Must be in same REGION + ACCOUNT, unless redrivePermission 'byQueue'
                                  #If QUEUE2 is [not] FIFO, so must be QUEUE
REDRIVE_APOLICY.redrivePermission #'allowAll' (def), 'denyAll' or 'byQueue'
REDRIVE_APOLICY.sourceQueueArns   #Specific 'QUEUE2_ARN'_ARR, when using redrivePermission 'byQueue'
                                  #Max 10 items

SendMessage()                     #Req: MESSAGE_SEND
                                  #  - no Id
                                  #Res: MESSAGE_SEND_RES
                                  #  - no Id
SendMessageBatch()                #Req: MESSAGES_SEND
                                  #Res: MESSAGES_RES
ReceiveMessage()                  #Req: MESSAGE_RCV
                                  #Res: Messages MESSAGE_RCV_RES_ARR
DeleteMessage()                   #Req: MESSAGE_RCV_RES
                                  #  - only ReceiptHandle, QueueUrl
                                  #Res: empty
DeleteMessageBatch()              #Req: MESSAGES_SEND
                                  #  - Entries[*]: only Id, ReceiptHandle
                                  #Res: MESSAGES_RES
                                  #  - Successful[*]: only Id
PurgeQueue()                      #Res: MESSAGE_SEND_RES
                                  #  - only QueueUrl
                                  #Res: empty

MESSAGES_SEND.Entries             #MESSAGE_SEND_ARR (no QueueUrl)
MESSAGE_SEND.Id                   #STR
MESSAGE[S]_SEND|MESSAGE_RCV
 .QueueUrl                        #'QUEUE_URL'

MESSAGE_SEND.MessageBody
MESSAGE_RCV_RES.Body              #STR
QUEUE_ATTRS.MaximumMessageSize    #NUM (in bytes, min 1KB, def|max 256KB)
                                  #Max size of MESSAGE_SEND.MessageBody

MESSAGE_SEND
 .MessageDeduplicationId          #STR
MESSAGE_SEND.MessageGroupId       STR

MESSAGE_RCV.MessageAttributeNames #'MESSAGE_ATTR_KEY'_ARR
MESSAGE_RCV
 .MessageSystemAttributeNames     #'MESSAGE_ATTR_KEY'_ARR
MESSAGE_SEND|MESSAGE_RCV_RES
 .MessageAttributes
 .MESSAGE_ATTR_KEY
MESSAGE_SEND
 .MessageSystemAttributes
 .MESSAGE_ATTR_KEY                #MESSAGE_ATTR
MESSAGE_ATTR.BinaryListValues     #BLOB_ARR
MESSAGE_ATTR.BinaryValue          #BLOB
MESSAGE_ATTR.DataType             #STR
MESSAGE_ATTR.StringListValues     #STR_ARR
MESSAGE_ATTR.StringValue          #STR

MESSAGE_RCV.Attributes.KEY        #STR

MESSAGES_RES.Successful           #MESSAGE_SEND_RES_ARR
MESSAGE_SEND_RES.Id               #STR
MESSAGE_SEND_RES.MD5OfMessageBody
MESSAGE_RCV_RES.MD5OfBody         #STR
MESSAGE_SEND_RES|MESSAGE_RCV_RES
 .MD5OfMessageAttributes          #STR
MESSAGE_SEND_RES
 .MD5OfMessageSystemAttributes    #STR
MESSAGE_SEND_RES|MESSAGE_RCV_RES
 .MessageId                       #STR
MESSAGE_SEND_RES.SequenceNumber   #STR
MESSAGE_RCV_RES.ReceiptHandle     #STR

MESSAGES_RES.Failed               #MESSAGE_FAILURE_ARR
MESSAGE_FAILURE.Id                #STR
MESSAGE_FAILURE.Code              #STR
MESSAGE_FAILURE.Message           #STR
MESSAGE_FAILURE.SenderFault       #BOOL

MESSAGE_RCV.MaxNumberOfMessages   #NUM
MESSAGE_RCV
 .ReceiveRequestAttemptId         #STR

QUEUE_ATTRS
 .ReceiveMessageWaitTimeSeconds   #NUM (in secs, def 0, max 20)
MESSAGE_RCV.WaitTimeSeconds       #If no MESSAGE available, wait up to NUMs before returning

ChangeMessageVisibility()         #Req: MESSAGE_RCV
                                  #  - only QueueUrl, ReceiptHandle, VisibilityTimeout
                                  #Res: empty
ChangeMessageVisibilityBatch()    #Req: MESSAGES_SEND
                                  #  - Entries[*]: only Id, ReceiptHandle, VisibilityTimeout
                                  #Res: MESSAGES_RES
                                  #  - Successful[*]: only Id

QUEUE_ATTRS|MESSAGE_SEND          #NUM (in secs, def: 0, max: 15m)
 .DelaySeconds                    #Period after MESSAGE sending when MESSAGE cannot be received
                                  #Not with FIFO QUEUEs
QUEUE_ATTRS.Approximate
 NumberOfMessagesDelayed          #

QUEUE_ATTRS|MESSAGE_RCV           #Max NUM (min 0, def 30s, max 12h) of secs for consumers to process a MESSAGE
 .VisibilityTimeout               #Period starts when MESSAGE is received
                                  #During that time, MESSAGE cannot be received again
                                  #  - i.e. if too low, risk of multiple consumers receiving same MESSAGE
                                  #Once consumed, MESSAGE must either be deleted, or its VisibilityTimeout increased
                                  #Else, MESSAGE reception is considered failed
                                  #  - i.e. if too high, slows down retrying failed consumption

QUEUE_ATTRS.Approximate
 NumberOfMessagesNotVisible       #

StartMessageMoveTask()            #Req: MOVE
                                  #  - only SourceArn, DestinationArn, MaxNumberOfMessagesPerSecond
                                  #Res: MOVE
                                  #  - only TaskHandle
ListMessageMoveTasks()            #Req: MOVE
                                  #  - only SourceArn
                                  #Res: Results MOVE_ARR
CancelMessageMoveTask()           #Req: MOVE
                                  #  - only TaskHandle
                                  #Res: MOVE
                                  #  - only ApproximateNumberOfMessagesMoved

MOVE.TaskHandle                   #'MOVE_MID'
MOVE.SourceArn                    #'QUEUE_ARN'
MOVE.DestinationArn               #'QUEUE2_ARN'
MOVE.StartedTimestamp             #DATE_NUM

MOVE.Status                       #STR
MOVE.FailureReason                #STR

MOVE.MaxNumberOfMessagesPerSecond #NUM
MOVE
 .ApproximateNumberOfMessagesMoved#NUM
MOVE
.ApproximateNumberOfMessagesToMove#NUM

AddPermission()                   #Req: PERMISSION
                                  #Res: empty
RemovePermission()                #Req: PERMISSION
                                  #  - only QueueUrl, Label
                                  #Res: empty

QUEUE_ATTRS.Policy                #IAM 'POLICY_DOC'

PERMISSION                        #Cross-ACCOUNT resource-level permissions on a QUEUE
PERMISSION.Label                  #'PERMISSION' name
PERMISSION.QueueUrl               #'QUEUE_URL'
PERMISSION.Actions                #'PACTION'_ARR. Only for:
                                  #  - *Message* (except *MessageMoveTask)
                                  #  - PurgeQueue
                                  #  - GetQueue*
                                  #  - ListDeadLetterSourceQueues
                                  #No 'PACTIONBatch': included in 'PACTION'
PERMISSION.AWSAccountIds          #'ACCOUNT_ID'_ARR

PACTION AddPermission
 |RemovePermission                #Do not require PACTION SetQueueAttributes, even though they set QUEUE_ATTRS.Policy

TagQueue()                        #Req: QUEUE_TAGS
                                  #Res: empty
ListQueueTags()                   #Req: QUEUE_TAGS
                                  #  - only QueueUrl
                                  #Res: QUEUE_TAGS
                                  #  - only Tags
UntagQueue()                      #Req: QUEUE_TAGS
                                  #  - Tags OBJ -> TagKeys STR_ARR
                                  #Res: empty

QUEUE_TAGS.QueueUrl               #'QUEUE_URL'
QUEUE.tags
QUEUE_TAGS.Tags                   #TAGS OBJ
