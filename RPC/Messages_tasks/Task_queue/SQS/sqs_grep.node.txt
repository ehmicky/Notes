
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   SQS_GREP   ┃
                                  ┗━━━━━━━━━━━━━━┛

VERSION ==>                       #1.18.2

SUMMARY ==>                       #Scans every MESSAGE in the QUEUE
                                  #For each MESSAGE, can output, copy, delete, move, publish to SNS
                                  #Can filter and transform them
                                  #Can interrupt manually, by time, or NUM of MESSAGEs

                                  ┌─────────┐
                                  │   CLI   │
                                  └─────────┘

sqs-grep                          #
--OPT                             #OPTS.* below
--inputCredentials|i              #BOOL (def: false). Sets OPTS.secretAccessKey|accessKeyId via stdin prompt

                                  ┌──────────────────┐
                                  │   PROGRAMMATIC   │
                                  └──────────────────┘

new SqsGrep(OPTS)                 #SGREP

SGREP.options                     #OPTS

SGREP.run()->>SGREP_RES           #Scans the whole QUEUE by repeating ReceiveMessage()
                                  #Uses MESSAGE:
                                  #  - MaxNumberOfMessages 10
                                  #  - not WaitTimeSeconds|MessageSystemAttributeNames|ReceiveRequestAttemptId
SGREP[_RES].qtyScanned            #NUM of MESSAGEs received
                                  #Also printed in logs
SGREP[_RES].qtyMatched            #NUM of MESSAGEs matched
                                  #Also printed in logs

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

OPTS.secretAccessKey
OPTS.accessKeyId
OPTS.sessionToken                 #COPTS.* (def: use SDK's default)

OPTS.region|r                     #COPTS.region (def: 'us-east-1')
OPTS.endpointUrl                  #COPTS.endpoint
OPTS.maxRetries                   #NUM (def: 3). COPTS.maxAttempts

SGREP|OPTS.sqs|sns                #SQS|SNS CLIENT (def: automatically used)
                                  #If set, cannot set OPTS.secretAccessKey|accessKeyId|sessionToken|region|endpointUrl|maxRetries|verbose
                                  #Not with CLI

                                  ┌───────────┐
                                  │   INPUT   │
                                  └───────────┘

'QUEUE'                           #In OPTS.queue|moveTo|copyTo, either:
                                  #  - 'QUEUE_URL'
                                  #  - 'QUEUE' name: calls GetQueueUrl()
                                  #Always calls GetQueueAttributes()

OPTS.queue|q                      #'QUEUE'

OPTS.inputFile                    #'PATH.json' with newline-separated MESSAGE_RES
                                  #If set, does not use OPTS.queue nor calls ReceiveMessage()
                                  #Can use OPTS.outputFile + OPTS.full to produce it, i.e. to cache

                                  ┌────────────┐
                                  │   OUTPUT   │
                                  └────────────┘

OPTS.outputFile|o                 #'PATH.json' with each 'MESSAGE_BODY', newline-separated

OPTS.full|f                       #BOOL (def: false). Makes each line in OPTS.outputFile be MESSAGE_RES instead (only Body|Attributes|MessageAttributes)

OPTS.silent|s                     #BOOL (def: false). Make OPTS.outputFile an noop

SGREP|OPTS.log                    #FUNC(STR) (def: console.log). Progress|info logs
                                  #Not with CLI
OPTS.verbose                      #BOOL (def: false). Passes OPTS.log to COPTS.logger, i.e. logs API calls

                                  ┌──────────┐
                                  │   STOP   │
                                  └──────────┘

OPTS.maxMessages|m                #NUM (def: 0). Stops when matching NUM MESSAGEs

OPTS.emptyReceives|e              #NUM (def: 5). Stops when NUM consecutive ReceiveMessage() return 0 MESSAGEs

OPTS.timeout|t                    #NUM (in secs, def: 1m). Stops when reaching timeout
                                  #MESSAGE.VisibilityTimeout is also set according to it
                                  #Cannot be 0

SGREP.interrupt()                 #Manually stops SGREP.run()
                                  #With CLI, called on SIGINT

                                  ┌──────────────┐
                                  │   THROTTLE   │
                                  └──────────────┘

OPTS.wait|w                       #NUM (def: 0) of secs to wait each time ReceiveMessage() returns 0 MESSAGEs

OPTS.maxTPS                       #NUM (def: 0, i.e. no limits). Throttles max NUM matched MESSAGEs per second

OPTS.parallel|j                   #NUM (def: 1) of parallel API calls at once

                                  ┌────────────┐
                                  │   FILTER   │
                                  └────────────┘

OPTS.all                          #BOOL (def: false). If true, no filters
                                  #Must be true if no OPTS.body|attribute

OPTS.body|b                       #'REGEXP'. Filter by 'MESSAGE_BODY'

OPTS.attribute|a                  #OBJ_ARR: attr 'MESSAGE_ATTR', regexp REGEXP
                                  #Filter by any of those MESSAGE_ATTRs
                                  #Not with ATTR_VALUE.DataType 'Binary'
                                  #In CLI: multiple 'MESSAGE_ATTR=REGEXP'

OPTS.negate|n                     #BOOL (def: false). Inverts OPTS.body|attribute

                                  ┌───────────────┐
                                  │   TRANSFORM   │
                                  └───────────────┘

OPTS.scriptFile                   #'PATH.js', loaded with require(), exporting EXPORT

EXPORT.preProcessMessage          #FUNC(MESSAGE_RES)->> on every received MESSAGE
                                  #Can modify MESSAGE_RES.*
                                  #`this` is SGREP
EXPORT.preProcessMatchedMessage   #Same but on every matched MESSAGE

                                  ┌────────────┐
                                  │   ACTION   │
                                  └────────────┘

OPTS.copyTo                       #'QUEUE2' (def: none). Copy matched MESSAGEs to another 'QUEUE2' by calling SendMessage()
                                  #Sets default for MESSAGE_GROUP_ID (def: 'fifo') and MESSAGE_DID (def: 'MESSAGE_MID')
                                  #Keeps MESSAGE_BODY, MESSAGE_ATTRS, MESSAGE_GROUP_ID, MESSAGE_DID
                                  #Does not keep other SYS_ATTRS

OPTS.delete                       #BOOL (def: false). Delete matched MESSAGEs by calling DeleteMessage()

OPTS.moveTo                       #'QUEUE2' (def: none). Like OPTS.copyTo + OPTS.delete
OPTS.redrive                      #BOOL (def: false). Same as OPTS.moveTo SOURCE_QUEUE
                                  #I.e. OPTS.queue must be a DLQ
                                  #Uses ListDeadLetterSourceQueues()

OPTS.stripAttributes              #BOOL. If false (def), keeps MESSAGE_ATTRS with OPTS.copyTo|moveTo|publishTo|republish

                                  ┌─────────┐
                                  │   SNS   │
                                  └─────────┘

OPTS.publishTo                    #'TOPIC_ARN' (def: none). Copy to SNS using Publish()
                                  #Keeps MESSAGE_BODY, MESSAGE_ATTRS
                                  #Does not set MessageGroupId, MessageStructure, PhoneNumber, Subject, TargetArn
                                  #If MESSAGE was sent from a SNS SUB to SQS:
                                  #  - re-send the original SNS MESSAGE_BODY|MESSAGE_ATTRS
                                  #  - i.e. the one wrapped inside the SQS MESSAGE_BODY

OPTS.republish                    #BOOL (def: false). Same but MESSAGE must have been sent from a SNS SUB to SQS
                                  #Other MESSAGEs are ignored
