
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   SQS_CONSUMER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - Lamdba EVENT_SOURCE for SQS (preferred)
                                  #     - for serverless
                                  #     - processes multiple ReceiveMessage() at once
                                  #     - basic filtering
                                  #     - partial batch
                                  #     - CloudWatch METRICs
                                  #  - sqs-consumer (preferred if long-running instances)
                                  #     - for long-running instances
                                  #     - processes one ReceiveMessage() at a time
                                  #     - advanced filtering
                                  #     - partial batch

VERSION ==>                       #11.5.1-canary.1

                                  ┌──────────┐
                                  │   INIT   │
                                  └──────────┘

Consumer.create(OPTS)->CONSUMER   #Is an EVENTEMITTER

CONSUMER.updateOption('VAR', VAL) #Sets OPTS.VAR = VAL
CONSUMER.on('option_updated',
 FUNC('VAR', VAL))                #

OPTS.sqs                          #SQS CLIENT (def: created)
OPTS.*                            #COPTS. Only used with the automatically created|default CLIENT

DEBUG=sqs-consumer                #Logs events, lifecycle (start|poll|stop), auth ERRORs, MESSAGEs deletes

                                  ┌───────────┐
                                  │   START   │
                                  └───────────┘

CONSUMER.start()                  #Repeatedly calls ReceiveMessage()
CONSUMER.on('started', FUNC())    #

OPTS.pollingWaitTimeMs            #NUM (in ms, def: 0). How long to wait after ReceiveMessage() ends to call it again

CONSUMER.status()->OBJ            #
OBJ.isPolling                     #BOOL. Whether some API call or OPTS.*Callback|handleMessage[Batch]() is ongoing
                                  #As opposed to being in-between calls, due to OPTS.pollingWaitTimeMs|authenticationErrorTimeout
OBJ.isRunning                     #BOOL. Based on CONSUMER.start|stop()

                                  ┌──────────┐
                                  │   STOP   │
                                  └──────────┘

CONSUMER.stop()                   #
CONSUMER.on('stopped', FUNC())    #On CONSUMER.stop() end

OPTS.pollingCompleteWaitTimeMs    #NUM. Unless 0 (def), make CONSUMER.stop() wait for any ongoing API call or OPTS.*Callback|handleMessage[Batch]()
                                  #Times out after NUMms
CONSUMER.on('waiting_for_polling_
 to_complete', FUNC())            #On OPTS.pollingCompleteWaitTimeMs check, every second
CONSUMER.on('waiting_for_polling_
 to_complete_timeout_exceeded',
 FUNC())                          #On OPTS.pollingCompleteWaitTimeMs timeout

CONSUMER.abortController          #ABORT_CONTROLLER automatically created
                                  #Passed to SOPTS.abortSignal for every API call
OPTS.abort                        #BOOL (def: false). ABORT_CONTROLLER.abort() on CONSUMER.stop()
CONSUMER.on('aborted', FUNC())    #On CONSUMER.stop() start, only if OPTS.abort true

                                  ┌─────────────┐
                                  │   RECEIVE   │
                                  └─────────────┘

OPTS.queueUrl                     #'QUEUE_URL'
CONSUMER
 .on(..., FUNC(..., 'QUEUE_URL')) #For all events

OPTS.*                            #MESSAGE_RCV.* except:
                                  #  - no ReceiveRequestAttemptId
                                  #  - MaxNumberOfMessages (def: 10) -> batchSize (def: 1)
                                  #  - WaitTimeSeconds (def: 0) -> waitTimeSeconds (def: 20)
                                  #  - camelcase'd

OPTS.preReceiveMessageCallback    #FUNC()[->>] called before each ReceiveMessage()
OPTS.postReceiveMessageCallback   #FUNC()[->>] called after each ReceiveMessage()

CONSUMER.on('message_received',
 FUNC(MESSAGE_RCV_RES))           #After each MESSAGE from ReceiveMessage()
CONSUMER.on
 ('response_processed', FUNC())   #After all MESSAGEs have been processed
CONSUMER.on('empty', FUNC())      #After each ReceiveMessage() with no MESSAGEs

OPTS.suppressFifoWarning          #BOOL. If false (def), prints warning if QUEUE is FIFO

                                  ┌─────────────┐
                                  │   PROCESS   │
                                  └─────────────┘

OPTS.handleMessage                #FUNC(MESSAGE_RCV_RES)[->>MESSAGE_RCV_RES] called with each MESSAGE from ReceiveMessage()
                                  #Each batch returned by ReceiveMessage() in parallel
                                  #Con: additional API calls cost

OPTS.handleMessageBatch           #FUNC(MESSAGE_RCV_RES_ARR)[->>MESSAGE_RCV_RES_ARR] called after ReceiveMessage()
                                  #Only if >=1 MESSAGEs
                                  #Cons:
                                  #  - cannot use OPTS.handleMessageTimeout
                                  #  - cannot use OPTS.terminateVisibilityTimeout for individual MESSAGE failure,
                                  #    since should omit from returned MESSAGE_RCV_RES_ARR instead

OPTS.handleMessageTimeout         #NUM (def: none). Timeout for OPTS.handleMessage()->>

                                  ┌─────────────┐
                                  │   SUCCESS   │
                                  └─────────────┘

OPTS.shouldDeleteMessages         #BOOL. If true (def), calls DeleteMessage() after every successful OPTS.handleMessage()
                                  #If OPTS.handleMessageBatch, uses DeleteMessageBatch() instead

OPTS.alwaysAcknowledge            #BOOL. If false (def):
                                  #  - if OPTS.handleMessage() returns empty OBJ: no DeleteMessage()
                                  #  - if OPTS.handleMessageBatch() returns ARR: DeleteMessage() only on those
                                  #I.e. if false, like "partial batch" of Lambda EVENT_SOURCE

CONSUMER.on('message_processed',
 FUNC(MESSAGE_RCV_RES))           #After each MESSAGE deleted by DeleteMessage[Batch]()

                                  ┌────────────────┐
                                  │   VISIBILITY   │
                                  └────────────────┘

OPTS.heartbeatInterval            #NUM (def: none)
                                  #Calls ChangeMessageVisibility() every NUM secs, while OPTS.handleMessage() and DeleteMessage() are running
                                  #If OPTS.handleMessageBatch, uses ChangeMessageVisibilityBatch() instead
                                  #Uses same VisibilityTimeout as ReceiveMessage()
                                  #NUM must be < VisibilityTimeout

OPTS.terminateVisibilityTimeout   #false (def), true (same as 0) or NUM[(MESSAGE_RCV_RES)]
                                  #Calls ChangeMessageVisibility[Batch]() with VisibilityTimeout NUM on any exception from
                                  #OPTS.handleMessage[Batch](), OPTS.handleMessageTimeout or DeleteMessage[Batch]()
                                  #I.e. notifies MESSAGE failure

                                  ┌───────────┐
                                  │   ERROR   │
                                  └───────────┘

OPTS.authenticationErrorTimeout   #NUM (def: 10s). On network error, auth error, throttling or QUEUE not existing yet,
                                  #wait NUMms before calling ReceiveMessage() again

ERRORS ==>                        #Do not propagate exceptions nor call CONSUMER.stop()
                                  #Instead, just emit following events

CONSUMER.on
 ('error', FUNC(SQS_ERROR))       #On ReceiveMessage() AWS_ERROR or OPTS.*Callback exception
CONSUMER.on('error',
 FUNC(SQS_ERROR, MESSAGE_RCV_RES))#On DeleteMessage[Batch]|ChangeVisibilityTimeout[Batch]() AWS_ERROR

SQS_ERROR.name                    #'SQSError'
SQS_ERROR.time                    #Current DATE
SQS_ERROR.code                    #AWS_ERROR.name
SQS_ERROR.statusCode              #METADATA.httpStatusCode
SQS_ERROR.service                 #AWS_ERROR.$service
SQS_ERROR.fault                   #AWS_ERROR.$fault
SQS_ERROR.retryable               #AWS_ERROR.$retryable.throttling
SQS_ERROR.queueUrl                #'QUEUE_URL'
SQS_ERROR.messageIds              #'MESSAGE_MID'_ARR

OPTS.extendedAWSErrors            #BOOL. If false (def), no SQS_ERROR.response|metadata
SQS_ERROR.response                #AWS_ERROR.$response
SQS_ERROR.metadata                #AWS_ERROR.$metadata

CONSUMER.on('processing_error',
 FUNC(ERROR, MESSAGE_RCV_RES))    #On OPTS.handleMessage[Batch]() exception
ERROR.messageIds                  #'MESSAGE_MID'_ARR

CONSUMER.on('timeout_error',
 FUNC(TIMEOUT_ERROR,
 MESSAGE_RCV_RES))                #On OPTS.handleMessageTimeout
TIMEOUT_ERROR.messageIds          #'MESSAGE_MID'_ARR
