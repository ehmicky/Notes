
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   ORCHESTRATOR   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

VERSION ==>                     #Node module (0.3.3)
                                #Runs several FUNC() at once, and manage FUNC() depending on others.

new ORCHESTRATOR()              #Returns an ORCHEST
ORCHEST.add(TASK_STR            #Creates a TASK, depending on TASK2
[, TASK2_STR_ARR], FUNC())      #FUNC() can be async by:
                                #  - passing a callback FUNC2() as argument
                                #  - returning a PROMISE (e.g. Q.defer().promise) or a STREAM (wait for end event)
ORCHEST.start(TASK_STR[_ARR]... #Runs TASK
[, FUNC(ERROR)])                #Each TASK and dependencies will only be run once. To run twice, call ORCHEST.start() again
                                #in FUNC()
ORCHEST.stop()                  #

ORCHEST.hasTask(TASK_STR)       #
ORCHEST.on(EVENT, FUNC(OBJ))    #Events are:
                                #  - [task_]start|stop|err
                                #  - task_not_found
                                #  - task_recursion: recursive dependencies
                                #OBJ has members message STR, task TASK_STR, err ERROR and (stop only) duration UINT
ORCHEST.onAll(FUNC(OBJ))        #
