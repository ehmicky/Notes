
                                  ┏━━━━━━━━━┓
                                  ┃   SNS   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #2024-09-24

TODO:
  - CDK
     - https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/aws-sns
     - https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/aws-sns-subscriptions
     - https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-lambda-event-sources/lib/sns.ts
     - see new_services doc
  - Logging:
     - logging example at bottom: https://docs.aws.amazon.com/sns/latest/dg/sns-message-data-protection-operations.html#statement-operation-json-properties-deny
  - https://github.com/aws/aws-js-sns-message-validator
     - https://github.com/aws/aws-php-sns-message-validator
  - SAM:
     - https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sns.html
     - see example of how to document this with AWS::Serverless::Function documentation in CloudWatch Logs
     - test locally using sam-translate binary
  - https://github.com/Admiral-Piett/goaws
     - see current doc of `goaws`, moving the SNS-specific part at the bottom
     - see https://github.com/Admiral-Piett/goaws README for SNS
  - https://docs.aws.amazon.com/sns/latest/dg/welcome.html
     - already done:
        - Message delivery:
           - Raw message delivery
           - Message delivery retries
        - Message data protection
        - Security > Logging and monitoring
  - https://aws.amazon.com/sns/faqs
  - check sns_backup.txt in Desktop
  - https://aws.amazon.com/sns/pricing
  - search projects on GitHub
  - add summary

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

NAME ==>                          #Simple Notification Service

SERVICE_DOMAIN                    #sns.amazonaws.com

SVERSION                          #'2010-03-31'

FORMAT ==>                        #Request: query parameters (ARR uses VAR.NUM)
                                  #Response: XML
                                  #Uses REQ.Action|Version

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Uses REQ|RES.NextToken
                                  #Uses REQ.MaxResults only with:
                                  #  - ListOriginationNumbers() (def|max 30)
                                  #  - ListSMSSandboxPhoneNumbers() (def|max 100)
                                  #No pagination: ListTagsForResource()
                                  #Others: page size always 100

THROTTLING ==>                    #3000|900|150|30/s (REGION-specific, soft): *Topic*(), ConfirmSubscription(),
                                  # *SubscriptionAttributes(), GetDataProtectionPolicy(), *Platform|Endpoint*()
                                  #100/s: [Un]Subscribe()
                                  #50/s: CheckIfPhoneNumberIsOptedOut()
                                  #30/s: ListTopics(), ListSubscriptions[ByTopic](), ListEndpointsByPlatformApplication()
                                  #20/s: GetSMSAttributes(), OptInPhoneNumber()
                                  #15/s: ListPlatformApplications()
                                  #10/s: *Permission*(), *Tag*(), ListPhoneNumbersOptedOut(), GetSMSSandboxAccountStatus()
                                  #1/s (soft): PutDataProtectionPolicy()
                                  #1/s: *SMSSandboxPhoneNumber*(), SetSMSAttributes(), ListOriginationNumbers()

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AmazonSNSFullAccess               #AWS managed POLICY. Allows all 'sns:*' PACTIONs
                                  #Also allows sms-voice:PACTION (SMS|Voice with AWS End User Messaging):
                                  #  - DestinationNumber*, SendTextMessage, SetTextMessageSpendLimitOverride, DescribeAccountAttributes,
                                  #    DescribeSpendLimits, DescribePhoneNumbers, DescribeOptedOutNumbers, DeleteOptedOutNumber
                                  #  - COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
AmazonSNSReadOnlyAccess           #Same but readonly

                                  ┌─────────────┐
                                  │   METRICS   │
                                  └─────────────┘

AWS/Usage/CallCount               #NUM of API calls
                                  #With DVAR Resource 'PACTION'

                                  ┌───────────┐
                                  │   TOPIC   │
                                  └───────────┘

TOPIC                             #Forwards MESSAGEs to SUBSCRIPTIONs
                                  #Creating|deleting is idempotent
                                  #Max 1e5 (soft) non-FIFO TOPICs, 1e3 (soft) FIFO TOPICs
TOPIC.TopicArn                    #'TOPIC_ARN'. 'arn:aws:sns:REGION:ACCOUNT_ID:TOPIC'
TOPIC.Name                        #'TOPIC'
                                  #Max 256 chars, [:alnum:]-_
TOPIC.Attributes                  #TOPIC_ATTRS

TOPIC_ATTRS.TracingConfig         #'PassThrough' or 'Active'. X-Ray settings
                                  #Not on FIFO

                                  ┌───────────────┐
                                  │   TOPIC API   │
                                  └───────────────┘

CreateTopic()                     #Req: TOPIC
                                  #  - no TopicArn
                                  #  - Attributes: no Owner, EffectiveDeliveryPolicy, Subscriptions*,
                                  #    BeginningArchiveTime, *Feedback*
                                  #Res: TOPIC
                                  #  - only TopicArn
SetTopicAttributes()              #Req: TOPIC
                                  #  - only TopicArn, Attributes -> AttributeName 'TOPIC_ATTR', AttributeValue STR
                                  #  - Attributes: no Owner, EffectiveDeliveryPolicy, Subscriptions*,
                                  #    BeginningArchiveTime, FifoTopic
                                  #Res: empty
ListTopics()                      #Req: empty
                                  #Res: Topic TOPIC_ARR
                                  #  - only TopicArn
GetTopicAttributes()              #Req: TOPIC
                                  #  - only TopicArn
                                  #Res:
                                  #  - only Attributes: no *Feedback*
                                  #  - only TopicArn -> Attributes.TopicArn
DeleteTopic()                     #Req: TOPIC
                                  #  - only TopicArn
                                  #Res: empty

                                  ┌───────────────┐
                                  │   TOPIC IAC   │
                                  └───────────────┘

AWS::SNS::Topic                   #RESPROPs: TopicName, TracingConfig
                                  #RESATTRs: TopicArn, TopicName

new Topic(...CARGS[, CTOPIC_OPTS])#CTOPIC
Topic.fromTopicAttributes
 (...CARGS, OPTS)->ICTOPIC        #Using OPTS: topicArn, contentBasedDeduplication
Topic.fromTopicArn
 (...CARGS, 'TOPIC_ARN')->ICTOPIC #Same but only setting OPTS.topicArn

ICTOPIC.topicArn                  #'TOPIC_ARN'[_TK]
CTOPIC_OPTS.topicName             #TOPIC.Name
ICTOPIC.topicName                 #'TOPIC'[_TK]

CTOPIC_OPTS.tracingConfig         #TOPIC_ATTRS.TracingConfig

                                  ┌───────────────┐
                                  │   TOPIC SAM   │
                                  └───────────────┘

SNSCrudPolicy                     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:CreateTopic|SetTopicAttributes, sns:Subscribe|ListSubscriptionsByTopic and sns:Publish
                                  #  - on 'TOPIC*'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName

                                  ┌────────────────────┐
                                  │   TOPIC COMPOSER   │
                                  └────────────────────┘

TOPIC ENHANCEMENT COMPONENT ==>   #Includes only TOPIC

                                  ┌───────────────────┐
                                  │   TOPIC METRICS   │
                                  └───────────────────┘

DVAR TopicName                    #'TOPIC'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
                                  #TOPIC is also sent as a metric TELEMETRY_ENTITY

INACTIVE TOPIC ==>                #TOPIC without any API calls for 6h+
                                  #Does not send any more METRICs
                                  #API calls includes GetTopicAttributes(), i.e. can be used to re-activate
                                  #Re-activating takes up to 15m

AWS/Usage/ResourceCount           #NUM of TOPICs
                                  #With DVAR Resource 'ApproximateNumberOfTopics'

                                  ┌───────────────────────┐
                                  │   TOPIC METRICS IAC   │
                                  └───────────────────────┘

ICTOPIC.metric
 ('METRIC'[, CMETRIC_OPTS])
 ->CMETRIC                        #Also sets DVAR TopicName

CFACADE.monitorSnsTopic
 (CXMONITORING_OPTS)              #See cdk-monitoring-constructs doc
CXMONITORING_OPTS.topic           #ICTOPIC

                                  ┌────────────────┐
                                  │   TOPIC TAGS   │
                                  └────────────────┘

TOPIC_TAGS.ResourceArn            #'TOPIC_ARN'
TOPIC[_TAGS].Tags                 #TAG_PAIRS

                                  ┌────────────────────┐
                                  │   TOPIC TAGS API   │
                                  └────────────────────┘

TagResource()                     #Req: TOPIC_TAGS
                                  #Res: empty
ListTagsForResource()             #Req: TOPIC_TAGS
                                  #  - only ResourceArn
                                  #Res: TOPIC_TAGS
                                  #  - only Tags
UntagResource()                   #Req: TOPIC_TAGS
                                  #  - Tags OBJ -> TagKeys STR_ARR
                                  #Res: empty

                                  ┌────────────────────┐
                                  │   TOPIC TAGS IAC   │
                                  └────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: Tags TAG_PAIRS

                                  ┌──────────────┐
                                  │   NON-FIFO   │
                                  └──────────────┘

ORDER ==>                         #Best effort, might be out-of-order

DOUBLE PROCESSING ==>             #Sometimes, a MESSAGE might be delivered to a SUB more than once
                                  #I.e. processing should be idempotent
                                  #Not if FIFO

                                  ┌──────────┐
                                  │   FIFO   │
                                  └──────────┘

TOPIC_ATTRS.FifoTopic             #BOOL (def: false). Whether is FIFO TOPIC
                                  #'TOPIC' must end with '.fifo'
                                  #Everything in this section is only for FIFO

ORDER ==>                         #Ensures that receiving order is same as sending order

MESSAGE.MessageGroupId            #'MESSAGE_GROUP_ID'. FIFO ordering applies per-MESSAGE_GROUP
                                  #I.e. MESSAGE_GROUPs are interleaved
                                  #High NUM of MESSAGE_GROUPs has better performance
                                  #Required
                                  #Max 128 chars, [:graph:]
                                  #No limits on NUM of MESSAGE_GROUPs
MESSAGE_RES.SequenceNumber        #'NUM'. Increases monotonically (but not consecutively) per MESSAGE within a given MESSAGE_GROUP
                                  #Always 16 chars

MESSAGE.MessageDeduplicationId    #'MESSAGE_DID'. If 2 Publish() with the same MESSAGE_DID are sent:
                                  #  - within 5m
                                  #  - then only the first successful one is used
                                  #I.e. avoid double sending
                                  #Required
                                  #Max 128 chars, [:graph:]
TOPIC_ATTRS
 .ContentBasedDeduplication       #BOOL (def: false). Make MESSAGE_DID default to SHA-256 of 'MESSAGE_BODY'

                                  ┌──────────────┐
                                  │   FIFO IAC   │
                                  └──────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: FifoTopic, ContentBasedDeduplication

CTOPIC[_OPTS].fifo                #TOPIC_ATTRS.FifoTopic
                                  #Automatically appends '.fifo' to 'TOPIC'
CTOPIC[_OPTS]
 .contentBasedDeduplication       #TOPIC_ATTRS.ContentBasedDeduplication

                                  ┌─────────────────┐
                                  │   FIFO REPLAY   │
                                  └─────────────────┘

TOPIC_ATTRS.ArchivePolicy         #NUM (in days, min|def 0, max 1y).
 .MessageRetentionPeriod          #Stores MESSAGEs, in order to replay them
TOPIC_ATTRS.BeginningArchiveTime  #DATE_NUM. Earliest time to replay from, based on MessageRetentionPeriod

SUB_ATTRS.ReplayPolicy            #'REPLAY_JSON'. Re-send MESSAGEs stored in TOPIC
REPLAY.PointType                  #Always 'Timestamp'
REPLAY.StartingPoint              #'DATE'
REPLAY.EndingPoint                #'DATE' (def: now)

SUB_ATTRS.ReplayStatus            #'Pending', 'In progress', 'Completed' or 'Failed'

                                  ┌─────────────────────┐
                                  │   FIFO REPLAY IAC   │
                                  └─────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: ArchivePolicy, ReplayPolicy OBJ

CTOPIC_OPTS
 .messageRetentionPeriodInDays    #TOPIC_ATTRS.ArchivePolicy.MessageRetentionPeriod

                                  ┌──────────────────┐
                                  │   SUBSCRIPTION   │
                                  └──────────────────┘

SUB                               #Forwards MESSAGEs to a PROTOCOL-specific destination
                                  #Max 12.5e6 (soft) per non-FIFO TOPIC, 100 (soft) per FIFO TOPIC
SUB.SubscriptionArn               #'SUBSCRIPTION_ARN'. 'TOPIC_ARN:SUBSCRIPTION_MID'
SUB.TopicArn                      #'TOPIC_ARN'
SUB.Attributes                    #SUB_ATTRS

SUB.Protocol                      #'PROTOCOL'. All valid values are documented below
SUB.Endpoint                      #Destination. PROTOCOL-specific, defined below

TOPIC_ATTRS.SubscriptionsDeleted  #NUM of Unsubscribe()

                                  ┌───────────────────────┐
                                  │   SUBSCRIPTION AUTH   │
                                  └───────────────────────┘

COND_KEY sns:Protocol
COND_KEY sns:Endpoint             #SUB.*. Only with Subscribe()

                                  ┌──────────────────────┐
                                  │   SUBSCRIPTION API   │
                                  └──────────────────────┘

Subscribe()                       #Req: SUB
                                  #  - no SubscriptionArn, Owner
                                  #  - Attributes: no *Confirmation*, EffectiveDeliveryPolicy
                                  #Res: SUB
                                  #  - only SubscriptionArn
SetSubscriptionAttributes()       #Req: SUB
                                  #  - only SubscriptionArn, Attributes -> AttributeName 'SUB_ATTR', AttributeValue STR
                                  #  - Attributes: no *Confirmation*, EffectiveDeliveryPolicy, Replay*
                                  #Res: empty
ListSubscriptions()               #Req: empty
                                  #Res: Subscriptions SUB_ARR
                                  #  - no Attributes, ReturnSubscriptionArn
ListSubscriptionsByTopic()        #Req: SUB
                                  #  - only TopicArn
                                  #Res: Subscriptions SUB_ARR
                                  #  - no Attributes, ReturnSubscriptionArn
GetSubscriptionAttributes()       #Req: SUB
                                  #  - only SubscriptionArn
                                  #Res: SUB
                                  #  - only Attributes: no Replay*
                                  #  - only Owner|*Arn -> Attributes.Owner|*Arn
Unsubscribe()                     #Req: SUB
                                  #  - only SubscriptionArn
                                  #Res: empty

                                  ┌──────────────────────┐
                                  │   SUBSCRIPTION IAC   │
                                  └──────────────────────┘

AWS::SNS::Subscription            #RESPROPs:
                                  #  - TopicArn, Protocol, Endpoint
                                  #  - Region 'REGION' (def: current)
                                  #RESATTRs: Arn

AWS::SNS::Topic                   #Includes RESPROPs: Subscription OBJ_ARR: Protocol, Endpoint
                                  #Creates SUB but does not delete it, i.e. meant for SUBs created in other STACKs

new Subscription
 (...CARGS, CSUB_OPTS)            #CSUB
ICTOPIC.addSubscription(CCSUB)
 ->CSUB                           #

CSUB_OPTS.topic                   #ICTOPIC. SUB.TopicArn
CSUB_OPTS.protocol                #SUB.Protocol
CSUB_OPTS.endpoint                #SUB.Endpoint
CSUB_OPTS.region                  #'REGION'

CTOPIC.grantSubscribe(YGRANTABLE)
 ->CGRANT                         #Allows sns:Subscribe

                                  ┌─────────────┐
                                  │   CONFIRM   │
                                  └─────────────┘

SUB_CONFIRM                       #Confirms SUBSCRIPTION creation
                                  #Required if both:
                                  #  - HTTP|email
                                  #  - TOPIC and endpoint are in different ACCOUNTs
                                  #Can be done anonymously
                                  #  - not logged to CloudTrail then
                                  #  - can use GET method, i.e. provide as URL
                                  #    'https://sns.REGION.amazonaws.com/?Action=ConfirmSubscription&PARAM=VAL'
                                  #Max 5e3 (soft) pending SUB_CONFIRMs per ACCOUNT
SUB_CONFIRM.TopicArn              #'TOPIC_ARN'

SUB_CONFIRM.Token                 #STR. Authentication token. How to get???
                                  #Expires after 2d

SUB_ATTRS.PendingConfirmation     #BOOL. Whether SUB_CONFIRM done
SUB_ATTRS
 .ConfirmationWasAuthenticated    #BOOL. Whether SUB_CONFIRM is authenticated???

SUB.ReturnSubscriptionArn         #BOOL. If false (def), SUB.SubscriptionArn is 'pending confirmation' if SUB_CONFIRM needed

SUB_CONFIRM                       #'BOOL'. If 'true', only TOPIC|SUB.Owner can Unsubscribe()
 .AuthenticateOnUnsubscribe       #If 'false' (def), allow anonymous Unsubscribe():
                                  #  - same notes as anonymous SUB_CONFIRM
                                  #  - a cancellation MESSAGE is also sent, with a link to re-subscribe

TOPIC_ATTRS.SubscriptionsPending  #NUM of pending SUB_CONFIRMs
TOPIC_ATTRS.SubscriptionsConfirmed#NUM of ConfirmSubscription()

                                  ┌─────────────────┐
                                  │   CONFIRM API   │
                                  └─────────────────┘

ConfirmSubscription()             #Req: SUB_CONFIRM
                                  #Res: SUB
                                  #  - only SubscriptionArn

                                  ┌─────────────────────┐
                                  │   CONFIRM METRICS   │
                                  └─────────────────────┘

AWS/Usage/ResourceCount           #NUM of pending SUB_CONFIRMs
                                  #With DVAR Resource 'ApproximateNumberOfPendingSubscriptions'

                                  ┌────────────┐
                                  │   FILTER   │
                                  └────────────┘

SUB_ATTRS.FilterPolicy            #'FILTER_JSON'. Filter which MESSAGEs to receive
                                  #Updates take up to 15m to enter into effect
                                  #Max 200 per TOPIC, 1e4 per ACCOUNT

SUB_ATTRS.FilterPolicyScope       #Whether FILTER is applied on:
                                  #  - 'MessageAttributes' (def)
                                  #  - 'MessageBody': must be JSON

FILTER.*                          #And'd, i.e. must all match
FILTER.$or                        #FILTER_ARR

FILTER.PROP                       #PROP_FILTER on MESSAGE_BODY.PROP or MESSAGE_ATTRS.PROP
                                  #Cannot be nested VARR???
                                  #ARR of either:
                                  #  - STR|NUM|BOOL|null: ARR.includes() (case-sensitive)
                                  #  - PROP_FILTER (ARR has a single item)

                                  ┌────────────────┐
                                  │   FILTER IAC   │
                                  └────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: FilterPolicy OBJ, FilterDeliveryScope

CSUB_OPTS.filterPolicy.PROP       #CPROP_FILTER
new SubscriptionFilter(???)

CSUB_OPTS
 .filterPolicyWithMessageBody.PROP#CPROP_FILTER_OR_POLICY

                                  ┌────────────────────┐
                                  │   FILTER METRICS   │
                                  └────────────────────┘

AWS/SNS/
 NumberOfNotificationsFilteredOut #NUM of MESSAGEs filtered out
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -MessageAttributes               #NUM of MESSAGEs filtered out by MESSAGE_ATTRs
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -InvalidAttributes               #NUM of MESSAGEs filtered out by MESSAGE_ATTRs due to them being invalid
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -NoMessageAttributes             #NUM of MESSAGEs filtered out by MESSAGE_ATTRs due to not having any
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -MessageBody                     #NUM of MESSAGEs filtered out by MESSAGE_BODY
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -InvalidMessageBody              #NUM of MESSAGEs filtered out by MESSAGE_BODY due to it being invalid

AWS/Usage/ResourceCount           #NUM of FILTER_POLICYs
                                  #With DVAR Resource 'ApproximateNumberOfFilterPolicies'

                                  ┌────────────────────────┐
                                  │   FILTER METRICS IAC   │
                                  └────────────────────────┘

ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'
ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 InvalidAttributes
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'
ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 NoMessageAttributes
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

                                  ┌──────────────┐
                                  │   THROTTLE   │
                                  └──────────────┘

MESSAGE THROTTLING ==>            #Max MESSAGEs per second to each TOPIC
                                  #Not API calls, i.e. regardless of Publish[Batch]()
                                  #Is:
                                  #  - same REGION: 30000|9000|1500|300 (REGION-specific, soft) and 20MB/s
                                  #  - cross-REGIONs: 1000 (soft) and 6MB/s
                                  #  - SMS: 20 (soft)
                                  #  - email: 10

DELIVERY_POLICY.throttlePolicy    #NUM (def: unlimited). Max MESSAGEs per second from TOPIC to this SUB
 .maxReceivesPerSecond            #If too low, can create a backlog of MESSAGEs available in TOPIC but not sent to SUB

                                  ┌──────────────────┐
                                  │   THROTTLE IAC   │
                                  └──────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: ThrottlePolicy

                                  ┌──────────────────────┐
                                  │   THROTTLE METRICS   │
                                  └──────────────────────┘

AWS/SNS/NumberOfMessagesPublished #NUM of MESSAGEs sent to TOPICs
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET, MALARM Min|MaxNumberOfMessagesPublished <|> CXALARM_OPTS.min|maxMessagesPublishedCount

AWS/Usage/ResourceCount           #NUM of MESSAGEs sent to TOPICs
                                  #With DVAR Resource 'NumberOfMessagesPublishedPerAccount'

AWS/SNS/                          #NUM of MESSAGEs successfully sent from SUBs
 NumberOfNotificationsDelivered   #Does not included filtered out MESSAGEs
                                  #Difference with AWS/SNS/NumberOfMessagesPublished is backlog
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET

                                  ┌───────────┐
                                  │   RETRY   │
                                  └───────────┘

TOPIC_ATTRS|SUB_ATTRS
 .DeliveryPolicy                  #'DELIVERY_POLICY_JSON'
TOPIC_ATTRS|SUB_ATTRS
 .EffectiveDeliveryPolicy         #Same but also shows default values

DELIVERY_POLICY.healthyRetryPolicy#RETRY_POLICY. How to retry when fail to send MESSAGE from TOPIC to SUB
                                  #MESSAGE is considered failed once no more retries
                                  #Can only be customized with HTTP: other PROTOCOLs always use the default value
RETRY_POLICY.minDelayTarget       #NUM (in secs, min 1). Retry start delay
                                  #Def 20s with HTTP, 10s with email|SMS|APP, 1s else
RETRY_POLICY.maxDelayTarget       #NUM (in secs, min minDelayTarget, max 1h). Retry end delay
                                  #Def 10m with email|SMS|APP, 20s else
RETRY_POLICY.numRetries           #NUM. Max retries, including all phases
                                  #Def 3 with HTTP, 50 with email|SMS|APP, 100_015 else
                                  #Max 100 with HTTP
RETRY_POLICY.numNoDelayRetries    #NUM. "Immediate retries": first phase, without any delay
                                  #Def 0 with HTTP|email|SMS|APP, 3 else
RETRY_POLICY.numMinDelayRetries   #NUM. "Pre-backoff retries": second phase, with minDelayTarget
                                  #Def 0 with HTTP, 2 else
RETRY_POLICY.backoffFunction      #"Backoff retries": third phase, going from minDelayTarget to maxDelayTarget
                                  #One of (from linear to very exponential):
                                  #  - 'LINEAR' (def with HTTP)
                                  #  - 'ARITHMETIC'
                                  #  - 'GEOMETRIC'
                                  #  - 'EXPONENTIAL' (def else)
RETRY_POLICY.numMaxDelayRetries   #NUM. "Post-backoff retries": fourth phase, with maxDelayTarget
                                  #Def 0 with HTTP, 38 with email|SMS|APP, 1e5 else

                                  ┌───────────────┐
                                  │   RETRY IAC   │
                                  └───────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: HealthyRetryPolicy

CSUB_OPTS.deliveryPolicy          #CDELIVERY_POLICY. SUB_ATTRS.DeliveryPolicy
CDELIVERY_POLICY.throttlePolicy   #DELIVERY_POLICY.*
CDELIVERY_POLICY
 .healthyRetryPolicy              #CRETRY_POLICY. DELIVERY_POLICY.*
CRETRY_POLICY.min|maxDelayTarget  #DURATION
CRETRY_POLICY
 .num*Retries|backoffFunction     #RETRY_POLICY.*

                                  ┌───────────────────┐
                                  │   RETRY METRICS   │
                                  └───────────────────┘

AWS/SNS/                          #NUM of MESSAGEs failed to be sent from SUBs
 NumberOfNotificationsFailed      #Does not included filtered out MESSAGEs
                                  #With HTTP, includes retries too
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET, MALARM MessageNotificationsFailed > CXALARM_OPTS.maxNotificationsFailedCount

                                  ┌───────────────────────┐
                                  │   DEAD-LETTER QUEUE   │
                                  └───────────────────────┘

SUB_ATTRS.RedrivePolicy           #'REDRIVE_POLICY_JSON'. Sends failed MESSAGEs to SQS DLQ
REDRIVE_POLICY.deadLetterTargetArn#'QUEUE_ARN'

                                  ┌────────────────────────────┐
                                  │   DEAD-LETTER QUEUE AUTH   │
                                  └────────────────────────────┘

PACTION sqs:SendMessage           #Must be allowed:
                                  #  - on Resource QUEUE
                                  #  - on Principal.Service sns.amazonaws.com
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌───────────────────────────────┐
                                  │   DEAD-LETTER QUEUE METRICS   │
                                  └───────────────────────────────┘

AWS/SNS/
NumberOfNotificationsRedrivenToDlq#NUM of MESSAGEs moved to DLQ

AWS/SNS/NumberOfNotifications
 FailedToRedriveToDlq             #NUM of MESSAGEs which failed to be moved to DLQ

                                  ┌───────────────────────────┐
                                  │   DEAD-LETTER QUEUE IAC   │
                                  └───────────────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: RedrivePolicy REDRIVE_POLICY_OBJ

CSUB[_OPTS].deadLetterQueue       #ICQUEUE
                                  #Automatically adds relevant permissions using CQUEUE_MPOLICY

                                  ┌────────────────────────────┐
                                  │   DEAD-LETTER QUEUE LINT   │
                                  └────────────────────────────┘

cfn-lint-serverless aws_sns_
 topic_subscription_redrive_policy
ES7000                            #SUB_ATTRS.RedrivePolicy must be set

                                  ┌─────────────┐
                                  │   MESSAGE   │
                                  └─────────────┘

MESSAGE                           #Max 256KB
                                  #Max header 16KB???

MESSAGE_RES.MessageId             #'MESSAGE_MID'
MESSAGE.TopicArn                  #'TOPIC_ARN'

MESSAGE.Message                   #'MESSAGE_BODY'
MESSAGE.MessageStructure          #If 'json' (def: undefined), MESSAGE_BODY is 'OBJ_JSON' of {PROTOCOL|default: 'MESSAGE_BODY', ...}
                                  #I.e. PROTOCOL-specific MESSAGE_BODY
                                  #One `default` is required

MESSAGE
 .MessageAttributes.MESSAGE_ATTR  #ATTR_VALUE. Custom metadata
ATTR_VALUE.DataType               #Value's type among 'String', 'String.Array', 'Number' or 'Binary'
                                  #Can append with any '.DESCRIPTION', e.g. 'Number.float', max 256 chars
ATTR_VALUE.StringValue            #STR. Value, when DataType 'String[.Array]|Number'
                                  #'NUM' must be single-precision float
                                  #Must be [:print:]
ATTR_VALUE.BinaryValue            #STR. Value, when DataType 'Binary'
                                  #Must be base64'd

SUB_ATTRS.RawMessageDelivery      #BOOL (def: false). Use MESSAGE_BODY as LMESSAGE
                                  #As opposed to setting LMESSAGE.* including LMESSAGE.Message 'MESSAGE_BODY'
                                  #Only for HTTP, SQS, Firehose

                                  ┌─────────────────┐
                                  │   MESSAGE API   │
                                  └─────────────────┘

Publish()                         #Req: MESSAGE
                                  #Res: MESSAGE_RES

                                  ┌─────────────────┐
                                  │   MESSAGE SDK   │
                                  └─────────────────┘

EXTENDED CLIENT LIBRARY ==>       #Client built on top of Java|Python SDK, that automatically uploads|downloads|cleans up
                                  #big payloads to S3, replacing MESSAGE_BODY with S3 URL
                                  #Only meant to get over the size limit, since it does not lower cost (replacing SNS costs with S3 costs)
                                  #Repository is awslabs/amazon-sns-python|java-extended-client-lib
                                  #Shared logic with SQS extended client libary is at awslabs/payload-offloading-java-common-lib-for-aws

                                  ┌─────────────────┐
                                  │   MESSAGE IAC   │
                                  └─────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: RawMessageDelivery

CSUB_OPTS.rawMessageDelivery      #SUB_ATTRS.RawMessageDelivery

CTOPIC.grantPublish(YGRANTABLE)
 ->CGRANT                         #Allows sns:Publish

                                  ┌─────────────────┐
                                  │   MESSAGE SAM   │
                                  └─────────────────┘

SNSPublishMessagePolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:Publish
                                  #  - on 'TOPIC'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION or Step Functions STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing sns:Publish
                                  #  - on TOPIC

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: EventBridge RULE (RESOURCE_REF.Arn)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a TOPIC_POLICY on TOPIC:
                                  #  - allowing SERVICE events.amazonaws.com
                                  #  - to sns:Publish
                                  #  - COND_KEY aws:SourceArn RULE_ARN

                                  ┌─────────────────────┐
                                  │   MESSAGE METRICS   │
                                  └─────────────────────┘

AWS/SNS/PublishSize               #Size of MESSAGEs
                                  #Excludes failed ones
                                  #cdk-monitoring-constructs:
                                  #  - average: METRIC, WIDGET

                                  ┌─────────────────────────┐
                                  │   MESSAGE METRICS IAC   │
                                  └─────────────────────────┘

ICTOPIC
 .metricNumberOfMessagesPublished
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

ICTOPIC.metricNumberOf
 NotificationsDelivered
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

ICTOPIC.metricNumberOf
 NotificationsFailed
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

ICTOPIC.metricPublishSize
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Average'

                                  ┌─────────────────────┐
                                  │   MESSAGE LOGGING   │
                                  └─────────────────────┘

CLOUDTRAIL ==>                    #Publish() is logged to CloudTrail as data EVENT
                                  #LOG_RESOURCE is:
                                  #  - APP_PLATFORM_TYPE if MESSAGE.TargetArn set
                                  #  - TOPIC else
                                  #Not logged if MESSAGE.PhoneNumber set

                                  ┌───────────┐
                                  │   BATCH   │
                                  └───────────┘

BATCH                             #Multiple MESSAGEs in a single API call
                                  #Max 10 entries
                                  #Max 256KB

BATCH.TopicArn                    #'TOPIC_ARN'
BATCH.PublishBatchRequestEntries  #BATCH_ENTRY_ARR
BATCH_ENTRY.Id                    #'BATCH_ENTRY_MID'. Required
                                  #Max 80 chars, [:alnum:]_-
BATCH_ENTRY.*                     #MESSAGE.* except no TopicArn, TargetArn, PhoneNumber

BATCH_RES.Successful              #BATCH_SUCCESS_ARR
BATCH_SUCCESS.Id                  #'BATCH_ENTRY_MID'
BATCH_SUCCESS.*                   #MESSAGE_RES

BATCH_RES.Failed                  #BATCH_ERROR_ARR
BATCH_ERROR.Id                    #'BATCH_ENTRY_MID'
BATCH_ERROR.Code                  #'CODE'
BATCH_ERROR.Message               #'MESSAGE'
BATCH_ERROR.SenderFault           #BOOL. Whether caused by user or by API

                                  ┌────────────────┐
                                  │   BATCH AUTH   │
                                  └────────────────┘

PACTION sqs:Publish               #Includes sns:PublishBatch, which does not have its own PACTION

                                  ┌───────────────┐
                                  │   BATCH API   │
                                  └───────────────┘

PublishBatch()                    #Req: BATCH
                                  #Res: BATCH_RES

                                  ┌───────────────────┐
                                  │   BATCH LOGGING   │
                                  └───────────────────┘

CLOUDTRAIL ==>                    #Like Publish()

                                  ┌────────────────┐
                                  │   ENCRYPTION   │
                                  └────────────────┘

TOPIC_ATTRS.KmsMasterKeyId        #KMS_ID (def: none). "SSE". Encrypts MESSAGE_BODY at rest
                                  #Does not encrypt other parts of MESSAGE.* (e.g. MESSAGE_ATTRS)

TOPIC_ATTRS.SignatureVersion      #Algorithm used for the encryption signature. Either:
                                  #  - '1' (def): RSA with SHA1
                                  #  - '2' (recommended): RSA with SHA256

                                  ┌─────────────────────┐
                                  │   ENCRYPTION AUTH   │
                                  └─────────────────────┘

PACTION
 kms:Decrypt|GenerateDataKey*     #Must be allowed if SSE

                                  ┌────────────────────┐
                                  │   ENCRYPTION IAC   │
                                  └────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: KmsMasterKeyId, SignatureVersion

CTOPIC_OPTS.masterKey             #ICKEY. TOPIC_ATTRS.KmsMasterKeyId
CTOPIC_OPTS.signatureVersion      #TOPIC_ATTRS.SignatureVersion

CTOPIC_OPTS|CTOPIC_MPOLICY_OPTS   #BOOL (def: false, recommended: true). Adds a POLICY which denies sns:Publish on TOPIC from any PRINCIPAL
 .enforceSSL                      #if COND_KEY aws:SecureTransport false

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

TOPIC_ATTRS                       #ROLE_ARN used to send to CloudWatch Logs, logging successful MESSAGEs
 .PROTOCOLSuccessFeedbackRoleArn  #PROTOCOL is HTTP, Lambda, SQS, Firehose or Application
                                  #Not for email
TOPIC_ATTRS
 .PROTOCOLFailureFeedbackRoleArn  #Same for failed MESSAGEs
TOPIC_ATTRS                       #0-100. Percentage of successful MESSAGEs to log
.PROTOCOLSuccessFeedbackSampleRate#Failed MESSAGEs are always logged

APP_PLATFORM_ATTRS
 .SuccessFeedbackRoleArn
 |SuccessFeedbackSampleRate
 |FailureFeedbackRoleArn          #Same as TOPIC_ATTRS.Application*???

SMS_ATTRS.DeliveryStatusIAMRole
SMS_ATTRS
.DeliveryStatusSuccessSamplingRate#Same for SMS???

TELEMETRY_ENTITY                  #TOPIC is sent as a logging TELEMETRY_ENTITY

                                  ┌──────────────────┐
                                  │   LOGGING AUTH   │
                                  └──────────────────┘

PACTION iam:PassRole              #Required with TOPIC_ATTRS.*FeedbackRoleArn???

service-role/AmazonSNSRole        #AWS managed POLICY that allows PACTIONs:
                                  #  - logs:CreateLogGroup|PutMetricFilter|PutRetentionPolicy on any LOG_GROUP
                                  #  - logs:CreateLogStream|PutLogEvents on any LOG_STREAM

                                  ┌─────────────────┐
                                  │   LOGGING IAC   │
                                  └─────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DeliveryStatusLogging OBJ_ARR:
                                  #  - Protocol 'PROTOCOL'
                                  #  - SuccessFeedbackRoleArn, FailureFeedbackRoleArn, SuccessFeedbackSampleRate

CTOPIC_OPTS.loggingConfigs        #LOGGING_ARR
LOGGING.protocol                  #'PROTOCOL'
LOGGING.successFeedbackRole       #ICROLE. TOPIC_ATTRS.PROTOCOLSuccessFeedbackRoleArn
LOGGING.failureFeedbackRole       #ICROLE. TOPIC_ATTRS.PROTOCOLFailureFeedbackRoleArn
LOGGING.successFeedbackSampleRate #NUM. TOPIC_ATTRS.PROTOCOLSuccessFeedbackSampleRate

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

TOPIC_ATTRS.Policy                #IAM 'POLICY_DOC'. TOPIC_POLICY
                                  #Resource-level on a TOPIC, i.e. Resource is TOPIC_ARN
                                  #Principal must be 'ACCOUNT_ID'
                                  #  - this can worked around using either:
                                  #     - COND_KEY aws:PrincipalArn or aws:SourceArn|SourceAccount
                                  #     - identity-level POLICY instead
                                  #Def: empty

PERMISSION                        #Sets TOPIC_ATTRS.Policy
                                  #POLICY_DOC.Id is 'arn:aws:sqs:REGION:ACCOUNT_ID/TOPIC/SNSDefaultPolicy'
PERMISSION.Label                  #STATEMENT.Sid
PERMISSION.TopicArn               #'TOPIC_ARN'. STATEMENT.Resource
PERMISSION.ActionName             #'PACTION|*'_ARR. STATEMENT.Actions
PERMISSION.AWSAccountIds          #'ACCOUNT_ID'_ARR. STATEMENT.Principal.AWS
                                  #Required

TOPIC_ATTRS|SUB.Owner             #'ACCOUNT_ID'
SUB_ATTRS.SubscriptionPrincipal   #ARN of principal who created SUB

                                  ┌─────────────────┐
                                  │   POLICY AUTH   │
                                  └─────────────────┘

CROSS-ACCOUNT REQUESTS ==>        #Allowed by using Pricipal with another ACCOUNT, in TOPIC_POLICY
                                  #Only for PACTIONs sns:Subscribe|ListSubscriptionsByTopic (others???)

ANONYMOUS REQUESTS ==>            #Allowed by using Principal '*', in TOPIC_POLICY

PACTION sns:AddPermission
 |RemovePermission                #Do not require PACTION sns:SetTopicAttributes, even though they set TOPIC_ATTRS.Policy

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

AddPermission()                   #Req: PERMISSION
                                  #Res: empty
RemovePermission()                #Req: PERMISSION
                                  #  - only TopicArn, Label
                                  #Res: empty

                                  ┌────────────────┐
                                  │   POLICY IAC   │
                                  └────────────────┘

AWS::SNS::TopicInlinePolicy       #RESPROPs: PolicyDocument POLICY_DOC_OBJ, TopicArn 'TOPIC_ARN'
                                  #Is TOPIC_ATTRS.Policy, i.e. resource-level
                                  #With Cloud Control, cannot list

AWS::SNS::TopicPolicy             #RESPROPs: PolicyDocument POLICY_DOC_OBJ, Topics 'TOPIC_ARN'_ARR
                                  #RESATTR: Id POLICY_MID
                                  #Is a MPOLICY, i.e. identity-level
                                  #With Cloud Control, cannot read|list

new TopicPolicy(...CARGS, OPTS)   #CTOPIC_MPOLICY. AWS::SNS::TopicPolicy
OPTS.policyDocument
CTOPIC_MPOLICY.document           #CPOLICY_DOC (def: empty one)
OPTS.topics                       #ICTOPIC_ARR

CTOPIC                            #Is RGRANTABLE, using CTOPIC_MPOLICY
                                  #If ICTOPIC, is RGRANTABLE but noop
CTOPIC.grant*(...)                #Uses identity-based POLICY or (if fails) CTOPIC_MPOLICY
                                  #If cross-ACCOUNT, uses both

                                  ┌─────────────────┐
                                  │   MASK POLICY   │
                                  └─────────────────┘

TOPIC.DataProtectionPolicy        #'MASK_POLICY_JSON'
                                  #Handle sensitive data in MESSAGEs
                                  #Max 30KB

MASK_POLICY
 .Version|Name|Description        #Same as CloudWatch Logs
MASK_POLICY.Statement             #MASK_STATEMENT_ARR
MASK_STATEMENT.Sid                #'MASK_STATEMENT'
MASK_STATEMENT.Principal          #Like IAM STATEMENT.Principal, including '*'
                                  #If DataDirection:
                                  #  - 'Inbound': who called Publish*()
                                  #  - 'Outbound': who called Subscribe(), i.e. SUB_ATTRS.SubscriptionPrincipal
MASK_STATEMENT.DataDirection      #Applied on MESSAGEs sent:
                                  #  - 'Inbound': by Publish*() to TOPIC
                                  #  - 'Outbound': by TOPIC to SUB
MASK_STATEMENT.Operation          #MASK_OP

MASK_OP.Deidentify.MaskConfig
 .MaskWithCharacter               #Mask the value with 'CHAR'

MASK_OP.Deidentify.RedactConfig   #Delete the value

MASK_OP.Deny                      #Empty OBJ. Reject the MESSAGE

                                  ┌─────────────────────┐
                                  │   MASK POLICY API   │
                                  └─────────────────────┘

PutDataProtectionPolicy()         #Req: TOPIC
                                  #  - only DataProtectionPolicy, TopicArn -> ResourceArn
                                  #Res: empty
GetDataProtectionPolicy()         #Req: TOPIC
                                  #  - only TopicArn -> ResourceArn
                                  #Res: TOPIC
                                  #  - only DataProtectionPolicy

                                  ┌─────────────────────┐
                                  │   MASK POLICY IAC   │
                                  └─────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DataProtectionPolicy MASK_POLICY_OBJ

                                  ┌──────────────────────┐
                                  │   MASK DESTINATION   │
                                  └──────────────────────┘

MASK_OP.Audit                     #MASK_DESTINATION
 .FindingsDestination             #Send masked values to a destination
MASK_OP.Audit                     #MASK_DESTINATION
 .NoFindingsDestination           #Send MESSAGE to a destination when no marked values

MASK_OP.Audit.SampleRate          #0 to 100 (def). Only applied on NUM% of MESSAGEs

MASK_DESTINATION
 .CloudWatchLogs|S3|Firehose      #Like CloudWatch Logs, except 'LOG_GROUP' must start with '/aws/vendedlogs/'

MPAYLOAD                          #Payload sent to MASK_DESTINATION
MPAYLOAD.auditTimestamp           #'DATE'
MPAYLOAD.resourceArn              #TOPIC_ARN
MPAYLOAD.messageId                #'MESSAGE_MID'
MPAYLOAD.callerPrincipal          #MASK_STATEMENT.Principal
MPAYLOAD.dataIdentifiers          #DDATAID_ARR, like CloudWatch Logs

                                  ┌───────────────────────────┐
                                  │   MASK DESTINATION AUTH   │
                                  └───────────────────────────┘

PACTION logs:CreateLogDelivery
 |UpdateLogDelivery
 |ListLogDeliveries
 |GetLogDelivery
 |DeleteLogDelivery               #Required for MASK_DESTINATION
PACTION logs:PutResourcePolicy
 |DescribeResourcePolicies
 |DescribeLogGroups               #Required for MASK_DESTINATION.CloudWatchLogs.LogGroup
PACTION s3:PutBucketPolicy        #Required for MASK_DESTINATION.S3.Bucket
 |GetBucketPolicy                 #Also kms:* if SSE-KMS
PACTION
 iam:CreateServiceLinkedRole
PACTION firehose:TagDeliveryStream#Required for MASK_DESTINATION.Firehose.DeliveryStream

                                  ┌──────────────────────────────┐
                                  │   MASK DESTINATION METRICS   │
                                  └──────────────────────────────┘

AWS/SNS/MessagesWith[No]Findings  #NUM of MESSAGEs matching MASK_OP.Audit.[No]FindingsDestination
                                  #Requires MASK_OP.Audit

                                  ┌──────────┐
                                  │   HTTP   │
                                  └──────────┘

SUB.Protocol                      #'http[s]'. Send using HTTP request, with POST
SUB.Endpoint                      #'URL' to send to

DELIVERY_POLICY                   #Content-Type [C] of MESSAGEs
 .requestPolicy.headerContentType #'MIME' among 'text/plain' (def), 'application/json', 'application/xml'
                                  #If SUB_ATTRS.RawMessageDelivery true, can also be 'text/html|css|xml|csv',
                                  #'application/octet-stream', 'application/x-www-form-urlencoded' or 'application/atom|soap|xhtml+xml'

x-amz-sns-rawdelivery: true [C]   #Set if SUB_ATTRS.RawMessageDelivery true (see above)

                                  ┌──────────────┐
                                  │   HTTP IAC   │
                                  └──────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: RequestPolicy

CDELIVERY_POLICY.requestPolicy    #DELIVERY_POLICY.*

                                  ┌────────────┐
                                  │   LAMBDA   │
                                  └────────────┘

SUB.Protocol                      #'lambda'. Send to a Lambda FUNCTION
                                  #Not with FIFO
SUB.Endpoint                      #'FUNC_ARN'

INVOCATION ==>                    #InvocationType 'Event'
                                  #No response

                                  ┌─────────────────┐
                                  │   LAMBDA AUTH   │
                                  └─────────────────┘

PACTION lambda:InvokeFunction     #Must be allowed:
                                  #  - Resource FUNCTION
                                  #  - Principal.Service 'sns.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌────────────────┐
                                  │   LAMBDA SAM   │
                                  └────────────────┘

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TOPIC (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a Lambda PERMISSION on FUNCTION:
                                  #  - allowing SERVICE sns.amazonaws.com
                                  #  - to lambda:InvokeFunction
                                  #  - aws:SourceArn TOPIC_ARN

                                  ┌────────────────────┐
                                  │   LAMBDA PAYLOAD   │
                                  └────────────────────┘

REQ.Records                       #LRECORD_ARR. Only one item???
LRECORD.EventVersion              #Always '1.0'
LRECORD.EventSource               #Always 'aws:sns'
LRECORD.EventSubscriptionArn      #'SUBSCRIPTION_ARN'

LRECORD.Sns                       #LMESSAGE
LMESSAGE.Type                     #Always 'Notification'
LMESSAGE.Timestamp                #DATE_NUM
LMESSAGE.Message                  #MESSAGE.Message
                                  #Can JSON parse it using either
                                  #  - QUERY SNS JMESPath 'QUERY' (see its doc)
                                  #  - @middy/event-normalizer (see its doc)
                                  #     - including when invoked from SQS SUBSCRIPTION
LMESSAGE.TopicArn|MessageId
 |MessageAttributes|Subject       #MESSAGE.*
LMESSAGE.MessageAttributes        #MESSAGE_ATTRS except DataType -> Type, StringValue|BinaryValue -> Value

LMESSAGE.UnsubscribeUrl           #URL to unsubscribe anonymously: 'https://sns.REGION.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=SUBSCRIPTION_ARN'

LMESSAGE.SignatureVersion         #TOPIC_ATTRS.SignatureVersion
LMESSAGE.Signature                #'BASE64'. Encryption signature
LMESSAGE.SigningCertURL           #URL to encryption PEM

                                  ┌─────────┐
                                  │   SQS   │
                                  └─────────┘

SUB.Protocol                      #'sqs'. Send to a SQS QUEUE
SUB.Endpoint                      #'QUEUE_ARN'

MESSAGE_BODY                      #LMESSAGE (see above)

SUB_ATTRS.RawMessageDelivery      #If true (see above), max 10 MESSAGE_ATTRs

                                  ┌──────────────┐
                                  │   SQS AUTH   │
                                  └──────────────┘

PACTION sqs:SendMessage           #Must be allowed:
                                  #  - Resource QUEUE
                                  #  - Principal.Service 'sns.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌─────────────┐
                                  │   SQS CLI   │
                                  └─────────────┘

sqs_grep                          #Can be used to copy SQS MESSAGEs back to SNS
                                  #See its doc

                                  ┌─────────────┐
                                  │   SQS SAM   │
                                  └─────────────┘

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TOPIC (RESOURCE_REF.Arn)
                                  #  - Destination: SQS QUEUE (RESOURCE_REF.Arn + RESOURCE_REF.QueueUrl)
                                  #  - Permissions 'Write'
                                  #Transformed to a QUEUE_POLICY on QUEUE (from QueueUrl):
                                  #  - allowing SERVICE sns.amazonaws.com
                                  #  - to sqs:SendMessage
                                  #  - on QUEUE2 (from Arn)
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌──────────────────┐
                                  │   SQS COMPOSER   │
                                  └──────────────────┘

TOPIC ENHANCEMENT COMPONENT ==>   #Can connect to SQS enhanced component to create SUB

                                  ┌─────────────┐
                                  │   KINESIS   │
                                  └─────────────┘

SUB.Protocol                      #'firehose'. Send to Kinesis Firehose delivery stream
                                  #Max 5 per DELIVERY_STREAM's ACCOUNT + TOPIC
SUB.Endpoint                      #'DELIVERY_STREAM_ARN'

SUB_ATTRS.SubscriptionRoleArn     #ROLE_ARN used to write to Firehose delivery stream
                                  #Must be assumable by sns.amazonaws.com
                                  #Current principal must have iam:PassRole

                                  ┌─────────────────┐
                                  │   KINESIS IAC   │
                                  └─────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: SubscriptionRoleArn

CSUB_OPTS.subscriptionRoleArn     #SUB_ATTRS.SubscriptionRoleArn

                                  ┌───────────┐
                                  │   EMAIL   │
                                  └───────────┘

SUB.Protocol                      #'email[-json]'. Send as email (SMTP)
SUB.Endpoint                      #'EMAIL_ADDRESS'

TOPIC_ATTRS.DisplayName           #'From' email field
                                  #Max 100 chars, [:alnum:]-_
MESSAGE.Subject                   #'Subject' email field
                                  #Max 100 chars, no control characters nor newlines

                                  ┌───────────────┐
                                  │   EMAIL IAC   │
                                  └───────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DisplayName

CTOPIC_OPTS.displayName           #TOPIC_ATTRS.*

                                  ┌──────────────────┐
                                  │   SMS SETTINGS   │
                                  └──────────────────┘

SUB.Protocol                      #'sms'. Send an SMS
SUB.Endpoint                      #'PHONE_NUMBER'
                                  #E.164 format, i.e. use + followed by multiple digits
MESSAGE.PhoneNumber               #'PHONE_NUMBER', specified instead of MESSAGE.TopicArn
                                  #I.e. send a MESSAGE without using a TOPIC

SMS_UI_SETTINGS                   #Submitted via UI when exiting the sandbox
                                  #SMS_UI_SETTINGS keys are only for documentation, since it is done via UI
SMS_UI_SETTINGS.SenderRegion      #'REGION'
SMS_UI_SETTINGS.ReceiverRegions   #'REGION'_ARR
SMS_UI_SETTINGS.ReceiverCountries #'COUNTRY'_ARR
SMS_UI_SETTINGS.AppLocation       #STR. Website URL or app name

SMS_SETTINGS.attributes           #SMS_ATTRS
SMS_ATTRS.DefaultSenderID         #STR. Sender field
                                  #Max 11 chars, [:alnum:] (at least one letter)
TOPIC_ATTRS.DisplayName           #SMS title???
                                  #Max 100 chars, [:alnum:]-_
MESSAGE.Message                   #STR. SMS contents
                                  #Each 140 ASCII (or 70 UTF-16) chars (cut at whitespaces) create a separate part
                                  #Max 1600 chars
SMS_UI_SETTINGS.MessageTemplates  #???

SMS_ATTRS.DefaultSMSType          #Either:
                                  #  - 'Promotional' (def): marketing, cheaper
                                  #  - 'Transactional': application, more reliable
                                  #  - 'Premium'???
SMS_UI_SETTINGS.DefaultSMSType    #'Promotional', 'Transactional' or 'OneTimePassword'

SMS_ATTRS|SMS_UI_SETTINGS         #Max NUM of USD to spend
 .MonthlySpendLimit               #Def: undocumented??? Max 1 USD (soft) per ACCOUNT???

SMS_ATTRS.UsageReportS3Bucket     #'BUCKET'. Logs successful MESSAGEs as an OBJECT
                                  #Once per day
                                  #Is a CSV file with MESSAGE rows and SMS_USAGE columns
SMS_USAGE[0]                      #DATE_NUM
SMS_USAGE[1]                      #MESSAGE_MID
SMS_USAGE[2]                      #'PHONE_NUMBER'
SMS_USAGE[3]                      #SMS_ATTRS.DefaultSMSType
SMS_USAGE[4]                      #STR. Delivery status???
SMS_USAGE[5]                      #NUM. Price in USD
SMS_USAGE[6]                      #NUM. Part number
SMS_USAGE[7]                      #NUM. Total number of parts

                                  ┌───────────────────────┐
                                  │   SMS SETTINGS AUTH   │
                                  └───────────────────────┘

PACTION s3:ListBucket             #For SMS_ATTRS.UsageReportS3Bucket, must be allowed:
 |GetBucketLocation|PutObject     #  - on Resource BUCKET_ARN
                                  #  - for Principal.Service sns.amazonaws.com

                                  ┌──────────────────────┐
                                  │   SMS SETTINGS API   │
                                  └──────────────────────┘

SetSMSAttributes()                #Req: SMS_SETTINGS
                                  #Res: empty
GetSMSAttributes()                #Req: SMS_SETTINGS
                                  #  - attributes OBJ -> 'SMS_ATTR'_ARR
                                  #Res: SMS_SETTINGS

                                  ┌──────────────────────┐
                                  │   SMS SETTINGS IAC   │
                                  └──────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DisplayName

CTOPIC_OPTS.displayName           #TOPIC_ATTRS.*

                                  ┌──────────────────────────┐
                                  │   SMS SETTINGS METRICS   │
                                  └──────────────────────────┘

AWS/SNS/SMSSuccessRate            #NUM/s of SMSs sent

AWS/SNS/SMSMonthToDateSpentUSD    #NUM of USD charged for sending SMS since start of month

DVAR PhoneNumber                  #'PHONE_NUMBER'
                                  #Only when using MESSAGE.PhoneNumber
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD
DVAR Country                      #Destination 'COUNTRY'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
DVAR SMSType                      #SMS_ATTRS.DefaultSMSType
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate

                                  ┌──────────────────────────────┐
                                  │   SMS SETTINGS METRICS IAC   │
                                  └──────────────────────────────┘

ICTOPIC.metricSMSSuccessRate
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'
ICTOPIC
 .metricSMSMonthToDateSpentUSD
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Maximum'

                                  ┌────────────────┐
                                  │   SMS SENDER   │
                                  └────────────────┘

SMS_SENDER                        #Phone number used when sending SMS
SMS_SENDER.CreatedAt              #DATE_NUM
SMS_SENDER.PhoneNumber            #'PHONE_NUMBER'

SMS_SENDER.Iso2CountryCode        #'COUNTRY_CODE' (2 chars, ISO 3166-1 alpha-2)
SMS_SENDER.NumberCapabilities     #STR_ARR among 'SMS', 'MMS', 'VOICE'
SMS_SENDER.RouteType              #SMS_ATTRS.DefaultSMSType
SMS_SENDER.Status                 #'ACTIVE' or 'INACTIVE'

                                  ┌────────────────────┐
                                  │   SMS SENDER API   │
                                  └────────────────────┘

ListOriginationNumbers()          #Req: empty
                                  #Res: PhoneNumbers SMS_SENDER_ARR

                                  ┌───────────────┐
                                  │   SMS ALLOW   │
                                  └───────────────┘

SMS_UI_SETTINGS.OptInMethod       #How receivers opt in to SMSs???

SMS_BLOCK.phoneNumber             #'PHONE_NUMBER'
SMS_BLOCK.isOptedOut              #BOOL. Whether PHONE_NUMBER blocked our number
                                  #Can be set from false to true, but only once per PHONE_NUMER per 30 days

                                  ┌───────────────────┐
                                  │   SMS ALLOW API   │
                                  └───────────────────┘

OptInPhoneNumber()                #Req: SMS_BLOCK
                                  #  - no isOptedOut
                                  #Res: empty
ListPhoneNumbersOptedOut()        #Req: empty
                                  #Res: phoneNumbers 'PHONE_NUMBER'_ARR
CheckIfPhoneNumberIsOptedOut()    #Req: SMS_BLOCK
                                  #  - no isOptedOut
                                  #Res: SMS_BLOCK
                                  #  - only isOptedOut

                                  ┌─────────────────┐
                                  │   SMS SANDBOX   │
                                  └─────────────────┘

SMS_SANDBOX.IsInSandbox           #BOOL. Wheter in sandbox
                                  #ACCOUNT is initially in sandbox
                                  #Per REGION

EXITING THE SANDBOX ==>           #Test at least one SMS_SANDBOX_RECEIVER
                                  #Then create a AWS Support case to exit the sandbox
                                  #  - under "Service quota increase" > "SNS Text Messaging"
                                  #Takes up to 24h

                                  ┌─────────────────────┐
                                  │   SMS SANDBOX API   │
                                  └─────────────────────┘

GetSMSSandboxAccountStatus()      #Req: empty
                                  #Res: SMS_SANDBOX

                                  ┌──────────────────────────┐
                                  │   SMS SANDBOX RECEIVER   │
                                  └──────────────────────────┘

SMS_SANDBOX_RECEIVER              #When in sandbox, can only send to SMS_SANDBOX_RECEIVERs
                                  #I.e. requires OTP confirmation from receivers
SMS_SANDBOX_RECEIVER.PhoneNumber  #'PHONE_NUMBER'

SMS_SANDBOX_RECEIVER              #STR. Token allowing receiving SMSs
 .OneTimePassword                 #Sent by CreateSMSSandboxPhoneNumber(), must be confirmed by VerifySMSSandboxPhoneNumber()
                                  #5-8 digits
SMS_SANDBOX_RECEIVER.LanguageCode #Language used with the token's SMS
                                  #Among "en-US|GB", "es-ES|419", "de-DE", "fr-CA|FR", "it-IT", "ja-JP", "pt-BR", "kr-KR", "zh-CN|TW"
SMS_SANDBOX_RECEIVER.Status       #'Pending' or 'Verified'. Whether confirmed with token

                                  ┌──────────────────────────────┐
                                  │   SMS SANDBOX RECEIVER API   │
                                  └──────────────────────────────┘

CreateSMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - no Status
                                  #Res: empty
VerifySMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - only PhoneNumber
                                  #  - only one with OneTimePassword
                                  #Res: empty
ListSMSSandboxPhoneNumbers()      #Req: empty
                                  #Res: PhoneNumbers SMS_SANDBOX_RECEIVER_ARR
                                  #  - no LanguageCode
DeleteSMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - only PhoneNumber
                                  #Res: empty

                                  ┌──────────────────┐
                                  │   APP ENDPOINT   │
                                  └──────────────────┘

SUB.Protocol                      #'application'. Send as a mobile|desktop push notification
SUB.Endpoint
APP_ENDPOINT.EndpointArn          #'APP_ENDPOINT_ARN'
MESSAGE.TargetArn                 #'APP_ENDPOINT_ARN', specified instead of MESSAGE.TopicArn
                                  #I.e. send a MESSAGE without using a TOPIC
APP_ENDPOINT.Attributes           #APP_ENDPOINT_ATTRS

APP_ENDPOINT                      #Mobile device
                                  #Creating is idempotent

APP_ENDPOINT_ATTRS.Enabled        #BOOL. False until 'APP_TOKEN' set
APP_ENDPOINT.Token                #'APP_TOKEN'

APP_ENDPOINT.CustomUserData       #STR. Arbitrary data???
                                  #Max 2KB

APP_PLATFORM_ATTRS
 .EventEndpointCreated            #'TOPIC_ARN'. Send MESSAGEs on CreatePlatformEndpoint()
APP_PLATFORM_ATTRS
 .EventEndpointUpdated            #'TOPIC_ARN'. Send MESSAGEs on SetEndpointAttributes()
APP_PLATFORM_ATTRS
 .EventEndpointDeleted            #'TOPIC_ARN'. Send MESSAGEs on DeleteEndpoint()
APP_PLATFORM_ATTRS
 .EventDeliveryFailure            #'TOPIC_ARN'. Send MESSAGEs on push failure

                                  ┌──────────────────────┐
                                  │   APP ENDPOINT API   │
                                  └──────────────────────┘

CreatePlatformEndpoint()          #Req: APP_ENDPOINT
                                  #  - no EndpointArn
                                  #Res: APP_ENDPOINT
                                  #  - only EndpointArn
SetEndpointAttributes()           #Req: APP_ENDPOINT
                                  #  - only EndpointArn, Attributes
                                  #  - CustomUserData|Token -> Attributes.*
                                  #Res: empty
ListEndpointsByPlatformApplication#Req: APP_ENDPOINT
 ()                               #  - only PlatformApplicationArn
                                  #Res: Endpoints APP_ENDPOINT_ARR
                                  #  - only EndpointArn, Attributes
GetEndpointAttributes()           #Req: APP_ENDPOINT
                                  #  - only Attributes
                                  #  - CustomUserData|Token -> Attributes.*
                                  #Res: empty
DeleteEndpoint()                  #Req: APP_ENDPOINT
                                  #  - only EndpointArn
                                  #Res: empty

                                  ┌──────────────────┐
                                  │   APP PLATFORM   │
                                  └──────────────────┘

APP_PLATFORM                      #Push notification settings
APP_ENDPOINT|APP_PLATFORM
 .PlatformApplicationArn          #'APP_PLATFORM_ARN'. 'arn:aws:sns:REGION:ACCOUNT_ID:app/APP_PLATFORM_TYPE/APP_PLATFORM'
APP_PLATFORM.Name                 #'APP_PLATFORM'
                                  #Max 256 chars, [:alnum:]_-.
APP_PLATFORM.Attributes           #APP_PLATFORM_ATTRS

APP_PLATFORM.Platform             #'APP_PLATFORM_TYPE'. Listed below
APP_PLATFORM_ATTRS
 .AuthenticationMethod            #Same???

APP_PLATFORM_ATTRS
 .PlatformPrincipal               #APP_PLATFORM_TYPE-specific developer ID
APP_PLATFORM_ATTRS
 .PlatformCredential              #APP_PLATFORM_TYPE-specific developer secret key

                                  ┌──────────────────────────┐
                                  │   APP PLATFORM ANDROID   │
                                  └──────────────────────────┘

APP_PLATFORM.Platform             #'GCM' (Firebase Cloud Messaging)
                                  #For Android|iOS or web app, using Google Cloud
APP_PLATFORM_ATTRS
 .PlatformPrincipal               #None
APP_PLATFORM_ATTRS                #Either:
 .PlatformCredential              #  - API key
                                  #  - JSON private key file

                                  ┌────────────────────────┐
                                  │   APP PLATFORM CHINA   │
                                  └────────────────────────┘

APP_PLATFORM.Platform             #'Baidu' (Baidu Cloud Push)
                                  #For Android in China
APP_PLATFORM_ATTRS
 .PlatformPrincipal               #Public API key
APP_PLATFORM_ATTRS
 .PlatformCredential              #Secret key

                                  ┌────────────────────────┐
                                  │   APP PLATFORM APPLE   │
                                  └────────────────────────┘

APP_PLATFORM.Platform             #'APNS[_SANDBOX]' (Apple Push Notification Service)
                                  #For iOS and Mac OS X
APP_PLATFORM_ATTRS                #Either:
 .PlatformPrincipal               #  - SSL certificate
                                  #  - signing key ID
APP_PLATFORM_ATTRS                #If using PlatformPrincipal:
 .PlatformCredential              #  - SSL certificate: private key
                                  #  - signing key ID: signing key

APP_PLATFORM_ATTRS
 .ApplePlatformTeamID             #STR. Apple developer account team ID
APP_PLATFORM_ATTRS
 .ApplePlatformBundleID           #STR. iOS app ID
APP_PLATFORM_ATTRS
 .AppleCertificateExpiryDate      #DATE_NUM of SSL certificate expiration

                                  ┌────────────────────────────────┐
                                  │   APP PLATFORM WINDOWS PHONE   │
                                  └────────────────────────────────┘

APP_PLATFORM.Platform             #'MPNS' (Microsoft Push Notification Service)
                                  #For Windows Phone
APP_PLATFORM_ATTRS
 .PlatformPrincipal               #TLS certificate
APP_PLATFORM_ATTRS
 .PlatformCredential              #Private key

                                  ┌──────────────────────────────────┐
                                  │   APP PLATFORM WINDOWS DESKTOP   │
                                  └──────────────────────────────────┘

APP_PLATFORM.Platform             #'WNS' (Windows Push Notification Services)
                                  #For Windows desktop
APP_PLATFORM_ATTRS
 .PlatformPrincipal               #Package Security Identifier
APP_PLATFORM_ATTRS
 .PlatformCredential              #Secret key

                                  ┌──────────────────────────┐
                                  │   APP PLATFORM FIRE OS   │
                                  └──────────────────────────┘

APP_PLATFORM.Platform             #'ADM' (Amazon Device Messaging)
                                  #For Fire OS
APP_PLATFORM_ATTRS
 .PlatformPrincipal               #Client ID
APP_PLATFORM_ATTRS
 .PlatformCredential              #Client secret

                                  ┌──────────────────────┐
                                  │   APP PLATFORM API   │
                                  └──────────────────────┘

CreatePlatformApplication()       #Req: APP_PLATFORM
                                  #  - no PlatformApplicationArn
                                  #  - Attributes: no AppleCertificateExpiryDate, AuthenticationMethod,
                                  #    *FeedbackRoleArn, SuccessFeedbackSampleRate
                                  #Res: APP_PLATFORM
                                  #  - only PlatformApplicationArn
SetPlatformApplicationAttributes()#Req: APP_PLATFORM
                                  #  - only PlatformApplicationArn, Attributes
                                  #  - Attributes: no AppleCertificateExpiryDate, AuthenticationMethod,
                                  #    *FeedbackRoleArn, SuccessFeedbackSampleRate
                                  #Res: empty
ListPlatformApplications()        #Req: empty
                                  #Res: PlatformApplications APP_PLATFORM_ARR
                                  #  - only PlatformApplicationArn, Attributes
GetPlatformApplicationAttributes()#Req: APP_PLATFORM
                                  #  - only PlatformApplicationArn
                                  #Res: APP_PLATFORM
                                  #  - only Attributes: no PlatformCredential, PlatformPrincipal
DeletePlatformApplication()       #Req: APP_PLATFORM
                                  #  - only PlatformApplicationArn
                                  #Res: empty

                                  ┌──────────────────────────┐
                                  │   APP PLATFORM METRICS   │
                                  └──────────────────────────┘

DVAR Application                  #'APP_PLATFORM'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
DVAR Platform                     #'APP_PLATFORM_TYPE'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
