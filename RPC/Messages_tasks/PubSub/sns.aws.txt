
                                  ┏━━━━━━━━━┓
                                  ┃   SNS   ┃
                                  ┗━━━━━━━━━┛

VERSION ==>                       #2024-09-24

TODO:
  - go through this whole doc again
  - add summary
  - update aws_list_services with what SNS does

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

NAME ==>                          #Simple Notification Service

SERVICE_DOMAIN                    #sns.amazonaws.com

SVERSION                          #'2010-03-31'

FORMAT ==>                        #Request: query parameters (ARR uses VAR.NUM)
                                  #Response: XML
                                  #Uses REQ.Action|Version

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Uses REQ|RES.NextToken
                                  #Uses REQ.MaxResults only with:
                                  #  - ListOriginationNumbers() (def|max 30)
                                  #  - ListSMSSandboxPhoneNumbers() (def|max 100)
                                  #No pagination: ListTagsForResource()
                                  #Others: page size always 100

THROTTLING ==>                    #3000|900|150|30/s (REGION-specific, soft): *Topic*(), ConfirmSubscription(),
                                  # *SubscriptionAttributes(), GetDataProtectionPolicy(), *Platform|Endpoint*()
                                  #100/s: [Un]Subscribe()
                                  #50/s: CheckIfPhoneNumberIsOptedOut()
                                  #30/s: ListTopics(), ListSubscriptions[ByTopic](), ListEndpointsByPlatformApplication()
                                  #20/s: GetSMSAttributes(), OptInPhoneNumber()
                                  #15/s: ListPlatformApplications()
                                  #10/s: *Permission*(), *Tag*(), ListPhoneNumbersOptedOut(), GetSMSSandboxAccountStatus()
                                  #1/s (soft): PutDataProtectionPolicy()
                                  #1/s: *SMSSandboxPhoneNumber*(), SetSMSAttributes(), ListOriginationNumbers()

PRICING ==>                       #1$ per 2e6 API calls
                                  #  - for any API call
                                  #     - including Publish(), PublishBatch(), Subscribe(), etc.
                                  #  - free: 1e6/month
                                  #  - FIFO Publish[Batch](): 30% more expensive + 1$ per 60GB request payload
                                  #  - if request payload >64KB, (size % 64KB) times more expensive
                                  #NOTIFICATIONs:
                                  #  - HTTP: 1$ per 1.7e6 NOTIFICATIONs
                                  #     - free: 1e5/month
                                  #  - Lambda: cost of Lambda
                                  #  - SQS: cost of SQS
                                  #     - FIFO: 1$ per 1e8 NOTIFICATIONs + 1$ per 1TB request payload
                                  #  - Kinesis: cost of Kinesis + 1$ per 5e6 NOTIFICATIONs
                                  #  - email: 1$ per 5e4 NOTIFICATIONs
                                  #     - free: 1e3/month
                                  #  - SMS: cost of End User Messaging SMS
                                  #  - push: 1$ per 2e6 NOTIFICATIONs
                                  #     - free: 1e6/month
                                  #  - if request payload >64KB, (size % 64KB) times more expensive (except with FIFO)
                                  #1$ per 11GB of API's response payload
                                  #  - not request payload
                                  #  - free: first 15GB/month, shared with all other AWS services
                                  #  - 6% cheaper after 10TB, 22% after 50TB, 44% after 150TB
                                  #  - max 500 TB/month (soft)
                                  #FILTERS:
                                  #  - 1$ per 11GB of MESSAGE_BODY (min 1KB per MESSAGE)
                                  #  - only if SUB_ATTRS.FilterPolicyScope 'MessageBody'
                                  #REPLAY:
                                  #  - 1$ per 45GB archived (min 1 day per MESSAGE)
                                  #  - 1$ per 10GB replayed
                                  #MASK_OP.Deidentify|Deny: 1$ per 12GB MESSAGE_BODY (min 1KB per MESSAGE)
                                  #MASK_OP.Audit: 1$ per 5GB of logs

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AmazonSNSFullAccess               #AWS managed POLICY. Allows all 'sns:*' PACTIONs
                                  #Also allows sms-voice:PACTION (SMS|Voice with AWS End User Messaging):
                                  #  - DestinationNumber*, SendTextMessage, SetTextMessageSpendLimitOverride, DescribeAccountAttributes,
                                  #    DescribeSpendLimits, DescribePhoneNumbers, DescribeOptedOutNumbers, DeleteOptedOutNumber
                                  #  - COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
AmazonSNSReadOnlyAccess           #Same but readonly

                                  ┌─────────────┐
                                  │   METRICS   │
                                  └─────────────┘

AWS/Usage/CallCount               #NUM of API calls
                                  #With DVAR Resource 'PACTION'

                                  ┌───────────┐
                                  │   TOPIC   │
                                  └───────────┘

TOPIC                             #Forwards MESSAGEs to SUBs
                                  #Creating|deleting is idempotent
                                  #Max 1e5 (soft) non-FIFO TOPICs, 1e3 (soft) FIFO TOPICs
TOPIC.TopicArn                    #'TOPIC_ARN'. 'arn:aws:sns:REGION:ACCOUNT_ID:TOPIC'
TOPIC.Name                        #'TOPIC'
                                  #Max 256 chars, [:alnum:]-_
TOPIC.Attributes                  #TOPIC_ATTRS

TOPIC_ATTRS.TracingConfig         #Whether X-Ray is passed to SUBs: 'PassThrough' (no, def) or 'Active' (yes)
                                  #Not on FIFO

                                  ┌───────────────┐
                                  │   TOPIC API   │
                                  └───────────────┘

CreateTopic()                     #Req: TOPIC
                                  #  - no TopicArn
                                  #  - Attributes: no Owner, EffectiveDeliveryPolicy, Subscriptions*,
                                  #    BeginningArchiveTime, *Feedback*
                                  #Res: TOPIC
                                  #  - only TopicArn
SetTopicAttributes()              #Req: TOPIC
                                  #  - only TopicArn, Attributes -> AttributeName 'TOPIC_ATTR', AttributeValue STR
                                  #  - Attributes: no Owner, EffectiveDeliveryPolicy, Subscriptions*,
                                  #    BeginningArchiveTime, FifoTopic
                                  #Res: empty
ListTopics()                      #Req: empty
                                  #Res: Topic TOPIC_ARR
                                  #  - only TopicArn
GetTopicAttributes()              #Req: TOPIC
                                  #  - only TopicArn
                                  #Res:
                                  #  - only Attributes: no *Feedback*
                                  #  - only TopicArn -> Attributes.TopicArn
DeleteTopic()                     #Req: TOPIC
                                  #  - only TopicArn
                                  #Res: empty

                                  ┌───────────────┐
                                  │   TOPIC IAC   │
                                  └───────────────┘

AWS::SNS::Topic                   #RESPROPs: TopicName, TracingConfig
                                  #RESATTRs: TopicArn, TopicName

new Topic(...CARGS[, CTOPIC_OPTS])#CTOPIC
Topic.fromTopicAttributes
 (...CARGS, OPTS)->ICTOPIC        #Using OPTS: topicArn, contentBasedDeduplication
Topic.fromTopicArn
 (...CARGS, 'TOPIC_ARN')->ICTOPIC #Same but only setting OPTS.topicArn

ICTOPIC.topicArn                  #'TOPIC_ARN'[_TK]
CTOPIC_OPTS.topicName             #TOPIC.Name
ICTOPIC.topicName                 #'TOPIC'[_TK]

CTOPIC_OPTS.tracingConfig         #TOPIC_ATTRS.TracingConfig

                                  ┌───────────────┐
                                  │   TOPIC SAM   │
                                  └───────────────┘

SNSCrudPolicy                     #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:CreateTopic|SetTopicAttributes, sns:Subscribe|ListSubscriptionsByTopic and sns:Publish
                                  #  - on 'TOPIC*'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName

                                  ┌────────────────────┐
                                  │   TOPIC COMPOSER   │
                                  └────────────────────┘

TOPIC ENHANCEMENT COMPONENT ==>   #Includes only TOPIC

                                  ┌───────────────────┐
                                  │   TOPIC METRICS   │
                                  └───────────────────┘

DVAR TopicName                    #'TOPIC'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
                                  #TOPIC is also sent as a metric TELEMETRY_ENTITY

INACTIVE TOPIC ==>                #TOPIC without any API calls for 6h+
                                  #Does not send any more METRICs
                                  #API calls includes GetTopicAttributes(), i.e. can be used to re-activate
                                  #Re-activating takes up to 15m

AWS/Usage/ResourceCount           #NUM of TOPICs
                                  #With DVAR Resource 'ApproximateNumberOfTopics'

                                  ┌───────────────────────┐
                                  │   TOPIC METRICS IAC   │
                                  └───────────────────────┘

ICTOPIC.metric
 ('METRIC'[, CMETRIC_OPTS])
 ->CMETRIC                        #Also sets DVAR TopicName

CFACADE.monitorSnsTopic
 (CXMONITORING_OPTS)              #See cdk-monitoring-constructs doc
CXMONITORING_OPTS.topic           #ICTOPIC

                                  ┌────────────────┐
                                  │   TOPIC TAGS   │
                                  └────────────────┘

TOPIC_TAGS.ResourceArn            #'TOPIC_ARN'
TOPIC[_TAGS].Tags                 #TAG_PAIRS

                                  ┌────────────────────┐
                                  │   TOPIC TAGS API   │
                                  └────────────────────┘

TagResource()                     #Req: TOPIC_TAGS
                                  #Res: empty
ListTagsForResource()             #Req: TOPIC_TAGS
                                  #  - only ResourceArn
                                  #Res: TOPIC_TAGS
                                  #  - only Tags
UntagResource()                   #Req: TOPIC_TAGS
                                  #  - Tags OBJ -> TagKeys STR_ARR
                                  #Res: empty

                                  ┌────────────────────┐
                                  │   TOPIC TAGS IAC   │
                                  └────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: Tags TAG_PAIRS

                                  ┌──────────────────┐
                                  │   SUBSCRIPTION   │
                                  └──────────────────┘

SUB                               #Forwards MESSAGEs to an endpoint
                                  #Must be same ACCOUNT|REGION as TOPIC
                                  #Can be multiple per TOPIC ("Fanout")
                                  #Max 12.5e6 (soft) per non-FIFO TOPIC, 100 (soft) per FIFO TOPIC
SUB.SubscriptionArn               #'SUB_ARN'. 'TOPIC_ARN:SUB_MID'
SUB.TopicArn                      #'TOPIC_ARN'
SUB.Attributes                    #SUB_ATTRS

SUB.Protocol                      #'PROTOCOL':
                                  #  - "A2A" (Application-to-application): 'http[s]', 'lambda', 'sqs', 'firehose'
                                  #  - "A2P" (Application-to-person): 'email[-json]', 'sms', 'application'
                                  #     - "custom-managed": A2P or HTTP
                                  #Each documented below
SUB.Endpoint                      #PROTOCOL-specific destination, defined below

                                  ┌───────────────────────┐
                                  │   SUBSCRIPTION AUTH   │
                                  └───────────────────────┘

COND_KEY sns:Protocol
COND_KEY sns:Endpoint             #SUB.*. Only with Subscribe()

                                  ┌──────────────────────┐
                                  │   SUBSCRIPTION API   │
                                  └──────────────────────┘

Subscribe()                       #Req: SUB
                                  #  - no SubscriptionArn, Owner
                                  #  - Attributes: no *Confirmation*, EffectiveDeliveryPolicy
                                  #Res: SUB
                                  #  - only SubscriptionArn
SetSubscriptionAttributes()       #Req: SUB
                                  #  - only SubscriptionArn, Attributes -> AttributeName 'SUB_ATTR', AttributeValue STR
                                  #  - Attributes: no *Confirmation*, EffectiveDeliveryPolicy
                                  #Res: empty
ListSubscriptions()               #Req: empty
                                  #Res: Subscriptions SUB_ARR
                                  #  - no Attributes, ReturnSubscriptionArn
ListSubscriptionsByTopic()        #Req: SUB
                                  #  - only TopicArn
                                  #Res: Subscriptions SUB_ARR
                                  #  - no Attributes, ReturnSubscriptionArn
GetSubscriptionAttributes()       #Req: SUB
                                  #  - only SubscriptionArn
                                  #Res: SUB
                                  #  - only Attributes
                                  #  - only Owner|*Arn -> Attributes.Owner|*Arn
Unsubscribe()                     #Req: SUB
                                  #  - only SubscriptionArn
                                  #Res: empty

                                  ┌──────────────────────┐
                                  │   SUBSCRIPTION IAC   │
                                  └──────────────────────┘

AWS::SNS::Subscription            #RESPROPs: TopicArn, Protocol, Endpoint
                                  #RESATTRs: Arn

AWS::SNS::Topic                   #Includes RESPROPs: Subscription OBJ_ARR: Protocol, Endpoint
                                  #Creates SUB but does not delete it, i.e. meant for SUBs created in other STACKs

new Subscription
 (...CARGS, CSUB_OPTS)            #CSUB
ICTOPIC.addSubscription(CCSUB)
 ->CSUB                           #
new PROTOCOLSubscription          #CCSUB. Each one is documented below
 (CSUB_OPTS.endpoint[, CSUB_OPTS])#Automatically sets CSUB_OPTS.topic|protocol|region

CSUB_OPTS.topic                   #ICTOPIC. SUB.TopicArn
CSUB_OPTS.protocol                #SUB.Protocol
CSUB_OPTS.endpoint                #SUB.Endpoint

CTOPIC.grantSubscribe(YGRANTABLE)
 ->CGRANT                         #Allows sns:Subscribe

                                  ┌──────────────────────────┐
                                  │   SUBSCRIPTION METRICS   │
                                  └──────────────────────────┘

TOPIC_ATTRS.SubscriptionsDeleted  #NUM of Unsubscribe()

                                  ┌─────────────┐
                                  │   CONFIRM   │
                                  └─────────────┘

SUB_CONFIRM                       #Confirms SUB creation
                                  #PROTOCOL-specific (each documented below)
                                  #Cannot delete SUB while pending
                                  #Delete SUB after 2 days if no SUB_CONFIRM
                                  #Max 5e3 (soft) pending SUB_CONFIRMs per ACCOUNT
SUB_CONFIRM.TopicArn              #'TOPIC_ARN'

NOTIFICATION.Type                 #Can be:
                                  #  - 'Notification': on Publish()
                                  #  - 'SubscriptionConfirmation': on Subscribe(), if SUB_CONFIRM needed
                                  #  - 'UnsubscribeConfirmation': on anonymous Unsubscribe()
NOTIFICATION.Subject              #Not set with Type '*Confirmation'

SUB_CONFIRM                       #'BOOL'. Whether Unsubscribe():
 .AuthenticateOnUnsubscribe       #  - 'true': must be called in TOPIC|SUB.Owner's ACCOUNT_ID
                                  #  - 'false' (def): can be anonymous (no AWS signature)
                                  #ConfirmSubscription() itself can always be anonymous
                                  #  - if so, AuthenticateOnUnsubscribe cannot be set, i.e. must remain 'false'
                                  #Anonymous ConfirmSubscription|Unsubscribe():
                                  #  - can use GET method, i.e. provide as URL
                                  #    'https://sns.REGION.amazonaws.com/?Action=ConfirmSubscription|Unsubscribe&PARAM=VAL'
                                  #  - not logged to CloudTrail
SUB_ATTRS
 .ConfirmationWasAuthenticated    #BOOL. Whether SUB_CONFIRM was authenticated

NOTIFICATION.Token                #STR. Only set if NOTIFICATION.Type '*Confirmation'
SUB_CONFIRM.Token                 #NOTIFICATION.Token. Authenticate anonymous ConfirmSubscription()
                                  #Not used by Unsubscribe()
                                  #  - however, forging requires knowing TOPIC_MID, ACCOUNT_ID and REGION
                                  #  - but if could be a problem, should use SUB_CONFIRM.AuthenticateOnUnsubscribe true

NOTIFICATION.SubscribeURL         #'URL' to anonymous ConfirmSubscription(), including NOTIFICATION.Token
                                  #I.e. 'https://sns.REGION.amazonaws.com/?Action=ConfirmSubscription&TopicArn=TOPIC_ARN&Token=STR'
                                  #Only if NOTIFICATION.Type '*Confirmation'
NOTIFICATION.UnsubscribeURL       #'URL' to anonymous Unsubscribe()
                                  #I.e. 'https://sns.REGION.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=SUB_ARN'
                                  #With any NOTIFICATION.Type

SUB_ATTRS.PendingConfirmation     #BOOL. Whether SUB_CONFIRM done

SUB.ReturnSubscriptionArn         #BOOL. If false (def), SUB.SubscriptionArn is 'pending confirmation' instead, if SUB_CONFIRM needed

                                  ┌─────────────────┐
                                  │   CONFIRM API   │
                                  └─────────────────┘

ConfirmSubscription()             #Req: SUB_CONFIRM
                                  #Res: SUB
                                  #  - only SubscriptionArn

                                  ┌─────────────────────┐
                                  │   CONFIRM METRICS   │
                                  └─────────────────────┘

TOPIC_ATTRS.SubscriptionsPending  #NUM of pending SUB_CONFIRMs
TOPIC_ATTRS.SubscriptionsConfirmed#NUM of ConfirmSubscription()

AWS/Usage/ResourceCount           #NUM of pending SUB_CONFIRMs
                                  #With DVAR Resource 'ApproximateNumberOfPendingSubscriptions'

                                  ┌─────────────┐
                                  │   MESSAGE   │
                                  └─────────────┘

MESSAGE                           #Payload sent from Publish*() to TOPIC
                                  #Max 256KB (soft)

MESSAGE_RES.MessageId             #'MESSAGE_MID'
MESSAGE.TopicArn                  #'TOPIC_ARN'

MESSAGE.Message                   #'MESSAGE_BODY'
                                  #No C0 control chars (except \t \n \r), surrogate (U+d800 to U+dfff), U+fffe|ffff

MESSAGE.MessageStructure          #If 'json' (def: undefined), MESSAGE_BODY is 'OBJ_JSON' of {PROTOCOL|default: 'MESSAGE_BODY', ...}
                                  #I.e. PROTOCOL-specific MESSAGE_BODY
                                  #`default` is required

MESSAGE
 .MessageAttributes.MESSAGE_ATTR  #ATTR_VALUE. Custom metadata
ATTR_VALUE.DataType               #Value's type among 'String[.Array]', 'Number[.Array]' or 'Binary'
                                  #Can append with any '.DESCRIPTION', e.g. 'Number.float', max 256 chars
ATTR_VALUE.StringValue            #STR. Value, when DataType 'String[.Array]|Number[.Array]'
                                  #'NUM' must be single-precision float
                                  #ARR is in JSON, i.e. '[NUM,...]' or '["STR",...]'
                                  #Must be [:print:]
ATTR_VALUE.BinaryValue            #STR. Value, when DataType 'Binary'
                                  #Must be base64'd

MESSAGE.Subject                   #STR. Title
                                  #Meaning is PROTOCOL-specific
                                  #Always optional

DATA REDUNDANCY ==>               #MESSAGEs are replicated on multiple AZs

ORDER ==>                         #Best effort, might be out-of-order
                                  #Not with SQS FIFO

DOUBLE PROCESSING ==>             #Sometimes, a MESSAGE might be delivered to a SUB more than once
                                  #I.e. processing should be idempotent
                                  #Not with SQS FIFO

                                  ┌─────────────────┐
                                  │   MESSAGE API   │
                                  └─────────────────┘

Publish()                         #Req: MESSAGE
                                  #Res: MESSAGE_RES

                                  ┌─────────────────┐
                                  │   MESSAGE SDK   │
                                  └─────────────────┘

ATTR_VALUE.BinaryValue            #INPUT_BLOB|OUTPUT_BLOB

EXTENDED CLIENT LIBRARY ==>       #Client built on top of Java|Python SDK, that automatically uploads|downloads|cleans up
                                  #big payloads to S3, replacing MESSAGE_BODY with S3 URL
                                  #Only meant to get over the size limit, since it does not lower cost (replacing SNS costs with S3 costs)
                                  #Repository is awslabs/amazon-sns-python|java-extended-client-lib
                                  #Shared logic with SQS extended client libary is at awslabs/payload-offloading-java-common-lib-for-aws

                                  ┌─────────────────┐
                                  │   MESSAGE IAC   │
                                  └─────────────────┘

CTOPIC.grantPublish(YGRANTABLE)
 ->CGRANT                         #Allows sns:Publish

                                  ┌─────────────────┐
                                  │   MESSAGE SAM   │
                                  └─────────────────┘

SNSPublishMessagePolicy           #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION sns:Publish
                                  #  - on 'TOPIC'
                                  #     - using POLICY_TEMPLATE_PARAMS.TopicName

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION or Step Functions STATE_MACHINE (RESOURCE_REF.RoleName)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing sns:Publish
                                  #  - on TOPIC

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: EventBridge RULE (RESOURCE_REF.Arn)
                                  #  - Destination: TOPIC (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a TOPIC_POLICY on TOPIC:
                                  #  - allowing SERVICE events.amazonaws.com
                                  #  - to sns:Publish
                                  #  - COND_KEY aws:SourceArn RULE_ARN

                                  ┌─────────────────────┐
                                  │   MESSAGE METRICS   │
                                  └─────────────────────┘

AWS/SNS/PublishSize               #Size of MESSAGEs
                                  #Excludes failed ones
                                  #cdk-monitoring-constructs:
                                  #  - average: METRIC, WIDGET

                                  ┌─────────────────────────┐
                                  │   MESSAGE METRICS IAC   │
                                  └─────────────────────────┘

ICTOPIC.metricPublishSize
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Average'

                                  ┌─────────────────────┐
                                  │   MESSAGE LOGGING   │
                                  └─────────────────────┘

CLOUDTRAIL ==>                    #Publish() is logged to CloudTrail as data EVENT
                                  #LOG_RESOURCE is:
                                  #  - PUSH_PLATFORM_TYPE if MESSAGE.TargetArn set
                                  #  - TOPIC else
                                  #Not logged if MESSAGE.PhoneNumber set

                                  ┌───────────┐
                                  │   BATCH   │
                                  └───────────┘

BATCH                             #Multiple MESSAGEs in a single API call
                                  #Max 10 entries (soft)
                                  #Max 256KB

BATCH.TopicArn                    #'TOPIC_ARN'
BATCH.PublishBatchRequestEntries  #BATCH_ENTRY_ARR
BATCH_ENTRY.Id                    #'BATCH_ENTRY_MID'. Required
                                  #Max 80 chars, [:alnum:]_-
BATCH_ENTRY.*                     #MESSAGE.* except no TopicArn, TargetArn, PhoneNumber

BATCH_RES.Successful              #BATCH_SUCCESS_ARR
BATCH_SUCCESS.Id                  #'BATCH_ENTRY_MID'
BATCH_SUCCESS.*                   #MESSAGE_RES

BATCH_RES.Failed                  #BATCH_ERROR_ARR
BATCH_ERROR.Id                    #'BATCH_ENTRY_MID'
BATCH_ERROR.Code                  #'CODE'
BATCH_ERROR.Message               #'MESSAGE'
BATCH_ERROR.SenderFault           #BOOL. Whether caused by user or by API

                                  ┌────────────────┐
                                  │   BATCH AUTH   │
                                  └────────────────┘

PACTION sqs:Publish               #Includes sns:PublishBatch, which does not have its own PACTION

                                  ┌───────────────┐
                                  │   BATCH API   │
                                  └───────────────┘

PublishBatch()                    #Req: BATCH
                                  #Res: BATCH_RES

                                  ┌───────────────────┐
                                  │   BATCH LOGGING   │
                                  └───────────────────┘

CLOUDTRAIL ==>                    #Like Publish()

                                  ┌──────────────────┐
                                  │   NOTIFICATION   │
                                  └──────────────────┘

NOTIFICATION                      #Payload sent from TOPIC to SUBs
                                  #I.e. one MESSAGE might lead to 0, 1 or several NOTIFICATIONs

SUB_ATTRS.RawMessageDelivery      #BOOL (def: false). Use MESSAGE_BODY itself as NOTIFICATION
                                  #As opposed to setting NOTIFICATION.* documented below
                                  #  - including NOTIFICATION.Message 'MESSAGE_BODY'

NOTIFICATION.Timestamp            #DATE_NUM

NOTIFICATION.Message              #MESSAGE.Message
                                  #Can JSON parse it using either
                                  #  - QUERY SNS JMESPath 'QUERY' (see its doc)
                                  #  - @middy/event-normalizer (see its doc)
                                  #     - including when invoked from SQS SUBSCRIPTION

NOTIFICATION.TopicArn|MessageId
 |MessageAttributes|Subject       #MESSAGE.*
NOTIFICATION.MessageAttributes    #MESSAGE_ATTRS except DataType -> Type, StringValue|BinaryValue -> Value

                                  ┌──────────────────────┐
                                  │   NOTIFICATION IAC   │
                                  └──────────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: RawMessageDelivery

CSUB_OPTS.rawMessageDelivery      #SUB_ATTRS.RawMessageDelivery

                                  ┌───────────────┐
                                  │   INTEGRITY   │
                                  └───────────────┘

TOPIC_ATTRS|NOTIFICATION          #ALGO used for the integrity signature. Either:
 .SignatureVersion                #  - '1' (def): 'sha1WithRSAEncryption'
                                  #  - '2' (recommended): 'sha256WithRSAEncryption'

NOTIFICATION.SigningCertURL       #'https://sns.REGION.amazon.com/SimpleNotificationService-ID.pem' to X509 certificate's PEM file
                                  #Should check that the URL follows this format, to avoid injection
                                  #Contents is 'PEM'
                                  #If fetched, should cache it for performance

NOTIFICATION.Signature            #'SIGNATURE_BASE64'. NOTIFICATION.* integrity signature

CRYPTO
 .createVerify('ALGO')
 .update('NOTIFICATION_ENTRIES')
 .verify('PEM',                   #Verifies integrity
 'SIGNATURE_BASE64', 'base64')    #Only useful if endpoint can be called by others than SNS
 ->BOOL                           #  - i.e. mostly useful for HTTP

NOTIFICATION_ENTRIES              #Ordered newline-separated list of NOTIFICATION.* key + value
                                  #For: Message, MessageId, Subject (if not null|undefined), SubscribeURL (if not undefined),
                                  # Timestamp, Token (if not null), TopicArn, Type
                                  #Not checked for integrity: MessageAttributes, UnsubscribeURL

                                  ┌───────────────────┐
                                  │   INTEGRITY SDK   │
                                  └───────────────────┘

sns-payload-validator             #Version 2.1.0
new Validator([OPTS])             #VALIDATOR

VALIDATOR.validate                #Checks NOTIFICATION.Signature
 (NOTIFICATION[_JSON])->>         #Throw if fails
                                  #Also validates that NOTIFICATION.SigningCertURL matches pattern above

OPTS.useCache                     #BOOL (def: true). Caches downloaded 'PEM' using lru-cache (see its doc)
OPTS.maxCerts                     #NUM (def: 1e3) of 'PEM' to cache

OPTS.requestAgent                 #HTTPS AGENT (def: none)

sns-validator                     #Original project sns-payload-validator is based on
                                  #Not well maintained, i.e. not documented yet
                                  #GitHub repository is aws/aws-js-sns-message-validator

                                  ┌───────────────────┐
                                  │   INTEGRITY IAC   │
                                  └───────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: SignatureVersion

CTOPIC_OPTS.signatureVersion      #TOPIC_ATTRS.SignatureVersion

                                  ┌────────────┐
                                  │   FILTER   │
                                  └────────────┘

SUB_ATTRS.FilterPolicy            #'FILTERS_JSON'. Filter which NOTIFICATIONs to receive
                                  #Updates take up to 15m to enter into effect
                                  #Max 200 per TOPIC (soft), 1e4 per ACCOUNT (soft)
                                  #Max 256KB

SUB_ATTRS.FilterPolicyScope       #Whether FILTERS are applied on:
                                  #  - 'MessageAttributes' (def)
                                  #     - not with DataType 'Binary'
                                  #  - 'MessageBody'
                                  #     - must be JSON

FILTERS.*                         #And'd, i.e. must all match
                                  #Empty MESSAGEs never match, even FILTER.exists false
FILTERS.$or                       #FILTERS_ARR
                                  #Can be combined with FILTERS.*, e.g. { PROP: ARR, $or: FILTERS_ARR }
                                  #Can be nested
                                  #Min 2 items

FILTERS.PROP[.PROP...]            #Filters depending on FilterPolicyScope:
                                  #  - MessageAttributes: MESSAGE_ATTRS.PROP
                                  #  - MessageBody: MESSAGE_BODY.PROP[.PROP...]
                                  #ARR of either:
                                  #  - STR|NUM|BOOL|null: ARR.includes() (case-sensitive)
                                  #  - FILTER (ARR has a single item)
                                  #Max 5 PROPs
                                  #Max 150 complexity, where complexity is the cartesian product of all FILTERS.*:
                                  #  - NUM of PROPs (key)
                                  #  - NUM of ARR items (value)
                                  #  - if nested $or, compute its complexity recursively

FILTER.anything-but               #ARR|FILTER. !ARR.includes() (case-sensitive)
FILTER.equals-ignore-case         #STR. === (case-insensitive)
FILTER.numeric                    #['OP', NUM[, 'OP2', NUM2]]
                                  #OP is = > >= < <=
                                  #Min|max NUM [-]1e9, 5 decimal points
FILTER.exists                     #BOOL. !==|=== null|undefined
FILTER.prefix|suffix              #STR. startsWith|endsWith(STR)
FILTER.cidr                       #'CIDR'. Matches IP

DATATYPE ARRAY ==>                #If DataType '*.Array':
                                  #  - matches if any item does, i.e. ARR2.some(VAL => ...): FILTER.anything-but
                                  #  - matches if all items do, i.e. ARR2.every(VAL => ...): ARR (ARR.includes())

                                  ┌────────────────┐
                                  │   FILTER IAC   │
                                  └────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: FilterPolicy OBJ, FilterDeliveryScope

CSUB_OPTS.filterPolicy.PROP       #CFILTER, when SUB_ATTRS.FilterPolicyScope 'MessageAttributes'
CSUB_OPTS
 .filterPolicyWithMessageBody
 .PROP                            #CNESTED_FILTER, when SUB_ATTRS.FilterPolicyScope 'MessageBody'

FilterOrPolicy.filter
 (CFILTER)->CNESTED_FILTER        #FILTERS.PROP
FilterOrPolicy.policy
 ({PROP: CNESTED_FILTER, ...})
 ->CNESTED_FILTER2                #FILTERS.PROP.PROP...

new SubscriptionFilter(ARR)       #CFILTER. FILTERS.PROP
                                  #Passes an ARR of VAL or FILTER

SubscriptionFilter.stringFilter
 (OPTS)->CFILTER                  #
OPTS.allowlist                    #ARR of VALs
OPTS.denylist                     #ARR. {anything-but: ARR}
OPTS.matchesPrefixes|Suffixes     #STR_ARR. Multiple {prefix|suffix: STR}

SubscriptionFilter.numericFilter
 (OPTS)->CFILTER                  #
OPTS.less|greaterThan[OrEqualTo]  #NUM. {numeric: ['OP', NUM]}
OPTS.between.start|stop           #NUM. {numeric: ['>=', NUM, '<=', NUM2]}
OPTS.betweenStrict.start|stop     #NUM. {numeric: ['>', NUM, '<', NUM2]}
OPTS.allowlist                    #ARR. Multiple {numeric: ['=', VAL]}

SubscriptionFilter.existsFilter()
 ->CFILTER                        #{exists: true}

                                  ┌────────────────────┐
                                  │   FILTER METRICS   │
                                  └────────────────────┘

AWS/SNS/
 NumberOfNotificationsFilteredOut #NUM of NOTIFICATIONs filtered out
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -MessageAttributes               #NUM of NOTIFICATIONs filtered out by MESSAGE_ATTRs
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -InvalidAttributes               #NUM of NOTIFICATIONs filtered out by MESSAGE_ATTRs due to them being invalid
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -NoMessageAttributes             #NUM of NOTIFICATIONs filtered out by MESSAGE_ATTRs due to not having any
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -MessageBody                     #NUM of NOTIFICATIONs filtered out by MESSAGE_BODY
AWS/SNS/
 NumberOfNotificationsFilteredOut
 -InvalidMessageBody              #NUM of NOTIFICATIONs filtered out by MESSAGE_BODY due to it being invalid

AWS/Usage/ResourceCount           #NUM of FILTER_POLICYs
                                  #With DVAR Resource 'ApproximateNumberOfFilterPolicies'

                                  ┌────────────────────────┐
                                  │   FILTER METRICS IAC   │
                                  └────────────────────────┘

ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'
ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 InvalidAttributes
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'
ICTOPIC.metricNumberOf
 NotificationsFilteredOut
 NoMessageAttributes
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

                                  ┌──────────────┐
                                  │   THROTTLE   │
                                  └──────────────┘

MESSAGE THROTTLING ==>            #Max MESSAGEs per second to each TOPIC
                                  #Not API calls, i.e. regardless of Publish[Batch]()
                                  #Is:
                                  #  - same REGION: 30000|9000|1500|300 (REGION-specific, soft) and 20MB/s
                                  #  - cross-REGIONs: 1000 (soft) and 6MB/s
                                  #  - FIFO SQS: 300/s per MESSAGE_GROUP
                                  #  - SMS: 20 (soft)
                                  #  - email: 10
                                  #Can workaround limit by using multiple TOPICs

DELIVERY_POLICY.throttlePolicy    #NUM (def: unlimited). Max NOTIFICATIONs per second from TOPIC to this SUB
 .maxReceivesPerSecond            #If too low, can create a backlog of MESSAGEs available in TOPIC but not sent to SUB
                                  #  - dropped after 1h

                                  ┌──────────────────┐
                                  │   THROTTLE IAC   │
                                  └──────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: throttlePolicy

CDELIVERY_POLICY.throttlePolicy   #DELIVERY_POLICY.*

                                  ┌──────────────────────┐
                                  │   THROTTLE METRICS   │
                                  └──────────────────────┘

AWS/SNS/NumberOfMessagesPublished #NUM of MESSAGEs sent to TOPICs
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET, MALARM Min|MaxNumberOfMessagesPublished <|> CXALARM_OPTS.min|maxMessagesPublishedCount

AWS/Usage/ResourceCount           #NUM of MESSAGEs sent to TOPICs
                                  #With DVAR Resource 'NumberOfMessagesPublishedPerAccount'

AWS/SNS/                          #NUM of NOTIFICATIONs successfully sent from TOPIC to SUBs
 NumberOfNotificationsDelivered   #Does not included filtered out MESSAGEs
                                  #Difference with AWS/SNS/NumberOfMessagesPublished is backlog
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET

                                  ┌──────────────────────────┐
                                  │   THROTTLE METRICS IAC   │
                                  └──────────────────────────┘

ICTOPIC
 .metricNumberOfMessagesPublished
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

ICTOPIC.metricNumberOf
 NotificationsDelivered
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

                                  ┌───────────┐
                                  │   RETRY   │
                                  └───────────┘

TOPIC_ATTRS.DeliveryPolicy        #'{PROTOCOL: DELIVERY_POLICY}' as JSON
                                  #DELIVERY_POLICY.*Policy -> default*Policy
SUB_ATTRS.DeliveryPolicy          #'DELIVERY_POLICY_JSON'
TOPIC_ATTRS|SUB_ATTRS
 .EffectiveDeliveryPolicy         #Same but also shows default values

DELIVERY_POLICY                   #Can only be set with HTTP
                                  #Other PROTOCOLs always use the default value
DELIVERY_POLICY                   #BOOL (def: false). Ignores SUB_ATTRS.DeliveryPolicy, i.e. only use TOPIC_ATTRS.DeliveryPolicy
 .disableSubscriptionOverrides    #Seems to be undocumented

DELIVERY_POLICY.healthyRetryPolicy#RETRY_POLICY. How to retry when fail to send NOTIFICATIONs from TOPIC to SUB
                                  #NOTIFICATION is considered failed once no more retries
                                  #Retries "server-side errors":
                                  #  - could not reach endpoint
                                  #     - e.g. HTTP server down, or AWS outage
                                  #  - 5** response
                                  #Does not retry "client-side errors":
                                  #  - invalid API call
                                  #     - including no endpoint (e.g. deleted QUEUE)
                                  #  - AWS auth error
                                  #  - 4** response
RETRY_POLICY.minDelayTarget       #NUM (in secs, min 1). Retry start delay
                                  #Def 20s with HTTP, 10s with email|SMS|push, 1s else
RETRY_POLICY.maxDelayTarget       #NUM (in secs, min minDelayTarget, max 1h). Retry end delay
                                  #Def 10m with email|SMS|push, 20s else
RETRY_POLICY.numRetries           #NUM. Max retries, including all phases
                                  #Def 3 with HTTP, 50 with email|SMS|push, 100_015 else
                                  #Max 100 with HTTP
RETRY_POLICY.numNoDelayRetries    #NUM. "Immediate retries": first phase, without any delay
                                  #Def 0 with HTTP|email|SMS|push, 3 else
RETRY_POLICY.numMinDelayRetries   #NUM. "Pre-backoff retries": second phase, with minDelayTarget
                                  #Def 0 with HTTP, 2 else
RETRY_POLICY.backoffFunction      #"Backoff retries": third phase, going from minDelayTarget to maxDelayTarget
                                  #One of (from linear to very exponential):
                                  #  - 'LINEAR' (def with HTTP)
                                  #  - 'ARITHMETIC'
                                  #  - 'GEOMETRIC'
                                  #  - 'EXPONENTIAL' (def else)
RETRY_POLICY.numMaxDelayRetries   #NUM. "Post-backoff retries": fourth phase, with maxDelayTarget
                                  #Def 0 with HTTP, 38 with email|SMS|push, 1e5 else

                                  ┌───────────────┐
                                  │   RETRY IAC   │
                                  └───────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: healthyRetryPolicy

CSUB_OPTS.deliveryPolicy          #CDELIVERY_POLICY. SUB_ATTRS.DeliveryPolicy
CDELIVERY_POLICY
 .healthyRetryPolicy              #CRETRY_POLICY. DELIVERY_POLICY.*
CRETRY_POLICY.min|maxDelayTarget  #DURATION
CRETRY_POLICY
 .num*Retries|backoffFunction     #RETRY_POLICY.*

                                  ┌───────────────────┐
                                  │   RETRY METRICS   │
                                  └───────────────────┘

AWS/SNS/                          #NUM of NOTIFICATIONs that failed to be sent from TOPIC to SUBs
 NumberOfNotificationsFailed      #Does not included filtered out MESSAGEs
                                  #With HTTP, includes retries too
                                  #cdk-monitoring-constructs:
                                  #  - sum: METRIC, summary WIDGET, MALARM MessageNotificationsFailed > CXALARM_OPTS.maxNotificationsFailedCount

                                  ┌───────────────────────┐
                                  │   RETRY METRICS IAC   │
                                  └───────────────────────┘

ICTOPIC.metricNumberOf
 NotificationsFailed
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

                                  ┌───────────────────┐
                                  │   RETRY LOGGING   │
                                  └───────────────────┘

LRES.attempts                     #NUM of retry attempts

                                  ┌───────────────────────┐
                                  │   DEAD-LETTER QUEUE   │
                                  └───────────────────────┘

SUB_ATTRS.RedrivePolicy           #'REDRIVE_POLICY_JSON'. Sends failed NOTIFICATIONs to SQS DLQ
                                  #For both client|server-side errors
                                  #After no more retries

REDRIVE_POLICY.deadLetterTargetArn#'QUEUE_ARN'
                                  #Must be in same ACCOUNT|REGION as SUB
                                  #Must be [non-]FIFO if TOPIC is [non-]FIFO

                                  ┌────────────────────────────┐
                                  │   DEAD-LETTER QUEUE AUTH   │
                                  └────────────────────────────┘

PACTION sqs:SendMessage           #Must be allowed:
                                  #  - for Resource QUEUE
                                  #  - on Principal.Service sns.amazonaws.com
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN
                                  #Must also allow kms:... if using SSE-KMS

                                  ┌───────────────────────────────┐
                                  │   DEAD-LETTER QUEUE METRICS   │
                                  └───────────────────────────────┘

AWS/SNS/
NumberOfNotificationsRedrivenToDlq#NUM of NOTIFICATIONs moved to DLQ

AWS/SNS/NumberOfNotifications
 FailedToRedriveToDlq             #NUM of NOTIFICATIONs which failed to be moved to DLQ

                                  ┌───────────────────────────┐
                                  │   DEAD-LETTER QUEUE IAC   │
                                  └───────────────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: RedrivePolicy: DeadLetterTargetArn

CSUB[_OPTS].deadLetterQueue       #ICQUEUE. SUB_ATTRS.RedrivePolicy
                                  #Automatically adds relevant permissions using CQUEUE_MPOLICY

                                  ┌────────────────────────────┐
                                  │   DEAD-LETTER QUEUE LINT   │
                                  └────────────────────────────┘

cfn-lint-serverless aws_sns_
 topic_subscription_redrive_policy
ES7000                            #SUB_ATTRS.RedrivePolicy must be set

                                  ┌────────────────┐
                                  │   ENCRYPTION   │
                                  └────────────────┘

TOPIC_ATTRS.KmsMasterKeyId        #KMS_ID (def: none). "SSE". Encrypts MESSAGE_BODY at rest
                                  #Does not encrypt other parts of MESSAGE.* (e.g. MESSAGE_ATTRS)
                                  #Can use AWS managed KMS key 'aws/sns'

                                  ┌─────────────────────┐
                                  │   ENCRYPTION AUTH   │
                                  └─────────────────────┘

PACTION                           #Must be allowed if SSE, on publishers and SUBs
 kms:Decrypt|GenerateDataKey*     #COND_KEY SourceArn|SourceAccount

                                  ┌────────────────────┐
                                  │   ENCRYPTION IAC   │
                                  └────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: KmsMasterKeyId

CTOPIC_OPTS.masterKey             #ICKEY. TOPIC_ATTRS.KmsMasterKeyId

CTOPIC_OPTS|CTOPIC_MPOLICY_OPTS   #BOOL (def: false, recommended: true). Adds a POLICY which denies sns:Publish on TOPIC from any PRINCIPAL
 .enforceSSL                      #if COND_KEY aws:SecureTransport false

                                  ┌─────────────────────┐
                                  │   ENCRYPTION LINT   │
                                  └─────────────────────┘

cdk-nag SNSTopicSSLPublishOnly    #Must set CTOPIC_OPTS.enforceSSL true, if SSE

                                  ┌─────────────┐
                                  │   LOGGING   │
                                  └─────────────┘

TOPIC_ATTRS                       #ROLE_ARN. Sends successful NOTIFICATIONs to CloudWatch Logs
 .PROTOCOLSuccessFeedbackRoleArn  #PROTOCOL is 'HTTP', 'Lambda', 'SQS', 'Firehose' or 'Application'
                                  #Not for email
                                  #TOPIC is sent as a logging TELEMETRY_ENTITY
                                  #Must be assumable by Principal.Service 'sns.amazonaws.com'
TOPIC_ATTRS
 .PROTOCOLFailureFeedbackRoleArn  #Same for failed NOTIFICATIONs
TOPIC_ATTRS                       #0-100. Percentage of successful NOTIFICATIONs to log
.PROTOCOLSuccessFeedbackSampleRate#Always implied to be 100 for failed NOTIFICATIONs

PUSH_PLATFORM_ATTRS.*             #Same as TOPIC_ATTRS.Application*
SMS_ATTRS.DeliveryStatusIAMRole
|DeliveryStatusSuccessSamplingRate#Same for SMS

sns/REGION/ACCOUNT_ID/TOPIC       #'LOG_GROUP' on success|failure
 [/Failure]                       #With SMS direct publish, TOPIC is 'DirectPublishToPhoneNumber'

LPAYLOAD                          #JSON LMESSAGE used in logs
LPAYLOAD.status                   #'SUCCESS|FAILURE'
LPAYLOAD.notification             #NOTIFICATION. Only timestamp|messageId|topicArn
LPAYLOAD.delivery                 #LRES
LRES.delivery                     #'REQ_ID'
LRES.destination                  #SUB.Endpoint
LRES.statusCode                   #STATUS_NUM from SUB response
LRES.providerResponse             #STR body from SUB response
LRES.dwellTimeMs                  #NUM (in ms). Duration between TOPIC and SUB

                                  ┌──────────────────┐
                                  │   LOGGING AUTH   │
                                  └──────────────────┘

PACTION iam:PassRole              #Must be allowed on current PRINCIPAL

PACTION logs:CreateLogGroup
 |CreateLogStream|PutLogEvents
 |PutMetricFilter
 |PutRetentionPolicy              #Must be allowed on success|failure ROLE

service-role/AmazonSNSRole        #AWS managed POLICY that allows PACTIONs:
                                  #  - logs:CreateLogGroup|PutMetricFilter|PutRetentionPolicy on any LOG_GROUP
                                  #  - logs:CreateLogStream|PutLogEvents on any LOG_STREAM

                                  ┌─────────────────┐
                                  │   LOGGING IAC   │
                                  └─────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DeliveryStatusLogging OBJ_ARR:
                                  #  - Protocol 'PROTOCOL'
                                  #  - SuccessFeedbackRoleArn, FailureFeedbackRoleArn, SuccessFeedbackSampleRate

CTOPIC_OPTS.loggingConfigs        #LOGGING_ARR
LOGGING.protocol                  #'PROTOCOL'
LOGGING.successFeedbackRole       #ICROLE. TOPIC_ATTRS.PROTOCOLSuccessFeedbackRoleArn
LOGGING.failureFeedbackRole       #ICROLE. TOPIC_ATTRS.PROTOCOLFailureFeedbackRoleArn
LOGGING.successFeedbackSampleRate #NUM. TOPIC_ATTRS.PROTOCOLSuccessFeedbackSampleRate

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

TOPIC_ATTRS.Policy                #IAM 'POLICY_DOC'. TOPIC_POLICY
                                  #Resource-level on a TOPIC, i.e. Resource is TOPIC_ARN
                                  #Principal must be 'ACCOUNT_ID'
                                  #  - this can be worked around using either:
                                  #     - COND_KEY aws:PrincipalArn or aws:SourceArn|SourceAccount
                                  #     - identity-level POLICY instead
                                  #PACTIONs are only cross-account ones
                                  #Def:
                                  #  - allows all cross-account PACTIONs except *DataProtectionPolicy* and ListTagsForResource
                                  #  - for any principal in current ACCOUNT: using Principal.AWS '*' + COND_KEY aws::SourceAccount 'ACCOUNT_ID'
                                  #Max 30KB, 100 STATEMENTs, 200 PRINCIPALs

PERMISSION                        #Sets TOPIC_ATTRS.Policy
                                  #POLICY_DOC.Id is 'arn:aws:sqs:REGION:ACCOUNT_ID/TOPIC/SNSDefaultPolicy'
PERMISSION.Label                  #STATEMENT.Sid
PERMISSION.TopicArn               #'TOPIC_ARN'. STATEMENT.Resource
PERMISSION.ActionName             #'PACTION|*'_ARR. STATEMENT.Actions
PERMISSION.AWSAccountIds          #'ACCOUNT_ID'_ARR. STATEMENT.Principal.AWS
                                  #Required

TOPIC_ATTRS|SUB.Owner             #'ACCOUNT_ID' that created TOPIC|SUB
SUB_ATTRS.SubscriptionPrincipal   #ARN of principal that created SUB

                                  ┌─────────────────┐
                                  │   POLICY AUTH   │
                                  └─────────────────┘

CROSS-ACCOUNT REQUESTS ==>        #Allowed by using Pricipal with another ACCOUNT, in TOPIC_POLICY
                                  #Only for PACTIONs DeleteTopic|*TopicAttributes, Subscribe|ListsubscriptionsByTopic, Publish,
                                  #*Permission, *DataProtectionPolicy*, ListTagsForResource

ANONYMOUS REQUESTS ==>            #Allowed by using Principal '*', in TOPIC_POLICY

PACTION sns:AddPermission
 |RemovePermission                #Do not require PACTION sns:SetTopicAttributes, even though they set TOPIC_ATTRS.Policy

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

AddPermission()                   #Req: PERMISSION
                                  #Res: empty
RemovePermission()                #Req: PERMISSION
                                  #  - only TopicArn, Label
                                  #Res: empty

                                  ┌────────────────┐
                                  │   POLICY IAC   │
                                  └────────────────┘

AWS::SNS::TopicInlinePolicy       #RESPROPs: PolicyDocument POLICY_DOC_OBJ, TopicArn 'TOPIC_ARN'
                                  #Is TOPIC_ATTRS.Policy, i.e. resource-level
                                  #With Cloud Control, cannot list

AWS::SNS::TopicPolicy             #RESPROPs: PolicyDocument POLICY_DOC_OBJ, Topics 'TOPIC_ARN'_ARR
                                  #RESATTR: Id POLICY_MID
                                  #Is a MPOLICY, i.e. identity-level
                                  #With Cloud Control, cannot read|list

new TopicPolicy(...CARGS, OPTS)   #CTOPIC_MPOLICY. AWS::SNS::TopicPolicy
OPTS.policyDocument
CTOPIC_MPOLICY.document           #CPOLICY_DOC (def: empty one)
OPTS.topics                       #ICTOPIC_ARR

CTOPIC                            #Is RGRANTABLE, using CTOPIC_MPOLICY
                                  #If ICTOPIC, is RGRANTABLE but noop
CTOPIC.grant*(...)                #Uses identity-based POLICY or (if fails) CTOPIC_MPOLICY
                                  #If cross-ACCOUNT, uses both

                                  ┌─────────────────┐
                                  │   MASK POLICY   │
                                  └─────────────────┘

TOPIC.DataProtectionPolicy        #'MASK_POLICY_JSON'
                                  #Handle sensitive data in MESSAGEs
                                  #Max 30KB

MASK_POLICY
 .Version|Name|Description        #Same as CloudWatch Logs
MASK_POLICY.Statement             #MASK_STATEMENT_ARR
MASK_STATEMENT.Sid                #'MASK_STATEMENT'
MASK_STATEMENT.Principal          #Like IAM STATEMENT.Principal, including '*'
                                  #If DataDirection:
                                  #  - 'Inbound': who called Publish*()
                                  #  - 'Outbound': who called Subscribe(), i.e. SUB_ATTRS.SubscriptionPrincipal
MASK_STATEMENT.DataDirection      #Applied on MESSAGEs sent:
                                  #  - 'Inbound': by Publish*() to TOPIC
                                  #  - 'Outbound': by TOPIC to SUB
MASK_STATEMENT.Operation          #MASK_OP

MASK_OP.Deidentify.MaskConfig
 .MaskWithCharacter               #Mask the value with 'CHAR'

MASK_OP.Deidentify.RedactConfig   #Delete the value

MASK_OP.Deny                      #Empty OBJ. Reject the MESSAGE

                                  ┌─────────────────────┐
                                  │   MASK POLICY API   │
                                  └─────────────────────┘

PutDataProtectionPolicy()         #Req: TOPIC
                                  #  - only DataProtectionPolicy, TopicArn -> ResourceArn
                                  #Res: empty
GetDataProtectionPolicy()         #Req: TOPIC
                                  #  - only TopicArn -> ResourceArn
                                  #Res: TOPIC
                                  #  - only DataProtectionPolicy

                                  ┌─────────────────────┐
                                  │   MASK POLICY IAC   │
                                  └─────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DataProtectionPolicy MASK_POLICY_OBJ

                                  ┌──────────────────────┐
                                  │   MASK DESTINATION   │
                                  └──────────────────────┘

MASK_OP.Audit                     #MASK_DESTINATION
 .FindingsDestination             #Send masked values to a destination
MASK_OP.Audit                     #MASK_DESTINATION
 .NoFindingsDestination           #Send MESSAGE to a destination when no marked values

MASK_OP.Audit.SampleRate          #0 to 100 (def). Only applied on NUM% of MESSAGEs

MASK_DESTINATION
 .CloudWatchLogs|S3|Firehose      #Like CloudWatch Logs, except 'LOG_GROUP' must start with '/aws/vendedlogs/'

MPAYLOAD                          #Payload sent to MASK_DESTINATION
MPAYLOAD.auditTimestamp           #'DATE'
MPAYLOAD.resourceArn              #TOPIC_ARN
MPAYLOAD.messageId                #'MESSAGE_MID'
MPAYLOAD.callerPrincipal          #MASK_STATEMENT.Principal
MPAYLOAD.dataIdentifiers          #DDATAID_ARR, like CloudWatch Logs

                                  ┌───────────────────────────┐
                                  │   MASK DESTINATION AUTH   │
                                  └───────────────────────────┘

PACTION logs:CreateLogDelivery
 |UpdateLogDelivery
 |ListLogDeliveries
 |GetLogDelivery
 |DeleteLogDelivery               #Required for MASK_DESTINATION
PACTION logs:PutResourcePolicy
 |DescribeResourcePolicies
 |DescribeLogGroups               #Required for MASK_DESTINATION.CloudWatchLogs.LogGroup
PACTION s3:PutBucketPolicy        #Required for MASK_DESTINATION.S3.Bucket
 |GetBucketPolicy                 #Also kms:... if SSE
PACTION
 iam:CreateServiceLinkedRole
PACTION firehose:TagDeliveryStream#Required for MASK_DESTINATION.Firehose.DeliveryStream

                                  ┌──────────────────────────────┐
                                  │   MASK DESTINATION METRICS   │
                                  └──────────────────────────────┘

AWS/SNS/MessagesWith[No]Findings  #NUM of MESSAGEs matching MASK_OP.Audit.[No]FindingsDestination
                                  #Requires MASK_OP.Audit

                                  ┌──────────┐
                                  │   HTTP   │
                                  └──────────┘

SUB.Protocol                      #'http[s]'. Send using HTTP[S] request, with POST
                                  #15s timeout
                                  #Supports SNI
                                  #Can use HTTP basic|digest auth
SUB.Endpoint                      #'http[s]://...' to send to

SUB_CONFIRM                       #Always required

DELIVERY_POLICY                   #Content-Type [C] of NOTIFICATIONs
 .requestPolicy.headerContentType #'MIME' among 'text/plain' (def), 'application/json', 'application/xml'
                                  #If SUB_ATTRS.RawMessageDelivery true, can also be 'text/html|css|xml|csv',
                                  #'application/octet-stream', 'application/x-www-form-urlencoded' or 'application/atom|soap|xhtml+xml'

x-amz-sns-message-type [C]        #NOTIFICATION.Type
x-amz-sns-message-id [C]          #NOTIFICATION.MessageId
x-amz-sns-topic-arn [C]           #NOTIFICATION.TopicArn
x-amz-sns-subscription-arn [C]    #'SUB_ARN'
x-amz-sns-rawdelivery: true [C]   #Set if SUB_ATTRS.RawMessageDelivery true (see above)

                                  ┌──────────────┐
                                  │   HTTP IAC   │
                                  └──────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: DeliveryPolicy: requestPolicy

new UrlSubscription               #CCSUB
 ('URL'[, CSUB_OPTS])             #Def CSUB_OPTS.protocol: uses 'URL' scheme

CDELIVERY_POLICY.requestPolicy    #DELIVERY_POLICY.*

                                  ┌────────────┐
                                  │   LAMBDA   │
                                  └────────────┘

SUB.Protocol                      #'lambda'. Send to a Lambda FUNCTION
                                  #Not with FIFO
SUB.Endpoint                      #'FUNC_ARN'

SUB_ATTRS.RawMessageDelivery      #Cannot be set. Always behave as if false

INVOCATION ==>                    #InvocationType 'Event'
                                  #No response

NOTIFICATION.*Url                 #Named like this instead of NOTIFICATION.*URL

CROSS-ACCOUNT ==>                 #FUNCTION can be in different ACCOUNT than principal calling Subscribe(), but sends SUB_CONFIRM then

CROSS-REGION ==>                  #FUNCTION can be in different REGION than TOPIC|SUB
                                  #If same ACCOUNT, SNS API calls must be made in TOPIC|SUB's REGION, not FUNCTION's
OPT-IN REGIONS ==>                #FUNCTION's REGION cannot be opt-in

                                  ┌─────────────────┐
                                  │   LAMBDA AUTH   │
                                  └─────────────────┘

PACTION lambda:InvokeFunction     #Must be allowed:
                                  #  - Resource FUNCTION
                                  #  - Principal.Service 'sns[.REGION].amazonaws.com'
                                  #     - REGION is required if TOPIC|SUB's REGION is opt-in
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌────────────────┐
                                  │   LAMBDA IAC   │
                                  └────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: Region 'REGION' (of the TOPIC)
                                  #  - def: SUB's REGION, i.e. only needed if QUEUE is in another REGION
                                  #If TOPIC is in a different STACK, FUNCTION must also DependsOn TOPIC

CSUB_OPTS.region                  #'REGION'

new LambdaSubscription            #CCSUB
 (ICANYFUNC[, CSUB_OPTS])         #Automatically adds relevant permissions using Lambda PERMISSION

new SnsEventSource                #Same as ICTOPIC.addSubscription(new LambdaSubcription(...))
 (ICTOPIC[, CSUB_OPTS])           #But is a CCEVENT_SOURCE, i.e. passed to Lambda CFUNCTION_OPTS.events instead

                                  ┌────────────────┐
                                  │   LAMBDA SAM   │
                                  └────────────────┘

AWS::Serverless::Function         #Includes RESPROPs: Events.EVENT: Type 'SNS', Properties: Topic, Region, FilterPolicy[Scope], RedrivePolicy
                                  #Creates:
                                  #  - Lambda SUB 'FUNCTION{EVENT}'
                                  #  - Lambda PERMISSION 'FUNCTION{EVENT}Permission'

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TOPIC (RESOURCE_REF.Arn)
                                  #  - Destination: Lambda FUNCTION (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a Lambda PERMISSION on FUNCTION:
                                  #  - allowing SERVICE sns.amazonaws.com
                                  #  - to lambda:InvokeFunction
                                  #  - aws:SourceArn TOPIC_ARN

                                  ┌────────────────────┐
                                  │   LAMBDA PAYLOAD   │
                                  └────────────────────┘

REQ.Records                       #LRECORD_ARR. Only one item
LRECORD.EventVersion              #Always '1.0'
LRECORD.EventSource               #Always 'aws:sns'
LRECORD.EventSubscriptionArn      #'SUB_ARN'
LRECORD.Sns                       #NOTIFICATION

                                  ┌─────────┐
                                  │   SQS   │
                                  └─────────┘

SUB.Protocol                      #'sqs'. Send to a SQS QUEUE
SUB.Endpoint                      #'QUEUE_ARN'
                                  #Cannot use SSE

MESSAGE_BODY                      #Is NOTIFICATION

SUB_ATTRS.RawMessageDelivery      #If true, max 10 MESSAGE_ATTRs

CROSS-ACCOUNT ==>                 #Like Lambda, including for SUB_CONFIRM
CROSS-REGION ==>                  #Like Lambda
OPT-IN REGIONS ==>                #QUEUE's and TOPIC|SUB's REGIONs cannot be both opt-in at the same time

                                  ┌──────────────┐
                                  │   SQS AUTH   │
                                  └──────────────┘

PACTION sqs:SendMessage           #Must be allowed:
                                  #  - Resource QUEUE
                                  #  - Principal.Service 'sns[.REGION].amazonaws.com'
                                  #     - REGION is required if either QUEUE or TOPIC|SUB's REGION is opt-in
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN
                                  #Also kms:Decrypt|GenerateDataKey, if SSE-KMS

                                  ┌─────────────┐
                                  │   SQS CLI   │
                                  └─────────────┘

sqs_grep                          #Can be used to copy SQS NOTIFICATIONs back to SNS
                                  #See its doc

                                  ┌─────────────┐
                                  │   SQS IAC   │
                                  └─────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: Region (like Lambda, see above)
                                  #Must DependsOn QUEUE
                                  #If TOPIC is in a different STACK, QUEUE must also DependsOn TOPIC

CSUB_OPTS.region                  #'REGION' (like Lambda, see above)

new SqsSubscription               #CCSUB
 (ICQUEUE[, CSUB_OPTS])           #Automatically adds relevant permissions using CQUEUE_MPOLICY
FFLAG @aws-cdk
 /aws-sns-subscriptions           #BOOL (recommended, def: false)
 :restrictSqsDescryption          #When allowing kms:... (due to SSE-KMS), use COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌─────────────┐
                                  │   SQS SAM   │
                                  └─────────────┘

AWS::Serverless::Function         #Includes RESPROPs: Events.EVENT: Type 'SNS', Properties: Topic, Region, FilterPolicy[Scope], RedrivePolicy, SqsSubscription
                                  #SqsSubscription is either:
                                  #  - OBJ:
                                  #     - QueueArn, QueueUrl: both required
                                  #     - Enabled, BatchSize: EVENT_SOURCE.*
                                  #  - true: like OBJ, but automatically creates QUEUE
                                  #Creates:
                                  #  - SQS SUB 'FUNCTION{EVENT}'
                                  #  - AWS::SQS::QueuePolicy 'FUNCTION{EVENT}Policy': name can be overridden with SqsSubscription.QueuePolicyLogicalId
                                  #  - Lambda SOURCE_MAPPING 'FUNCTION{EVENT}EventSourceMapping'

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: TOPIC (RESOURCE_REF.Arn)
                                  #  - Destination: SQS QUEUE (RESOURCE_REF.Arn + RESOURCE_REF.QueueUrl)
                                  #  - Permissions 'Write'
                                  #Transformed to a QUEUE_POLICY on QUEUE (from QueueUrl):
                                  #  - allowing SERVICE sns.amazonaws.com
                                  #  - to sqs:SendMessage
                                  #  - on QUEUE2 (from Arn)
                                  #  - COND_KEY aws:SourceArn TOPIC_ARN

                                  ┌──────────────────┐
                                  │   SQS COMPOSER   │
                                  └──────────────────┘

TOPIC ENHANCEMENT COMPONENT ==>   #Can connect to SQS enhanced component to create SUB

                                  ┌──────────────┐
                                  │   SQS FIFO   │
                                  └──────────────┘

TOPIC_ATTRS.FifoTopic             #BOOL (def: false). Whether is FIFO TOPIC
                                  #'TOPIC' must end with '.fifo'
                                  #Only with SQS
                                  #QUEUE can be FIFO or not

ORDER ==>                         #Ensures that receiving order is same as sending order

MESSAGE.MessageGroupId            #Like SQS. 'MESSAGE_GROUP_ID' is forwarded to SQS too
MESSAGE_RES.SequenceNumber        #Like SQS
MESSAGE.MessageDeduplicationId
TOPIC_ATTRS                       #Like SQS. 'MESSAGE_DID' is forwarded to SQS too
 .ContentBasedDeduplication       #Not if SUB_ATTRS.FilterPolicy set

                                  ┌──────────────────┐
                                  │   SQS FIFO IAC   │
                                  └──────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: FifoTopic, ContentBasedDeduplication

CTOPIC[_OPTS].fifo                #TOPIC_ATTRS.FifoTopic
                                  #Automatically appends '.fifo' to 'TOPIC'
CTOPIC[_OPTS]
 .contentBasedDeduplication       #TOPIC_ATTRS.ContentBasedDeduplication

                                  ┌────────────────┐
                                  │   SQS REPLAY   │
                                  └────────────────┘

TOPIC_ATTRS.ArchivePolicy         #NUM (in days, min|def 0, max 1y).
 .MessageRetentionPeriod          #Stores MESSAGEs ("archive"), in order to re-send them
                                  #Keep MESSAGEs as is, including Timestamp, MessageId, etc.
                                  #Regardless of SUBs, i.e. of FILTERS, NOTIFICATIONs failures, etc.
                                  #Possible goals:
                                  #  - replication
                                  #  - retry failed NOTIFICATIONs, similar to DLQ
                                  #If set, cannot delete TOPIC
                                  #Only with FIFO
TOPIC_ATTRS.BeginningArchiveTime  #DATE_NUM. Earliest time to replay from, based on MessageRetentionPeriod

SUB_ATTRS.ReplayPolicy            #'REPLAY_JSON'. Re-sends MESSAGEs stored in TOPIC
                                  #Setting it triggers the re-sending
                                  #When re-sending done, still set
                                  #Since only with FIFO, pauses while re-sending
                                  #  - i.e. new MESSAGEs are archived and not sent to SUBs
                                  #Every SUB settings applies to the re-sent MESSAGEs, including FILTERS
REPLAY.PointType                  #Always 'Timestamp'
REPLAY.StartingPoint              #'DATE'
REPLAY.EndingPoint                #'DATE'. If not set, once done:
                                  #  - any MESSAGE archive while re-sending was happening are replayed too
                                  #  - then unpauses
                                  #If set, once done:
                                  #  - keeps it paused
                                  #  - can unpause can setting ReplayPolicy again but with:
                                  #     - StartingPoint with same value as previous EndpointPoint
                                  #     - no EndingPoint

SUB_ATTRS.ReplayStatus            #'Pending', 'In progress', 'Completed' or 'Failed'

NOTIFICATION.Replayed             #true when replayed

                                  ┌─────────────────────┐
                                  │   SQS REPLAY AUTH   │
                                  └─────────────────────┘

PACTION
 kms:Decrypt|GenerateDataKey*     #Must be allowed to Principal.Service 'sns.amazonaws.com' if SSE-KMS

                                  ┌────────────────────┐
                                  │   SQS REPLAY IAC   │
                                  └────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: ArchivePolicy, ReplayPolicy OBJ

CTOPIC_OPTS
 .messageRetentionPeriodInDays    #TOPIC_ATTRS.ArchivePolicy.MessageRetentionPeriod

                                  ┌────────────────────────┐
                                  │   SQS REPLAY METRICS   │
                                  └────────────────────────┘

AWS/SNS/ApproximateNumberOf
 MessagesArchived                 #NUM of archived MESSAGEs

AWS/SNS/ApproximateNumberOf
 BytesArchived                    #Size (in bytes) of archived MESSAGEs

AWS/SNS/NumberOf
 MessagesArchiveProcessing
AWS/SNS/NumberOf
 BytesArchiveProcessing           #Same as both above but using StorageResolution 'high' instead of 'regular'

AWS/SNS/NumberOf
 ReplayedNotificationsDelivered   #NUM of MESSAGEs successfully replayed
AWS/SNS/NumberOf
 ReplayedNotificationsFailed      #NUM of MESSAGEs that failed to replay

                                  ┌─────────────┐
                                  │   KINESIS   │
                                  └─────────────┘

SUB.Protocol                      #'firehose'. Send to Kinesis Firehose delivery stream
                                  #Max 5 per DELIVERY_STREAM's ACCOUNT + TOPIC
SUB.Endpoint                      #'DELIVERY_STREAM_ARN'

CROSS-ACCOUNT ==>                 #Like Lambda, including for SUB_CONFIRM
CROSS-REGION ==>                  #Like Lambda
OPT-IN REGIONS ==>                #DELIVERY_STREAM's and TOPIC|SUB's REGIONs cannot be both opt-in at the same time

                                  ┌──────────────────┐
                                  │   KINESIS AUTH   │
                                  └──────────────────┘

SUB_ATTRS.SubscriptionRoleArn     #ROLE_ARN used to write to Firehose delivery stream
                                  #Must be assumable by sns[.REGION].amazonaws.com
                                  #  - REGION is required if either QUEUE or TOPIC|SUB's REGION is opt-in

PACTION firehose:PutRecord[Batch]
 |DescribeDeliveryStream
 |ListDeliveryStreams
 |ListTagsForDeliveryStream       #Must be allowed to SubscriptionRoleArn

PACTION iam:PassRole              #Must be allowed on current principal

                                  ┌─────────────────┐
                                  │   KINESIS IAC   │
                                  └─────────────────┘

AWS::SNS::Subscription            #Includes RESPROPs: Region (like Lambda, see above), SubscriptionRoleArn

CSUB_OPTS.region                  #'REGION' (like Lambda, see above)
CSUB_OPTS.subscriptionRoleArn     #SUB_ATTRS.SubscriptionRoleArn

                                  ┌───────────┐
                                  │   EMAIL   │
                                  └───────────┘

SUB.Protocol                      #'email[-json]'. Send as email (SMTP)
                                  #Sent from no-reply@sns.amazonaws.com
                                  #Rather basic. For end users, prefer SES
SUB.Endpoint                      #'EMAIL_ADDRESS'

SUB_ATTRS.RawMessageDelivery      #Must use PROTOCOL 'email' (false) vs 'email-json' (true) instead

SUB_CONFIRM                       #Required. NOTIFICATION with Type '*Confirmation' is sent as email with links instead

TOPIC_ATTRS.DisplayName           #'From' email field
                                  #Def: 'AWS Notifications Message'
                                  #Max 100 chars, [:alnum:]-_
MESSAGE.Subject                   #'Subject' email field
                                  #Def: 'AWS Notification Message'
                                  #Max 100 chars, no control characters nor newlines

                                  ┌───────────────┐
                                  │   EMAIL IAC   │
                                  └───────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DisplayName

new EmailSubscription
 ('EMAIL_ADDRESS'[, CSUB_OPTS])   #CCSUB

CSUB_OPTS.json                    #BOOL (def: false). Whether 'PROTOCOL' is 'email' or 'email-json'
                                  #Only with new EmailSubscription()

CTOPIC_OPTS.displayName           #TOPIC_ATTRS.*

                                  ┌──────────────┐
                                  │   SMS MAIN   │
                                  └──────────────┘

SUB.Protocol                      #'sms'. Send an SMS
                                  #Uses AWS End User Messaging SMS under-the-hood
                                  #  - should be used instead if need more advanced features
                                  #Can be heavily regulated, and country-specific
                                  #  - UI to signup might need to be approved, and include specific words
                                  #  - any interaction's log might need to be retained

SUB_CONFIRM                       #Required. NOTIFICATION with Type '*Confirmation' is sent as SMS instead
                                  #Must send SMS back: "Yes DISPLAY_NAME" (ConfirmSubscription())

SMS_UI_SETTINGS                   #Submitted via UI when exiting the sandbox
                                  #SMS_UI_SETTINGS keys are only for documentation, since it is done via UI

SMS_SETTINGS.attributes           #SMS_ATTRS

MESSAGE_ATTRS.AWS.SNS.SMS         #SMESSAGE

SMS_UI_SETTINGS.AppLocation       #STR. Website URL or app name

                                  ┌──────────────────┐
                                  │   SMS MAIN API   │
                                  └──────────────────┘

SetSMSAttributes()                #Req: SMS_SETTINGS
                                  #Res: empty
GetSMSAttributes()                #Req: SMS_SETTINGS
                                  #  - attributes OBJ -> 'SMS_ATTR'_ARR
                                  #Res: SMS_SETTINGS

                                  ┌──────────────────┐
                                  │   SMS MAIN IAC   │
                                  └──────────────────┘

new SmsSubscription
 ('PHONE_NUMBER'[, CSUB_OPTS])    #CCSUB

                                  ┌─────────────────┐
                                  │   SMS MESSAGE   │
                                  └─────────────────┘

SUB_ATTRS.RawMessageDelivery      #Cannot be set. Always behave as if true

TOPIC_ATTRS.DisplayName           #STR. Use first 10 chars uppercased as start of SMS body, followed by >
                                  #Max 100 chars, [:alnum:]-_

MESSAGE.Message                   #STR. SMS contents
                                  #Each 160 chars (cut at whitespaces) create a separate part
                                  #  - 140 chars if any non-GSM char
                                  #  - 70 chars if any UTF-16 char
                                  #Max 10 parts
MESSAGE.Subject                   #If set, used as MESSAGE.Message
                                  #Purpose: when a SUB of a different PROTOCOL (e.g. email) is using MESSAGE.Subject

SMESSAGE.TTL                      #NUM (in secs). Timeout to send SMS
                                  #Can be set in UI, but how it is set in the API is undocumented

BEST PRACTICES ==>                #Include sender information in SMS body
                                  #Keep SMS body neutral, not personal
                                  #Be honest about money-related offers and avoid currency symbols
                                  #Use link shorteners
                                  #Avoid abbreviations

                                  ┌──────────────────────┐
                                  │   SMS MESSAGE AUTH   │
                                  └──────────────────────┘

PACTION sms-voice:SendTextMessage
 |GetAccountTier
 |VerifyDestinationPhoneNumber
 |CreateVerified
  DestinationPhoneNumber
 |DescribeVerified
  DestinationNumbers              #Must be allowed
 |DeleteVerified                  #COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
  DestinationPhoneNumber          #COND_KEY aws:SourceAccount 'ACCOUNT_ID'

                                  ┌─────────────────────┐
                                  │   SMS MESSAGE IAC   │
                                  └─────────────────────┘

AWS::SNS::Topic                   #Includes RESPROPs: DisplayName

CTOPIC_OPTS.displayName           #TOPIC_ATTRS.*

                                  ┌─────────────────────────┐
                                  │   SMS MESSAGE LOGGING   │
                                  └─────────────────────────┘

LRES.numberOfMessageParts         #NUM

SMS_USAGE[6]                      #NUM. Part number
SMS_USAGE[7]                      #NUM. Total number of parts

                                  ┌─────────────────────┐
                                  │   SMS ORIGINATION   │
                                  └─────────────────────┘

ORIG_NUMBER                       #"Origination number". Number used when sending SMS
                                  #Can request a dedicated one through support
ORIG_NUMBER.CreatedAt             #DATE_NUM
ORIG_NUMBER.PhoneNumber           #'PHONE_NUMBER' that is available

ORIG_NUMBER.Iso2CountryCode       #'COUNTRY_CODE' (2 chars, ISO 3166-1 alpha-2)
ORIG_NUMBER.NumberCapabilities    #STR_ARR among 'SMS', 'MMS', 'VOICE'
ORIG_NUMBER.RouteType             #SMS_ATTRS.DefaultSMSType
ORIG_NUMBER.Status                #'ACTIVE' or 'INACTIVE'

SMS_UI_SETTINGS.SenderRegion      #'REGION'

SMESSAGE.OriginationNumber        #'PHONE_NUMBER' used in MESSAGE
                                  #Must be among available ones in ORIG_NUMBER.PhoneNumber
                                  #Def: chooses one randomly

                                  ┌──────────────────────────┐
                                  │   SMS ORIGINATION AUTH   │
                                  └──────────────────────────┘

PACTION                           #Must be allowed
 sms-voice:DescribePhoneNumbers   #COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
                                  #COND_KEY aws:SourceAccount 'ACCOUNT_ID'

                                  ┌─────────────────────────┐
                                  │   SMS ORIGINATION API   │
                                  └─────────────────────────┘

ListOriginationNumbers()          #Req: empty
                                  #Res: PhoneNumbers ORIG_NUMBER_ARR

                                  ┌───────────────────┐
                                  │   SMS SENDER ID   │
                                  └───────────────────┘

SMS_ATTRS.DefaultSenderID         #STR. Sender ID
SMESSAGE.SenderID                 #Alternative to ORIG_NUMBER that:
                                  #  - uses a name instead of a PHONE_NUMBER
                                  #  - is shown in SMS message
                                  #Whether to use ORIG_NUMBER, Sender ID (or both) is country-specific
                                  #Requires:
                                  #  - for some country, some country-specific registration
                                  #  - opening AWS support case
                                  #3-11 chars, [:alnum:] (at least one letter)

COMPANY REGISTRATION ==>          #Required to get a sender ID in:
                                  #  - UK, Australia
                                  #  - India, Sri Lanka
                                  #  - Philippines, Vietnam, Thailand
                                  #  - UAE, Kuwait, Qatar, Saudi Arabia, Egypt, Jordan, Turkey
                                  #  - Belarus, Russia

                                  ┌──────────────────┐
                                  │   SMS RECEIVER   │
                                  └──────────────────┘

SUB.Endpoint                      #'PHONE_NUMBER'
                                  #E.164 format, i.e. use + followed by multiple digits

MESSAGE.PhoneNumber               #'PHONE_NUMBER', specified instead of MESSAGE.TopicArn
                                  #"Direct publish": send a MESSAGE without using a TOPIC
                                  #Pros:
                                  #  - cheaper
                                  #  - faster
                                  #Con:
                                  #  - single PHONE_NUMBER per MESSAGE
                                  #  - cannot use any TOPIC|SUB-related features (FILTERS, monitoring, throttling, retries, etc.)

SMS_UI_SETTINGS.ReceiverRegions   #'REGION'_ARR
SMS_UI_SETTINGS.ReceiverCountries #'COUNTRY'_ARR

                                  ┌──────────────────────────┐
                                  │   SMS RECEIVER LOGGING   │
                                  └──────────────────────────┘

LRES.mcc                          #Country code
                                  #0 if SMS failed
LRES.mnc                          #Mobile network code, i.e. phone carrier code
                                  #0 if SMS failed
LRES.phoneCarrier                 #STR
                                  #Not set if SMS failed

                                  ┌───────────────┐
                                  │   SMS ALLOW   │
                                  └───────────────┘

SMS_UI_SETTINGS.OptInMethod       #Description on how receivers opt in to SMSs
                                  #Unsolicited MESSAGEs are not allowed
                                  #  - including sending additional SMSs for users to reply to the SUB_CONFIRM

SMS_BLOCK.phoneNumber             #'PHONE_NUMBER'
SMS_BLOCK.isOptedOut              #BOOL. Whether receiver opted out of receiving SMSs
                                  #Do so by sending a country-specific SMS, e.g. 'STOP', 'CANCEL' or 'UNSUBSCRIBE'
                                  #SUB still exists, but no SMS is sent
                                  #Can be set from false to true, but only once per PHONE_NUMER per 30 days

                                  ┌────────────────────┐
                                  │   SMS ALLOW AUTH   │
                                  └────────────────────┘

PACTION sms-voice:                #Must be allowed
 DescribeOptedOutNumbers          #COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
 |DeleteOptedOutNumber            #COND_KEY aws:SourceAccount 'ACCOUNT_ID'

                                  ┌───────────────────┐
                                  │   SMS ALLOW API   │
                                  └───────────────────┘

OptInPhoneNumber()                #Req: SMS_BLOCK
                                  #  - no isOptedOut
                                  #Res: empty
ListPhoneNumbersOptedOut()        #Req: empty
                                  #Res: phoneNumbers 'PHONE_NUMBER'_ARR
CheckIfPhoneNumberIsOptedOut()    #Req: SMS_BLOCK
                                  #  - no isOptedOut
                                  #Res: SMS_BLOCK
                                  #  - only isOptedOut

                                  ┌─────────────────┐
                                  │   SMS SANDBOX   │
                                  └─────────────────┘

SMS_SANDBOX.IsInSandbox           #BOOL. Wheter in sandbox
                                  #ACCOUNT is initially in sandbox
                                  #Per REGION

EXITING THE SANDBOX ==>           #Test at least one SMS_SANDBOX_RECEIVER
                                  #Then create a AWS Support case to exit the sandbox
                                  #  - under "Service quota increase" > "SNS Text Messaging"
                                  #Takes up to 24h

                                  ┌─────────────────────┐
                                  │   SMS SANDBOX API   │
                                  └─────────────────────┘

GetSMSSandboxAccountStatus()      #Req: empty
                                  #Res: SMS_SANDBOX

                                  ┌──────────────────────────┐
                                  │   SMS SANDBOX RECEIVER   │
                                  └──────────────────────────┘

SMS_SANDBOX_RECEIVER              #When in sandbox, can only send to SMS_SANDBOX_RECEIVERs
                                  #I.e. requires OTP confirmation from receivers
                                  #Can delete only 24h after VerifySMSSandboxPhoneNumber()
                                  #Max 10
SMS_SANDBOX_RECEIVER.PhoneNumber  #'PHONE_NUMBER'

SMS_SANDBOX_RECEIVER              #STR. Token allowing receiving SMSs
 .OneTimePassword                 #Sent by CreateSMSSandboxPhoneNumber(), must be confirmed by VerifySMSSandboxPhoneNumber()
                                  #5-8 digits
                                  #Expires after 15m
                                  #Can send 5/h per PHONE_NUMBER
SMS_SANDBOX_RECEIVER.LanguageCode #Language used with the token's SMS
                                  #Among "en-US|GB", "es-ES|419", "de-DE", "fr-CA|FR", "it-IT", "ja-JP", "pt-BR", "kr-KR", "zh-CN|TW"
SMS_SANDBOX_RECEIVER.Status       #'Pending' or 'Verified'. Whether confirmed with token

                                  ┌──────────────────────────────┐
                                  │   SMS SANDBOX RECEIVER API   │
                                  └──────────────────────────────┘

CreateSMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - no Status
                                  #Res: empty
VerifySMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - only PhoneNumber
                                  #  - only one with OneTimePassword
                                  #Res: empty
ListSMSSandboxPhoneNumbers()      #Req: empty
                                  #Res: PhoneNumbers SMS_SANDBOX_RECEIVER_ARR
                                  #  - no LanguageCode
DeleteSMSSandboxPhoneNumber()     #Req: SMS_SANDBOX_RECEIVER
                                  #  - only PhoneNumber
                                  #Res: empty

                                  ┌────────────────┐
                                  │   SMS CHARGE   │
                                  └────────────────┘

SMS_ATTRS.DefaultSMSType          #Either:
SMESSAGE.SMSType                  #  - 'Promotional' (def): marketing, cheaper
                                  #  - 'Transactional': application, more reliable
SMS_UI_SETTINGS.DefaultSMSType    #Same but separates 'Transactional' -> either 'Transactional' or 'OneTimePassword'

SMS_ATTRS|SMS_UI_SETTINGS         #Max NUM of USD to spend per month
 .MonthlySpendLimit               #Make MESSAGEs fail if more
                                  #Def: 1 USD (soft), i.e. usually need to request an increase if free tier not enough
SMESSAGE.MaxPrice                 #Same but for each SMS sent by that MESSAGE

                                  ┌─────────────────────┐
                                  │   SMS CHARGE AUTH   │
                                  └─────────────────────┘

PACTION sms-voice:                #Must be allowed
 SetTextMessageSpendLimitOverride #COND_KEY aws:CalledViaLast 'sns.amazonaws.com'
 |DescribeSpendLimits             #COND_KEY aws:SourceAccount 'ACCOUNT_ID'

                                  ┌────────────────────────┐
                                  │   SMS CHARGE METRICS   │
                                  └────────────────────────┘

AWS/SNS/SMSMonthToDateSpentUSD    #NUM of USD charged for sending SMS since start of month

                                  ┌────────────────────────────┐
                                  │   SMS CHARGE METRICS IAC   │
                                  └────────────────────────────┘

ICTOPIC
 .metricSMSMonthToDateSpentUSD
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Maximum'

                                  ┌────────────────────────┐
                                  │   SMS CHARGE LOGGING   │
                                  └────────────────────────┘

LRES.smsType                      #SMESSAGE.SMSType
LRES.priceInUSD                   #NUM. SMS cost

SMS_USAGE[3]                      #SMS_ATTRS.DefaultSMSType
SMS_USAGE[5]                      #NUM. Price in USD

                                  ┌─────────────────┐
                                  │   SMS METRICS   │
                                  └─────────────────┘

AWS/SNS/SMSSuccessRate            #NUM/s of SMSs sent

DVAR PhoneNumber                  #'PHONE_NUMBER'
                                  #Only when using MESSAGE.PhoneNumber
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD
DVAR Country                      #Destination 'COUNTRY'
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate
DVAR SMSType                      #SMS_ATTRS.DefaultSMSType
                                  #Sent with all METRICs except AWS/SNS/SMSMonthToDateSpentUSD|SMSSuccessRate

                                  ┌─────────────────────┐
                                  │   SMS METRICS IAC   │
                                  └─────────────────────┘

ICTOPIC.metricSMSSuccessRate
 ([CMETRIC_OPTS])->CMETRIC        #Uses statistic 'Sum'

                                  ┌─────────────────┐
                                  │   SMS LOGGING   │
                                  └─────────────────┘

LRES.dwellTimeMsUntilDeviceAck    #NUM (in ms). Duration between TOPIC and phone carrier accepting SMS

SMS_ATTRS.UsageReportS3Bucket     #'BUCKET'. Logs successful SMSs as an OBJECT
                                  #Once per day

SMSUsageReports/REGION/YYYY/MM/DD #CSV file with SMS rows and SMS_USAGE columns
 /NUM.csv.gz                      #First row is header
                                  #Not created if 0 SMSs
SMS_USAGE[0]                      #NOTIFICATION.Timestamp
SMS_USAGE[1]                      #NOTIFICATION.MessageId
SMS_USAGE[2]                      #'PHONE_NUMBER'
SMS_USAGE[4]                      #STR. Delivery description, e.g. 'Message has been accepted by phone carrier'

                                  ┌──────────────────────┐
                                  │   SMS LOGGING AUTH   │
                                  └──────────────────────┘

PACTION                           #For SMS_ATTRS.UsageReportS3Bucket, must be allowed:
 s3:ListBucket|GetBucketLocation  #  - on Resource BUCKET_ARN
                                  #  - for Principal.Service 'sns.amazonaws.com'
                                  #  - COND_KEY aws:SourceAccount ACCOUNT_ID
                                  #  - COND_KEY aws:SourceArn 'arn:aws:sns:REGION:ACCOUNT_ID:*'
PACTION s3:PutObject              #Same but must be Resource BUCKET_ARN/*

                                  ┌───────────────┐
                                  │   SMS INDIA   │
                                  └───────────────┘

SMESSAGE.EntityId                 #Company ID, only used in India

SMESSAGE.TemplateId               #'TEMPLATE_ID'
SMS_UI_SETTINGS.MessageTemplates
 .TEMPLATE_ID                     #STR. Message body. Only used in India

                                  ┌───────────────────┐
                                  │   PUSH ENDPOINT   │
                                  └───────────────────┘

SUB.Protocol                      #'application'. Send as a mobile|desktop push notification
                                  #Probably uses AWS End User Messaging Push under-the-hood
                                  #  - should be used instead if need more advanced features
SUB.Endpoint
PUSH_ENDPOINT.EndpointArn         #'PUSH_ENDPOINT_ARN'
MESSAGE.TargetArn                 #'PUSH_ENDPOINT_ARN', specified instead of MESSAGE.TopicArn
                                  #"Direct publish": like SMS (see above)

PUSH_ENDPOINT                     #Mobile device
                                  #Creating is idempotent
                                  #To handle re-installation should check if PUSH_ENDPOINT already exists before either:
                                  #  - creating it
                                  #  - sending any push
PUSH_ENDPOINT.Attributes          #PUSH_ENDPOINT_ATTRS

SUB_CONFIRM                       #Use DEVICE_TOKEN instead
PUSH_ENDPOINT.Token               #'DEVICE_TOKEN'. Obtained when mobile|desktop app registers with the push notification service
                                  #Might need refreshing when app is either:
                                  #  - updated
                                  #  - re-installed
                                  #  - restored on a new device
                                  #  - app data cleared
                                  #I.e. before sending pushes, should:
                                  #  - check if DEVICE_TOKEN is latest
                                  #  - if not, update PUSH_ENDPOINT.Token
                                  #     - not create a new PUSH_ENDPOINT
PUSH_ENDPOINT_ATTRS.Enabled       #BOOL. False if DEVICE_TOKEN not set, invalid or expired
                                  #Should then fix by setting with latest DEVICE_TOKEN

                                  ┌───────────────────────┐
                                  │   PUSH ENDPOINT API   │
                                  └───────────────────────┘

CreatePlatformEndpoint()          #Req: PUSH_ENDPOINT
                                  #  - no EndpointArn
                                  #Res: PUSH_ENDPOINT
                                  #  - only EndpointArn
SetEndpointAttributes()           #Req: PUSH_ENDPOINT
                                  #  - only EndpointArn, Attributes
                                  #  - CustomUserData|Token -> Attributes.*
                                  #Res: empty
ListEndpointsByPlatformApplication#Req: PUSH_ENDPOINT
 ()                               #  - only PlatformApplicationArn
                                  #Res: Endpoints PUSH_ENDPOINT_ARR
                                  #  - only EndpointArn, Attributes
GetEndpointAttributes()           #Req: PUSH_ENDPOINT
                                  #  - only Attributes
                                  #  - CustomUserData|Token -> Attributes.*
                                  #Res: empty
DeleteEndpoint()                  #Req: PUSH_ENDPOINT
                                  #  - only EndpointArn
                                  #Res: empty

                                  ┌──────────────────┐
                                  │   PUSH MESSAGE   │
                                  └──────────────────┘

SUB_ATTRS.RawMessageDelivery      #Cannot be set. Always behave as if true

MESSAGE                           #'{PUSH_PLATFORM_TYPE|default: 'SPECIFIC_MESSAGE'}' as JSON itself
                                  #SPECIFIC_MESSAGEs is PUSH_PLATFORM_TYPE-specific, usually 'OBJ_JSON' or XML
                                  #  - not fully documented yet
                                  #  - for default, it is just 'BODY'

PUSH_ENDPOINT.CustomUserData      #STR. Arbitrary data
                                  #Max 2KB

MESSAGE_ATTRS.AWS.SNS.MOBILE      #MMESSAGE
 .PUSH_PLATFORM_TYPE              #Not fully documented yet

MMESSAGE.TTL                      #NUM (in secs). Timeout from Publish() time to push reception
                                  #Def: PUSH_PLATFORM_TYPE-specific, or 4 weeks

                                  ┌────────────────┐
                                  │   PUSH EVENT   │
                                  └────────────────┘

PUSH_PLATFORM_ATTRS.EventEndpoint*#'TOPIC_ARN'. Send MESSAGEs on specific events
PUSH_PLATFORM_ATTRS
 .EventEndpointCreated            #On CreatePlatformEndpoint()
PUSH_PLATFORM_ATTRS
 .EventEndpointUpdated            #On SetEndpointAttributes()
PUSH_PLATFORM_ATTRS
 .EventEndpointDeleted            #On DeleteEndpoint()
PUSH_PLATFORM_ATTRS
 .EventDeliveryFailure            #On push failure
                                  #FailureType 'EndpointDisabled': PUSH_ENDPOINT_ATTRS.Enabled false, e.g. due to DEVICE_TOKEN expiring

                                  ┌───────────────────┐
                                  │   PUSH PLATFORM   │
                                  └───────────────────┘

PUSH_PLATFORM                     #Push notification settings
                                  #Creating is idempotent
                                  #To handle re-installation should check if PUSH_PLATFORM already exists before either:
                                  #  - creating it
                                  #  - sending any push
PUSH_ENDPOINT|PUSH_PLATFORM
 .PlatformApplicationArn          #'PUSH_PLATFORM_ARN'. 'arn:aws:sns:REGION:ACCOUNT_ID:app/PUSH_PLATFORM_TYPE/PUSH_PLATFORM'
PUSH_PLATFORM.Name                #'PUSH_PLATFORM'
                                  #Max 256 chars, [:alnum:]_-.
PUSH_PLATFORM.Attributes          #PUSH_PLATFORM_ATTRS

PUSH_PLATFORM.Platform            #'PUSH_PLATFORM_TYPE'. Listed below
PUSH_PLATFORM_ATTRS
 .AuthenticationMethod            #Sub-type of PUSH_PLATFORM_TYPE

PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #PUSH_PLATFORM_TYPE-specific developer ID
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #PUSH_PLATFORM_TYPE-specific developer secret key

                                  ┌───────────────────────────┐
                                  │   PUSH PLATFORM ANDROID   │
                                  └───────────────────────────┘

PUSH_PLATFORM.Platform            #'GCM' (Firebase Cloud Messaging)
                                  #For Android|iOS, web app and Chrome app/extensions, using Google Cloud
                                  #Seems to also handle iOS, desktop apps and Unity
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #None
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #JSON private key file ("service.json file")

DEVICE_TOKEN                      #Registration ID

MESSAGE                           #'OBJ_JSON'. Not fully documented yet

                                  ┌─────────────────────────┐
                                  │   PUSH PLATFORM CHINA   │
                                  └─────────────────────────┘

PUSH_PLATFORM.Platform            #'BAIDU' (Baidu Cloud Push)
                                  #For Android in China
PUSH_PLATFORM_ATTRS
 .AuthenticationMethod            #Always 'Token'
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #Public API key
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #Secret key

PUSH_ENDPOINT_ATTRS.UserId
PUSH_ENDPOINT_ATTRS.ChannelId     #Not fully documented yet

DEVICE_TOKEN                      #Registration token

MESSAGE                           #Not fully documented yet

MMESAGE.DeployStatus
MMESAGE.MessageKey
MMESAGE.MessageType               #Not fully documented yet

                                  ┌─────────────────────────┐
                                  │   PUSH PLATFORM APPLE   │
                                  └─────────────────────────┘

PUSH_PLATFORM.Platform            #'APNS[_SANDBOX]' (Apple Push Notification Service)
                                  #For iOS and Mac OS X
                                  #SANDBOX is for testing
PUSH_PLATFORM_ATTRS               #Either SSL certificate or signing key
 .AuthenticationMethod            #Actual possible values not documented

SSL CERTIFICATE ==>               #
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #SSL certificate
PUSH_PLATFORM_ATTRS               #Private key (.p12 file)
 .PlatformCredential              #Expire after 1h
PUSH_PLATFORM_ATTRS
 .AppleCertificateExpiryDate      #DATE_NUM of SSL certificate expiration

SIGNING KEY ==>                   #
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #Signing key ID
PUSH_PLATFORM_ATTRS               #Signing key (.p8 file)
 .PlatformCredential              #Does not expire
PUSH_PLATFORM_ATTRS
 .ApplePlatformTeamID             #STR. Apple developer account team ID
PUSH_PLATFORM_ATTRS
 .ApplePlatformBundleID           #STR. iOS app ID

MESSAGE                           #Not fully documented yet

MMESSAGE.COLLAPSE_ID
MMESSAGE.PRIORITY
MMESSAGE.PUSH_TYPE
MMESSAGE.TOPIC                    #Not fully documented yet

                                  ┌─────────────────────────────────┐
                                  │   PUSH PLATFORM WINDOWS PHONE   │
                                  └─────────────────────────────────┘

PUSH_PLATFORM.Platform            #'MPNS' (Microsoft Push Notification Service)
                                  #For Windows Phone
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #TLS certificate
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #Private key

MESSAGE                           #XML. Not fully documented yet

MMESAGE.NotificationClass
MMESAGE.Type                      #Not fully documented yet

                                  ┌───────────────────────────────────┐
                                  │   PUSH PLATFORM WINDOWS DESKTOP   │
                                  └───────────────────────────────────┘

PUSH_PLATFORM.Platform            #'WNS' (Windows Push Notification Services)
                                  #For Windows desktop
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #Package Security Identifier
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #Secret key

MESSAGE                           #XML. Not fully documented yet

MMESSAGE.CachePolicy
MMESSAGE.Group
MMESSAGE.Match
MMESSAGE.SuppressPopup
MMESSAGE.Tag
MMESSAGE.Type                     #Not fully documented yet

                                  ┌──────────────────────────┐
                                  │   PUSH PLATFORM KINDLE   │
                                  └──────────────────────────┘

PUSH_PLATFORM.Platform            #'ADM' (Amazon Device Messaging)
                                  #For Kindle
PUSH_PLATFORM_ATTRS
 .PlatformPrincipal               #Client ID
PUSH_PLATFORM_ATTRS
 .PlatformCredential              #Client secret

DEVICE_TOKEN                      #Device token

MESSAGE                           #Not fully documented yet

                                  ┌───────────────────────┐
                                  │   PUSH PLATFORM API   │
                                  └───────────────────────┘

CreatePlatformApplication()       #Req: PUSH_PLATFORM
                                  #  - no PlatformApplicationArn
                                  #  - Attributes: no AppleCertificateExpiryDate, AuthenticationMethod,
                                  #    *FeedbackRoleArn, SuccessFeedbackSampleRate
                                  #Res: PUSH_PLATFORM
                                  #  - only PlatformApplicationArn
SetPlatformApplicationAttributes()#Req: PUSH_PLATFORM
                                  #  - only PlatformApplicationArn, Attributes
                                  #  - Attributes: no AppleCertificateExpiryDate, AuthenticationMethod,
                                  #    *FeedbackRoleArn, SuccessFeedbackSampleRate
                                  #Res: empty
ListPlatformApplications()        #Req: empty
                                  #Res: PlatformApplications PUSH_PLATFORM_ARR
                                  #  - only PlatformApplicationArn, Attributes
GetPlatformApplicationAttributes()#Req: PUSH_PLATFORM
                                  #  - only PlatformApplicationArn
                                  #Res: PUSH_PLATFORM
                                  #  - only Attributes: no PlatformCredential, PlatformPrincipal
DeletePlatformApplication()       #Req: PUSH_PLATFORM
                                  #  - only PlatformApplicationArn
                                  #Res: empty

                                  ┌───────────────────────────┐
                                  │   PUSH PLATFORM METRICS   │
                                  └───────────────────────────┘

DVAR Application                  #'PUSH_PLATFORM'
                                  #Sent with all METRICs except AWS/SNS/SMS*
DVAR Platform                     #'PUSH_PLATFORM_TYPE'
                                  #Sent with all METRICs except AWS/SNS/SMS*

                                  ┌──────────────────────────┐
                                  │   EVENT FORK PIPELINES   │
                                  └──────────────────────────┘

EVENT FORK PIPELINES ==>          #3 SAR APPs (see its doc) implementing following patterns:
                                  #  - SNS to S3 OBJECTs
                                  #     - with SQS -> Lambda -> Firehose in-between
                                  #        - for resiliency and load handling
                                  #        - and to allow mapping|transforming
                                  #  - SNS to OpenSearch
                                  #     - similar setup in-between
                                  #  - Replay SNS MESSAGEs
                                  #     - using a SQS QUEUE processed by a Lambda EVENT_SOURCE
                                  #Not maintained anymore and deprecated in favor of current features:
                                  #  - Kinesis SUB
                                  #  - SUB_ATTRS.ReplayPolicy

                                  ┌───────────┐
                                  │   LOCAL   │
                                  └───────────┘

goaws                             #See its doc
