
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   EVENTBRIDGE RULES   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-saas-furls.html
  - https://github.com/a-bigelow/cdk-eventbridge-partner-processors

VERSION ==>                       #2024-12-20

SUMMARY ==>                       #Bus: default, encryption, policy
                                  #Event: type, detail, time, resources, batch
                                  #Source: AWS services (including CloudTrail), custom, partner
                                  #Rule: filter (including test), schedule, managed
                                  #Target: type, parameters, input transform (raw, JSONPath[s]) cross-ACCOUNT|REGION, cross-BUS, role
                                  #HTTP target: parameters, auth (basic, API key, OAuth), VPC
                                  #Errors: retry, DLQ, failover|replication, archive|replay

CLOUDWATCH EVENTS ==>             #Name of former major version of EventBridge Rules
                                  #Compatible but no more new features anymore

RELATED SERVICES ==>              #See also doc for EventBridge Pipes, Scheduler, Schemas

                                  ┌─────────┐
                                  │   API   │
                                  └─────────┘

SERVICE_DOMAIN                    #'events.REGION.amazonaws.com'

FORMAT ==>                        #Uses X-Amz-Target: AWSEvents.ACTION [C]
                                  #JSON request|response body

REQ_ID                            #x-amzn-RequestId [S]

PAGINATION ==>                    #Uses REQ.Limit (def|max: 100) + REQ|RES.NextToken
                                  #ListEndpoints: named REQ.MaxResults instead
                                  #No pagination: ListTagsForResource()
                                  #No pagination with SDK
                                  #CLI pagination helpers: only with List*Rule*()

THROTTLING ==>                    #2e4/s (REGION-specific) (soft): TARGET call
                                  #1e4/s (REGION-specific) (soft): PutEvents()
                                  #300/s (soft): API_DEST call
                                  #50/s (soft): other API calls
                                  #5/s: Create|Update|DeleteEndpoint()

PRICING ==>                       #1$ per 1e6 EVENTs received
                                  #  - only ones matching FILTERS
                                  #  - multiplied by NUM of 64KB chunks (if >64KB)
                                  #  - free: EVENTs sent by AWS SERVICEs
                                  #1$ per 1e6 TARGET call
                                  #  - free: if same ACCOUNT
                                  #1$ per 5e6 API_DEST call
                                  #  - multiplied by NUM of 64KB chunks
                                  #1$ per 43GB stored in ARCHIVEs
                                  #  - i.e. same as S3
                                  #1$ per 10GB re-emitted in REPLAYs

                                  ┌──────────┐
                                  │   AUTH   │
                                  └──────────┘

AmazonEventBridgeFullAccess       #AWS managed POLICY. Grants all 'events|pipes|scheduler|schemas:*' PACTIONs
AmazonEventBridgeReadOnlyAccess   #AWS managed POLICY. Grants all readonly 'events|pipes|scheduler|schemas:*' PACTIONs

                                  ┌─────────┐
                                  │   SDK   │
                                  └─────────┘

@aws-sdk/client-eventbridge       #Name of CLIENT

                                  ┌─────────┐
                                  │   BUS   │
                                  └─────────┘

BUS                               #Group of RULEs
                                  #Cannot delete if it has some RULEs
                                  #Max 100 (soft) per ACCOUNT

BUS.Arn                           #'BUS_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:event-bus/BUS'
BUS.Name                          #'BUS' (def: 'default' with DescribeEventBus())
                                  #Only [:alnum:]-_., max 256 chars
BUS.Description                   #STR. Max 512 chars
BUS.CreationTime                  #DATE_NUM
BUS.LastModifiedTime              #DATE_NUM

                                  ┌─────────────┐
                                  │   BUS API   │
                                  └─────────────┘

CreateEventBus()                  #Req: BUS
                                  #  - no Arn, *Time, Policy
                                  #  - only one with EventSourceName, Tags
                                  #Res: BUS
                                  #  - Arn -> EventBusArn
                                  #  - no Name, *Time, Policy
UpdateEventBus()                  #Req: BUS
                                  #  - no Arn, *Time, Policy
                                  #Res: BUS
                                  #  - no *Time, Policy
ListEventBuses()                  #Req: BUS
                                  #  - only Name -> NamePrefix
                                  #Res: EventBuses BUS_ARR
                                  #  - no DeadLetterConfig, KmsKeyIdentifier
DescribeEventBus()                #Req: BUS
                                  #  - only Arn + Name -> Name
                                  #Res: BUS
DeleteEventBus()                  #Req: BUS
                                  #  - only Name
                                  #Res: empty

                                  ┌─────────────┐
                                  │   BUS IAC   │
                                  └─────────────┘

AWS::Events::EventBus             #RESPROPs: Name, Description
                                  #RESATTRs: Arn, Name

GENERATE TEMPLATE ==>             #In UI, can generate CloudTemplate template from existing BUSs

new EventBus
 (...CARGS[, CBUS_OPTS])          #
EventBus.fromEventBusArn
 (...CARGS, 'BUS_ARN')->ICBUS     #
EventBus.fromEventBusName
 (...CARGS, 'BUS')->ICBUS         #
EventBus.fromEventBusAttributes
 (...CARGS, OPTS)->ICBUS          #OPTS: eventBusName, eventBusArn, eventSourceName, eventBusPolicy

ICBUS[_OPTS].eventBusName         #'BUS'[_TK] (def: 'CID')
ICBUS.eventBusArn                 #'BUS_ARN'_TK
CBUS_OPTS.description             #BUS.*

                                  ┌─────────────────┐
                                  │   BUS METRICS   │
                                  └─────────────────┘

DVAR EventBusName                 #'BUS'
                                  #With AWS/Events/*InvocationAttempts|Ingestion*|*Rules|MatchedEvents

                                  ┌─────────────────┐
                                  │   BUS LOGGING   │
                                  └─────────────────┘

CLOUDTRAIL ==>                    #DescribeEventBus() is logged with CloudTrail as data EVENTs
                                  #BUS is LOG_RESOURCE

                                  ┌─────────────┐
                                  │   DEFAULT   │
                                  └─────────────┘

DEFAULT BUS ==>                   #BUS with name 'default'
                                  #Already created, cannot be deleted

CUSTOM BUS ==>                    #Non-default BUSs

                                  ┌─────────────────┐
                                  │   DEFAULT IAC   │
                                  └─────────────────┘

DEFAULT BUS ==>                   #No need to declare if keep default RESPROPs
                                  #Else must:
                                  #  - import with CHANGESET.ResourcesToImport
                                  #  - RESOURCE.DeletionPolicy 'Retain'
                                  #  - RESPROP Name 'default'

                                  ┌────────────┐
                                  │   SOURCE   │
                                  └────────────┘

SOURCE                            #PARTNER sending EVENTs to a BUS
                                  #First, PARTNER's ACCOUNT:
                                  #  - creates|deletes the SOURCE
                                  #     - using *PartnerEventSource*()
                                  #Then, BUS's ACCOUNT:
                                  #  - activates the SOURCE by creating a "matching BUS"
                                  #     - i.e. CreateEventBus() with BUS.EventSourceName set to same 'SOURCE'
                                  #     - PARTNER EVENTs can be sent before that, but they will be noop
                                  #  - can enable|disable the SOURCE
                                  #     - using *EventSource*()
SOURCE.Arn                        #'SOURCE_ARN'. 'arn:aws:events:REGION::event-source/SOURCE'
SOURCE.CreationTime               #DATE_NUM

SOURCE.Name                       #'SOURCE'. Is 'aws.partner/PARTNER/EVENT_NAMESPACE/EVENT'
                                  #Must be [:alnum:]-. and max 256 chars
PARTNER                           #AWS registered partner, i.e. known identifier
                                  #Must also be registered as a SOURCE
                                  #  - see process details at https://docs.aws.amazon.com/eventbridge/latest/onboarding/partner_terms.html
                                  #    and following pages
                                  #Currently ~45 SOURCE PARTNERs exist, mostly devtools products
EVENT_NAMESPACE                   #Meant only to namespace|categorize 'EVENT' name
EVENT                             #Name must be unique to this BUS
                                  #E.g. including its ACCOUNT_ID or PARTNER-specific user ID
                                  #That's because neither 'BUS' name nor ACCOUNT_ID is in 'SOURCE_ARN'

SOURCE.CreatedBy                  #'PARTNER'
SOURCE.Account                    #'ACCOUNT_ID' of BUS (not of PARTNER)

SOURCE.State                      #Can be:
                                  #  - 'PENDING': either:
                                  #     - no matching BUS yet
                                  #     - SOURCE disabled with DeactivateEventSource()
                                  #  - 'ACTIVE': matching BUS, and not disabled
                                  #  - 'DELETED': deleted by PARTNER, i.e. by DeletePartnerEventSource()
SOURCE.ExpirationTime             #DATE_NUM. If SOURCE.State PENDING for 7 days, SOURCE is deleted

BUS.EventSourceName               #'SOURCE'. Must be set for a partner BUS
                                  #'BUS' name must be same as 'SOURCE'

                                  ┌────────────────┐
                                  │   SOURCE API   │
                                  └────────────────┘

ActivateEventSource()             #Req: SOURCE
                                  #  - only Name
                                  #Res: empty
ListEventSources()                #Req: SOURCE
                                  #  - only Name -> NamePrefix
                                  #Res: EventSources SOURCE_ARR
                                  #  - no Account
DescribeEventSource()             #Req: SOURCE
                                  #  - only Name
                                  #Res: SOURCE
                                  #  - no Account
DeactivateEventSource()           #Req: SOURCE
                                  #  - only Name
                                  #Res: empty

CreatePartnerEventSource()        #Req: SOURCE
                                  #  - only Name, Account
                                  #Res: SOURCE
                                  #  - only Arn -> EventSourceArn
ListPartnerEventSources()         #Req: SOURCE
                                  #  - only Name -> NamePrefix
                                  #Res: PartnerEventSources SOURCE_ARR
                                  #  - only Arn, Name
ListPartnerEventSourceAccounts()  #Req: SOURCE
                                  #  - only Arn -> EventSourceArn
                                  #Res: PartnerEventSourceAccounts SOURCE_ARR
                                  #  - no Arn, Name, CreatedBy
DescribePartnerEventSource()      #Req: SOURCE
                                  #  - only Name
                                  #Res:SOURCE
                                  #  - only Arn, Name
DeletePartnerEventSource()        #Req: SOURCE
                                  #  - only Name, Account
                                  #Res: empty

                                  ┌────────────────┐
                                  │   SOURCE IAC   │
                                  └────────────────┘

AWS::Events::EventBus             #Includes RESPROPs: EventSourceName

ICBUS[_OPTS].eventSourceName      #'SOURCE'
                                  #Must not use CBUS_OPTS.eventBusName

                                  ┌────────────────────┐
                                  │   SOURCE METRICS   │
                                  └────────────────────┘

AWS/Events/Events                 #NUM of PARNER EVENTs

DVAR EventSourceName              #'SOURCE'
                                  #With AWS/Events/[Matched]Events

                                  ┌──────────────┐
                                  │   WEBHOOKS   │
                                  └──────────────┘

s3://eventbridge-inbound-webhook- #Lambda FUNCTION (Python) to use as a Webhook
 templates-prod-REGION            #It parses Webhook request body|headers, and forward it using PutEvents()
 /lambda-templates                #Different from SOURCEs:
 /PARTNER-lambdasrc.zip           #  - user must create that FUNCTION that calls PutEvents()
                                  #  - as opposed to PARTNER calling PutPartnerEvents() directly
                                  #Available PARTNERs: github, stripe, twilio

ENVVAR EVENT_BUS_NAME             #'BUS' (def: 'default')
ENVVAR
 {PARTNER}_WEBHOOK_SECRET_ARN     #'SECRET_ARN' with PARTNER-specific integrity signature's secret

ERRORS ==>                        #202 on success
                                  #400 on parsing error
                                  #401 on invalid integrity signature
                                  #500 on other errors

SOURCE                            #'github|stripe|twilio.com'
EVENT_TYPE                        #GitHub: X-GitHub-Event [C] (def: 'github-webhook-lambda')
                                  #Stripe: DETAIL.type (def: 'stripe-webhook-lambda')
                                  #Twilio: 'twilio-webhook-lambda'
DETAIL                            #Webhook main payload's contents

                                  ┌───────────────────┐
                                  │   WEBHOOKS AUTH   │
                                  └───────────────────┘

PACTION events:PutEvents          #Must be allowed on BUS, for FUNCTION

PACTION secretsmanager:
 GetSecretValue|DescribeSecret    #Must be allowed on SECRET, for FUNCTION

                                  ┌──────────────────┐
                                  │   WEBHOOKS IAC   │
                                  └──────────────────┘

new GitHubEventProcessor
 (...CARGS, OPTS)
new StripeEventProcessor
 (...CARGS, OPTS)
new TwilioEventProcessor
 (...CARGS, OPTS)                 #CWEBHOOK_HANDLER

CWEBHOOK_HANDLER                  #CFUNCTION with PARTNER-lambdasrc.zip
 .partnerEventsFunction           #memorySize 128KB, timeout 100s, CONCURRENCY 10
                                  #Uses Python 3.7 (outdated)
                                  #Automatically allows permissions as above

STACK_OUTPUT PARTNERFunctionUrl   #'URL' to Lambda FUNC_URL, with AuthType 'NONE'

OPTS.eventBus                     #ICBUS. ENVVAR EVENT_BUS_NAME
OPTS.webhookSecret                #ICSECRET. ENVVAR {PARTNER}_WEBHOOK_SECRET_ARN

                                  ┌──────────────────┐
                                  │   AWS SERVICES   │
                                  └──────────────────┘

INTEGRATED SERVICES ==>           #Many SERVICEs automatically send EVENTs to EventBridge's default BUS
                                  #Often done when the status of a RESOURCE (from specific RESTYPEs) changes
                                  #Documented in their respective SERVICEs
                                  #Received by default, just need to create a RULE for it
                                  #SOURCE is 'aws.SERVICE'

DELIVERY ==>                      #For most SERVICEs, delivery sometimes fail ("best effort")
                                  #For a few SERVICEs, it never fails ("durable")
                                  #Either way, duplicate EVENTs can happen

CLOUDTRAIL ==>                    #CloudTrail is an integrated SERVICE itself
                                  #It can be used as an alternative to integrated SERVICEs:
                                  #  - more SERVICE and EVENTs
                                  #  - but EVENTs are more generic
                                  #See its doc

EVENTBRIDGE ==>                   #Itself emits a few EVENTs (e.g. when CONN.ConnectionState changes), with SOURCE 'aws.events'
                                  #See below

                                  ┌───────────────────────┐
                                  │   AWS SERVICES AUTH   │
                                  └───────────────────────┘

PACTION events:PutEvents          #On default BUS, automatically allowed for other AWS SERVICEs

                                  ┌───────────┐
                                  │   EVENT   │
                                  └───────────┘

EVENTS.Entries                    #EVENT_ARR
                                  #Max 10 items (20 if PARTNER)

EVENTS_RES.FailedEntryCount       #NUM of failed EVENT_RESs
EVENTS_RES.Entries                #EVENT_RES_ARR
                                  #Same length and order as EVENTS.Entries
EVENT_RES.EventId                 #'EVENT_MID', if successful
EVENT_RES.ErrorCode               #'CODE', if failed
EVENT_RES.ErrorMessage            #'MESSAGE', if failed

EVENT                             #Main information being exchanged
                                  #Types of EVENTs:
                                  #  - default: automatically done by AWS SERVICEs (see above)
                                  #  - custom: using PutEvents()
                                  #  - partner: using PutPartnerEvents(), by AWS registered partner (see above)
                                  #Max 256KB
EVENT.EventBusName                #'BUS[_ARN]' (def: 'default')
                                  #If unknown, EVENT is ignored, but does not fail
EVENT.Time                        #DATE_NUM (def: now)

EVENT.Detail                      #'DETAIL_JSON'. Main payload
                                  #Can be anything
                                  #Required, but can be '{}'
                                  #Max 1000 depth levels
EVENT.DetailType                  #'EVENT_TYPE'. Payload type
                                  #Can be anything
                                  #Required
EVENT.Source                      #'EVENT_SOURCE'. Who sent the payload
                                  #With AWS SERVICEs: 'aws.SERVICE'
                                  #With PARTNER: 'SOURCE'
                                  #Else: anything
                                  #  - recommended: dot-delimited list, e.g. 'com.COMPANY.APP'
                                  #Required
EVENT.Resources                   #'ARN'_ARR (def: none) of related RESOURCEs
                                  #Max 2e3 items

EVENT.TraceHeader                 #'HEADER' (def: 'X-Amzn-Trace-Id'). X-Ray header

GEVENT                            #Representation of an EVENT for filtering|mapping purposes
GEVENT.version                    #Always '0' (def)
GEVENT.account                    #'ACCOUNT_ID'
GEVENT.region                     #'REGION'
GEVENT.id                         #'EVENT_MID', generated by API
GEVENT.time                       #EVENT.Time but as 'DATE'
GEVENT.detail|detail-type|source
 |resources                       #EVENT.*

                                  ┌────────────────┐
                                  │   EVENT AUTH   │
                                  └────────────────┘

COND_KEY events:detail-type       #EVENT.DetailType. For PutEvents()
COND_KEY events:source            #EVENT.Source. For PutEvents()
                                  #Can be 'false' to mean EVENT.Source undefined

                                  ┌───────────────┐
                                  │   EVENT API   │
                                  └───────────────┘

PutEvents()                       #Req: EVENTS
                                  #Res: EVENTS_RES
PutPartnerEvents()                #Req: EVENTS
                                  #  - no EndpointId, Entries[*].EventBusName|TraceHeader
                                  #Res: EVENTS_RES

                                  ┌───────────────┐
                                  │   EVENT IAC   │
                                  └───────────────┘

EventBus.grantAllPutEvents
 (YGRANTABLE)->CGRANT             #Allows PACTION events:PutEvents() on any BUS
ICBUS.grantPutEventsTo
 (YGRANTABLE)->CGRANT             #Allows PACTION events:PutEvents() on BUS

                                  ┌───────────────┐
                                  │   EVENT SAM   │
                                  └───────────────┘

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: Lambda FUNCTION, Step Functions MACHINE, AppSync DATA_SOURCE (RESOURCE_REF.RoleName)
                                  #  - Destination: BUS (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing events:PutEvents
                                  #  - on BUS

EventBridgePutEventsPolicy        #SAM POLICY_TEMPLATE (see its doc) that allows:
                                  #  - PACTION events:PutEvents
                                  #  - on 'BUS'
                                  #     - using POLICY_TEMPLATE_PARAMS.EventBusName

                                  ┌───────────────────┐
                                  │   EVENT METRICS   │
                                  └───────────────────┘

AWS/Events/MatchedEvents          #NUM of EVENTs, excluding ones which did not match any RULE

AWS/Events/
 PutEventsApproximateCallCount    #Approximate NUM of PutEvents()
AWS/Events/
 PutEventsApproximateSuccessCount #Approximate NUM of PutEvents() that succeeded
AWS/Events/
 PutEventsApproximateFailedCount  #Approximate NUM of PutEvents() that failed
AWS/Events/
PutEventsApproximateThrottledCount#Approximate NUM of PutEvents() throttled

AWS/Events/PutEventsEntriesCount  #NUM of EVENTs per PutEvents()
AWS/Events/
 PutEventsFailedEntriesCount      #NUM of EVENTs per PutEvents() that failed

AWS/Events/PutEventsLatency       #Duration (in ms) of PutEvents()

AWS/Events/PutEventsRequestSize   #Size (in bytes) of PutEvents()

AWS/Events/PutPartnerEvents*      #Same as AWS/Events/PutEvents* (except PutEventsRquestSize) but for PutPartnerEvents() instead of PutEvents()

                                  ┌──────────────────────────┐
                                  │   EVENT STEP FUNCTIONS   │
                                  └──────────────────────────┘

events:putEvents                  #OPTIMIZED_SERVICE_TASK that calls PutEvents()
                                  #Can be ASYNC_TASK but not JOB_TASK

INPUT.*                           #EVENTS.*
OUTPUT.*                          #EVENTS_RES.*

EVENT.Resources                   #Automatically appends ['EXEC_ARN', 'MACHINE_ARN']

ERROR_OUTPUT.Code                 #'EventBridge.FailedEntry', when EVENTS_RES.FailedEntryCount > 0

                                  ┌───────────────────────────────┐
                                  │   EVENT STEP FUNCTIONS AUTH   │
                                  └───────────────────────────────┘

PACTION events:PutEvents          #Must be allowed for MACHINE.roleArn on the BUS

                                  ┌──────────────────────────────┐
                                  │   EVENT STEP FUNCTIONS IAC   │
                                  └──────────────────────────────┘

new EventBridgePutEvents          #CSTATE_TASK for events:putEvents OPTIMIZED_SERVICE_TASK
 (...CARGS, OPTS)->CEVENTS_TASK   #Automatically allows PACTIONs as described above
                                  #Cannot set EVENT.Time|TraceHeader

OPTS.*                            #CSTATE_TASK_OPTS.*

OPTS.entries                      #CEVENT_ARR
CEVENT.eventBus                   #ICBUS (def: 'default')
CEVENT.detailType|source          #EVENT.*
CEVENT.detail                     #CTASK_INPUT. EVENT.Detail

                                  ┌───────────────────────┐
                                  │   EVENT API GATEWAY   │
                                  └───────────────────────┘

INTEGRATION.integrationSubtype   -#Can be 'EventBridge-PutEvents'
                                  #PARAMs is EVENT.*, i.e. single EVENT
                                  #I.e. first-class INTEGRATION (see API Gateway doc)

                                  ┌────────────────────────────┐
                                  │   EVENT API GATEWAY AUTH   │
                                  └────────────────────────────┘

INTEGRATION.credentialsArn       -#See API Gateway doc

                                  ┌──────────┐
                                  │   RULE   │
                                  └──────────┘

RULE                              #Filters EVENTs, and redirects them to TARGETs
                                  #Should be careful about infinite loops, for cost reasons
                                  #Cannot delete if there are some TARGETs
                                  #Delete is idempotent
                                  #Max 300 (soft) per BUS
RULE.Arn                          #'RULE_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:rule[/BUS]/RULE'
                                  #'/BUS' is omitted for default BUS
RULE.Name                         #'RULE'
                                  #Max 64 chars, [:alnum:].-
RULE.Description                  #STR. Max 512 chars

RULE.EventBusName                 #In input: 'BUS[_ARN]' (def: default BUS)
                                  #In output: 'BUS'

RULE.CreatedBy                    #'ACCOUNT_ID' which created the RULE
                                  #Might differ from RULE's ACCOUNT, if a cross-ACCOUNT PutRule() was done

RULE.ManagedBy                    #'SERVICE'. If RULE created by an AWS SERVICE
                                  #Different from EVENTs emitted automatically by integrated AWS SERVICEs
                                  #  - for those, users create the RULE instead
                                  #SERVICE automatically creates the POLICY to allow sending to EventBridge
RULE|TARGET.Force                 #BOOL. If false (def), do not allow deleting if RULE is SERVICE-managed

RULE.State                        #One of:
                                  #  - 'DISABLED'
                                  #  - 'ENABLED'
                                  #  - 'ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS': see CloudTrail doc

RULE.ScheduleExpression           #See EventBridge Scheduler doc

                                  ┌───────────────┐
                                  │   RULE AUTH   │
                                  └───────────────┘

RULE.RoleArn                      #Default TARGET.RoleArn

COND_KEY events:creatorAccount    #RULE.CreatedBy. For Put|Enable|Disable|Delete|DescribeRule(), Put|RemoveTargets|ListTargetsByRule(), *Tag*()

COND_KEY events:ManagedBy         #RULE.ManagedBy. For Put|Enable|Disable|DeleteRule() and Put|RemoveTargets()

                                  ┌──────────────┐
                                  │   RULE API   │
                                  └──────────────┘

PutRule()                         #Req: RULE
                                  #  - only one with Tags
                                  #  - no Arn, CreatedBy, ManagedBy
                                  #Res: RULE
                                  #  - only Arn -> RuleArn
                                  #Either creates or replaces (does not patch)
EnableRule()                      #Req: RULE
                                  #  - only Name, EventBusName
                                  #Res: empty
DisableRule()                     #Req:
                                  #  - only Name, EventBusName
                                  #Res: empty
ListRules()                       #Req: RULE
                                  #  - only Name -> NamePrefix
                                  #  - only EventBusName
                                  #Res: Rules RULE_ARR
                                  #  - no CreatedBy
DescribeRule()                    #Req: RULE
                                  #  - only Name, EventBusName
                                  #Res: RULE
DeleteRule()                      #Req: RULE
                                  #  - only Name, EventBusName
                                  #  - only one with Force
                                  #Res: empty

                                  ┌──────────────┐
                                  │   RULE CLI   │
                                  └──────────────┘

CLI wizard 'new-rule'             #For CreateRule()

                                  ┌──────────────┐
                                  │   RULE IAC   │
                                  └──────────────┘

GENERATE TEMPLATE ==>             #In UI, can generate CloudTemplate template from existing RULEs

AWS::Events::Rule                 #RESPROPs: Name, Description, EventBusName, State, ScheduleExpression, RoleArn
                                  #RESATTRs: Arn

new Rule(...CARGS[, CRULE_OPTS])
 ->CRULE                          #
Rule.fromEventRuleArn
 (...CARGS, 'RULE_ARN')->ICRULE   #
RESOURCE.onEVENT                  #Automatically sets RULE.EventPattern
 (...CARGS[, CRULE_OPTS])->CRULE  #CRULE_OPTS.targets CTARGET_ARR -> CRULE_OPTS.target CTARGET

ICRULE[_OPTS].ruleName            #'RULE'[_TK]
ICRULE.ruleArn                    #'RULE_ARN'_TK
CRULE_OPTS.description            #RULE.*
CRULE_OPTS.eventBus               #ICBUS. RULE.EventBusName
CRULE_OPTS.enabled                #BOOL. RULE.State

                                  ┌───────────────────┐
                                  │   RULE COMPOSER   │
                                  └───────────────────┘

RULE ENHANCEMENT COMPONENT ==>    #Only includes RULE

                                  ┌──────────────────┐
                                  │   RULE METRICS   │
                                  └──────────────────┘

AWS/Events/TriggeredRules         #NUM of RULE executions
AWS/Events/ThrottledRules         #NUM of RULE executions throttled

DVAR RuleName                     #'RULE'
                                  #With all AWS/Events/* except Put[Partner]Events*, Events, InvocationsCreated
                                  #Also sent as a metric TELEMETRY_ENTITY

                                  ┌──────────────────┐
                                  │   RULE LOGGING   │
                                  └──────────────────┘

CLOUDTRAIL ==>                    #*Rule*() are logged with CloudTrail as data EVENTs
                                  #RULE is LOG_RESOURCE

                                  ┌────────────┐
                                  │   FILTER   │
                                  └────────────┘

RULE.EventPattern                 #'FILTERS_JSON'. Required

FILTERS                           #Ignores EVENTs that do not match
                                  #Matched against GEVENT shape
                                  #Should be as precise as possible
                                  #  - including matching GEVENT.account|region
                                  #Max 4KB (soft)

FILTERS.*                         #And'd, i.e. must all match

FILTERS.$or                       #FILTERS_ARR
                                  #Max 1000 cartesian product of all $or ARRs
                                  #Can be combined with FILTERS.*, e.g. { PROP: ARR, $or: FILTERS_ARR }

FILTERS.VARR                      #ARR of either:
                                  #  - STR|NUM|BOOL|null: ARR.includes() (case-sensitive)
                                  #  - FILTER (ARR has a single item)
                                  #Does not alllow escaping dot in VAR
                                  #  - it always matches both a nested OBJ, and a VAR with a dot in its name

FILTER.anything-but               #VAL|ARR|FILTER2. Negation
FILTER.equals-ignore-case         #STR[_ARR]. ARR.includes() (case-insensitive)
FILTER.numeric                    #['OP', NUM[, 'OP2', NUM2]]
                                  #OP is = > >= < <=
                                  #Min|max NUM [-]5e9, 6 decimal points
                                  #Stringified, i.e. 1 != 1.0 != 1e1
FILTER.exists                     #BOOL. !==|=== undefined
FILTER.prefix|suffix
 [.equals-ignore-case]            #STR. startsWith|endsWith(STR) (case-[in]sensitive)
FILTER.wildcard                   #'GLOB'. Only GLOB character is *
                                  #Can \-escape * and \
                                  #Cannot be too complex, e.g. too many * (not documented how many)
FILTER.cidr                       #'CIDR'. Matches IP

                                  ┌─────────────────┐
                                  │   FILTER AUTH   │
                                  └─────────────────┘

COND_KEY events:detail-type       #FILTERS.detailType. For PutRule()
COND_KEY events:source            #FILTERS.source. For PutRule()
                                  #Can be 'false' to mean EVENT.Source undefined

COND_KEY events:detail.service    #FILTERS.detail.service. For PutRule()
                                  #Meant for AWS Health
COND_KEY                          #FILTERS.detail.eventTypeCode. For PutRule()
 events:detail.eventTypeCode      #Meant for AWS Health

                                  ┌────────────────┐
                                  │   FILTER IAC   │
                                  └────────────────┘

AWS::Events::Rule                 #Includes RESPROPs: EventPattern FILTERS_OBJ

CRULE_OPTS.eventPattern           #CFILTERS. RULE.*
CRULE.addEventPattern(CFILTERS)   #Deep merges (ARR are concatenated)

CFILTERS                          #FILTERS_OBJ
                                  #VARR detail-type -> detailType instead

Match.*(...)->ARR_TK              #All return ARR_TK

Match.anyOf(ARR)                  #FILTERS.VARR's value
Match.exactString(STR)            #FILTERS.VARR's STR value
Match.nullValue()                 #FILTERS.VARR's null value
Match.anythingBut(ARR)            #{anything-but: ARR}
Match.anythingButConjunction
 ('KEY', ARR)
Match.anythingButPrefix|Suffix    #{anything-but: {KEY: ARR}}
 |Wildcard|EqualsIgnoreCase(ARR)  #To pass non-ARR, pass a single item ARR instead
Match.equalsIgnoreCase(STR)       #{equals-ignore-case: STR}
Match.numeric('OP', NUM)
Match.equal|greaterThan[OrEqual]
 |lessThan[OrEqual](NUM)          #{numeric: ['OP', NUM]}
Match.allOf
 (Match.numeric('OP', NUM),
 Match.numeric('OP2', NUM2))      #{numeric: ['OP', NUM, 'OP2', NUM2]}
Match.interval(NUM, NUM2)         #{numeric: ['>=', NUM, '<=', NUM2]}
Match.exists|doesNotExist()       #{exists: BOOL}
Match
 .prefix|suffix[EqualsIgnoreCase]
 (STR)                            #{prefix|suffix[.equals-ignore-case]: STR}
Match.wildcard('GLOB')            #{wilcard: 'GLOB'}
Match.cidr('CIDR')                #{cidr: 'CIDR'}

                                  ┌─────────────────┐
                                  │   FILTER TEST   │
                                  └─────────────────┘

TEST_EVENT_REQ.Event              #'GEVENT_JSON'
                                  #All GEVENT.* must be set, except GEVENT.version|detail which are optional
TEST_EVENT_REQ.EventPattern       #'PATTERN_JSON'

TEST_EVENT_RES.Result             #BOOL. Whether PATTERN matches DETAIL

                                  ┌────────────────────┐
                                  │   FILTER TEST UI   │
                                  └────────────────────┘

TEST PATTERN ==>                  #Can be done from UI ("sandbox")
                                  #Can select sample GEVENTs
                                  #  - including random data from SCHEMAs

                                  ┌─────────────────────┐
                                  │   FILTER TEST API   │
                                  └─────────────────────┘

TestEventPattern()                #Req: TEST_EVENT_REQ
                                  #Res: TEST_EVENT_RES

                                  ┌─────────────────────────┐
                                  │   FILTER TEST LOGGING   │
                                  └─────────────────────────┘

CLOUDTRAIL ==>                    #TestEventPattern() is logged with CloudTrail as data EVENTs
                                  #RULE is LOG_RESOURCE

                                  ┌────────────┐
                                  │   TARGET   │
                                  └────────────┘

TARGETS.Targets                   #TARGET_ARR (no Rule|EventBusNamee)
                                  #Max 10 entries
TARGETS.Rule|EventBusName         #TARGET.*
TARGETS_RES
 .FailedEntryCount|Entries        #Same as EVENTS_RES.* except EventId -> TargetId

TARGET                            #RESOURCEs triggered where EVENTs are emitted
                                  #EVENTs are not stored by EventBridge, they only trigger TARGETs
                                  #Run at least once: rarely can run twice (i.e. should be idempotent)
                                  #Max 5 per RULE
TARGET.Id                         #'TARGET'
                                  #Only [:alnum:]-.

TARGET.Arn                        #'ARN'. TARGET_TYPE-specific.
                                  #Each SERVICE documented it in its respective docs
TARGET.*Parameters                #OBJ. TARGET_TYPE-specific options
                                  #Some TARGET_TYPEs do not have any
                                  #Each SERVICE documented it in its respective docs
                                  #Some values can be 'JSONPATH'
                                  #  - only specific ones, documented as such
                                  #  - only STRs, and not enums
                                  #  - references input (before any transformation)

TARGET.Rule                       #'RULE'
TARGET.EventBusName               #'BUS' (def: 'default') of the RULE

CROSS-REGION|ACCOUNT TARGET ==>   #TARGET must be in same REGION|ACCOUNT as RULE
                                  #  - except for BUS TARGET
                                  #Can work around it by:
                                  #  - using a BUS TARGET to forward EVENT to other REGION|ACCOUNT
                                  #  - creating a RULE in that REGION|ACCOUNT instead
                                  #  - setting permissions accordingly

TARGET.Input                      #'INPUT_JSON'. Input used when calling TARGET's RESOURCE
                                  #Def: 'GEVENT_JSON'
                                  #Max 8KB
TARGET.InputPath                  #'JSONPATH' (see its doc). Alternative to TARGET.Input
                                  #Input becomes GEVENT_JSON after evaluating JSONPATH
TARGET.InputTransformer           #INPUT_TRANSFORM. Alternative to TARGET.Input
INPUT_TRANSFORM.InputTemplate     #STR used as input
                                  #Can be newline-separated "...", which are then joined by newlines
                                  #Max 8KB
INPUT_TRANSFORM.InputPathsMap.VAR #'JSONPATH'. Replaces:
                                  #  - any '<VAR>' in InputTemplate
                                  #  - by evaluation of JSONPATH on GEVENT_JSON
                                  #Evaluation result is in JSON
                                  #  - i.e. if InputTemplate is 'OBJ_JSON', should be used as a whole value
                                  #    (no concatenation, to avoid injection)
                                  #Max 100 VARs
                                  #VAR must be [:alnum:]_-, max 256 chars

                                  ┌───────────────┐
                                  │   TARGET UI   │
                                  └───────────────┘

SANDBOX ==>                       #In UI, can test TARGET.InputPath|InputTransformer

                                  ┌─────────────────┐
                                  │   TARGET AUTH   │
                                  └─────────────────┘

TARGET.RoleArn                    #'ROLE_ARN' used to call TARGET
                                  #Must be assumable by Principal.Service 'events.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn RULE_ARN, aws:SourceAccount ACCOUNT_ID
                                  #Which permission is required is TARGET_TYPE-specific

PACTION iam:PassRole              #Required on current PRINCIPAL, if TARGET.RoleArn set
                                  #Should use COND_KEY iam:PassedToService 'events.amazonaws.com'

AmazonEventBridgeFullAccess       #Also allow PACTION iam:PassRole, as described above

RESOURCE-BASED POLICY ==>         #TARGET_TYPEs which have resource-based POLICYs must use them instead of TARGET.RoleArn
                                  #Must grant to Principal.Service 'events.amazonaws.com'
                                  #COND_KEY aws:SourceArn RULE_ARN, aws:SourceAccount ACCOUNT_ID

COND_KEY events:TargetArn         #TARGET.Arn, as 'ARN'_ARR. For PutTargets()

                                  ┌────────────────┐
                                  │   TARGET API   │
                                  └────────────────┘

PutTargets()                      #Req: TARGETS
                                  #Res: TARGETS_RES
ListTargetsByRule()               #Req: TARGET
                                  #  - only Rule, only EventBusName
                                  #Res: Targets TARGET_ARR
                                  #  - no Rule, EventBusName
ListRuleNamesByTarget()           #Req: TARGET
                                  #  - only Arn -> TargetArn
                                  #  - only EventBusName
                                  #Res: TARGET
                                  # - Rule STR -> RuleNames STR_ARR
RemoveTargets()                   #Req: TARGET
                                  #  - only EventBusName, Rule
                                  #  - only Id STR -> Ids STR_ARR (max 10 items)
                                  #  - only one with Force
                                  #Res: TARGETS_RES

                                  ┌────────────────┐
                                  │   TARGET IAC   │
                                  └────────────────┘

AWS::Events::Rule                 #Includes RESPROPs: Targets TARGET_ARR: Id, Arn, *Parameters, Input*, RoleArn

CRULE_OPTS.targets                #CTARGET_ARR
new CTARGET(..., CTARGET_OPTS)    #... sets TARGET.Arn|*Parameters|Input*|RoleArn
                                  #TARGET.Id is 'TargetNUM', with NUM auto-incremented
                                  #Available CTARGETs documented in each service

CTARGET_INPUT                     #TARGET.Input*
                                  #Passed as values to SERVICE-specific CTARGET_OPTS.*
RuleTargetInput.fromEventPath
 ('JSONPATH')->CTARGET_INPUT      #TARGET.InputPath
RuleTargetInput.fromMultilineText #TARGET.Input STR
 (STR)->CTARGET_INPUT             #Newlines in STR are passed as is
RuleTargetInput.fromText(STR)
 ->CTARGET_INPUT                  #Same newlines in STR are passed escaped as '\n'
RuleTargetInput.fromObject(OBJ)
 ->CTARGET_INPUT                  #TARGET.Input 'OBJ_JSON'

CROSS-REGION|ACCOUNT TARGET ==>   #When TARGET is in different REGION|ACCOUNT as RULE,
                                  #automatically implement workaround as described above:
                                  #  - BUS TARGET to forward EVENT to other REGION|ACCOUNT's default BUS
                                  #     - if different REGION, create ROLE
                                  #     - if different ACCOUNT, create BUS_POLICY (inside a new STACK
                                  #       'TARGET_STACK-EventBusPolicy-support-REGION-ACCOUNT')
                                  #  - instead of adding TARGET in current RULE,
                                  #    create a RULE2 copy in TARGET's STACK
                                  #     - uses default BUS
                                  #     - has only that TARGET
                                  #     - random 'RULE' name

CRULE_OPTS.crossStackScope        #TARGET's CONSTRUCT. Use it as scope if all of:
                                  #  - explicitely set
                                  #  - TARGET in different STACK as RULE
                                  #  - TARGET in same ACCOUNT + REGION as RULE, or both agnostic
                                  #I.e. meant for cross-STACK TARGET (that is not cross-REGION|ACCOUNT)

                                  ┌──────────────────────────┐
                                  │   TARGET UNIVERSAL IAC   │
                                  └──────────────────────────┘

new AwsApi(CAWS_TARGET_OPTS)      #CTARGET that allows calling any AWS SERVICE
                                  #Uses a singleton Lambda TARGET under-the-hood, which makes a call using the JavaScript SDK
                                  #  - timeout 60s
                                  #  - memorySize 256MB
                                  #  - logs on stdout the input, response and ERROR

CAWS_TARGET_OPTS.*                #CTARGET_OPTS.*
                                  #Can use EventField.*(...)

CAWS_TARGET_OPTS.service          #'SERVICE'
CAWS_TARGET_OPTS.action           #'ACTION'
CAWS_TARGET_OPTS.parameters       #PARAMS_OBJ (def: {})
CAWS_TARGET_OPTS.apiVersion       #'SVERSION'

CAWS_TARGET_OPTS.catchErrorPattern#REGEXP (def: none) to ignore specific 'CODEException'

CAWS_TARGET_OPTS.policyStatement  #CSTATEMENT to add to FUNCTION's ROLE
                                  #Def: specific PACTION on any RESOURCE

                                  ┌────────────────────┐
                                  │   TARGET METRICS   │
                                  └────────────────────┘

AWS/Events/InvocationAttempts     #NUM of TARGET calls
AWS/Events/InvocationsCreated     #NUM of TARGET calls per EVENT

AWS/Events/IngestiontoInvocation
 StartLatency                     #Duration (in ms) from EVENT start to TARGET call start
AWS/Events/IngestiontoInvocation
 CompleteLatency                  #Duration (in ms) from EVENT start to TARGET call end, excluding retries
AWS/Events/IngestionToInvocation
 SuccessLatency                   #Duration (in ms) from EVENT start to TARGET call success, including retries

                                  ┌────────────────────┐
                                  │   TARGET LOGGING   │
                                  └────────────────────┘

CLOUDTRAIL ==>                    #*Target*() are logged with CloudTrail as data EVENTs
                                  #RULE is LOG_RESOURCE

                                  ┌──────────────┐
                                  │   JSONPATH   │
                                  └──────────────┘

JSONPATH                          #Only .VAR [NUM] .* and [*]
                                  #If path not matching: undefined, but no error
                                  #Max 256 chars

aws.events.*                      #Can be used as:
                                  #  - 'JSONPATH'
                                  #  - <aws.events.*> in INPUT_TRANSFORM.InputTemplate
aws.events.rule-arn               #'RULE_ARN'
aws.events.rule-name              #'RULE'
aws.events.event.json             #GEVENT
aws.events.event                  #GEVENT, without GEVENT.detail
aws.events.event.ingestion-time   #GEVENT.time

                                  ┌──────────────────┐
                                  │   JSONPATH IAC   │
                                  └──────────────────┘

EventField.*(...)                 #To use inside RuleTargetInput.from*(...)
                                  #When used, sets TARGET.InputTemplate instead of of TARGET.Input
                                  #Replaces EventField.* by <VAR>
                                  #Also sets TARGET.InputPathsMap.VAR 'JSONPATH'
                                  #'VAR' is sluggified JSONPATH

EventField.fromPath('JSONPATH')
 ->STR_TK                         #'JSONPATH'
EventField.account|region|eventId
 |time|detailType|source          #'$.VAR' as STR_TK

                                  ┌───────────┐
                                  │   RETRY   │
                                  └───────────┘

TARGET.RetryPolicy                #RETRY_POLICY. Retries using exponential backoff
                                  #Only for retriable ERROR CODEs
                                  #  - server errors (like 5**)
                                  #  - throttling|concurrency (like 409|429)
                                  #  - authentication (like 401|407)
                                  #  - not for authorization issues

RETRY_POLICY                      #Max NUM (in secs) of time to keep retrying on failed EVENTs
 .MaximumEventAgeInSeconds        #Min: 1m, def|max: 1d

RETRY_POLICY.MaximumRetryAttempts #NUM of retries on failed EVENTs
                                  #Min: 0, def|max: 185

                                  ┌───────────────┐
                                  │   RETRY IAC   │
                                  └───────────────┘

AWS::Events::Rule                 #Includes RESPROPs: Targets[*]: RetryPolicy

CTARGET_OPTS.maxEventAge          #DURATION. RETRY_POLICY.MaximumEventAgeInSeconds
                                  #Must also set CTARGET_OPTS.retryAttempts
CTARGET_OPTS.retryAttempts        #RETRY_POLICY.MaximumRetryAttempts

                                  ┌───────────────────┐
                                  │   RETRY METRICS   │
                                  └───────────────────┘

AWS/Events/Invocations            #NUM of TARGET calls, excluding retries and throttling
AWS/Events/
 SuccessfulInvocationAttempts     #NUM of TARGET calls that succeeded
AWS/Events/FailedInvocations      #NUM of TARGET calls that failed (after retries)
AWS/Events/RetryInvocationAttempts#NUM of TARGET calls that are retries
AWS/Events/DeadLetterInvocations  #NUM of TARGET calls which are skipped due to things like infinite loop prevention

                                  ┌─────────┐
                                  │   DLQ   │
                                  └─────────┘

BUS.DeadLetterConfig.Arn          #'SQS_QUEUE_ARN' to send EVENTs when encrypting failed
                                  #  - e.g. KMS_KEY disabled or missing
                                  #If encryption failure happens while sending to TARGET
                                  #  - as opposed to while receiving EVENT in BUS
                                  #  - then uses TARGET.DeadLetterConfig instead
                                  #Only if BUS.KmsKeyIdentifier set
                                  #  - recommended then

TARGET.DeadLetterConfig.Arn       #'SQS_QUEUE_ARN' to send failed EVENTs when could not send to TARGET
                                  #Also when request waited 24h due to throttling
                                  #  - including through API_DEST.InvocationRateLimitPerSecond
                                  #Recommended

BUG|TARGET.DeadLetterConfig.Arn   #Retries are done first
                                  #QUEUE must be in same REGION
                                  #QUEUE cannot be FIFO
                                  #Sets the following QUEUE MESSAGE_ATTRs
MESSAGE_ATTRS.RULE_ARN            #'RULE_ARN'
MESSAGE_ATTRS.TARGET_ARN          #'TARGET_ARN'
MESSAGE_ATTRS.ERROR_CODE          #'CODE'
MESSAGE_ATTRS.ERROR_MESSAGE       #'MESSAGE'
MESSAGE_ATTRS
 .EXHAUSTED_RETRY_CONDITION       #'MaximumEventAgeInSeconds' or 'MaximumRetryAttempts'
MESSAGE_ATTRS.RETRY_ATTEMPTS      #NUM
MESSAGE_ATTRS.IS_PAYLOAD_TRUNCATED#'BOOL'

                                  ┌──────────────┐
                                  │   DLQ AUTH   │
                                  └──────────────┘

PACTION sqs:SendMessage           #Must be allowed on QUEUE
                                  #  - Principal.Service 'events.amazonaws.com'
                                  #  - COND_KEY aws:SourceArn BUS_ARN|RULE_ARN
                                  #If cross-ACCOUNT, must be done on the QUEUE_POLICY

PACTION kms:*                     #Also when SQS-KMS (see SQS doc)

                                  ┌─────────────┐
                                  │   DLQ IAC   │
                                  └─────────────┘

AWS::Events::EventBus             #Includes RESPROPs: DeadLetterConfig

AWS::Events::Rule                 #Includes RESPROPs: Targets[*]: DeadLetterConfig

CBUS_OPTS.deadLetterQueue         #ICQUEUE. BUS.DeadLetterConfig.Arn

CTARGET_OPTS.deadLetterQueue      #ICQUEUE. TARGET.DeadLetterConfig.Arn
                                  #Automatically allows permissions as described above
                                  #  - unless different ACCOUNT
                                  #  - not kms:*

                                  ┌─────────────────┐
                                  │   DLQ METRICS   │
                                  └─────────────────┘

AWS/Events/InvocationsSentToDlq   #NUM of TARGET calls moved to DLQ
AWS/Events/
 InvocationsFailedToBeSentToDlq   #NUM of TARGET calls that failed to be moved to DLQ

                                  ┌──────────────┐
                                  │   DLQ LINT   │
                                  └──────────────┘

cfn-lint-serverless
aws_cloudwatch_event_target_no_dlq
ES4000                            #TARGET.DeadLetterConfig must be set

                                  ┌────────────────┐
                                  │   TARGET BUS   │
                                  └────────────────┘

TARGET.Arn                        #EventBridge 'BUS_ARN'. Calls PutEvents()
                                  #I.e. pass EVENT from one BUS to another
                                  #Input is 'GEVENT_JSON'
                                  #Cannot chain|forward to a third BUS

                                  ┌─────────────────────┐
                                  │   TARGET BUS AUTH   │
                                  └─────────────────────┘

PACTION events:PutEvents          #Must be allowed, if TARGET.Arn on target BUS2
                                  #Can use either:
                                  #  - TARGET.RoleArn
                                  #  - BUS_POLICY
                                  #     - COND_KEY aws:SourceArn BUS_ARN, aws:SourceAccount
                                  #If cross-ACCOUNT:
                                  #  - must use both
                                  #  - does not use RULE.RoleArn (as opposed to TARGET.RoleArn)

COND_KEY events:eventBusInvocation#'BOOL'. Whether PutEvents() was called by a TARGET with Arn 'BUS_ARN'
                                  #For PutEvents()

                                  ┌────────────────────┐
                                  │   TARGET BUS IAC   │
                                  └────────────────────┘

AWS::Events::Rule                 #Includes RESPROPs: Targets[*]: Arn

new EventBus
 (ICBUS[, CBUS_TARGET_OPTS])      #CTARGET
CBUS_TARGET_OPTS.*                #CTARGET_OPTS.*
CBUS_TARGET_OPTS.role             #ICROLE (def: new singleton ROLE) of TARGET.RoleArn
                                  #Automatically adds permissions as describe above

                                  ┌────────────────────┐
                                  │   TARGET BUS SAM   │
                                  └────────────────────┘

AWS::Serverless::Connector        #Can be used with:
                                  #  - Source: RULE
                                  #  - Destination: BUS (RESOURCE_REF.Arn)
                                  #  - Permissions 'Write'
                                  #Transformed to a MPOLICY on 'ROLE':
                                  #  - allowing events:PutEvents
                                  #  - on BUS

                                  ┌──────────┐
                                  │   HTTP   │
                                  └──────────┘

API_DEST                          #TARGET that makes a HTTP request
                                  #Timeout 5s
                                  #Max 3e3 (soft) per REGION|ACCOUNT
API_DEST.ApiDestinationArn        #'API_DEST_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:api-destination/API_DEST'
API_DEST.Name                     #'API_DEST'
                                  #Must be [:alnum:].-, max 64 chars
API_DEST.Description              #STR. Max 512 chars
API_DEST.CreationTime             #DATE_NUM
API_DEST.LastModifiedTime         #DATE_NUM

API_DEST.ApiDestinationState      #'ACTIVE' or 'INACTIVE'

API_DEST.HttpMethod               #'HTTP_METHOD', uppercased
API_DEST.InvocationEndpoint       #'https://...'
                                  #Max 2KB

API_DEST
 .InvocationRateLimitPerSecond    #NUM (def|max: 300). Max NUM requests per second.

TARGET.Arn                        #'API_DEST_ARN'
                                  #Input is request body

TARGET.HttpParameters             #HTTP_TARGET. Request parameters
                                  #Keys|values can be 'JSONPATH' (except HEADER names)
HTTP_TARGET.PathParameterValues   #'VAL'_ARR
                                  #Must use * in API_DEST.InvocationEndpoint
HTTP_TARGET
 .QueryStringParameters.PARAM     #'VAL'
HTTP_TARGET                       #'VAL'
 .HeaderParameters.HEADER         #Cannot specify most standard headers

Content-Type [C]                  #Def: 'application/json; charset=utf-8'
Retry-After [S]                   #Can be used to increase retry delay
                                  #Can be -1 to stop retrying

                                  ┌───────────────┐
                                  │   HTTP AUTH   │
                                  └───────────────┘

PACTION
 events:InvokeApiDestination      #Must be allowed on API_DEST for TARGET.RoleArn

                                  ┌──────────────┐
                                  │   HTTP API   │
                                  └──────────────┘

CreateApiDestination()            #Req: API_DEST
                                  #  - no ApiDestination*, *Time
                                  #Res: API_DEST
                                  #  - only ApiDestination*, *Time
UpdateApiDestination()            #Req: API_DEST
                                  #  - no ApiDestination*, *Time
                                  #Res: API_DEST
                                  #  - only ApiDestination*, *Time
ListApiDestinations()             #Req: API_DEST
                                  #  - only Name -> NamePrefix
                                  #  - only ConnectionArn
                                  #Res: ApiDestinations API_DEST_ARR
DescribeApiDestination()          #Req: API_DEST
                                  #  - only Name
                                  #Res: API_DEST
DeleteApiDestination()            #Req: API_DEST
                                  #  - only Name
                                  #Res: empty

                                  ┌──────────────┐
                                  │   HTTP IAC   │
                                  └──────────────┘

AWS::Events::ApiDestination       #RESPROPs: Name, Description, HttpMethod, InvocationEndpoint, InvocationRateLimitPerSecond
                                  #RESATTRs: Arn

AWS::Events::Rule                 #Includes RESPROPs: Targets[*]: Arn, HttpParameters

new ApiDestination
 (...CARGS, CAPI_DEST_OPTS)       #API_DEST. Imported from 'aws-cdk-lib/aws-events'
ApiDestination
 .fromApiDestinationAttributes
 (...CARGS, OPTS)->ICAPI_DEST     #OPTS: apiDestinationArn, connection
ICAPI_DEST[_OPTS]
 .apiDestinationName              #STR[_TK]. API_DEST.*
ICAPI_DEST.apiDestinationArn      #STR_TK. API_DEST.*
CAPI_DEST_OPTS.description
 |endpoint|rateLimitPerSecond     #API_DEST.*
CAPI_DEST_OPTS.httpMethod         #STR (def: 'POST'). API_DEST.*

new ApiDestination(ICAPI_DEST
 [, CAPI_DEST_TARGET_OPTS])       #CTARGET for API_DEST. Imported from 'aws-cdk-lib/aws-events-targets'
CAPI_DEST_TARGET_OPTS.*           #CTARGET_OPTS.*
CAPI_DEST_TARGET_OPTS.event       #CTARGET_INPUT
CAPI_DEST_TARGET_OPTS
 .pathParameterValues
 |queryStringParameters
 |headerParameters                #TARGET.HttpParameters
CAPI_DEST_TARGET_OPTS.eventRole   #ICROLE (def: new singleton ROLE) of TARGET.RoleArn
                                  #Automatically allows permissions as described above

                                  ┌────────────────────────────┐
                                  │   HTTP EVENTBRIDGE EVENT   │
                                  └────────────────────────────┘

EVENT_TYPE                        #EventBridge EVENT emitted when API_DEST.Status changes
 'API Destination STATUS'         #STATUS is API_DEST.ApiDestinationState but renamed to 'Activated|Deactivated'
SOURCE                            #'aws.events'
DETAIL.Timestamp                  #'DATE'
DETAIL.ApiDestinationName         #'API_DEST'

                                  ┌────────────────┐
                                  │   CONNECTION   │
                                  └────────────────┘

CONN                              #Sets of secret (e.g. auth-related) HTTP requests parameters, used by an API_DEST
                                  #Max 3e3 (soft) per REGION|ACCOUNT
CONN.ConnectionArn                #'CONN_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:connection/CONN'
CONN.Name                         #'CONN'
                                  #Must be [:alnum:]-. and max 64 chars
CONN.Description                  #STR. Max 512 chars
CONN.CreationTime                 #DATE_NUM
CONN.LastModifiedTime             #DATE_NUM
CONN.LastAuthorizedTime           #DATE_NUM. Last time CONN.ConnectionState became AUTHORIZED

CONN.ConnectionState              #One of:
                                  #  - CREATING
                                  #  - UPDATING
                                  #  - AUTHORIZING: with OAuth or PRIVATE_CONN
                                  #  - AUTHORIZED: active
                                  #  - ACTIVE: same but with PRIVATE_CONN
                                  #  - DEAUTHORIZING, DEAUTHORIZED:
                                  #     - authorization error or DeauthorizeConnection()
                                  #     - cannot re-authorize
                                  #     - removes CONN's SECRET
                                  #  - FAILED_CONNECTIVITY
                                  #  - DELETING
CONN.StateReason                  #STR

API_DEST.ConnectionArn            #'CONN_ARN'. Required

                                  ┌────────────────────┐
                                  │   CONNECTION API   │
                                  └────────────────────┘

CreateConnection()                #Req: CONN
                                  #  - no Connection*, *Time, SecretArn, StateReason
                                  #  - no PRIVATE_CONN.ResourceAssociationArn
                                  #Res: CONN
                                  #  - only Connection*, CreationTime, LastModifiedTime
UpdateConnection()                #Req: CONN
                                  #  - no Connection*, *Time, SecretArn, StateReason
                                  #  - no PRIVATE_CONN.ResourceAssociationArn
                                  #Res: CONN
                                  #  - only Connection*, *Time
ListConnections()                 #Req: CONN
                                  #  - only Name -> NamePrefix
                                  #  - only ConnectionState
                                  #Res: CONN
                                  #  - no *Parameters, Description, SecretArn
DescribeConnection()              #Req: CONN
                                  #  - only Name
                                  #Res: CONN
                                  #  - no CONN_APIKEY.ApiKeyValue, CONN_BASIC.Password, CLIENT_OAUTH.ClientSecret
DeauthorizeConnection()           #Req: CONN
                                  #  - only Name
                                  #Res: CONN
                                  #  - only Connection*, *Time
                                  #Unsets CONN_AUTH.*
DeleteConnection()                #Req: CONN
                                  #  - only Name
                                  #Res: CONN
                                  #  - only Connection*, *Time

                                  ┌────────────────────┐
                                  │   CONNECTION IAC   │
                                  └────────────────────┘

AWS::Events::Connection           #RESPROPs: Name, Description
                                  #RESATTRs: Arn

AWS::Events::ApiDestination       #RESPROPs: ConnectionArn

new Connection
 (...CARGS, CCONN_OPTS)           #
Connection
 .fromConnectionAttributes
 (...CARGS, OPTS)->ICCONN         #OPTS: connectionName, connectionArn, connectionSecretArn
Connection.fromEventBusArn
 (...CARGS, 'CONN_ARN'
 [, 'SECRET_ARN'])->ICCONN        #

ICCONN[_OPTS].connectionName      #'CONN'[_TK]
ICCONN.connectionArn              #STR_TK. CONN.*
CCONN.description                 #CONN.*

ICAPI_DEST[_OPTS].connection      #ICCONN

                                  ┌──────────────────────────────────┐
                                  │   CONNECTION EVENTBRIDGE EVENT   │
                                  └──────────────────────────────────┘

EVENT_TYPE 'Connection STATUS'    #EventBridge EVENT emitted when CONN.ConnectionStatus changes
                                  #STATUS is CONN.ConnectionStatus but renamed to:
                                  #  - 'Creation Started'
                                  #  - 'Update Started'
                                  #  - 'Authorization Started', 'Authorized
                                  #  - 'Deauthorization Started', 'Deauthorized'
                                  #  - 'Activated'
                                  #  - 'Failed Connectivity'
                                  #  - 'Deletion Started'
SOURCE                            #'aws.events'
DETAIL.Timestamp                  #'DATE'
DETAIL.ConnectionName|StateReason #CONN.*

                                  ┌────────────────────────────┐
                                  │   CONNECTION AUTH PARAMS   │
                                  └────────────────────────────┘

CONN.AuthParameters               #CONN_AUTH. Auth-related HTTP request parameters

CONN_AUTH.InvocationHttpParameters#CONN_PARAMS
                                  #Merged with TARGET|PIPE_DEST|ENRICH.HttpParameters (if any), with higher priority
CONN_PARAMS.HeaderParameters
 |QueryStringParameters           #CONN_PARAM_ARR
 |BodyParameters                  #Max 100 items
CONN_PARAM.Key                    #'VAR'. Max 512 chars
CONN_PARAM.Value                  #'VAL'. Max 512 chars

CONN.AuthorizationType            #'BASIC'. HTTP Basic auth
CONN_AUTH.BasicAuthParameters     #CONN_BASIC
CONN_BASIC.Username               #'USERNAME'. Max 512 chars
CONN_BASIC.Password               #'PASSWORD'. Max 512 chars

CONN.AuthorizationType            #'API_KEY'. HTTP Digest auth
CONN_AUTH.ApiKeyAuthParameters    #CONN_APIKEY
CONN_APIKEY.ApiKeyName            #'VAR'. Max 512 chars
CONN_APIKEY.ApiKeyValue           #'VAL'. Max 512 chars

CONN.AuthorizationType            #'OAUTH_CLIENT_CREDENTIALS'. OAuth
                                  #OAuth token automatically refreshed on either:
                                  #  - 401|407
                                  #  - token expiration time getting close
CONN_AUTH.OAuthParameters         #CONN_OAUTH
CONN_OAUTH.HttpMethod             #'POST|PUT|GET'
CONN_OAUTH.AuthorizationEndpoint  #'AUTH_URL'
CONN_OAUTH.ClientParameters
 .ClientID                        #'CLIENT_ID'
CONN_OAUTH.ClientParameters
 .ClientSecret                    #'CLIENT_SECRET'
CONN_OAUTH.OAuthHttpParameters    #CONN_PARAMS

CONN.SecretArn                    #Secrets Manager 'SECRET_ARN' encrypting CONN.* at rest
                                  #Named 'events!connection/...'
CONN_PARAM.IsValueSecret          #BOOL (def: false). Encrypt using CONN.SecretArn

                                  ┌─────────────────────────────────┐
                                  │   CONNECTION AUTH PARAMS AUTH   │
                                  └─────────────────────────────────┘

PACTION actions
 :RetrieveConnectionCredentials   #Allow reading CONN.SecretArn

aws-service-role/                 #SERVICE_LINKED_ROLE used by API_DEST to allow it writing|reading SECRET referenced by CONN.SecretArn
 AWSServiceRoleForAmazon          #Automatically created when using a CONN
 EventBridgeApiDestinations       #  - providing has PACTIONs iam:CreateServiceLinkedRole for that ROLE
                                  #     - COND_KEY iam:AWSServiceName 'apidestinations.events.amazonaws.com'

AmazonEventBridgeApiDestinations  #AWS managed POLICY used by AWSServiceRoleForAmazonEventBridgeApiDestinations. Allows:
 ServiceRolePolicy                #  - secretsmanager:Create|Update|Describe|DeleteSecret(), Put|GetSecretValue()
                                  #  - on SECRET 'events!connection/*'

AmazonEventBridgeFullAccess       #Includes same permissions as above
                                  #Also includes iam:CreateServiceLinkedRole on above ROLE

                                  ┌────────────────────────────────┐
                                  │   CONNECTION AUTH PARAMS IAC   │
                                  └────────────────────────────────┘

AWS::Events::Connection           #Includes RESPROPs: AuthorizationType, AuthParameters
                                  #Includes RESATTRs: SecretArn
                                  #Should avoid secrets in templates, i.e. for secret values, should:
                                  #  - use own Secrets Manager SECRET
                                  #  - use '{{resolve:secretsmanager:...}}'

CCONN_OPTS.headerParameters.VAR
 |queryStringParameters.VAR
 |bodyParameters.VAR              #CCONN_PARAM. CONN_AUTH.InvocationHttpParameters
HttpParameter.fromString
 (STR)->CCONN_PARAM               #
HttpParameter.fromSecret(CSECRET)
 ->CCONN_PARAM                    #Same with CONN_PARAM.IsValueSecret

CCONN_OPTS.authorization          #CCONN_PARAMS. CONN.AuthorizationType|AuthParameters

Authorization.basic
 ('USERNAME', 'PASSWORD'_CSECRET)
 ->CCONN_PARAMS                   #

Authorization.apiKey
 ('VAR', 'VAL'_CSECRET)
 ->CCONN_PARAMS                   #

Authorization.oauth(OPTS)
 ->CCONN_PARAMS                   #
OPTS.httpMethod
 |authorizationEndpoint|clientId  #CONN_OAUTH.*
OPTS.clientSecret                 #'CLIENT_SECRET'_CSECRET
OPTS.headerParameters.VAR
 |queryStringParameters.VAR
 |bodyParameters.VAR              #CCONN_PARAM. CONN_OAUTH.OAuthHttpParameters

ICCONN.connectionSecretArn        #STR_TK. CONN.*

                                  ┌────────────────────────┐
                                  │   CONNECTION PRIVATE   │
                                  └────────────────────────┘

CONN
 .InvocationConnectivityParameters
 .ResourceParameters              #PRIVATE_CONN. CONN to VPC
CONN_AUTH.ConnectivityParameters
 .ResourceParameters              #PRIVATE_CONN. OAuth to VPC

PRIVATE_CONN                      #'VPC_LATTICE_CONF_ARN'
 .ResourceConfigurationArn        #Must be in same REGION, but can be in different ACCOUNT
PRIVATE_CONN                      #'VPC_LATTICE_RESOURCE_ASSOC_ARN'
 .ResourceAssociationArn          #Also sets TAG ManagedByServiceAWSEventBridge 'ACCOUNT_ID:CONN'

                                  ┌─────────────────────────────┐
                                  │   CONNECTION PRIVATE AUTH   │
                                  └─────────────────────────────┘

PACTION vpc-lattice:CreateService
 NetworkResourceAssociation
 |GetResourceConfiguration
 |AssociateViaAWSService-
 EventsAndStates                  #Must be allowed for Service.Principal 'events.amazonaws.com'

                                  ┌────────────────────────────┐
                                  │   CONNECTION PRIVATE IAC   │
                                  └────────────────────────────┘

AWS::Events::Connection           #Includes RESPROPs: InvocationConnectivityParameters, AuthParameters.ConnectivityParameters
                                  #Includes RESATTRs: ResourceParameters.ResourceAssociationArn from the above two

                                  ┌────────────────┐
                                  │   ENCRYPTION   │
                                  └────────────────┘

BUS.KmsKeyIdentifier              #'KMS_KEY_ARN|MID' (def: AWS managed). Encrypt EVENTs at rest
                                  #If AWS managed key, also encrypts: AWS SERVICE EVENTs, API_DEST, ARCHIVE, FILTERS, INPUT_TRANSFORM

                                  ┌─────────────────────┐
                                  │   ENCRYPTION AUTH   │
                                  └─────────────────────┘

PACTION kms:Decrypt               #If BUS.KmsKeyIdentifier set, must be allowed for Principal.Service 'events.amazonaws.com'
 |GenerateDataKey|DescribeKey     #COND_KEY kms:EncryptionContext:aws:events:event-bus:arn BUS_ARN
                                  #COND_KEY aws:SourceArn BUS_ARN
                                  #COND_KEY aws:SourceAccount ACCOUNT_ID

                                  ┌────────────────────┐
                                  │   ENCRYPTION IAC   │
                                  └────────────────────┘

AWS::Events::EventBus             #Includes RESPROPs: KmsKeyIdentifier

CBUS_OPTS.kmsKey                  #ICKEY. BUS.KmsKeyIdentifier
                                  #Automatically allows the permissions described above

                                  ┌──────────────┐
                                  │   ENDPOINT   │
                                  └──────────────┘

ENDPOINT                          #Redirects PutEvents() to a failover REGION2 when the primary REGION is unavailable
                                  #Failover and recovery happen in up to 5 mins
                                  #Optional
                                  #Max 100 (soft) per REGION|ACCOUNT
ENDPOINT.Arn                      #'ENDPOINT_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:endpoint/ENDPOINT'
ENDPOINT.Name                     #'ENDPOINT'
                                  #Must be globally unique, e.g. include 'REGION' in its name
                                  #Must be [:alnum:]-. and 64 chars
ENDPOINT.Description              #STR. Max 512 chars
ENDPOINT.CreationTime             #DATE_NUM
ENDPOINT.LastModifiedTime         #DATE_NUM

ENDPOINT.EndpointId               #'ENDPOINT_SUBDOMAIN', automatically created
EVENTS.EndpointId                 #'ENDPOINT_SUBDOMAIN'. Must be set to use ENDPOINT
                                  #Requires signature 4a (see AWS signature doc)
ENDPOINT.EndpointUrl              #'https://ENDPOINT_SUBDOMAIN.endpoints.event.amazonaws.com'

ENDPOINT.State                    #Can be:
                                  #  - CREATING, CREATE_FAILED
                                  #  - UPDATING, UPDATE_FAILED
                                  #  - ACTIVE
                                  #  - DELETING, DELETE_FAILED
ENDPOINT.StateReason              #STR

ENDPOINT.HomeRegion               #Primary 'REGION'
ENDPOINT.EventBuses[0].EventBusArn#'BUS_ARN' in primary REGION
ENDPOINT.RoutingConfig
 .FailoverConfig
 .Primary.HealthCheck             #'ROUTE53_HEALTHCHECK_ARN' in primary REGION. Required

ENDPOINT.RoutingConfig
 .FailoverConfig.Secondary.Route  #Failover 'REGION2'
ENDPOINT.EventBuses[1].EventBusArn#'BUS_ARN' in failover|secondary REGION
                                  #Must have same 'BUS' name + ACCOUNT as primary

ENDPOINT.ReplicationConfig.State  #'ENABLED' (def) or 'DISABLED'
                                  #Replicate EVENTs from primary REGION to secondary REGION2
                                  #For inverse (during recovery), must use REPLAY instead

                                  ┌───────────────────┐
                                  │   ENDPOINT AUTH   │
                                  └───────────────────┘

ENDPOINT.RoleArn                  #'ROLE_ARN' used to replicate EVENTs to REGION2

COND_KEY events:EventBusArn       #'BUS_ARN'. With CreateEndpoint|UpdateEndpoint()

                                  ┌──────────────────┐
                                  │   ENDPOINT API   │
                                  └──────────────────┘

CreateEndpoint()                  #Req: ENDPOINT
                                  #  - no *Time, StateReason
                                  #  - no EndpointId, EndpointUrl
                                  #  - no State
                                  #  - no Arn
                                  #Res: ENDPOINT
                                  #  - no *Time, StateReason
                                  #  - no Description
                                  #  - no EndpointId, EndpointUrl
UpdateEndpoint()                  #Req: ENDPOINT
                                  #  - no *Time, StateReason
                                  #  - no EndpointId, EndpointUrl
                                  #  - no State
                                  #  - no Arn
                                  #Res: ENDPOINT
                                  #  - no *Time, StateReason
                                  #  - no Description
ListEndpoints()                   #Req: ENDPOINT
                                  #  - only Name -> NamePrefix
                                  #  - only HomeRegion
                                  #Res: Endpoints ENDPOINT_ARR
                                  #  - no HomeRegion
DescribeEndpoint()                #Req: ENDPOINT
                                  #  - only Name, HomeRegion
                                  #Res: ENDPOINT
                                  #  - no HomeRegion
DeleteEndpoint()                  #Req: ENDPOINT
                                  #  - only Name
                                  #Res: empty

                                  ┌──────────────────┐
                                  │   ENDPOINT IAC   │
                                  └──────────────────┘

AWS::Events::Endpoint             #RESPROPs: Name, Description, EventBuses, RoutingConfig, ReplicationConfig, RoleArn
                                  #RESATTRs: Arn, EndpointId, EndpointUrl, State, StateReason

                                  ┌─────────────┐
                                  │   ARCHIVE   │
                                  └─────────────┘

ARCHIVE                           #Stores EVENTs
                                  #Not if BUS.KmsKeyIdentifier set
ARCHIVE.ArchiveArn                #'ARCHIVE_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:archive/ARCHIVE'
ARCHIVE.ArchiveName               #'ARCHIVE'
                                  #Must be [:alnum:]-._ and max 48 chars
ARCHIVE.Description               #STR. Max 512 chars
ARCHIVE.CreationTime              #DATE_NUM

ARCHIVE.State                     #One of:
                                  #  - CREATING, CREATE_FAILED
                                  #  - UPDATING, UPDATE_FAILED
                                  #  - ENABLED
                                  #  - DISABLED: when deleting
ARCHIVE.StateReason               #STR

ARCHIVE.EventSourceArn            #'BUS_ARN'
ARCHIVE.EventPattern              #'FILTERS_JSON' (see above)
                                  #Def: none, i.e. any EVENT

ARCHIVE.RetentionDays             #NUM of days to keep EVENTs
                                  #Def: 0, i.e. forever until ARCHIVE deleted

ARCHIVE.EventCount                #Approximate NUM of stored EVENTs
ARCHIVE.SizeBytes                 #Approximate NUM of bytes of stored EVENTs

                                  ┌─────────────────┐
                                  │   ARCHIVE API   │
                                  └─────────────────┘

CreateArchive()                   #Req: ARCHIVE
                                  #  - no ArchiveArn, CreationTime, State*
                                  #  - no EventCount, SizeBytes
                                  #Res: ARCHIVE
                                  #  - only ArchiveArn, CreationTime, State*
UpdateArchive()                   #Req: ARCHIVE
                                  #  - no ArchiveArn, CreationTime, State*
                                  #  - no EventCount, SizeBytes
                                  #  - no EventSourceArn
                                  #Res: ARCHIVE
                                  #  - only ArchiveArn, CreationTime, State*
ListArchives()                    #Req: ARCHIVE
                                  #  - only ArchiveName -> NamePrefix
                                  #  - only EventSourceArn, State
                                  #Res: Archives ARCHIVE_ARR
                                  #  - no ArchiveArn, Description, EventPattern
DescribeArchive()                 #Req: ARCHIVE
                                  #  - only ArchiveName
                                  #Res: ARCHIVE
DeleteArchive()                   #Req: ARCHIVE
                                  #  - only ArchiveName
                                  #Res: empty

                                  ┌─────────────────┐
                                  │   ARCHIVE IAC   │
                                  └─────────────────┘

AWS::Events::Archive              #RESPROPs: ArchiveName, Description, SourceArn, EventPattern FILTERS_OBJ, RetentionDays
                                  #RESATTRs: Arn

new Archive
 (...CARGS, CARCHIVE_OPTS)        #
ICBUS.archive
 ('CONSTRUCT', CARCHIVE_OPTS)
 ->CARCHIVE                       #

CARCHIVE[_OPTS].archiveName       #STR[_TK]. ARCHIVE.*
CARCHIVE.archiveArn               #STR_TK. ARCHIVE.*
CARCHIVE_OPTS.description         #ARCHIVE.*
                                  #Def (with ICBUS.archive() only): 'Event Archive for BUS Event Bus'
CARCHIVE_OPTS.sourceEventBus      #ICBUS. ARCHIVE.EventSourceArn
CARCHIVE_OPTS.eventPattern        #CFILTERS. ARCHIVE.*
CARCHIVE_OPTS.retention           #DURATION. ARCHIVE.*

                                  ┌────────────┐
                                  │   REPLAY   │
                                  └────────────┘

REPLAY                            #Re-emit stored EVENTs
                                  #Replayed EVENTs are not stored themselves (since already stored)
                                  #EVENTs are emitted in-order per-minute, all at once within each minute
                                  #Max 10 at once per REGION|ACCOUNT
REPLAY.ReplayArn                  #'REPLAY_ARN'. 'arn:aws:events:REGION:ACCOUNT_ID:replay/REPLAY'
REPLAY.ReplayName                 #'REPLAY'
                                  #Must be [:alnum:].-_ and max 64 chars
REPLAY.Description                #STR. Max 512 chars

REPLAY.State                      #Can be:
                                  #  - STARTING
                                  #  - RUNNING
                                  #  - CANCELLING, CANCELLED
                                  #  - COMPLETED, FAILED
REPLAY.StateReason                #STR

REPLAY.EventSourceArn             #'ARCHIVE_ARN' where EVENTs are stored
REPLAY.Destination.Arn            #'BUS_ARN' where to re-emit EVENTs
REPLAY.Destination.FilterArns     #'RULE_ARN'_ARR (def: any) which can be used, in that BUS

REPLAY.EventStartTime             #DATE_NUM of first EVENT to re-emit. Required
REPLAY.EventEndTime               #DATE_NUM of last EVENT to re-emit. Required
REPLAY.EventLastReplayedTime      #DATE_NUM of current EVENT being emitted
REPLAY.ReplayStartTime            #DATE_NUM when REPLAY started
REPLAY.ReplayEndTime              #DATE_NUM when REPLAY ended. Not set if did not end

                                  ┌────────────────┐
                                  │   REPLAY API   │
                                  └────────────────┘

StartReplay()                     #Req: REPLAY
                                  #  - no ReplayArn
                                  #  - no EventLastReplayedTime, Replay*Time, State*
                                  #Res: REPLAY
                                  #  - only ReplayArn, ReplayStartTime, State*
ListReplays()                     #Req: REPLAY
                                  #  - only ReplayName -> NamePrefix
                                  #  - only EventSourceArn, State
                                  #Res: Replays REPLAY_ARR
                                  #  - no ReplayArn
                                  #  - no Description, Destination
DescribeReplay()                  #Req: REPLAY
                                  #  - only ReplayName
                                  #Res: REPLAY
CancelReplay()                    #Req: REPLAY
                                  #  - only ReplayName
                                  #Res: REPLAY
                                  #  - only ReplayArn, State*

                                  ┌────────────┐
                                  │   POLICY   │
                                  └────────────┘

BUS.Policy                        #IAM 'POLICY_DOC'. BUS_POLICY
                                  #Resource-level POLICY on a BUS, i.e. Resource is BUS_ARN
                                  #Principal must be 'ACCOUNT_ID'
                                  #  - this can be worked around using either:
                                  #     - COND_KEY aws:PrincipalArn or aws:SourceArn|SourceAccount
                                  #     - identity-level POLICY instead
                                  #PACTIONs are only cross-REGION|ACCOUNT ones (see below)
                                  #Max 10KB (soft)
                                  #Def: allows nothing

PERMISSION                        #Sets a STATEMENT in BUS.Policy
PERMISSION.StatementId            #STATEMENT.Sid
PERMISSION.EventBusName           #'BUS' (def: 'default'). STATEMENT.Resource
PERMISSION.Action                 #'PACTION'. STATEMENT.Action
                                  #Can only be 'events:PutEvents'. For other PACTIONs, must use PERMISSION.Policy
PERMISSION.Principal              #'ACCOUNT_ID|*'. STATEMENT.Principal

PERMISSION.Condition              #PERMISSION_COND_KEY. STATEMENT.Conditions.CONDITION_OP.COND_KEY 'VAL'
PERMISSION_COND_KEY.Type          #'CONDITION_OP'. Can only be 'StringEquals'
PERMISSION_COND_KEY.Key           #'COND_KEY'. Can only be 'aws:PrincipalOrgID'
PERMISSION_COND_KEY.Value         #'VAL'. Can only be 'ORG_ID'

PERMISSION.Policy                 #IAM 'POLICY_DOC_JSON'. Alternative to PERMISSION.StatementId|Action|Principal|Condition
                                  #Sets all STATEMENTs in BUS.Policy

PERMISSION.RemoveAllPermissions   #BOOL (def: false). Remove all PERMISSIONs instead of specifying one with PERMISSION.StatementId

                                  ┌─────────────────┐
                                  │   POLICY AUTH   │
                                  └─────────────────┘

CROSS-REGION|ACCOUNT REQUESTS ==> #Allowed by using Pricipal with another ACCOUNT, in BUS_POLICY
                                  #Only for PACTIONs: events:PutEvents, events:*Rule*, events:*Target*, events:*Tag*, events:DescribeEventBus
                                  #Can also be '*' for all the above PACTIONs

ANONYMOUS REQUESTS ==>            #Allowed by using Principal '*', in BUS_POLICY
                                  #Not recommended, except to target an ORG by using COND_KEY aws:PrincipalOrgId

PACTION events:AddPermission
 |RemovePermission                #Do not require PACTION events:UpdateEventBus, even though they set BUS.Policy

                                  ┌────────────────┐
                                  │   POLICY API   │
                                  └────────────────┘

PutPermission()                   #Req: PERMISSION
                                  #Res: empty
RemovePermission()                #Req: PERMISSION
                                  #  - only EventBusName, StatementId
                                  #  - only one with RemoveAllPermissions
                                  #Res: empty

                                  ┌────────────────┐
                                  │   POLICY IAC   │
                                  └────────────────┘

AWS::Events::EventBus             #Includes RESPROPs: Policy

AWS::Events::EventBusPolicy       #RESPROPs:
                                  #  - StatementId, EventBusName, Action, Principal, Condition
                                  #  - Statement STATEMENT_OBJ (which sets PERMISSION.Policy)
                                  #Not with Cloud Control (as of now)

CBUS                              #Is RGRANTABLE, using BUS_POLICY
ICBUS.eventBusPolicy              #CBUS_POLICY_CSATTR

new EventBusPolicy
 (...CARGS, CBUS_POLICY_OPTS)     #
CBUS_POLICY_OPTS
 .statementId|statement           #
CBUS_POLICY_OPTS.eventBus         #ICBUS

                                  ┌─────────────────┐
                                  │   POLICY LINT   │
                                  └─────────────────┘

cdk-nag EventBusOpenAccess        #BUS_POLICY must not allow anonymous requests

                                  ┌──────────┐
                                  │   TAGS   │
                                  └──────────┘

RESOURCE_TAGS.ResourceARN         #'ARN'
RESOURCE_TAGS.Tags
BUS|RULE.Tags                     #TAG_PAIRS

                                  ┌──────────────┐
                                  │   TAGS API   │
                                  └──────────────┘

TagResource()                     #Req: RESOURCE_TAGS
                                  #Res: empty
ListTagsForResource()             #Req: RESOURCE_TAGS
                                  #  - only ResourceARN
                                  #Res: RESOURCE_TAGS
                                  #  - only Tags
UntagResource()                   #Req: RESOURCE_TAGS
                                  #  - Tags OBJ -> TagKeys 'TAG'_ARR
                                  #Res: empty

                                  ┌──────────────┐
                                  │   TAGS IAC   │
                                  └──────────────┘

AWS::Events::EventBus             #Includes RESPROPs: Tags
