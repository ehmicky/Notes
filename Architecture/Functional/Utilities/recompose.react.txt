
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   RECOMPOSE   ┃
                                  ┗━━━━━━━━━━━━━━━┛

VERSION ==>                       #0.22.0
                                  #HOC library, i.e. creating wrappers for React types: FUNC(RTYPE)->RTYPE2
                                  #Can require individual functions (like Underscore/Lodash)

HOC                               #Higher order components, i.e. FUNC(RTYPE)->RTYPE2

RECOMPOSE.compose(...)            #Same as _.compose(...) but with more debug info
                                  #Works will with HOCs

                                  ┌────────────┐
                                  │   HELPER   │
                                  └────────────┘

RECOMPOSE.isClassComponent(RTYPE)
->BOOL                            #I.e. derived from React.Component
RECOMPOSE.isReferentially
TransparentFunctionComponent
(RTYPE)->BOOL                     #I.e. stateless component with no defaultProps|contextTypes|propTypes
RECOMPOSE.toClass()->HOC          #Transform a stateless function into a RTYPE
                                  #Can specify FUNC.displayName|name|propTypes|contextTypes|defaultProps

RECOMPOSE.createElement(...)      
RECOMPOSE.createEagerFactory(...) #Like REACT.createElement|Factory(...) except no lazy evaluation for stateless components.

RECOMPOSE.getDisplayName
(RTYPE|'TAG')->STR                #Returns 'TAG', RTYPE.displayName|name or 'Component'
RECOMPOSE.wrapDisplayName         #Same but prepends STR
(RTYPE|'TAG', STR)->STR2          #Used by Recompose HOCs to prepends their name to displayName

                                  ┌───────────┐
                                  │   PROPS   │
                                  └───────────┘

RECOMPOSE.renameProp
('VAR', 'VAR2')->HOC
RECOMPOSE.renameProps
({ 'VAR': 'VAR2' ... })->HOC      #Make PROPS.VAR -> PROPS.VAR2

RECOMPOSE.flattenProp('VAR')->HOC #Make PROPS.VAR.VAR2 -> PROPS.VAR2

RECOMPOSE.mapProps
(FUNC(PROPS)->PROPS2)->HOC        #Make PROPS -> PROPS2
RECOMPOSE.withPropsOnChange       #Same, except recomputed on change (not only at first instantiation), i.e.:
('VAR'_ARR|                       #  - during componentWillReceiveProps(), check if should recompute PROPS2, using FUNC2
FUNC2(FORMER_PROPS, PROPS)->BOOL, #  - 'VAR'_ARR checks if FORMER_PROPS.VAR != PROPS.VAR (shallow comparison)
FUNC(PROPS)->PROPS2)->HOC         #     - i.e. should be variables used in FUNC

RECOMPOSE.withHandlers
({ FUNC(PROPS)->FUNC2(...) ... }
[(PROPS)])->HOC                   #Adds PROPS.FUNC(...), which fires FUNC2(...)

RECOMPOSE.withState               #Adds:
('VAR', 'VAR2', OBJ[(PROPS)])->HOC#  - PROPS.VAR: initial value is OBJ
                                  #  - PROPS.VAR2(VAL[(PROPS.VAR)][, FUNC()]): 
                                  #     - does PROPS.VAR = VAL
                                  #     - actually uses component STATE. FUNC is setState() callback
RECOMPOSE.withReducer             
('VAR', 'VAR2', RFUNC,            
OBJ[(PROPS)])->HOC                #Same except it uses PROPS.VAR2(ACTION), which does PROPS.VAR = RFUNC(PROPS.VAR, ACTION)

                                  ┌───────────────────┐
                                  │   RCOMP MEMBERS   │
                                  └───────────────────┘

RECOMPOSE.lifecycle(OBJ)->HOC     #Adds RCOMP members, i.e. componentWillUpdate(), etc. (except render())
                                  #State changes will be passed as props to lower-order component

RECOMPOSE.withContext
(OBJ, FUNC()->OBJ)->HOC           #Adds childContextTypes OBJ and getChildContext FUNC

RECOMPOSE.getContext(OBJ)->HOC    #Adds contextTypes OBJ

RECOMPOSE.defaultProps(OBJ)->HOC  #Adds defaultProps OBJ
RECOMPOSE.withProps
(OBJ[(PROPS)])->HOC               #Same effect (default props) but without actually using RTYPE.defaultProps

RECOMPOSE.setStatic
('VAR', VAL)->HOC                 #Adds RTYPE.VAR = VAL
RECOMPOSE.setDisplayName
(VAL)->HOC                        #Adds RTYPE.displayName = VAL
RECOMPOSE.setPropTypes
(VAL)->HOC                        #Adds RTYPE.propTypes = VAL

RECOMPOSE.hoistStatics            #Keep static properties when applying HOC
(HOC)->HOC2                       #Except for React-specific attributes: [child]contextTypes, [get]defaultProps, displayName, mixins, type, propTypes

                                  ┌───────────────────────────┐
                                  │   SHOULDCOMPONENTUPDATE   │
                                  └───────────────────────────┘

RECOMPOSE.shouldUpdate
(FUNC(PREV_PROPS,NEXT_PRPS)->BOOL)
->HOC                             #Adds shouldComponentUpdate()->BOOL

RECOMPOSE.pure()->HOC             #Adds shouldComponentUpdate() doing a shallow comparison on PROPS

RECOMPOSE.onlyUpdateForKeys       
('VAR'_ARR)->HOC                  #Adds shouldComponentUpdate() doing a shallow comparison on PROPS.VAR

RECOMPOSE.onlyUpdateForPropTypes
()->HOC                           #Adds shouldComponentUpdate() doing a shallow comparison on the PROPS.VAR mentioned in RTYPE.propTypes

                                  ┌────────────┐
                                  │   RENDER   │
                                  └────────────┘

RECOMPOSE.renderNothing()->HOC    #Replace whole component by one with no HTML

RECOMPOSE.renderComponent
('TAG'|RTYPE)->HOC                #Replace whole component by another one

RECOMPOSE.createSink(FUNC(PROPS))
  ->RTYPE                         #Component with no HTML but firing FUNC(PROPS) on 'mount' and 'update'

RECOMPOSE.componentFromProp('VAR')#Component that is replaced the one specified at PROPS.VAR 'TAG'|RTYPE2. 
 ->RTYPE                          #Props|children are passed along.

RECOMPOSE.nest(RTYPE|'TAG'...)    #Component that is replaced by <RTYPE><RTYPE2>...</RTYPE2></RTYPE>
  ->RTYPE3                        #Props are passed along each level.
                                  #Children are passed to last level.

                                  ┌───────────┐
                                  │   LOGIC   │
                                  └───────────┘

RECOMPOSE.branch                  #Use HOC2 if BOOL true, HOC3 otherwise.
(FUNC(PROPS)->BOOL,HOC2,HOC3)->HOC#Calculated at construction and componentWillReceiveProps
