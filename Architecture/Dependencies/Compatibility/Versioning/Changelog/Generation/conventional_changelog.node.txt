
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   CONVENTIONAL_CHANGELOG   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

CONVENTIONAL-CHANGELOG        #Produce a Changelog for a single version as (0.0.11):
(OBJ, FUNC(ERROR, STR))       #  VERSION [SUBTITLE] (DATE)
                              #  Bug fixes|Features|Breaking changes
                              #    - SCOPE: SUBJECT (COMMIT_ID, closes #NUM)
                              #Must be in repository and git command line must be installed.
                              #Providing it follows those conventions:
                              #  - Commit message:
                              #      TYPE(SCOPE): SUBJECT
                              #
                              #      BODY
                              #  - TYPE can be feat, fix, docs (only documenting), style (correct style), refactor, test
                              #    (add missing tests), chore (change to process)
                              #    Only feat|fix will appear in changelog
                              #  - SCOPE is the module or app part
                              #  - SUBJECT: no dot at end, no capital letter at beginning
                              #  - BODY: 
                              #     - include BREAKING CHANGE: SUBBODY at end, enumerating them if it's the case,
                              #       with before and after
                              #     - same with "breaks" only, if private API
                              #     - Referencing issue on separate line: Closes #NUM...
                              #OBJ:
                              #  - repository GIT_URL (in order to link #NUM URLs)
                              #  - version STR (def: package.json version)
                              #  - subtitle STR: appended to VERSION (see above)
                              #  - file FILE: prepend content to STR (e.g. CHANGELOG.md), but doesn't modify FILE
