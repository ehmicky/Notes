
                                  ┏━━━━━━━━━┓
                                  ┃   UMD   ┃
                                  ┗━━━━━━━━━┛

MODULE LOADING ==>                                    #Goals:
                                                      #  - executing JavaScript dynamically (files are still read/fetched)
                                                      #  - organizing code in several files
                                                      #  - handling dependencies

TYPES ==>                                             #  - Global variables:
                                                      #     - GLOBAL.VAR = VAL
                                                      #     - sync
                                                      #     - no namespacing, no dynamic loading, no dependencies handling
                                                      #  - AMD:
                                                      #     - define(), like requireJS
                                                      #     - Angular|Backbone have AMD-syntax, but not same advantages 
                                                      #     - async
                                                      #     - can load non-JavaScript
                                                      #     - can run natively client-side
                                                      #     - can have several exports per file
                                                      #  - CommonJS-like:
                                                      #     - require() and exports, like Node.js and browserify
                                                      #     - sync
                                                      #     - less verbose
                                                      #     - usually server-side
                                                      #  - ES6:
                                                      #     - export VAL and import VAR from MODULE
                                                      #     - less verbose
                                                      #     - sync
                                                      #     - will run natively client-side when browsers suppport it
                                                      #     - can have several exports per file


UMD ==>                                               #Universal Module Definition: wrapper that fits AMD, Node.js/browserify 
                                                      #(not CommonJS), Global
(function( root, factory ){                           
  if ( typeof define === 'function' && define.amd ) { 
    define( [ ['DEP'] ], factory );  
  } else if ( typeof exports === 'object' ) { 
    module.exports = factory([require('DEP')]);
  } else { 
    root.VAR = factory([root.DEP]);  
  }
}(this, function([DEP]) { 
  // Here goes the library$
  return OBJ|FUNC;  
}));                                                  

GULP-WRAP-UMD(OBJ)                                    #Gulp plugin (0.2.1)
                                                      #Wrap IOSTREAM with UMD. OBJ members are:
                                                      #  - deps OBJ|STR_ARR: DEP_ARR to use. 
                                                      #    OBJ allow different names: 
                                                      #      - name STR: in everything else
                                                      #      - cjsName: in require()
                                                      #      - amdName: in define()
                                                      #      - globalName: in root.*
                                                      #      - paramName: in function()
                                                      #  - exports STR: return ...; (déf: last file line)
                                                      #  - namespace STR: root.... = factory() (déf: "gulpWrapUmd")
