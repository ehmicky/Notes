
              
   RELEASE-IT  
              



ALTERNATIVES ==>                  #  - release-it (preferred)
                                  #  - np: very similar
                                  #  - release-please:
                                  #     - based on GitHub bot creating PRs to merge
                                  #     - and on conventional commits
                                  #  - publish-please: not well maintained

VERSION ==>                       #16.2.1

STEPS ==>                         #  - safety checks:
                                  #     - npm registry is up
                                  #     - authenticated to npm
                                  #     - this is a git repository
                                  #     - no uncommited changes
                                  #     - correct branch
                                  #     - there is a remote branch
                                  #     - new commits since last tag
                                  #  - generate changelog
                                  #  - npm version
                                  #  - npm publish
                                  #  - git commit
                                  #  - git tag
                                  #  - git push


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Looked in:
                                  #  - CLI flags
                                  #  - --config|-c PATH.EXT
                                  #  - GIT_ROOT/.release-it.EXT
                                  #  - PACKAGE.release-it OBJ
                                  #EXT can be: json|js|cjs|yaml|yml|toml

TEMPLATE                          #STR. Handlebars template which can contain "${VAR}" among:
                                  #  - version, latestVersion: 'X.Y.Z'
                                  #  - npm.name STR: package.json name
                                  #  - branchName STR: git branch
                                  #  - from|to 'COMMIT'
                                  #  - latestTag STR
                                  #  - releaseUrl 'URL'
                                  #  - repo.project|repository|owner|host|remote|protocol
                                  #  - changelog
                                  #  - increment STR (e.g. 'patch')
                                  #  - version.isPreRelease BOOL
                                  #  - any CONF.*
'COMMAND'                         #Can use TEMPLATE

CONF.git|npm|github|gitlab false  #Skip this whole step


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


release-it                        #CLI usage

RELEASE(CONF)                     #Programmatic usage

--dry-run|-d                      #Dry run
--release-version                 #Print next VERSION
--changelog                       #Print generated changelog for that version

--ci                              #Do not run interactively
--only-version                    #Do not run interactively except for version prompt

--increment|-i INCREMENT          #Version increment among:
                                  #  - "VERSION"
                                  #  - "major|minor|patch"
                                  #  - "pre*"
                                  #  - false: update current version instead
                                  #Def: "patch"
                                  #Can also be positional argument
--preReleaseId[=STR]              #Mark as pre-release.
                                  #STR can be "beta", "next", etc. Def: based on previous pre-release
--preRelease[=STR]                #Same as --preReleaseId[=STR] --npm.tag=STR --github.preRelease
--snapshot                        #STR. Use 'v0.0.0-STR.COUNTER'. Meant for non-publish release testing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              GIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.git.requireCleanWorkingDir   #BOOL (def: false). Fail if uncommited files
CONF.git.addUntrackedFiles        #BOOL (def: false). Add untracked files.
CONF.git.requireBranch            #'BRANCH'|BOOL (def: false). Fail if git branch different.
                                  #Can use GLOB
CONF.git.requireUpstream          #BOOL (def: true). Require remote branch.
                                  #If false, uses git --set-upstream
CONF.git.requireCommits           #BOOL (def: false). Fail if no commits since last tag.
CONF.git.commitsPath              #'PATH' used by CONF.git.requireCommits (def: any)

CONF.git.commit                   #BOOL (def: true). Run git commit.
CONF.git.commitMessage            #'TEMPLATE' (def: 'Release ${version}'). git commit -m argument
CONF.git.commitArgs               #STR_ARR (def: []). Additional git commit arguments

CONF.git.tag                      #BOOL (def: true). Run git tag.
CONF.git.tagAnnotation            #'TEMPLATE' (def: 'Release ${version}'). git tag -m argument
CONF.git.tagName                  #STR. git tag version.
                                  #Def: null, i.e. "vVERSION"
CONF.git.tagArgs                  #STR_ARR. Additional git tag arguments
CONF.git.tagMatch                 #'GLOB' used to filter git tags when looking for last tag.
                                  #Def: null
CONF.git.tagExclude               #Like tagMatch, but inverse
                                  #Def: null
CONF.git.getLatestTagFromAllRefs  #BOOL (def: false). Include tags not reachable from current commit

CONF.git.push                     #BOOL. Run git push.
CONF.git.pushArgs                 #STR_ARR (def: ['--follow-tags']). Additional git push arguments
CONF.git.pushRepo                 #"REPO" to push to
                                  #Def: "", i.e. current one


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              NPM              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.npm.publish                  #BOOL (def: true). Run npm publish
CONF.npm.publishPath              #'DIR' to publish (def: '.')
CONF.npm.tag                      #STR (def: 'latest', or 'next' if pre-release). npm publish --tag argument
CONF.npm.otp                      #STR or null (def). npm publish --otp argument
CONF.npm.publishArgs              #STR_ARR. Additional npm publish arguments

CONF.npm.ignoreVersion            #BOOL (def: false). Use the git tag version instead of package.json
CONF.npm.allowSameVersion         #BOOL (def: false). Allow new version being same as current one
CONF.npm.versionArgs              #STR_ARR (def: []). Additional npm version arguments

CONF.npm.skipChecks               #BOOL. If false (def), ensure npm registry is up and is authenticated

CONF.npm.timeout                  #NUM (in secs, def: 10)

CONF.npm.publishConfig.publicPath #'/PATH' used for npm API
                                  #Meant for npm alternatives like Verdaccio


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         RELEASE NOTES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.github|gitlab.release        #BOOL (def: false).
                                  #Create a new GitHub|GitLab release
CONF.github|gitlab.update         #BOOL (def: false)
                                  #Update an existing GitHub|GitLab release
CONF.github.web                   #BOOL (def: false)
                                  #If false, print|open release page, pre-filled.
                                  #If true, update release automatically.

CONF.github|gitlab.releaseNotes   #'COMMAND' printing the release notes on stdout, or FUNC(CONTEXT)->[PROMISE_]STR
                                  #Def: null, i.e. uses CONF.git.changelog
CONF.git.changelog                #'COMMAND' printing the changelog
                                  #Def: "git log --pretty=format:\"* %s (%h)\" ${from}...${to}"
CONF.github.autoGenerate          #BOOL (def: false). Use GitHub automatic release note generation.

CONF.github|gitlab.releaseName    #'TEMPLATE' (def: 'Release {version}')
CONF.github|gitlab.assets         #'PATH' or null (def) to GitHub|GitLab assets to attach to release notes
CONF.gitlab.milestones            #STR_ARR (def: []). Set milestones with GitLab release
CONF.github.preRelease            #BOOL (def: auto). Whether to mark GitHub release as pre-release
CONF.github.draft                 #BOOL (def: false). Whether to mark GitHub release as draft

CONF.github|gitlab.skipChecks     #BOOL (def: false). If false, fail if current user is not authorized to create a GitHub|GitLab release

CONF.github.comments              #BOOL (def: false) or OBJ.
                                  #Adds a GitHub comment on any issue|PR mentioned in the changelog
CONF.github.comments.submit       #BOOL (def: false)
CONF.github.comments.issue|pr     #STR.
                                  #Def: ":rocket: _This issue|pull request has been resolved in v${version}. See [${releaseName}](${releaseUrl}) for release notes._"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         GITHUB/GITLAB         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.github|gitlab.tokenRef       #'ENVVAR' name (def: "GITHUB_TOKEN|GITLAB_TOKEN") used when CONF.github.web true
CONF.gitlab.tokenHeader           #GitLab token header name (def: 'Private-Tokn')
CONF.gitlab.
 certificateAuthorityFile         #'PATH' or null (def)

CONF.github.host                  #'HOST' (def: 'api.github.com')
CONF.gitlab.origin                #Custom 'HOST' (def: null)
CONF.github.proxy                 #'HOST' or null (def)

CONF.github.timeout               #NUM (in secs, def: 0)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CUSTOM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.hooks.HOOK                   #'COMMAND'[_ARR] to run at specific points.
                                  #HOOK is 'before|after[:PLUGIN]:EVENT'
                                  #  - PLUGIN: version|git|npm|github|gitlab
                                  #  - EVENT: init|bump|release

PLUGINS ==>                       #Custom plugins can be used and written
