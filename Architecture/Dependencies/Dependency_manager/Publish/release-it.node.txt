
              
   RELEASE-IT  
              



VERSION ==>                       #15.5.0

release-it                        #Does:
                                  #  - safety checks:
                                  #     - npm registry is up
                                  #     - authenticated to npm
                                  #     - this is a git repository
                                  #     - no uncommited changes
                                  #     - correct branch
                                  #     - there is a remote branch
                                  #     - new commits since last tag
                                  #  - generate changelog
                                  #  - npm version
                                  #  - npm publish
                                  #  - git commit
                                  #  - git tag
                                  #  - git push

CONF                              #Looked in:
                                  #  - CLI flags
                                  #  - --config|-c PATH.EXT
                                  #  - GIT_ROOT/.release-it.EXT
                                  #  - PACKAGE.release-it OBJ
                                  #EXT can be: json|js|cjs|yaml|yml|toml

--dry-run|-d                      #Dry run
--release-version                 #Print next VERSION
--changelog                       #Print generated changelog for that version

--ci                              #Do not run interactively
--only-version                    #Do not run interactively except for version prompt

--increment|-i INCREMENT          #Version increment among:
                                  #  - "VERSION"
                                  #  - "major|minor|patch"
                                  #  - "pre*"
                                  #Def: "patch"
                                  #Can also be positional argument

TEMPLATE                          #STR. Can contain "${VAR}" among:
                                  #  - version: 'X.Y.Z'
                                  #  - branchName
                                  #  - repo.project
                                  #  - npm.name
                                  #  - from|to 'COMMIT'

CONF.git false                    #Skip all git steps

CONF.git.requireCleanWorkingDir   #BOOL (def: false). Fail if uncommited files
CONF.git.addUntrackedFiles        #BOOL (def: false). Add untracked files.
CONF.git.requireBranch            #'BRANCH'|BOOL (def: false). Fail if git branch different.
                                  #Can use GLOB
CONF.git.requireUpstream          #BOOL (def: true). Require remote branch.
                                  #If false, uses git --set-upstream
CONF.git.requireCommits           #BOOL (def: false). Fail if no commits since last tag.

CONF.git.commit                   #BOOL (def: true). Run git commit.
CONF.git.commitMessage            #'TEMPLATE' (def: 'Release ${version}'). git commit -m argument
CONF.git.commitArgs               #ARR (def: []). Additional git commit arguments

CONF.git.tag                      #BOOL (def: true). Run git tag.
CONF.git.tagAnnotation            #'TEMPLATE' (def: 'Release ${version}'). git tag -m argument
CONF.git.tagName                  #STR. git tag version.
                                  #Def: null, i.e. "vVERSION"
CONF.git.tagArgs                  #ARR. Additional git tag arguments
CONF.git.tagMatch                 #'GLOB' used to filter git tags when looking for last tag.
                                  #Def: null

CONF.git.push                     #BOOL. Run git push.
CONF.git.pushArgs                 #ARR (def: ['--follow-tags']). Additional git push arguments
CONF.git.pushRepo                 #"REPO" to push to
                                  #Def: "", i.e. current one

CONF.npm.publish                  #BOOL
CONF.npm.publishPath              #'DIR'
CONF.npm.publishArgs              #ARR
CONF.npm.tag                      #STR|null
CONF.npm.otp                      #STR|null
CONF.npm.ignoreVersion            #BOOL
CONF.npm.allowSameVersion         #BOOL
CONF.npm.versionArgs              #ARR
CONF.npm.skipChecks               #BOOL
CONF.npm.timeout                  #NUM

CONF.github|gitlab.release        #BOOL (def: false).
                                  #Generate a GitHub|GitLab release
CONF.github.web                   #BOOL (def: false)
                                  #If false, print|open release page, pre-filled.
                                  #If true, update release automatically.
CONF.github|gitlab.tokenRef       #'ENVVAR' name (def: "GITHUB_TOKEN|GITLAB_TOKEN") used when CONF.github.web true
CONF.github|gitlab.releaseName    #'TEMPLATE' (def: 'Release {version}')
CONF.github|gitlab.releaseNotes   #STR|null
CONF.git.changelog                #'COMMAND'
                                  #Def: "git log --pretty=format:\"* %s (%h)\" ${from}...${to}"
CONF.github|gitlab.skipChecks     #BOOL (def: false). If false, fail if current user is not authorized to create a GitHub|GitLab releas
CONF.github|gitlab.assets         #BOOL

CONF.github.autoGenerate          #BOOL
CONF.github.preRelease            #BOOL
CONF.github.draft                 #BOOL
CONF.github.host                  #STR|null
CONF.github.timeout               #NUM
CONF.github.proxy                 #STR|null

CONF.gitlab.milestones            #ARR
CONF.gitlab.tokenHeader           #STR
CONF.gitlab.
 certificateAuthorityFile         #STR|null
CONF.gitlab.origin                #STR|null

CONF.hooks                        #
