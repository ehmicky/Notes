
       
   NPM  
       



VERSION ==>                   #8.19.0

SUMMARY ==>                   #Node.js package manager.
                              #Install dependencies:
                              #  - production vs dev vs optional vs peer
                              #  - local vs global
                              #  - binaries
                              #  - symlinks (local development)
                              #  - versions locking
                              #  - native modules
                              #  - workspaces
                              #Optimize dependencies: outdated dependencies, security alerts, cache, dedupe, prune
                              #Versioning: versions, tags, git integration
                              #Distribute/publish:
                              #  - npm registry
                              #  - npmjs.com search
                              #  - file selection, including main file and bundling dependencies
                              #  - deprecation
                              #  - ensure node/npm/OS/CPU version
                              #  - metadata: license, websites, authors
                              #Automation: lifecycle scripts, webhooks
                              #Authentication: password, access token, 2-factor auth
                              #Authorization: package owners, private packages, organization/team permissions

NPM ENTERPRISE ==>            #On-premise npm registry.
                              #Also offer more authentication schemes.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           NOTATION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                       #LPREFIX/package.json
                              #Package information

PKG                           #PKGDIR|PKGREPO|PKGNAME
PKGDIR                        #DIR with package.json
                              #  - PATH to it
                              #  - PATH|URL to .tar[.gz]|.tgz of it (must have a top-level folder "package/")
PKGREPO                       #URL to code repository among:
                              #  - git[+ssh|http|https]://*.git
                              #  - [github:]USER/REPO
                              #  - gist:[USER/]GIST_ID
                              #  - gitlab|bitbucket:USER/REPO
                              #Can end with #COMMIT, #TAG|BRANCH or #semver:RANGE
PKGNAME                       #Package name, as published on npm

PKG:PKG2                      #Like PKG but installed as alias PKG2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DIRECTORIES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install|ls|update|outdated
 |prefix|root|bin
-g|--global
--location=global|local
CONF.global                   #BOOL (def: false). Use GPREFIX instead of LPREFIX

PREFIX                        #GPREFIX|LPREFIX
GPREFIX                       #Used for global installs (CLI)
                              #Same directory as Node install (def: ~/.nvm/versions/node/VERSION with nvm)
                              #Can be overriden by CONF.prefix
LPREFIX                       #Used for local installs (require())
                              #First directory up that holds either package.json or node_modules/, or PWD if none
LPATH                         #PATH relative to LPREFIX
npm prefix                    #Prints PREFIX

INSTALLDIR                    #GINSTALLDIR|LINSTALLDIR
GINSTALLDIR                   #GPREFIX/[lib/]node_modules (no lib/ on Windows)
LINSTALLDIR                   #LPREFIX/node_modules
npm root                      #Prints INSTALLDIR/node_modules

CONF.tmp                      #PATH (def: TMPDIR ENVVAR or /tmp)

CONF.umask                    #STR (def: "022"). Used when creating files


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                      #In order of priority:
                              #  - npm --VARR VAL
                              #  - ENVVAR npm_config_VARR (underscored)
                              #  - LPREFIX/.npmrc
                              #     - INI format:
                              #        - VAR = VAL
                              #        - ARR[] = VAL
                              #        - ;COMMENT or #COMMENT
                              #     - can use ${ENVVAR}
                              #  - ~/.npmrc (CONF.userconfig): same format
                              #  - GPREFIX/etc/npmrc (CONF.globalconfig): same format
                              #  - PACKAGE.config.VARR: only for PKGNAME:VARR
                              #  - PACKAGE.publishConfig.VARR: only if npm publish
                              #Dependencies' CONF is never used.
                              #Def VAL is "true"

CONF.PKGNAME:VARR             #Can have package-specific configuration VAR by prefixing with "PKGNAME:"

npm config set VARR=[VAL] ... #Modifies userconfig
-g|--global|--location=global #Modifies globalconfig
npm config get VARR ...       #
npm config delete VARR ...    #
npm config list               #
-l|--long                     #Show defaults instead
npm config edit               #
npm config ...
--location=STR                #Can be 'user', 'global', 'project'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              PKG              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm pkg set VARR=VAL ...
npm pkg get VARR ...
npm pkg delete VARR ...       #Read|write package.json
npm pkg ...
--json                        #
--force                       #Bypass validation checks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BOOTSTRAP           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm init                      #Create a new package.json with a set of questions
-y|--yes                      #
--scope @SCOPE                #
-f|--force                    #
CONF.init-license|version|
 author-name|email|url        #Prefill answers to questions
CONF.init-module              #If available, require this file and uses its value OBJ as package.json, instead of asking set of questions
                              #Def: ~/.npm-init.js

npm init @SCOPE               #Same as npx @SCOPE/create
npm init [@SCOPE/]PKGNAME     #Same as npx [@SCOPE/]create-PKGNAME


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROFILE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCOUNT CRUD ==>              #Some must be done on the website.

npm profile set VAR VAL       #Set anything that can be retrieved by npm profile get VAR
npm profile get name
npm whoami                    #Username
npm profile get email         #
npm profile get password      #Can only be set, not get
npm profile get fullname      #
npm profile get
 homepage|freenode|twitter    #
npm profile get
 created|updated              #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTHENTICATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.REGISTRY_URL:_authToken  #Access token
                              #Set by npm token|adduser
                              #npm REGISTRY_URL is //registry.npmjs.org/
                              #Can:
                              #  - be restricted to read-only actions
                              #  - be IP-restricted with a CIDR
ENVVAR NPM_TOKEN              #Not used by npm, but convention for where it should be stored as an ENVVAR
CONF.always-auth              #BOOL (def: false). Require always being authenticated, even for GET requests

npm token list
npm token create
--read-only
CONF.read-only
--cidr CIDR
CONF.cidr
npm token revoke TOKEN|ID     #Manage access tokens

npm adduser                   #Authenticate, i.e. creates a new access token and set it to CONF.REGISTRY_URL:_authToken
                              #If user does not exist, creates it
CONF.auth-type                #How to authenticate with npm adduser:
                              #  - 'legacy' (default): prompts for username|password|email
                              #  - 'web'
CONF.sso-type                 #With CONF.auth-type 'sso', whether to use 'saml', 'oauth' or null
                              #Is same as using CONF.auth-type 'saml|oauth'
CONF.sso-poll-frequency       #With CONF.auth-type 'sso', how often to poll during authentication (in ms, def: 500)

CONF.strict-ssl               #BOOL true (def) for SSL authentication
CONF.ca                       #STR[_ARR] (def: null, i.e. known CA) with the root CA
CONF.cafile                   #STR (def: null): like CONF.ca but as a file
CONF.cert                     #STR (def: null)
CONF.key                      #STR (def: null)

npm logout                    #Remove authentication, i.e. unsets CONF.REGISTRY_URL:_authToken and invalidate token

npm profile get|set
 "2-factor auth"              #Either:
npm enable|disable-2fa        #  - auth-only: login
 [auth-only|auth-and-writes]  #  - auth-and-writes: login, account|auth update, publish package
npm publish --otp NUM         #Specify one-time passport for 2-factor authentication.
CONF.otp                      #Otherwise it is prompted.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTHORIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE OWNER ==>             #Can publish package, change metadata and add|rm other owners
                              #Different from organization owners

npm owner add|rm USER [PKGNAM]#
npm owner ls [PGNAME]         #Manage package owners


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRIVATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.private               #BOOL (def: false)
                              #Make npm publish fail

npm publish                   #Make package private on npm
--access public|restricted    #Paid feature (7$/month)
CONF.access                   #STR. Default to 'restricted' if PKGNAME uses @SCOPE
npm access public|restricted
 [PKGNAME]                    #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORGANIZATION CRUD ==>         #Done online on npm

ROLE                          #  - developer
                              #  - admin: also team management
                              #  - owner:
                              #     - also billing, members access control, user management
                              #     - creator is first owner

npm org ls ORG [USER]         #Print USERs within ORG
npm org set ORG USER ROLE     #
npm org rm ORG USER           #

SCOPE                         #USER|ORG
                              #PKGNAME can always be namespaced with "@SCOPE/"
                              #  - installed as node_modules/@SCOPE/...

TEAM                          #ORG:TEAM_NAME
                              #Group of users within ORG
                              #ORG:developers:
                              #  - automatically created
                              #  - new members automatically added to it with read-write access

npm team ls ORG               #Print TEAMs within ORG

npm team create|destroy TEAM  #
npm team add|rm TEAM USER     #
npm team ls TEAM              #
npm team edit TEAM            #Manage USERs within TEAM

npm access grant
 read-only|read-write TEAM
 [PKGNAME]                    #
npm access revoke TEAM        #Change read|write permission of TEAM for package
 [PKGNAME]                    #If package is public, 'read' is always implied.
npm access edit [PKGNAME]     #

npm access ls-packages
 [USER|SCOPE|TEAM]            #Print all matching USERs with their read-only|read-write access
npm access ls-collaborators   #Prints all USERs with their read-only|read-write access
 [PKGNAME [USER]]             #If USER, only within USER's teams


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VERSIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION
RANGE                         #See node-semver doc
PKGTARGET                     #RANGE|TAG|PKGDIR|PKGREPO

PKGNAME@RANGE                 #PKGNAME can always end with @RANGE

PACKAGE.version               #VERSION

npm version                   #Modifies PACKAGE.version in package.json, package-lock.json and npm-shrinkwrap.json
 VERSION|STR|from-git         #and (if inside a Git repo) commit it.
                              #  - STR is argument to SEMVER.inc() (see its doc)
                              #  - "from-git" uses the latest Git tag.
                              #Does not create any npm TAG
-m|--message                  #STR (def: "%s"). Git commit message
CONF.message                  #Can contain "%s", replaced with VERSION
--preid STR
CONF.preid                    #Prerelease tag (STR2 argument to SEMVER.inc(), see its doc)
--no-git-tag-version
CONF.git-tag-version          #If true (def), add a Git tag
CONF.tag-version-prefix       #STR prefixing Git tags (def: "v")
CONF.sign-git-commit          #If true (def: false), use git commit -S
CONF.sign-git-tag             #If true (def: false), use git tag -s
CONF.git                      #Shell command for git (def: "git")
CONF.allow-same-version       #If false (def), do not allow setting same VERSION
CONF.commit-hooks             #If false (def: true), do not run Git commit hooks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PKGNAME@TAG                   #PKGNAME can always end with @TAG
                              #Cannot be used if @RANGE, i.e. TAG cannot be a valid RANGE
                              #TAGs are npm tags, not Git tags.
npm install --tag=TAG         #Same as specifying PKGNAME@TAG
CONF.tag                      #Default TAG (def: "latest")

npm dist-tag ls [PKGNAME]     #
npm dist-tag
 add|rm PKGNAME TAG           #Manage npm TAGs

npm publish --tag=TAG         #npm publish always add a npm TAG. Def is "latest"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install                   #Install PACKAGE.[dev|optional|bundled]dependencies to INSTALLDIR, recursively.
npm install PKG               #Same but for a single dependency
                              #Persist to PACKAGE.*dependencies according to CONF.save*
                              #Do not install dependency's devDependencies
--before DATE                 #Only install dependencies versions older than DATE

npm ci                        #Same as npm install (without PKG) except:
                              #  - faster
                              #  - checks: package-lock.json exists and matches package.json

npm update [PKGNAME...]       #npm install ignores dependencies that:
                              #  - are already installed in node_modules (i.e. not on fresh installs)
                              #  - match the PACKAGE.*dependencies PKGTARGET
                              #  - even if a newer version exists
                              #npm update works like npm install but does not ignore those
                              #  - and only works for already installed dependencies
                              #  - including nested dependencies
                              #New version is persisted to PACKAGE.*dependencies according to CONF.save*

npm outdated [PKGNAME...]     #Print dependencies whose "latest" tag does not match installed version.
-l|--long
CONF.long                     #If true (def: false), also show if dependencies or dev|optional|bundledDependencies
--all
CONF.all                      #BOOL. If false (def), only top-level
--omit|include
CONF.production               #Like npm install

npm uninstall [PKGNAME...]    #Inverse of npm install. Can use same options (ones that make sense)

PACKAGE.dependencies.PKGNAME  #PKGTARGET
PACKAGE.devDependencies.PKGNAM#PKGTARGET
                              #Dev dependencies are not meant for production.
                              #They are only installed when top-level.
PACKAGE.optionalDependencies. #PKGTARGET
 PKGNAME                      #Optional dependencies do not make npm install (without PKG) fail if cannot be installed
                              #For code that might not work on some machines.
PACKAGE.bundledDependencies   #PKGNAME_ARR
                              #Bundled dependencies are packed by npm publish
PACKAGE.peerDependencies.     #PKGTARGET
 PKGNAME                      #When not consumed by another package, behave like `dependencies`.
                              #When consumed by another package, install the dependency by the consumer instead:
                              #  - if the consumer also installs it:
                              #     - use the consumer semver instead
                              #     - failure if the current semver and the consumer semver do not match
                              #        - unless CONF.force true
                              #        - only if consumer is root project if CONF.strict-peer-deps false (def)
                              #Should be as loose as possible to minimize constraint on consumer.
CONF.legacy-peer-deps         #BOOL (def: false). Enable pre-npm-v7 peerDependencies behavior (i.e. peerDependencies not installed by parent)
PACKAGE.peerDependenciesMeta.
 PKGNAME.optional             #BOOL. Do not automatically install this peer dependency (def: false). I.e. only used to enforce version.
PACKAGE.acceptDependencies.   #PKGTARGET
 PKGNAME                      #Requires PACKAGE.*dependencies.PKGNAME to be specified too, with a different PKGTARGET2.
                              #Means that PKGTARGET2 is used by default, but if consumer also installs it, child will use that version instead,
                              #providing it matches PKGTARGET
                              #Meant for dependencies with newer Node.js version ranges, but which still support an older
                              #Node.js version still supported by current package.
PACKAGE.overrides.PKGTARGET   #Like PACKAGE.dependencies but for indirect dependencies, to force their version
 [.PKGTARGET2]...             #If no PKGTARGET2, means PKGTARGET anywhere in the dependencies tree.
                              #  - can also be done by using '.' as PKGTARGET2
                              #The value can be '$PKGNAME' which is subtituted with PACKAGE.dependencies.PKGNAME's value

--include|omit=prod|dev|optional
CONF.include|omit STR_ARR     #[Do not] install PACKAGE.dependencies|devDependencies|optionalDependencies with npm install (without PKG)
CONF.production               #Same as CONF.omit "dev" but also:
                              #  - def true if NODE_ENV === 'production'
                              #  - set NODE_ENV to 'production' in scripts

-P|--save-prod
-D|--save-dev
-O|--save-optional
-B|--save-bundle
--save-peer
CONF.save-                    #With npm install PKG, decide whether to persist to PACKAGE.[dev|optional|bundled|peer]dependencies
 prod|dev|optional|bundle     #Default to -P (unless dependency already persisted)
-S|--[no-]save
CONF.save                     #If false (def: true), do not set PACKAGE.* with npm install PKG

-E|--save-exact               #When persisting to PACKAGE.*dependencies, whether to:
CONF.save-exact               #  - keep specified RANGE as is
CONF.save-prefix '~|^'        #  - normalize resolved version to ~RANGE or ^PREFIX (def)

CONF.rollback                 #If true (def), rollback npm install on error
--dry-run
CONF.dry-run                  #

npm audit|ci|dedupe|find-dupes
 |install|link|ls|prune|
 rebuild|uninstall|update
--install-links               #When a dependency is 'file:*' and is outside of the project root, install it normally instead of as symlink


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOCKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LPREFIX/package-lock.json     #Description of all the dependencies currently installed with their exact version.
                              #Automatically created and updated any time new dependencies or versions are explicitely added|removed:
                              #  - including by npm [un]install PKG and npm update
                              #If present, npm install (without PKG) uses it to resolve|lock versions of PACKAGE.*dependencies
                              #Goal: locking down dependencies' exact versions between:
                              #  - several environments (production, CI, dev)
                              #  - several developers
                              #  - across time (when going back to a previous commit)
                              #Should be committed to code repository
                              #Reasons why dependencies versions might differ otherwise:
                              #  - using ~RANGE, ^RANGE, etc. in PACKAGE.*dependencies (or a dependency doing so)
                              #  - using different version of npm, or different package manager
                              #  - already published version of a package changed (including because of malicious attack)
                              #     - cannot happen on npm registry
                              #Always excluded from npm publish, i.e. only locks down for other developers, not for consumers
                              #If yarn.lock present, use it on read, but not on write, and still create package-lock.json
npm install
--no-package-lock|shrinkwrap
CONF.package-lock|shrinkwrap  #If false (def: true), do not use nor update package-lock.json and npm-shrinkwrap.json
CONF.format-package-lock      #If false (def: true), make `package-lock.json` smaller (no prettification)
npm install|audit|ls
--package-lock-only
CONF.package-lock-only        #If true (def: false), only reads|writes package-lock.json
--lockfile-version            #Can be:
                              #  - 1: npm@v5|6 version
                              #  - 2 (def): npm@v7+ version, interoperable with npm@v5|6
                              #  - 3: npm@v7+ version, not interoperable with npm@v5|6
--omit-lockfile-registry-
 resolved                     #Re-validate tarball endpoints after each install

PACKAGELOCK.name|version      #Same as PACKAGE.name|version
PACKAGELOCK.lockfileVersion   #1
PACKAGELOCK.dependencies      #PACKAGELOCKDEP
PACKAGELOCKDEP.dependencies
 .PKGNAME                     #PACKAGELOCKDEP. Follows node_modules directory structure, including dedupe.
PACKAGELOCKDEP.version        #Exact VERSION or PKG
PACKAGELOCKDEP.
 dev|optional|bundled         #BOOL. Whether part of PACKAGE.[dev|optional|bundled]dependencies
PACKAGELOCKDEP.resolved       #URL of the tarball
PACKAGELOCKDEP.integrity      #SHA1|SHA256 of content. If PKGREPO, use COMMIT instead.
PACKAGELOCKDEP.requires       #Same as merge of PACKAGE.[optional|bundled]dependencies

npm-shrinkwrap.json           #Same as package-lock.json except not excluded by npm publish, i.e.:
                              #  - dependencies's npm-shrinkwrap.json are used
                              #  - when want to lock down versions for consumers as well (should be avoided unless needed)
                              #Has priority over package-lock.json
npm shrinkwrap                #Creates npm-shrinkwrap.json
                              #Simply rename package-lock.json if exists.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          WORKSPACES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.workspaces[.WORKSPACE]#'DIR_GLOB'_ARR to monorepo directories
                              #'GLOB' has same syntax as PACKAGE.files
                              #Automatically creates symlinks (like `npm link`):
                              #  - From root `node_modules` to any monorepo directory
                              #  - Between monorepo directories, when using each other
                              #Running `npm install` at the root installs in all monorepo directories
                              #  - Must run at the root, not inside monorepo directories
                              #  - package-lock.json in monorepo directories are not used anymore, only in root

WORKSPACE_REF                 #WORKSPACE name or path
                              #Can also be root, to select all WORKSPACEs
npm COMMAND
--workspace|-w WORKSPACE_REF  #Run in the workspace's directory.
                              #Can be specified multiple times.
--[no-]workspaces|-ws         #Run in each workspace
--include-workspace-root|-iwr #Also run in workspaces root directory
--[no-]workspaces-update      #Def: true
                              #Automatically update list of workspaces


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BINARIES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BINDIR                        #GBINDIR|LBINDIR
GBINDIR                       #GPREFIX/[bin/] (no bin/ on Windows)
LBINDIR                       #LPREFIX/[.../]node_modules/.bin/
npm bin                       #Prints BINDIR

PACKAGE.bin[.SYMLINK]         #LPATH to a binary file
                              #During npm install, create symlink from LPATH to BINDIR/SYMLINK (def SYMLINK: PACKAGE.name)
                              #BINDIR are added to $PATH during npm scripts
PACKAGE.directories.bin       #Same but instead LPATH to directory instead of to each binary file
                              #Cannot be specified if PACKAGE.bin is specified
npm install --no-bin-links
CONF.bin-links                #If false (def: true), prevent binaries symlinks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              NPX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npx [PKG] [...]               #Fire PKG [...] from either:
                              #  - $PATH
                              #  - node_modules/[.../].bin/
                              #  - global npx directory ~/.npm/_npx/
                              #If missing, npm install PKG to global npx directory first
                              #If no PKG nor --call, runs interactive shell
npx --call|-c 'BASH' [...]    #Runs 'BASH ...' like a npm script.
--yes|no                      #If yes (def), prompts when installing

npm exec ... -- [...]         #Same as npx ... ..., except using -- to make parsing clearer.
                              #Anything before -- must be --FLAGs for npx

--package|-p PKG2             #Add additional PKG to install.
                              #The main PKG must be a COMMAND then (e.g. no @VERSION)
                              #Can be called several times
                              #Can be `node`, then using `node` in COMMAND, i.e. similar to nvm exec

--quiet|-q                    #Silent npx (not PKG)

--userconfig                  #Like CONF.userconfig
--cache DIR                   #Def: same as npm cache


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LINKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm link                      #npm install (without PKG) + symlink global dependency -> current directory (for current PKGNAME)
                              #I.e. current directory becomes also available as a global dependency
npm link PKGNAME              #Symlink local dependency -> global dependency
                              #Combined with npm link (without PKGNAME), allows symlinking local packages between each other
                              #Symlink is removed on next npm install|ci|uninstall

npm link DIR                  #npm link in DIR + npm link PKGNAME in current DIR
CONF.link                     #If true (def: false), use npm install -g PKGNAME + npm link PKGNAME on any npm install PKGNAME if a global dependency exists
                              #unless it has a different version


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NATIVE MODULES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm rebuild [PKGNAME...]      #It compiles Node C++ native modules with node-gyp

npm install
--nodedir=DIR                 #Node source code DIR, in order to compile Node native modules.

CONF.rebuild-bundle           #If true (def), run npm rebuild when installing bundledDependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DIFF              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm diff [FILE...]            #Similar to git diff, but only with npm published files
[--diff=FROM [--diff=TO]]     #FROM|TO can be PKG|VERSION
                              #Def FROM: now
                              #Def TO: `latest` tag (or CONF.tag)
                              #If different PKG, diff that package instead of current one

CONF.diff-name-only           #BOOL (def: false). Only print names.
CONF.diff-no-prefix           #BOOL. If false (def), show `a/` and `b/` before file paths.
CONF.diff-src|dst-prefix      #STR (def: "a/" and "b/") used with CONF.diff-no-prefix
CONF.diff-unified             #NUM (def: 3) of context lines.

CONF.diff-ignore-all-space    #BOOL (def: false)
CONF.diff-text                #BOOL (def: false). Show binary files

CONF.global                   #BOOL (def: false). Allow comparing global dependencies.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       DEPENDENCIES INFO       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm ls [PKGNAME...]           #Print deduped dependencies tree
                              #With PKGNAME, only show branches including it, and stop at it
                              #Also prints prunable, missing and invalid dependencies.
-l|--long
CONF.long                     #Also print dependency's PACKAGE.description|repository|homepage
--depth NUM
CONF.depth                    #Don't go more than NUM depth level (def: 0)
--all                         #Max depth level
--prod|dev                    #Only show PACKAGE.dependencies|devDependencies
--link                        #Only show linked dependencies

npm explain PKGNAME           #Similar to npm ls, but inverted (print parent last)

npm edit PKGNAME              #Open PKGNAME's package.json
CONF.editor                   #Used by npm edit and npm config edit
                              #Def: ENVVAR EDITOR, or "vi"

npm view [PKGNAME] [VARR...]  #Prints package.json (fetched from npm) with some extra members:
                              #  - dist-tags.TAG VERSION: npm tags
                              #  - versions STR_ARR: all published versions
                              #  - time.VERSION|created|modified: published versions timestamps
                              #  - maintainers STR_ARR: owners
                              #  - readmeFilename STR
                              #  - gitHead COMMIT
                              #  - dist (published files):
                              #     - fileCount NUM
                              #     - unpackedSize NUM
                              #     - tarball URL
                              #     - integrity|shasum STR: hashes

npm explore PKGNAME
 -- SHELL_COMMAND             #Temporarily change PDW to PKGNAME's DIR then fires SHELL_COMMAND
CONF.shell                    #Def: SHELL ENVVAR or "bash"

npm query CSS_SELECTORS       #Retrieve package.json with some extra members for all dependencies matching CSS_SELECTORS
                              #See online doc for syntax of CSS_SELECTORS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    DEPENDENCIES STRUCTURE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm dedupe [PKGNAME...]       #Deduce dependencies' dependencies, i.e.:
                              #  - installed as high in the tree as possible
                              #  - if same dependency installed twice at same depth:
                              #     - use a version that matches both ranges
                              #     - if none, install one of them at a lower depth instead to resolve conflict
                              #  - goal: avoid installing same dependency several times, to decrease node_modules size
npm install --prefer-dedupe   #BOOL (def: false). Run `npm dedupe` on `npm install`.
CONF.prefer-dedupe            #Event when false, npm install already does some light deduping.
npm install --global-style
CONF.global-style             #BOOL (def: true if -g). Do not dedupe top-level dependencies (but dedupe second depth level)

npm prune [PKGNAME...]        #Remove dependencies present in node_modules but not specified in package.json
                              #Automatically done by npm install, providing package-lock.json exists
--[no-]production             #Also remove devDependencies.
CONF.production               #Def true if NODE_ENV === 'production'

npm prune|dedupe
--dry-run
CONF.dry-run                  #

npm find-dupes                #Same as npm dedupe --dry-run


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PUBLISH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm publish [PKGDIR]          #Publish package to npm
                              #Def PKGDIR: $PWD

npm pack [PKGNAME...]         #Create a *.tgz tarball of package.
                              #Done by npm publish
--json                        #
--pack-destination            #DIR to create the file (def: '.')

npm deprecate PKGNAME STR     #Makes npm install print a STR warning
                              #If STR is "", undeprecate it.

npm unpublish PKGNAME         #Remove a published version.
                              #Only if published in last 3 days
                              #Unpublished version cannot be re-published.
                              #Prefer npm deprecate

PACKAGE.name                  #STR
                              #Max 214 chars, lowercase, URL-safe, cannot start with . or _
                              #Don't put "node" or "js".

PACKAGE.main                  #LPATH of the file which will be loaded by require(PKGNAME)
PACKAGE.browser               #Same but when loaded from browser instead of from Node.
                              #E.g. used by Webpack

PACKAGE.files                 #STR_ARR of files/dirs to publish.
                              #Same format as .gitignore except:
                              #  - whitelists instead
                              #  - "!" means blacklists
                              #  - priority to last STR in array (blacklist or not)
                              #  - LPATH (not just filename)
                              #By default, include everything.
                              #Always included:
                              #  - package.json, PACKAGE.main
                              #  - (case-insensitive, any extension) README, LICENSE
                              #Always excluded:
                              #  - symlinks
                              #  - .*.swp, ._*, *.orig
                              #  - node_modules, .npmrc, npm-debug.log, config.gypi, package-lock.json
                              #  - .git, .svn, CVS, .hg
                              #  - .lock-wscript, .wafpickle-*
                              #  - .DS_Store
                              #Directories targetting:
                              #  - targetting DIR (or sub-directory):
                              #     - recursive
                              #     - recursion is not blacklisted by "!" (unlike targetting FILEs)
                              #  - DIR/* and DIR/** targets both sub-files and sub-directories
                              #     - with DIR/**, target both nested files and their parent directories, with parent directories having priority
                              #  - i.e. need to do DIR/**/*.EXT to only target files and make sure they can be blacklisted
.npmignore                    #Same but:
                              #  - blacklists instead
                              #     - PACKAGE.files has priority, unless .npmignore is inside subdirectory
                              #  - can be at LPREFIX or inside subdirectories
                              #  - same format as .gitignore, including:
                              #     - targetting filename is no slash
                              #     - directories must end with a slash
                              #  - default to .gitignore if not specified
npm [un]publish|pack
--dry-run
CONF.dry-run                  #

PACKAGE.sideEffects          ##BOOL (def: true) or 'GLOB'_ARR
                             ##Whether top-level statements have side effects in global scope, or in other files that does not import them
                             ##Used by Webpack tree shaking


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMPATIBILITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.engines.node|npm|yarn #Required version RANGE for Node|npm|yarn
                              #Can be STR to always error with warning (e.g. forbid yarn)
CONF.engine-strict            #BOOL (def: false): whether to abort npm install or to only print warning
CONF.node-version             #Node version used to check against PACKAGE.engines.node
                              #Def: process.version

PACKAGE.os                    #Required value of process.platform among STR_ARR
                              #Can blacklist with '!'
PACKAGE.arch                  #Same for process.arch

CONF.update-notifier          #BOOL (def: true). Show warning when using old npm

npm version                   #Print process.versions + npm version + current package version


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       PACKAGE METADATA        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.homepage              #URL of the HTML project page.
                              #Def: "www.npmjs.org/package/PKGNAME"
PACKAGE.repository            #Source code location
                              #PKGREPO or OBJ:
                              #  - type 'git|svn'
                              #  - url URL
                              #  - directory 'PATH' (e.g. 'packages/NAME'): if inside monorepo
PACKAGE.bugs                  #Where to report bugs. { "url" STR, "email" STR2 }
                              #Def: { url: "www.npmjs.org/package/PKGNAME" }
npm docs|repo|bugs [PKGNAM...]#Open PACKAGE.homepage|repository.url|bugs with browser
CONF.browser                  #Used by npm docs|repo|bugs
                              #Def: "open"

PACKAGE.license               #STR. SPDX name or "UNLICENSED" if closed-source.

PACKAGE.author                #{ "name" STR[, "email" STR2][, "url" STR3] } or "Name <email> (url)"
PACKAGE.contributors          #OBJ_ARR (same OBJ as author)
LPREFIX/AUTHORS               #Alternative way to set PACKAGE.contributors:
                              #  - one "Name <email> (url)" per line instead.
                              #  - #COMMENT

PACKAGE.man                   #LPATH[_ARR] to man files.
                              #Install them to GPREFIX/share/man with npm install -g
                              #Filenames should be NAME.MAN_SECTION[.gz].
                              #If NAME doesn't start with PKGNAME, it is prefixed with it.
                              #Does not work with Windows.
PACKAGE.directories.man       #Same but LPATH to directory instead of each file.

PACKAGE.directories.          #LPATH.
 doc|example|lib|test         #General information about where the library main documentation|example|source|test folder is.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROMOTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm [un]star [PKGNAME...]     #Star a package
npm stars [SHELL_USER]        #Show starred packages

BADGES ==>                    #https://img.shields.io:
                              #  - /bundlephobia/min[zip]/PKGNAME.vsg: bundle size [with gzip]
                              #  - /npm/dw|dm|dy|dt/PKGNAME.svg: downloads per week|month|year|total
                              #  - /npm/l/PKGNAME.svg: license
                              #  - /npm/v/[@SCOPE/]PKGNAME[/TAG|BRANCH].svg: version
                              #  - /npm/types/PKGNAME.svg: Flow|TypeScript
                              #  - /node/v/[@SCOPE/]PKGNAME[/TAG|BRANCH]: Node.js version


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            FUNDING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.funding               #'URL' or OBJ:
                              #  - url 'URL' (required)
                              #  - type 'github', 'patreon', 'foundation', 'corporation', 'individual' or anything else (def: guessed from URL)
npm install
--[no-]fund                   #Prints number of dependencies with PACKAGE.funding (def: true)

npm fund                      #Prints PACKAGE.funding information of dependencies
npm fund PKGNAME...           #Open PACKAGE.funding.url
--which NUM                   #Pick between several


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SEARCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.description           #STR. Used in npm search
PACKAGE.keywords              #STR_ARR. Used in npm search

npm search [STR|REGEXP...]    #Search packages and show: name, description, author, date, version, keywords
                              #Can be prefixed with - to exclude
                              #Can use:
                              #  - keywords:KEYWORD
                              #  - author:USER: PACKAGE.author
                              #  - maintainer:USER
                              #  - scope:SCOPE
                              #  - not|is:deprecated
                              #  - not|is:unstable: <1.0.0
                              #  - not|is:insecure: vulnerabilities according to nsp
                              #  - boost-exact:true: boost exact matches
--searchopts STR|REGEXP
CONF.searchopts               #Same as positional argument, but does not highlight
--searchexclude STR|REGEXP
CONF.searchexclude            #Exclude words
CONF.searchlimit              #Pagination size NUM (def: 20)
-l|--long
CONF.long                     #Don't truncate description to one line
--no-description
CONF.description              #If false (def: true), do not show description
--searchstaleness NUM         #Cache staleness NUM (in secs, def: 900)
CONF.searchsort               #Sorting of npm search among "name" (def), "date", "description" or "keywords".

NPM SEARCH ALGORITHM ==>      #Total score = relevance * score
                              #Relevance:
                              #  - tokenized search (ElasticSearch edge_ngram) on PACKAGE.name|keywords|description
                              #    each having a weight of 4|2|1
                              #  - search is more English-friendly
                              #Score:
                              #  - weighted average of:
                              #     - popularity (41%)
                              #        - popularity.communityInterest (28%):
                              #           - GitHub stars + GitHub forks + GitHub subscribers + GitHub contributors
                              #        - popularity.downloadsCount (28%):
                              #           - average monthly npm downloads over last 3 months
                              #        - popularity.downloadsAcceleration (14%, 0-1):
                              #           - acceleration of npm downloads over last year
                              #        - popularity.dependentsCount (28%)
                              #           - number of package listing it as dependency
                              #     - quality (28%):
                              #        - quality.carefulness (35%, 0-1):
                              #           - 33% if has a license
                              #           - 38% for README length (max if 400 bytes)
                              #           - 13% if detect a linter
                              #              - do it by checking package.json and configuration files
                              #              - among coffeelint, csslint, editorconfig, eslint, htmlhint, jscs, htmllint,
                              #                prettier, standard, stylelint, tslint, xo
                              #           - 8% if has .npmignore or PACKAGE.files
                              #           - 8% if has CHANGELOG.md
                              #           - whole thing is 0 if marked as deprecated
                              #           - whole thing is halved if version < 1.0.0
                              #        - quality.tests (35%, 0-1)
                              #           - 60%: cumulated size of all test files (directory or file with 'test[s]|spec[s]')
                              #              - tests are /[__]test[s]|spec[s][__]/** or **/[*.]test[s]|spec[s]*
                              #              - max is 400 bytes
                              #              - half if no npm test
                              #           - 15% if using codecov|coveralls|codeclimate|scrutinizer
                              #              - detected from README badges or fetching them directly
                              #           - 25% of percentage of PR statuses (e.g. using CI on PR) that have been successful
                              #              - should be careful to wait for pending statuses before publishing to npm
                              #        - quality.health (20%)
                              #           - 50%: ratio of outdated dependencies (using David) (0% is max, 25% is min)
                              #           - 50%: ratio of dependencies with vulnerabilities (using nsp) (0% is max, 25% is min)
                              #           - divided by (n + 1) where n is number of dependencies using * or >= in version
                              #              - not done if npm-shrinkwrap.json exists
                              #        - quality.branding (10%, 0-1)
                              #           - 40%: if PACKAGE.repository.url and PACKAGE.homepage have different hostname.
                              #           - 60%: for number of README badges (max 4 badges)
                              #              - only for david, gitter, npm, coveralls|codecov|codacy, travis|circleci|appveyor
                              #     - maintenance (31%):
                              #        - maintenance.releasesFrequency (33%, 0-1)
                              #           - frequent releases
                              #           - max is 2 releases per 3 months
                              #        - maintenance.commitsFrequency (17%, 0-1)
                              #           - frequent commits
                              #           - 0.9 if 5 commits per month, max if 10 commits per month
                              #        - maintenance.openIssues (17%, 0-1)
                              #           - ratio of closed issues per total issues over last period
                              #           - max if <20%
                              #           - 0.7 if no issues
                              #        - maintenance.issuesDistribution (33%)
                              #           - issues are closed fast
                              #           - 0.7 if closed within 1 month, max if closed within 5 days
                              #           - 0.7 if no issues
                              #        - if package is considered "finished", replace any of the above by 0.9 (unless they are above 0.9). Must:
                              #           - have version > 1.0.0
                              #           - not be deprecated
                              #           - has less than 15 open issues
                              #           - has npm test
                              #  - within each of the above groups:
                              #     - each sub-value is normalized by based on its position within [min, max] range of values of all packages
                              #     - this is shown as score.detail.*
                              #  - uses project "npms-analyzer"
                              #     - can see data at https://api.npms.io/v2/package/PKGNAME
                              #     - score.final uses weights 30|35|35% for popularity|quality|maintenance, but popularity is
                              #       bumped up by npm search leading to above numbers
                              #  - many of the things above rely on using GitHub
                              #  - those are shown on the right side of search results

UI ==>                        #  - npmjs.com: main one
                              #  - npms.io: very similar, same results, maintained by npm as well, not as good
                              #  - npm-stat.com: show download over time


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SCRIPTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.scripts.              #"SHELL_COMMAND"
 [pre|post]CLI_COMMAND        #Fired before|after npm CLI_COMMAND [PKGNAME]
                              #  - non-0 exit code will make npm CLI_COMMAND fail, unless --force|f
                              #CLI_COMMAND can be
                              #  - start|stop|restart|test
                              #  - install|uninstall:
                              #     - when either:
                              #        - doing npm [un]install [PKGNAME]
                              #        - another project [un]installs current package
                              #     - prefer prepublishOnly|prepare instead
                              #  - publish:
                              #     - prepublish: deprecated
                              #     - prepublishOnly: before npm publish
                              #     - prepare: before npm publish, npm install (without PACKAGE) or npm install PKGREPO
                              #  - pack
                              #  - dependencies: any change to dependencies in node_modules
                              #  - shrinkwrap: when package-lock.json or npm-shrinkwrap.json is modified
                              #  - version
                              #  - custom one
                              #Default values:
                              #  - "start": "node server.js" if LPREFIX/server.js exists
                              #  - "preinstall": "node-gyp rebuild" if LPREFIX/binding.gyp exists

npm start|stop|test [-- ARGS] #Fire related CLI_COMMAND
npm restart [-- ARGS]         #Fire stop, restart then start CLI_COMMANDs
npm run[-script] CLI_COMMAND
 [-- ARGS]                    #Fire CLI_COMMAND (usually custom one)
--silent                      #
--if-present
CONF.if-present               #BOOL (def: false). Does not fail if script does not exist

LISTALLDIR/.hooks/            #Like PACKAGE.scripts.[pre|post]CLI_COMMAND but:
 [pre|post]CLI_COMMAND        #  - as a binary file
                              #  - applies to both current package and each of its dependencies

ENVVARS ==>                   #The following ENVVARs are set during npm scripts
ENVVAR npm_command            #Set to current npm COMMAND, e.g. "run-script"
ENVVAR npm_config_VARR        #CONF.VARR
ENVVAR npm_package_json       #"PATH/to/package.json"
ENVVAR npm_package_name       #PACKAGE.name
ENVVAR npm_package_version    #PACKAGE.version
ENVVAR
 npm_package_engines_node     #PACKAGE.engines.node
ENVVAR npm_lifecycle_event    #[pre]CLI_COMMAND
ENVVAR npm_lifecycle_script   #SHELL_COMMAND
ENVVAR INIT_CWD               #$PWD when running script
ENVVAR PWD                    #Package's LPREFIX
                              #For [pre|post]install triggered by another project installing current package,
                              #will be current package's LPREFIX.
ENVVAR NODE                   #Node binary path

CONF.script-shell             #Shell used in SHELL_COMMAND
                              #Def: null, i.e. $SHELL ENVVAR, or sh on Unix, cmd.exe on Windows
npm install|ci|audit|prune|
 rebuild|update|run
--foreground-scripts
CONF.foreground-scripts       #BOOL (def: false). Whether to run `[pre|post]install` in foreground or background
                              #Mostly meant for debugging
CONF.node-options             #STR. NODE_OPTIONS ENVVAR passed to scripts

CONF.scripts-prepend-node-path#Whether to add node binary directory to $PATH:
                              #  - BOOL
                              #  - "auto": only if different from one currently used by npm
                              #  - "warn-only" (def): like false, but warns if different from one currently used by npm

npm install|ci|audit|prune|
 rebuild|update
--ignore-scripts
CONF.ignore-scripts           #Is true (def: false), does not run scripts

npm install-[ci-]test         #Same as npm install|ci + npm test


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WEBHOOKS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm hook add                  #Add a webhook.
 PKGNAME|~USER|@SCOPE         #Triggered on new package activity
 URI SECRET                   #Do a POST URI with JSON:
                              #  - version '1.0.0': on the payload format
                              #  - type 'package'
                              #  - name 'PKGNAME'
                              #  - event STR among:
                              #     - 'package:[un]publish': npm [un]publish
                              #     - 'package:dist-tag[-rm]': npm dist-tag add|rm
                              #     - 'package:[un]deprecated': npm deprecate
                              #     - 'package:owner[-rm]': npm owner add|rm
                              #     - 'package:[un]star': npm [un]star
                              #     - 'package:change': any other
                              #  - change OBJ:
                              #     ('package:[un]publish')
                              #     - version VERSION
                              #     ('package:dist-tag[-rm]')
                              #     - dist-tag TAG
                              #     ('package:[un]deprecated')
                              #     - deprecated VERSION
                              #     ('package:owner[-rm]')
                              #     - maintainer USER
                              #     ('package:[un]star')
                              #     - user USER
                              #  - payload OBJ: similar payload as npm view --json
                              #  - time TIMESTAMP_NUM
                              #  - hookOwner 'USER': who did npm hook add
                              #Also use X-Npm-Signature: sha256=HMAC_SHA256(BODY, SECRET) [C] for shared secret authentication
                              #Max 100 webhooks
npm hook ls [PKGNAME]         #Print hooks, including HOOK_ID
npm hook update
 HOOK_ID URI [SECRET]         #
npm hook rm HOOK_ID           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SECURITY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm audit                     #Prints vulnerabilities found in dependencies (package-lock.json)
                              #Checks PACKAGE.[dev|optional|bundled]dependencies but not PACKAGE.peerDependencies
                              #Print each vulnerability path (i.e. same vulnerability might be reported twice)
                              #Use vulnerabilities from nsp / Node security advisories.
--omit|include
CONF.production               #Like npm install
CONF.audit
npm install --no-audit        #BOOL (def: true). Run npm audit with npm install
--audit-level
CONF.audit-level              #Among 'none|info', 'low' (def) or 'moderate|high|critical'

npm audit fix                 #Update dependencies versions to fix vulnerabilities
--force
CONF.force                    #If true (def: false), also updates major versions
--dry-run
CONF.dry-run                  #

npm audit signatures          #Check integrity of node_modules using checksums downloaded from npm API


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm audit|config ls|fund|ls|
 outdated|profile|prune|
 search|token list|view
-j|--json
CONF.json                     #BOOL (def: false). Print output as JSON
-p|--parseable
CONF.parseable                #BOOL (def: false). Print output as CSV

CONF.color                    #Can be true (def, i.e. only if tty), false or "always"
                              #Can use ENVVAR NO_COLOR
CONF.progress                 #If true (def unless ENVVAR CI is set), show progress bars
CONF.unicode                  #If true (def), use Unicode chars for trees drawing

CONF.loglevel                 #STR (def: "notice").
                              #Verbosity level of npm among "silent|error|warn|notice|http|timing|info|verbose|silly"
./npm-debug.log               #Dump logs on npm errors, with verbosity "verbose"
CONF.logs-max                 #Max number of npm-debug.log files to store. Can be 0.
CONF.logs-dir                 #Def: '_logs' in cache dir

CONF.timing                   #BOOL (def: false). Prints how much time each command takes

CONF.heading                  #STR (def: "npm") prefixing log lines


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.cache                    #PATH (def: ~/.npm). Cache in inside PATH/_cacache/
                              #Used by npm install to cache packages
                              #Only use cached package if it has been cached more than 10 seconds ago.
CONF.cache-lock-stale         #How long to lock cached files when being written to (in ms, def: 1 min.)
CONF.cache-lock-retries       #NUM (def: 10)
CONF.cache-lock-wait          #NUM (in ms, def: 10s)

npm cache add PKG...
npm cache rm PKG...
npm cache ls [PKG...]
npm cache clean [PATH]        #Manipulate cache
npm cache verify              #Cleanup and verify cache

npm install                   #
--offline
CONF.offline                  #BOOL (def: false). Only use cache.
--prefer-offline
CONF.prefer-offline           #BOOL (def: false). Use cached packages even if cached less than 10 seconds ago.
--prefer-online
CONF.prefer-online            #BOOL (def: false). Revalidate cache with npm even if already cached.
-f|--force
CONF.force                    #BOOL (def: false). Do not use cache

CONF.searchstaleness          #NUM (in ms, def: 900). How long to cache npm search


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NETWORK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm ping                      #Pings the registry

CONF.fetch-retries            #NUM (def: 2). When accessing the registry
CONF.fetch-retry-factor       #NUM (def: 10). multiply the timeout each time, within min|maxtimeout
CONF.fetch-retry-
 min|maxtimeout               #NUM (in ms, def: 10s and 1 minute)
CONF.fetch-timeout            #NUM (in ms, def: 5 minutes)

CONF.local-address            #Local address when requesting the registry
CONF.[https-]proxy            #Proxy URL to the registry
                              #Can also use ENVVAR HTTP[S]_PROXY
CONF.proxy                    #'.TLD'[_ARR] not to use proxy for.
CONF.maxsockets               #NUM (def: 50). Max number of connections to the registry

npm doctor                    #Check npm installation:
                              #  - can connect to npm registry
                              #  - latest npm|node version
                              #  - can use git
                              #  - files permissions
                              #  - cache corruptions

CONF.user-agent               #STR (def: "node/{process.version} {process.platform} {process.arch} workspaces/{workspace} {ci}")

CONF.send-metrics             #BOOL (def: false)
                              #Send anonymous metrics to npm
CONF.metrics-registry         #Related URL (def: npm registry)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      DIFFERENT REGISTRY       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.[@SCOPE:]registry        #URL of the package registry
                              #Def: https://registry.npmjs.org
                              #If SCOPE, only for packages with this SCOPE
npm adduser|logout|docs|bugs|
 search
--registry URL
CONF.registry                 #Same
npm adduser|logout
--scope SCOPE
CONF.scope                    #Same
--replace-registry-host
CONF.replace-registry-host    #'npmjs'|STR|'always'|'never'. Whether to replace CONF.registry in lockfile


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     CONTINUOUS DEPLOYMENT     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRAVIS ==>                    #
NPM_DEPLOY                    #Automatically run npm publish with Travis (see travis doc)
NPM_DEPLOY.provider           #'npm'
NPM_DEPLOY.api_key            #'API_KEY'
NPM_DEPLOY.tag                #TAG, for npm publish --tag=TAG
