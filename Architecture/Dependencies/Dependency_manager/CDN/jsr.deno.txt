
       
   JSR  
       



VERSION ==>                       #0.13.0

DIFFERENCES WITH NPM REGISTRY ==> #Pros:
                                  #  - multiple runtimes, not Node.js-only
                                  #  - can publish *.ts
                                  #  - more restrictive (ESM only, filename conventions)
                                  #  - automatic docs
                                  #  - simpler
                                  #Cons:
                                  #  - harder to use with Node.js
                                  #  - less high profile
                                  #  - fewer features

DIFFERENCES WITH DENO.LAND ==>    #Pros:
                                  #  - more recent and better maintained
                                  #  - handles semver and dedupes dependencies
                                  #  - hosts packages, as opposed to just redirecting
                                  #  - does not type check deep dependencies, i.e. faster at importing TypeScript
                                  #Cons:
                                  #  - restrict TypeScript types on exports

x-to-jsr                          #CLI to migrate from deno.land to JSR
                                  #Not documented yet

deno ...                          #Built-in commands to use JSR from Deno
ENVVAR DENO_BIN_PATH              #Def: use ENVVAR PATH

jsr                               #Npm package to use JSR from Node
--npm|yarn|pnpm|bun               #Which package manager to use under the hood
                                  #Def: guessed on whether package.lock, yarn.lock or pnpm-lock.yaml exists
--verbose                         #

@SCOPE                            #Like npm organization
                                  #Created at https://jsr.io/new
                                  #Can invite:
                                  #  - member: create PKG, publish version
                                  #  - admin: delete PKG|SCOPE, deprecate version, invite|revoke|permissions
                                  #Max 3 per user (soft limit)
                                  #Max 100 PKGs (soft limit)
                                  #Max 1000 publish/week (soft limit)
                                  #Max 32 chars, only a-z0-9-
PKGNAME                           #Max 20 chars, only a-z0-9-
@SCOPE/PKGNAME                    #PKG
@std/PKGNAME                      #Deno std package

import ...                        #In Deno, maps to https://jsr.io/PKG/X.Y.Z/PATH
 'jsr:PKG[@RANGE][/PATH]'         #Def RANGE: latest
                                  #'/PATH' must be allowed in JSR_FILE.exports

ENVVAR JSR_URL                    #Custom URL, instead of https://jsr.io
https://jsr.io/PKG/X.Y.Z/PATH     #File contents

https://jsr.io/PKG/meta.json      #PKG_META, i.e. description of PKG
PKG_META.scope                    #'@USER'
PKG_META.name                     #'PKGNAME'
PKG_META.latest                   #'X.Y.Z'
PKG_META.versions['X.Y.Z']        #OBJ: yanked BOOL

https://jsr.io/PKG/X.Y.Z_meta.json#VERSION_META, i.e. description of a PKG version
VERSION_META.exports              #JSR_FILE.exports
VERSION_META.moduleGraphql.PATH   #MAIN_FILE_META for main files
VERSION_META.manifest.PATH        #FILE_META for each file
FILE_META.size                    #NUM (in bytes)
FILE_META.checksum                #'sha256-CHECKSUM'

jsr info|show|view PKG[@RANGE]    #Print PKG information:
                                  #  - version[s]
                                  #  - package description
                                  #  - npm URI
                                  #  - publish time

IMPORT_MAP                        #Either DENO_CONFIG or import_map.json (JSONC)

deno add PKG[@RANGE]              #Adds IMPORT_MAP.imports.PKG 'jsr:PKG@RANGE'
                                  #RANGE:
                                  #  - def: latest
                                  #  - always adds ^ unless ~ specified
                                  #  - X.Y.Z even if only X or X.Y specified

jsr add|install|i PKG[@RANGE]...  #Adds as package.json dependency
--save-prod|-P
--save-dev|-D
--save-optional|-O                #Like npm

jsr remove|uninstall|r PKG        #Removes IMPORT_MAP.imports.PKG

https://npm.jsr.io                #npm API-compatible proxy of JSR registry
https://npm.jsr.io/PKG            #npm API-compatible PKG metadata, including each versions and its tarball URL
                                  #PKG: slashes converted to __
.npmrc                            #Automatically updated by `jsr add` to include '@jsr:registry=https://npm.jsr.io'
                                  #Should be git committed
npm:PKG@X.Y.Z                     #In package.json dependency
                                  #PKG: slashes converted to __

jsr [run] SCRIPT                  #Run package.json script

JSR_FILE                          #Either DENO_CONFIG or jsr.json[c] (always JSONC)
JSR_FILE.name                     #'PKG'
JSR_FILE.version                  #'X.Y.Z'
JSR_FILE.exports                  #'PATH2'. Same as {'.': 'PATH2'}
JSR_FILE.exports.PATH             #'PATH2' to each main file
                                  #'PATH' must start with '.' and does not need to end with /
                                  #'.' is default one, when importing 'PKG'
                                  #'PATH' is for importing 'PKG/PATH'
JSR_FILE.publish.include          #'GLOB'_ARR
                                  #Always included: DENO_CONFIG.include
JSR_FILE.publish.exclude          #'GLOB'_ARR
                                  #Always excluded: files in .gitignore, and DENO_CONFIG.exclude
                                  #Can use !GLOB to negate exclusion from .gitignore

jsr|deno publish                 !#Publish package in current directory (including monorepo)
--token TOKEN                     #Auth token (created in UI)
                                  #Def: done through browser instead (preferred)
                                  #Can set expiration
                                  #Can restrict to specific @USER or PKG
--dry-run                         #
--allow-dirty                     #Unless set, forbid uncommitted changes with git
--no-provenance                   #Unless set, use GitHub actions provenance attestion, which autenticates the package

--allow-slow-types                #Unless set, forbid specific TypeScript types for exported fields:
                                  #  - implicit TYPE: in FUNC return|params, constants and CLASS fields
                                  #  - TYPE not super simple to infer: elsewhere
                                  #     - e.g. const VAR = {PROP: INSTANCE} is already too complex
                                  #     - no type narrowing|widening
                                  #     - VAL being assigned cannot reference other VAR2, i.e. only literal values
                                  #  - CommonJS
                                  #  - `declare module|global`
                                  #  - `export as namespace`
                                  #If set, those types are allowed but:
                                  #  - either replaced by `any`, or no *.d.ts exported by npm.jsr.io
                                  #  - omitted in docs
                                  #TypeScript --isolatedDeclarations is a superset of the above rules
no-slow-types                     #Deno lint rule for it

https://api.jsr.io                #Underlying API for `jsr publish` and SCOPE|user management
                                  #Not documented yet

GITHUB ACTIONS ==>                #Can either:
                                  #  - use TOKEN
                                  #  - use OIDC (preferred)
                                  #     - by just doing `npx jsr publish`
                                  #     - must use permissions: contents 'read', id-token 'write'
                                  #     - must link GitHub repo
                                  #     - only if GitHub user triggering action is a member of JSR @SCOPE
                                  #        - can remove this restriction in UI
                                  #Can require publishing from CI (done in UI of @SCOPE)

COMMONJS ==>                      #Not supported. Only ESM
TYPESCRIPT ==>                    #Prefer *.ts over *.js + *.d.ts
                                  #Prefer importing *.ts over *.js
IMPORTS ==>                       #Can import npm:..., node:... or data:... like in Deno
MAX SIZE ==>                      #4MB per published file, 40MB per PKG (soft limits)
DELETION ==>                      #Cannot delete versions
                                  #Can only delete packages if no version
DEPRECATE ==>                     #Can [un]deprecate a version (done in UI, called "yank")
                                  #  - PKG@X.Y.Z still point to it
                                  #  - but PKG@X[.Y] ignores it
                                  #  - also, version is hidden in UI, or marked with a warning
PRIVATE ==>                       #Private packages not currently possible

https://jsr.io                    #UI to search for PKGs
                                  #Can use filters:
                                  #  - runtime:node|browsers|deno|workerd|bun
                                  #  - scope:SCOPE

https://jsr.io/PKG                #UI showing:
                                  #  - package description
                                  #  - runtime compatibility
                                  #  - either README.md or module doc
                                  #  - files
                                  #  - versions
                                  #  - automatic docs
                                  #  - dependencies and dependents
                                  #  - JSR score
PACKAGE DESCRIPTION ==>           #Added through UI
                                  #Max 250 chars
GITHUB REPO ==>                   #Can be linked (done in UI)
RUNTIME COMPATIBILITY ==>         #Added through UI
                                  #Browsers, Deno, Node.js, Bun, Cloudflare workers
                                  #Yes|no|unknown
AUTOMATIC DOCS ==>                #Based on TypeScript types
                                  #Also /** */ comments on exported fields
                                  #Also /** */ comments on main files, using @module ("module doc")
                                  #Similar to `deno doc --html` output

JSR SCORE ==>                     #For ordering. Following fields:
README ==>                        #Has README.md or module doc
                                  #2 points
MODULE DOC ==>                    #Has module doc
                                  #1 point
EXAMPLES ==>                      #Code block in README.md or module doc
                                  #1 point
EXPORTED FILEDS COMMENT ==>       #/** */ comment on >=80% of exported fields
                                  #5 points
NO SLOW TYPES ==>                 #TypeScript types are not slow
                                  #5 points
UI DESCRIPTION ==>                #Must be manually added
                                  #1 point
RUNTIME COMPATIBLITY ==>          #At least 2
                                  #2 points
PROVENANCE ==>                    #Through GitHub action
                                  #1 point
