
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   COMPATIBILITY   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

COMPATIBILITY ==>                 #Stability over interface change. Can be:
                                  #  - backward: compatible with usages before interface changes
                                  #  - forward: making future versions easy to be backward compatible

TYPES ==>                         #Backward compatible if code written to ... against old version can still do so with new version:
                                  #  - source compatibility: compile
                                  #  - binary compatibility: execute, run, be linked
                                  #  - wire compatibility: communicate
                                  #Also:
                                  #  - semantic compatibility: new version does not break semantics

                                  ┌────────────────────────────┐
                                  │   BACKWARD COMPATIBILITY   │
                                  └────────────────────────────┘

SUPPORT BRANCH ==>                #Branch that only receives hotfixes ("backports") not new features
                                  #Meant to allow people to use old version until they upgrade

STABILITY ==>                     #Can mean both:
                                  #  - how often interface will change (i.e. backward compatiblity broken)
                                  #  - how bug-free the implementation is
                                  #E.g.: deprecated, experimental, stable, locked

                                  ┌───────────────────────────┐
                                  │   FORWARD COMPATIBILITY   │
                                  └───────────────────────────┘

FORMATS ==>                       #Often reserve spaces for future expansions

STANDARDS ==>                     #Pros:
                                  #  - increased compatibility
                                  #  - if "open standard": less vendor lock-in
                                  #Cons:
                                  #  - less flexibility or innovation

                                  ┌──────────────────────┐
                                  │   BREAKING CHANGES   │
                                  └──────────────────────┘

TYPES ==>                         #Always breaking changes:
                                  #  - removing exposed API
                                  #  - changing exposed API behavior
                                  #  - adding required exposed API
                                  #Usually not breaking changes:
                                  #  - adding optional exposed API
                                  #  - providing:
                                  #     - consumers ignore unknown fields
                                  #     - consumers ignore fields ordering
                                  #     - those requirements should be documented

EXPLICITY ==>                     #Should explicit compatibility policy.
                                  #Use versioning:
                                  #  - including in a format or algorithm
                                  #  - changelog
                                  #  - semver
                                  #Introduce breaking changes in stages:
                                  #  - document as deprecated
                                  #  - remove from documentation
                                  #  - remove from API

CONTINUOUS OBSOLESCENCE ==>       #High frequency of breaking changes
                                  #Might be coupled with vendor lock-in in order to force consumers to pay for more.

INTERCHANGEABILITY ==>            #See interchangeability doc
