
                                  ┏━━━━━━━━━━━┓
                                  ┃   TYPES   ┃
                                  ┗━━━━━━━━━━━┛

BY LANGUAGE ==>                   #  +-----------------------------+------------+----------+----------+-------------+
                                  #  |           LANGAGE           |  CHECKING  | EXPLICIT |  SAFETY  | DEFINITION  |
                                  #  +-----------------------------+------------+----------+----------+-------------+
                                  #  |            ASM x86          |    none    |  strong  |  unsafe  |  structural |
                                  #  |             PHP             |  dynamic   |   weak   |   safe   |   none      |
                                  #  |           JavaScript        |  dynamic   |   weak   |   safe   |   duck      |
                                  #  |            Python           |  dynamic   |  strong  |   safe   |   duck      |
                                  #  |             Ruby            |  dynamic   |  strong  |   safe   |   duck      |
                                  #  |             Perl            |  dynamic   |   weak   |   safe   |  nominative |
                                  #  |              C              |   static   |   weak   |  unsafe  |  nominative |
                                  #  |             BASIC           |   static   |   weak   |   safe   |  nominative |
                                  #  |             C++             |   static   |  strong  |  unsafe  |  nominative |
                                  #  |              C#             |   static   |  strong  |  middle  |  nominative |
                                  #  |             Java            |   static   |  strong  |   safe   |  nominative |
                                  #  |            FORTRAN          |   static   |  strong  |   safe   |  nominative |
                                  #  |            Pascal           |   static   |  strong  |   safe   |  nominative |
                                  #  +-----------------------------+------------+----------+----------+-------------+

                                  ┌────────────────┐
                                  │   DEFINITION   │
                                  └────────────────┘

TYPE ==>                          #A type is a name associated with a data structure.
                                  #Type identity is linked to the:
                                  #  - structure:
                                  #     - e.g. two names pointing to same structure are same type
                                  #     - type checking can be:
                                  #        - static, i.e. compile-time ("structural")
                                  #        - dynamic, i.e. run-time ("duck typing"): similar to generic programming "concepts"
                                  #     - structure can be thought as:
                                  #        - the binary representation
                                  #        - the behavior:
                                  #           - i.e. associated algorithms/operators/methods, their constraint and their complexity
                                  #           - state can either be manipulated imperatively (mutated) or functionally (i.e. returned as copy)
                                  #        - the value space, i.e. set of possible values
                                  #  - name ("nominative"):
                                  #     - e.g. two names pointing to same structure are different types

DEFINITION ==>                    #During variable definition, type must be:
                                  #  - explicit: "manifest typing"
                                  #  - implicit and decided:
                                  #     - compile-time: "implicit typing" / "type inference"
                                  #     - runtime: "latent typing"

ABSTRACT DATA TYPE (ADT) ==>      #Data type without implementation specifics
                                  #E.g. integers vs 32-bit binary numbers

PROBABLISTIC DATA TYPE ==>        #Data type that uses randomness.
                                  #This includes data types whose operations give an approximate result, e.g. Bloom filters.

PERSISTENT DATA TYPE ==>          #See state doc

OPERATIONS ==>                    #Most common operations on types:
                                  #  - create/insert
                                  #  - read:
                                  #     - by key: access
                                  #     - by value: search
                                  #  - update
                                  #  - delete

                                  ┌─────────────────┐
                                  │   COMPOSITION   │
                                  └─────────────────┘

SIMPLE VS COMPOSITE ==>           #Composite|compound|aggregate types are composed of other types, as opposed to simple|primitive types.
                                  #Data structures are composite types associated with specific algorithms/operations.

UNION TYPE ==>                    #Type which can be any of several given types.
                                  #Also called "sum type".
                                  #At runtime, the current type can either be:
                                  #  - tagged, i.e. recorded:
                                  #     - allows for better type checking
                                  #     - also called "discriminated union"
                                  #  - untagged:
                                  #     - takes less space
                                  #"Top" type / "variant" is union of all possible types:
                                  #  - often called "any" or just "object" (when all types derive from base type "object")

INTERSECTION TYPE ==>             #Type which combines constraints and behavior of several given types.
                                  #Is conceptually similar to multiple inheritance.

DEPENDENT TYPE ==>                #Composite type where one of its member's type has a constraint based on another member's type.
                                  #Examples:
                                  #  - [NUM, NUM2], where NUM2 > NUM
                                  #  - FUNC(NUM)->ARR, where ARR.length === NUM

                                  ┌────────────┐
                                  │   SAFETY   │
                                  └────────────┘

STRONG VS WEAK/LOOSE TYPING ==>   #Vague terms describing how much types are being checked|restricted, especially compile-time.
                                  #Includes type checking, type safety, duck typing, implicit|latent typing, etc.

TYPE SAFETY ==>                   #Robustness of a typing system.
                                  #Includes type casting, type checking, memory safety, type punning, etc.

TYPE CHECKING ==>                 #Type checking is type conformity:
                                  #  - between argument and parameter, including operators and assignments
                                  #  - during type casting
                                  #Can be done:
                                  #  - compile-time ("static")
                                  #     - more robust
                                  #     - more performant: not done runtime, and more optimizations
                                  #     - usually compiled languages
                                  #  - runtime ("dynamic")
                                  #     - more flexible (can create types runtime, simpler metaprogramming)
                                  #     - no compile-time required
                                  #     - usually scripted languages
                                  #  - both ("gradual typing")

MEMORY SAFETY ==>                 #Checking for problems like array overflow or wrong pointer dereferencing

TYPE CASTING ==>                  #Changing the type of a value.

TYPE PUNNING ==>                  #Low-level typecasting.
                                  #E.g.:
                                  #  - retrieving sign bit of a float
                                  #  - C union typecasting, depending on machine-level byte-wise disposition

TYPE CHANGE ==>                   #If variables can change type during their lifetime, especially because of control flow,
                                  #it is "flow-sensitive typing"

                                  ┌────────────────┐
                                  │   RESOLUTION   │
                                  └────────────────┘

NAME RESOLUTION ==>               #Associating identifier with a value
                                  #Can be according to (in order):
                                  #  - namespaces
                                  #  - scope (name binding)
                                  #  - polymorphism (dispatch)
                                  #Tradeoff compile-time/runtime is between robust|performant and flexibility

NAME BINDING ==>                  #Scope resolution. Can be:
                                  #  - compile-time (static|early binding)
                                  #  - runtime (dynamic|late|virtual binding)
                                  #Scope: environment (set of variables) available in a given block
                                  #Depends on which context (current code position) is used:
                                  #  - static|lexical scoping:
                                  #     - uses lexical context (position in source code)
                                  #     - compile-time
                                  #     - e.g. in which block a function was defined
                                  #     - more modular (e.g. easier to isolate scopes)
                                  #  - dynamic scoping:
                                  #     - uses execution|runtime|calling context (position in call stack)
                                  #     - run-time
                                  #     - e.g. from which block a function was fired
                                  #     - more flexible
                                  #Level (what "blocks" means):
                                  #  - expression, block, function, file, module, global
                                  #Parent environment can be inherited:
                                  #  - by value or by reference
                                  #Masking|shadowing:
                                  #  - when current scope override some variables from parent

DISPATCH ==>                      #Polymorphism resolution. Can be:
                                  #  - compile-time (static)
                                  #     - usually using name mangling (type information concatenated to function name)
                                  #  - runtime (dynamic)
                                  #     - usually using virtual table (hash of function pointers, resolved at runtime)
