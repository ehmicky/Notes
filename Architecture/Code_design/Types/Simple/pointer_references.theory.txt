
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   POINTER_REFERENCES   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━┛

REFERENCE ==>                     #Value that points to any other value, not necessarily through memory address
                                  #E.g. used when memory address itself is not exposed by reference
                                  #Interpreting a reference is "dereferencing"
                                  #Contrasts to using a copy of the data.
                                  #Value can be:
                                  #  - a memory address ("pointer")
                                  #  - an offset
                                  #  - a name ("key" or "identifier"), e.g. a variable
                                  #     - an opaque name ("handle")
                                  #        - e.g. file descriptors, PIDs, sockets, database connections

STRONG VS WEAK ==>                #See garbage collection doc

ERRORS ==>                        #Segmentation fault: dereferencing to an address outside what the current process can access
                                  #Dangling|wild pointer: pointer assumed type is not what the pointed value actually is

NULL POINTER ==>                  #See emptiness doc

MULTIPLE INDIRECTION ==>          #Pointer targetting another pointer

SMART POINTER ==>                 #Object that behaves like a reference.
                                  #Used to add behavior such as memory management or bound checking
