
                                  ┏━━━━━━━━━┓
                                  ┃   BIT   ┃
                                  ┗━━━━━━━━━┛

BITWISE OPERATIONS ==>            #not ~
                                  #or |
                                  #  - | 1 is often used for masking, i.e. setting to 1
                                  #and &
                                  #  - & 0 is often used for masking, i.e. setting to 0
                                  #xor ^
                                  #  - ^ 1 is often used for toggling

SHIFT OPERATION ==>               #Left vs right
                                  #Arithmetic|signed|sticky << >> vs logic|unsigned|zero-fill <<< >>>:
                                  #  - left arithmetic and left logic are same, i.e. they preserve sign bit
                                  #  - right arithmetic preserve sign bit, not right logic
                                  #  - arithmetic should be used with signed integers, logic with unsigned
                                  #     - some languages (C/C++/Go) have only << >> and choose according to type
                                  #Often adds parameter NUM (how many shifts to do)
                                  #Can be used to:
                                  #  - multiply by 2**NUM
                                  #  - divide by 2**NUM, but rounds towards -Infinity (where the usual is often towards 0)

ROTATE OPERATION ==>              #Left vs right
                                  #"No carry"/"circular":
                                  #  - extra bit is added on other end
                                  #"Through carry":
                                  #  - extra bit is returned, and a bit provided as argument is added on other end
                                  #  - can simulate:
                                  #     - left arithmetic|logic shifts and right logic shift by providing 0 as argument
                                  #     - right argithmetic shift by providing sign bit as argument

BIT ARRAY ==>                     #Array of bits
                                  #Also called bit string|map|vector
                                  #Goal:
                                  #  - space efficiency
                                  #  - time efficiency, using CPU bitwise opcodes

BIT BOARD ==>                     #Bit array recording the state of a game, e.g. positions in a chess game.

BIT STREAM ==>                    #Stream of bits

BIT FIELD ==>                     #Record where fields ("flags") are bit-sized
                                  #Examples: Unix permissions, implementation of IEEE 754 floats, etc.
