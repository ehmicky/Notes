
                    
   DENO_BINARY_HEAP  
                    



VERSION ==>                       #Part of Deno
                                  #Browser compatible

@std/data_structures/
 binary_heap.ts
BinaryHeap.from                   #Same as new BinaryHeap() + push(VAL...)
 (ARRAYLIKE|ITERABLE|BINARY_HEAP  #OPTS:
 [, OPTS])->BINARY_HEAP2          #  - compare FUNC: like new BinaryHeap(FUNC)
                                  #  - map(VAL, INDEX)->VAL: map values
new BinaryHeap([FUNC])            #FUNC(VAL, VAL2)->-1|0|1
                                  #  - defines order
                                  #  - can be descend (def, <, max heap) or ascend (>, min heap) from std/data_structures/comparators.ts

BINARY_HEAP.push(VAL...)->NUM     #Add more values. Returns NUM of values
BINARY_HEAP.peek()[->VAL]         #Get top value, or undefined if none
BINARY_HEAP.pop()[->VAL]          #Get top value, or undefined if none, then delete it

BINARY_HEAP.toArray()->ARR        #Return all values not in order
BINARY_HEAP[Symbol.iterator]()    #BINARY_HEAP is an ASYNC_ITERATOR, behaving like drain()
BINARY_HEAP.drain()->ITERABLETOR  #Iterate over values in order, deleting them as they iterate

BINARY_HEAP.length                #NUM of values
BINARY_HEAP.clear()               #Remove all values
BINARY_HEAP.isEmpty()->BOOL       #
