
           
   SORTING  
           




ADAPTIVE SORTS ==>                #Sorting algorithm that performs better when input is already partially sorted

STABLE SORTS ==>                  #Whether when two elements are equal (according to their sort key), their order in the
                                  #sorted array remains the same as in the initial array.
                                  #Goal:
                                  #  - if initial order mattered
                                  #  - including multi-stage sorting, i.e. previous stage's order matters

EXTERNAL SORTS ==>                #Sorting algorithms with low amount of memory, i.e. incremental.
                                  #Meant when input is bigger than machine's memory.
                                  #Often used: merge sorts, quicksort

COMPARISON SORTS ==>              #Sorting algorithms using a FUNC(VAL, VAL2)-> <= or >=
                                  #  - often use -1, 0 and 1
                                  #Average time complexity at least O(n log n)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      DISTRIBUTION SORTS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DISTRIBUTION SORTS ==>            #Main type of sorts that are not comparison-based.
                                  #Average time complexity at least O(n)

BUCKET|BIN SORT ==>               #Steps:
                                  #  - create k linear buckets
                                  #     - time complexity O(k)
                                  #     - space complexity O(k)
                                  #     - e.g. first bucket for values < 100, second bucket for values 100 < x < 200, etc.
                                  #  - "scatter":
                                  #     - assign each value to a bucket|bin|category
                                  #     - must take O(1) by element
                                  #        - e.g. using array indexing
                                  #        - i.e. total time complexity O(n)
                                  #     - space complexity O(n)
                                  #  - sort each bucket's values
                                  #     - using any sort algorithm
                                  #     - less efficient time complexity, i.e. better if buckets have few values, i.e. evenly distributed
                                  #  - "gather": concatenate all bucket's elements
                                  #     - time complexity O(n)
                                  #Average|worst time complexity: O(n + k)
                                  #Space complexity: O(n + k)
                                  #Stable sort

PIGEONHOLE SORT ==>               #Variant of bucket|bin sort
                                  #Like bucket sort except values inside each bucket are sort-equivalent
                                  #I.e. no need to sort inside each bucket
                                  #  - e.g. first bucket has {type: 1, name: 'd'}, {type: 1, name: 'b'},
                                  #    second bucket {type: 2, name: 'a'}, and we sort by 'type'
                                  #Good when number of possible buckets and number of elements are almost the same

COUNTING SORT ==>                 #Also called "histogram sort"
                                  #Element's keys must be integers
                                  #  - elements themselves might be integers and used as keys as well
                                  #Steps:
                                  #  - sums how many times each integer is present
                                  #  - calculate offsets in output array using those sums
                                  #  - move elements using those offsets
                                  #Example:
                                  #  - [50, 50, 70, 20, 10]
                                  #     -> {'10': 1, '20': 1, '50': 2, '70': 1} (sums)
                                  #     -> {'10': 0, '20': 1, '50': 2, '70': 4} (offsets)
                                  #     -> [50:2, 50:3, 70:4, 20:1, 10:0]
                                  #     -> [10, 20, 50, 50, 70]

RADIX SORT ==>                    #Similar to counting sort, except it is done in several passes:
                                  #  - each pass:
                                  #     - uses as input the output of previous pass
                                  #     - uses a single symbol of a specific position
                                  #  - symbols are usually numbers or letters
                                  #Variants:
                                  #  - LSD (least significant digit) / bottom-up:
                                  #     - process symbols from right-to-left
                                  #     - for any particular position, "has no symbol" comes before "has symbol"
                                  #     - i.e. would sort 56, 5, 1, 7 to 1, 5, 56, 7 then 1, 5, 7, 56
                                  #  - MSD (most significant digit) / top-down / postman's sort:
                                  #     - process symbols from left-to-right
                                  #     - for any particular position, "has no symbol" comes before "has symbol"
                                  #     - i.e. would sort 56, 5, 1, 7 to 1, 56, 5, 7 then 1, 5, 56, 7
                                  #     - can be recursive, i.e. create sub-passes for each pass instead of reusing
                                  #       full input|output for each pass
                                  #     - only good for numbers if fixed-length. Usually used with strings.
                                  #  - american flag sort:
                                  #     - like recursive MSD, except:
                                  #        - calculate size of each bucket before moving elements to their buckets
                                  #        - i.e. can be done in-place
                                  #     - more efficient when bucket size is power of 2, because can implement with bitwise logic
                                  #I.e. it is a generalization of counting sort for abitrary length numbers

BEAD SORT ==>                     #Also called "gravity sort"
                                  #Element's keys must be integers
                                  #  - elements themselves might be integers and used as keys as well
                                  #Similar to using an abacus and mapping beads fall
                                  #Steps:
                                  #  - put numbers in a matrix: each number n is a row, filled with n 1s
                                  #  - remove all vertical gaps (i.e. make 1s "fall")
                                  #  - each row will represent a sorted number
                                  #Example:
                                  #  - [2, 4, 1, 3, 3]
                                  #     -> [1, 1, 0, 0] (2)
                                  #        [1, 1, 1, 1] (4)
                                  #        [1, 0, 0, 0] (1)
                                  #        [1, 1, 1, 0] (3)
                                  #        [1, 1, 1, 0] (3)
                                  #     -> [1, 0, 0, 0] (1)
                                  #        [1, 1, 0, 0] (2)
                                  #        [1, 1, 1, 0] (3)
                                  #        [1, 1, 1, 0] (3)
                                  #        [1, 1, 1, 1] (4)
                                  #Another way to look at it:
                                  #  - create array with length === max number
                                  #  - for each number n, increment n first items of array
                                  #  - for each array item, replace by difference with next item
                                  #  - for each array item m, replace by m times its 1-based index
                                  #Example:
                                  #  - [2, 4, 1, 3, 3]
                                  #    -> [0, 0, 0, 0]
                                  #    -> [1, 1, 0, 0] (2)
                                  #    -> [2, 2, 1, 1] (4)
                                  #    -> [3, 2, 1, 1] (1)
                                  #    -> [4, 3, 2, 1] (3)
                                  #    -> [5, 4, 3, 1] (3)
                                  #    -> [1, 1, 2, 1] (difference)
                                  #    -> [1, 2, 3, 3, 4] (indexes)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MERGE SORTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MERGE SORT ==>                    #Conceptually the inverse of a bucket sort
                                  #How:
                                  #  - divide array into groups of 2 elements
                                  #  - sort each group's elements using any sorting algorithm
                                  #  - merge each group with next group, by comparing their elements in order, to produce a sorted group
                                  #     - if last group is partial, still merge it
                                  #     - if there is an odd number of groups, last group is left as is
                                  #  - reiterate the merge with the newly formed groups
                                  #Can:
                                  #  - merge first array with next, iterately:
                                  #     - suboptimal and not parallel
                                  #  - merge each pair of arrays together
                                  #  - merge two smallest arrays together:
                                  #     - faster if array sizes are not uniform
                                  #Can be implemented either top-down or bottom-up, with similar efficiency
                                  #Is easy to be run in parallel
                                  #Merge step can be implemented:
                                  #  - using "all nearest smaller values" algorithm (see its doc):
                                  #     - concatenate first group with reversed second group
                                  #     - calculate all nearest smaller values, in both directions
                                  #     - for each value, bigger neigbor should be previous value in merged array


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSERTION SORTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INSERTION SORT ==>                #For over each elementA:
                                  #  - find first elementB of current output bigger than elementA
                                  #  - insert elementA into current output at that position
                                  #Output can be growing sub-array at beginning of array, to make it in-place.
                                  #Pros:
                                  #  - simple to implement
                                  #  - efficient when list to sort is small (e.g. <10-50 elements)
                                  #     - often used with more efficient divide-and-conquer sort algorithms as a subroutine
                                  #  - stable
                                  #  - online
                                  #  - space complexity O(1)
                                  #  - adaptive, best time complexity O(n)
                                  #Cons:
                                  #  - average|worst time complexity O(n²)

SHELL SORT ==>                    #Use GAPs:
                                  #  - GAP number from 1 to n/2
                                  #  - divide input into GAP subarrays, each containing elements with same position % GAP
                                  #     - e.g. if GAP is 3, [d, y, q, a, z] -> [d, a], [y, z], [q]
                                  #  - which series of GAP is chosen is implementation-specific, but must be decreasing and end with 1
                                  #     - often used: n/2, n/4, ..., 1
                                  #For each GAP:
                                  #  - for each subarray:
                                  #     - apply insertion sort


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SELECTION SORTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SELECTION SORT ==>                #How:
                                  #  - find min item of the list
                                  #  - put min item to beginning, swapping in-place
                                  #  - recurse but without min item
                                  #Efficient when list to sort is small, but usually insertion sorts are better
                                  #Similar pros|cons as insertion sorts except:
                                  #  - not adaptive
                                  #  - better when writes are expensive, worst when reads are expensive
                                  #     - does not require shifting range of elements
                                  #     - but each pass in selection sort goes through all elements, while insertion sorts goes
                                  #       through half of them, i.e. does twice less operations

HEAPSORT ==>                      #How:
                                  #  - build a heap
                                  #  - extract the root of the heap, to iteratively create sorted array
                                  #Can be done in-place:
                                  #  - building a heap can be done in-place
                                  #  - when extracting each root can:
                                  #     - place it in a growing sorted array at end
                                  #     - swap with the last element, which becomes new root and is moved down the heap until satisfying the
                                  #       heap property


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        EXCHANGE SORTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUBBLE SORT ==>                   #Also called "sinking sort"
                                  #How:
                                  #  - for each element, swap with next element if next element is smaller
                                  #  - repeat whole iteration until sorted
                                  #Similar pros|cons as insertion sorts except:
                                  #  - slower: each element must shift to its sorted position with several swaps
                                  #  - does not require random access, e.g. can be done on linked lists
                                  #  - otherwise should be avoided, mostly used for educational purpose

QUICKSORT ==>                     #Also called "partition-exchange sort"

BOGOSORT ==>                      #Also called "permutation sort", "stupid sort", "slowsort", "shotgun sort", "monkey sort"
                                  #Randomly shuffles whole array until shuffle output happens to be also sorted
                                  #  - or alternatively, try every permutation
                                  #Only meant as a joke, or example of a bad sorting algorithm
