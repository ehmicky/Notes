
           
   MIN_MAX  
           



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ALGORITHMS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RANGE QUERY ==>                   #Performing an operation over a subset of an array
                                  #Operation can be:
                                  #  - minimum|maximum ("range minimum|maximum query" (RMQ))
                                  #  - mode ("range mode query")
                                  #  - median

ALL NEAREST SMALLER VALUES ==>    #Algorithm:
                                  #  - in a sequence of values
                                  #  - for each value:
                                  #     - lookup all the previous values
                                  #        - sometimes done in both directions
                                  #     - find the indices of the closest lower|higher value
                                  #Example: [0, 8, 4, 9] -> [null, 0, 0, 2]
                                  #Can be efficiently implemented as a parallel algorithm.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ABSTRACT DATA TYPES      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRIORITY QUEUE ==>                #List with read|write to highest priority item, where each item is assigned a "priority",
                                  #which can be using any type (as long as it can be compared).
                                  #Operations:
                                  #  - insert(VAL, PRIORITY)
                                  #  - peek_max|min()->VAL
                                  #  - pull_max|min()->VAL
                                  #  - set_priority(INDEX, PRIORITY)
                                  #"Min|max-priority queue": when only min|max() is available
                                  #Often implemented as heaps


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HEAP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HEAP ==>                          #Tree satisfying the "heap property":
                                  #  - "max heap": parent node's key >= child's key
                                  #  - "min heap": parent node's key <= child's key
                                  #Goal:
                                  #  - performing min|max
                                  #  - e.g. implementing a priority queue
                                  #Operations:
                                  #  - peek_max|min(): O(1)
                                  #  - pull_max|min(): O(log n)
                                  #  - insert(NODE): O(log n)
                                  #  - delete(): arbitrary node
                                  #  - set_key(NODE, KEY): O(log n)
                                  #  - merge(HEAP, HEAP2)->HEAP3: O(n)
                                  #  - size()->NUM
                                  #Complexity depends on implementation (those are the most common).
                                  #Just like search trees, they must be balanced to keep O(log n) complexity
                                  #Building a heap from an array:
                                  #  - "William's method"/"top-down"/"siftDown":
                                  #     - insert one element at a time
                                  #     - online algorithm
                                  #     - O(n log n)
                                  #  - "Floyd's method"/"bottom-up"/"siftUp":
                                  #     - lay array as a binary tree, e.g. using its sequential representation
                                  #     - for each subtree, from bottom to top, move down the root of the subtree until the
                                  #       subtree satisfies the heap property
                                  #     - O(n)

CARTESIAN TREE ==>                #Heap built from a sequence of keys, that can be reversed to that sequence of keys with
                                  #an in-order traversal.
                                  #Construction:
                                  #  - time complexity: O(n)
                                  #  - from "all nearest smaller values" algorithm:
                                  #     - going in both directions, i.e. building left|right neighbors
                                  #     - if has no left|right neighbors, is root
                                  #     - if higher neighbor is left|right, put as right|left child of it
                                  #Goal is efficient range minimum|maximum query:
                                  #  - minimum|maximum of any subset of the original sequence of keys
                                  #    is the lowest common ancestor to the first and last keys of the subset
                                  #  - time complexity: O(1)
                                  #  - space complexity: O(n) (storing the tree itself)

TOURNAMENT TREE ==>               #Winner or looser tree

WINNER TREE ==>                   #Heap built bottom-up
