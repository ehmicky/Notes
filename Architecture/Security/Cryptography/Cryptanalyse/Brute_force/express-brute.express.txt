
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   EXPRESS-BRUTE   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

(new EXPRESBRUTE(STORE[,OBJ]))#Express MIDWR (0.5.0) that implements brute-force protection (or REST API rate limiting):
.getMiddleware(OBJ2)          #  - identifies user according to specific IP and optional ID (e.g. REQ.sessionID)
                              #  - when user does first request, starts "lifetime" period
                              #     - actually "lifetime" is reset at each request if OBJ.refreshTimeoutOnRequest true (def)
                              #     - set to false when allowing specific number of request/day
                              #  - during "lifetime", after "freeRetries" NUM requests, user will need to wait between two
                              #    requests
                              #  - wait time increments at each request during "lifetime":
                              #     - starts at minWait
                              #     - increments at each request by adding two previous wait times
                              #     - ends at maxWait
                              #  - if not over the wait time, request is rejected
                              #OBJ:
                              #  - freeRetries NUM (def: 2)
                              #  - min|maxWait NUM (in ms, def: 500ms, 15min)
                              #  - lifetime NUM (in secs, def: maxWait * times to reach maxWait (meaning with def: 2 hours).
                              #  - failCallback MIDWR(REQ, RES, NEXT, DATE): 
                              #      - called when request is rejected.
                              #      - DATE is next valid one.
                              #      - some default ones can be used:
                              #         - EXPRESSBRUTE.FailTooManyRequests (def):
                              #            - set Retry-After: NUM [S] (in sec)
                              #            - sends 429 with {error: { text: "Too many requests", nextValidRequestDate: DATE } }
                              #         - EXPRESSBRUTE.FailMark: same but set RES.nextValidRequestDate instead of sending {...}
                              #  - proxyDepth NUM (def: 0): when using a proxy, to get right IP.
                              #  - attachResetToRequest BOOL (def: true): create REQ.brute.reset(FUNC()) that forgets info
                              #    about current user
                              #OBJ2:
                              #  - key ID|FUNC(REQ, RES, NEXT(ID)): 
                              #     - REQ.ID is the unique identifier used together with REQ.ips (goes through proxies). 
                              #     - It is optional (but using only the IP is not good idea).
                              #STORE is where info is stored. Available: 
                              #  - new EXPRESSBRUTE.MemoryStore([OBJ]), with OBJ.prefix (def: "")
                              #  - new EXPRESS-BRUTE-REDIS([OBJ]) (version 0.0.1):
                              #     - uses Redis (setex/get/del) with expiration time == lifetime
                              #     - OBJ:
                              #        - host, port
                              #        - prefix STR (def: ""): namespace of the keys
                              #        - client: REDIS CLIENT
                              #        - any PARAM_OBJ passed to REDIS
                              #  - new EXPRESS-BRUTE-MONGO(FUNC(FUNC2)) (version 0.1.0):
                              #     - uses MongoDB. Must call FUNC2(~COLL). 
                              #       COLL must have members data OBJ and expires DATE, with index { expireAfterSeconds: 0 }
                              #       on expires
