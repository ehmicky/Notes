
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   KEYGRIP   ┃
                                  ┗━━━━━━━━━━━━━┛

KEYGRIP(KEY_STR_ARR[, ALGO]   #Node module (1.0.1).
[, ENCODING])                 #Sign a VAL by hashing it with secret KEY, but using a rolling set of keys KEY_STR_ARR:
                              #  - Hash uses first key, verify tries all
                              #  - should unshift() new keys, pop() old ones
                              #  - Should start with only one KEY_STR
                              #Goal is to have temporary keys, limiting damages if stolen.
                              #Do constant time comparisons to avoid timing attacks.
                              #ALGO is "sha1" by def. (can be sha256)
                              #Returns KEYS
KEYS.sign(BUFFER|STR)         #Returns:
                              #  - HMAC-ALGO(KEY_STR_ARR[0], BUFFER|STR): 
                              #     - ALGO is "sha1" by def. (can be "sha256")
                              #  - returns as base64 STR, but can use different ENCODING, e.g. "utf8" or "" (BUFFER)
KEYS.verify(BUFFER|STR, VAL)  #Returns true if VAL == KEYS.sign(BUFFER|STR) with one of the KEY_STR.
