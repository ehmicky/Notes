
          
   RANDOM  
          

Types :
  - PRNG (pseudo-random number generator) :
      - fonction f(s) produisant un output aléatoire (s est la seed)
      - types :
          - cryptographic PRNG :
            - utilise un IV comme seed (au sens de nonce non-prédisible, et non de non-aléatoire, sinon cela est un paradoxe
              récursif)
            - recherche diffusion + confusion (entre la seed et l'output)
            - cherche à être résistant aux PRNG attaques
          - non-cryptographic PRNG
            - utilise un nonce comme seed :
            - ne recherche que diffusion
            - utilisé dans les jeux vidéos, graphismes, statistiques, etc.
  - RNG (truly random number generator) :
      - utilise une seed réellement aléatoire, via des événements physiques, comme sensors (intervals entre touches tapées,
        mouvements de souris, etc.)
      - a une entropy donnée désignant quantité d'information réellement aléatoire
      - est en général bien plus lent que PRNG

Utilisation en cryptographie :
  - création de clefs aléatoires :
      - clef secrète symétrique
      - clef privée asymétrique
  - création d'IV pour :
      - stream ciphers
      - block ciphers (en dehors de certains mode of operation, dont CBC et CTR)
  - padding avec bits aléatoires

Définition de aléatoire :
  - f(s) où, ignorant s, chaque aₙ a une probabilité de 1/w d'être l'output, pour chaque a de l'output (équivaut à diffusion)
  - si l'on peut deviner s -> probabilité == 1 -> plus aléatoire
  - si probabilité est différente de 1/w mais != 1, alors il y a un "bias"
      - bias aide les PRNG attaques
      - cependant d'un point de vue théorique, ne signifie pas que c'est déterministe (pas aléatoire), mais que l'aléatoirité
        est mappée selon une "distribution" donnée

/dev/random vs /dev/urandom :
  - urandom est :
    - pseudo-aléatoire (donc insecure)
    - rapide avec une vitesse constante (unblocked).
  - random :
    - utilise un entropy pool, est réellement aléatoire (basé sur des sensors du PC)
    - a une vitesse aléatoire (blocked), et est quasiment toujours bien plus lent.
    - L'entropy disponible peut être lue à l'instant présent dans /proc/sys/kernel/random/entropy_avail.
    - L'entropy pool semble notamment utiliser les touches tapées et les mouvements de souris.
