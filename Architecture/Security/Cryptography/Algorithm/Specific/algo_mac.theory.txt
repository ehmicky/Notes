
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   ALGO_MAC   ┃
                                  ┗━━━━━━━━━━━━━━┛

HMAC (Hash-based MAC) :
  - basé sur une hash function : HMAC-MD5, HMAC-SHA1, etc.
  - soit :
    - Hash() la hash function (par ex. SHA1)
    - input_block_size et output_bloc_size celles de Hash(), k_size la taille de la clef
    - ∥ la concaténation, ⊕ xor
    - ∥∥ 0x00 le fait de concaténer (padding) des 0x00 jusqu'à input_block_size
    - k la clef, et m le message
  - alors :
    - si k_size > input_block_size, k = Hash( k )
    - Var1 = ( k ∥∥ 0x00 ) ⊕ 0x3636...
    - Var2 = ( k ∥∥ 0x00 ) ⊕ 0x5c5c...
    - HMAC = Hash( Var2 ∥ Hash( Var1 ∥ m ) )
  - le xor est pas essentiel : il sert surtout à maximiser la hamming distance de Var1 et Var2
    - au final cela revient surtout dans l'idée à Hash( k ∥ Hash( k ∥ m ) )
  - Pourquoi deux Hash() ? Alternatives problématiques :
    - Hash( k ∥ m ) seul est susceptible à des extension attacks
    - Hash( m ∥ k ) : si Hash() est susceptible à des attaques par collisions, alors aussi le MAC. 
      - Avec deux Hash(), HMAC est plus résistant que Hash()
        - par conséquent, on peut l'utiliser avec certains Hash() pourtant broken, comme MD5, sans que MAC soit broken
    - Hash( m ∥ k ∥ m ) est aussi susceptible à des attaques

CBC-MAC :
  - basé sur un block cipher Cipher(), en mode CBC
  - CBC-MAC = Cipher( m, k ), avec clef k, et un IV de 0
  - si m est lui-même chiffré, ne pas réutiliser même clef
  - problème : pas secure pour suite de messages avec taille variable, mais secure pour messages tailles fixes

CMAC (Cipher-based MAC) / OMAC1 :
  - basé sur un block cipher
  - sensé être version améliorée de CBC-MAC
  - soit :
    - E() le block cipher utilisant une clef k
    - input_block_size celle de E(), output_MAC_size celle désirée du MAC
    - C une constante dépendant d'input_block_size
    - msb() renvoie le MSB
    - k1 et k2 deux clef dérivées de k via :
      - k1 = ( E(0) << 1 )
      - si msb(E(0)) == 0, k1 = k1 ⊕ C
      - k2 = ( k1 << 1 )
      - si msb(k1) == 0, k2 = k2 ⊕ C
    - alors :
      - si dernier bloc de m a besoin d'être padded :
        - le pad avec un 1 suivi de 0
        - le ⊕ avec k2
      - sinon le ⊕ avec k1 seulement
      - chiffrer m en mode CBC, avec clef k, et un IV de 0, comme pour CBC-MAC
      - ne retenir que les output_MAC_size derniers bits

OMAC (One-key MAC) :
  - divisé en :
    - OMAC1, cf CMAC
    - OMAC2, très proche de OMAC1

PMAC (parallellizable MAC) :
  - basé sur un block cipher
  - parallellizable, contrairement à OMAC, et HMAC qui sont séquentiels
  - si k est random, peut aussi agir comme une pseudorandom fonction
  - il y a un brevet
  - similaire à OMAC
  - soit :
    - E() un block cipher avec une input_block_size, une clef k et un IV de 0
    - ntz() renvoie le nombre de trailing 0 binaires
    - pad(m) padde avec un 1 suivi de 0, si m a une taille < input_block_size
    - Var1 et Var2 de taille input_block_size et initialisés avec une suite de 0
    - Fonc(x) renvoie :
      - si x == 0, E()
      - sinon :
        - si lsb(x-1) != 0, ( Fonc(x-1) << 1 ) ⊕ 0x0...087
        - sinon, rajoute aussi un << 1 supplémentaire
    - ensuite :
      - pour chaque bloc m, sauf le dernier dont l'index est i :
        - Var1 ⊕= Fonc(ntz(i))
          Var2 ⊕= E(Var1 ⊕ m)
      - Renvoyer les output_MAC_size derniers bits de E(Var2 ⊕ pad(dernier bloc))
