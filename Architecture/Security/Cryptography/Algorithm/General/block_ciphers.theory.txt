
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   BLOCK CIPHERS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

S-boxes/substitution cipher :
  - types :
    - substitution monoalphabétique et monographique : permutation de A -> A (chaque symbole de l'alphabet est converti vers un autre symbole de ce même alphabet)
      - K est l'ensemble des permutations possibles
        - où nb_units est nombre d'units dans un sous-bloc
        - où nb_sous_bloc est nombre de sous-blocs dans un bloc
      - sa taille est w^nb
        - ne dépend pas de n
        - mais comme opère sur un sous-bloc, sur le bloc entier : w^(nb*nb2), soit wⁿ
        - pour un système binaire, 2ⁿ pour le bloc entier donc
      - cas spécial : utilisation d'un alphabet différent mais de même taille
    - substitution polyalphabétique : transforme chaque symbole en plusieurs symboles
    - substitution polygraphique : e est modifié à chaque groupe d'unités (e == {e₁,...,eₙ})
    - substitution homophonique : permutation de A -> A', où à chaque a correspond plusieurs a' posssibles. Augmente diffusion.
  - effectué sur un sous-bloc : ensemble d'units, contrairement à P-Boxes
  - doit être une bijection, pour pouvoir déchiffrer
  - peut donc être implémenté sous forme de lookup table (arrays) avec comme index l'input.
  - la lookup table peut être constante pour un round donné, ou dérivée de la clef.

P-boxes/transposition/permutation cipher :
  - K est une liste {1..n} mélangée pseudo-aléatoirement ou aléatoirement. Chaque unit du bloc (de taille n units) est permutée selon l'ordre indiquée par son index dans la liste.
    - nombre de permutation possibles (taille clef) : n!
      - cependant si deux units ont même valeur, il y aura deux permutations possibles doublons, donc nombre de permutations
        sans doublon est bien inférieur (et inférieur à 2ⁿ en tout cas)
    - si taille non-variable, cela me semble équivalent à une substitution sur un bloc de taille n
      - mais dont K est limité à des substitutions conservant la valeurs des units
  - but : les output bits d'un sous-block d'une précédente S-box se trouvent en input de l'ensemble des sous-blocks du prochain S-box
  - peut être sous forme d'une lookup table : x_temp[table[i]] = x[i]

Block cipher :
  - L'input total est divisé en un total de plaintext input blocs de taille fixe de N units ("block size")
  - Chaque plaintext input bloc subit :
    - un product cipher, avec la clef entière
    - éventuellement une modular operation avec un input dérivé du ciphertext précédént ou du plaintext courant avant ou après le product cipher
    - un éventuel padding pour dernier bloc
    - le choix de ces derniers dépend du "mode of operation"
  - Il y a donc plusieurs choses : 
    - la méthode de division de l'input, dont block sizes possibles
    - le mode of operation
    - l'algorithme central (product cipher) :
      - description des rounds
      - key schedule, et tailles possibles de la clef
  - ne pas confondre :
    - clef entière utilisée par chaque chiffrement d'un bloc, et subkeys utilisée par product ciphers
    - chiffrement de chaque bloc, et rounds d'un product cipher
    -  BLOCK CIPHER + MODE OF OPERATION      PRODUCT CIPHER SEUL
                 input bloc             input        Clef entière
                     |                    |            |   |   |
         Opération---+                    v         +--+   |   +--+
         éventuelle  |                   Round1     v      v      v
                     v                    |       Subkey1, 2, ... n
         Clef      Product                +---------+             |
       Entière --> Cipher                 v                       |
                     |                   RoundN                   |
         Opération---+                    |                       |
         éventuelle  |                    +-----------------------+
                     v                    v
                  Ciphertext            output
                  bloc
              
Product ciphers :
  - suite de rounds, parmi :
    - S-Box
    - P-Box
    - modular arithmetic avec des subkeys, souvent xor (seul opération utilisant la clef)
      - les modular arithmetic sont à raprocher conceptuellement des substitution cipher
  - chaque round utilise comme inputs un/des résultats chiffrés intermédiaires et éventuellement une round key. 
    - l'agencement de cela + le fonctionnement des P-Box et S-Box déterminent le fonctionnement du product cipher
    - round key / subkeys : ensemble successif de blocs dérivés de la clef
    - Key schedule :
      - manière avec laquelle les subkeys sont dérivés de la clef.
      - souvent on splitte la clef en plusieurs morceaux, puis on lui applique des opérations, dont one-way functions

Propriétés crypto des product ciphers :
    - diffusion, via avalanche effect induit par mix des S-Box et des P-Box
    - confusion, via le fait que changer un bit de la clef change l'ensemble des round keys (key schedule strict avalanche
      criterion), qui elles-mêmes changent l'ensemble du ciphertext
    - hypothèse :
      - diffusion :
        - deux S-Boxes peuvent être résuites à une seule S-Boxe si même composition possible (même domain -> dans système
          binaire, même u)
          - donc pour ajouter diffusion, doit avoir u différent
        - une P-Box sur une n fixe (et non variable) peut être réduit à une substitution dont l'unit est n
          - or en général, les P-Boxes sont sur l'ensemble du bloc, et les S-boxes sur ses units, dont taille différente -> diffusion
      - confusion :
        - ne vient pas des modular arithmetic en elle-même mais de l'implication de la key : modular arithmetic modifient
          output des S-boxes et P-boxes, qui par la diffusion qu'elles apportent, rendent imprédictible cette modification ->
          confusion

Types de product ciphers :
  - SP Network (Substitution-Permutation Network)
    - pour déchiffrer, faire les rounds à l'envers
    - avantages :
      - parallélisme exploitable pour l'efficience sur gros systèmes (non sur systèmes embarqués)
    - exemples : AES
  - Feistel Network
    - soit input coupé en 2 blocs p₁ et p₂ de taille égale, et clefs coupés en k₁, k₂, ... kₙ, pour n rounds :
         p₁ -->--+-->--⊕-->   ->--⊕-
                 |     T          T \
                 V     |          |  \
              k₁-@  k₂-@   ... kₙ-@   ciphertext     ⊕ : xor
                 |     T          T  /               @ : round fonction (S-box ou P-box)
                 V     |          | /                ciphertext final : concaténation des deux derniers outputs
         p₂ -->--⊕-->--+-->   ->--+-                 
    - pour déchiffrer, même chose, mais en utilisant kₙ...k₁ et non k₁..kₙ
    - exemples : Blowfish, Camelia, CAST-128, DES, RCS, 3DES, Twofish, GOST
    - unbalanced feistel network : p₁ et p₂ ne sont pas taille égale

Modes of operations :
  - une flèche venant du dehors signifie précédent ciphertext ou, pour le premier bloc, un IV (initialization vector). Inverse
    pour flèche allant vers dehors : cela s'appelle un "feedback"
  - les flèches venant du dehors sont connues au déchiffrement (ce qui explique possibilité de synchronization ou parallélisme
    lors du déchiffrement de plusieurs modes of operations)
  - Parallélisme :
    - implique :
      - possibilité de chiffrer ou déchiffrer en parallèle
      - possibilité de chiffrer ou déchiffrer en random access
    - chiffrement : 
      - impossible si Cipher dépend du chiffrement de l'unit précédent
      - possible : ECB, CTR
    - déchiffrement : 
      - impossible si Cipher dépend du chiffrement de l'unit précédent, sauf si dépend seulement du ciphertext
      - possible : ECB, CBC, CFB, CTR
  - Synchronization :
    - si pas de feedback : synchronization au prochain bloc
    - si feedback, dépendant seulement des N derniers ciphertexts : synchronization après N + 1 bloc (== après N units si bloc size == 1 unit)
    - si feedback, dépendant des précédents plaintexts ou keystream : pas de synchronization
  - Buffering du feedback : possible si feedback ne dépend pas du ciphertext ni plaintext précédent, mais seulement de la
    keystream.
  - ⊕ est xor
  - tweakable cipher : block cipher utilisant son mode of operation en fonction du plaintext et/ou de la clef.
  - Synthèse :
     
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Mode     |      ECB      |      CBC      |      PCBC      |      CFB      |      OFB      |      CTR      |      AEAD       |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Sécurité |    Faible     |               |                |               |               |               |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Parallél.|      Oui      |      Non      |      Non       |      Non      |      Non      |      Oui      |                 |
| Chiffr.  |               |               |                |               |               |               |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Parallél.|      Oui      |      Oui      |      Non       |      Oui      |      Non      |      Oui      |                 |
| Déchiffr.|               |               |                |               |               |               |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Synchrnz.| Prochain bloc | Après-prochain|      Non       |    1 unit     |      Non      |      Non      |                 |
|          |               |     bloc      |                |               |               |               |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Buffering| Pas nécessaire|      Non      |      Non       |      Non      |      Oui      |      Oui      |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
| Padding  |      Oui      |      Oui      |      Oui       |      Non      |      Non      |      Non      |                 |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+
|  Autre   |               |               |Avalanche effect|               | Chiffrement ==| Chiffrement ==| Message authent.|
|          |               |               |                |               | Déchiffrement | Déchiffrement | + intégrité     |
+----------+---------------+---------------+----------------+---------------+---------------+---------------+-----------------+

  - ECB (Electronic codebook) :
                        Key
                         |
                         v
         Plaintext --> Cipher --> Ciphertext
     - Problème : même plaintext == même ciphertext ; donc, relation entre les deux et patterns, exploitable pour déchiffrer, et aussi par les replay attacks
  - CBC (Cipher-block Chaining) :
                                    Key
                 ------------+       |    
                             |       v     
                 Plaintext --⊕--> Cipher -----> Ciphertext --->
      - Auparavant le plus utilisé
  - PCBC (Propagating Cipher-block Chaining) :
                                      Key
                 --------------+       |    
                               |       v     
                 Plaintext ----⊕--> Cipher -----> Ciphertext
                     |                                |
                     +--------------------------------⊕------>         
      - But : avalanche effect. Peu commun.
  - CFB (Cipher feedback) :
                                          Key
                                           |
                                           v
                            ----------> Cipher 
                                           |    
                            Plaintext -----⊕-----> Ciphertext --->
      - Utilisation : avec un PNRG pour l'IV et une taille d'input de 1, transformant donc le block cipher en
        self-synchronizing stream cipher => synchronization après une seule unit.
  - OFB (Output feedback): 
                                          Key
                                           |
                                           v
                            ----------> Cipher -------------->
                                           |     
                            Plaintext -----⊕-------> Ciphertext
      - Comme CFB, mais transforme cette fois en synchronous stream cipher
      - buffering : possibilité de calculer l'ensemble des Cipher avant l'obtention du Plaintext (chiffrement) ou Ciphertext
        (déchiffrement)
      - chiffrement et déchiffrement identiques
  - CTR (Counter) / [I]CM ([Integer] Counter Mode) / SIC (Segmented Integer Count)
                                          Key
                                           |
                                           v
                            Counter ---> Cipher
                                           |     
                            Plaintext -----⊕-------> Ciphertext
      - utiliser aussi avec taille d'input de 1 pour transformer en synchronous stream cipher. 
      - Un peu comme OFB, mais avec possibilité de paralléliser le chiffrement et déchiffrement
      - Counter : nonce + nombre d'une séquence ne devant pas se répeter (en général une simple incrémentation d'un compteur).
        peut utiliser un +, une concaténation ou un xor. nonce => pas de PRNG
      - buffering possible aussi
  - AEAD : cf MAC.txt

IV : cf crypto_key.txt

Padding scheme : cf crypto_padding.txt
