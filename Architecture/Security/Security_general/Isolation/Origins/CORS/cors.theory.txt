
                                  ┏━━━━━━━━━━┓
                                  ┃   CORS   ┃
                                  ┗━━━━━━━━━━┛

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

CORS ==>                          #Cross Origin Resource Sharing
                                  #Server requesting client to not enforce SOP for specific ORIGINs on specific resources

ORIGIN ==>                        #Relies on ORIGIN not being forgeable
Origin: ORIGIN ... [C]            #Cannot be forged in browsers
                                  #Always sent if not same origin
                                  #ORIGIN can be null (for privacy)

Access-Control-Allow-Origin:      #Request client not to enforce SOP
 ORIGIN [S]                       #Must match one of Origin [C]
                                  #Can be * but should avoid it

                                  ┌───────────────────────┐
                                  │   PREFLIGHT REQUEST   │
                                  └───────────────────────┘

PREFLIGHT REQUEST ==>             #Pre-request that ask for CORS info from server
                                  #Uses OPTIONS method + Origin [C]

SIMPLE REQUEST ==>                #Skipping preflight request. Only if all of:
                                  #  - GET|HEAD|POST
                                  #  - Content-Type [C] is 'application/x-www-urlencoded', 'multipart/form-data' or 'text/plain'
                                  #  - only HTTP headers: Accept, Accept-Language, Content-Language, Content-Type, Range, Last-Event-ID, Downlink, client hints
                                  #  - no RSTREAM is used

Access-Control-Request-* [C]      #Inform server about the upcoming request
Access-Control-Request-Method:
 METHOD [C]                       #
Access-Control-Request-Headers:
 HEADER,... [C]                   #

XHR|EVENTSOURCE[_OPTS]            #BOOL (def: false). Must be true if using one of:
 .withCredentials                 #  - Cookie [C]
                                  #  - [Proxy-]Authentication [C]
                                  #  - client-side SSL certificates
REQ[Q].credentials                #Same but value is:
                                  #  - 'omit': forbidden even if same-origin
                                  #  - 'same-origin' (def): allowed if same-origin
                                  #  - 'include': allowed
<script|link|img|audio|video      #Make CORS request. STR decides REQ.credentials:
 crossorigin[="STR"]>             #  - nothing|''|'anonymous': 'same-origin'
                                  #  - 'use-credentials': 'include'
                                  #By default, does not allow CORS requests

                                  ┌────────────────────────┐
                                  │   PREFLIGHT RESPONSE   │
                                  └────────────────────────┘

PREFLIGH RESPONSE ==>             #If success, 204
Access-Control-Allow-* [S]        #Inform client about all allowed request
Access-Control-Allow-Origin:
 ORIGIN [S]                       #
Vary: ORIGIN [S]                  #Should be set with same value, except if using *
Access-Control-Allow-Methods:
 METHOD,... [S]                   #Can use *
Access-Control-Allow-Headers:
 HEADER,... [S]                   #Can use *
Access-Control-Allow-Credentials:
 true [S]                         #Not allowed if Access-Control-Allow-Origin: *
Access-Control-Max-Age: NUM [S]   #How many seconds client should cache preflight response
                                  #Def: 5s
                                  #Max: 2h (Chrome), 24h (Firefox)
Access-Control-Expose-Headers:    #Which HEADER to show to end user in final response
 HEADER,... [S]                   #By default (and always shown), only show:
                                  #Content-Type, Cache-Control, Content-Language, Expires, Pragma, Last-Modified
                                  #Can use *

                                  ┌──────────┐
                                  │   CORP   │
                                  └──────────┘

REQ[Q].mode                       #With fetch(), whether to allow cross-origin:
                                  #  - 'cors' (def): allowed
                                  #  - 'no-cors':
                                  #     - allowed if simple (no preflight)
                                  #     - RES.type will be 'opaque'
                                  #  - 'navigate':
                                  #     - allowed if from user interaction (e.g. clicking on link)
                                  #     - cannot be set programmatically
                                  #     - RES.type will be 'basic'
                                  #  - 'same-origin': not allowed

Cross-Origin-Resource-Policy:     #CORP. Ask client to reject the response to this specific request:
 STR [S]                          #  - 'cross-origin' (def): never
                                  #  - 'same-origin': if request made from different ORIGIN
                                  #  - 'same-site': same but allow sharing same parent domain
                                  #Implementations: see helmet or @middy/http-security-headers doc

                                  ┌──────────┐
                                  │   COEP   │
                                  └──────────┘

Cross-Origin-Embedder-Policy:     #COEP. Ask client to reject requests made from the returned web page:
 STR [S]                          #  - 'unsafe-none' (def): never
                                  #  - 'require-corp': if they don't have either <... crossorigin> or Cross-Origin-Resource-Policy [S]
                                  #  - 'credentialless': same but also if REQ.mode 'no-cors' + REQ.withCredentials not 'include'
                                  #Implementations: see helmet or @middy/http-security-headers doc

<iframe credentialless>           #No access to network, cookies or storage from parent ORIGIN
                                  #Unless set, parent COEP applies to <iframe>

WINDOW|WORKERGLOBAL               #BOOL. True if both:
 .crossOriginIsolated             #  - Cross-Origin-Embedder-Policy: require-corp|credentialless [S]
                                  #  - Cross-Origin-Opener-Policy: same-origin[-allow-popups] [S]
                                  #If false, the following features are not available:
                                  #  - performance.now() better precision
                                  #     - in Chrome: 5us instead of 100us
                                  #  - performance.measureUserAgentSpecificMemory()
                                  #  - postMessage() with SharedArrayBuffer
