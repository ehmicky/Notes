
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   MIDDY-SECURITY-HEADERS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See Helmet

@middy/http-security-headers      #Version: part of Middy (see its doc)

SECURITY-HEADERS([OPTS])          #Sets security-related RES.headers
 ->MIDDY_MDWR                     #Uses normalizeHttpResponse() (see its doc)
                                  #Done in 'after|onError' STEP
OPTS.*                            #If false, do not set the specific header
                                  #Following headers are ignored unless Content-Type: text/html[;...] [S]:
                                  #  - xssProtection, contentSecurityPolicy, reportTo, crossOrigin*, permissionPolicy, frameOptions

OPTS.xssProtection                #XSS. X-XSS-Protection: 1; mode=block[; report=STR] [S] (see XSS doc)
XSS.reportTo                      #STR (def: 'xss')

OPTS.contentTypeOptions.action    #STR (def: 'nosniff'}). X-Content-Type-Options: STR [S] (see XSS doc)

OPTS.downloadOptions.action       #STR (def: 'noopen'}). X-Download-Options: STR [S] (see XSS doc)

OPTS.permittedCrossDomainPolicies
 .policy                          #STR (def: 'none'). X-Permitted-Cross-Domain-Policies: STR [S] (see XSS doc)

OPTS.contentSecurityPolicy        #{CSP_TYPE: 'TVAL',...}. Content-Security-Policy: CSP_TYPE TVAL;... [S] (see CSP doc)
                                  #Def is most restrictive possible:
                                  #  - default-src "'none'"
                                  #  - base-uri|frame-ancestors|form-action|navigate-to: "'none'"
                                  #  - upgrade-insecure-requests: ""
                                  #  - sandbox: ""
                                  #  - require-trusted-types-for: "'script'"
                                  #  - trusted-types: "'none'"
                                  #  - report-to: "csp"

OPTS.reportTo                     #REPORT_TO. Report-To: GREPORT,... [S] (see CSP doc)
                                  #One GREPORT per URL (def: none)
                                  #One URL must be 'default'
                                  #GREPORT.group always 'default'
REPORT_TO.URL                     #'URL'. GREPORT.endpoints[0].url
REPORT_TO.maxAge                  #NUM (in secs, def 1y). GREPORT.maxAge
REPORT_TO.includeSubdomains       #BOOL (def: true). Report-To: ..., "include_subdomains": BOOL [S]

OPTS
 .crossOriginResourcePolicy.policy#STR (def; 'same-origin'}). Cross-Origin-Resource-Policy: STR [S] (see CORS doc)

OPTS
 .crossOriginEmbedderPolicy.policy#STR (def: 'require-corp'). Cross-Origin-Embedder-Policy: STR [S] (see CORS doc)

OPTS
 .crossOriginOpenerPolicy.policy  #STR (def: 'same-origin'}). Cross-Origin-Opener-Policy: STR [S] (see Window opener doc)

OPTS.originAgentCluster           #Either undefined or {} (def). Origin-Agent-Cluster: ?1 [S] (see web process isolation doc)

OPTS.frameOptions.action          #STR (def: 'deny'). X-Frame-Options: STR [S] (see clickjacking doc)

OPTS.poweredBy.server             #STR. X-Powered-By: STR [S] (see sniffing doc)
                                  #If '' (def), delete X-Powered-By [S] and Server [S]

OPTS.permissionsPolicy            #{TYPE: '*'|STR,...}. Permissions-Policy: TYPE=*|(STR),... [S] (see web permissions doc)
                                  #Def: every possible TYPE (except 'unload'), STR always empty

OPTS.referrerPolicy.policy        #STR (def: 'no-referrer'}). Referrer-Policy: STR [S] (see referrer doc)

OPTS.dnsPrefetchControl.allow     #BOOL (def: false). X-DNS-Prefetch-Control: on|off [S] (see referrer doc)

OPTS.strictTransportSecurity      #STS. Strict-Transport-Security: max-age=NUM[; includeSubDomains][; preload] [S] (see HTTPS doc)
STS.maxAge                        #NUM (in secs, def: 6 months)
STS.includeSubDomains             #BOOL (def: true)
STS.preload                       #BOOL (def: true)
