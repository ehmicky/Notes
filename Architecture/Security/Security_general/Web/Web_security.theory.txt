
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   WEB SECURITY   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

                                  ┌───────────────────┐
                                  │   NORMALIZATION   │
                                  └───────────────────┘

NORMALIZATION ==>                 #When a VAL has multiple equivalent variants
                                  #This can lead to comparison logic to fail
                                  #This can also be used to confuse, e.g. for phishing
                                  #Examples:
                                  #  - transtyping
                                  #  - encoding, including charset
                                  #  - STR: case, Unicode normalization
                                  #  - NUM: radix, FLOAT representation, decimal digits, epsilon, i18n (e.g. separators)
                                  #  - OBJ: keys order
                                  #  - ARR: order
                                  #  - base64: padding, chars outside charset, newlines
                                  #  - paths: symlinks
                                  #  - path/URIs: . .., relative links, duplicate /
                                  #  - URIs: default parts, unused parts

                                  ┌────────────────────────┐
                                  │   SAME ORIGIN POLICY   │
                                  └────────────────────────┘

SOP ==>                           #Same Origin Policy
                                  #RFC 6454
                                  #Goal: preventing CSRF
                                  #Forbid an ORIGIN from reading|writing resources of another ORIGIN
                                  #ORIGIN is exact, including scheme, port, subdomains

about:blank
javascript:JAVASCRIPT             #Inherit current ORIGIN
data:JAVASCRIPT                   #Get a new ORIGIN

FORBIDDEN ==>                     #  - fetch(), XHR
                                  #  - programmatic DATATRANSFER (drag&drop, copy/cut/paste)
                                  #     - not browser default action for selection, links and images
                                  #  - IFRAME.contentDocument|contentWindow
                                  #     - unless <iframe sandbox="allow-same-origin"?
                                  #  - Canvas images, WebGL textures
                                  #  - Fonts

ALLOWED ==>                       #  - navigating, including:
                                  #     - <a|area|base href="URI">
                                  #     - LOCATION
                                  #     - HISTORY
                                  #     - WINDOW.open|alert()
                                  #  - safe MIME types, including:
                                  #     - <link href="URI">
                                  #     - <img|input|video|audio|source|iframe|object|embed src="URI">
                                  #     - <script src="URI">
                                  #     - any URI in CSS (except @font-face)
                                  #  - embedding, if cannot programmatically read|write resources
                                  #  - for historical reasons, but it is unsafe:
                                  #     - <form action="URI">
                                  #  - WebSocket
                                  #     - because protocol force checking Origin [C] server-side
                                  #  - file://
                                  #     - only if same DIR or ancestor to current ORIGIN
                                  #     - in Chrome: never allowed

PROBLEMS ==>                      #Allowed but still unsafe:
                                  #  - <form action="URI">
                                  #  - navigating to GET requests with side-effects

<script src="URL?callback=FUNC">  #JSONP (JSON with Padding)
                                  #Client creates globalThis.FUNC
                                  #Response is "FUNC(VAL)", i.e. executes globalThis.FUNC
                                  #I.e. bypassed SOP to pass VAL
                                  #Client should validate that response returns FUNC(OBJ) and not arbitrary JavaScript
                                  #Old alternative to CORS: prefer CORS

postMessage()                     #Bypasses SOP for communication between IFRAMEs
                                  #However, IFRAMEs must check MESSAGEEVENT.origin to prevent CSRF

chrome --disable-web-security
 --user-data-dir                  #Bypasses SOP, for development

                                  ┌──────────┐
                                  │   CORS   │
                                  └──────────┘

CORS ==>                          #Cross Origin Resource Sharing
                                  #Server requesting client to not enforce SOP for specific ORIGINs on specific resources

ORIGIN ==>                        #Relies on ORIGIN not being forgeable
Origin: ORIGIN ... [C]            #Cannot be forged in browsers
                                  #Always sent if not same origin
                                  #ORIGIN can be null (for privacy)

Access-Control-Allow-Origin:      #Request client not to enforce SOP
 ORIGIN [S]                       #Must match one of Origin [C]
                                  #Can be * but should avoid it

PREFLIGHT REQUEST ==>             #Pre-request that ask for CORS info from server
                                  #Uses OPTIONS method + Origin [C]
SIMPLE REQUEST ==>                #Skipping preflight request. Only if all of:
                                  #  - GET|HEAD|POST
                                  #  - Content-Type [C] is 'application/x-www-urlencoded', 'multipart/form-data' or 'text/plain'
                                  #  - only HTTP headers: Accept, Accept-Language, Content-Language, Content-Type, Range, Last-Event-ID, Downlink, client hints
                                  #  - no RSTREAM is used

Access-Control-Request-* [C]      #Inform server about the upcoming request
Access-Control-Request-Method:
 METHOD [C]                       #
Access-Control-Request-Headers:
 HEADER,... [C]                   #

XHR|EVENTSOURCE[_OPTS]            #BOOL (def: false). Must be true if using one of:
 .withCredentials                 #  - Cookie [C]
                                  #  - [Proxy-]Authentication [C]
                                  #  - client-side SSL certificates
REQ[Q].credentials                #Same but value is:
                                  #  - 'omit': forbidden even if same-origin
                                  #  - 'same-origin' (def): allowed if same-origin
                                  #  - 'include': allowed
<script|link|img|audio|video      #Make CORS request. STR decides REQ.credentials:
 crossorigin[="STR"]>             #  - nothing|''|'anonymous': 'same-origin'
                                  #  - 'use-credentials': 'include'
                                  #By default, does not allow CORS requests

PREFLIGH RESPONSE ==>             #If success, 204
Access-Control-Allow-* [S]        #Inform client about all allowed request
Access-Control-Allow-Origin:
 ORIGIN [S]                       #
Vary: ORIGIN [S]                  #Should be set with same value, except if using *
Access-Control-Allow-Methods:
 METHOD,... [S]                   #Can use *
Access-Control-Allow-Headers:
 HEADER,... [S]                   #Can use *
Access-Control-Allow-Credentials:
 true [S]                         #Not allowed if Access-Control-Allow-Origin: *
Access-Control-Max-Age: NUM [S]   #How many seconds client should cache preflight response
                                  #Def: 5s
                                  #Max: 2h (Chrome), 24h (Firefox)
Access-Control-Expose-Headers:    #Which HEADER to show to end user in final response
 HEADER,... [S]                   #By default (and always shown), only show:
                                  #Content-Type, Cache-Control, Content-Language, Expires, Pragma, Last-Modified
                                  #Can use *

                                  ┌──────────┐
                                  │   CORP   │
                                  └──────────┘

REQ[Q].mode                       #With fetch(), whether to allow cross-origin:
                                  #  - 'cors' (def): allowed
                                  #  - 'no-cors':
                                  #     - allowed if simple (no preflight)
                                  #     - RES.type will be 'opaque'
                                  #  - 'navigate':
                                  #     - allowed if from user interaction (e.g. clicking on link)
                                  #     - cannot be set programmatically
                                  #     - RES.type will be 'basic'
                                  #  - 'same-origin': not allowed

Cross-Origin-Resource-Policy:     #CORP. Ask client to reject the response to this specific request:
 STR [S]                          #  - 'cross-origin' (def): never
                                  #  - 'same-origin': if request made from different ORIGIN
                                  #  - 'same-site': same but allow sharing same parent domain

                                  ┌──────────┐
                                  │   COEP   │
                                  └──────────┘

Cross-Origin-Embedder-Policy:     #COEP. Ask client to reject requests made from the returned web page:
 STR [S]                          #  - 'unsafe-none' (def): never
                                  #  - 'require-corp': if they don't have either <... crossorigin> or Cross-Origin-Resource-Policy [S]
                                  #  - 'credentialless': same but also if REQ.mode 'no-cors' + REQ.withCredentials not 'include'

<iframe credentialless>           #No access to network, cookies or storage from parent ORIGIN
                                  #Unless set, parent COEP applies to <iframe>

WINDOW|WORKERGLOBAL               #BOOL. True if both:
 .crossOriginIsolated             #  - Cross-Origin-Embedder-Policy: require-corp|credentialless [S]
                                  #  - Cross-Origin-Opener-Policy: same-origin[-allow-popups] [S]
                                  #If false, the following features are not available:
                                  #  - performance.now() better precision
                                  #     - in Chrome: 5us instead of 100us
                                  #  - performance.measureUserAgentSpecificMemory()
                                  #  - postMessage() with SharedArrayBuffer

                                  ┌────────────┐
                                  │   OPENER   │
                                  └────────────┘

WINDOW.opener                     #Is set when browsing with WINDOW2.open() or <a|area|form>
                                  #This is unsafe as it allows manipulating WINDOW cross-domain

<a|area|form rel="[no]opener">    #Make WINDOW.opener null in new page
                                  #Def 'noopener' if target="_blank", 'opener' else
WINDOW.open(..., 'noopener')      #Same in DOM

Cross-Origin-Opener-Policy:       #COOP. Ask client to make WINDOW.opener null in new pages
 STR [S]                          #  - 'unsafe-none' (def): if target="_blank"
                                  #  - 'same-origin-allow-popups': unless popup
                                  #  - 'same-origin': always

                                  ┌───────────────────────┐
                                  │   PROCESS ISOLATION   │
                                  └───────────────────────┘

WINDOW|GLOBALSCOPE.isSecureContext#Whether uses https:|wss:, or is localhost or local file
                                  #Includes parent documents

Origin-Agent-Cluster: ?1 [S]      #Do not run <iframe> in same OS process, unless same ORIGIN
                                  #This prevents security issues with:
                                  #  - shared memory
                                  #  - CPU attack, i.e. high computation to block parent document
                                  #If set, cannot:
                                  #  - set DOCUMENT.domain
                                  #  - postMessage() + SharedArrayBuffer or WebAssembly.Module
                                  #  - use WebAssembly.Memory
                                  #Requires WINDOW.isSecureContext true
WINDOW|GLOBALSCOPE
 .originAgentCluster              #BOOL. Whether Origin-Agent-Cluster [S] used

                                  ┌──────────────────┐
                                  │   CLICKJACKING   │
                                  └──────────────────┘

CLICKJACKING ==>                  #CSRF using an <iframe|frame|object|embed> with different ORIGIN
                                  #and make users click in it, believe it to be same ORIGIN
                                  #Also called UI redressing

CSP ==>                           #'frame-ancestors' (see its doc) prevents clickjacking

X-Frame-Options: VAL [S]          #Prevents clickjacking
                                  #Ask client to allow putting response in an <iframe|frame|object|embed>:
                                  #  - DENY: never
                                  #  - SAMEORIGIN: only if parent has same origin
                                  #  - ALLOW-FROM DOMAIN: only if top-level from DOMAIN (ignored by most browsers)
                                  #RFC 7034
                                  #Deprecated: prefer CSP 'frame-ancestors'

WINDOW.top === WINDOW             #Can be used for confirmation to prevent clickjacking
WINDOW.confirm()                  #Same, since popup cannot be framed

                                  ┌─────────┐
                                  │   URI   │
                                  └─────────┘

TRUST ==>                         #URI locates a resource, but it does not guarantee its security
                                  #E.g. URI's ownership can change

CONFIDENTALITY ==>                #URI can be logged, i.e. should not contain confidential information

HIDING ==>                        #Private URI can be guessed, i.e. should:
                                  #  - use random IDs in URI
                                  #  - not rely on URI remaining private

SPOOFING ==>                      #Making URI look like another
                                  #E.g. making USERINFO look like HOSTNAME|PATH

TYPOSQUATTING ==>                 #URI spoofing relying on typos, similar words (e.g. plural), different TLD, similar Unicode chars, etc.
                                  #Also called URL hijacking
                                  #Possible goals: selling URL, redirecting to competitor, phishing, getting traffic

URL SQUATTING ==>                 #Registering URL (including domain name) before legitimate owner
                                  #Similar goals as typosquatting

URI TEMPLATE INJECTION ==>        #XSS with an URI

OPEN REDIRECT ==>                 #Allowing user-defined redirect URL inside another URL
                                  #Goal: injecting that URL to redirect to phishing site

<script|link                      #SubResource Integrity (SRI). If content checksum does not match HASH, discard it with a network error.
 integrity="ALGO-HASH ...">       #Only useful if current document is trusted, i.e. only useful on third-party content (e.g. CDN)
                                  #ALGO: sha256|384|512. HASH uses standard base64.
                                  #File cannot be served from filesystem (file:)
                                  #For <link>, only with rel="stylesheet|[module]preload"

                                  ┌──────────────┐
                                  │   SNIFFING   │
                                  └──────────────┘

SNIFFING ==>                      #Guessing server technology, in case there is a known exploit on it

X-Powered-By: STR [S]
Server: STR [S]                   #Bad practice since it enables sniffing

                                  ┌─────────────────┐
                                  │   PERMISSIONS   │
                                  └─────────────────┘

Permissions-Policy:
 WEB_FEATURE=(WHERE ...) ... [S]  #Restrict specific WEB_FEATUREs for specific ORIGINs

WEB_FEATURE                       #Specific web capability
                                  #Not documented yet
                                  #Examples: microphone, payment, etc.

WHERE                             #Default:
                                  #  - 'self' for most WEB_FEATUREs
                                  #  - '*' for a few WEB_FEATUREs: attribution-reporting, browsing-topics, document-domain, storage-access
no WHERE                          #No ORIGIN, i.e. WEB_FEATURE=()
WHERE *                           #Any ORIGIN, i.e. WEB_FEATURE=*
WHERE self                        #Current ORIGIN
WHERE src                         #<iframe> with a same ORIGIN as its parent
WHERE "ORIGIN"                    #Specific ORIGIN
                                  #Can include *

<iframe allow=                    #Same for an <iframe>
 "WEB_FEATURE WHERE ...; ...">    #WHERE:
                                  #  - no WHERE -> 'none'
                                  #  - self|src -> 'self|src'
                                  #Def: 'src'

                                  ┌─────────────┐
                                  │   CACHING   │
                                  └─────────────┘

CACHE ATTACK ==>                  #Accessing cached confidential information
                                  #I.e. bypass authentication due to caching
                                  #Prevention:
                                  #  - do not cache
                                  #     - including for HTML autocomplete (see its doc)
                                  #  - cache for shorter time

CACHE POISONING ==>               #Setting malicious cache value, so that other clients that share the same cache use it

                                  ┌──────────────┐
                                  │   TRACKING   │
                                  └──────────────┘

TRACKING ==>                      #Gives personal information without consent
                                  #Akin to forced negotiation (i.e. weakens one side of the negotation)

SANCTIONING ==>                   #Whether tracking is user controlled, easy to detect, and based on standards
                                  #As opposed to fingerprinting, supercookies, etc.
                                  #Standard: W3C TAG "Unsanctioned tracking"

                                  ┌───────────────────┐
                                  │   REFERRER MAIN   │
                                  └───────────────────┘

Referer: URI [C]                  #Current URI
                                  #Can be absolute|relative
                                  #Can have /PATH and ?QUERY. Does not have USERINFO nor #HASH
Referer: about:blank [C]          #No current URI

DOCUMENT.referrer                 #Returns Referer [C] (or '')

PRIVACY ==>                       #Can deduce identity from current URI
                                  #Also, can be used for fingerprinting

RELIABILITY ==>                   #Checking Referer [C] is not secure (e.g. against CSRF) because:
                                  #  - can be forged
                                  #  - absent in private browsing mode

                                  ┌─────────────────────┐
                                  │   REFERRER POLICY   │
                                  └─────────────────────┘

Referrer-Policy: VAL [S]          #Ask client to set Referer [C] in specific ways:
                                  #  - no-referrer: not set
                                  #  - same-origin: not set if cross-origin, else full URI
                                  #  - origin-when-cross-origin; ORIGIN if cross-origin, else full URI
                                  #  - origin: only ORIGIN
                                  #  - unsafe-url: full URI
                                  #  - strict-origin[-when-cross-origin], no-referred-when-downgrade (def):
                                  #    like origin[-when-cross-origin] and unsafe-url, except not set
                                  #    if downgrading protocol from HTTPS to HTTP
<meta name="referrer"
 content="VAL">
<a|area|link|iframe|img|script
 referrerpolicy="VAL">            #Same in HTML
REQ[Q].referrerPolicy             #Same with fetch()

REQ[Q].referrer                   #With fetch(), Referer [C]:
                                  #  - '': not set
                                  #  - 'URL': specific URL
                                  #  - 'about:client' (def): current 'URL', or nothing depending on settings
Link: noreferrer [S]
<a|area|link rel="noreferrer">    #Same in HTML
WINDOW.open(..., 'noreferrer')    #Same in DOM

                                  ┌─────────────────────┐
                                  │   DNS PREFETCHING   │
                                  └─────────────────────┘

X-DNS-Prefetch-Control: on|off [S]#Enable|disable DNS prefetching
                                  #I.e. performing DNS resolution early before knowing whether user will navigate
                                  #Faster
                                  #However, not good for privacy, since this can be used by destination sites to know
                                  #user viewed links, even if did not navigate
                                  #Def: 'on'

                                  ┌────────────────────┐
                                  │   FINGERPRINTING   │
                                  └────────────────────┘

FINGERPRINTING ==>                #Creating a device|machine ID using its capabilities instead of usual state mechanisms (e.g. cookies)

DIVERSITY ==>                     #Number of possible state combinations used in ID
                                  #  - measured in bits of entropy
                                  #  - i.e. how much it distinguish one machine from another
                                  #Also, whether possible state combinations are evenly distributed

STABILITY ==>                     #Whether ID does not change over time
                                  #Inversely corrolated to diversity
                                  #  - however, if only some of the combinations change, can identity previous ID and update it
                                  #    instead of creating a new one

PASSIVE ==>                       #Capability that is read-only, i.e. cannot be changed by users
                                  #As opposed to active

PROTECTION ==>                    #For each capability, either:
                                  #  - do not send
                                  #  - randomize

LIST OF CAPABILITIES ==>          #Browser:
                                  #  - active extensions, e.g. AdBlock
                                  #HTTP:
                                  #  - User-Agent [C]
                                  #  - Accept* [C]
                                  #  - Connection [C]
                                  #  - DNT [C]
                                  #  - Enrichment (headers added by network proxies)
                                  #JavaScript:
                                  #  - DATE.getTimezoneOffset()
                                  #  - supported features
                                  #DOM:
                                  #  - CANVAS: draw 2D|3D to see variations due to different GPU
                                  #  - NAVIGATOR: plugins, platform, cookieEnabled
                                  #  - SCREEN: height, width, colorDepth
                                  #  - supported features, e.g. localStorage|sessionStorage
                                  #NTP:
                                  #  - clock skew: small sync difference (in ms)
                                  #TCP/IP:
                                  #  - configuration
                                  #     - initial packet size, initial TTL, window size, max segment size,
                                  #       window scaling value, flags (don't fragment, sackOK, nop)
                                  #     - 67 bits of entropy
                                  #     - eases OS fingerprinting
                                  #IEEE 802.11 (wireless)
                                  #OS
                                  #MAC address
                                  #Machine serial number

                                  ┌────────────┐
                                  │   OTHERS   │
                                  └────────────┘

XSS ==>                           #See XSS doc
CSP ==>                           #See CSP doc
CSRF ==>                          #See CSRF doc
HTTPS ==>                         #See HTTPS doc
COOKIES ==>                       #See cookies doc
