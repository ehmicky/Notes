
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   WEB SECURITY   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

                                  ┌───────────────────┐
                                  │   NORMALIZATION   │
                                  └───────────────────┘

NORMALIZATION ==>                 #When a VAL has multiple equivalent variants
                                  #This can lead to comparison logic to fail
                                  #This can also be used to confuse, e.g. for phishing
                                  #Examples:
                                  #  - transtyping
                                  #  - encoding, including charset
                                  #  - STR: case, Unicode normalization
                                  #  - NUM: radix, FLOAT representation, decimal digits, epsilon, i18n (e.g. separators)
                                  #  - OBJ: keys order
                                  #  - ARR: order
                                  #  - base64: padding, chars outside charset, newlines
                                  #  - paths: symlinks
                                  #  - path/URIs: . .., relative links, duplicate /
                                  #  - URIs: default parts, unused parts

                                  ┌──────────────────┐
                                  │   CLICKJACKING   │
                                  └──────────────────┘

CLICKJACKING ==>                  #CSRF using an <iframe|frame|object|embed> with different ORIGIN
                                  #and make users click in it, believe it to be same ORIGIN
                                  #Also called UI redressing

CSP ==>                           #'frame-ancestors' (see its doc) prevents clickjacking

X-Frame-Options: VAL [S]          #Prevents clickjacking
                                  #Ask client to allow putting response in an <iframe|frame|object|embed>:
                                  #  - DENY: never
                                  #  - SAMEORIGIN: only if parent has same origin
                                  #  - ALLOW-FROM DOMAIN: only if top-level from DOMAIN (ignored by most browsers)
                                  #RFC 7034
                                  #Deprecated: prefer CSP 'frame-ancestors'

WINDOW.top === WINDOW             #Can be used for confirmation to prevent clickjacking
WINDOW.confirm()                  #Same, since popup cannot be framed

                                  ┌─────────────────┐
                                  │   PERMISSIONS   │
                                  └─────────────────┘

Permissions-Policy:
 WEB_FEATURE=(WHERE ...) ... [S]  #Restrict specific WEB_FEATUREs for specific ORIGINs

WEB_FEATURE                       #Specific web capability
                                  #Not documented yet
                                  #Examples: microphone, payment, etc.

WHERE                             #Default:
                                  #  - 'self' for most WEB_FEATUREs
                                  #  - '*' for a few WEB_FEATUREs: attribution-reporting, browsing-topics, document-domain, storage-access
no WHERE                          #No ORIGIN, i.e. WEB_FEATURE=()
WHERE *                           #Any ORIGIN, i.e. WEB_FEATURE=*
WHERE self                        #Current ORIGIN
WHERE src                         #<iframe> with a same ORIGIN as its parent
WHERE "ORIGIN"                    #Specific ORIGIN
                                  #Can include *

<iframe allow=                    #Same for an <iframe>
 "WEB_FEATURE WHERE ...; ...">    #WHERE:
                                  #  - no WHERE -> 'none'
                                  #  - self|src -> 'self|src'
                                  #Def: 'src'

                                  ┌────────────┐
                                  │   OTHERS   │
                                  └────────────┘

HTTPS ==>                         #See HTTPS doc
COOKIES ==>                       #See cookies doc
XSS ==>                           #See XSS doc
CSP ==>                           #See CSP doc
CSRF ==>                          #See CSRF doc
SAME ORIGIN POLICY ==>            #See same origin policy doc
CORS/CORP/COEP ==>                #See CORS doc
WINDOW.OPENER AND COOP ==>        #See opener doc
PROCESS ISOLATION ==>             #See web process isolation doc
CACHE ATTACK ==>                  #See caching doc
URI ==>                           #See URI doc, security section
SNIFFING ==>                      #See sniffing doc
REFERRER ==>                      #See referrer doc
DNS PREFETCHING ==>               #See referrer doc
FINGERPRINTING ==>                #See fingerprinting doc
