
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   WEB SECURITY   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

                                  ┌───────────────────┐
                                  │   NORMALIZATION   │
                                  └───────────────────┘

NORMALIZATION ==>                 #When a VAL has multiple equivalent variants
                                  #This can lead to comparison logic to fail
                                  #This can also be used to confuse, e.g. for phishing
                                  #Examples:
                                  #  - transtyping
                                  #  - encoding, including charset
                                  #  - STR: case, Unicode normalization
                                  #  - NUM: radix, FLOAT representation, decimal digits, epsilon, i18n (e.g. separators)
                                  #  - OBJ: keys order
                                  #  - ARR: order
                                  #  - base64: padding, chars outside charset, newlines
                                  #  - paths: symlinks
                                  #  - path/URIs: . .., relative links, duplicate /
                                  #  - URIs: default parts, unused parts

                                  ┌───────────────┐
                                  │   INJECTION   │
                                  └───────────────┘

INJECTION ==>                     #Injecting malicious input, due to wrong assumption about input:
                                  #  - constraints: length, value, characters used, type, etc.
                                  #  - client is legitimate
                                  #  - client can't modify input
                                  #Prevention:
                                  #  - validating input
                                  #  - validating origin of input (user, domain, etc.)
                                  #  - escaping|sanitizing input

CODE INJECTION ==>                #Injecting code where data is expected

SQL|PHP|ASP|SHELL INJECTION ==>   #For those specific programming langues

BUFFER OVERFLOW ==>               #Input exceeds min|max length|value
                                  #Prevented by bound checking

                                  ┌─────────┐
                                  │   XSS   │
                                  └─────────┘

XSS ==>                           #Cross-site scripting
                                  #Injection in a web page, so it executes within that context
                                  #E.g. to circumvent SOP, since it executes within same ORIGIN

PERSISTENT XSS ==>                #XSS persisted server-side
                                  #Also called active|stored
                                  #As opposed to not persistent or passive|reflected XSS, which is client-side only

HTML INJECTION ==>                #XSS with HTML
                                  #E.g. in an HTML comment

JAVASCRIPT INJECTION ==>          #XSS with JavaScript
                                  #E.g. eval(), setTimeout(STR), new Function(STR)

X-XSS-Protection: 1               #Ignore <script> and <style> without src
                                  #Deprecated and not supported by browsers anymore
                                  #Prefer CSP
 [; mode=block]                   #Do not process whole page instead
 [; report=URI] [S]               #Like report-uri with CSP

                                  ┌───────────────────┐
                                  │   MIME SNIFFING   │
                                  └───────────────────┘

MIME SNIFFING ==>                 #When Content-Type [S] absent, invalid or not supported
                                  #Then some clients guess it based on contents or file extension
                                  #Also called contents sniffing
                                  #Not secure since allows circumventing MIME-based logic
                                  #  - e.g. showing user-uploaded .jpg files, but one actually contains JavaScript

X-Content-Type-Options:           #Ask client to forbid:
 nosniff [S]                      #  - <script> with a non-JavaScript MIME
                                  #  - <style> with a non-CSS MIME
                                  #Prevents MIME sniffing

X-Download-Options: noopen [S]    #When using Content-Disposition [S]
                                  #  - confirmation box allows saving, but not "open"
                                  #  - if displayed, run under a different ORIGIN, to prevent circumventing SOP
                                  #Otherwise, if content is user-generated, could inject executable code
                                  #Only for IE

                                  ┌──────────────────────┐
                                  │   HEADER INJECTION   │
                                  └──────────────────────┘

HEADER INJECTION ==>              #Code injection in HTTP headers, when their value is user-defined
                                  #E.g. set Location [C] or Set-Cookie [C]

HEADER RESPONSE SPLITTING ==>     #Header injection that inserts either:
                                  #  - \r\n: to terminate this header and inject a header
                                  #  - \r\n\r\n: to terminate all headers and inject start of body
                                  #Prevention: URL encoding user-defined HTTP header value

                                  ┌─────────────────────────────┐
                                  │   CONTENT SECURITY POLICY   │
                                  └─────────────────────────────┘

Content-Security-Policy:          #CSP. Ask client to restrict links to other ORIGINs
 TYPE TVAL ... [;...] [S]         #Goal: prevent injection from user-defined contents
                                  #Must specify each TYPE only once
                                  #'self|none|unsafe-inline|eval' is single quoted
                                  #TYPE and other TVALs not quoted
<meta http-equiv
 ="Content-Security-Policy"
 content="...">                   #Same, but as HTML tag

TYPE default-src                  #Default for other TYPEs (def: '*')

TYPE script-src                   #JavaScript: <script>, inline event handlers, XSLT
TYPE script-src-elem              #<script>
TYPE script-src-attr              #Inline event handler, XSLT
TYPE style-src                    #<style>, <link rel="stylesheet">, <... style="...">
TYPE style-src-elem               #<style>, <link rel="stylesheet">
TYPE style-src-attr               #<... style="...">
TYPE connect-src                  #Programmatic HTTP requests: fetch(), XHR.open(), WebSocket(), EventSource(),
                                  #NAVIGATOR.sendBeacon(), <a ping>
TYPE font-src                     #@font-face
TYPE frame-src                    #<iframe|frame>
TYPE frame-ancestors              #<iframe|frame> parents
                                  #TVAL must be URI|'self'|'none'
TYPE child-src                    #<iframe|frame> and WORKERs
TYPE fenced-frame-src             #<fencedframe>
                                  #TVAL must be URI
TYPE img-src                      #<img>
TYPE media-src                    #<audio>, <video>, <source>, <track>
TYPE object-src                   #<object>, <embed>
TYPE manifest-src                 #<link rel="manifest">
TYPE base-uri                     #???
                                  #TVAL must be URI|'self'|'none'
TYPE form-action                  #???
                                  #TVAL must be URI|'self'|'none'

TVAL URI                          #Allows '[PROTOCOL:][HOSTNAME[:PORT][/PATH]]'
                                  #PROTOCOL:
                                  #  - def: current one
                                  #  - http: matches http[s]:
                                  #  - ws: matches ws[s]:
                                  #Can use * in:
                                  #  - HOSTNAME, at beginning, and followed by . or /
                                  #  - PORT
                                  #PATH matches PATH[/...]
TVAL 'self'                       #Allows if same PROTOCOL|HOSTNAME|PORT
TVAL 'none'                       #Forbidden
TVAL 'unsafe-eval'                #Allows WASM, eval() and the likes (new Function(STR), etc.)
TVAL 'wasm-unsafe-eval'           #Allows WASM
TVAL 'unsafe-inline'              #Allows <script> and <style> without src, and the likes (javascript:URI, inline event handlers, etc.)
TVAL 'unsafe-hashes'              #Allows <script> without src
TVAL 'nonce-ID'                   #Allows <script> without src but with <script nonce="ID">
                                  #ID should be random and unique for each response
TVAL 'ALGO-HASH'                  #Allows <script> with|without src only if <script integrity="ALGO-HASH"> and contents hash same as HASH
                                  #ALGO is sha256|384|512
                                  #HASH is in base64
TVAL 'strict-dynamic'             #Scripts loaded by page inherit nonce-ID and ALGO-HASH
                                  #However they do not inherit other TVALs
TVAL 'inline-speculation-rules'   #Allows <script type="speculationrules">

Content-Security-Policy: ...
 ;sandbox [S]                     #Gives same restrictions as in a <iframe sandbox>
<iframe sandbox[="allow-STR ..."]>#Restrictions;
                                  #  - no plugins
                                  #  - no <script> (allow-scripts)
                                  #  - no <form> submit (allow-forms)
                                  #  - same origin policy (allow-same-origin)
                                  #     - also block document.cookie and localStorage
                                  #  - no popups
                                  #  - can't go up to container DOCUMENT
                                  #  - no <object> or similar
                                  #  - no seamless attribute
                                  #  - no autoplay attribute, autofocus, etc.

Content-Security-Policy: ...
 ;report-uri URL [S]              #Calls POST URL when client detects attempts to circumvent CSP
Content-Type:
 application/csp-report [S]       #
CSP_REPORT                        #JSON body
CSP_REPORT.document-uri           #'URL' of ORIGIN
CSP_REPORT.blocked-uri            #'URL' being accessed
CSP_REPORT.referrer               #'URL' of Referer [C]
CSP_REPORT.violated-directive     #'TYPE ...'
CSP_REPORT.original-policy        #STR. Full Content-Security-Policy [C]
CSP_REPORT.status-code            #STATUS_NUM
TVAL 'report-sample'              #???

Content-Security-Policy           #Same as Content-Security-Policy [S] but do not restrict
 -Report-Only: ... [S]            #Only sends reports via report-uri
                                  #Meant for debugging

                                  ┌──────────┐
                                  │   CSRF   │
                                  └──────────┘

CSRF ==>                          #Cross-Site Request Forgery
                                  #Also called XSRF
                                  #An ORIGIN performs command on another ORIGIN, using its cached confidential data (e.g.  cookies)
                                  #Preventions:
                                  #  - SOP
                                  #  - not keeping confidential data client-side
                                  #     - e.g. never caching login credentials
                                  #  - CSRF token
                                  #  - SameSite cookies (see its doc)

LOGIN CSRF ==>                    #CSRF accessing authentication data

CSRF URL ==>                      #CSRF with a GET request, i.e. can be triggered from clicking a URL
                                  #Prevention: no side-effects with GET

CSRF TOKEN ==>                    #Nonce sent by server to client to authenticate next request[s]
                                  #Also called synchronizer|challenge token
                                  #This reduces CSRF risk since attacker must know CSRF token too
X-CSRF-Token: STR [S]
X-XSRF-Token: STR [S]             #Common name for CSRF token

                                  ┌────────────────────────┐
                                  │   SAME ORIGIN POLICY   │
                                  └────────────────────────┘

SOP ==>                           #Same Origin Policy
                                  #RFC 6454
                                  #Goal: preventing CSRF
                                  #Forbid an ORIGIN from reading|writing resources of another ORIGIN
                                  #ORIGIN is exact, including subdomains

FORBIDDEN ==>                     #  - XHR / fetch()
                                  #  - programmatic DATATRANSFER (drag&drop, copy/cut/paste)
                                  #     - not browser default action for selection, links and images
                                  #  - IFRAME.contentDocument|contentWindow
                                  #     - unless <iframe sandbox="allow-same-origin"?
                                  #  - Canvas images, WebGL textures
                                  #  - Fonts

ALLOWED ==>                       #  - navigating, including:
                                  #     - <a|area|base href="URI">
                                  #     - LOCATION
                                  #     - HISTORY
                                  #     - WINDOW.open|alert()
                                  #  - safe MIME types, including:
                                  #     - <link href="URI">
                                  #     - <img|input|video|audio|source|iframe src="URI">
                                  #     - <script src="URI">
                                  #     - any URI in CSS (except @font-face)
                                  #  - embedding, if cannot programmatically read|write resources
                                  #  - for historical reasons, but it is unsafe:
                                  #     - <form action="URI">
                                  #  - WebSocket
                                  #     - because protocol force checking Origin [C] server-side
                                  #  - file://
                                  #     - only if same DIR or ancestor to current ORIGIN
                                  #     - in Chrome: never allowed

PROBLEMS ==>                      #Allowed but still unsafe:
                                  #  - <form action="URI">
                                  #  - navigating to GET requests with side-effects

<script src="URL?callback=FUNC">  #JSONP (JSON with Padding)
                                  #Client creates globalThis.FUNC
                                  #Response is "FUNC(VAL)", i.e. executes globalThis.FUNC
                                  #I.e. bypassed SOP to pass VAL
                                  #Client should validate that response returns FUNC(OBJ) and not arbitrary JavaScript
                                  #Old alternative to CORS: prefer CORS

postMessage()                     #Bypasses SOP for communication between IFRAMEs
                                  #However, IFRAMEs must check MESSAGEEVENT.origin to prevent CSRF

chrome --disable-web-security
 --user-data-dir                  #Bypasses SOP, for development

                                  ┌──────────┐
                                  │   CORS   │
                                  └──────────┘

CORS ==>                          #Cross Origin Resource Sharing
                                  #Server requesting client to not enforce SOP for specific ORIGINs on specific resources

ORIGIN ==>                        #Relies on ORIGIN not being forgeable
Origin: ORIGIN ... [C]            #Cannot be forged in browsers
                                  #Always sent if not same origin

Access-Control-Allow-Origin:      #Request client not to enforce SOP
 ORIGIN [S]                       #Must match one of Origin [C]
                                  #Can be * but should avoid it

PREFLIGHT REQUEST ==>             #Pre-request that ask for CORS info from server
                                  #Uses OPTIONS method + Origin [C]
                                  #Can be skipped if all of:
                                  #  - GET|HEAD|POST
                                  #  - Content-Type [C] is 'application/x-www-urlencoded', 'multipart/form-data' or 'text/plain'
                                  #  - only HTTP headers: Accept, Accept-Language, Content-Language, Content-Type, Last-Event-ID, Downlink, client hints
Access-Control-Request-* [C]      #Inform server about the upcoming request
Access-Control-Request-Method:
 METHOD [C]                       #
Access-Control-Request-Headers:
 HEADER,... [C]                   #
REQ[Q].credentials
XHR.withCredentials               #Must be true if using Cookie [C], [Proxy-]Authentication [C] or client-side SSL certificates

PREFLIGH RESPONSE ==>             #If success, 204
Access-Control-Allow-* [S]        #Inform client about all allowed request
Access-Control-Allow-Origin:
 ORIGIN [S]                       #
Access-Control-Allow-Methods:
 METHOD,... [S]                   #
Access-Control-Allow-Headers:
 HEADER,... [S]                   #
Access-Control-Allow-Credentials:
 true [S]                         #Not allowed if Access-Control-Allow-Origin: *
Access-Control-Max-Age: NUM [S]   #How many seconds client should cache preflight response
Access-Control-Expose-Headers:    #Which HEADER to show to end user in final response
 HEADER,... [S]                   #By default (and always shown), only show:
                                  #Content-Type, Cache-Control, Content-Language, Expires, Pragma, Last-Modified

                                  ┌──────────────────┐
                                  │   CLICKJACKING   │
                                  └──────────────────┘

CLICKJACKING ==>                  #CSRF using an <iframe|frame|object|embed> with different ORIGIN
                                  #and make users click in it, believe it to be same ORIGIN
                                  #Also called UI redressing

CSP ==>                           #'frame-ancestors' (see its doc) prevents clickjacking

X-Frame-Options: VAL [S]          #Prevents clickjacking
                                  #Ask client to allow putting response in an <iframe|frame|object|embed>:
                                  #  - DENY: never
                                  #  - SAMEORIGIN: only if parent has same origin
                                  #  - ALLOW-FROM DOMAIN: only if top-level from DOMAIN (ignored by most browsers)
                                  #RFC 7034
                                  #Deprecated: prefer CSP 'frame-ancestors'

WINDOW.top === WINDOW             #Can be used for confirmation to prevent clickjacking
WINDOW.confirm()                  #Same, since popup cannot be framed

                                  ┌─────────┐
                                  │   URI   │
                                  └─────────┘

TRUST ==>                         #URI locates a resource, but it does not guarantee its security
                                  #E.g. URI's ownership can change

CONFIDENTALITY ==>                #URI can be logged, i.e. should not contain confidential information

HIDING ==>                        #Private URI can be guessed, i.e. should:
                                  #  - use random IDs in URI
                                  #  - not rely on URI remaining private

SPOOFING ==>                      #Making URI look like another
                                  #E.g. making USERINFO look like HOSTNAME|PATH

TYPOSQUATTING ==>                 #URI spoofing relying on typos, similar words (e.g. plural), different TLD, similar Unicode chars, etc.
                                  #Also called URL hijacking
                                  #Possible goals: selling URL, redirecting to competitor, phishing, getting traffic

URL SQUATTING ==>                 #Registering URL (including domain name) before legitimate owner
                                  #Similar goals as typosquatting

URI TEMPLATE INJECTION ==>        #XSS with an URI

OPEN REDIRECT ==>                 #Allowing user-defined redirect URL inside another URL
                                  #Goal: injecting that URL to redirect to phishing site

                                  ┌──────────────┐
                                  │   SNIFFING   │
                                  └──────────────┘

SNIFFING ==>                      #Guessing server technology, in case there is a known exploit on it

X-Powered-By: STR [S]
Server: STR [S]                   #Bad practice since it enables sniffing

                                  ┌─────────────┐
                                  │   CACHING   │
                                  └─────────────┘

CACHE ATTACK ==>                  #Accessing cached confidential information
                                  #I.e. bypass authentication due to caching
                                  #Prevention:
                                  #  - do not cache
                                  #  - cache for shorter time

CACHE POISONING ==>               #Setting malicious cache value, so that other clients that share the same cache use it

                                  ┌──────────────┐
                                  │   TRACKING   │
                                  └──────────────┘

TRACKING ==>                      #Gives personal information without consent
                                  #Akin to forced negotiation (i.e. weakens one side of the negotation)

SANCTIONING ==>                   #Whether tracking is user controlled, easy to detect, and based on standards
                                  #As opposed to fingerprinting, supercookies, etc.
                                  #Standard: W3C TAG "Unsanctioned tracking"

                                  ┌─────────────┐
                                  │   REFERER   │
                                  └─────────────┘

Referer: URI [C]                  #Current URI
                                  #Without USERINFO nor #HASH
Referer: about:blank [C]          #No current URI

DOCUMENT.referrer                 #Returns Referer [C] (or '')

PRIVACY ==>                       #Can deduce identity from current URI
                                  #Also, can be used for fingerprinting

RELIABILITY ==>                   #Checking it is not secure (e.g. against CSRF) because:
                                  #  - can be forged
                                  #  - absent in private browsing mode

Referrer-Policy: VAL [S]          #Ask client to set Referer [C] in specific ways:
                                  #  - no-referrer: not set
                                  #  - same-origin: not set if cross-origin, else full URI
                                  #  - origin-when-cross-origin; ORIGIN if cross-origin, else full URI
                                  #  - origin: only ORIGIN
                                  #  - unsafe-url: full URI
                                  #  - strict-origin[-when-cross-origin], no-referred-when-downgrade (def):
                                  #    like origin[-when-cross-origin] and unsafe-url, except not set
                                  #    if downgrading protocol from HTTPS to HTTP
<meta name="referrer"
 content="VAL">
<a|area|iframe|img|link
 referrerpolicy="VAL">            #Same in HTML
REQ[Q].referrerPolicy             #Same with fetch()

REQ[Q].referrer                   #With fetch(), Referer [C]:
                                  #  - 'no-referrer': not set
                                  #  - 'URL': specific URL
                                  #  - 'client' (def): current 'URL', or nothing depending on settings
Link: noreferrer [S]
<... rel="noreferrer">            #Same in HTML

                                  ┌────────────────────┐
                                  │   FINGERPRINTING   │
                                  └────────────────────┘

FINGERPRINTING ==>                #Creating a device|machine ID using its capabilities instead of usual state mechanisms (e.g. cookies)

DIVERSITY ==>                     #Number of possible state combinations used in ID
                                  #  - measured in bits of entropy
                                  #  - i.e. how much it distinguish one machine from another
                                  #Also, whether possible state combinations are evenly distributed

STABILITY ==>                     #Whether ID does not change over time
                                  #Inversely corrolated to diversity
                                  #  - however, if only some of the combinations change, can identity previous ID and update it
                                  #    instead of creating a new one

PASSIVE ==>                       #Capability that is read-only, i.e. cannot be changed by users
                                  #As opposed to active

PROTECTION ==>                    #For each capability, either:
                                  #  - do not send
                                  #  - randomize

LIST OF CAPABILITIES ==>          #Browser:
                                  #  - active extensions, e.g. AdBlock
                                  #HTTP:
                                  #  - User-Agent [C]
                                  #  - Accept* [C]
                                  #  - Connection [C]
                                  #  - DNT [C]
                                  #  - Enrichment (headers added by network proxies)
                                  #JavaScript:
                                  #  - DATE.getTimezoneOffset()
                                  #  - supported features
                                  #DOM:
                                  #  - CANVAS: draw 2D|3D to see variations due to different GPU
                                  #  - NAVIGATOR: plugins, platform, cookieEnabled
                                  #  - SCREEN: height, width, colorDepth
                                  #  - supported features, e.g. localStorage|sessionStorage
                                  #NTP:
                                  #  - clock skew: small sync difference (in ms)
                                  #TCP/IP:
                                  #  - configuration
                                  #     - initial packet size, initial TTL, window size, max segment size,
                                  #       window scaling value, flags (don't fragment, sackOK, nop)
                                  #     - 67 bits of entropy
                                  #     - eases OS fingerprinting
                                  #IEEE 802.11 (wireless)
                                  #OS
                                  #MAC address
                                  #Machine serial number

                                  ┌────────────┐
                                  │   OTHERS   │
                                  └────────────┘

HTTPS ==>                         #See HTTPS doc
COOKIES ==>                       #See cookies doc
