
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   WEB SECURITY   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

                                  ┌───────────────────┐
                                  │   NORMALIZATION   │
                                  └───────────────────┘

NORMALIZATION ==>                 #When a VAL has multiple equivalent variants
                                  #This can lead to comparison logic to fail
                                  #This can also be used to confuse, e.g. for phishing
                                  #Examples:
                                  #  - transtyping
                                  #  - encoding, including charset
                                  #  - STR: case, Unicode normalization
                                  #  - NUM: radix, FLOAT representation, decimal digits, epsilon, i18n (e.g. separators)
                                  #  - OBJ: keys order
                                  #  - ARR: order
                                  #  - base64: padding, chars outside charset, newlines
                                  #  - paths: symlinks
                                  #  - path/URIs: . .., relative links, duplicate /
                                  #  - URIs: default parts, unused parts

                                  ┌────────────┐
                                  │   OPENER   │
                                  └────────────┘

WINDOW.opener                     #Is set when browsing with WINDOW2.open() or <a|area|form>
                                  #This is unsafe as it allows manipulating WINDOW cross-domain

<a|area|form rel="[no]opener">    #Make WINDOW.opener null in new page
                                  #Def 'noopener' if target="_blank", 'opener' else
WINDOW.open(..., 'noopener')      #Same in DOM

Cross-Origin-Opener-Policy:       #COOP. Ask client to make WINDOW.opener null in new pages
 STR [S]                          #  - 'unsafe-none' (def): if target="_blank"
                                  #  - 'same-origin-allow-popups': unless popup
                                  #  - 'same-origin': always

                                  ┌───────────────────────┐
                                  │   PROCESS ISOLATION   │
                                  └───────────────────────┘

WINDOW|GLOBALSCOPE.isSecureContext#Whether uses https:|wss:, or is localhost or local file
                                  #Includes parent documents

Origin-Agent-Cluster: ?1 [S]      #Do not run <iframe> in same OS process, unless same ORIGIN
                                  #This prevents security issues with:
                                  #  - shared memory
                                  #  - CPU attack, i.e. high computation to block parent document
                                  #If set, cannot:
                                  #  - set DOCUMENT.domain
                                  #  - postMessage() + SharedArrayBuffer or WebAssembly.Module
                                  #  - use WebAssembly.Memory
                                  #Requires WINDOW.isSecureContext true
WINDOW|GLOBALSCOPE
 .originAgentCluster              #BOOL. Whether Origin-Agent-Cluster [S] used

                                  ┌──────────────────┐
                                  │   CLICKJACKING   │
                                  └──────────────────┘

CLICKJACKING ==>                  #CSRF using an <iframe|frame|object|embed> with different ORIGIN
                                  #and make users click in it, believe it to be same ORIGIN
                                  #Also called UI redressing

CSP ==>                           #'frame-ancestors' (see its doc) prevents clickjacking

X-Frame-Options: VAL [S]          #Prevents clickjacking
                                  #Ask client to allow putting response in an <iframe|frame|object|embed>:
                                  #  - DENY: never
                                  #  - SAMEORIGIN: only if parent has same origin
                                  #  - ALLOW-FROM DOMAIN: only if top-level from DOMAIN (ignored by most browsers)
                                  #RFC 7034
                                  #Deprecated: prefer CSP 'frame-ancestors'

WINDOW.top === WINDOW             #Can be used for confirmation to prevent clickjacking
WINDOW.confirm()                  #Same, since popup cannot be framed

                                  ┌─────────┐
                                  │   URI   │
                                  └─────────┘

TRUST ==>                         #URI locates a resource, but it does not guarantee its security
                                  #E.g. URI's ownership can change

CONFIDENTALITY ==>                #URI can be logged, i.e. should not contain confidential information

HIDING ==>                        #Private URI can be guessed, i.e. should:
                                  #  - use random IDs in URI
                                  #  - not rely on URI remaining private

SPOOFING ==>                      #Making URI look like another
                                  #E.g. making USERINFO look like HOSTNAME|PATH

TYPOSQUATTING ==>                 #URI spoofing relying on typos, similar words (e.g. plural), different TLD, similar Unicode chars, etc.
                                  #Also called URL hijacking
                                  #Possible goals: selling URL, redirecting to competitor, phishing, getting traffic

URL SQUATTING ==>                 #Registering URL (including domain name) before legitimate owner
                                  #Similar goals as typosquatting

URI TEMPLATE INJECTION ==>        #XSS with an URI

OPEN REDIRECT ==>                 #Allowing user-defined redirect URL inside another URL
                                  #Goal: injecting that URL to redirect to phishing site

<script|link                      #SubResource Integrity (SRI). If content checksum does not match HASH, discard it with a network error.
 integrity="ALGO-HASH ...">       #Only useful if current document is trusted, i.e. only useful on third-party content (e.g. CDN)
                                  #ALGO: sha256|384|512. HASH uses standard base64.
                                  #File cannot be served from filesystem (file:)
                                  #For <link>, only with rel="stylesheet|[module]preload"

                                  ┌─────────────────┐
                                  │   PERMISSIONS   │
                                  └─────────────────┘

Permissions-Policy:
 WEB_FEATURE=(WHERE ...) ... [S]  #Restrict specific WEB_FEATUREs for specific ORIGINs

WEB_FEATURE                       #Specific web capability
                                  #Not documented yet
                                  #Examples: microphone, payment, etc.

WHERE                             #Default:
                                  #  - 'self' for most WEB_FEATUREs
                                  #  - '*' for a few WEB_FEATUREs: attribution-reporting, browsing-topics, document-domain, storage-access
no WHERE                          #No ORIGIN, i.e. WEB_FEATURE=()
WHERE *                           #Any ORIGIN, i.e. WEB_FEATURE=*
WHERE self                        #Current ORIGIN
WHERE src                         #<iframe> with a same ORIGIN as its parent
WHERE "ORIGIN"                    #Specific ORIGIN
                                  #Can include *

<iframe allow=                    #Same for an <iframe>
 "WEB_FEATURE WHERE ...; ...">    #WHERE:
                                  #  - no WHERE -> 'none'
                                  #  - self|src -> 'self|src'
                                  #Def: 'src'

                                  ┌─────────────┐
                                  │   CACHING   │
                                  └─────────────┘

CACHE ATTACK ==>                  #Accessing cached confidential information
                                  #I.e. bypass authentication due to caching
                                  #Prevention:
                                  #  - do not cache
                                  #     - including for HTML autocomplete (see its doc)
                                  #  - cache for shorter time

CACHE POISONING ==>               #Setting malicious cache value, so that other clients that share the same cache use it

                                  ┌──────────────┐
                                  │   TRACKING   │
                                  └──────────────┘

TRACKING ==>                      #Gives personal information without consent
                                  #Akin to forced negotiation (i.e. weakens one side of the negotation)

SANCTIONING ==>                   #Whether tracking is user controlled, easy to detect, and based on standards
                                  #As opposed to fingerprinting, supercookies, etc.
                                  #Standard: W3C TAG "Unsanctioned tracking"

                                  ┌───────────────────┐
                                  │   REFERRER MAIN   │
                                  └───────────────────┘

Referer: URI [C]                  #Current URI
                                  #Can be absolute|relative
                                  #Can have /PATH and ?QUERY. Does not have USERINFO nor #HASH
Referer: about:blank [C]          #No current URI

DOCUMENT.referrer                 #Returns Referer [C] (or '')

PRIVACY ==>                       #Can deduce identity from current URI
                                  #Also, can be used for fingerprinting

RELIABILITY ==>                   #Checking Referer [C] is not secure (e.g. against CSRF) because:
                                  #  - can be forged
                                  #  - absent in private browsing mode

                                  ┌─────────────────────┐
                                  │   REFERRER POLICY   │
                                  └─────────────────────┘

Referrer-Policy: VAL [S]          #Ask client to set Referer [C] in specific ways:
                                  #  - no-referrer: not set
                                  #  - same-origin: not set if cross-origin, else full URI
                                  #  - origin-when-cross-origin; ORIGIN if cross-origin, else full URI
                                  #  - origin: only ORIGIN
                                  #  - unsafe-url: full URI
                                  #  - strict-origin[-when-cross-origin], no-referred-when-downgrade (def):
                                  #    like origin[-when-cross-origin] and unsafe-url, except not set
                                  #    if downgrading protocol from HTTPS to HTTP
<meta name="referrer"
 content="VAL">
<a|area|link|iframe|img|script
 referrerpolicy="VAL">            #Same in HTML
REQ[Q].referrerPolicy             #Same with fetch()

REQ[Q].referrer                   #With fetch(), Referer [C]:
                                  #  - '': not set
                                  #  - 'URL': specific URL
                                  #  - 'about:client' (def): current 'URL', or nothing depending on settings
Link: noreferrer [S]
<a|area|link rel="noreferrer">    #Same in HTML
WINDOW.open(..., 'noreferrer')    #Same in DOM

                                  ┌─────────────────────┐
                                  │   DNS PREFETCHING   │
                                  └─────────────────────┘

X-DNS-Prefetch-Control: on|off [S]#Enable|disable DNS prefetching
                                  #I.e. performing DNS resolution early before knowing whether user will navigate
                                  #Faster
                                  #However, not good for privacy, since this can be used by destination sites to know
                                  #user viewed links, even if did not navigate
                                  #Def: 'on'

                                  ┌────────────────────┐
                                  │   FINGERPRINTING   │
                                  └────────────────────┘

FINGERPRINTING ==>                #Creating a device|machine ID using its capabilities instead of usual state mechanisms (e.g. cookies)

DIVERSITY ==>                     #Number of possible state combinations used in ID
                                  #  - measured in bits of entropy
                                  #  - i.e. how much it distinguish one machine from another
                                  #Also, whether possible state combinations are evenly distributed

STABILITY ==>                     #Whether ID does not change over time
                                  #Inversely corrolated to diversity
                                  #  - however, if only some of the combinations change, can identity previous ID and update it
                                  #    instead of creating a new one

PASSIVE ==>                       #Capability that is read-only, i.e. cannot be changed by users
                                  #As opposed to active

PROTECTION ==>                    #For each capability, either:
                                  #  - do not send
                                  #  - randomize

LIST OF CAPABILITIES ==>          #Browser:
                                  #  - active extensions, e.g. AdBlock
                                  #HTTP:
                                  #  - User-Agent [C]
                                  #  - Accept* [C]
                                  #  - Connection [C]
                                  #  - DNT [C]
                                  #  - Enrichment (headers added by network proxies)
                                  #JavaScript:
                                  #  - DATE.getTimezoneOffset()
                                  #  - supported features
                                  #DOM:
                                  #  - CANVAS: draw 2D|3D to see variations due to different GPU
                                  #  - NAVIGATOR: plugins, platform, cookieEnabled
                                  #  - SCREEN: height, width, colorDepth
                                  #  - supported features, e.g. localStorage|sessionStorage
                                  #NTP:
                                  #  - clock skew: small sync difference (in ms)
                                  #TCP/IP:
                                  #  - configuration
                                  #     - initial packet size, initial TTL, window size, max segment size,
                                  #       window scaling value, flags (don't fragment, sackOK, nop)
                                  #     - 67 bits of entropy
                                  #     - eases OS fingerprinting
                                  #IEEE 802.11 (wireless)
                                  #OS
                                  #MAC address
                                  #Machine serial number

                                  ┌────────────┐
                                  │   OTHERS   │
                                  └────────────┘

XSS ==>                           #See XSS doc
CSP ==>                           #See CSP doc
CSRF ==>                          #See CSRF doc
SAME ORIGIN POLICY ==>            #See same origin policy doc
CORS/CORP/COEP ==>                #See CORS doc
SNIFFING ==>                      #See sniffing doc
HTTPS ==>                         #See HTTPS doc
COOKIES ==>                       #See cookies doc
