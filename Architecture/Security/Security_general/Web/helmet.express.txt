
                                  ┏━━━━━━━━━━━━┓
                                  ┃   HELMET   ┃
                                  ┗━━━━━━━━━━━━┛

VERSION ==>                       #8.0.0

helmet-csp                        #
CSP([OPTS])->EXPRESS_MDWR         #Sets Content-Security-Policy: TYPE VAL ... ;... [S]
OPTS.reportOnly                   #BOOL (def: false). Content-Security-Policy-Report-Only [S] instead of Content-Security-Policy [S]
OPTS.directives                   #{TYPE: 'VAL'[(REQ, RES)][_ARR]|null,...} (def: getDefaultDirectives())
                                  #If TYPE is camelCase, dash-erized
                                  #default-src TYPE required
dangerouslyDisableDefaultSrc      #To use instead of null when TYPE is 'default-src'
OPTS.useDefaults                  #BOOL (def: true). Merges getDefaultDirectives() with lower priority
getDefaultDirectives()->OBJ       #{TYPE: 'VAL'_ARR} with
                                  #  - TYPE upgrade-insecure-requests []
                                  #  - TYPE object-src|script-src-attr ["'none'"]
                                  #  - TYPE default-src|base-uri|form-action|frame-ancestors|script-src: ["'self'"]
                                  #  - TYPE img-src ["'self'", "data:"]
                                  #  - TYPE font-src ["'self'", "https:", "data:"]
                                  #  - TYPE style-src ["'self'", "https:", "'unsafe-inline'"]









HELMET([OBJ])                     #Security express MIDWR (0.4.0) package that includes several HELMET.FEATURE(...) MIDWR
                                  #Using HELMET() directly include all of them (unless using OBJ.FEATURE false) with default
                                  #parameters), except nocache() and csp(). Must call HELMET.FUNC() for individuals:
                                  #Good idea to call it with false for the FEATURE that we want to personalize, then call
                                  #HELMET.FEATURE(...)
HELMET.nocache()                  #Disallow cache by using:
                                  #  Cache-Control: no-store, no-cache
                                  #  Pragma: no-cache
                                  #  Expires: 0
HELMET.csp([OBJ])                 #Implement CSP. OBJ:
                                  #  - default|script|style|img|connect|font|object|media|frameSrc STR_ARR: don't forget quotes
                                  #    on 'self', etc. (def. is only defaultSrc: 'self')
                                  #  - reportUri PATH (def: undefined). Might conflict with csurf
                                  #  - reportOnly BOOL (def: false)
                                  #  - setAllHeaders BOOL (def: false): if true, set headers even when undefined
HELMET.xssFilter()                #Same goal as CSP (XSS-prevention) but using browser-specific mechanism, for IE8+ and Chrome
                                  #only.
HELMET.xframe([STR[, STR2]])      #Implements X-Frame-Options. STR, STR2 can be "deny", "same origin" (def) or
                                  #"allow-from", "PROTOCOL://DOMAIN"
                                  #Should do several time HELMET.xframe() for several time this header.
HELMET.hsts([OBJ])                #Implement Strict-Transport-Security. OBJ:
                                  #  - maxAge NUM (ms)
                                  #  - includeSubdomains BOOL (def: false)
                                  #  - setIf FUNC(REQ, RES)->BOOL: by def., if REQ.secure is true
                                  #To redirect all HTTP connections to HTTPS (using 301 redirection), even initial ones, use
                                  #Express MIDWR EXPRESS-ENFORCES-SSL
HELMET.hidePoweredBy([OBJ])       #Removes X-Powered-By: Express header, to prevent vulnerabilities sniffing.
                                  #Could also use APP.disable("x-powered-by")
                                  #Can change header value with OBJ.setTo STR, e.g. "PHP 4.2.0", to obfuscate sniffing.
HELMET.ienoopen()                 #Uses X-Download-Options: noopen [S]
HELMET.nosniff()                  #Uses X-Content-Type-Options: nosniff [S]
HELMET.crossdomain()              #Adobe products like Flash asks for /crossdomain.xml (if exists) as a policy file.
                                  #Serves a restricted version when asked.
