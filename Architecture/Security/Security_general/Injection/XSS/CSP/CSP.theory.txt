
                                  ┏━━━━━━━━━┓
                                  ┃   CSP   ┃
                                  ┗━━━━━━━━━┛

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

Content-Security-Policy:          #CSP. Ask client to restrict links to other ORIGINs
 CSP_TYPE TVAL ... [;...] [S]     #Goal: prevent injection from user-defined contents
                                  #Must specify each CSP_TYPE only once
                                  #Can be set multiple times, merging them (stricter has priority)
                                  #'self|none|unsafe-inline|eval' is single quoted
                                  #CSP_TYPE and other TVALs not quoted
<meta http-equiv
 ="Content-Security-Policy"
 content="...">                   #Same, but as HTML tag

WORKERS ==>                       #Do not inherit from parent. Must set their own Content-Security-Policy [S]

csp-evaluator.withgoogle.com      #Website to validate CSP

IMPLEMENTATIONS ==>               #See helmet or @middy/http-security-headers doc

                                  ┌───────────┐
                                  │   TYPES   │
                                  └───────────┘

CSP_TYPE default-src              #Default for other CSP_TYPEs (def: '*')

CSP_TYPE script-src               #JavaScript: <script>, inline event handlers, XSLT
CSP_TYPE script-src-elem          #<script>
CSP_TYPE script-src-attr          #Inline event handler, XSLT

CSP_TYPE style-src                #<style>, <link rel="stylesheet">, <... style="...">, HTMLELEM.style
CSP_TYPE style-src-elem           #<style>, <link rel="stylesheet">
CSP_TYPE style-src-attr           #<... style="...">, HTMLELEM.style

CSP_TYPE frame-src                #<iframe|frame>
CSP_TYPE child-src                #<iframe|frame> and WORKER|SHARED_WORKER|SERVICE_WORKERs
CSP_TYPE worker-src               #WORKER|SHARED_WORKER|SERVICE_WORKERs
CSP_TYPE fenced-frame-src         #<fencedframe>
                                  #TVAL must be URI

CSP_TYPE connect-src              #Programmatic HTTP requests: fetch(), XHR.open(), WebSocket(), EventSource(),
                                  #NAVIGATOR.sendBeacon(), <a ping>

CSP_TYPE font-src                 #@font-face
CSP_TYPE img-src                  #<img>
CSP_TYPE media-src                #<audio>, <video>, <source>, <track>
CSP_TYPE object-src               #<object>, <embed>
CSP_TYPE manifest-src             #<link rel="manifest">

CSP_TYPE base-uri                 #<base href="...">
                                  #TVAL must be URI|'self'|'none'
CSP_TYPE frame-ancestors          #<iframe|frame> parents
                                  #TVAL must be URI|'self'|'none'
CSP_TYPE form-action              #<form action="...">
                                  #TVAL must be URI|'self'|'none'
CSP_TYPE navigate-to              #Next page, through any way (including HTML|JavaScript)
                                  #TVAL must be URI|'self'|'none'

CSP_TYPE upgrade-insecure-requests#See HTTPS doc

                                  ┌────────────┐
                                  │   VALUES   │
                                  └────────────┘

TVAL URI                          #Allows '[PROTOCOL:][HOSTNAME[:PORT][/PATH]]'
                                  #PROTOCOL:
                                  #  - def: current one
                                  #  - http: matches http[s]:
                                  #  - ws: matches ws[s]:
                                  #Can use * in:
                                  #  - HOSTNAME, at beginning, and followed by .
                                  #  - PORT
                                  #PATH matches PATH[/...]

TVAL 'self'                       #Allows if same PROTOCOL|HOSTNAME|PORT

TVAL 'none'                       #Forbidden

TVAL 'unsafe-eval'                #Allows WASM, eval() and the likes (new Function(STR), etc.)
                                  #Also CSSSTYLESHEET.insertRule() and CSSSTYLEDEC.cssText
TVAL 'wasm-unsafe-eval'           #Allows WASM

TVAL 'unsafe-inline'              #Allows <script|style> without src, and the likes (javascript:URI, inline event handlers, etc.)
TVAL 'unsafe-hashes'              #Allows <script|style> without src

TVAL 'nonce-ID'                   #Allows <script|style> without src but with <script|style nonce="ID">
                                  #ID should be random and unique for each response
TVAL 'ALGO-HASH'                  #Allows <script|style> with|without src only if <script integrity="ALGO-HASH"> and contents hash same as HASH
                                  #ALGO is sha256|384|512
                                  #HASH is in base64
TVAL 'strict-dynamic'             #Scripts loaded by page inherit nonce-ID and ALGO-HASH
                                  #However they do not inherit other TVALs

TVAL 'inline-speculation-rules'   #Allows <script type="speculationrules">

                                  ┌─────────────┐
                                  │   SANDBOX   │
                                  └─────────────┘

CSP_TYPE sandbox                  #<iframe> specific restrictions
<iframe sandbox[="TVAL ..."]>     #Always forbidden:
                                  #  - plugins
                                  #  - <embed|object>
                                  #  - seamless attribute
                                  #  - autoplay attribute, autofocus, etc.
                                  #TVAL
                                  #  - must be one of the following, which disables one of the restrictions
                                  #  - can be empty

TVAL allow-scripts                #Allow JavaScript

TVAL allow-forms                  #Allow <form> submit

TVAL allow-same-origin            #Use same ORIGIN, as opposed to a special one-time separate ORIGIN
                                  #This allows IFRAME.contentDocument|contentWindow
                                  #Also allows DOCUMENT.cookie, sessionStorage|localStorage and IndexedDB

TVAL allow-downloads              #Allow <a|area download> or navigating to Content-Disposition: attachment [S]
TVAL allow-top-navigation         #Allow <a href="_top"> or going up to container DOCUMENT
TVAL allow-top-navigation
 -by-user-activation              #Same but only if initiated by user action
TVAL allow-top-navigation         #Allow navigating to non-HTTP URIs
 -to-custom-protocols             #Implied by allow-popups and allow-top-navigation

TVAL allow-modals                 #Allow WINDOWS.alert|confirm|print|prompt() and 'beforeUnloadEvent'
TVAL allow-popups                 #Allow WINDOWS.open|showModalDialog() and <a target="_blank">
TVAL
 allow-popups-to-escape-sandbox   #Like allow-popups but does not force popup to be sandboxed too

TVAL allow-pointer-lock           #Allow pointer lock API
TVAL allow-storage-access
 -by-user-activation              #Allow request parent's storage through storage access API
TVAL allow-presentation           #Allow PresentationRequest

                                  ┌───────────────────┐
                                  │   TRUSTED TYPES   │
                                  └───────────────────┘

TTYPE                             #Specific types of contents that can be injected inline
TTYPE Script                      #JavaScript. SCRIPT.innerText|text[Content]
TTYPE ScriptURL                   #JavaScript URL. SCRIPT.src
TTYPE HTML                        #HTML. ELEM.inner|outerHTML, IFRAME.srcdoc

CSP_TYPE require-trusted-types-for#Requires using TRUSTED when injecting contents from any TTYPE
                                  #TVAL must be 'script' (but it covers all TTYPEs)

CSP_TYPE trusted-types            #Restrict trustedTypes.createPolicy()
                                  #Uses following TVALs
no TVAL
TVAL 'none'                       #Not allowed
TVAL POLICY                       #Allowed if named 'POLICY'
TVAL *                            #Allowed
TVAL 'allow-duplicates'           #Allow calling createPolicy() with same 'POLICY' twice

WINDOW|WORKERGLOBAL
 .trustedTypes.createPolicy
 ('POLICY'[, OPTS])->POLICY       #
OPTS.createTTYPE                  #FUNC(STR[, ...])->STR
                                  #Maps|validates STR when calling POLICY.createTTYPE(STR[, ...])

POLICY.name                       #'POLICY'. Only [:alnum:]-#=_/@.%
trustedTypes.defaultPolicy        #POLICY with name 'default', or null
                                  #Applied when injecting contents without TRUSTED

POLICY.createTTYPE(STR[, ...])
 ->TRUSTED                        #
trustedTypes.emptyTTYPE           #TRUSTED that always returns an empty STR

trustedTypes.isTTYPE(VAL)->BOOL   #Whether it is a TRUSTED
TRUSTED.toJSON|toString()->STR    #I.e. can pass TRUSTED directly
                                  #E.g. SCRIPT.innerText = TRUSTED

getPropertyType('TAG', 'PROP'
 [, 'TAG_NAMESPACE'])
 ->'TTYPE'|null                   #Which TTYPE (if any) handles setting TAG.PROP in JavaScript
getAttributeType('TAG', 'ATTR'
 [, 'TAG_NAMESPACE'
 [, 'ATTR_NAMESPACE']])
 ->'TTYPE'|null                   #Same in HTML

                                  ┌───────────────┐
                                  │   REPORTING   │
                                  └───────────────┘

CSP_TYPE report-to                #'ENDPOINT_NAME'. Calls POST URL when CSP blocked something
                                  #Not when using <meta http-equiv="Content-Security-Policy">
Reporting-Endpoints:
 ENDPOINT_NAME=URL,... [S]        #
Report-To: ... [S]                #Deprecated, older syntax of Reporting-Endpoints [S]
Content-Type:
 application/reports+json [S]     #Body is REPORT_BODY

Content-Security-Policy           #Same as Content-Security-Policy [S] but do not block
 -Report-Only: ... [S]            #Only sends reports
                                  #Meant for debugging|testing

ReportingObserver                 #Alternative to CSP_TYPE report-to, reporting in JavaScript instead
REPORT[_BODY]                     #See DOM doc
REPORT_TYPE 'csp-violation'       #When attempting to CSP blocked something

ELEM|DOCUMENT|WORKER
 .addEventListener
 ('securitypolicyviolation',
 FUNC(CSP_EVENT))                 #Other alternative
CSP_EVENT.*                       #Like REPORT_BODY.*

REPORT_BODY.documentURI           #'URL' of ORIGIN
REPORT_BODY.blockedURI            #'URL' being accessed
                                  #Can also be:
                                  #  - 'inline': for CSP_TYPE unsafe-inline
                                  #  - '[wasm-]eval': for CSP_TYPE [wasm-]unsafe-eval
                                  #  - 'trusted-types-policy': for CSP_TYPE trusted-types
                                  #  - 'trusted-types-sink': for CSP_TYPE require-trusted-types-for
REPORT_BODY.referrer              #'URL'|null of Referer [C]
REPORT_BODY.effectiveDirective    #'CSP_TYPE'
REPORT_BODY.originalPolicy        #STR. Full Content-Security-Policy [C]
REPORT_BODY.statusCode            #STATUS_NUM
REPORT_BODY.disposition           #Whether the violation was blocked ('enforce') or not ('report') by client
                                  #Depends on whether Content-Security-Policy-Reporting-Only [S] was used

TVAL 'report-sample'              #Populates REPORT_BODY.sample
REPORT_BODY.sample                #First 40 chars of inline script|style|handler
                                  #Only with CSP_TYPEs script|style-src*
