
                                  ┏━━━━━━━━━┓
                                  ┃   XSS   ┃
                                  ┗━━━━━━━━━┛

XSS ==>                           #Cross-site scripting
                                  #Injection (see its doc) in a web page, so it executes within that context
                                  #E.g. to circumvent SOP, since it executes within same ORIGIN

PERSISTENT XSS ==>                #XSS persisted server-side
                                  #Also called active|stored
                                  #As opposed to not persistent or passive|reflected XSS, which is client-side only

HTML INJECTION ==>                #XSS with HTML
                                  #E.g. in an HTML comment

JAVASCRIPT INJECTION ==>          #XSS with JavaScript
                                  #E.g. eval(), setTimeout(STR), new Function(STR)

IMPLEMENTATIONS ==>               #See helmet or @middy/http-security-headers doc

                                  ┌────────────────┐
                                  │   XSS FILTER   │
                                  └────────────────┘

X-XSS-Protection: NUM             #0|1. Ignore <script> and <style> without src
                                  #Called XSS Filter by IE, and based on a previous tool called NoScripts
                                  #Deprecated and not supported by browsers anymore
                                  #Can be abused:
                                  #  - if that header is injected by attacker
                                  #  - then they can remove non-malicious inline <script>, to change page behavior
                                  #  - i.e. should either be set as:
                                  #     - if using CSP: 0
                                  #     - else: 1; mode=block
                                  #Prefer CSP
 [; mode=block]                   #Do not process whole page instead
 [; report=URI] [S]               #Like report-uri with CSP

                                  ┌───────────────────┐
                                  │   MIME SNIFFING   │
                                  └───────────────────┘

MIME SNIFFING ==>                 #When Content-Type [S] absent, invalid or not supported
                                  #Then some clients guess it based on contents or file extension
                                  #Also called contents sniffing

MIME CONFUSION ATTACK ==>         #Using MIME sniffing to circumvent MIME-based logic
                                  #E.g. showing user-uploaded .jpg files, but one actually contains JavaScript

UNAUTHORIZED HOTLINKING ==>       #Using MIME sniffing to circumvent original intent of contents distribution
                                  #For example:
                                  #  - GitHub raw files are sent as plain/text
                                  #  - but with MIME sniffing, users could host images for free and use it as a CDN

X-Content-Type-Options:           #Ask client to forbid:
 nosniff [S]                      #  - <script> with a non-JavaScript MIME
                                  #  - <style> with a non-CSS MIME
                                  #Prevents issues with MIME sniffing

                                  ┌────────────────────────┐
                                  │   DOWNLOAD INJECTION   │
                                  └────────────────────────┘

X-Download-Options: noopen [S]    #When using Content-Disposition [S]
                                  #  - confirmation box allows saving, but not "open"
                                  #  - if displayed, run under a different ORIGIN, to prevent circumventing SOP
                                  #Otherwise, if content is user-generated, could inject executable code
                                  #Only for IE, so not very useful anymore

                                  ┌──────────────────────┐
                                  │   HEADER INJECTION   │
                                  └──────────────────────┘

HEADER INJECTION ==>              #Code injection in HTTP headers, when their value is user-defined
                                  #E.g. set Location [C] or Set-Cookie [C]

HEADER RESPONSE SPLITTING ==>     #Header injection that inserts either:
                                  #  - \r\n: to terminate this header and inject a header
                                  #  - \r\n\r\n: to terminate all headers and inject start of body
                                  #Prevention: URL encoding user-defined HTTP header value

                                  ┌───────────┐
                                  │   FLASH   │
                                  └───────────┘

X-Permitted-Cross-Domain-Policies #Used by Flash to specify security restrictions
 [S]                              #Not documented yet
