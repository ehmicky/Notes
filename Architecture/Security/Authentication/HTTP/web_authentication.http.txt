
                      
   WEB_AUTHENTICATION  
                      



Standards (RFCs):
  - General: 7615, 7235
  - HTTP basic authentication: 7617
  - HTTP digest authentication: 5843, 7616

Summary (from best to worst):
  - cookie authentication:
     - advantages over sending credentials in other headers/request_params:
        - can force HTTPS with httpOnly
        - simple:
           - client automatically stores it
           - client automatically sends it
           - with max-age: easy way to communicate expire time to client, or to invalidate
     - disadvantages over sending credentials in other headers/request_params:
        - credentials must be sent as a response HTTP headers (cannot use alternative ways)
        - not crossdomain
  - sending credentials in other headers/request_params
  - HTTP authentication:
     - disadvantages over just sending credentials in headers/request_params (including cookies):
        - browser show prompt on first request
        - basic/digest do not use temp token but actual credentials (username:password)
        - use browser-specific unconditional caching, i.e. must force a request with invalid credentials to invalidate cache

General status codes:
  - 403 (Forbidden):
     - when using HTTP authentication, and user is authenticated but not authorized
     - when using other kind of authentication, and user is not authenticated or not authorized
     - prefer 404 if location itself is secret
  - 511 (Network Authentication required): alternative to 407, when sent by intercept proxy
  - 419 (Authentication timeout): alternative to 401, when failure due to authentication timeout
     - only with Laravel

Cookie Authentication:
  - Set-Cookie [S] + Cookie [C] (see HTTP doc)

HTTP Authentication:
  - Basic:
     - server (failure or first request):
         - 401|407 WWW|Proxy-Authenticate: Basic VAR="VAL",... [S]
            - realm="REALM" (mandatory):
               - set of resources sharing credentials
               - specific for any URL which starts with current URL (without filename)
            - charset="CHARSET" (def and only possible value: "UTF-8"): of USERNAME:PASSWORD
     - client:
         - shows prompt for username and password
         - [Proxy-]Authorization: Basic BASE64(USERNAME:PASSWORD) [C]
            - USERNAME: allowed chars are [:graph:] any Unicode character representing char|digit
            - PASSWORD: also whitespaces, punctuation, symbols
         - or use USERNAME:PASSWORD in USERINFO part of URI (deprecated)
  - Digest:
     - server (failure or first request):
        - 401|407 WWW|Proxy-Authenticate: Digest VAR="VAL",... [S]
           - realm="REALM": like Basic Authentication
           - domain="URI,..." (def: any): for which URIs the user agent should remember credentials
           - algorithm="ALGO[-sess],..." (def: "MD5"):
              - hashing algorithm
              - let client decide
              - among: MD5, SHA-256, SHA-512-256
           - qop="VARIANT,...":
              - variants of algorithms
              - among: auth, auth-int
           - userhash="true|false" (def: "false")
              - whether userhash is possible
           - nonce="RANDOM_ALNUM":
              - server-side nonce.
              - prevents building rainbow tables.
              - should be in base64 or hex
           - opaque="RANDOM_ALNUM", domain="DOMAIN":
              - used to pass state information around during the process (optional).
              - should be in base64 or hex
           - stale="true":
              - indicates that request failed because nonce was incorrect, maybe too old
              - user agent should retry without prompting for credentials
           - charset="CHARSET" (def: 'UTF-8', only value)
     - client:
        - [Proxy-]Authorization: Digest VAR="VAL",... [C]:
           - retake same VAR="VAL" as response (chooses gop|algorithm too)
           - username[*]="USERNAME"
              - * must be provided:
                 - if USERNAME contains percent-encoding (using same notation as MIME type)
              - if userhash true, use HASH(USERNAME:REALM)
           - response="HASHED_PASSWORD"
           - uri="URI": must match first request URL
           - cnonce="RANDOM_ALNUM", nc="NUM":
               - if gop "auth-int"
               - if Mallory can simulate Bob (not case if SSL), prevents him to build random tables using unique server nonce,
                 then guessing plaintext password from HASHED_PASSWORD
               - cnonce is the client nonce. nc is incrementing at each client request, keeping initial cnonce (allow reusing
                 same cnonce during a whole session)
        - HASHED_PASSWORD: HASH(HASH(A1):NONCE[:NC:CNONCE:QOP]:HASH(A2):
           - HASH: algorithm ALGO
           - A1:
              - if algorithm="ALGO", USERNAME:REALM:PASSWORD
              - if algorithm="ALGO-sess", HASH(USERNAME:REALM:PASSWORD):NONCE:CNONCE
           - ":NC:CNONCE:QOP":
              - if qop="auth[-int]"
              - Prevents replay
           - A2:
              - HTTPMETHOD:URI[:HASH(BODY)]
              - HASH(BODY):
                 - if qop="auth-int".
                 - Provides message integrity of BODY
     - server:
        - optional
        - on success
        - goal:
           - tells client it succeeded
           - mutual authentication, because it tells server knows HASH(USERNAME:REALM:PASSWORD)
        - [Proxy-]Authentication-Info: VAR=VAL,... [S]
           - nextnonce: next nonce
           - qop: same as request
           - rspauth:
              - same as request "reponse", except HTTPMETHOD not used
              - mandatory if qop="auth[-int]"
           - cnonce|nc:
              - same as request.
              - mandatory if qop="auth[-int]"
  - Token-based:
     - server (failure or first request):
        - 401|407 WWW|Proxy-Authenticate: Bearer VAR="VAL" [S]:
           - realm="REALM": like HTTP Basic Auth. (only one required)
           - scope="SCOPE ...":
              - sub-realm
              - charset: [:graph:]
           - error[_description|uri]="ERROR" (only for failure)
              - charset: [:graph:] and (except for ui) space
              - often used ERROR:
                 - invalid_token: should respond with 401|407
                 - insufficient_scope: should respond with 403
                 - invalid_request: should respond with 400|405
     - client:
        - [Proxy-]Authorization: Bearer BASE64_TOKEN [C]
        - or access_token in request body (x-www-form-urlencoded) or query variable (not recommended)
  - server can offer several authentication options at once, e.g.:
      WWW|Proxy-Authenticate: Digest ..., Basic ... [S]
      [Proxy-]Authorization: Digest ... [C]

Federated authentication/authorization:
  - Types:
     - Federated authentication:
        - instead of Alice authenticating to Bob:
           - Alice authenticates to Trent
           - Bob ask Alice to authenticate
           - Alice ask Bob to ask Trent instead
        - Goal: single login (authentication as a service)
        - Roles:
           - End-user / Resource owner (RO) (Alice)
           - Relying party (RP) / client (Bob)
           - OpenID Provider (OP) / Resource Server (RS) (Trent)
     - Federated authorization:
        - same but "authenticating" -> "authorizing Bob to do X"
     - Pseudo-federated authentication:
        - assuming that federated authorization providers check identity, so use federated authorization as federated authentication
  - Providers:
     - OpenID: Federated authentication, token-based
     - Oz: Federated authentication, but wait too new to try
     - OAuth (see doc): Federated authorization, token-based
     - OpenID Connect: OAuth-based pseudo-federated authentication
