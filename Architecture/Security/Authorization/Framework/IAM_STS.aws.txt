
           
   IAM STS  
           



VERSION ==>                   #2014-07-16


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PAGINATION ==>                #Request variable: Marker STR, MaxItems STR (def|max: 1e4)
                              #Response body: IsTruncated BOOL, Marker STR

LIMITS ==>                    #???

PRICING ==>                   #Free
                              #Can be used to consolidate billing

IAM_RESOURCE_ARN              #'arn:aws:iam::ACCOUNT_ID:PATH/RESOURCE'

FEDERATED_USER_ARN            #'arn:aws:iam::ACCOUNT_ID:federated-user[/PATH]/NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONCEPTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCOUNT_ID                    #AWS account short ID
CANONICAL_ACCOUNT_ID          #AWS account long ID longer version
                              #Used in very specific cases

ROOT ==>                      #1 per AWS account
ROOT_ARN                      #'arn:aws:iam::ACCOUNT_ID:root'

CREDENTIALS                   #One of: LOGIN_PROFILE, ACCESS_KEY, ASYM_KEY_PAIR or SIGNING_CERTIFICATE
                              #New users have no credentials.

ASYM_KEY_PAIR                 #Only for EC2 and CloudFront

PRINCIPAL                     #Who is being permitted.
                              #Can be:
                              #  - ACCOUNT_ID|ROOT_ARN|USER_ARN|GROUP_ARN|ROLE_ARN|INSTANCE_PROFILE_ARN|FEDERATED_USER_ARN|ASSUMED_ROLE_ARN[_ARR]
                              #     - ACCOUNT_ID is same as ROOT_ARN
                              #  - "SERVICE.amazonaws.com"
                              #  - "*"
                              #     - only for S3
                              #  - CANONICAL_ACCOUNT_ID
                              #     - only for S3
                              #  - 'DOMAIN'
                              #     - for logins-based roles, e.g. accounts.google.com
                              #     - should use Condition to test DOMAIN:aud|app_id
                              #  - SAML_PROVIDER_ARN
                              #     - should use Condition to test saml:aud and saml:iss, and maybe others


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCOUNT ALIAS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccountAlias()          #Request parameters: AccountAlias 'ACCOUNT_ALIAS'
                              #Response body: empty
ListAccountAliases()          #Request parameters: empty
                              #Response body: AccountAliases 'ACCOUNT_ALIAS'_ARR
DeleteAccountAlias()          #Request parameters: AccountAlias 'ACCOUNT_ALIAS'
                              #Response body: empty

ACCOUNT_ALIAS                 #STR. Alias for ACCOUNT_ID
                              #Must be [[:alnum:]-] (hyphen only in middle)
                              #Max 1 per ACCOUNT_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PERMISSION BOUNDARY      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUserPermissionsBoundary()  #Request parameters: USER_PERM_BOUNDARY
                              #Response body: empty
DeleteUserPermissionsBoundary #Request parameters: USER_PERM_BOUNDARY
 ()                           #  - only UserName
                              #Response body: empty
USER_PERM_BOUNDARY            #
USER_PERM_BOUNDARY
 .PermissionsBoundary         #POLICY_ARN
USER_PERM_BOUNDARY.UserName   #'USER'

PutRolePermissionsBoundary()  #Request parameters: ROLE_PERM_BOUNDARY
                              #Response body: empty
DeleteRolePermissionsBoundary #Request parameters: ROLE_PERM_BOUNDARY
 ()                           #  - only RoleName
                              #Response body: empty
ROLE_PERM_BOUNDARY            #
ROLE_PERM_BOUNDARY
 .PermissionsBoundary         #POLICY_ARN
ROLE_PERM_BOUNDARY.RoleName   #'ROLE'

USER|ROLE.PermissionsBoundary #ATTACHED_PERM_BOUNDARY
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryArn      #POLICY_ARN
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryType     #Always 'Policy'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateUser()                  #Request parameters: USER
                              #  - no Arn, UserId, CreateDate, PasswordLastUsed
                              #Response body: User USER
UpdateUser()                  #Request parameters: USER
                              #  - no Arn, UserId, CreateDate, PasswordLastUsed, PermissionsBoundary, Tags
                              #  - UserName -> UserName + NewUserName
                              #  - Path -> NewPath
                              #Response body: User USER
GetUser()                     #Request parameters: USER
                              #  - only UserName
                              #Response body: User USER
ListUsers()                   #Request parameters: USER
                              #  - only Path -> PathPrefix (search from start)
                              #Response body: Users USER_ARR
DeleteUser()                  #Request parameters: USER
                              #  - only UserName
                              #Response body: empty

USER                          #Real person.
                              #Not AWS service.
                              #Max 5000
USER.Arn                      #USER_ARN. 'arn:aws:iam::ACCOUNT_ID:user[/PATH]/NAME'
USER.UserId                   #USER_ID
USER.UserName                 #'USER'
USER.CreateDate               #'DATETIME'
USER.PasswordLastUsed         #'DATETIME' of last LOGIN_PROFILE sign-in
                              #null if never signed in
                              #Time is 5-min throttled
USER.Path                     #'[/PATH]/' (def: '/')
                              #ASCII only
TagUser()
ListUserTags()
UntagUser()                   #AWS TAGS
USER.Tags                     #RESOURCE_NAME: UserName 'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateGroup()                 #Request parameters: GROUP
                              #  - no Arn, GroupId, CreateDate
                              #Response body: FGROUP
                              #  - no Users
UpdateGroup()                 #Request parameters:
                              #  - no Arn, GroupId, CreateDate
                              #  - GroupName -> GroupName + NewGroupName
                              #  - Path -> NewPath
                              #Response body: empty
AddUserToGroup()              #Request parameters: GROUP_USER
                              #Response body: empty
RemoveUserToGroup()           #Request parameters: GROUP_USER
                              #Response body: empty
GetGroup()                    #Request parameters: GROUP
                              #  - only GroupName
                              #Response body: FGROUP
ListGroups()                  #Request parameters: GROUP
                              #  - only Path -> PathPrefix (search from start)
                              #Response body: Groups GROUP_ARR
ListGroupsForUser()           #Request parameters: FGROUP
                              #  - only UserName
                              #Response body: Groups GROUP_ARR
DeleteGroup()                 #Request parameters: GROUP
                              #  - only GroupName
                              #Response body: empty

GROUP                         #Sets of users
                              #Allow managing permissions of multiple users.
                              #User can belong to 0, 1 or several GROUPs.
                              #Max 100 total, 10 per user
ADMIN GROUP ==>               #Recommended instead of using root
                              #Can do everything: Action '*', Resource '*'
GROUP.Arn                     #GROUP_ARN. 'arn:aws:iam::ACCOUNT_ID:group[/PATH]/NAME'
GROUP.GroupId                 #GROUP_ID
GROUP.GroupName               #'GROUP'
GROUP.CreateDate              #'DATETIME'
GROUP.Path                    #'/PATH' or 'PATH/'

FGROUP                        #GROUP, including the list of USERs
FGROUP.Users                  #USER_ARR
FGROUP.Group                  #GROUP

GROUP_USER                    #One USER in a GROUP
GROUP_USER.UserName           #'USER'
GROUP_USER.GroupName          #'GROUP'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ROLE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateRole()                  #Request parameters: ROLE
                              #  - no Arn, RoleId, CreateDate
                              #Response body: Role ROLE
GetRole()                     #Request parameters: ROLE
                              #  - only RoleName
                              #Response body: Role ROLE
ListRoles()                   #Request parameters: ROLE
                              #  - only Path -> PathPrefix (search from start)
                              #Response body: Roles ROLE_ARR
DeleteRole()                  #Request parameters: ROLE
                              #  - only RoleName
                              #Response body: empty

ROLE                          #Like a group, but with temporary assigned USERs.
                              #Credentials: STS only
                              #By default everyone can sts:AssumeRole, i.e. must create a POLICY for it
                              #Max 250 total, 1 per instance profile
ROLE.Arn                      #ROLE_ARN. 'arn:aws:iam::ACCOUNT_ID:role[/PATH]/NAME'
ROLE.RoleId                   #ROLE_ID
ROLE.RoleName                 #'ROLE'
ROLE.CreateDate               #'DATETIME'
ROLE.Path                     #'/PATH' or 'PATH/'
ROLE.AssumeRolePolicyDocument #'POLICY'.
                              #Must specify:
                              #  - sts:ACTION
                              #  - Principal
TagRole()
ListRoleTags()
UntagRole()                   #AWS TAGS
ROLE.Tags                     #RESOURCE_NAME: RoleName 'ROLE'

TRUST POLICY ==>              #Who is allowed to assume the role.
                              #One of:
                              #  - ACCOUNT_ID|ROOT_ARN
                              #  - 'SERVICE.amazonaws.com'
                              #  - 'DOMAIN'
                              #  - SAML_PROVIDER_ARN
                              #  - custom proxy authentication system


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACCESS KEY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccessKey()             #Request parameters: UserName
                              #Response body: AccessKey ACCESS_KEY_OBJ:
                              #  - AccessKeyId
                              #  - SecretAccessKey
                              #  - UserName
                              #  - CreateDate DATE
                              #  - Status "Active|Inactive"
UpdateAccessKey()             #Request parameters: AccessKeyId, Status, UserName
ListAccessKeys()              #Request parameters: UserName
                              #Response body: AccessKeyMetadata ACCESS_KEY_OBJ (all but SecretAccessKey)
DeleteAccessKey()             #Request parameters: AccessKeyId, UserName

ACCESS_KEY                    #Programmatic credentials
                              #ACCESS_KEY_ID + SECRET_ACCESS_KEY
                              #Can be temp and accompanied by a SESSION_TOKEN (see STS)
                              #Avoid with root (prefer LOGIN_PROFILE)
                              #Max 2 per user
ACCESS_KEY_ID                 #Public. 20 chars
SECRET_ACCESS_KEY             #Private. 40 chars
                              #Can only be retrieved during signup


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOGIN PROFILE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLoginProfile()          #Request parameters:
                              #  - Password
                              #  - PasswordResetRequired BOOL (def: false)
                              #  - UserName
                              #Response body:
                              #  - LoginProfile LOGIN_PROFILE_OBJ:
                              #     - CreateDate DATE
                              #     - PasswordResetRequired BOOL
                              #     - UserName
UpdateLoginProfile()          #Same request parameters as CreateLoginProfile()
GetLoginProfile()             #Request parameters: UserName
                              #Response body: LoginProfile LOGIN_PROFILE_OBJ
DeleteLoginProfile()          #Request parameters: UserName

LOGIN_PROFILE                 #Web app credentials
                              #Either:
                              #  - root: email address and password
                              #  - non-root:
                              #     - username and password
                              #     - sign-in at https://ACCOUNT_ID.signin.aws.amazon.com/console/
                              #ASCII only
                              #Max 1 per user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PASSWORD POLICY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ChangePassword()              #Request parameters: Old|NewPassword

UpdateAccountPasswordPolicy() #Request parameters PASSWORD_POLICY:
                              #  - AllowUsersToChangePassword BOOL (def: false)
                              #  - ExpirePasswords BOOL
                              #  - MaxPasswordAge NUM (in days)
                              #  - HardExpiry BOOL: can change expired password (and not before it expires)
                              #  - MinimumPasswordLength NUM (def: 6)
                              #  - PasswordReusePrevention NUM
                              #  - RequireLowercaseCharacters BOOL
                              #  - RequireNumbers BOOL
                              #  - RequireSymbols BOOL
                              #  - RequireUppercaseCharacters BOOL
GetAccountPasswordPolicy()    #Response body: PasswordPolicy PASSWORD_POLICY
DeleteAccountPasswordPolicy() #

PASSWORD_POLICY               #Applied to LOGIN_PROFILE
                              #Can be:
                              #  - min length
                              #  - specific chars
                              #  - no update
                              #  - expiration
                              #     - prevent reusing
                              #     - force contacting admin if did not change before expiration
                              #Does not apply to root


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUser|Group|RolePolicy()    #Request parameters POLICY_INFO:
                              #  - PolicyDocument 'POLICY'
                              #  - PolicyName
                              #  - User|Group|RoleName
UpdateAssumeRolePolicy()      #Request parameters:
                              #  - PolicyDocument 'POLICY'
                              #  - RoleName
DeleteUser|Group|RolePolicy() #Request parameters: POLICY_INFO (wihout PolicyDocument)
GetUser|Group|RolePolicy()    #Request parameters: POLICY_INFO (wihout PolicyDocument)
                              #Response body: POLICY_INFO
ListUser|Group|RolesPolicies()#Request parameters:
                              #  - User|Group|RoleName
                              #Response body:
                              #  - PolicyNames STR_ARR

POLICY                        #Set of permissions.
                              #One principal|resource can have multiple POLICYs (that are and'd).
'POLICY'                      #POLICY JSON-stringified
POLICY.Version                #'2012-10-17'

POLICY.Statement              #STATEMENT_ARR
                              #Statements are and'd
STATEMENT                     #Single permission
STATEMENT.Id|Sid              #Optional ID|sub-ID.
                              #Id should be unique, e.g. including a GUID
                              #For IAM policies, Id = Sid
STATEMENT.Effect              #'Allow|Deny'
                              #By default, no ACTION permitted
                              #  - i.e. at least one 'Allow' must match
                              #If at least one 'Deny' matches, not permitted
                              #  - even if one 'Alllow' matches
STATEMENT.[Not]Action         #'SERVICE:SDK_ACTION'_ARR
                              #SERVICE:
                              #  - AWS service name
                              #  - lowercased
                              #SDK_ACTION:
                              #  - REST method name
                              #  - capitalized
                              #  - can use wildcard *

STATEMENT.[Not]Resource       #Resource ARN[_ARR]
                              #POLICY must be assigned to a principal.
STATEMENT.[Not]Principal      #PRINCIPAL
                              #POLICY must be assigned to a resource.
                              #Only for S3, SNS, SQS, OpsWork, and trust policies
STATEMENT.NotAction
STATEMENT.NotResource         #Like STATEMENT.Action|Resource|Principal but using denylist instead of allowlist
STATEMENT.NotPrincipal        #If both STATEMENT.* and STATEMENT.Not* used, STATEMENT.Not* ignored

TagPolicy()
ListPolicyTags()
UntagPolicy()                 #AWS TAGS
POLICY.Tags                   #RESOURCE_NAME: PolicyArn POLICY_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POLICY CONDITION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATEMENT.Condition           #VAL|'*'[_ARR]
 .CONDITION_TEST.POLICYVAR    #Applies STATEMENT only if CONDITION_TEST(POLICYVAR, VAL[_ARR]) is true

CONDITION_TEST                #Any of the following
ForAnyValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) || ...
ForAllValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) && ...
CONDITION_TESTIfExists
 (VAL, VAL2)                  #Adds: VAL !== undefined
Null(VAL, BOOL)               #VAL ===|!== undefined
Bool(BOOL, BOOL2)             #BOOL === BOOL2
String[Not]Equals[IgnoreCase]
 (STR, STR2)                  #STR ===|!== STR2
String[Not]Like(STR, 'GLOB')  #STR =~|!=~ 'GLOB'
Numeric[Not]Equals(NUM, NUM2) #NUM ===|!== NUM2
NumericLess|GreaterThan
 [Equals](NUM, NUM2)          #NUM <|<=|>|>= NUM2
Date[Not]Equals
 ('DATE', 'DATE2')            #DATE ===|!== DATE2
DateLess|GreaterThan
 [Equals]('DATE', 'DATE2')    #DATE <|<=|>|>= DATE2
BinaryEquals(BUFFER, 'BASE64')#BUFFER === 'BASE64'
Arn[Not]Equals('ARN', 'ARN2') #'ARN' ===|!== 'ARN2'
Arn[Not]Like('ARN', 'GLOB')   #'ARN' =~|!=~ 'GLOB'
[Not]IpAddress('IP', 'IP2')   #'IP' =~ 'IP2' (can use mask)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          POLICY VAR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICYVAR                     #Can be used in:
                              #  - CONDITION_TEST.POLICYVAR key
                              #  - CONDITION_TEST.POLICYVAR value, as ${POLICYVAR}
                              #  - 'POLICY', as ${POLICYVAR}
                              #If ${POLICYVAR}, can preprend|append STR.
                              #Can be any of the following values
                              #  - some AWS services define their own too
aws:PrincipalType             #Whether principal is:
                              #  - "Account":
                              #     - Principal ACCOUNT_ID|ROOT_ARN
                              #     - aws:userid === ACCOUNT_ID
                              #  - "User":
                              #     - Principal USER_ARN|GROUP_ARN|ROLE_ARN
                              #     - aws:username|userid defined
                              #  - "FederatedUser":
                              #     - Principal FEDERATED_USER_ARN, 'SERVICE.amazonaws.com' or 'DOMAIN'
                              #  - "Anonymous":
                              #     - Principal '*'
                              #  - "AssumedRole":
                              #     - Principal INSTANCE_PROFILE_ARN|ASSUMED_ROLE_ARN or SAML_PROVIDER_ARN
                              #     - aws:userid === 'ROLE_ID:CALLER' (not if SAML)
aws:username                  #STR
aws:userid                    #STR
aws:CurrentTime               #"YYYY-MM-DDTHH:MM:SSZ"
aws:EpochTime                 #NUM
aws:TokenIssueTime            #"YYYY-MM-DDTHH:MM:SSZ". For STS temp tokens
aws:MultiFactorAuthAge        #NUM (in secs). For MFA tokens
aws:SecureTransport           #BOOL. Whether use SSL
aws:SourceArn                 #ARN of a AWS service (like SQS) if it is the principal
aws:SourceOwner               #ACCOUNT_ID. Same with AWS service owner
aws:SourceIp                  #'IP'
aws:UserAgent                 #STR
aws:FederatedProvider         #'DOMAIN'. If Principal 'DOMAIN'
DOMAIN:aud
DOMAIN:sub
DOMAIN:id
DOMAIN:app_id
DOMAIN:user_id                #STR. If Principal 'DOMAIN'
saml:...                      #Same as DOMAIN:... but for SAML
cognito-identity.
 amazonaws.com:amr            #["unauthenticated"] or ["authenticated", DOMAIN]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       INSTANCE PROFILE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateInstanceProfile()       #Request parameters:
                              #  - InstanceProfileName NAME
                              #  - Path PATH
                              #Response body: InstanceProfile INSTANCE_PROFILE_OBJ:
                              #  - Arn
                              #  - CreateDate DATE
                              #  - InstanceProfileId
                              #  - InstanceProfileName
                              #  - Path
                              #  - Roles ROLE_OBJ_ARR
DeleteInstanceProfile()       #Request parameters: InstanceProfileName
GetInstanceProfile()          #Request parameters: InstanceProfileName
                              #Response body: InstanceProfile INSTANCE_PROFILE_OBJ
ListInstanceProfiles()        #Request parameters: PathPrefix
                              #Response body: InstanceProfiles INSTANCE_PROFILE_OBJ_ARR

Add|                          #Request parameters:
RemoveRoleToInstanceProfile() #  - InstanceProfileName
                              #  - RoleName
ListInstanceProfilesForRole() #Request parameters: RoleName
                              #Response body: InstanceProfiles INSTANCE_PROFILE_OBJ_ARR

INSTANCE_PROFILE              #Container for a ROLE: 1 instance profile -> 1 role
                              #Used by ec2:runInstances IamInstanceProfile to make EC2 instance call sts:AssumedRole at launch time
                              #Max 100
INSTANCE_PROFILE_ARN          #'arn:aws:iam::ACCOUNT_ID:instance-profile[/PATH]/NAME'

TagInstanceProfile()
ListInstanceProfileTags()
UntagInstanceProfile()        #AWS TAGS
INSTANCE_PROFILE.Tags         #RESOURCE_NAME: InstanceProfileName 'INSTANCE_PROFILE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateSAMLProvider()          #Request parameters:
                              #  - Name
                              #  - SAMLMetadataDocument
                              #Response body: SAMLProviderArn
UpdateSAMLProvider()          #Request parameters:
                              #  - SAMLProviderArn
                              #  - SAMLMetadataDocument
                              #Response body: SAMLProviderArn
DeleteSAMLProvider()          #Request parameters: SAMLProviderArn
GetSAMLProvider()             #Request parameters: SAMLProviderArn
                              #Response body:
                              #  - SAMLMetadataDocument
                              #  - CreateDate DATE
                              #  - ValidUntil DATE
ListSAMLProviders()           #Response body: SAMLProviderList OBJ_ARR:
                              #  - Arn
                              #  - CreateDate DATE
                              #  - ValidUntil DATE

SAML PROVIDER                 #To interoperate existing authentication system with AWS using SAML
                              #Max 100
SAML_PROVIDER_ARN             #'arn:aws:iam::ACCOUNT_ID:saml-provider[/PATH]/NAME'
TagSAMLProvider()
ListSAMLProviderTags()
UntagSAMLProvider()           #AWS TAGS
SAML_PROVIDER.Tags            #RESOURCE_NAME: SAMLProviderArn SAML_PROVIDER_ARN

IDENTITY PROVIDER LIMITS ==>  #Max 10 per SAML provider
SAML KEY LIMITS ==>           #Max 10 per SAML provider


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              MFA              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EnableMFADevice()             #Request parameters:
                              #  - AuthenticationCode1|2
                              #  - SerialNumber
                              #  - UserName
ResyncMFADevice()             #Same request parameters as EnableMFADevice()
DeactivateMFADevice()         #Request parameters:
                              #  - SerialNumber
                              #  - UserName
ListMFADevices()              #Request parameters: UserName
                              #Response body: MFADevices OBJ_ARR:
                              #  - EnableDate DATE
                              #  - SerialNumber STR
                              #  - UserName STR

TagMFADevice()
ListMFADeviceTags()
UntagMFADevice()              #AWS TAGS
MFA_DEVICE.Tags               #RESOURCE_NAME: SerialNumber MFA_DEVICE_ARN

MFA ==>                       #User-specific
                              #Additional code[s] generated by:
                              #  - mobile app (with|without QR code)
                              #  - hardware device ID
                              #Need to redo it sometimes (synchronizing)
                              #Can deactivate
                              #Max 1 per user
MFA_ARN                       #'arn:aws:iam::ACCOUNT_ID:mfa[/PATH]/NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VIRTUAL MFA          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateVirtualMFADevice()      #Request parameters:
                              #  - Path
                              #  - VirtualMFADeviceName
                              #Response body: VirtualMFADevice VIRTUAL_MFA_OBJ:
                              #  - Base32StringSeed BLOB
                              #  - EnableDate DATE
                              #  - QRCodePNG BLOB
                              #  - SerialNumber
                              #  - User USER_OBJ
DeleteVirtualMFADevice()      #Request parameters: SerialNumber
ListVirtualMFADevices()       #Request parameters: AssignmentStatus "Assigned|Unassigned|Any"
                              #Response body: VirtualMFADevices VIRTUAL_MFA_OBJ_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVER CERTIFICATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadServerCertificate()     #Request parameters:
                              #  - CertificateBody STR: X.509 certificate in PEM format
                              #  - CertificateChain STR: concatenation of public keys in PEM format
                              #  - PrivateKey STR: private key in PEM format
                              #  - ServerCertificateName NAME
                              #  - Path PATH (optional)
                              #Response body:
                              #  - ServerCertificateMetadata CERT_METADATA_OBJ
UpdateServerCertificate()     #Request parameters:
                              #  - NewPath
                              #  - ServerCertificateName
                              #  - NewServerCertificateName
DeleteServerCertificate()     #Request parameters: ServerCertificateName
GetServerCertificate()        #Request parameters: ServerCertificateName
                              #Response body: ServerCertificate:
                              #  - CertificateBody
                              #  - CertificateChain
                              #  - ServerCertificateMetadata CERT_METADATA_OBJ:
                              #     - Arn
                              #     - Expiration
                              #     - Path
                              #     - ServerCertificateId
                              #     - ServerCertificateName
                              #     - UploadDate DATE
ListServerCertificates()      #Request parameters: PathPrefix
                              #Response body: ServerCertificateMetadataList CERT_METADATA_OBJ_ARR

SERVER_CERTIFICATE            #X.509 certificates used by ELB, CloudFront and OpsWorks
                              #Still need to create X.509 certificates manually
                              #Max 20
SERVER_CERTIFICATE_ARN        #'arn:aws:iam::ACCOUNT_ID:server-certificate[/PATH]/NAME'
TagServerCertificate()
ListServerCertificateTags()
UntagServerCertificate()      #AWS TAGS
SERVER_CERTIFICATE.Tags       #RESOURCE_NAME: ServerCertificateName 'SERVER_CERTIFICATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SIGNING CERTIFICATE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSigningCertificate()    #Request parameters:
                              #  - CertificateBody STR: X.509 certificate in PEM format
                              #  - UserName
                              #Response body: Certificate CERT_OBJ:
                              #  - CertificateBody
                              #  - CertificateId
                              #  - Status "Active|Inactive"
                              #  - UploadDate DATE
                              #  - UserName
UpdateSigningCertificate()    #Request parameters:
                              #  - CertificateId
                              #  - Status "Active|Inactive"
                              #  - Username
                              #Response body: Certificate CERT_OBJ
DeleteSigningCertificate()    #Request parameters:
                              #  - CertificateId
                              #  - UserName
ListSigningCertificates()     #Request parameters: UserName
                              #Response body: Certificates CERT_OBJ_ARR

SIGNING_CERTIFICATE           #Client X.509 certificate.
                              #Deprecated
                              #Max 2 per user


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GenerateCredentialReport()    #Response body:
                              #  - Description
                              #  - State "STARTED|INPROGRESS|COMPLETE"
GetCredentialReport()         #Response body:
                              #  - Content 'BASE64', CSV has following fields:
                              #     - user, arn, user_ctime
                              #     - password_enabled|last_changed|next_rotation
                              #     - mfa_active
                              #     - access_key|cert_1|2_active|last_rotated
                              #  - GeneratedTime DATE
                              #  - ReportFormat 'MIME'

GetAccountSummary()           #Response body: SummaryMap:
                              #  - AccessKeysPerUserQuota NUM
                              #  - AccountMFAEnabled NUM
                              #  - AssumeRolePolicySizeQuota NUM
                              #  - GroupPolicySizeQuota NUM
                              #  - Groups[Quota] NUM
                              #  - GroupsPerUserQuota NUM
                              #  - InstanceProfiles[Quota] NUM
                              #  - MFADevices[InUse] NUM
                              #  - RolePolicySizeQuota NUM
                              #  - Roles[Quota] NUM
                              #  - ServerCertificates[Quota] NUM
                              #  - SigningCertificatesPerUserQuota NUM
                              #  - UserPolicySizeQuota NUM
                              #  - Users[Quota] NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              STS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STS ==>                       #Security Token Service.
                              #One-time passwords
                              #Used with user|roles
                              #Only option if client-side
                              #  - in order to keep user's access key secret
                              #  - including mobile app
                              #  - usually through login options
                              #Not with CloudHSM, Beanstalk, FPS, FWS, Marketplace Management Portal, Mechanical Turk, WorkSpaces

ROLES ==>                     #Sets of policies, that temp tokens requesters "assume".

CREATING TEMP TOKENS ==>      #Uses API calls:
                              #  - Role-based:
                              #     - AssumeRole: AWS account-based or AWS service-based roles
                              #     - AssumeRoleWithWebIdentity: other logins-based roles
                              #     - AssumeRoleWithSAML: SAML-based roles
                              #  - Same permissions as another user:
                              #     - GetSessionToken: normal users.
                              #     - GetFederationToken: proxy-based roles
                              #Permissions:
                              #  - anyone (except root) can assume a ROLE, so policy sts:* with Condition must be set
                              #    (usually in AssumeRolePolicyDocument)
                              #     - exception: to use ec2:RunInstances() with instance profile, USER must also have
                              #       permission iam:PassRole on ROLE_ARN
                              #     - It is also good idea to give user iam:ListInstanceProfiles permission
                              #  - get policies of ROLE, including default POLICY (AssumeRolePolicyDocument)
                              #  - Permission is sts:AssumeRole for all except sts:GetFederationToken
                              #Credentials are temp and include a SessionToken, to include with other credentials in calls.

getSessionToken()             #Request parameters:
                              #  - DurationSeconds NUM
                              #  - SerialNumber STR, TokenCode STR
                              #Response body:
                              #  - Credentials CREDENTIALS (temp):
                              #     - AccessKeyId ACCESS_KEY_ID
                              #     - SecretAccessKey SECRET_ACCESS_KEY
                              #     - SessionToken SESSION_TOKEN
                              #     - Expiration DATE
GetFederationToken()          #Request parameters:
                              #  - DurationSeconds NUM
                              #  - Name STR
                              #  - Policy POLICY
                              #Response body:
                              #  - Credentials CREDENTIALS (temp):
                              #  - FederatedUser:
                              #     - Arn
                              #     - FederatedUserId STR
                              #  - PackedPolicySize NUM

AssumeRole()                  #Request parameters:
                              #  - RoleArn ROLE_ARN: ROLE to assume
                              #  - RoleSessionName NAME: temporary session NAME
                              #  - DurationSeconds NUM:
                              #     - min. 15 min, max 36h (def: 12h) for GetSession|FederationToken (except if root)
                              #     - min. 15 min, max. 1h (def) for others
                              #  - ExternalId STR
                              #     - becomes POLICYVAR sts:ExternalId, shared secret for further restrictions (policy must
                              #       use Condition to check it)
                              #  - Policy 'POLICY': optional extra policy OBJ (only to restrict more)
                              #  - SerialNumber STR, TokenCode STR: if MFA
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER:
                              #     - Arn ROLE_ARN/NAME
                              #     - AssumedRoleId
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM: percentage of allowed max. size
AssumeRoleWithSAML()          #Request parameters:
                              #  - RoleArn
                              #  - DurationSeconds NUM
                              #  - Policy 'POLICY'
                              #  - PrincipalArn SAML_PROVIDER_ARN
                              #  - SAMLAssertion 'BASE64'
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM
                              #  - Audience|Issuer STR
                              #  - Subject STR
                              #  - SubjectType STR
                              #  - NameQualifier STR: Hash(Issuer, ACCOUNT_ID, SAML_PROVIDER_ARN), identifying a user
AssumeRoleWithWebIdentity()   #Request parameters:
                              #  - RoleArn
                              #  - RoleSessionName
                              #  - DurationSeconds NUM
                              #  - Policy 'POLICY'
                              #  - ProviderId DOMAIN
                              #  - WebIdentityToken 'OAUTH2_TOKEN'
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM
                              #  - Audience STR
                              #  - Provider STR
                              #  - SubjectFromWebIdentity STR: identifying a user

DecodeAuthorizationMessage()  #Permission error sometimes gives an "encoded authorization failure message" token, that needs
                              #to be decoded.
                              #Request parameters: EncodedMessage STR
                              #Response body: DecodedMessage STR

ASSUMED_ROLE_ARN              #'arn:aws:iam::ACCOUNT_ID:assumed-role[/PATH]/NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OPENID             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TagOpenIDConnectProvider()
ListOpenIDConnectProviderTags
 ()
UntagOpenIDConnectProvider()  #AWS TAGS
OPEN_ID_CONNECT_PROVIDER.Tags #RESOURCE_NAME: OpenIDConnectProviderArn OPEN_ID_CONNECT_PROVIDER_ARN

