
           
   IAM STS  
           



VERSION ==>                   #2014-07-16

GOAL ==>                      #Multiple accounts/groups for same organization:
                              #  - one root (AWS account)
                              #     - associated with:
                              #        - an ACCOUNT_ID:
                              #           - can have 1 alias [[:alnum:]-] (hyphen only in middle)
                              #        - a CANONICAL_ACCOUNT_ID: longer version, used in very specific cases
                              #     - Should only use web app (password) and not programatic use (access keys)
                              #  - multiple IAM users
                              #  - using MFA device, 1-time password, server SSL certificates
                              #  - applying permissions for actions on resources, organizing in groups
                              #  - temporary tokens and users (roles), e.g. for EC2 instances
                              #  - integration of SAML, other logins (Facebook, etc.)

PRICING ==>                   #Free
                              #Can be used to consolidate billing

GROUP LIMITS ==>              #Max 100 total, 10 per user
USER LIMITS ==>               #Max 5000
ACCESS KEY LIMITS ==>         #Max 2 per user
SIGNING CERTIFICATE LIMITS ==>#Max 2 per user
MFA LIMITS ==>                #Max 1 per user
LOGIN PROFILE LIMITS ==>      #Max 1 per user
ROLE LIMITS ==>               #Max 250 total, 1 per instance profile
INSTANCE PROFILE LIMITS ==>   #Max 100
SERVER CERTIFICATE LIMITS ==> #Max 20
SAML PROVIDER LIMITS ==>      #Max 100
IDENTITY PROVIDER LIMITS ==>  #Max 10 per SAML provider
SAML KEY LIMITS ==>           #Max 10 per SAML provider

IAM_RESOURCE_ARN              #arn:aws:iam::ACCOUNT_ID:PATH/RESOURCE
ROOT_ARN                      #arn:aws:iam::ACCOUNT_ID:root
USER_ARN                      #arn:aws:iam::ACCOUNT_ID:user[/PATH]/NAME
GROUP_ARN                     #arn:aws:iam::ACCOUNT_ID:group[/PATH]/NAME
ROLE_ARN                      #arn:aws:iam::ACCOUNT_ID:role[/PATH]/NAME
INSTANCE_PROFILE_ARN          #arn:aws:iam::ACCOUNT_ID:instance-profile[/PATH]/NAME
FEDERATED_USER_ARN            #arn:aws:iam::ACCOUNT_ID:federated-user[/PATH]/NAME
MFA_ARN                       #arn:aws:iam::ACCOUNT_ID:mfa[/PATH]/NAME
SERVER_CERTIFICATE_ARN        #arn:aws:iam::ACCOUNT_ID:server-certificate[/PATH]/NAME
SAML_PROVIDER_ARN             #arn:aws:iam::ACCOUNT_ID:saml-provider[/PATH]/NAME
ASSUMED_ROLE_ARN              #arn:aws:iam::ACCOUNT_ID:assumed-role[/PATH]/NAME


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONCEPTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AUTHENTICATION ==>            #Used to check IAM policies
                              #Some services (e.g. S3) can allow anonymous (by using resource-based policy with Principal: "*")

CREDENTIALS ==>               #Can use any of:
                              #  - Login profiles
                              #     - for web app:
                              #        - for root: email address and password
                              #        - for non-root: username and password
                              #           - can sign-in at https://ACCOUNT_ID.signin.aws.amazon.com/console/
                              #     - ASCII
                              #     - password policy:
                              #        - does not apply to root
                              #        - constraints: min length, specific chars
                              #        - whether to allow changing
                              #        - expiration (and prevent reusing, and force contacting admin if did not change before expiration)
                              #  - Access key (for programmatic use): ACCESS_KEY_ID (20 chars) + SECRET_ACCESS_KEY (40 chars)
                              #     - SECRET_ACCESS_KEY can only be retrieved during signup
                              #     - Can be temp and accompanied by a SESSION_TOKEN (see STS)
                              #  - Asym key pairs (only EC2 and CloudFront)
                              #  - Signing certificates (client X.509 certs, deprecated)
                              #New users have no credentials.

STS ==>                       #Security Token Service:
                              #  - one-time passwords
                              #     - used with roles
                              #     - or used for normal users
                              #  - only option if client-side (including mobile app) in order to keep user's access key secret.
                              #    Usually through login options.
                              #  - not possible with CloudHSM, Beanstalk, FPS, FWS, Marketplace Management Portal,
                              #    Mechanical Turk, WorkSpaces

USERS ==>                     #  - Users: real person / non-AWS application
                              #  - Groups: of users.
                              #     - User can belong to 0, 1 or several groups.
                              #     - Easier to manage group permissions that users
                              #     - Good idea to create admin group that can do everything (Action: "*", Resource: "*")
                              #       instead of using root
                              #  - Roles:
                              #     - like a group with temporary assigned users:
                              #        - only use temp tokens (STS) and no long-term credentials
                              #        - AssumeRolePolicyDocument:
                              #           - default policy
                              #           - Must specify sts:ACTION
                              #           - Must specify Principal
                              #        - Everyone can assume the role, so must set conditions in sts:ACTION
                              #        - use trust policy (who is allowed to assume the role):
                              #           - AWS service (e.g. EC2 instance)
                              #           - AWS account (cross-account API access)
                              #           - SAML provider
                              #           - other logins (e.g. login with Facebook, Google, etc.)
                              #           - custom proxy authentication system
                              #     - instance profile:
                              #        - container for roles (1 instance profile -> 1 role)
                              #        - used by ec2:runInstances IamInstanceProfile to make EC2 instance call sts:AssumedRole at launch time

PRINCIPAL ==>                 #Who is being permitted.
                              #User, group or AWS service.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTHORIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY                        #Set of permissions.
                              #One principal|resource can have multiple POLICYs (that are and'd).
'POLICY'                      #POLICY JSON-stringified
POLICY.Version                #'2012-10-17'

POLICY.Statement              #STATEMENT_ARR
                              #Statements are and'd
STATEMENT                     #Single permission
STATEMENT.Id|Sid              #Optional ID|sub-ID.
                              #Id should be unique, e.g. including a GUID
                              #For IAM policies, Id = Sid
STATEMENT.Effect              #'Allow|Deny'
                              #By default, no ACTION permitted
                              #  - i.e. at least one 'Allow' must match
                              #If at least one 'Deny' matches, not permitted
                              #  - even if one 'Alllow' matches
STATEMENT.[Not]Action         #'SERVICE:SDK_ACTION'_ARR
                              #SERVICE:
                              #  - AWS service name
                              #  - lowercased
                              #SDK_ACTION:
                              #  - REST method name
                              #  - capitalized
                              #  - can use wildcard *

STATEMENT.[Not]Resource       #Resource ARN[_ARR]
                              #POLICY must be assigned to a principal.
STATEMENT.[Not]Principal      #Principal identifier.
                              #POLICY must be assigned to a resource.
                              #Only for S3, SNS, SQS, OpsWork, and trust policies
                              #Can be:
                              #  - ACCOUNT_ID|ROOT_ARN|USER_ARN|GROUP_ARN|ROLE_ARN|INSTANCE_PROFILE_ARN|FEDERATED_USER_ARN|ASSUMED_ROLE_ARN[_ARR]
                              #     - ACCOUNT_ID is same as ROOT_ARN
                              #  - "SERVICE.amazonaws.com"
                              #  - "*"
                              #     - only for S3
                              #  - CANONICAL_ACCOUNT_ID
                              #     - only for S3
                              #  - 'DOMAIN'
                              #     - for logins-based roles, e.g. accounts.google.com
                              #     - should use Condition to test DOMAIN:aud|app_id
                              #  - SAML_PROVIDER_ARN
                              #     - should use Condition to test saml:aud and saml:iss, and maybe others
STATEMENT.NotAction
STATEMENT.NotResource         #Like STATEMENT.Action|Resource|Principal but using denylist instead of allowlist
STATEMENT.NotPrincipal        #If both STATEMENT.* and STATEMENT.Not* used, STATEMENT.Not* ignored

STATEMENT.Condition           #VAL|'*'[_ARR]
 .CONDITION_TEST.POLICYVAR    #Applies STATEMENT only if CONDITION_TEST(POLICYVAR, VAL[_ARR]) is true

CONDITION_TEST                #Any of the following
ForAnyValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) || ...
ForAllValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) && ...
CONDITION_TESTIfExists
 (VAL, VAL2)                  #Adds: VAL !== undefined
Null(VAL, BOOL)               #VAL ===|!== undefined
Bool(BOOL, BOOL2)             #BOOL === BOOL2
String[Not]Equals[IgnoreCase]
 (STR, STR2)                  #STR ===|!== STR2
String[Not]Like(STR, 'GLOB')  #STR =~|!=~ 'GLOB'
Numeric[Not]Equals(NUM, NUM2) #NUM ===|!== NUM2
NumericLess|GreaterThan
 [Equals](NUM, NUM2)          #NUM <|<=|>|>= NUM2
Date[Not]Equals
 ('DATE', 'DATE2')            #DATE ===|!== DATE2
DateLess|GreaterThan
 [Equals]('DATE', 'DATE2')    #DATE <|<=|>|>= DATE2
BinaryEquals(BUFFER, 'BASE64')#BUFFER === 'BASE64'
Arn[Not]Equals('ARN', 'ARN2') #'ARN' ===|!== 'ARN2'
Arn[Not]Like('ARN', 'GLOB')   #'ARN' =~|!=~ 'GLOB'
[Not]IpAddress('IP', 'IP2')   #'IP' =~ 'IP2' (can use mask)

POLICYVAR                     #Can be used in:
                              #  - CONDITION_TEST.POLICYVAR key
                              #  - CONDITION_TEST.POLICYVAR value, as ${POLICYVAR}
                              #  - 'POLICY', as ${POLICYVAR}
                              #If ${POLICYVAR}, can preprend|append STR.
                              #Can be any of the following values
                              #  - some AWS services define their own too
aws:PrincipalType             #Whether principal is:
                              #  - "Account":
                              #     - Principal ACCOUNT_ID|ROOT_ARN
                              #     - aws:userid === ACCOUNT_ID
                              #  - "User":
                              #     - Principal USER_ARN|GROUP_ARN|ROLE_ARN
                              #     - aws:username|userid defined
                              #  - "FederatedUser":
                              #     - Principal FEDERATED_USER_ARN, 'SERVICE.amazonaws.com' or 'DOMAIN'
                              #  - "Anonymous":
                              #     - Principal '*'
                              #  - "AssumedRole":
                              #     - Principal INSTANCE_PROFILE_ARN|ASSUMED_ROLE_ARN or SAML_PROVIDER_ARN
                              #     - aws:userid === 'ROLE_ID:CALLER' (not if SAML)
aws:username                  #STR
aws:userid                    #STR
aws:CurrentTime               #"YYYY-MM-DDTHH:MM:SSZ"
aws:EpochTime                 #NUM
aws:TokenIssueTime            #"YYYY-MM-DDTHH:MM:SSZ". For STS temp tokens
aws:MultiFactorAuthAge        #NUM (in secs). For MFA tokens
aws:SecureTransport           #BOOL. Whether use SSL
aws:SourceArn                 #ARN of a AWS service (like SQS) if it is the principal
aws:SourceOwner               #ACCOUNT_ID. Same with AWS service owner
aws:SourceIp                  #'IP'
aws:UserAgent                 #STR
aws:FederatedProvider         #'DOMAIN'. If Principal 'DOMAIN'
DOMAIN:aud
DOMAIN:sub
DOMAIN:id
DOMAIN:app_id
DOMAIN:user_id                #STR. If Principal 'DOMAIN'
saml:...                      #Same as DOMAIN:... but for SAML
cognito-identity.
 amazonaws.com:amr            #["unauthenticated"] or ["authenticated", DOMAIN]

MFA ==>                       #User-specific
                              #Additional code[s] generated by:
                              #  - mobile app (with|without QR code)
                              #  - hardware device ID
                              #Need to redo it sometimes (synchronizing)
                              #Can deactivate

SAML PROVIDER ==>             #To interoperate existing authentication system with AWS using SAML

SERVER CERTIFICATES ==>       #X.509 certificates used by ELB, CloudFront and OpsWorks
                              #Still need to create X.509 certificates manually


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PAGINATION ==>                #Use request parameters MaxItems (def|max: 100) and Marker STR
                              #Response include IsTruncated BOOL, Marker STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        USER/GROUP/ROLE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateUser|Group|Role()       #Request parameters:
                              #  - User|Group|RoleName NAME
                              #  - Path PATH (must start and end with "/")
                              #  - (Role only) AssumeRolePolicyDocument 'POLICY'
                              #Create user|group|role/[PATH/]NAME
                              #Response: User|Group|Role USER|GROUP|ROLE_OBJ:
                              #  - Arn ARN
                              #  - CreateDate DATE
                              #  - User|Group|RoleId USER|GROUP|ROLE_ID
                              #  - User|Group|RoleName NAME
                              #  - Path PATH
                              #  - (Role only) AssumeRolePolicyDocument 'POLICY'
DeleteUser|Group|Role()       #Request parameters: User|Group|RoleName
GetUser|Group|Role()          #Request parameters: User|Group|RoleName
                              #Response:
                              #  - User|Group|Role USER|GROUP|ROLE_OBJ
                              #  - (Group only) Users USER_OBJ_ARR
UpdateUser|Group()            #Request parameters:
                              #  - User|GroupName
                              #  - NewUser|GroupName
                              #  - NewPath
ListUsers|Groups[ForUser]|    #Request parameters: PathPrefix or (if "ForUser") UserName
Roles()                       #Response: Users|Groups|Roles USER|GROUP|ROLE_OBJ
                              #Paginates
Add|RemoveUserToGroup()       #Request parameters:
                              #  - GroupName
                              #  - UserName

Create|DeleteAccountAlias()   #Request parameters: AccountAlias
ListAccountAliases()          #Response: AccountAliases STR_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CREDENTIALS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccessKey()             #Request parameters: UserName
                              #Response: AccessKey ACCESS_KEY_OBJ:
                              #  - AccessKeyId
                              #  - SecretAccessKey
                              #  - UserName
                              #  - CreateDate DATE
                              #  - Status "Active|Inactive"
DeleteAccessKey()             #Request parameters: AccessKeyId, UserName
UpdateAccessKey()             #Request parameters: AccessKeyId, Status, UserName
ListAccessKeys()              #Request parameters: UserName
                              #Response: AccessKeyMetadata ACCESS_KEY_OBJ (all but SecretAccessKey)
                              #Paginates

ChangePassword()              #Request parameters: Old|NewPassword
UpdateAccountPasswordPolicy() #Request parameters PASSWORD_POLICY:
                              #  - AllowUsersToChangePassword BOOL (def: false)
                              #  - ExpirePasswords BOOL
                              #  - MaxPasswordAge NUM (in days)
                              #  - HardExpiry BOOL: can change expired password (and not before it expires)
                              #  - MinimumPasswordLength NUM (def: 6)
                              #  - PasswordReusePrevention NUM
                              #  - RequireLowercaseCharacters BOOL
                              #  - RequireNumbers BOOL
                              #  - RequireSymbols BOOL
                              #  - RequireUppercaseCharacters BOOL
DeleteAccountPasswordPolicy() #
GetAccountPasswordPolicy()    #Response: PasswordPolicy PASSWORD_POLICY

CreateLoginProfile()          #Request parameters:
                              #  - Password
                              #  - PasswordResetRequired BOOL (def: false)
                              #  - UserName
                              #Response:
                              #  - LoginProfile LOGIN_PROFILE_OBJ:
                              #     - CreateDate DATE
                              #     - PasswordResetRequired BOOL
                              #     - UserName
UpdateLoginProfile()          #Same request parameters as CreateLoginProfile()
DeleteLoginProfile()          #Request parameters: UserName
GetLoginProfile()             #Request parameters: UserName
                              #Response: LoginProfile LOGIN_PROFILE_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUser|Group|RolePolicy()    #Request parameters POLICY_INFO:
                              #  - PolicyDocument 'POLICY'
                              #  - PolicyName
                              #  - User|Group|RoleName
UpdateAssumeRolePolicy()      #Request parameters:
                              #  - PolicyDocument 'POLICY'
                              #  - RoleName
DeleteUser|Group|RolePolicy() #Request parameters: POLICY_INFO (wihout PolicyDocument)
GetUser|Group|RolePolicy()    #Request parameters: POLICY_INFO (wihout PolicyDocument)
                              #Response: POLICY_INFO
ListUser|Group|RolesPolicies()#Request parameters:
                              #  - User|Group|RoleName
                              #Response:
                              #  - PolicyNames STR_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       INSTANCE PROFILE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateInstanceProfile()       #Request parameters:
                              #  - InstanceProfileName NAME
                              #  - Path PATH
                              #Response: InstanceProfile INSTANCE_PROFILE_OBJ:
                              #  - Arn
                              #  - CreateDate DATE
                              #  - InstanceProfileId
                              #  - InstanceProfileName
                              #  - Path
                              #  - Roles ROLE_OBJ_ARR
DeleteInstanceProfile()       #Request parameters: InstanceProfileName
GetInstanceProfile()          #Request parameters: InstanceProfileName
                              #Response: InstanceProfile INSTANCE_PROFILE_OBJ
ListInstanceProfiles()        #Request parameters: PathPrefix
                              #Response: InstanceProfiles INSTANCE_PROFILE_OBJ_ARR
                              #Paginates

Add|                          #Request parameters:
RemoveRoleToInstanceProfile() #  - InstanceProfileName
                              #  - RoleName
ListInstanceProfilesForRole() #Request parameters: RoleName
                              #Response: InstanceProfiles INSTANCE_PROFILE_OBJ_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SAML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateSAMLProvider()          #Request parameters:
                              #  - Name
                              #  - SAMLMetadataDocument
                              #Response: SAMLProviderArn
UpdateSAMLProvider()          #Request parameters:
                              #  - SAMLProviderArn
                              #  - SAMLMetadataDocument
                              #Response: SAMLProviderArn
DeleteSAMLProvider()          #Request parameters: SAMLProviderArn
GetSAMLProvider()             #Request parameters: SAMLProviderArn
                              #Response:
                              #  - SAMLMetadataDocument
                              #  - CreateDate DATE
                              #  - ValidUntil DATE
ListSAMLProviders()           #Response: SAMLProviderList OBJ_ARR:
                              #  - Arn
                              #  - CreateDate DATE
                              #  - ValidUntil DATE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              MFA              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EnableMFADevice()             #Request parameters:
                              #  - AuthenticationCode1|2
                              #  - SerialNumber
                              #  - UserName
ResyncMFADevice()             #Same request parameters as EnableMFADevice()
DeactivateMFADevice()         #Request parameters:
                              #  - SerialNumber
                              #  - UserName
ListMFADevices()              #Request parameters: UserName
                              #Response: MFADevices OBJ_ARR:
                              #  - EnableDate DATE
                              #  - SerialNumber STR
                              #  - UserName STR
                              #Paginates

CreateVirtualMFADevice()      #Request parameters:
                              #  - Path
                              #  - VirtualMFADeviceName
                              #Response: VirtualMFADevice VIRTUAL_MFA_OBJ:
                              #  - Base32StringSeed BLOB
                              #  - EnableDate DATE
                              #  - QRCodePNG BLOB
                              #  - SerialNumber
                              #  - User USER_OBJ
DeleteVirtualMFADevice()      #Request parameters: SerialNumber
ListVirtualMFADevices()       #Request parameters: AssignmentStatus "Assigned|Unassigned|Any"
                              #Response: VirtualMFADevices VIRTUAL_MFA_OBJ_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVER CERTIFICATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadServerCertificate()     #Request parameters:
                              #  - CertificateBody STR: X.509 certificate in PEM format
                              #  - CertificateChain STR: concatenation of public keys in PEM format
                              #  - PrivateKey STR: private key in PEM format
                              #  - ServerCertificateName NAME
                              #  - Path PATH (optional)
                              #Response:
                              #  - ServerCertificateMetadata CERT_METADATA_OBJ
UpdateServerCertificate()     #Request parameters:
                              #  - NewPath
                              #  - ServerCertificateName
                              #  - NewServerCertificateName
DeleteServerCertificate()     #Request parameters: ServerCertificateName
GetServerCertificate()        #Request parameters: ServerCertificateName
                              #Response: ServerCertificate:
                              #  - CertificateBody
                              #  - CertificateChain
                              #  - ServerCertificateMetadata CERT_METADATA_OBJ:
                              #     - Arn
                              #     - Expiration
                              #     - Path
                              #     - ServerCertificateId
                              #     - ServerCertificateName
                              #     - UploadDate DATE
ListServerCertificates()      #Request parameters: PathPrefix
                              #Response: ServerCertificateMetadataList CERT_METADATA_OBJ_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      CLIENT CERTIFICATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSigningCertificate()    #Request parameters:
                              #  - CertificateBody STR: X.509 certificate in PEM format
                              #  - UserName
                              #Response: Certificate CERT_OBJ:
                              #  - CertificateBody
                              #  - CertificateId
                              #  - Status "Active|Inactive"
                              #  - UploadDate DATE
                              #  - UserName
UpdateSigningCertificate()    #Request parameters:
                              #  - CertificateId
                              #  - Status "Active|Inactive"
                              #  - Username
                              #Response: Certificate CERT_OBJ
DeleteSigningCertificate()    #Request parameters:
                              #  - CertificateId
                              #  - UserName
ListSigningCertificates()     #Request parameters: UserName
                              #Response: Certificates CERT_OBJ_ARR
                              #Paginates


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REPORTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GenerateCredentialReport()    #Response:
                              #  - Description
                              #  - State "STARTED|INPROGRESS|COMPLETE"
GetCredentialReport()         #Response:
                              #  - Content 'BASE64', CSV has following fields:
                              #     - user, arn, user_ctime
                              #     - password_enabled|last_changed|next_rotation
                              #     - mfa_active
                              #     - access_key|cert_1|2_active|last_rotated
                              #  - GeneratedTime DATE
                              #  - ReportFormat 'MIME'

GetAccountSummary()           #Response: SummaryMap:
                              #  - AccessKeysPerUserQuota NUM
                              #  - AccountMFAEnabled NUM
                              #  - AssumeRolePolicySizeQuota NUM
                              #  - GroupPolicySizeQuota NUM
                              #  - Groups[Quota] NUM
                              #  - GroupsPerUserQuota NUM
                              #  - InstanceProfiles[Quota] NUM
                              #  - MFADevices[InUse] NUM
                              #  - RolePolicySizeQuota NUM
                              #  - Roles[Quota] NUM
                              #  - ServerCertificates[Quota] NUM
                              #  - SigningCertificatesPerUserQuota NUM
                              #  - UserPolicySizeQuota NUM
                              #  - Users[Quota] NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              STS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ROLES ==>                     #Sets of policies, that temp tokens requesters "assume".

CREATING TEMP TOKENS ==>      #Uses API calls:
                              #  - Role-based:
                              #     - AssumeRole: AWS account-based or AWS service-based roles
                              #     - AssumeRoleWithWebIdentity: other logins-based roles
                              #     - AssumeRoleWithSAML: SAML-based roles
                              #  - Same permissions as another user:
                              #     - GetSessionToken: normal users.
                              #     - GetFederationToken: proxy-based roles
                              #Permissions:
                              #  - anyone (except root) can assume a ROLE, so policy sts:* with Condition must be set
                              #    (usually in AssumeRolePolicyDocument)
                              #     - exception: to use ec2:RunInstances() with instance profile, USER must also have
                              #       permission iam:PassRole on ROLE_ARN
                              #     - It is also good idea to give user iam:ListInstanceProfiles permission
                              #  - get policies of ROLE, including default POLICY (AssumeRolePolicyDocument)
                              #  - Permission is sts:AssumeRole for all except sts:GetFederationToken
                              #Credentials are temp and include a SessionToken, to include with other credentials in calls.

getSessionToken()             #Request parameters:
                              #  - DurationSeconds NUM
                              #  - SerialNumber STR, TokenCode STR
                              #Response body:
                              #  - Credentials CREDENTIALS (temp):
                              #     - AccessKeyId ACCESS_KEY_ID
                              #     - SecretAccessKey SECRET_ACCESS_KEY
                              #     - SessionToken SESSION_TOKEN
                              #     - Expiration DATE
GetFederationToken()          #Request parameters:
                              #  - DurationSeconds NUM
                              #  - Name STR
                              #  - Policy POLICY
                              #Response body:
                              #  - Credentials CREDENTIALS (temp):
                              #  - FederatedUser:
                              #     - Arn
                              #     - FederatedUserId STR
                              #  - PackedPolicySize NUM

AssumeRole()                  #Request parameters:
                              #  - RoleArn ROLE_ARN: ROLE to assume
                              #  - RoleSessionName NAME: temporary session NAME
                              #  - DurationSeconds NUM:
                              #     - min. 15 min, max 36h (def: 12h) for GetSession|FederationToken (except if root)
                              #     - min. 15 min, max. 1h (def) for others
                              #  - ExternalId STR
                              #     - becomes POLICYVAR sts:ExternalId, shared secret for further restrictions (policy must
                              #       use Condition to check it)
                              #  - Policy 'POLICY': optional extra policy OBJ (only to restrict more)
                              #  - SerialNumber STR, TokenCode STR: if MFA
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER:
                              #     - Arn ROLE_ARN/NAME
                              #     - AssumedRoleId
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM: percentage of allowed max. size
AssumeRoleWithSAML()          #Request parameters:
                              #  - RoleArn
                              #  - DurationSeconds NUM
                              #  - Policy 'POLICY'
                              #  - PrincipalArn SAML_PROVIDER_ARN
                              #  - SAMLAssertion 'BASE64'
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM
                              #  - Audience|Issuer STR
                              #  - Subject STR
                              #  - SubjectType STR
                              #  - NameQualifier STR: Hash(Issuer, ACCOUNT_ID, SAML_PROVIDER_ARN), identifying a user
AssumeRoleWithWebIdentity()   #Request parameters:
                              #  - RoleArn
                              #  - RoleSessionName
                              #  - DurationSeconds NUM
                              #  - Policy 'POLICY'
                              #  - ProviderId DOMAIN
                              #  - WebIdentityToken 'OAUTH2_TOKEN'
                              #Response body:
                              #  - AssumedRoleUser ASSUMED_ROLE_USER
                              #  - Credentials CREDENTIALS
                              #  - PackedPolicySize NUM
                              #  - Audience STR
                              #  - Provider STR
                              #  - SubjectFromWebIdentity STR: identifying a user

DecodeAuthorizationMessage()  #Permission error sometimes gives an "encoded authorization failure message" token, that needs
                              #to be decoded.
                              #Request parameters: EncodedMessage STR
                              #Response body: DecodedMessage STR
