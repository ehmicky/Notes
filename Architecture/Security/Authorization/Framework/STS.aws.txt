
       
   STS  
       



VERSION ==>                       #2023-07-25

IAM ==>                           #Part of IAM: ROLE, INSTANCE_PROFILE, SERVICE_LINKED_ROLE, SAML_PROVIDER, OPENID_PROVIDER, SUMMARY_MAP
                                  #See IAM doc for: CALLER_IDENTITY, ACCESS_KEY_INFO, DECODED_AUTH_MESSAGE

SUMMARY ==>                       #Temporary credentials: expiration, session policy, MFA, region
                                  #Authentication: temp token, federated user, assumed role, SAML, OpenID|OAuth2, bearer token
                                  #Role: trust policy, SourceIndentity|ExternalId, transitive tags
                                  #Service role: service principal, dependent action, async action, standard service role, service linked role, instance profile


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                          #Security Token Service

FORMAT ==>                        #Request: query parameter, with ?Action and ?Version
                                  #Response: XML

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Req: Marker STR, MaxItems STR (def|max: 1e4)
                                  #Res: IsTruncated BOOL, Marker STR

PRICING ==>                       #Free


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGION             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SetSecurityTokenServicePreferences#Req: TOKEN_VERSION
 ()                               #Res: empty

TOKEN_VERSION                     #Either:
 .GlobalEndpointTokenVersion      #  - 'v1Token' (def)
                                  #     - global STS endpoint
                                  #     - does not work in REGIONs not enabled by default (like Hong Kong)
                                  #  - 'v2Token'
                                  #     - REGION-specific STS endpoint
                                  #        - can be manually disabled in the UI
                                  #     - lower latency
                                  #     - works in all REGIONs
                                  #     - longer (more characters)
SUMMARY_MAP
 .GlobalEndpointTokenVersion      #1|2
CONFIG.sts_regional_endpoints
ENVVAR AWS_STS_REGIONAL_ENDPOINTS #'legacy' (def) or 'regional'. For AWS CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CREDENTIALS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEMP_CREDS                        #Temporary credentials
                                  #Must accompany ACCESS_KEY
                                  #Allows:
                                  #  - expiration
                                  #  - not revealing access key secret
                                  #  - session policy, i.e. further restrictions than current user
                                  #Very few SERVICE|ACTIONs are not allowed when authenticated with TEMP_CREDS.
                                  #Also created in the background when using:
                                  #  - the UI, even if authenticated with LOGIN_PROFILE
                                  #  - a DEPENDENT_ACTION
                                  #Prefered over long-term CREDENTIALs
                                  #  - e.g. prefer FEDERATED_USER|ASSUMED_ROLE over USER
TEMP_CREDS.AccessKeyId            #ACCESS_KEY_ID
TEMP_CREDS.SecretAccessKey        #SECRET_ACCESS_KEY
TEMP_CREDS.SessionToken           #'SESSION_TOKEN'.
                                  #To include as part of authentication.

TEMP_CREDS.Expiration             #'DATE'
                                  #Computed by *_REQ.DurationSeconds NUM
                                  #Min: 15m
                                  #With:
                                  #  - SERVICE_ROLE: none
                                  #  - Get*Token(), unless root:
                                  #     - def: 12h, max: 36h
                                  #  - UI login:
                                  #     - def: 1h, max: 12h
                                  #  - otherwise:
                                  #     - def|max: 1h
                                  #     - with AssumeRole*(): max can be changed with ROLE.MaxSessionDuration
COND_KEY aws:TokenIssueTime       #'DATE'. TEMP_CREDS creation time.
AWSRevokeOlderSessions            #AWS managed policy to attach on a ROLE to invalidate TEMP_CREDS
                                  #Denies every PACTION if aws:TokenIssueTime was before now


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UI LOGIN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STS_LOGIN_URL                     #https://[REGION.]signin.aws.amazon.com/federation
GET STS_LOGIN_URL                 #Retrieves OBJ: SigningToken 'BASE64'
 ?Action=getSigningToken          #Query params:
                                  #  - Session 'URLENCODED_JSON' of TEMP_CREDS: sessionId|sessionKey|sessionToken
                                  #     - TEMP_CREDS must have been acquired first with STS programmatically
                                  #     - but not with GetSessionToken()
                                  #  - SessionDuration NUM
                                  #     - not if GetFederationToken() was used
                                  #     - def: same as TEMP_CREDS
GET STS_LOGIN_URL?Action=login    #Login
                                  #Query params:
                                  #  - SigninToken "BASE64"
                                  #  - Destination 'URLENCODED_JSON': URL to redirect to
                                  #  - Issuer 'URLENCODED_JSON': URL that did the authentication

SAML ==>                          #Can also use a different flow, see online foc

STS_SWITCH_URL                    #https://signin.aws.amazon.com/switchrole
GET STS_SWITCH_URL                #Like STS_LOGIN_URL, but first login then switches role
                                  #Query params:
                                  #  - roleName 'ROLE'
                                  #  - account 'ACCOUNT_ID'
                                  #  - displayName STR (def: 'ROLE@ACCOUNT_ID'): UI name for ROLE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TEMP_TOKEN           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


getSessionToken()                 #Req: TEMP_TOKEN_REQ
                                  #Res: TEMP_TOKEN

TEMP_TOKEN_REQ                    #Request a TEMP_TOKEN
TEMP_TOKEN_REQ.DurationSeconds    #Like ASSUME_ROLE_REQ.*

TEMP_TOKEN_REQ.SerialNumber       #MFA_DEVICE_MID
TEMP_TOKEN_REQ.TokenCode          #STR. Token shown by MFA device

COND_KEY                          #BOOL. Whether MFA authenticated.
 aws:MultiFactorAuthPresent       #undefined unless using TEMP_TOKEN
                                 ##With CloudFormation, AWSSamples::IamPoliciesRequireMfa::Hook HOOK enforces it is set, with value true
COND_KEY aws:MultiFactorAuthAge   #NUM (in secs). How long ago was MFA authentication.
                                  #undefined unless using TEMP_TOKEN

TEMP_TOKEN                        #TEMP_CREDS based on current PRINCIPAL.
                                  #Can optionally use MFA.
                                  #Permissions:
                                  #  - same as current PRINCIPAL
                                  #  - iam|sts:* -> only if MFA was used
TEMP_TOKEN.Credentials            #TEMP_CREDS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        FEDERATED USER         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetFederationToken()              #Req: FEDERATED_REQ
                                  #Res: FEDERATED_CREDS

FEDERATED_REQ                     #Request a FEDERATED_CREDS
FEDERATED_REQ.DurationSeconds
FEDERATED_REQ.Tags                #Like ASSUME_ROLE_REQ.*
FEDERATED_REQ.Policy
FEDERATED_REQ.PolicyArns          #Like ASSUME_ROLE_REQ.*, except default is to deny all

FEDERATED_REQ.Name                #'FEDERATED_USER'

FEDERATED_CREDS                   #TEMP_CREDS based on current PRINCIPAL.
                                  #Can restrict permissions.
                                  #I.e. superuser delegating permissions to temporary users.
                                  #  - often authentication happens in a separate system
                                  #Permissions:
                                  #  - same as current PRINCIPAL, but restricted by session policy
                                  #  - iam|sts:* -> must use UI (not CLI|API)
FEDERATED_CREDS.Credentials
FEDERATED_CREDS.PackedPolicySize  #Like ASSUMED_ROLE.*

FEDERATED_CREDS.FederatedUser     #FEDERATED_USER. Temporary user using a FEDERATED_CREDS
FEDERATED_USER.Arn                #FEDERATED_USER_ARN. 'arn:aws:sts::ACCOUNT_ID:federated-user/FEDERATED_USER'
FEDERATED_USER.FederatedUserId    #FEDERATED_USER_MID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSUME ROLE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AssumeRole()                      #Req: ASSUMED_ROLE_REQ
                                  #Res: ASSUMED_ROLE

ASSUMED_ROLE_REQ                  #Request an ASSUMED_ROLE

ASSUMED_ROLE                      #TEMP_CREDS based on a POLICY (ROLE.AssumeRolePolicyDocument).
                                  #Permissions: same as ROLE ("delegation")
                                  #Can be done from the UI ("switch role"), unless either:
                                  #  - root
                                  #  - ASSUMED_ROLE_REQ.externalId
                                  #  - 'ROLE' more than 64 chars
ASSUMED_ROLE.Credentials          #TEMP_CREDS
ASSUMED_ROLE.AssumedRoleUser      #ASSUMED_ROLE_USER

ASSUMED_ROLE_REQ.RoleArn          #ROLE_ARN to assume

ASSUMED_ROLE_USER.Arn             #ASSUMED_ROLE_ARN. 'arn:aws:sts::ACCOUNT_ID:assumed-role/ASSUMED_ROLE'
ASSUMED_ROLE_USER.AssumedRoleId   #'ASSUMED_ROLE_MID:ASSUMED_ROLE'

ASSUMED_ROLE_REQ.RoleSessionName  #'ASSUMED_ROLE'
COND_KEY sts:RoleSessionName      #ASSUMED_ROLE_REQ.RoleSessionName. Only with AssumeRole()

ASSUMED_ROLE_REQ.SourceIdentity   #STR
                                  #Similar to 'ASSUMED_ROLE' except:
                                  #  - kept with role chaining
                                  #  - i.e. identify the original entity, not most recent
                                  #Max length 64
COND_KEY sts:SourceIdentity       #ASSUMED_ROLE_REQ.SourceIdentity. Only with PACTIONs 'sts:AssumeRole*|SetSourceIdentity'
PACTION sts:SetSourceIdentity     #Allow using ASSUMED_ROLE_REQ.SourceIdentity
                                  #Must be done on both the PRINCIPAL, and the ROLE trust policy
ASSUMED_ROLE_USER.SourceIdentity  #ASSUMED_ROLE_REQ.SourceIdentity
COND_KEY aws:SourceIdentity       #ASSUMED_ROLE_USER|SAML_ROLE|WEB_ID_ROLE.SourceIdentity, in the requests made by the ROLE

ASSUMED_ROLE_REQ.ExternalId       #STR
                                  #Similar to 'ASSUME_ROLE' except:
                                  #  - meant for identifier which has a meaning only outside of AWS
                                  #  - not present in CloudTrail logs
                                  #Max length 1224
COND_KEY sts:ExternalId           #ASSUMED_ROLE_REQ.ExternalId. Only with AssumeRole()

ASSUMED_ROLE_REQ.DurationSeconds  #NUM

ASSUMED_ROLE_REQ.Policy           #POLICY_DOC.
                                  #"Session policy" restricting the identity-based permissions
                                  #Def: allow all
                                  #Max 2KB
ASSUMED_ROLE_REQ.PolicyArns       #Same but as POLICY_ARN_ARR
                                  #Max length 10
ASSUMED_ROLE.PackedPolicySize     #0-1 percentage of size / max size of POLICY + session tags

ASSUMED_ROLE_REQ.SerialNumber
ASSUMED_ROLE_REQ.TokenCode        #Like TEMP_TOKEN_REQ.*

ASSUMED_ROLE_REQ.Tags             #AWS TAGS. "Session tags"
ASSUMED_ROLE_REQ.TransitiveTagKeys#'TAG'_ARR that should be inherited with role chaining
                                  #Def: none
COND_KEY sts:TransitiveTagKeys    #'TAG'_ARR
PACTION sts:TagSession            #Allow specifying ASSUMED_ROLE_REQ.Tags

ASSUMED_ROLE_REQ.ProvidedContexts #PROVIDED_CONTEXT_ARR. Max 5 items. Not documented by AWS yet
PROVIDED_CONTEXT.ContextAssertion #STR. Max 2KB
PROVIDED_CONTEXT.ProviderArn      #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ROLE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateRole()                      #Req: ROLE
                                  #  - no Arn, RoleId, CreateDate, RoleLastUsed
                                  #Res: Role ROLE
                                  #CLI wizard 'new-role'
UpdateRole()                      #Req:
                                  #  - no Arn, RoleId, CreateDate, RoleLastUsed, Path, AssumeRolePolicyDocument, Tags
                                  #Res: empty
UpdateAssumeRolePolicy()          #Req: ROLE
                                  #  - only RoleName
                                  #  - only AssumeRolePolicyDocument -> PolicyDocument
                                  #Res: empty
GetRole()                         #Req: ROLE
                                  #  - only RoleName
                                  #Res: Role ROLE
ListRoles()                       #Req: ROLE
                                  #  - only Path -> PathPrefix
                                  #Res: Roles ROLE_ARR
DeleteRole()                      #Req: ROLE
                                  #  - only RoleName
                                  #Res: empty

ROLE                              #Like a group, but with temporary assigned USERs.
                                  #Must authenticate using AssumeRole*()
                                  #Max 1000 (flexible to 5000) (SUMMARY_MAP.Roles[Quota])
                                  #WAIT (GetRole()) RoleExists: when it exists
                                 ##With Pulumi, can use RPROPS:
                                 ##  - inlinePolicies|managedPolicyArns:
                                 ##     - attach IPOLICY|MPOLICYs
                                 ##     - exclusive: if specified, cannot attach other IPOLICY|MPOLICYs to ROLE
                                 ##  - forceDetachPolicies true:
                                 ##     - detach and do not delete POLICYs before replace|delete
                                 ##     - needed when using a POLICY through PolicyAttachment (not RolePolicy[Attachment])
ROLE.Arn                          #ROLE_ARN. 'arn:aws:iam::ACCOUNT_ID:role[/PATH]/NAME'
ROLE.RoleId                       #ROLE_MID
ROLE.RoleName                     #'ROLE'
                                 ##With Pulumi, can use "namePrefix" to randomize
ROLE.Path                         #NAMEPATH
ROLE.CreateDate                   #'DATE'
ROLE.RoleLastUsed                 #ROLE_LAST_USED
ROLE_LAST_USED.LastUsedDate       #'DATE'. null if not used in last 400 days
ROLE_LAST_USED.Region             #'REGION'
ROLE.Description                  #STR
ROLE.MaxSessionDuration           #NUM (in secs). Max value of ASSUME_*_REQ.DurationSeconds
                                  #Min|def 1h, max 12h
TagRole()
ListRoleTags()
UntagRole()                       #AWS TAGS
ROLE.Tags                         #RESOURCE_NAME: RoleName 'ROLE'

ROLE.AssumeRolePolicyDocument     #Resource-based POLICY_DOC. "Trust policy"
                                  #Only for sts:* PACTIONs
                                  #  - i.e. conditions to authenticate as this ROLE
                                  #  - as opposed to other POLICYs of this ROLE
                                  #     - i.e. permissions once authenticated as this ROLE
                                  #Def: allow all
                                  #  - which is not secure
                                  #Root is never allowed to sts:*
                                  #Max 2KB (flexible to 4KB) (SUMMARY_MAP.AssumeRolePolicySizeQuota)
                                 ##With Pulumi, can use CW.iam.assumeRolePolicyForPrincipal(PRINCIPAL)->POLICY_DOC
                                 ##  - it only allows PRINCIPAL to sts:AssumeRole

ROLE CHAINING ==>                 #A ROLE assuming another ROLE2
                                  #Not allowed:
                                  #  - FEDERATED_CREDS -> *
                                  #  - TEMP_TOKEN -> SAML_ROLE|WEB_ID_ROLE
                                  #  - * -> TEMP_TOKEN|FEDERATED_CREDS

AWS::IAM::Role                    #RESPROPs:
                                  #  - RoleName, Path, Description, MaxSessionDuration, Tags
                                  #  - AssumeRolePolicyDocument POLICY_DOC_OBJ
                                  #RESATTRs: Arn, RoleId


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ROLE CDK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Role(...CARGS, OPTS)          #CROLE. CKRESOURCE wrapping ROLE
                                  #Is IGRANTABLE. Is ICPRINCIPAL

Role.fromRoleArn
 (...CARGS, ROLE_ARN[, OPTS])
 ->ICROLE                         #
Role.fromRoleName
 (...CARGS, 'ROLE'[, OPTS])
 ->ICROLE                         #
OPTS.mutable                      #BOOL (def: true). If false, use withoutPolicyUpdates()
                                  #Always false if cross-account (CSTACK.account !== CROLE.account)
OPTS.addGrantsToResources         #BOOL (def: false). See below
OPTS.defaultPolicyName            #'POLICY' name of IPOLICY (def: 'Policy')
CVAR @aws-cdk/aws-iam:imported
 RoleStackSafeDefaultPolicyName   #BOOL (def: false) (recommended). Append default value for OPTS.defaultPolicyName with CID

ICROLE.roleArn
OPTS|ICROLE.roleName
OPTS.path
OPTS.description                  #ROLE.*
CROLE.roleId                      #CFNREF_TK resolving to ROLE_MID. ROLE.RoleId
OPTS.maxSessionDuration           #DURATION. ROLE.MaxSessionDuration

CROLE.assumeRolePolicy            #CPOLICY_DOC. Session policy, i.e. ROLE.AssumeRolePolicyDocument
OPTS.assumedBy                    #ICPRINCIPAL allowed in session policy
ICPRINCIPAL.assumeRoleAction      #'PACTION' allowed in session policy
new FederatedPrincipal            #With WebIdentityPrincipal|OpenIdConnectPrincipal: sts:AssumeRoleWithWebIdentity
 (..., 'PACTION')                 #With SamlPrincipal: sts:AssumeRoleWithSAML
                                  #Otherwise: sts:AssumeRole
CPRINCIPAL.withSessionTags()
 ->CTAGS_PRINCIPAL
new SessionTagsPrincipal
 (ICPRINCIPAL)                    #CTAGS_PRINCIPAL. Like CPRINCIPAL, except sts:TagSession also allowed in session policy
OPTS.externalIds                  #STR_ARR (def: []). Add COND_OBJ { StringEquals: { sts:ExternalId: STR_ARR } } to session policy

ICROLE.grant(IGRANTABLE,
 'ACTION',...)->CGRANT            #Grant ACTIONs on STATEMENT.Resource ROLE_ARN, to IGRANTABLE
ICROLE.grantPassRole
 (IGRANTABLE)->CGRANT             #Same with ACTION iam:PassRole
ICROLE.grantAssumeRole
 (IGRANTABLE)->CGRANT             #Same with ACTION iam:AssumeRole

CROLE.withoutPolicyUpdates        #Makes adding IPOLICYs|MPOLICYs or STATEMENTs (through grant*()) noop
 ([OPTS])->CROLE2                 #Goal: managing those manually (through CROLE) instead of letting other CDK resources do it (through CROLE2)
OPTS.addGrantsToResources         #BOOL (def: false). If true, only make identity-based grant*() noops, not resource-based

new LazyRole(...)                 #Like new Role(...), except ROLE is only created if used, i.e. either:
                                  #  - CROLE.roleId|roleName|grant*() used
                                  #  - CROLE used as a PRINCIPAL
                                  #No CROLE.permissionsBoundary|withoutPolicyUpdates()

Role.customizeRoles               #Prevent creating ROLEs|MPOLICYs
 (CONSTRUCT[, OPTS])              #Instead, import them as ICROLEs|ICMPOLICYs (like Role.fromRoleName())
                                  #Goal: when ROLEs|MPOLICYs must be created outside of CDK, for compliance|security reasons
                                  #Only applies to CONSTRUCT and its descendants
OPTS.usePrecreatedRoles           #{ ROLE_NID: 'ROLE', ... } to import
                                  #ROLE_NID is relative to CONSTRUCT_NID
                                  #Must be specified for all ROLEs within CONSTRUCT
OPTS.preventSynthesis             #BOOL (def: true). If false, do not prevent creating ROLEs|MPOLICYs
                                  #However, report is still created
                                  #Also, created ROLEs will have no inline|managed policies
ASSEMBLY_DIR                      #List of ROLEs impacted by Role.customizeRoles()
 /iam-policy-report.txt|json      #Created by `cdk synth`
                                  #Contains: ROLE_NID, 'ROLE', whether ROLE is missing, session|managed|inline POLICYs
                                  #Flow:
                                  #  - first `cdk synth` creates report
                                  #  - create ROLEs|MPOLICYs outside of CDK
                                  #  - set OPTS.usePrecreatedRoles
                                  #  - second `cdk synth` succeeds


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       INSTANCE PROFILE        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateInstanceProfile()           #Req: INSTANCE_PROFILE
                                  #  - only InstanceProfileName, Path, Tags
                                  #Res: InstanceProfile INSTANCE_PROFILE
GetInstanceProfile()              #Req: INSTANCE_PROFILE
                                  #  - only InstanceProfileName
                                  #Res: InstanceProfile INSTANCE_PROFILE
ListInstanceProfiles()            #Req: INSTANCE_PROFILE
                                  #  - only Path -> PathPrefix
                                  #Res: InstanceProfiles INSTANCE_PROFILE_ARR
DeleteInstanceProfile()           #Req: INSTANCE_PROFILE
                                  #  - only InstanceProfileName
                                  #Res: empty

INSTANCE_PROFILE                  #Container for a ROLE.
                                  #Creates and rotates TEMP_CREDS automatically.
                                  #Only for EC2
                                  #Max 1000 (flexible to 5000) (SUMMARY_MAP.InstanceProfiles[Quota])
                                  #WAIT (GetInstanceProfile()) InstanceProfileExists: when it exists
INSTANCE_PROFILE.Arn              #INSTANCE_PROFILE_ARN. 'arn:aws:iam::ACCOUNT_ID:instance-profile[/PATH]/NAME'
INSTANCE_PROFILE.InstanceProfileId#INSTANCE_PROFILE_MID
INSTANCE_PROFILE
 .InstanceProfileName             #'INSTANCE_PROFILE'
                                 ##With Pulumi, can use "namePrefix" to randomize
INSTANCE_PROFILE.Path             #NAMEPATH
INSTANCE_PROFILE.CreatedDate      #'DATE'
INSTANCE_PROFILE.Roles            #ROLE_ARR. Always single item
TagInstanceProfile()
ListInstanceProfileTags()
UntagInstanceProfile()            #AWS TAGS
INSTANCE_PROFILE.Tags             #RESOURCE_NAME: InstanceProfileName 'INSTANCE_PROFILE'

AddRoleToInstanceProfile()        #Req: INSTANCE_PROFILE_ROLE
                                  #Res: empty
                                  #Requires iam:PassRole PACTION
ListInstanceProfilesForRole()     #Req: INSTANCE_PROFILE_ROLE
                                  #  - only RoleName
                                  #Res: InstanceProfiles INSTANCE_PROFILE_ARR
RemoveRoleToInstanceProfile()     #Req: INSTANCE_PROFILE_ROLE
                                  #Res: empty

INSTANCE_PROFILE_ROLE             #ROLE of an INSTANCE_PROFILE
INSTANCE_PROFILE_ROLE
 .InstanceProfileName             #'INSTANCE_PROFILE'
INSTANCE_PROFILE_ROLE.RoleName    #'ROLE'

AWS::IAM::InstanceProfile         #RESPROPs: InstanceProfileName, Path, Roles 'ROLE'_ARR
                                  #RESATTRs: Arn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     INSTANCE PROFILE CDK      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new InstanceProfile
 (...CARGS, [, OPTS])             #CINSTANCE_PROFILE. CKRESOURCE wrapping INSTANCE_PROFILE

InstanceProfile
 .fromInstanceProfileName
 (...CARGS, 'INSTANCE_PROFILE')
 ->ICINSTANCE_PROFILE             #
InstanceProfile
 .fromInstanceProfileArn
 (...CARGS, INSTANCE_PROFILE_ARN)
 ->ICINSTANCE_PROFILE             #
InstanceProfile
 .fromInstanceProfileAttributes
 (...CARGS, OPTS)
 ->ICINSTANCE_PROFILE             #OPTS: only instanceProfileArn|role

ICINSTANCE_PROFILE
 .instanceProfileArn
OPTS|ICISTANCE_PROFILE
 .instanceProfileName
OPTS.path                         #INSTANCE_PROFILE.*
OPTS.role                         #CROLE. INSTANCE_PROFILE.Roles
                                  #Def: new one, assumable by ec2.amazonaws.com


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SERVICE ROLE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVICE_PRINCIPAL                 #When PRINCIPAL is 'SERVICE_DOMAIN'
                                  #Happens when either SERVICE_ASYNC_ACTION|SERVICE_ROLE
                                  #But not for DEPENDENT_ACTION, which keeps current PRINCIPAL
COND_KEY aws:SourceArn            #ARN of the resource making a request using a SERVICE_PRINCIPAL
COND_KEY aws:SourceAccount        #Same for ACCOUNT_ID
COND_KEY aws:SourceOrgID          #Same for 'ORG_ID'
COND_KEY aws:SourceOrgPaths       #Same for ORG_PATH_ARR

DEPENDENT_ACTION                  #ACTION calling another SERVICE under the hood, from ongoing request, without using a ROLE
COND_KEY aws:ViaAWSService        #BOOL. Whether the request is a DEPENDENT_ACTION
COND_KEY aws:CalledVia            #'SERVICE_DOMAIN'_ARR when the request is a DEPENDENT_ACTION
COND_KEY aws:CalledViaFirst       #Like aws:CalledVia, but only least recent 'SERVICE_DOMAIN' in the ARR
COND_KEY aws:CalledViaLast        #Like aws:CalledVia, but only most recent 'SERVICE_DOMAIN' in the ARR

SERVICE_ASYNC_ACTION              #ACTION calling another SERVICE, not directly initiated by an ongoing request, without using a ROLE
COND_KEY aws:PrincipalIsAWSService#BOOL. Whether the request is a SERVICE_ASYNC_ACTION
COND_KEY aws:PrincipalServiceName #'SERVICE_DOMAIN' when the request is a SERVICE_ASYNC_ACTION
COND_KEY
 aws:PrincipalServiceNameList     #Same but using a 'SERVICE_DOMAIN'_ARR, for SERVICEs where REGION is included in 'SERVICE_DOMAIN'

SERVICE_ROLE                      #ROLE assumed by a SERVICE.
                                  #Either STANDARD_SERVICE_ROLE, SERVICE_LINKED_ROLE or INSTANCE_PROFILE
STANDARD_SERVICE_ROLE             #SERVICE_ROLE that is (unlike SERVICE_LINKED_ROLE):
                                  #  - optional
                                  #  - managed by user
                                  #  - usually meant to allow only a few specific ACTIONs
PACTION iam:PassRole              #Allow an IDENTITY to associate a SERVICE with a SERVICE_ROLE
                                  #  - usually when creating|updating a resource of that SERVICE
                                  #Not needed for SERVICE_LINKED_ROLE
                                  #SERVICE must be in same ACCOUNT as IDENTITY
                                  #Reason:
                                  #  - SERVICE_ROLE might have higher permissions than IDENTITY
                                  #  - and IDENTITY might access those permissions through using SERVICE
                                  #  - i.e. SERVICE_ROLE can be used to escalate privileges ("confused deputy problem")
                                  #I.e. should restrict how it is performed using STATEMENT.Resource and following COND_KEYs
COND_KEY iam:PassedToService      #'SERVICE_DOMAIN' of the SERVICE assuming a SERVICE_ROLE
                                  #Only with PACTION 'iam:PassRole'
COND_KEY iam:AssociatedResourceArn#ARN of the resource assuming a SERVICE_ROLE
                                  #As opposed to STATEMENT.Resource, which targets the SERVICE_ROLE itself
                                  #Only with PACTION 'iam:PassRole'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVICE LINKED ROLE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateServiceLinkedRole()         #Req: SERVICE_LINKED_ROLE
                                  #  - no RoleName
                                  #Res: Role ROLE
DeleteServiceLinkedRole()         #Req: SERVICE_LINKED_ROLE
                                  #  - only RoleName
                                  #Res: SERVICE_LINKED_ROLE_DEL_START
GetServiceLinkedRoleDeletionStatus#Req: SERVICE_LINKED_ROLE_DEL_START
 ()                               #Res: SERVICE_LINKED_ROLE_DEL_END

SERVICE_LINKED_ROLE               #ROLE used by a SERVICE itself
                                  #  - with permissions it needs to function
                                  #  - managed by SERVICE
                                  #Each SERVICE has 0|1|n SERVICE_LINKED_ROLEs
                                  #Most SERVICE_LINKED_ROLEs:
                                  #  - are automatically created|deleted when creating|deleting specific resources of the SERVICE
                                  #  - otherwise, must be manually created|deleted for SERVICE to use
                                  #Most SERVICE_LINKED_ROLEs have a trust policy which allows them to be assumed only by their SERVICE
                                  #ROLE is readonly except:
                                  #  - ROLE.description
                                  #  - changing identity-based POLICYs, depending on SERVICE, either:
                                  #     - manual attachment
                                  #     - through ACTIONs on that SERVICE
                                  #        - e.g. request parameter when creating a resource
                                  #     - not allowed
SERVICE_LINKED_ROLE.AWSServiceName#'[PREFIX.]SERVICE_DOMAIN'
                                  #'PREFIX' is SERVICE-specific, and only present when a SERVICE has multiplee SERVICE_LINKED_ROLEs
COND_KEY iam:AWSServiceName       #SERVICE_LINKED_ROLE.AWSServiceName. Only with *ServiceLinkedRole*()
SERVICE_LINKED_ROLE.RoleName      #'ROLE'
SERVICE_LINKED_ROLE.CustomSuffix  #STR appended to RoleName.
                                  #Allows multiple SERVICE_LINKED_ROLE per SERVICE, since ROLE.RoleName is only based on 'SERVICE'
                                  #Only for specific SERVICEs
SERVICE_LINKED_ROLE.Description   #STR

SERVICE_LINKED_ROLE_DEL_START     #Starting deleting a SERVICE_LINKED_ROLE
SERVICE_LINKED_ROLE_DEL_START
 .DeletionTaskId                  #'task/aws-service-role/SERVICE/ROLE/UUID'

SERVICE_LINKED_ROLE_DEL_END       #Ending deleting a SERVICE_LINKED_ROLE
SERVICE_LINKED_ROLE_DEL_END.Status#'NOT_STARTED', 'IN_PROGRESS' or 'SUCCEEDED|FAILED'
SERVICE_LINKED_ROLE_DEL_END.Reason#DEL_ERROR when Status 'FAILED'
DEL_ERROR.Reason                  #'ERROR'
DEL_ERROR.RoleUsageList           #RESOURCE_ERROR_ARR
RESOURCE_ERROR                    #Resource using the SERVICE_LINKED_ROLE, prevening its deletion
RESOURCE_ERROR.Region             #'REGION'
RESOURCE_ERROR.Resources          #STR_ARR. Resource names

AWS::IAM::ServiceLinkedRole       #RESPROPs: AWSServiceName, CustomSuffix, Description
                                  #RESATTRs: RoleName


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SAML PROVIDER         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IDENTITY PROVIDER ==>             #SAML_PROVIDER|OPENID_PROVIDER

CreateSAMLProvider()              #Req: SAML_PROVIDER
                                  #  - no SAMLProviderArn, CreateDate, ValidUntil
                                  #Res: SAML_PROVIDER
                                  #  - only SAMLProviderArn, Tags
UpdateSAMLProvider()              #Req: SAML_PROVIDER
                                  #  - no Name, CreateDate, ValidUntil, Tags
                                  #Res: SAML_PROVIDER
                                  #  - only SAMLProviderArn
GetSAMLProvider()                 #Req: SAML_PROVIDER
                                  #  - only SAMLProviderArn
                                  #Res: SAML_PROVIDER
                                  #  - no SAMLProviderArn, Name
ListSAMLProviders()               #Req: empty
                                  #Res: SAMLProviderList SAML_PROVIDER:
                                  #  - no Name, SAMLMetadataDocument, Tags
                                  #  - SAMLProviderArn -> Arn
DeleteSAMLProvider()              #Req: SAML_PROVIDER
                                  #  - only SAMLProviderArn
                                  #Res: empty

SAML_PROVIDER                     #Create a SAML 2.0 identity provider
                                  #See online doc for setup for:
                                  #  - Azure AD, Microsoft AD FS, Google Workspace, IBM
                                  #  - Auth0, Okta, Salesforce
                                  #  - Centrify, CyberArk, ForgeRock, JumpCloud, Matrix42, MiniOrange, OneLogin, Ping identity,
                                  #    RadiantLogic, RSA, SecureAuth, Shibboleth
                                  #Max 100 (SUMMARY_MAP.Providers)
                                  #Max 10 keys per SAML_PROVIDER
SAML_PROVIDER.SAMLProviderArn     #SAML_PROVIDER_ARN. 'arn:aws:iam::ACCOUNT_ID:saml-provider/NAME'
SAML_PROVIDER.Name                #'SAML_PROVIDER'
SAML_PROVIDER.CreateDate          #'DATE'
SAML_PROVIDER.ValidUntil          #'DATE'
SAML_PROVIDER.SAMLMetadataDocument#'XML' with the issuer's name, expiration and keys

TagSAMLProvider()
ListSAMLProviderTags()
UntagSAMLProvider()               #AWS TAGS
SAML_PROVIDER.Tags                #RESOURCE_NAME: SAMLProviderArn SAML_PROVIDER_ARN

AWS::IAM::SAMLProvider            #RESPROPs: Name, SamlMetadataDocument, Tags
                                  #RESATTRs: Arn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SAML PROVIDER CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new SamlProvider(...CARGS, OPTS)  #CSAML_PROVIDER. CKRESOURCE wrapping SAML_PROVIDER

SamlProvider.fromSamlProviderArn
 (...CARGS, SAML_PROVIDER_ARN)
 ->ICSAML_PROVIDER                #

ICSAML_PROVIDER.samlProviderArn
OPTS.name                         #SAML_PROVIDER.*

OPTS.metadataDocument             #CSAML_PROVIDER_DOC, for SAML_PROVIDER.SAMLMetadataDocument
CSamlMetadataDocument.fromXml
 ('XML')->SAML_PROVIDER_DOC       #
CSamlMetadataDocument.fromFile
 ('PATH')->SAML_PROVIDER_DOC      #
SAML_PROVIDER_DOC.xml             #'XML'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SAML ROLE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AssumeRoleWithSAML()              #Req: SAML_ROLE_REQ
                                  #Res: SAML_ROLE

SAML_ROLE_REQ                     #Request a SAML_ROLE
SAML_ROLE_REQ.RoleArn
SAML_ROLE_REQ.DurationSeconds
SAML_ROLE_REQ.Policy
SAML_ROLE_REQ.PolicyArns          #Like ASSUMED_ROLE_REQ.*

SAML_ROLE_REQ.PrincipalArn        #SAML_PROVIDER_ARN checking the authentication
SAML_ROLE_REQ.SAMLAssertion       #'BASE64' given by the SAML_PROVIDER
                                  #Can include SAML attributes Tags|TransitiveTagKeys, like ASSUMED_ROLE_REQ.*
                                  #Max 100KB

SAML_ROLE                         #Like ASSUMED_ROLE, but authenticating with SAML as well.
SAML_ROLE.Credentials
SAML_ROLE.AssumedRoleUser
SAML_ROLE.PackedPolicySize        #Like ASSUMED_ROLE.*
SAML_ROLE.SourceIdentity          #Like ASSUMED_ROLE.* but comes from SAML as 'https://aws.amazon.com/SAML/Attributes/SourceIdentity' property

SAML_ROLE.NameQualifier           #STR. SAML_ROLE identifier.
                                  #Hash(Issuer, ACCOUNT_ID, 'SAML_PROVIDER')
SAML_ROLE.Audience                #STR. SAML's SubjectConfirmationData.Recipient
SAML_ROLE.Issuer                  #STR. SAML's Issuer
SAML_ROLE.Subject                 #STR. SAML's Subject.NameID
SAML_ROLE.SubjectType             #STR. SAML's Subject.NameID.Format

saml:namequalifier
saml:sub                          #STR COND_KEYs. To use on action PACTION, not only AssumeRoleWithSAML()
saml:sub_type                     #Taken from SAML_ROLE_REQ.SAMLAssertion

saml:aud                          #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithSAML|TagSession()
saml:doc                          #'ACCOUND_ID/SAML_PROVIDER' COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithSAML|TagSession()
saml:edupersonprimaryaffiliation
saml:edupersonprimaryorgunitdn
saml:edupersonprincipalname       #STR COND_KEYs. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithSAML()
saml:iss                          #Taken from SAML_ROLE_REQ.SAMLAssertion
saml:commonName
saml:cn
saml:edupersonaffiliation
saml:edupersonassurance
saml:edupersonentitlement
saml:edupersonnickname
saml:edupersonorgdn
saml:edupersonorgunitdn
saml:edupersonscopedaffiliation
saml:edupersontargetedid
saml:eduorghomepageuri
saml:eduorgidentityauthnpolicyuri
saml:eduorglegalname
saml:eduorgsuperioruri
saml:eduorgwhitepagesuri
saml:givenName
saml:mail
saml:name
saml:organizationStatus
saml:primaryGroupSID
saml:surname
saml:uid                          #STR_ARR COND_KEYs. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithSAML()
saml:x500UniqueIdentifier         #Taken from SAML_ROLE_REQ.SAMLAssertion


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        OPENID PROVIDER        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateOpenIDConnectProvider()     #Req: OPENID_PROVIDER
                                  #  - no Arn, CreateDate
                                  #Res: OPENID_PROVIDER
                                  #  - only OpenIDConnectProviderArn, Tags
AddClientIDToOpenIDConnectProvider#Req: OPENID_PROVIDER
 ()                               #  - only OpenIDConnectProviderArn, ClientIDList -> ClientID 'CLIENT_ID'
                                  #Res: empty
RemoveClientIDFrom                #Req: OPENID_PROVIDER
 OpenIDConnectProvider()          #  - only OpenIDConnectProviderArn, ClientIDList -> ClientID 'CLIENT_ID'
                                  #Res: empty
UpdateOpenIDConnectProvider       #Req: OPENID_PROVIDER
 Thumbprint()                     #  - only OpenIDConnectProviderArn, ThumbprintList
                                  #Res: empty
GetOpenIDConnectProvider()        #Req: OPENID_PROVIDER
                                  #  - only OpenIDConnectProviderArn
                                  #Res: OPENID_PROVIDER
                                  #  - no OpenIDConnectProviderArn
ListOpenIDConnectProviders()      #Req: empty
                                  #Res: OPENID_PROVIDER_ARR
                                  #  - only OpenIDConnectProviderArn -> Arn
DeleteOpenIDConnectProvider()     #Req: OPENID_PROVIDER
                                  #  - only OpenIDConnectProviderArn
                                  #Res: empty

OPENID_PROVIDER                   #Create an OpenID Connect provider
                                  #Built-in, i.e. no need to create a OPENID_PROVIDER:
                                  #  - 'cognito-identity.amazonaws.com'
                                  #  - 'accounts.google.com'
                                  #  - 'graph.facebook.com'
                                  #Max 100 (SUMMARY_MAP.Providers)
OPENID_PROVIDER
 .OpenIDConnectProviderArn        #OPENID_PROVIDER_ARN. 'arn:aws:iam::ACCOUNT_ID:oidc-provider/OPENID_PROVIDER'
OPENID_PROVIDER.CreateDate        #'DATE'
OPENID_PROVIDER.Url               #'WEB_ID_DOMAIN' of provider
OPENID_PROVIDER.ClientIDList      #'CLIENT_ID'_ARR
                                  #ID of the web|mobile application.
                                  #Sent as ?client_id=CLIENT_ID in OpenID Connect flow.
                                  #Max length 100
OPENID_PROVIDER.ThumbprintList    #'THUMBPRINT'_ARR. Hex SHA1 checksum of each SERVER_CERTIFICATE.
                                  #Max length 5

TagOpenIDConnectProvider()
ListOpenIDConnectProviderTags()
UntagOpenIDConnectProvider()      #AWS TAGS
OPENID_PROVIDER.Tags              #RESOURCE_NAME: OpenIDConnectProviderArn OPENID_PROVIDER_ARN

AWS::IAM::OIDCProvider            #RESPROPs: Url, ClientIdList, ThumbprintList, Tags
                                  #RESATTRs: Arn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      OPENID PROVIDER CDK      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new OpenIdConnectProvider         #COPENID_PROVIDER. CKRESOURCE wrapping an OPENID_PROVIDER
 (...CARGS, OPTS)                 #Uses a CUSTOM_RESOURCE under-the-hood
                                  #  - in order to provide with default value for OPTS.thumbprints
                                  #  - behaves like CSRESOURCE (CfnOpenIdConnectProvider) but is actually not one (make direct API calls instead)

OpenIdConnectProvider
 .fromOpenIdConnectProviderArn
 (...CARGS, OPENID_PROVIDER_ARN)
 ->ICOPENID_PROVIDER              #

ICOPENID_PROVIDER
 .openIdConnectProviderArn
OPTS.url
OPTS.ClientIDList                 #OPENID_PROVIDER.*
ICOPENID_PROVIDER
 .openIdConnectProviderIssuer     #'OPENID_PROVIDER'

OPTS.thumbprints                  #'THUMBPRINT'_ARR. OPENID_PROVIDER.ThumbprintList
                                  #Def: automatically retrieved from connecting via TLS to WEB_ID_DOMAIN
COPENID_PROVIDER
 .openIdConnectProviderthumbprints#STR_TK resolving to 'THUMBPRINT'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         WEB IDENTITY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AssumeRoleWithWebIdentity()       #Req: WEB_ID_ROLE_REQ
                                  #Res: WEB_ID_ROLE

WEB_ID_ROLE_REQ                   #Request a WEB_ID_ROLE
WEB_ID_ROLE_REQ.RoleArn
WEB_ID_ROLE_REQ.RoleSessionName
WEB_ID_ROLE_REQ.DurationSeconds
WEB_ID_ROLE_REQ.Policy
WEB_ID_ROLE_REQ.PolicyArns        #Like ASSUMED_ROLE_REQ.*

WEB_ID_ROLE_REQ.ProviderId        #'www.amazon.com' or 'graph.facebook.com'
                                  #Only with OAuth 2.0, not OpenID
WEB_ID_ROLE_REQ.WebIdentityToken  #'OAUTH2_TOKEN|OPEN_ID_TOKEN' returned by OpenID|OAuth provider
                                  #Can include Tags|TransitiveTagKeys, like ASSUMED_ROLE_REQ.*:
                                  #  - using property 'https://aws.amazon.com/tags' OBJ: principal_tags OBJ2, transitive_tag_keys 'TAG'_ARR

WEB_ID_ROLE                       #Like ASSUMED_ROLE, but authenticating with either OpenID or OAuth 2.0 (Amazon|Facebook only) as well.
                                  #Playground at https://web-identity-federation-playground.s3.amazonaws.com/index.html
WEB_ID_ROLE.Credentials
WEB_ID_ROLE.AssumedRoleUser
WEB_ID_ROLE.PackedPolicySize      #Like ASSUMED_ROLE.*
WEB_ID_ROLE.SourceIdentity        #Like ASSUMED_ROLE.* but comes from WebIdentityToken as 'https://aws.amazon.com/source_identity' property.

WEB_ID_ROLE.SubjectFromWebIdentity#STR. WEB_ID_ROLE identifier.
                                  #Based on OpenID's sub.
WEB_ID_ROLE.Audience              #STR. 'CLIENT_ID'
WEB_ID_ROLE.Provider              #STR. OpenID's iss, or (for OAuth 2.0) WEB_ID_ROLE_REQ.ProviderId

WEB_ID_DOMAIN:aud                 #STR COND_KEY. WEB_ID_ROLE. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'cognito-identity.amazonaws.com|accounts.google.com|token.actions.githubusercontent.com'
WEB_ID_DOMAIN:sub                 #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'cognito-identity.amazonaws.com|accounts.google.com|token.actions.githubusercontent.com'
WEB_ID_DOMAIN:oaud                #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'accounts.google.com'
WEB_ID_DOMAIN:amr                 #STR_ARR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #["unauthenticated"] or ["authenticated", 'WEB_ID_WEB_ID_DOMAIN']
                                  #Only with 'cognito-identity.amazonaws.com'
WEB_ID_DOMAIN:id                  #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'graph.facebook.com'
WEB_ID_DOMAIN:app_id              #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'graph.facebook.com|www.amazon.com'
WEB_ID_DOMAIN:user_id             #STR COND_KEY. To use on ROLE.AssumeRolePolicyDocument with PACTION AssumeRoleWithWebIdentity()
                                  #Only with 'www.amazon.com'

aws:FederatedProvider             #'WEB_ID_DOMAIN' COND_KEY, if PRINCIPAL SAML|OpenID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BEARER TOKEN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BEARER_TOKEN                      #Like TEMP_CREDS but as a single STR.
                                  #Meant to be passed in a HTTP header or ENVVAR
                                  #  - as opposed to usual AWS signature headers
                                  #Only for specific SERVICEs like CodeArtifact
                                  #The specific SERVICE provides an ACTION to create the BEARER_TOKEN
                                  #Re-uses PRINCIPAL's current permissions
PACTION sts:GetServiceBearerToken #Required to perform the ACTION creating the BEARER_TOKEN

COND_KEY sts:AWSServiceName       #'SERVICE_DOMAIN' of the SERVICE using the BEARER_TOKEN
                                  #Meant to be used with PACTION sts:GetServiceBearerToken
COND_KEY sts:DurationSeconds      #NUM when using a BEARER_TOKEN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         GITHUB ACTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


aws-actions/                     ##Version 4.0.1
 configure-aws-credentials       ##Sets ENVVARs|OUTPUTs with STS credentials using either:
                                 ##  - AssumeRoleWithWebIdentity() API call, with OpenID Connect for GitHub: preferred
                                 ##  - AssumeRole() API call
                                 ##  - 'ACCESS_KEY_ID' + 'SECRET_ACCESS_KEY' [+ 'SESSION_TOKEN']: kept as is
                                 ##     - can also use AWS CONFIG|CREDS

INPUTS.aws-region                ##'REGION' used in API calls
                                 ##Required
INPUTS.http-proxy                ##'URL' proxying STS API calls
INPUTS.disable-retry             ##BOOL. If false (def), retries API calls with exponential backoff
INPUTS.retry-max-attempts        ##NUM (def: 12) of times to retry
INPUTS                           ##BOOL (def: false). If generated ACCESS_KEY_ID|SECRET_ACCESS_KEY contains anything but [:alnum:], retry
 .special-characters-workaround  ##Not with INPUTS.disable-retry nor INPUTS.retry-max-attempts

NO ASSUME_ROLE* ==>              ##Can uses the following either:
                                 ##  - without AssumeRole[WithWebIdentity()]: keep as is
                                 ##  - with AssumeRole[WithWebIdentity()]: used when calling AssumeRole[WithIdentity]() (instead of being anonymous)
INPUTS.aws-access-key-id         ##'ACCESS_KEY_ID'
INPUTS.aws-secret-access-key     ##'SECRET_ACCESS_KEY'
INPUTS.aws-session-token         ##STS 'SESSION_TOKEN'

ASSUME_ROLE[_WITH_WEB_IDENTITY]
 ==>                             ##
INPUTS.role-to-assume            ##ROLE_ARN|'ROLE'. ASSUMED_ROLE_REQ.RoleArn
                                 ##Required to use AssumeRole[WithWebIdentify]()
INPUTS.role-session-name         ##'ASSUMED_ROLE' (def: 'GitHubActions'). ASSUMED_ROLE_REQ.RoleSessionName
INPUTS.role-external-id          ##STR (def: none). ASSUMED_ROLE_REQ.ExternalId
INPUTS.role-duration-seconds     ##NUM (def: 1h). ASSUMED_ROLE_REQ.DurationSeconds
INPUTS.role-skip-session-tagging ##BOOL. If false (def), sets ASSUMED_ROLE_REQ.Tags:
                                 ##  - GitHub: 'Actions'
                                 ##  - Repository|Workflow|Action|Actor: ENVVAR GITHUB_*
                                 ##  - Commit: ENVVAR GITHUB_SHA
                                 ##  - Branch: ENVVAR GITHUB_REF
INPUTS.inline-session-policy     ##'POLICY_DOC' (def: none). ASSUMED_ROLE_REQ.Policy
INPUTS.managed-session-policies  ##'POLICY_ARN's (def: none), newline-separated. ASSUMED_ROLE_REQ.PolicyArns

ASSUME_ROLE_WITH_WEB_IDENTITY ==>##WEB_ID_DOMAIN is 'token.actions.githubusercontent.com'
                                 ##Must create OPENID_PROVIDER with:
                                 ##  - Url 'https://WEB_ID_DOMAIN'
                                 ##  - ClientIDList ['sts.amazonaws.com']
                                 ##  - ThumbprintList ['ffffffffffffffffffffffffffffffffffffffff']
                                 ##Uses WEB_ID_ROLE:
                                 ##  - Audience: INPUTS.audience
                                 ##  - SubjectFromWebIdentity 'repo:USER/REPO'
                                 ##Then use it in trust POLICY:
                                 ##  - PACTION sts:AssumeRoleWithWebIdentity
                                 ##  - Principal.Federated OPENID_PROVIDER_ARN: ensure only GitHub Actions can use
                                 ##  - Condition.StringEquals.WEB_ID_DOMAIN:aud WEB_ID_ROLE.Audience: ensure only STS can use ROLE
                                 ##  - Condition.StringEquals.WEB_ID_DOMAIN:sub WEB_ID_ROLE.SubjectFromWebIdentity: ensure only this REPO can use
ENVVAR                           ##Automatically generated by GitHub action, i.e. must not be specified
 ACTIONS_ID_TOKEN_REQUEST_TOKEN  ##Requires id-token write ACTION_PERMISSION with GitHub actions
INPUTS.web-identity-token-file   ##Alternative: using a 'PATH' to a file containing 'OPEN_ID_TOKEN'
INPUTS.audience                  ##'DOMAIN' (def: 'sts.amazonaws.com') when using OpenID Connect for GitHub
                                 ##Only need to change when using different PARTITIONs (e.g. China)

INPUTS.unset-current-credentials ##BOOL (def: false). First unset current credentials.
                                 ##I.e. unset ENVVAR AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|AWS_SESSION_TOKEN|AWS_REGION|AWS_DEFAULT_REGION
                                 ##Meant when aws-actions/configure-aws-credentials is used several times
INPUTS.role-chaining             ##BOOL (def: false). Re-use current credentials instead of using INPUTS.aws-*
                                 ##Meant when aws-actions/configure-aws-credentials is used several times
INPUTS.output-credentials        ##BOOL. If false (def), do not set OUTPUTS.aws-access-key-id|aws-secret-access-key|aws-session-token
                                 ##Always true when using INPUTS.aws-access-key-id
INPUTS.mask-aws-account-id       ##BOOL. If false (def), mark OUTPUTS.aws-account-id as secret

ENVVAR AWS_REGION
ENVVAR AWS_DEFAULT_REGION
ENVVAR AWS_ACCESS_KEY_ID
ENVVAR AWS_SECRET_ACCESS_KEY
ENVVAR AWS_SESSION_TOKEN         ##Are set

OUTPUTS.aws-account-id           ##'ACCOUNT_ID'
OUTPUTS.aws-access-key-id        ##'ACCESS_KEY_ID'
OUTPUTS.aws-secret-access-key    ##'SECRET_ACCESS_KEY'
OUTPUTS.aws-session-token        ##STS 'SESSION_TOKEN'
