
       
   IAM  
       



VERSION ==>                       #2023-11-26

STS ==>                           #See STS doc for: ROLE, INSTANCE_PROFILE, SERVICE_LINKED_ROLE, SAML_PROVIDER, OPENID_PROVIDER
                                  #Part of STS: CALLER_IDENTITY, ACCESS_KEY_INFO, DECODED_AUTH_MESSAGE

SUMMARY ==>                       #Principal: root, user, group, anonymous
                                  #Long-term credentials: login profile, access key, signing certificate, service credential, SSH public key
                                  #Login profile: password policy, hardware|virtual MFA device
                                  #Policy: version, inline|managed, AWS managed, permission boundary
                                  #Policy document: resource|identity-based, allow|deny, PACTION, simulation, auth message decode
                                  #Condition operators: ARR, undefined, BOOL, STR, NUM, DATE, BUFFER, ARN, IP
                                  #Condition keys: variables, defaults, principal, resource, time, HTTP request
                                  #Reports: credentials, org|user accesses, summary
                                  #Account alias
                                  #Server certificate

@pulumi/aws-iam                  ##Pulumi PROV on top of @pulumi/aws[-native] for IAM, with higher-level KREZs
                                 ##Not very useful, i.e. not documented.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                          #Identity and Access Management

FORMAT ==>                        #Request: query parameter, with ?Action and ?Version
                                  #Response: XML

REQ_ID                            #RES.ResponseMetadata.RequestId

PAGINATION ==>                    #Req: Marker STR, MaxItems STR (def|max: 1e4)
                                  #Res: IsTruncated BOOL, Marker STR

PRICING ==>                       #Free

REGION ==>                        #Not REGION-specific

IAMFullAccess                     #AWS managed POLICY. Grants all IAM PACTIONs
IAMReadOnlyAccess                 #AWS managed POLICY. Grants all read-only IAM PACTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LIMITS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetAccountSummary()               #Res: SUMMARY_MAP
SUMMARY_MAP                       #IAM limits ("Quota") and usage.
                                  #Documented as OBJ, but actually an OBJ_ARR: key STR, value NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           IDENTITY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IDENTITY                          #Who is authenticated.
                                  #Can be:
                                  #  - "Account": ROOT, or alternatively:
                                  #     - ACCOUNT_ID
                                  #     - CANONICAL_ACCOUNT_ID: only for cross-account S3 ACL
                                  #  - "User": USER
                                  #  - "FederatedUser": FEDERATED_USER
                                  #  - "AssumedRole": [ASSUMED_]ROLE, including through:
                                  #     - SERVICE_PRINCIPAL
                                  #     - SAML|OpenID
                                  #        - either as [ASSUMED_]ROLE, or as SAML_PROVIDER|'WEB_ID_DOMAIN'
                                  #  - "Anonymous"
                                  #     - only for S3, SNS, SQS
PRINCIPAL                         #IDENTITY performing a given request

ENTITY                            #Who is being permitted, from an authorization standpoint
                                  #E.g. includes GROUPs, unlike IDENTITY.

ROOT ==>                          #1 per AWS account
                                  #Cannot have identity-based POLICY, PERM_BOUNDARY, session policy
                                  #  - but can have resource-based POLICY, ACL, ORG POLICY
ROOT_ARN                          #'arn:aws:iam::ACCOUNT_ID:root'

UROLE                             #USER|ROLE
UGROLE                            #USER|GROUP|ROLE
                                  #Should delete when not used anymore


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CALLER IDENTITY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetCallerIdentity()               #Req: empty
                                  #Res: CURRENT_PRINCIPAL
                                 ##With Pulumi, this is at CW.getCallerIdentity(), not in IAM MODULE

CALLER_IDENTITY                   #Currently authenticated PRINCIPAL
CALLER_IDENTITY.Account           #ACCOUNT_ID
CALLER_IDENTITY.Arn               #ARN
CALLER_IDENTITY.UserId            #Like COND_KEY aws:userid


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateUser()                      #Req: USER
                                  #  - no Arn, UserId, CreateDate, PasswordLastUsed
                                  #Res: User USER
UpdateUser()                      #Req: USER
                                  #  - no Arn, UserId, CreateDate, PasswordLastUsed, PermissionsBoundary, Tags
                                  #  - UserName -> UserName + NewUserName
                                  #  - Path -> NewPath
                                  #Res: empty
GetUser()                         #Req: USER
                                  #  - only UserName
                                  #Res: User USER
ListUsers()                       #Req: USER
                                  #  - only Path -> PathPrefix
                                  #Res: Users USER_ARR
DeleteUser()                      #Req: USER
                                  #  - only UserName
                                  #Res: empty
                                  #To deactivate without deleting: attach POLICY denying all PACTIONs

USER                              #Real person.
                                  #Prefer using ROLEs when possible, because their credentials is short-lived
                                  #  - e.g. by using an identity provider like AWS Identity Center
                                  #Max 5000 (SUMMARY_MAP.Users[Quota])
                                  #WAIT (GetUser()) UserExists: when it exists
                                 ##With Pulumi, delete|replace fails unless RPROPS.forceDestroy true if USER has either:
                                 ##  - ACCESS_KEY|LOGIN_PROFILE|MFA_DEVICE not managed by PROV
                                 ##  - a POLICY through PolicyAttachment (not UserPolicy[Attachment])
USER.Arn                          #USER_ARN. 'arn:aws:iam::ACCOUNT_ID:user[/PATH]/NAME'
USER.UserId                       #USER_MID
USER.UserName                     #'USER'
USER.Path                         #NAMEPATH
USER.CreateDate                   #'DATE'
USER.PasswordLastUsed             #'DATE' of last LOGIN_PROFILE sign-in
                                  #null if never signed in
                                  #Time is 5-min throttled
TagUser()
ListUserTags()
UntagUser()                       #AWS TAGS
USER.Tags                         #RESOURCE_NAME: UserName 'USER'

AWS::IAM::User                    #RESPROPs: UserName, Path, Tags
                                  #RESATTRs: Arn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           USER CDK            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new User(...CARGS[, OPTS])        #CUSER. CKRESOURCE wrapping USER
                                  #Is IGRANTABLE. Is ICPRINCIPAL

User.fromUserName
 (...CARGS, 'USER')->ICUSER       #
User.fromUserArn
 (...CARGS, USER_ARN)->ICUSER     #

ICUSER.userArn
OPTS|ICUSER.userName
OPTS.path                         #USER.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateGroup()                     #Req: GROUP
                                  #  - no Arn, GroupId, CreateDate
                                  #Res: FGROUP
                                  #  - no Users
UpdateGroup()                     #Req:
                                  #  - no Arn, GroupId, CreateDate
                                  #  - GroupName -> GroupName + NewGroupName
                                  #  - Path -> NewPath
                                  #Res: empty
AddUserToGroup()                  #Req: GROUP_USER
                                  #Res: empty
RemoveUserFromGroup()             #Req: GROUP_USER
                                  #Res: empty
GetGroup()                        #Req: GROUP
                                  #  - only GroupName
                                  #Res: FGROUP
ListGroups()                      #Req: GROUP
                                  #  - only Path -> PathPrefix
                                  #Res: Groups GROUP_ARR
ListGroupsForUser()               #Req: FGROUP
                                  #  - only UserName
                                  #Res: Groups GROUP_ARR
DeleteGroup()                     #Req: GROUP
                                  #  - only GroupName
                                  #Res: empty

GROUP                             #Sets of USERs
                                  #Allow managing permissions of multiple USERs.
                                  #Not meant for authentication.
                                  #USER can belong to 0, 1 or several GROUPs.
                                  #Should prefer attaching POLICYs to GROUPs than USERs, when possible
                                  #Max 300 (flexible to 500) (SUMMARY_MAP.Groups[Quota])
                                  #Max 10 per user (SUMMARY_MAP.GroupsPerUserQuota)
ADMIN GROUP ==>                   #Recommended instead of using root
                                  #Can do everything or almost.
                                  #Can use AdministratorAccess|PowerUserAccess AWS managed ROLE
GROUP.Arn                         #GROUP_ARN. 'arn:aws:iam::ACCOUNT_ID:group[/PATH]/NAME'
GROUP.GroupId                     #GROUP_MID
GROUP.GroupName                   #'GROUP'
GROUP.Path                        #NAMEPATH
GROUP.CreateDate                  #'DATE'

FGROUP                            #GROUP, including the list of USERs
                                 ##With Pulumi, either:
                                 ##  - 1 GroupMembership per GROUP (GROUP + USER_ARR)
                                 ##  - 1 UserGroupMembership per USER (GROUP_ARR + USER)
FGROUP.Users                      #USER_ARR
FGROUP.Group                      #GROUP

GROUP_USER                        #One USER in a GROUP
GROUP_USER.UserName               #'USER'
GROUP_USER.GroupName              #'GROUP'

AWS::IAM::Group                   #RESPROPs: GroupName, Path
                                  #RESATTRs: Arn
AWS::IAM::UserToGroupAddition     #RESPROPs: GroupName, Users 'USER'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           GROUP CDK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Group(...CARGS[, OPTS])       #CGROUP. CKRESOURCE wrapping GROUP
                                  #Is IGRANTABLE. Is ICPRINCIPAL

Group.fromGroupArn
 (...CARGS, GROUP_ARN)->ICGROUP   #
Group.fromGroupName
 (...CARGS, 'GROUP')->ICGROUP     #

OPTS|ICGROUP.groupArn
OPTS|ICGROUP.groupName
OPTS.path                         #GROUP.*

CUSER_OPTS.groups                 #ICGROUP_ARR (def: [])
ICUSER.addToGroup(ICGROUP)        #
ICGROUP.addUser(ICUSER)           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CREDENTIALS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CREDENTIALS                       #One of:
                                  #  - LOGIN_PROFILE
                                  #     - optionally with [VIRTUAL_]MFA_DEVICE
                                  #  - ACCESS_KEY
                                  #     - including through STS (MFA, FEDERATED_USER, AssumeRole(), SAML_PROVIDER, OPENID_PROVIDER)
                                  #  - SIGNING_CERTIFICATE
                                  #  - SERVICE_CREDENTIAL
                                  #  - SSH_PUBLIC_KEY
                                  #New users have no credentials.
                                  #"Long-term", as opposed to short-term TEMP_CREDS
                                  #  - prefer TEMP_CREDS
                                  #  - should be rotated
                                  #  - should be deleted when not used anymore
                                  #Some services have additional authentication methods, e.g. EC2 asymmetric key pair

GenerateCredentialReport()        #Req: empty
                                  #Res: CREDENTIAL_REQ
GetCredentialReport()             #Req: empty
                                  #Res: CREDENTIAL_REPORT

CREDENTIAL_REQ.Description        #STR
CREDENTIAL_REQ.State              #'STARTED', 'INPROGRESS' or 'COMPLETE'

CREDENTIAL_REPORT                 #All CREDENTIALs of current ACCOUNT
                                  #Throttled once per 4h
CREDENTIAL_REPORT.GeneratedTime   #'DATE'
CREDENTIAL_REPORT.ReportFormat    #'text/csv'
CREDENTIAL_REPORT.Content         #'CSV_BASE64' of CREDENTIAL_CONTENT_ARR
CREDENTIAL_CONTENT                #CREDENTIALs of a USER
CREDENTIAL_CONTENT.user           #'USER'
CREDENTIAL_CONTENT.arn            #USER_ARN
CREDENTIAL_CONTENT
 .user_creation_time              #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOGIN PROFILE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLoginProfile()              #Req: LOGIN_PROFILE
                                  #  - no CreateDate
                                  #Res: LoginProfile LOGIN_PROFILE
                                  #  - no Password
UpdateLoginProfile()              #Req: LOGIN_PROFILE
                                  #  - no CreateDate
                                  #Res: empty
ChangePassword()                  #Req: LOGIN_PROFILE
                                  #  - only Password -> OldPassword + NewPassword
                                  #Res: empty
GetLoginProfile()                 #Req: LOGIN_PROFILE
                                  #  - only UserName
                                  #Res: LoginProfile LOGIN_PROFILE
                                  #  - no Password
DeleteLoginProfile()              #Req: LOGIN_PROFILE
                                  #  - only UserName
                                  #Res: empty

LOGIN_PROFILE                     #Password of a user to login to web console UI
                                  #Max 1 per user
LOGIN_PROFILE.UserName            #'USER'
LOGIN_PROFILE.CreateDate          #'DATE'
LOGIN_PROFILE.Password            #STR
                                  #ASCII only
                                 ##With Pulumi:
                                 ##  - use RPROPS.PasswordLength NUM (def: 20) instead
                                 ##     - i.e. let Pulumi generate
                                 ##     - OUTPUTS.password STR: plain
                                 ##     - OUTPUTS.encryptedPassword STR: encrypted, base64
                                 ##  - can also use RPROPS.pgpKey STR
                                 ##     - like LOGIN_PROFILE, but using OUTPUTS.encryptedPassword
LOGIN_PROFILE
 .PasswordResetRequired           #BOOL (def: false). Set to true to require resetting password.

ROOT_PASSWORD                     #Unlike non-root:
                                  #  - no LOGIN_PROFILE
                                  #  - use email address, not username
                                  #  - can be reset via email
                                  #     - if MFA, require also phone number
                                  #  - [VIRTUAL_]MFA_DEVICE can only be managed in UI
PASSWORD                          #LOGIN_PROFILE|ROOT_PASSWORD

CREDENTIAL_CONTENT                #'TRUE|FALSE'. Whether there is a LOGIN_PROFILE.
 .password_enabled                #'not_supported' if root.
CREDENTIAL_CONTENT                #'DATE' of last PASSWORD login
 .password_last_used              #Can be 'no_information' (never used) or 'N/A' (no PASSWORD)
CREDENTIAL_CONTENT                #'DATE' of last LOGIN_PROFILE.Password change
 .password_last_changed           #Can be 'not_supported' (root) or 'N/A' (not done)

IAMUserChangePassword             #AWS managed POLICY. Grants GetPassword + GetAccountPasswordPolicy
                                  #  - so users can see password policy when changing it, especially in UI

SIGN-IN URLS ==>                  #Root: https://console.aws.amazon.com
                                  #User: https://ACCOUNT_ID.signin.aws.amazon.com/console[?region=REGION]
                                  #Version: 2023-03-03

AWS BUILDER ID ==>                #Long-term credentials tied to real user, not to an AWS account
                                  #Can be used to login to AWS at https://profile.aws.amazon.com
                                  #Can also be used to login to other AWS related services:
                                  #AWS re:Post, CodeCatalyst, Whisperer
                                  #Can use MFA

SIGN-IN LOGGING ==>               #On CloudTrail: SERVICE_DOMAIN 'signin.amazonaws.com', ACTION 'ConsoleLogin'
                                  #RESP.ConsoleLogin 'Success|Failure'
CLOUDTRAIL_METADATA LoginTo       #'URL'
CLOUDTRAIL_METADATA.MobileVersion #'Yes|No'

AWS::IAM::User                    #Includes RESPROPs: LoginProfile OBJ: Password, PasswordResetRequired


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       LOGIN PROFILE CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CUSER_OPTS.password               #CSECRET. LOGIN_PROFILE.Password
CUSER_OPTS.passwordResetRequired  #LOGIN_PROFILE.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PASSWORD POLICY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UpdateAccountPasswordPolicy()     #Req: PASSWORD_POLICY
                                  #  - no ExpirePasswords
                                  #Res: empty
                                  #Does not apply to existing passwords, except MaxPasswordAge
GetAccountPasswordPolicy()        #Req: empty
                                  #Res: PasswordPolicy PASSWORD_POLICY
DeleteAccountPasswordPolicy()     #Req: empty
                                  #Res: empty

PASSWORD_POLICY                   #Constraints on all LOGIN_PROFILE.Password
                                 ##With CloudFormation, must use AwsCommunity::IAM::PasswordPolicy

PASSWORD_POLICY
 .AllowUsersToChangePassword      #BOOL (def: false)

PASSWORD_POLICY.MaxPasswordAge    #NUM. Require resetting password after NUM days.
                                  #Warning in UI when 2 weeks before expiration
                                  #Max 3 years
PASSWORD_POLICY.ExpirePasswords   #BOOL. True when MaxPasswordAge defined
PASSWORD_POLICY.HardExpiry        #BOOL (def: false). When true, expired password can only be updated by root, not user.
CREDENTIAL_CONTENT                #'DATE' of next rotation with PASSWORD_POLICY.MaxPasswordAge
 .password_next_rotation          #Can be 'not_supported' (root)

PASSWORD_POLICY
 .PasswordReusePrevention         #NUM. If set, remembers last NUM passwords and do not allow re-using them.

PASSWORD_POLICY
 .MinimumPasswordLength           #NUM (def: 8)
PASSWORD_POLICY.Require*          #Default:
                                  #  - false for each
                                  #  - but 3 out of 4 must be true
PASSWORD_POLICY
 .RequireLowercaseCharacters      #BOOL
PASSWORD_POLICY
 .RequireUppercaseCharacters      #BOOL
PASSWORD_POLICY.RequireNumbers    #BOOL
PASSWORD_POLICY.RequireSymbols    #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              MFA              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EnableMFADevice()                 #Req: MFA_DEVICE
                                  #  - no EnableDate
                                  #Res: empty
ResyncMFADevice()                 #Req: MFA_DEVICE
                                  #  - no EnableDate
                                  #Res: empty
                                  #Re-enable MFA_DEVICE.
                                  #Needed for example when took too much time to enther MFA_DEVICE.AuthenticationCode1|2
                                  #Not needed with FIDO_KEY
GetMFADevice()                    #Req: MFA_DEVICE
                                  #  - only UserName, SerialNumber
                                  #Res: MFA_DEVICE
                                  #  - no AutenticationCode1|2
ListMFADevices()                  #Req: MFA_DEVICE
                                  #  - only UserName
                                  #Res: MFADevices MFA_DEVICE_ARR
                                  #  - no AutenticationCode1|2
DeactivateMFADevice()             #Req: MFA_DEVICE
                                  #  - only SerialNumber, UserName
                                  #Res: empty

MFA_DEVICE                        #MFA hardware device to use with LOGIN_PROFILE
                                  #Max 8 per user
MFA_DEVICE.SerialNumber           #MFA_DEVICE_MID
MFA_DEVICE.UserName               #'USER'
MFA_DEVICE.EnableDate             #'DATE'
MFA_DEVICE.AuthenticationCode1    #STR. First code from MFA device on creation.
MFA_DEVICE.AuthenticationCode2    #STR. Second code from MFA device on creation, i.e. must enter 2 back-to-back

FIDO_KEY                          #MFA_DEVICE with stronger protection
                                  #Cannot be used with STS
                                  #Can only be managed in the UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VIRTUAL MFA          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateVirtualMFADevice()          #Req: VIRTUAL_MFA_DEVICE
                                  #  - only VirtualMFADeviceName, Path, Tags
                                  #Res: VirtualMFADevice VIRTUAL_MFA_DEVICE
                                  #  - no VirtualMFADeviceName, Path
ListVirtualMFADevices()           #Req:
                                  #  - AssignmentStatus 'Assigned', 'Unassigned' or 'Any' (def)
                                  #Res: VirtualMFADevices VIRTUAL_MFA_ARR
                                  #  - no VirtualMFADeviceName, Path
DeleteVirtualMFADevice()          #Req: VIRTUAL_MFA_DEVICE
                                  #  - only SerialNumber
                                  #Res: empty

VIRTUAL_MFA_DEVICE                #MFA mobile app to use with LOGIN_PROFILE
                                  #Max 1 per user (SUMMARY_MAP.AccountMFAEnabled|MFADevices[InUse])
VIRTUAL_MFA_DEVICE.SerialNumber   #VIRTUAL_MFA_DEVICE_ARN. 'arn:aws:iam::ACCOUNT_ID:mfa[/PATH]/NAME'
VIRTUAL_MFA_DEVICE
 .VirtualMFADeviceName            #'VIRTUAL_MFA_DEVICE'
VIRTUAL_MFA_DEVICE.Path           #NAMEPATH
VIRTUAL_MFA_DEVICE.User           #USER
VIRTUAL_MFA_DEVICE.EnableDate     #'DATE'
VIRTUAL_MFA_DEVICE
 .Base32StringSeed                #Base32-encoded STR. Secret key used for creation
VIRTUAL_MFA_DEVICE.QRCodePNG      #'PNG_BASE64' of the creation QR code
                                  #QR code content is 'otpauth://totp/VIRTUAL_MFA_DEVICE@ACCOUNT_ID|USER?secret=BASE_32_STRING_SEED'

TagMFADevice()
ListMFADeviceTags()
UntagMFADevice()                  #AWS TAGS
VIRTUAL_MFA_DEVICE.Tags           #RESOURCE_NAME: SerialNumber VIRTUAL_MFA_DEVICE_ARN

CREDENTIAL_CONTENT.mfa_active     #'TRUE|FALSE'. Whether there is a MFA_DEVICE

MFA SIGN-IN LOGGING ==>           #Followig are on ACTION 'ConsoleLogin'
CLOUDTRAIL_METADATA MFAIdentifier #[VIRTUAL_]MFA_DEVICE_ARN
CLOUDTRAIL_METADATA MFAUsed       #'Yes|No'

MFA LOGGING CHECK ==>             #On CloudTrail: SERVICE_DOMAIN 'signin.amazonaws.com', ACTION 'CheckMfa'
                                  #RESP.CheckMfa 'Success|Failure'
CLOUDTRAIL_METADATA MFAType       #'Virtual MFA' or 'Multiple MFA Devices'

iamMfaEnabledForConsoleAccess    ##Pulumi POLICY that checks that every USER has 1 [VIRTUAL_]MFA_DEVICE

AWS::IAM::VirtualMFADevice        #RESPROPs:
                                  #  - VirtualMfaDeviceName, Path, Tags
                                  #  - Users 'USER'_ARR
                                  #RESATTRs: SerialNumber


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACCESS KEY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccessKey()                 #Req: ACCESS_KEY
                                  #  - only UserName
                                  #Res: AccessKey ACCESS_KEY
                                  #  - no AccessKeyLastUsed
UpdateAccessKey()                 #Req: ACCESS_KEY
                                  #  - no CreateDate, SecretAccessKey, AccessKeyLastUsed
                                  #Res: empty
GetAccessKeyLastUsed()            #Req: ACCESS_KEY
                                  #  - only AccessKeyId
                                  #Res: ACCESS_KEY
                                  #  - only UserName, AccessKeyLastUsed
ListAccessKeys()                  #Req: ACCESS_KEY
                                  #  - only UserName
                                  #Res: AccessKeyMetadata ACCESS_KEY_ARR
                                  #  - no SecretAccessKey, AccessKeyLastUsed
DeleteAccessKey()                 #Req: ACCESS_KEY
                                  #  - only AccessKeyId, UserName
                                  #Res: empty

ACCESS_KEY                        #Programmatic credentials
                                  #Avoid with root (prefer LOGIN_PROFILE)
                                  #Rotation best practices:
                                  #  - keep old one while updating consumers to use new one
                                  #  - wait a few days and check for LastUsedDate to ensure not used anymore
                                  #  - put as Status 'Inactive' for a few days before deleting
                                  #Max 2 per user|root (SUMMARY_MAP.AccountAccessKeysPresent|AccessKeysPerUserQuota)
ACCESS_KEY.AccessKeyId            #ACCESS_KEY_ID, i.e. public part of the key
                                  #20 chars
ACCESS_KEY.SecretAccessKey        #SECRET_ACCESS_KEY, i.e. private part of the key
                                  #40 chars
                                 ##With Pulumi:
                                 ##  - named OUTPUTS.secret
                                 ##  - can also use RPROPS.pgpKey STR
                                 ##     - public GPG key, or 'keybase:USER'
                                 ##     - additional PGP encryption when accessing through Pulumi, not on AWS resource itself
                                 ##     - no OUTPUTS.secret
                                 ##     - OUTPUTS.encryptedSecret:
                                 ##        - ACCESS_KEY.SecretAccessKey + additional PGP encryption
                                 ##        - user must decrypt with their key to get ACCESS_KEY.SecretAccessKey
                                 ##     - also returns OUTPUTS.keyFingerprint STR
ACCESS_KEY.UserName               #'USER' (def: current one)
ACCESS_KEY.CreateDate             #'DATE'
ACCESS_KEY.AccessKeyLastUsed      #ACCESS_KEY_LAST_USED
ACCESS_KEY_LAST_USED.LastUsedDate #'DATE'. null if not used in last 400 days
                                  #15 minutes-throttle.
ACCESS_KEY_LAST_USED.Region       #'REGION'. Not defined if not REGION-specific (e.g. S3)
ACCESS_KEY_LAST_USED.ServiceName  #'SERVICE'
ACCESS_KEY.Status                 #'Active' (def) or 'Inactive' (manually disabled)

CREDENTIAL_CONTENT
 .access_key_1|2_*                #
CREDENTIAL_CONTENT
 .access_key_*_active             #'TRUE|FALSE'. Whether there is an ACCESS_KEY
CREDENTIAL_CONTENT                #'DATE' of last update.
 .access_key_*_last_rotated       #Can be 'N/A' (no ACCESS_KEY)
CREDENTIAL_CONTENT                #'DATE'. ACCESS_KEY.AccessKeyLastUsed.LastUsedDate
 .access_key_*_last_used_date     #Can be 'N/A' (no ACCESS_KEY, or never used)
CREDENTIAL_CONTENT                #'DATE'. ACCESS_KEY.AccessKeyLastUsed.Region
 .access_key_*_last_used_region   #Can be 'N/A' (no ACCESS_KEY, or never used)
CREDENTIAL_CONTENT                #'SERVICE'. ACCESS_KEY.AccessKeyLastUsed.ServiceName
 .access_key_*_last_used_service  #Can be 'N/A' (no ACCESS_KEY, or never used)

GetAccessKeyInfo()                #Req: ACCESS_KEY_REQ
                                  #Res: ACCESS_KEY_INFO

ACCESS_KEY_REQ                    #
ACCESS_KEY_REQ.AccessKeyId        #ACCESS_KEY_ID

ACCESS_KEY_INFO                   #
ACCESS_KEY_INFO.Account           #ACCOUNT_ID

iamAccessKeysRotated             ##Pulumi POLICY that checks that every ACCESS_KEY is rotated,
                                 ##i.e.CreateDate is at most PPCONF.maxKeyAge days old (def: 90).

AWS::IAM::AccessKey              ##RESPROPs:
                                 ##  - UserName, Status
                                 ##  - Serial: arbitrary NUM. Can be changed to force rotating the key
                                 ##RESATTRs: SecretAccessKey


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ACCESS KEY CDK         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new AccessKey(...CARGS, OPTS)     #CACCESS_KEY. CKRESOURCE wrapping ACCESS_KEY

OPTS.user                         #CUSER. ACCESS_KEY.UserName
OPTS.status                       #ACCESS_KEY.*
OPTS.serial                       #See AWS::IAM::AccessKey

CACCESS_KEY.accessKeyId           #ACCESS_KEY_ID, as STR_TK resolving to { Ref }
CACCESS_KEY.secretAccessKey       #SECRET_ACCESS_KEY, as CSECRET resolving to { Fn::GetAtt }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SIGNING CERTIFICATE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSigningCertificate()        #Req: SIGNING_CERTIFICATE
                                  #  - no CertificateId, UploadDate, Status
                                  #Res: Certificate SIGNING_CERTIFICATE
UpdateSigningCertificate()        #Req: SIGNING_CERTIFICATE
                                  #  - no UploadDate, CertificateBody
                                  #Res: empty
ListSigningCertificates()         #Req: SIGNING_CERTIFICATE
                                  #  - only UserName
                                  #Res: Certificates SIGNING_CERTIFICATE_ARR
DeleteSigningCertificate()        #Req: SIGNING_CERTIFICATE
                                  #  - only CertificateId, UserName
                                  #Res: empty

SIGNING_CERTIFICATE               #X.509 client certificate for a USER to login
                                  #Max 2 per user (SUMMARY_MAP.AccountSigningCertificatesPresent|SigningCertificatesPerUserQuota)
SIGNING_CERTIFICATE.CertificateId #'SIGNING_CERTIFICATE'
SIGNING_CERTIFICATE.UploadDate    #'DATE'
SIGNING_CERTIFICATE.UserName      #'USER'
SIGNING_CERTIFICATE
 .CertificateBody                 #'PEM'. X.509 public key certficate
SIGNING_CERTIFICATE.Status        #'Active' (def) or 'Inactive'

CREDENTIAL_CONTENT.cert_1|2_*     #
CREDENTIAL_CONTENT.cert_*_active  #'TRUE|FALSE'. Whether there is a SIGNING_CERTIFICATE
CREDENTIAL_CONTENT
 .cert_*_last_rotated             #'DATE' of last update.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVICE CREDENTIAL       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateServiceSpecificCredential() #Req: SERVICE_CREDENTIAL
                                  #  - no ServiceSpecificCredentialId, CreateDate, ServiceUserName, Status
                                  #Res: ServiceSpecificCredential SERVICE_CREDENTIAL
ResetServiceSpecificCredential()  #Reset the password
                                  #Req: SERVICE_CREDENTIAL
                                  #  - only ServiceSpecificCredentialId, UserName
                                  #Res: ServiceSpecificCredential SERVICE_CREDENTIAL
UpdateServiceSpecificCredential() #Req: SERVICE_CREDENTIAL
                                  #  - no CreateDate, ServiceName, ServiceUserName
                                  #Res: empty
ListServiceSpecificCredentials()  #Req: SERVICE_CREDENTIAL
                                  #  - only ServiceName, UserName
                                  #Res: ServiceSpecificCredentials SERVICE_CREDENTIAL_ARR
DeleteServiceSpecificCredential() #Req: SERVICE_CREDENTIAL
                                  #  - only ServiceSpecificCredentialId, UserName
                                  #Res: empty

SERVICE_CREDENTIAL                #Like LOGIN_PROFILE, but SERVICE-specific
                                  #Only for CodeCommit and AWS Keyspaces
SERVICE_CREDENTIAL
 .ServiceSpecificCredentialId     #SERVICE_CREDENTIAL_MID
SERVICE_CREDENTIAL.CreateDate     #'DATE'
SERVICE_CREDENTIAL.ServiceName    #'SERVICE'
SERVICE_CREDENTIAL.UserName       #'USER'
SERVICE_CREDENTIAL.ServiceUserName#STR. Credential's username
SERVICE_CREDENTIAL.Status         #'Active' (def) or 'Inactive'

IAMSelfManage
 ServiceSpecificCredentials       #AWS managed POLICY. Grants all SERVICE_CREDENTIAL PACTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SSH PUBLIC KEY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSSHPublicKey()              #Req: SSH_PUBLIC_KEY
                                  #  - no SSHPulbicKeyId, UploadDate, Status, Encoding, Fingerprint
                                  #Res: SSHPublicKey SSH_PUBLIC_KEY
                                  #  - no Encoding
UpdateSSHPublicKey()              #Req: SSH_PUBLIC_KEY
                                  #  - no UploadDate, SSHPublicKeyBody, Encoding, Fingerprint
                                  #Res: empty
GetSSHPublicKeys()                #Req: SSH_PUBLIC_KEY
                                  #  - only SSHPublicKeyId, UserName, Encoding
                                  #Res: SSHPublicKey SSH_PUBLIC_KEY
                                  #  - no Encoding
ListSSHPublicKey()                #Req: SSH_PUBLIC_KEY
                                  #  - only UserName
                                  #Res: SSHPublicKeys SSH_PUBLIC_KEY_ARR
                                  #  - no Encoding
DeleteSSHPublicKey()              #Req: SSH_PUBLIC_KEY
                                  #  - only SSHPublicKeyId, UserName
                                  #Res: empty

SSH_PUBLIC_KEY                    #SSH public key to authenticate a USER. Only for CodeCommit.
                                  #Max 5 per USER
SSH_PUBLIC_KEY.SSHPublicKeyId     #SSH_PUBLIC_KEY_MID
SSH_PUBLIC_KEY.UserName           #'USER'
SSH_PUBLIC_KEY.UploadDate         #'DATE'
SSH_PUBLIC_KEY.Status             #'Active' (def) or 'Inactive'
SSH_PUBLIC_KEY.SSHPublicKeyBody   #STR. Content of public key
SSH_PUBLIC_KEY.Encoding           #'SSH' (ssh-rsa format) or 'PEM'. Format of SSH_PUBLIC_KEY.SSHPublicKeyBody
                                  #Def: either
SSH_PUBLIC_KEY.Fingerprint        #STR. MD5 hash of public key

IAMUserSSHKeys                    #AWS managed POLICY. Grants all SSH_PUBLIC_KEY PACTIONs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreatePolicy()                    #Req: POLICY
                                  #  - no Arn, PolicyId, CreateDate, UpdateDate, IsAttachable, DefaultVersionId, PermissionsBoundaryUsageCount, AttachmentCount
                                  #Res: Policy POLICY
                                  #  - no PolicyDocument
GetPolicy()                       #Req: POLICY
                                  #  - only Arn -> PolicyArn
                                  #Res: Policy POLICY
                                  #  - no PolicyDocument
ListPolicies()                    #Req:
                                  #  - Path -> PathPrefix
                                  #  - OnlyAttached BOOL (def: false): if true, only if AttachmentCount > 0
                                  #  - PolicyUsageFilter 'PermissionsBoundary' or 'PermissionsPolicy'
                                  #  - Scope 'AWS', 'Local' or 'All' (def): whether AWS|customer managed policy
                                  #Res: Policies POLICY_ARR
                                  #  - no PolicyDocument
ListPoliciesGrantingServiceAccess #Return policies for a given UGROLE on a given AWS service
 ()                               #Req:
                                  #  - Arn UGROLE_ARN
                                  #  - ServiceNamespaces 'SERVICE'_ARR
                                  #Res: PoliciesGrantingServiceAccess ARR:
                                  #  - ServiceNamespace 'SERVICE'
                                  #  - Policies ARR:
                                  #     - EntityType 'USER|GROUP|ROLE'
                                  #     - EntityName STR
                                  #     - PolicyArn POLICY_ARN
                                  #     - PolicyName 'POLICY'
                                  #     - PolicyType 'INLINE' or 'MANAGED'
DeletePolicy()                    #Req: POLICY
                                  #  - only Arn -> PolicyArn
                                  #Res: empty

POLICY                            #Set of permissions.
                                  #Max 1500 (flexible to 5000) (SUMMARY_MAP.Policies[Quota])
                                  #WAIT (GetPolicy()) PolicyExists: when it exists
                                 ##With CloudFormation, AWSSamples::IamUsersHavePolicy::Hook HOOK requires it for any USER
POLICY.Arn                        #POLICY_ARN. 'arn:aws:iam::ACCOUNT_ID:policy[/PATH]/POLICY'
POLICY.PolicyId                   #POLICY_MID
POLICY.PolicyName                 #'POLICY'
                                 ##With Pulumi, can use "namePrefix" to randomize
POLICY.Path                       #NAMEPATH (def: '/')
POLICY.CreateDate                 #'DATE'
POLICY.UpdateDate                 #'DATE'
POLICY.Description                #STR
POLICY.PolicyDocument             #POLICY_DOC
POLICY.IsAttachable               #BOOL (def: true). If false, disabled.
TagPolicy()
ListPolicyTags()
UntagPolicy()                     #AWS TAGS
POLICY.Tags                       #RESOURCE_NAME: PolicyArn POLICY_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          POLICY CDK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Policy(...CARGS[, OPTS])      #CPOLICY. CKRESOURCE wrapping POLICY
                                  #Ignored unless:
                                  #  - referenced, i.e. CPOLICY.policyName used
                                  #  - attached to USER|ROLE|GROUP, and POLICY_DOC is not empty
                                  #  - OPTS.force true (def: false)
                                  #Is IGRANTABLE

Policy.fromPolicyName
 (...CARGS, 'POLICY')->ICPOLICY   #

OPTS|ICPOLICY.policyName          #'POLICY' (def: 'CPOLICY')

OPTS|CPOLICY.document             #CPOLICY_DOC. POLICY.PolicyDocument
OPTS.statements                   #CSTATEMENT_ARR
CPOLICY
 .addStatements(CSTATEMENT,...)   #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY VERSION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreatePolicyVersion()             #Req: POLICY_VERSION
                                  #  - no VersionId, CreateDate
                                  #  - Document -> PolicyDocument
                                  #  - IsDefaultVersion -> SetAsDefault
                                  #Res: PolicyVersion POLICY_VERSION
                                  #  - no PolicyArn
SetDefaultPolicyVersion()         #Req: POLICY_VERSION
                                  #  - only VersionId, PolicyArn
                                  #Res: empty
GetPolicyVersion()                #Req: POLICY_VERSION
                                  #  - only VersionId, PolicyArn
                                  #Res: PolicyVersion POLICY_VERSION
                                  #  - no PolicyArn
ListPolicyVersions()              #Req: POLICY_VERSION
                                  #  - only PolicyArn
                                  #Res: Versions POLICY_VERSION_ARR
                                  #  - no PolicyArn
DeletePolicyVersion()             #Req: POLICY_VERSION
                                  #  - only VersionId, PolicyArn
                                  #Res: empty

POLICY_VERSION                    #Specific state of a given POLICY.
                                  #Each POLICY update creates a new POLICY_VERSION
                                  #Max 1e4 (SUMMARY_MAP.PolicyVersionsInUse[Quota])
                                  #Max 5 per POLICY (SUMMARY_MAP.VersionsPerPolicyQuota)
POLICY_VERSION.VersionId          #POLICY_VERSION_ID. 'vNUM[.*]'
POLICY_VERSION.PolicyArn          #POLICY_ARN
POLICY_VERSION.CreateDate         #'DATE'
POLICY_VERSION.Document           #POLICY_DOC

POLICY.DefaultVersionId           #POLICY_VERSION_ID of the POLICY_VERSION currently used
POLICY_VERSION.IsDefaultVersion   #BOOL (def: false). True when POLICY.DefaultVersionId === POLICY_VERSION.VersionId

AWS::IAM::ManagedPolicy           #Includes RESATTRs: DefaultVersionId


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INLINE POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUGROLEPolicy()                 #Req: IPOLICY
                                  #Res: empty
GetUGROLEPolicy()                 #Req: IPOLICY
                                  #  - only PolicyName, UGROLEName
                                  #Res: IPOLICY
ListUGROLEsPolicies()             #Req: IPOLICY
                                  #  - only UGROLEName
                                  #Res: PolicyNames 'POLICY'_ARR
DeleteUGROLEPolicy()              #Req: IPOLICY
                                  #  - only PolicyName, UGROLEName
                                  #Res: empty

IPOLICY                           #Identity-based POLICY without an ARN, "embedded" to a single UGROLE
                                 ##With Pulumi, this is called User|Group|RolePolicy
IPOLICY.PolicyName                #'POLICY'
IPOLICY.UGROLEName                #STR
IPOLICY.PolicyDocument            #POLICY_DOC
                                  #Max 2KB for USER, 5KB for GROUP, 10KB for ROLE (SUMMARY_MAP.GUROLEPolicySizeQuota)

AWS::IAM::Policy                  #RESPROPs:
                                  #  - PolicyName
                                  #  - Users|Groups|Roles 'USER|GROUP|ROLE'_ARR
                                  #  - PolicyDocument POLICY_DOC_OBJ
                                  #Prefer AWS::IAM::*Policy instead because does not support drift detection
AWS::IAM::User|Group|RolePolicy   #RESPROPs:
                                  #  - PolicyName
                                  #  - UserName|GroupName|RoleName 'USER|GROUP|ROLE'
                                  #  - PolicyDocument POLICY_DOC_OBJ
AWS::IAM::User|Group|Role         #Includes RESPROPs: Policies OBJ_ARR: PolicyName, PolicyDocument POLICY_DOC_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       INLINE POLICY CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY_OPTS.users|groups|roles    #CUSER|CGROUP|CROLE_ARR
CPOLICY.attachToUser|Group|Role
 (CUSER|CGROUP|CROLE)             #

ICROLE_OPTS.inlinePolicies.CPOLICY#CPOLICY_DOC
ICUSER|ICGROUP|ICROLE
 .attachInlinePolicy(CPOLICY)     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        MANAGED POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AttachUGROLEPolicy()              #Req: MPOLICY
                                  #  - only PolicyArn, UGROLEName
                                  #Res: empty
ListAttachedUGROLEPolicies()      #Req: MPOLICY
                                  #  - only UGROLEName
                                  #Res: AttachedPolicies MPOLICY_ARR
                                  #  - no UGROLEName
ListEntitiesForPolicy()           #Req:
                                  #  - PolicyArn
                                  #  - PathPrefix: of POLICY.Path
                                  #  - PolicyUsageFilter: like ListPolicies()
                                  #  - EntityFilter STR among:
                                  #     - 'User', 'Group' or 'Role'
                                  #     - 'AWSManagedPolicy' or 'LocalManagedPolicy' (like ListPolicies())
                                  #Res: PolicyUGROLEs ARR
                                  #  - UGROLEId ARN
                                  #  - UGROLEName STR
DetachUGROLEPolicy()              #Req: MPOLICY
                                  #  - only PolicyArn, UGROLEName
                                  #Res: empty

MPOLICY                           #Identity-based POLICY with its own ARN, "attached" to 0-n UGROLEs
                                  #Max 10 per UGROLE (flexible to 20) (SUMMARY_MAP.AttachedPoliciesPerGUROLEQuota)
                                  #Max 6KB (SUMMARY_MAP.PolicySizeQuota)
                                 ##With Pulumi:
                                 ##  - this is called User|Group|RolePolicyAttachment, to attach 1 POLICY to 1 USER|GROUP|ROLE
                                 ##     - non-exclusive: can attach that POLICY to other USER|GROUP|ROLEs
                                 ##  - can also use PolicyAttachment, to attach 1 POLICY to n USER|GROUP|ROLEs
                                 ##     - exclusive: cannot attach that POLICY to other USER|GROUP|ROLEs
MPOLICY.PolicyArn                 #POLICY_ARN
COND_KEY iam:PolicyARN            #MPOLICY.PolicyArn. Only for Attach|DetachUGROLEPolicy()
MPOLICY.PolicyName                #'POLICY'
MPOLICY.UGROLEName                #STR

POLICY.AttachmentCount            #NUM of UGROLEs using this as a MPOLICY

AWS::IAM::ManagedPolicy           #RESPROPs:
                                  #  - ManagedPolicyName, Path, Description
                                  #  - PolicyDocument POLICY_DOC_OBJ
                                  #  - Users|Groups|Roles 'USER|GROUP|ROLE'_ARR
                                  #RESATTRs: PolicyArn, PolicyId, CreateDate, UpdateDate, IsAttachable, AttachmentCount
AWS::IAM::User|Group|Role         #Includes RESPROPs: ManagedPolicyArns POLICY_ARN_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      MANAGED POLICY CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new ManagedPolicy(...CARGS[,OPTS])#CMPOLICY. CKRESOURCE wrapping MPOLICY
                                  #Is IGRANTABLE

ManagedPolicy
 .fromManagedPolicyArn
 (...CARGS, POLICY_ARN)->ICMPOLICY#
ManagedPolicy
 .fromManagedPolicyName
 (...CARGS, 'POLICY')->ICMPOLICY  #
ManagedPolicy
 .fromAwsManagedPolicyName
 (...CARGS, 'POLICY')->ICMPOLICY  #

OPTS|ICMPOLICY.managedPolicyArn
OPTS|CMPOLICY.managedPolicyName   #MPOLICY.*
OPTS|CMPOLICY.description
OPTS|CMPOLICY.path                #POLICY.*

OPTS|CMPOLICY.document
OPTS.statements
CMPOLICY
 .addStatements(CSTATEMENT,...)   #Like CPOLICY

OPTS.users|groups|roles
CMPOLICY.attachToUser|Group|Role
 (CUSER|CGROUP|CROLE)             #Like CPOLICY

CUSER|CGROUP|CROLE_OPTS
 .managedPolicies                 #ICMPOLICY_ARR (def: [])
ICUSER|ICGROUP|ICROLE
 .addManagedPolicy(ICMPOLICY)     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      AWS MANAGED POLICY       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AWS MANAGED POLICY ==>            #MPOLICY created by AWS.
                                  #POLICY_ARN 'arn:aws:iam::aws:policy/NAME'
                                 ##  - With Pulumi, can use CW.iam.ManagedPolicy.POLICY POLICY_ARN
                                  #As opposed to "customer managed policy"
                                  #Readonly
                                  #Can be generic, i.e. should consider adding custom POLICYs to restrict them further for a given situation
                                  #Possible types:
                                  #  - "job function role":
                                  #     - generic for a common use case or profession
                                  #     - listed below
                                  #  - standard: common policies for ENTITYs|resources using a given SERVICE
                                  #  - SERVICE_LINKED_ROLE
                                  #  - STANDARD_SERVICE_ROLE
                                  #Common suffixes:
                                  #  - *FullAccess: all PACTIONs
                                  #  - *PowerUser: all PACTIONs except permission management
                                  #  - *WriteOnlyAccess|ReadOnlyAccess

AdministratorAccess               #Allow all ACTIONs on all resources
PowerUserAccess                   #Allow all ACTIONs on all resources except for most of IAM|ORG|ACCOUNT
ReadOnlyAccess                    #Allow all read-only ACTIONs on all resources
ViewOnlyAccess                    #Allow read-only ACTIONs on some resources

SupportUser                       #Allow read-only ACTIONs on resources needed for support
SecurityAudit                     #Allow read-only ACTIONs on resources needed for security audits

Billing                           #Allow ACTIONs on:
                                  #  - Billing, Budgets, Cost explorer, Cost and Usage Reports
SystemAdministrator               #Allow ACTIONs on:
                                  #  - Lambda, EC2, S3, Autoscaling, ELB, CloudWatch [Events|Logs], Cloudtrail
                                  #  - Route 53 [Domains]
                                  #  - SES, SNS, SQS
                                  #  - CodeCommit, CodePipeline, CodeDeploy, Config
                                  #  - KMS, Certificate manager, Directory Service, Trusted Advisor
DatabaseAdministrator             #Allow ACTIONs on:
                                  #  - Data pipeline
                                  #  - RDS, Elasticache, Redshift, DynamoDB
                                  #  - Lambda, EC2, S3, CloudWatch [Logs]
DataScientist                     #Allow ACTIONs on:
                                  #  - Sagemaker
                                  #  - EMR, Kinesis, Data pipeline, Firehose, ElasticMapReduce
                                  #  - ElasticSearch, Redshift, DynamoDB
                                  #  - Lambda, EC2, S3, AutoScaling, CloudWatch
NetworkAdministrator              #Allow ACTIONs on:
                                  #  - EC2, ELB, CloudWatch
                                  #  - Route 53 [Domains], Network manager, DirectConnect
                                  #  - SNS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PERMISSION BOUNDARY      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUROLEPermissionsBoundary()     #Req: PERM_BOUNDARY
                                  #Res: empty
DeleteUROLEPermissionsBoundary()  #Req: PERM_BOUNDARY
                                  #  - only UROLEName
                                  #Res: empty

PERM_BOUNDARY                     #Additional POLICY on top of identity-based POLICYs, but evaluated separately.
                                  #Meant to dissociate admin-controlled POLICYs from user-controlled ones
                                  #  - by only giving *PermissionsBoundary* permissions to admins
                                 ##With CloudFormation, AWSSamples::IAMPrincipalBoundary::Hook HOOK can require it, using ETYPE_CONF:
                                 ##  - iamPrincipalBoundaryArn POLICY_ARN
                                 ##  - excludedPrincipalSuffixes 'ROLE|USER,...' (def: none) that do not require the PERM_BOUNDARY
PERM_BOUNDARY.PermissionsBoundary #POLICY_ARN
PERM_BOUNDARY.UROLEName           #STR

UROLE.PermissionsBoundary         #ATTACHED_PERM_BOUNDARY
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryArn          #POLICY_ARN
COND_KEY
 iam:PermissionsBoundary          #ATTACHED_PERM_BOUNDARY.PermissionsBoundaryArn. PRINCIPAL's PERM_BOUNDARY
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryType         #Always 'Policy'

POLICY
 .PermissionsBoundaryUsageCount   #NUM of UROLEs using POLICY as PERM_BOUNDARY

AWS::IAM::User|Role               #Includes RESPROPs: PermissionsBoundary PERM_BOUNDARY_ARN
AWS::IAM::ManagedPolicy           #Includes RESATTRs: PermissionsBoundaryUsageCount


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    PERMISSION BOUNDARY CDK    :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSOPTS|SOPTS.permissionsBoundary  #CSTACK_PERM_BOUNDARY
                                  #Set RESPROP PermissionsBoundary PERM_BOUNDARY_ARN for all USERs|ROLEs of the STACK
CVAR
 @aws-cdk/core:permissionsBoundary#Same as { name: 'PERM_BOUNDARY' } or { arn: PERM_BOUNDARY_ARN }

PermissionsBoundary
 .fromName('PERM_BOUNDARY'_BSTR)
 ->CSTACK_PERM_BOUNDARY           #
PermissionsBoundary
 .fromArn(PERM_BOUNDARY_ARN_BSTR)
 ->CSTACK_PERM_BOUNDARY           #

PermissionsBoundary
 .of(CONSTRUCT)->CPERM_BOUNDARY   #Set RESPROP PermissionsBoundary PERM_BOUNDARY_ARN for all USERs|ROLEs of the CONSTRUCT
CPERM_BOUNDARY.apply(ICMPOLICY)   #
CPERM_BOUNDARY.clear()            #

CUSER|CROLE[_OPTS]
 .permissionsBoundary             #ICMPOLICY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         POLICY TYPES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY TYPES ==>                  #  - resource-based: see STATEMENT.Principal
                                  #  - ACL
                                  #  - identity-based: see STATEMENT.Resource and IPOLICY|MPOLICY
                                  #  - PERM_BOUNDARY
                                  #  - session: see STS *_REQ.Policy
                                  #  - organization SCP

IDENTITY-BASED POLICY ==>         #POLICY attached to a PRINCIPAL
                                  #As IPOLICY|MPOLICY, using Put|AttachUGROLEPolicy()

RESOURCE-BASED POLICY ==>         #POLICY attached to a resource
                                  #Using resource-specific ACTIONs
                                  #  - only some resources have such ACTIONs

ACL ==>                           #"Access Control List"
                                  #Like resource-based POLICY but:
                                  #  - SERVICE-specific
                                  #     - e.g. S3, VPC and WAF
                                  #  - does not use POLICY_DOC but specific syntax
                                  #  - only for PRINCIPALs in other ACCOUNTs, or unauthenticated

POLICY TYPES INTERACTION ==>      #Usually, allow action if matches either:
                                  #  - all of:
                                  #     - resource-based (required)
                                  #     - ACL (optional)
                                  #  - all of:
                                  #     - identity-based (required)
                                  #     - PERM_BOUNDARY (optional)
                                  #     - session (required if FEDERATED_USER)
                                  #However, must match both if PRINCIPAL either:
                                  #  - has different ACCOUNT than resource ("cross-account")
                                  #  - is ROLE (as opposed to ASSUMED_ROLE)
                                  #  - is FEDERATED_USER's parent USER (as opposed to normal USER, or to FEDERATED_USER itself)
                                  #Also, must always match ORG policy (optional)

POLICY TYPES MATCH ==>            #If 0 STATEMENT.Effect 'Allow' matches, deny that policy type (not others)
                                  #If 1 STATEMENT.Effect 'Deny' matches, deny all policy types

MULTIPLE POLICY_DOCS ==>          #Some policy types can have multiple POLICY_DOCs: resource-based, ACL, identity-based, organization SCP
                                  #They are and'd, as if their STATEMENTs were concatenated to a single POLICY_DOC

BEST PRACTICES ==>                #Grant least privilege


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           GRANT CDK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GPOLICY                           #Identity|resource-based policy. Might not be a CPOLICY, but is always a DEPENDABLE

IGRANTABLE                        #Entity that uses identity-based GPOLICYs
IGRANTABLE.grantPrincipal         #ICPRINCIPAL of the entity
IGRANTABLE.role                   #ICROLE. Often present, but not always
ICPRINCIPAL.addToPrincipalPolicy  #Add STATEMENT to the identity-based GPOLICY. Returns OBJ:
 (CSTATEMENT)->OBJ                #  - statementAdded BOOL: false if no GPOLICY
                                  #     - including when no parent IGRANTABLE entity
                                  #  - policyDependable CONSTRUCT: GPOLICY
ICPRINCIPAL.principalAccount      #'ACCOUNT_ID' of the entity's ICPRINCIPAL
                                  #Optional. When there is a related CKRESOURCE, often set to CKRESOURCE.env.account
                                  #Used by Grant.addToPrincipalOrResource() for cross-account permissions

RGRANTABLE                        #CKRESOURCE that uses resource-based GPOLICYs
RGRANTABLE.addToResourcePolicy    #Add STATEMENT to the resource-based GPOLICY
 (CSTATEMENT)->OBJ                #Same OBJ as IGRANTABLE.addToPrincipalPolicy()

CGRANT                            #STATEMENT added to a IGRANTABLE|RGRANTABLE's identity|resource-based GPOLICY
                                  #Is DEPENDABLE, depending on underlying GPOLICYs, i.e. ensure GPOLICYs are created first
CGRANT.principalStatements        #CSTATEMENT_ARR for identity-based GPOLICYs
CGRANT.resourceStatements         #CSTATEMENT_ARR for resource-based GPOLICYs
CGRANT.success                    #BOOL. Whether there are some CSTATEMENTs
CGRANT.assertSuccess              #Throw if success false
CGRANT.applyBefore(CONSTRUCT_ARR) #Ensure underlying STATEMENT is granted before CONSTRUCTs are deployed
                                  #Possible reasons:
                                  #  - permissions needed for the deploy itself, as opposed to the deployed RESOURCEs
                                  #     - e.g. POLICYs used by a CUSTOM_RESOURCE's Lambda logic, i.e. called during deploy
                                  #        - however, this is automatically handled by CUSTOM_RESOURCE's CDK helpers
                                  #  - some SERVICEs require ROLEs to have POLICYs already attached before being associated to a resource
                                  #     - this is meant for validation purpose
CGRANT.combine(CGRANT2)->CGRANT3  #

Grant.addToPrincipal(OPTS)->CGRANT#Does identity-based CGRANT, i.e. IGRANTABLE.grantPrincipal.addToPrincipalPolicy() with a new STATEMENT
OPTS.grantee                      #IGRANTABLE
OPTS.actions                      #'PACTION'_ARR. STATEMENT.Action
OPTS.resourceArns                 #'ARN'_ARR. STATEMENT.Resource
OPTS.conditions                   #COND_OBJ. STATEMENT.Condition

Grant.addToPrincipalAndResource   #Does identity-based CGRANT
 (OPTS)->CGRANT                   #Then does resource-based CGRANT, i.e. RGRANTABLE.addToResourcePolicy() with a new STATEMENT
OPTS.grantee                      #IGRANTABLE
OPTS.resource                     #RGRANTABLE
OPTS.actions                      #'PACTION'_ARR. STATEMENT.Action, identity|resource-based
OPTS.resourceArns                 #'ARN'_ARR. STATEMENT.Resource, identity|resource-based
OPTS.resourceSelfArns             #'ARN'_ARR. STATEMENT.Resource, resource-based
OPTS.resourcePolicyPrincipal      #ICPRINCIPAL (def: IGRANTABLE.grantPrincipal). STATEMENT.Principal, resource-based
OPTS.conditions                   #COND_OBJ. STATEMENT.Condition, identity-based

Grant.addToPrincipalOrResource    #Does identity-based CGRANT
 (OPTS)->CGRANT                   #If fails, does resource-based CGRANT
                                  #If cross-account, always does both
                                  #  - this is required by IAM for cross-account permissions
                                  #  - using IGRANTABLE.grantPrincipal.principalAccount
OPTS.*                            #Like addToPrincipalAndResource() except:
                                  #  - no OPTS.resourcePolicyPrincipal (always use IGRANTABLE.grantPrincipal)

Grant.drop(IGRANTABLE)->CGRANT    #Noop, i.e. no new STATEMENTs

CKRESOURCE.grant                  #Method available with many CKRESOURCEs that have identity|resource-based GPOLICYs
 (IGRANTABLE, 'ACTION',...[, ...])#Calls Grant.addToPrincipal*(OPTS) with some OPTS.* already set
 ->CGRANT                         #Should usually check CGRANT.[assert]success too
CKRESOURCE.grantACTIONS
 (IGRANTABLE[, ...])->CGRANT      #Same but also with specific ACTIONs

KGRANTABLE                        #CKRESOURCE with an underlying ROLE
KGRANTABLE.addToRolePolicy
 (CSTATEMENT)->OBJ                #Calls ROLE.addToPrincipalPolicy(), i.e. add inline POLICY to it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY DOCUMENT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY_DOC                        #List of permissions of a POLICY
                                  #JSON-stringified, URL-encoded.
                                  #  - When using CloudFormation, can use YAML instead.
                                  #UI at http://awspolicygen.s3.amazonaws.com/policygen.html
                                 ##With Pulumi, can pass either as JSON string, or as OBJ with TypeScript type CW.iam.PolicyDocument
                                 ##cfn-lint E2507: valid POLICY_DOC
                                 ##cfn-lint W2511: valid resource-based POLICY_DOC
POLICY_DOC.Version                #'2012-10-17'
POLICY_DOC.Id                     #POLICY_DOC_ID.
                                  #Optional. Only allowed in resource-based POLICYs
                                  #When used, a UUID is recommended.
                                  #Used only a few SERVICEs, like SQS|SNS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      POLICY DOCUMENT CDK      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new PolicyDocument([OPTS])        #CPOLICY_DOC. RV that resolves to POLICY_DOC_OBJ

CPOLICY_DOC.toString()->STR_TK    #Resolving to CPOLICY_DOC
CPOLICY_DOC.toJSON()
 ->POLICY_DOC_OBJ                 #Unlike RV resolution, does not apply OPTS.minimize|assignSids
PolicyDocument.fromJson
 (POLICY_DOC_OBJ)->CPOLICY_DOC    #

OPTS.statements                   #CSTATEMENT_ARR
CPOLICY_DOC
 .addStatements(CSTATEMENT,...)   #
CPOLICY_DOC.statementCount        #NUM
CPOLICY_DOC.isEmpty               #BOOL

CVAR                              #BOOL (recommended) (def: false)
 @aws-cdk/aws-iam:minimizePolicies#Merge STATEMENTs to make POLICY_DOC smaller, without changing semantics
OPTS.minimize                     #Not if STATEMENT.Sid set
                                  #Also sorts STATEMENT.Action|Resource|Principal
                                  #Regardless, duplicate STATEMENTs are always ignored

LARGE POLICY_DOC ==>              #If POLICY_DOC is larger than limit, split it into several MPOLICYs 'OverflowPolicyCOUNT'
                                  #Only when it is part of a ROLE's IPOLICY|MPOLICY
CVAR                              #NUM (in bytes, def: 150). Average size of ARNs
 @aws-cdk/aws-iam.arnSizeEstimate #Used when splitting large POLICY_DOCs and some ARNs are unresolved RVs

OPTS.assignSids                   #BOOL (def: false). Sets default STATEMENT.Sid with incrementing NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POLICY STATEMENTS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY.Statement                  #STATEMENT_ARR
                                  #Statements are and'd
STATEMENT                         #Single permission
STATEMENT.Sid                     #STR. Identifier, used mostly for description

STATEMENT.Effect                  #'Allow|Deny'
STATEMENT.Action                  #PACTION[_ARR]
                                  #Can use wildcard *
                                  #  - 'SERVICE:*' required for the very few SERVICEs without ACTIONs
                                 ##  - with CloudFormation, AWSSamples::IamPolicyDoesNotGiveAdmin::Hook HOOK forbids using * with both Action|Resource
                                 ##  - with cfn-lint-serverless aws_iam_role_lambda_no_star (WS1003): not allowed with IPOLICY (not MPOLICY)
                                  #DEPENDENT_ACTIONs perform other ACTIONs under the hood
                                  #  - i.e. require permissions for those too
                                 ##"IAM legend": VSCode extension to autocomplete it and show doc in pophover
                                 ##cfn-lint W3037 (experimental): valid STATEMENT.Action

STATEMENT.Resource                #Resource ARN[_ARR]
                                  #Mostly meant for identity-based POLICYs
                                  #Can use in resource-based POLICYs, but default to current resource
                                  #Can use globbing wildcards * ?
                                  #'Resource-level permissions':
                                  #  - not using '*' for [RESOURCE_TYPE:][NAMEPATH/]NAME
                                  #  - not possible with some resources|SERVICEs
STATEMENT.Principal               #PRINCIPAL
                                  #Only for resource-based POLICYs
                                  #OBJ:
                                  #  - AWS STR among:
                                  #     - ROOT_ARN|ACCOUNT_ID
                                  #     - USER_ARN
                                  #     - FEDERATED_USER_ARN
                                  #     - [ASSUMED_]ROLE_ARN
                                  #     - '*'
                                  #  - CanonicalUser CANONICAL_ACCOUNT_ID
                                  #  - Federated 'SAML_PROVIDER_ARN|WEB_ID_DOMAIN'
                                  #  - Service 'SERVICE_DOMAIN'
                                  #     - can be combined with AWS STR
                                 ##     - With Pulumi, can use CW.iam.Principals.SERVICEPrincipal.Service 'SERVICE_DOMAIN'
                                  #'*': shortcut for AWS '*'
                                  #Every value can optionally be an ARR
                                  #Can also use MID instead of ARN
                                  #  - ARN are converted to MID on create|update
                                  #     - so that NAME changes do not impact POLICY_DOC

STATEMENT.NotAction               #Like STATEMENT.Action|Resource|Principal but using inverted list.
STATEMENT.NotResource             #Cannot use both STATEMENT.* and STATEMENT.Not*
STATEMENT.NotPrincipal            #With NotPrincipal:
                                  #  - should include ASSUMED_ROLE -> ROLE -> USER -> ROOT
                                  #  - e.g. if ROLE, should include USER|ROOT too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     POLICY STATEMENTS CDK     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new PolicyStatement([OPTS])       #CSTATEMENT

CSTATEMENT.to[Statement]Json()
 ->STATEMENT_OBJ                  #
PolicyStatement.fromJson
 (STATEMENT_OBJ)->CSTATEMENT      #
CSTATEMENT.copy
 ([OPTS])->CSTATEMENT2            #OPTS: like new PolicyStatement()
CSTATEMENT.toString()->STR_TK     #Resolves to CSTATEMENT

OPTS|CSTATEMENT.sid
OPTS|CSTATEMENT.effect            #STATEMENT.*

OPTS|CSTATEMENT.[not]actions
CSTATEMENT                        #'PACTION'_ARR. STATEMENT.Action
 .add[Not]Actions('PACTION',...)  #Ignore duplicate items

OPTS|CSTATEMENT.[not]resources
CSTATEMENT                        #'ARN'_ARR. STATEMENT.Resource
 .add[Not]Resources('ARN',...)    #Ignore duplicate items
CSTATEMENT.addAllResources()      #Same as CSTATEMENT.addResources('*')
CSTATEMENT.hasResource            #BOOL

CSTATEMENT|CPOLICY_DOC
 .validateForAnyPolicy()          #General validation
 ->'ERROR'_ARR                    #STATEMENT.notActions|actions must not both be used
CSTATEMENT|CPOLICY_DOC            #Validation for resource-based POLICYs
 .validateForResourcePolicy()     #Like validateForAnyPolicy() + at least one STATEMENT.[not]principal must exist
 ->'ERROR'_ARR                    #Run automatically by most CKRESOURCEs that have resource-based POLICYs (CROLE, CBUCKET, CTOPIC, etc.)
CSTATEMENT|CPOLICY_DOC            #Validation for identity-based POLICYs
 .validateForIdentityPolicy()     #Like validateForAnyPolicy() + at least one STATEMENT.[not]resource must exist
 ->'ERROR'_ARR                    #Also, must not use STATEMENT.[not]principal
                                  #Run automatically on C[M]POLICY and CROLE's inline POLICYs

CSTATEMENT.freeze()->CSTATEMENT   #Makes read-only
CSTATEMENT.frozen                 #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PRINCIPAL CORE CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS|CSTATEMENT.[not]principals   #ICPRINCIPAL_ARR
                                  #Ignore duplicate items
CSTATEMENT.add[Not]Principals
 (ICPRINCIPAL_ARR)                #
CSTATEMENT.hasPrincipal           #BOOL

ICPRINCIPAL                       #PRINCIPAL

new PrincipalBase()               #CPRINCIPAL base class. PRINCIPAL in STATEMENT.[Not]Principal
                                  #Is ICPRINCIPAL but with a few additional members

CPRINCIPAL_OBJ                    #{ KEY: STR_ARR, ... }. STATEMENT.Principal
ICPRINCIPAL.policyFragment
new PrincipalPolicyFragment
 (CPRINCIPAL_OBJ)                 #CPRINCIPAL_FRAGMENT. Wraps CPRINCIPAL_OBJ
CPRINCIPAL_FRAGMENT.principalJson #CPRINCIPAL_OBJ
CPRINCIPAL.toJSON()
 ->CPRINCIPAL_OBJ                 #
CPRINCIPAL.toString()->STR        #JSON.stringify(CPRINCIPAL_OBJ)

CPRINCIPAL.dedupeString()[->STR]  #If two CPRINCIPALs return same STR, considered duplicates, i.e. can remove one
                                  #Used when merging CSTATEMENTs, e.g. by CPOLICY_DOC OPTS.minimize
ComparablePrincipal
 .isComparablePrincipal
 (CPRINCIPAL)->BOOL               #Whether CPRINCIPAL.dedupeString is defined
ComparablePrincipal
 .dedupeStringFor
 (CPRINCIPAL)[->STR]              #Forwards dedupeString(), if defined

new CompositePrincipal
 (ICPRINCIPAL,...)                #CPRINCIPALS. CPRINCIPAL merging multiple ICPRINCIPALs
CPRINCIPALS.addPrincipals
 (ICPRINCIPAL,...)                #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PRINCIPAL LIST CDK       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new StarPrincipal()               #CPRINCIPAL with '*' (shortcut for { AWS: '*' })

CSTATEMENT.addAnyPrincipal()
new AnyPrincipal()                #CPRINCIPAL with { AWS: '*' }

CSTATEMENT.addArnPrincipal('ARN')
new ArnPrincipal('ARN')           #CARN_PRINCIPAL. CPRINCIPAL with { AWS: ARN }
CARN_PRINCIPAL
 .inOrganization('ORG_ID')
 ->CCOND_PRINCIPAL                #Adds COND_OBJ { StringEquals: { aws:PrincipalOrgID: 'ORG_ID' } }
new OrganizationPrincipal('ORGID')#Like new ArnPrincipal('*').inOrganization('ORG_ID')

CSTATEMENT.addAwsAccountPrincipal
 ('ACCOUNT_ID')                   #CPRINCIPAL with { AWS: ROOT_ARN|ACCOUNT_ID }
new AccountPrincipal('ACCOUNT_ID')#Also sets CPRINCIPAL.principalAccount
CSTATEMENT
 .addAccountRootPrincipal()
new AccountRootPrincipal()        #Same but using current CSTACK.account

CSTATEMENT
 .addCanonicalUserPrincipal
 ('CANONICAL_ACCOUNT_ID')
new CanonicalUserPrincipal
 ('CANONICAL_ACCOUNT_ID')         #CPRINCIPAL with { CanonicalUser: 'CANONICAL_ACCOUNT_ID' }

CSTATEMENT.addServicePrincipal
 ('SERVICE'[, OPTS])
new ServicePrincipal
 ('SERVICE'[, OPTS])              #CPRINCIPAL with { Service: 'SERVICE_DOMAIN'_TK }
OPTS.conditions                   #COND_OBJ
OPTS.region                       #'REGION'
ServicePrincipal
 .servicePrincipalName
 ('SERVICE')->'SERVICE_DOMAIN'_TK #
CVAR @aws-cdk/aws-iam:            #If true (recommended), always return 'SERVICE[.REGION].amazonaws.com'
 standardizedServicePrincipals    #If false (def), uses RFACTs, which used to be needed for some edge cases, but not anymore

CSTATEMENT.addFederatedPrincipal
 (STR, COND_OBJ)
new FederatedPrincipal
 (STR[, COND_OBJ])
new OpenIdConnectPrincipal
 (CSAML_PROVIDER[, COND_OBJ])
new WebIdentityPrincipal
 ('WEB_ID_DOMAIN'[, COND_OBJ])
new SamlPrincipal
 (CSAML_PROVIDER, COND_OBJ)       #CPRINCIPAL with { Federated: STR }
new SamlConsolePrincipal
 (CSAML_PROVIDER, COND_OBJ)       #Same but with COND_OBJ { StringEquals: { SAML:aud: 'https://signin.aws.amazon.com/saml' } }

new UnknownPrincipal(OPTS)        #ICPRINCIPAL that needs to be replaced by another one
                                  #Throws or warns when used
OPTS.resource                     #CONSTRUCT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      CONDITION OPERATORS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATEMENT.Condition               #VAL2
 .CONDITION_OP.COND_KEY           #Applies STATEMENT only if CONDITION_OP(COND_KEY, VAL2) is true
                                  #Each CONDITION_OP|COND_KEY is and'd
                                  #VAL2 can be an ARR, in which case each item is or'd

GLOB                              #Can only use: * ?
BOOL                              #"true|false", not true|false

CONDITION_OP                      #Any of the following.

ForAnyValue:CONDITION_OP
 (VAL_ARR, VAL2)                  #CONDITION_OP(VAL, VAL2) || ...
ForAllValue:CONDITION_OP
 (VAL_ARR, VAL2)                  #CONDITION_OP(VAL, VAL2) && ...

CONDITION_OPIfExists
 (VAL, VAL2)                      #CONDITION_OP(VAL, VAL2) || VAL === undefined
Null(VAL, BOOL)                   #VAL ===|!== undefined

Bool(BOOL, BOOL2)                 #BOOL === BOOL2

String[Not]Equals[IgnoreCase]
 (STR, STR2)                      #STR ===|!== STR2
String[Not]Like(STR, 'GLOB')      #STR =~|!=~ 'GLOB'

Numeric[Not]Equals(NUM, NUM2)     #NUM ===|!== NUM2
NumericLess|GreaterThan[Equals]
 (NUM, NUM2)                      #NUM <|<=|>|>= NUM2

Date[Not]Equals('DATE', 'DATE2')  #'DATE' ===|!== 'DATE2'
DateLess|GreaterThan[Equals]
 ('DATE', 'DATE2')                #'DATE' <|<=|>|>= 'DATE2'

BinaryEquals(BUFFER, 'BASE64')    #BUFFER === 'BASE64'

Arn[Not]Equals('ARN', 'ARN2')     #'ARN' ===|!== 'ARN2'
Arn[Not]Like('ARN', 'GLOB')       #'ARN' =~|!=~ 'GLOB'

[Not]IpAddress('IP', 'IP2')       #'IP' =~ 'IP2'
                                  #Can be IPv4|v6
                                  #Can append '/MASK'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONDITION KEY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COND_KEY                          #Also named "context key"
                                  #Name is case-insensitive.
                                  #Can be either:
                                  #  - "global": aws:*
                                  #  - "service-specific": see in SERVICE's own doc
                                  #Some can only be used when using a specific STATEMENT.Action|Resource
${COND_KEY[, 'DEFAULT']}          #"Policy variable". Can be used in:
                                  #  - CONDITION_OP.COND_KEY value
                                  #  - STATEMENT.Resource value
                                  #Can preprend|append STR
                                  #Type of policy variable (and COND_KEY) must:
                                  #  - be STR|ARN
                                  #  - not be ARR
                                  #If policy variable is undefined:
                                  #  - 'DEFAULT' is used
                                  #  - otherwise whole value becomes undefined
                                  #     - should take that case into account when writing POLICY_DOC
                                  #Can escape * ? $ using ${CHAR}

aws:PrincipalType                 #"Account|User|FederatedUser|AssumedRole|Anonymous"
aws:username                      #'USER'
                                  #undefined unless PrincipalType 'User'
aws:userid                        #Depending on PrincipalType:
                                  #  - "Account": ACCOUNT_ID
                                  #  - "User": USER_MID
                                  #  - "FederatedUser": 'ACCOUNT_ID:FEDERATED_USER'
                                  #  - "AssumedRole": 'ROLE_MID:ASSUMED_ROLE|INSTANCE_PROFILE_MID'
                                  #  - "Anonymous": 'anonymous'
aws:PrincipalAccount              #'ACCOUNT_ID|anonymous' of the PRINCIPAL
aws:PrincipalArn                  #ROOT|USER|FEDERATED_USER|ROLE_ARN of the PRINCIPAL
                                  #If ASSUMED_ROLE, use ROLE_ARN
                                  #undefined if anonymous

aws:ResourceAccount               #'ACCOUNT_ID' of the resource
aws:RequestedRegion               #'REGION' of the resource
                                  #'us-east-1' for SERVICEs that are not REGION-specific

aws:CurrentTime                   #'DATE'
aws:EpochTime                     #DATE_NUM

aws:SecureTransport               #BOOL. Whether the request is HTTPS
aws:SourceIp                      #'IP' of the request
aws:UserAgent                     #STR. Value of User-Agent [C]
aws:Referer                       #STR. Value of Referer [C]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONDITION CDK         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COND_OBJ                          #{ CONDITION_OP: { COND_KEY: VAL } }. STATEMENT.Condition
OPTS|CSTATEMENT|CCOND_PRINCIPAL
 .conditions                      #COND_OBJ
CSTATEMENT|CCOND_PRINCIPAL
 .addConditions(COND_OBJ)         #
CSTATEMENT|CCOND_PRINCIPAL
 .addCondition('CONDITION_OP',
 { COND_KEY: VAL })               #

CSTATEMENT
 .addSourceArnCondition('ARN')    #{ ArnEquals: { aws:SourceArn: ARN } }
CSTATMNT.addSourceAccountCondition
 ('ACCOUNT_ID')                   #{ StringEquals: { aws:SourceAccount: ACCOUNT_ID } }
CSTATEMENT.addAccountCondition
 ('ACCOUNT_ID')                   #{ StringEquals: { sts:ExternalId: ACCOUNT_ID } }

CPRINCIPAL.withConditions
 (COND_OBJ)->CCOND_PRINCIPAL
new PrincipalWithConditions
 (ICPRINCIPAL, COND_OBJ)          #CCOND_PRINCIPAL. Like CPRINCIPAL, except merges additional STATEMENT.Condition

new PrincipalPolicyFragment       #Adds related COND_OBJ.
 (..., COND_OBJ)                  #All STATEMENT's ICPRINCIPALs must have same one
CPRINCIPAL_FRAGMENT.conditions    #COND_OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SIMULATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SimulateCustomPolicy()            #Req: SIMULATION
                                  #  - no PolicySourceArn, i.e. meant for resource-based policies
                                  #Res: EvaluationResult EVAL_RESULT_ARR
SimulatePrincipalPolicy()         #Req: SIMULATION
                                  #  - require PolicySourceArn, i.e. meant for identity-based policies
                                  #Res: EvaluationResult EVAL_RESULT_ARR

SIMULATION                        #Dry run of POLICYs on a given action + resources
                                  #UI at https://policysim.aws.amazon.com/
SIMULATION.ActionNames            #PACTION_ARR
                                  #Can only use '*' when using SIMULATION.PolicySourceArn
SIMULATION.PolicySourceArn        #GUROLE_ARN. Use its attached POLICYs
SIMULATION.CallerArn              #USER_ARN used when evaluating any STATEMENT.Principal
                                  #Def: SIMULATION.PolicySourceArn (if defined)
SIMULATION.PolicyInputList        #Identity-based POLICY_DOC_ARR attached to the PRINCIPAL
SIMULATION.PermissionsBoundary
 PolicyInputList                  #PERM_BOUNDARY-based POLICY_DOC_ARR attached to the PRINCIPAL
SIMULATION.ResourcePolicy         #Resource-based POLICY_DOC attached to the resources
                                  #Def: none, even if the resource actually has one
SIMULATION.ResourceArns           #ARN_ARR of the resources
                                  #Can point to non-existing resources
                                  #Def: '*'
SIMULATION.ResourceOwner          #ROOT_ARN of the owner of the resources and SIMULATION.ResourcePolicy
                                  #Def: SIMULATION.CallerArn
                                  #Only needed if:
                                  #  - SIMULATION.ResourcePolicy used
                                  #  - SIMULATION.ResourceArns do not include ACCOUNT_ID (e.g. S3 BUCKET|OBJECTs)
SIMULATION.ResourceHandlingOption #'EC2-VPC-InstanceStore|EBS[-Subnet]'. For EC2, requires the presence of the following resources
                                  #in SIMULATION.ResourceArns:
                                  #  - 'EBS': VOLUME
                                  #  - '-Subnet': SUBNET

GetContextKeysForCustomPolicy()   #Retrieve all COND_KEYs used by specific POLICY_DOCs
                                  #Goal is to pass them as SIMULATION.ContextEntries
                                  #Req: PolicyInputList POLICY_DOC_ARR
                                  #Res: ContextKeyNames 'COND_KEY'_ARR
GetContextKeysForPrincipalPolicy()#Same but must also pass request parameters: PolicySourceArn GUROLE_ARN

SIMULATION.ContextEntries         #CONTEXT_ENTRY_ARR
CONTEXT_ENTRY                     #COND_KEY to use in the POLICY_DOCs
CONTEXT_ENTRY.ContextKeyType      #'boolean|string|numeric|date|binary|ip[List]'
CONTEXT_ENTRY.ContextKeyName      #'COND_KEY'
CONTEXT_ENTRY.ContextKeyValues    #VAL_ARR. COND_KEY value.

EVAL_RESULT                       #Result of a SIMULATION
EVAL_RESULT
 .ResourceSpecificResults         #EVAL_RESOURCE_RESULT. Resource-specific result
EVAL_RESULT.EvalActionName        #PACTION
EVAL[_RESOURCE]_RESULT
 .EvalResourceName                #ARN
EVAL_RESULT.EvalDecision
EVAL_RESOURCE_RESULT
 .EvalResourceDecision            #'allowed' or 'explicit|implicitDeny'
EVAL[_RESOURCE]_RESULT
 .PermissionsBoundary
  DecisionDetail
 .AllowedByPermissionsBoundary    #BOOL. False if action was denied due to a PERM_BOUNDARY's POLICY
EVAL_RESULT
 .OrganizationDecisionDetail
 .AllowedByOrganizations          #BOOL. False if action was denied due to a organization's POLICY (SCP)
EVAL[_RESOURCE]_RESULT
 .MissingContextValues            #'COND_KEY'_ARR used in a POLICY but not supplied as SIMULATION.ContextEntries

EVAL[_RESOURCE]_RESULT
 .MatchedStatements               #EVAL_STATEMENT_ARR that were used
EVAL_STATEMENT.SourcePolicyId     #POLICY_ARN
EVAL_STATEMENT.SourcePolicyType   #One of:
                                  #  - 'user|group|role': IPOLICY
                                  #  - 'aws-managed|user-managed': MPOLICY
                                  #  - 'resource'
                                  #  - 'none'
EVAL_STATEMENT
 .Start|EndPosition.Column|Line   #NUM

EVAL[_RESOURCE]_RESULT
 .EvalDecisionDetails             #EVAL_DETAIL_ARR
EVAL_DETAIL                       #Explanation of why the action was allowed|denied
EVAL_DETAIL.key                   #STR
EVAL_DETAIL.value                 #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTH MESSAGE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DecodeAuthorizationMessage()      #Req: ENCODED_AUTH_MESSAGE
                                  #Res: DECODED_AUTH_MESSAGE

ENCODED_AUTH_MESSAGE              #AWS 403 responses sometimes include an error message, which is encrypted.
                                  #Usually contains: ACTION, resource, PRINCIPAL, deny|allow, COND_KEYs
ENCODED_AUTH_MESSAGE
 .EncodedMessage                  #STR

DECODED_AUTH_MESSAGE              #Decrypted ENCODED_AUTH_MESSAGE
DECODED_AUTH_MESSAGE
 .DecodedMessage                  #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVER CERTIFICATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadServerCertificate()         #Req: SERVER_CERTIFICATE
                                  #  - no Arn, ServerCertificateId, UploadDate, Expiration
                                  #Res: SERVER_CERTIFICATE
                                  #  - no CertificateBody, CertificateChain
                                  #  - Arn|ServerCertificateId|ServerCertificateName|Path|UploadDate|Expiration -> ServerCertificateMetadata.*
UpdateServerCertificate()         #Req:
                                  #  - no Arn, ServerCertificateId, UploadDate, Expiration, CertificateBody, CertificateChain, PrivateKey, Tags
                                  #  - ServerCertificateName -> ServerCertificateName + NewServerCertificateName
                                  #  - Path -> NewPath
                                  #Res: empty
GetServerCertificate()            #Req: SERVER_CERTIFICATE
                                  #  - only ServerCertificateName
                                  #Res: SERVER_CERTIFICATE
                                  #  - no PrivateKey
                                  #  - Arn|ServerCertificateId|ServerCertificateName|Path|UploadDate|Expiration -> ServerCertificateMetadata.*
ListServerCertificates()          #Req: SERVER_CERTIFICATE
                                  #  - only Path -> PathPrefix
                                  #Res: ServerCertificateMetadataList SERVER_CERTIFICATE_ARR
                                  #  - no CertificateBody, CertificateChain, PrivateKey, Tags
DeleteServerCertificate()         #Req: SERVER_CERTIFICATE
                                  #  - only ServerCertificateName
                                  #Res: empty

SERVER_CERTIFICATE                #X.509 server certificate.
                                  #Must first create X.509 certificates manually.
                                  #  - prefer using AWS Certificate Manager instead
                                  #Meant for HTTPS servers
                                  #Max 20 (flexible to 1000) (SUMMARY_MAP.ServerCertificates[Quota])
SERVER_CERTIFICATE.Arn            #SERVER_CERTIFICATE_ARN. 'arn:aws:iam::ACCOUNT_ID:server-certificate[/PATH]/NAME'
SERVER_CERTIFICATE
 .ServerCertificateId             #SERVER_CERTIFICATE_MID
SERVER_CERTIFICATE
 .ServerCertificateName           #'SERVER_CERTIFICATE'
                                 ##With Pulumi, can use "namePrefix" to randomize
SERVER_CERTIFICATE.Path           #NAMEPATH
SERVER_CERTIFICATE.UploadDate     #'DATE'
SERVER_CERTIFICATE.Expiration     #'DATE'
SERVER_CERTIFICATE.CertificateBody#'PEM'. X.509 public key certificate
SERVER_CERTIFICATE
 .CertificateChain                #'PEM'. Concatenation of public keys
SERVER_CERTIFICATE.PrivateKey     #'PEM'. Private key

TagServerCertificate()
ListServerCertificateTags()
UntagServerCertificate()          #AWS TAGS
SERVER_CERTIFICATE.Tags           #RESOURCE_NAME: ServerCertificateName 'SERVER_CERTIFICATE'

AWS::IAM::ServerCertificate       #RESPROPs: ServerCertificateName, Path, CertificateBody, CertificateChain, PrivateKey, Tags
                                  #RESATTRs: Arn


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCOUNT ALIAS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccountAlias()              #Req: AccountAlias 'ACCOUNT_ALIAS'
                                  #Res: empty
ListAccountAliases()              #Req: empty
                                  #Res: AccountAliases 'ACCOUNT_ALIAS'_ARR
DeleteAccountAlias()              #Req: AccountAlias 'ACCOUNT_ALIAS'
                                  #Res: empty

ACCOUNT_ALIAS                     #STR. Alias for ACCOUNT_ID
                                  #  - including in sign-in URL
                                  #Must be [[:alnum:]-] (hyphen only in middle)
                                  #Max 1 per ACCOUNT_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORG ACCESSES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GenerateOrganizationsAccessReport #Req: ORG_REQ
 ()                               #Res: ORG_JOB
                                  #  - no SortKey
GetOrganizationsAccessReport()    #Req: ORG_JOB
                                  #Res: ORG_REPORT

ORG_REQ.EntityPath                #'ORG_ID/ORG_ROOT_ID/PARENT_OU_ID/ACCOUNT_ID'
ORG_REQ.OrganizationsPolicyId     #ORG's POLICY (SCP) ID

ORG_JOB.JobId                     #STR
ORG_JOB.SortKey                   #'{TYPE}_ASCENDING|DESCENDING' with TYPE being 'SERVICE_NAMESPACE|LAST_AUTHENTICATED_TIME'

ORG_REPORT                        #List of all accesses in a given ORG
                                  #Meant to find unused permissions or POLICYs
                                  #  - for actual logging, use CloudTrail
                                  #Only last 400 days
                                  #Does not include:
                                  #  - anonymous accesses (e.g. S3)
                                  #  - iam:PassRole
                                  #Includes failed accesses
                                  #4-hours throttled
ORG_REPORT_ARN                    #'arn:aws:iam::ACCOUNT_ID:access-report/ENTITY_PATH'
ORG_REPORT.JobCreationDate        #'DATE'
ORG_REPORT.JobCompletionDate      #'DATE'. null if JobStatus 'IN_PROGRESS'
ORG_REPORT.JobStatus              #'IN_PROGRESS' or 'COMPLETED|FAILED'

ORG_REPORT
 .NumberOfServicesAccessible      #NUM of SERVICEs that can be accessed with the given ORG's POLICY (SCP)
ORG_REPORT
 .NumberOfServicesNotAccessed     #NUM of SERVICEs that can be accessed, but were not accessed

ORG_REPORT.ErrorDetails           #ORG_ERROR_ARR
ORG_ERROR.Code|Message            #STR. Error retrieving ORG_ACCESS

ORG_REPORT.AccessDetails          #ORG_ACCESS_ARR
ORG_ACCESS                        #Single access in a given ORG
ORG_ACCESS.Region                 #'REGION' being accessed
ORG_ACCESS.ServiceNamespace       #'SERVICE' being accessed
ORG_ACCESS.ServiceName            #'SERVICE' being accessed, human-friendly
ORG_ACCESS.LastAuthenticatedTime  #'DATE' of most recent access
ORG_ACCESS.EntityPath             #'ORG_ID/ORG_ROOT_ID/PARENT_OU_ID/ACCOUNT_ID' of the accessor
ORG_ACCESS
  .TotalAuthenticatedEntities     #NUM of ACCOUNTs within accessing ORG that tried to access


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         USER ACCESSES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GenerateServiceLastAccessedDetails#Req: SERVICE_REQ
 ()                               #Res: SERVICE_JOB
                                  #  - no ServiceNamespace
SERVICE_REQ                       #Requests SERVICE_REPORT|SERVICE_ENTITIES_REPORT
SERVICE_REQ.Arn                   #USER|GROUP|ROLE|POLICY_ARN
SERVICE_REQ.Granularity           #Whether to include ACTION_ACCESSes: 'ACTION_LEVEL' (yes) or 'SERVICE_LEVEL' (no, def)

SERVICE_JOB.JobId                 #STR
SERVICE_JOB.ServiceNamespace      #'SERVICE'

GetServiceLastAccessedDetails()   #Req: SERVICE_JOB
                                  #  - no ServiceNamespace
                                  #Res: SERVICE_REPORT
SERVICE_REPORT                    #List of accesses for all SERVICEs
                                  #"IAM access advisor"
                                  #Same throttling and restrictions as ORG_REPORT
IAMAccessAdvisorReadOnly          #AWS managed POLICY. Permissions used by SERVICE_REQ

SERVICE_REPORT.JobCreationDate    #'DATE'
SERVICE_REPORT.JobCompletionDate  #'DATE'
SERVICE_REPORT.JobStatus          #'IN_PROGRESS' or 'COMPLETED|FAILED'
SERVICE_REPORT.Error.Code|Message #STR, when JobStatus 'FAILED'
SERVICE_REPORT.JobType            #SERVICE_REQ.Granularity

SERVICE_REPORT.ServiceLastAccessed#SERVICE_ACCESS_ARR
SERVICE_ACCESS                    #List of accesses for one SERVICE
SERVICE_ACCESS.ServiceNamespace   #'SERVICE' being accessed
SERVICE_ACCESS.ServiceName        #'SERVICE' being accessed, human-friendly
SERVICE_ACCESS.LastAuthenticated  #'DATE' of most recent access
SERVICE_ACCESS
 .LastAuthenticatedEntity         #USER|ROLE_ARN of accessor
SERVICE_ACCESS
 .LastAuthenticatedRegion         #'REGION' of the accessor
SERVICE_ACCESS
 .TotalAuthenticatedEntities      #NUM of USER|ROLEs that tried to access
SERVICE_ACCESS
 .TrackedActionsLastAccessed      #ACTION_ACCESS_ARR

ACTION_ACCESS                     #List of accesses for one ACTION
ACTION_ACCESS.ActionName          #'SERVICE_ACTION'
ACTION_ACCESS.LastAccessedTime    #'DATE' of most recent access
ACTION_ACCESS.LastAccessedEntity  #USER|ROLE_ARN of most recent accessor
ACTION_ACCESS.LastAccessedRegion  #'REGION' of most recent accessor

GetServiceLastAccessed            #Req: SERVICE_JOB
 DetailsWithEntities()            #Res: SERVICE_ENTITIES_REPORT
SERVICE_ENTITIES_REPORT           #List of accesses for one SERVICE
SERVICE_ENTITIES_REPORT
 .JobCompletionDate
 |JobCreationDate|JobStatus|Error #Like SERVICE_REPORT.*
SERVICE_ENTITIES_REPORT
 .EntityDetailsList               #ENTITY_ACCESS_ARR

ENTITY_ACCESS                     #List of accesses for one SERVICE and one UGROLE
ENTITY_ACCESS.LastAuthenticated   #'DATE' of most recent access
ENTITY_ACCESS.EntityInfo          #ENTITY_INFO
ENTITY_INFO.Arn                   #UGROLE_ARN
ENTITY_INFO.Id                    #UGROLE_MID
ENTITY_INFO.Name                  #'UGROLE'
ENTITY_INFO.Path                  #NAMEPATH
ENTITY_INFO.Type                  #'USER|GROUP|ROLE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SUMMARY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetAccountAuthorizationDetails()  #Req: SUMMARY_REQ
                                  #Res: SUMMARY

SUMMARY_REQ                       #
SUMMARY_REQ.Filter                #'User|Role|Group|LocalManagedPolicy|AWSManagedPolicy'_ARR
                                  #Exclude specific types from SUMMARY.*
SUMMARY                           #All of ACCOUNT's current UGROLEs, POLICYs, POLICY_VERSIONs, MPOLICYs, IPOLICYs, PERM_BOUNDARYs and INSTANCE_PROFILEs

SUMMARY.UserDetailList            #USER_INFO_ARR
USER_INFO                         #Like USER but without PasswordLastUsed

SUMMARY.GroupDetailList           #GROUP_INFO_ARR
GROUP_INFO                        #Like GROUP
USER_INFO.GroupList               #'GROUP_ARR'

SUMMARY.RoleDetailList            #ROLE_INFO_ARR
ROLE_INFO                         #Like ROLE but no Description, MaxSessionDuration

SUMMARY.Policies                  #POLICY_INFO_ARR
POLICY_INFO                       #Like POLICY but no Tags
POLICY_INFO.PolicyVersionList     #POLICY_VERSION_ARR, without PolicyArn

USER_INFO|GROUP_INFO|ROLE_INFO
 .AttachedManagedPolicies         #MPOLICY_INFO_ARR
MPOLICY_INFO                      #Like MPOLICY but without UGROLEName

USER_INFO.UserPolicyList
GROUP_INFO.GroupPolicyList
ROLE_INFO.RolePolicyList          #IPOLICY_INFO_ARR
IPOLICY_INFO                      #Like IPOLICY but without UGROLEName

USER_INFO|ROLE_INFO
 .PermissionsBoundary             #ATTACHED_PERM_BOUNDARY

ROLE_INFO.InstanceProfileList     #INSTANCE_PROFILE_ARR
