
       
   IAM  
       



TODO ==>
  - https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_tagging.html
  - https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html

VERSION ==>                   #2022-11-16

STS ==>                       #See STS doc for: ROLE, INSTANCE_PROFILE, SERVICE_LINKED_ROLE, SAML_PROVIDER, OPENID_PROVIDER
                              #Part of STS: CALLER_IDENTITY, ACCESS_KEY_INFO, DECODED_AUTH_MESSAGE

SUMMARY ==>                   #???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              API              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME ==>                      #Identity and Access Management

PAGINATION ==>                #Req: Marker STR, MaxItems STR (def|max: 1e4)
                              #Res: IsTruncated BOOL, Marker STR

PRICING ==>                   #Free

REGION ==>                    #Not REGION-specific


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LIMITS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetAccountSummary()           #Res: SUMMARY_MAP
SUMMARY_MAP                   #IAM limits ("Quota") and usage.
                              #Documented as OBJ, but actually an OBJ_ARR: key STR, value NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PRINCIPAL           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ROOT ==>                      #1 per AWS account
ROOT_ARN                      #'arn:aws:iam::ACCOUNT_ID:root'

OBJ:
  - AWS STR[_ARR] among:
     - ROOT_ARN|ACCOUNT_ID
     - USER_ARN|FEDERATED_USER_ARN
     - [ASSUMED_]ROLE_ARN
     - '*'
        - principals must also have identity-based permissions, if in a different account
  - CanonicalUser CANONICAL_ACCOUNT_ID[_ARR]
  - Federated SAML_PROVIDER_ARN|'DOMAIN'[_ARR]
  - Service 'SERVICE_DOMAIN'[_ARR]
'*': like AWS '*'
NotPrincipal:
  - should include ASSUMED_ROLE -> ROLE -> USER -> ROOT
     - e.g. if ROLE, should include USER|ROOT too

PRINCIPAL                     #Who is being permitted.
                              #Can be:
                              #  - ROOT_ARN, or alternatively:
                              #     - ACCOUNT_ID
                              #     - CANONICAL_ACCOUNT_ID: only for S3
                              #  - USER_ARN
                              #     - including as FEDERATED_USER_ARN
                              #  - [ASSUMED_]ROLE_ARN
                              #     - including through SAML|OpenID
                              #        - either as [ASSUMED_]ROLE_ARN, or as SAML_PROVIDER_ARN|'DOMAIN'
                              #     - including for 'SERVICE_DOMAIN'
                              #  - INSTANCE_PROFILE_ARN
                              #Can also use MID instead of ARN

UROLE                         #USER|ROLE
UGROLE                        #USER|GROUP|ROLE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CALLER IDENTITY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetCallerIdentity()           #Req: empty
                              #Res: CURRENT_PRINCIPAL

CALLER_IDENTITY               #Currently authenticated PRINCIPAL
CALLER_IDENTITY.Account       #ACCOUNT_ID
CALLER_IDENTITY.Arn           #ARN
CALLER_IDENTITY.UserId        #Like POLICYVAR aws:userid


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             USER              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateUser()                  #Req: USER
                              #  - no Arn, UserId, CreateDate, PasswordLastUsed
                              #Res: User USER
UpdateUser()                  #Req: USER
                              #  - no Arn, UserId, CreateDate, PasswordLastUsed, PermissionsBoundary, Tags
                              #  - UserName -> UserName + NewUserName
                              #  - Path -> NewPath
                              #Res: empty
GetUser()                     #Req: USER
                              #  - only UserName
                              #Res: User USER
ListUsers()                   #Req: USER
                              #  - only Path -> PathPrefix
                              #Res: Users USER_ARR
DeleteUser()                  #Req: USER
                              #  - only UserName
                              #Res: empty

USER                          #Real person.
                              #Not AWS service.
                              #Max 5000 (SUMMARY_MAP.Users[Quota])
USER.Arn                      #USER_ARN. 'arn:aws:iam::ACCOUNT_ID:user[/PATH]/NAME'
USER.UserId                   #USER_MID
USER.UserName                 #'USER'
USER.Path                     #ARN_PATH
USER.CreateDate               #'DATE'
USER.PasswordLastUsed         #'DATE' of last LOGIN_PROFILE sign-in
                              #null if never signed in
                              #Time is 5-min throttled
TagUser()
ListUserTags()
UntagUser()                   #AWS TAGS
USER.Tags                     #RESOURCE_NAME: UserName 'USER'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GROUP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateGroup()                 #Req: GROUP
                              #  - no Arn, GroupId, CreateDate
                              #Res: FGROUP
                              #  - no Users
UpdateGroup()                 #Req:
                              #  - no Arn, GroupId, CreateDate
                              #  - GroupName -> GroupName + NewGroupName
                              #  - Path -> NewPath
                              #Res: empty
AddUserToGroup()              #Req: GROUP_USER
                              #Res: empty
RemoveUserFromGroup()         #Req: GROUP_USER
                              #Res: empty
GetGroup()                    #Req: GROUP
                              #  - only GroupName
                              #Res: FGROUP
ListGroups()                  #Req: GROUP
                              #  - only Path -> PathPrefix
                              #Res: Groups GROUP_ARR
ListGroupsForUser()           #Req: FGROUP
                              #  - only UserName
                              #Res: Groups GROUP_ARR
DeleteGroup()                 #Req: GROUP
                              #  - only GroupName
                              #Res: empty

GROUP                         #Sets of users
                              #Allow managing permissions of multiple users.
                              #User can belong to 0, 1 or several GROUPs.
                              #Max 300 (up to 500 on request) (SUMMARY_MAP.Groups[Quota])
                              #Max 10 per user (SUMMARY_MAP.GroupsPerUserQuota)
ADMIN GROUP ==>               #Recommended instead of using root
                              #Can do everything: Action '*', Resource '*'
GROUP.Arn                     #GROUP_ARN. 'arn:aws:iam::ACCOUNT_ID:group[/PATH]/NAME'
GROUP.GroupId                 #GROUP_MID
GROUP.GroupName               #'GROUP'
GROUP.Path                    #ARN_PATH
GROUP.CreateDate              #'DATE'

FGROUP                        #GROUP, including the list of USERs
FGROUP.Users                  #USER_ARR
FGROUP.Group                  #GROUP

GROUP_USER                    #One USER in a GROUP
GROUP_USER.UserName           #'USER'
GROUP_USER.GroupName          #'GROUP'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CREDENTIALS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CREDENTIALS                   #One of:
                              #  - LOGIN_PROFILE
                              #     - optionally with [VIRTUAL_]MFA_DEVICE
                              #  - ACCESS_KEY
                              #     - including through STS (MFA, FEDERATED_USER, AssumeRole(), SAML_PROVIDER, OPENID_PROVIDER)
                              #  - SIGNING_CERTIFICATE
                              #  - SERVICE_CREDENTIAL
                              #  - SSH_PUBLIC_KEY
                              #  - ASYM_KEY_PAIR
                              #New users have no credentials.
ASYM_KEY_PAIR                 #Only for EC2 and CloudFront
                              #Max 5 per USER

GenerateCredentialReport()    #Req: empty
                              #Res: CREDENTIAL_REQ
GetCredentialReport()         #Req: empty
                              #Res: CREDENTIAL_REPORT

CREDENTIAL_REQ.Description    #STR
CREDENTIAL_REQ.State          #'STARTED', 'INPROGRESS' or 'COMPLETE'

CREDENTIAL_REPORT             #All CREDENTIALs of current ACCOUNT
CREDENTIAL_REPORT
 .GeneratedTime               #'DATE'
CREDENTIAL_REPORT.ReportFormat#'text/csv'
CREDENTIAL_REPORT.Content     #'CSV_BASE64' of CREDENTIAL_CONTENT_ARR
CREDENTIAL_CONTENT            #CREDENTIALs of a USER
CREDENTIAL_CONTENT.user       #'USER'
CREDENTIAL_CONTENT.arn        #USER_ARN
CREDENTIAL_CONTENT
 .user_creation_time          #'DATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOGIN PROFILE         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateLoginProfile()          #Req: LOGIN_PROFILE
                              #  - no CreateDate
                              #Res: LoginProfile LOGIN_PROFILE
                              #  - no Password
UpdateLoginProfile()          #Req: LOGIN_PROFILE
                              #  - no CreateDate
                              #Res: empty
ChangePassword()              #Req: LOGIN_PROFILE
                              #  - only Password -> OldPassword + NewPassword
                              #Res: empty
GetLoginProfile()             #Req: LOGIN_PROFILE
                              #  - only UserName
                              #Res: LoginProfile LOGIN_PROFILE
                              #  - no Password
DeleteLoginProfile()          #Req: LOGIN_PROFILE
                              #  - only UserName
                              #Res: empty

LOGIN_PROFILE                 #Web app password of a user.
                              #Max 1 per user
LOGIN_PROFILE.UserName        #'USER'
LOGIN_PROFILE.CreateDate      #'DATE'
LOGIN_PROFILE.Password        #STR
                              #ASCII only
LOGIN_PROFILE
 .PasswordResetRequired       #BOOL (def: false). Set to true to require resetting password.

ROOT_PASSWORD                 #LOGIN_PROFILE does not apply to root, which:
                              #  - identify with email address, not username
                              #  - sign-in at https://signin.aws.amazon.com/signin, not https://ACCOUNT_ID.signin.aws.amazon.com/console
PASSWORD                      #LOGIN_PROFILE|ROOT_PASSWORD

CREDENTIAL_CONTENT            #'TRUE|FALSE'. Whether there is a LOGIN_PROFILE.
 .password_enabled            #'not_supported' if root.
CREDENTIAL_CONTENT            #'DATE' of last PASSWORD login
 .password_last_used          #Can be 'no_information' (never used) or 'N/A' (no PASSWORD)
CREDENTIAL_CONTENT            #'DATE' of last LOGIN_PROFILE.Password change
 .password_last_changed       #Can be 'not_supported' (root) or 'N/A' (not done)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        PASSWORD POLICY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UpdateAccountPasswordPolicy() #Req: PASSWORD_POLICY
                              #  - no ExpirePasswords
                              #Res: empty
GetAccountPasswordPolicy()    #Req: empty
                              #Res: PasswordPolicy PASSWORD_POLICY
DeleteAccountPasswordPolicy() #Req: empty
                              #Res: empty

PASSWORD_POLICY               #Constraints on all LOGIN_PROFILE.Password

PASSWORD_POLICY
 .AllowUsersToChangePassword  #BOOL (def: false)

PASSWORD_POLICY.MaxPasswordAge#NUM. Require resetting password after NUM days.
                              #Max 3 years
PASSWORD_POLICY
 .ExpirePasswords             #BOOL. True when MaxPasswordAge defined
PASSWORD_POLICY.HardExpiry    #BOOL (def: false). When true, expired password can only be updated by root, not user.
CREDENTIAL_CONTENT            #'DATE' of next rotation with PASSWORD_POLICY.MaxPasswordAge
 .password_next_rotation      #Can be 'not_supported' (root)

PASSWORD_POLICY
 .PasswordReusePrevention     #NUM. If set, remembers last NUM passwords and do not allow re-using them.

PASSWORD_POLICY
 .MinimumPasswordLength       #NUM (def: 6)
PASSWORD_POLICY
 .RequireLowercaseCharacters  #BOOL (def: false)
PASSWORD_POLICY
 .RequireUppercaseCharacters  #BOOL (def: false)
PASSWORD_POLICY.RequireNumbers#BOOL (def: false)
PASSWORD_POLICY.RequireSymbols#BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              MFA              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EnableMFADevice()             #Req: MFA_DEVICE
                              #  - no EnableDate
                              #Res: empty
ResyncMFADevice()             #Req: MFA_DEVICE
                              #  - no EnableDate
                              #Res: empty
                              #Re-enable MFA_DEVICE.
                              #Needed for example when took too much time to enther MFA_DEVICE.AuthenticationCode1|2
ListMFADevices()              #Req: MFA_DEVICE
                              #  - only UserName
                              #Res: MFADevices MFA_DEVICE_ARR
                              #  - no AutenticationCode1|2
DeactivateMFADevice()         #Req: MFA_DEVICE
                              #  - only SerialNumber, UserName
                              #Res: empty

MFA_DEVICE                    #MFA hardware device used to authenticate a USER
                              #Max 1 per user
MFA_DEVICE.SerialNumber       #MFA_DEVICE_MID
MFA_DEVICE.UserName           #'USER'
MFA_DEVICE.EnableDate         #'DATE'
MFA_DEVICE.AuthenticationCode1#STR. First code from MFA device on creation.
MFA_DEVICE.AuthenticationCode2#STR. Second code from MFA device on creation.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VIRTUAL MFA          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateVirtualMFADevice()      #Req: VIRTUAL_MFA_DEVICE
                              #  - only VirtualMFADeviceName, Path, Tags
                              #Res: VirtualMFADevice VIRTUAL_MFA_DEVICE
                              #  - no VirtualMFADeviceName, Path
ListVirtualMFADevices()       #Req:
                              #  - AssignmentStatus 'Assigned', 'Unassigned' or 'Any' (def)
                              #Res: VirtualMFADevices VIRTUAL_MFA_ARR
                              #  - no VirtualMFADeviceName, Path
DeleteVirtualMFADevice()      #Req: VIRTUAL_MFA_DEVICE
                              #  - only SerialNumber
                              #Res: empty

VIRTUAL_MFA_DEVICE            #MFA device used to authenticate a USER, as a mobile app
                              #Max 1 per user (SUMMARY_MAP.AccountMFAEnabled|MFADevices[InUse])
VIRTUAL_MFA_DEVICE
 .SerialNumber                #VIRTUAL_MFA_DEVICE_ARN. 'arn:aws:iam::ACCOUNT_ID:mfa[/PATH]/NAME'
VIRTUAL_MFA_DEVICE
 .VirtualMFADeviceName        #'VIRTUAL_MFA_DEVICE'
VIRTUAL_MFA_DEVICE.Path       #ARN_PATH
VIRTUAL_MFA_DEVICE.User       #USER
VIRTUAL_MFA_DEVICE.EnableDate #'DATE'
VIRTUAL_MFA_DEVICE
 .Base32StringSeed            #Base32-encoded STR. Secret key used for creation
VIRTUAL_MFA_DEVICE.QRCodePNG  #'PNG_BASE64' of the creation QR code
                              #QR code content is 'otpauth://totp/VIRTUAL_MFA_DEVICE@ACCOUNT_ID|USER?secret=BASE_32_STRING_SEED'

TagMFADevice()
ListMFADeviceTags()
UntagMFADevice()              #AWS TAGS
VIRTUAL_MFA_DEVICE.Tags       #RESOURCE_NAME: SerialNumber VIRTUAL_MFA_DEVICE_ARN

CREDENTIAL_CONTENT.mfa_active #'TRUE|FALSE'. Whether there is a MFA_DEVICE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACCESS KEY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccessKey()             #Req: ACCESS_KEY
                              #  - only UserName
                              #Res: AccessKey ACCESS_KEY
                              #  - no AccessKeyLastUsed
UpdateAccessKey()             #Req: ACCESS_KEY
                              #  - no CreateDate, SecretAccessKey, AccessKeyLastUsed
                              #Res: empty
GetAccessKeyLastUsed()        #Req: ACCESS_KEY
                              #  - only AccessKeyId
                              #Res: ACCESS_KEY
                              #  - only UserName, AccessKeyLastUsed
ListAccessKeys()              #Req: ACCESS_KEY
                              #  - only UserName
                              #Res: AccessKeyMetadata ACCESS_KEY_ARR
                              #  - no SecretAccessKey, AccessKeyLastUsed
DeleteAccessKey()             #Req: ACCESS_KEY
                              #  - only AccessKeyId, UserName
                              #Res: empty

ACCESS_KEY                    #Programmatic credentials
                              #Avoid with root (prefer LOGIN_PROFILE)
                              #Max 2 per user|root (SUMMARY_MAP.AccountAccessKeysPresent|AccessKeysPerUserQuota)
ACCESS_KEY.AccessKeyId        #ACCESS_KEY_ID, i.e. public part of the key
                              #20 chars
ACCESS_KEY.SecretAccessKey    #SECRET_ACCESS_KEY, i.e. private part of the key
                              #40 chars
ACCESS_KEY.UserName           #'USER' (def: current one)
ACCESS_KEY.CreateDate         #'DATE'
ACCESS_KEY.AccessKeyLastUsed  #ACCESS_KEY_LAST_USED
ACCESS_KEY_LAST_USED          #'DATE'. null if not used in last 400 days
 .LastUsedDate                #15 minutes-throttle.
ACCESS_KEY_LAST_USED.Region   #'REGION'. Not defined if not REGION-specific (e.g. S3)
ACCESS_KEY_LAST_USED
 .ServiceName                 #'SERVICE'
ACCESS_KEY.Status             #'Active' (def) or 'Inactive' (manually disabled)

CREDENTIAL_CONTENT
 .access_key_1|2_*            #
CREDENTIAL_CONTENT
 .access_key_*_active         #'TRUE|FALSE'. Whether there is an ACCESS_KEY
CREDENTIAL_CONTENT            #'DATE' of last update.
 .access_key_*_last_rotated   #Can be 'N/A' (no ACCESS_KEY)
CREDENTIAL_CONTENT            #'DATE'. ACCESS_KEY.AccessKeyLastUsed.LastUsedDate
 .access_key_*_last_used_date #Can be 'N/A' (no ACCESS_KEY, or never used)
CREDENTIAL_CONTENT
 .access_key_*_               #'DATE'. ACCESS_KEY.AccessKeyLastUsed.Region
  last_used_region            #Can be 'N/A' (no ACCESS_KEY, or never used)
CREDENTIAL_CONTENT
 .access_key_*_               #'SERVICE'. ACCESS_KEY.AccessKeyLastUsed.ServiceName
  last_used_service           #Can be 'N/A' (no ACCESS_KEY, or never used)

GetAccessKeyInfo()            #Req: ACCESS_KEY_REQ
                              #Res: ACCESS_KEY_INFO

ACCESS_KEY_REQ                #
ACCESS_KEY_REQ.AccessKeyId    #ACCESS_KEY_ID

ACCESS_KEY_INFO               #
ACCESS_KEY_INFO.Account       #ACCOUNT_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SIGNING CERTIFICATE      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSigningCertificate()    #Req: SIGNING_CERTIFICATE
                              #  - no CertificateId, UploadDate, Status
                              #Res: Certificate SIGNING_CERTIFICATE
UpdateSigningCertificate()    #Req: SIGNING_CERTIFICATE
                              #  - no UploadDate, CertificateBody
                              #Res: empty
ListSigningCertificates()     #Req: SIGNING_CERTIFICATE
                              #  - only UserName
                              #Res: Certificates SIGNING_CERTIFICATE_ARR
DeleteSigningCertificate()    #Req: SIGNING_CERTIFICATE
                              #  - only CertificateId, UserName
                              #Res: empty

SIGNING_CERTIFICATE           #X.509 client certificate for a USER to login
                              #Max 2 per user (SUMMARY_MAP.AccountSigningCertificatesPresent|SigningCertificatesPerUserQuota)
SIGNING_CERTIFICATE
 .CertificateId               #'SIGNING_CERTIFICATE'
SIGNING_CERTIFICATE.UploadDate#'DATE'
SIGNING_CERTIFICATE.UserName  #'USER'
SIGNING_CERTIFICATE
 .CertificateBody             #'PEM'. X.509 public key certficate
SIGNING_CERTIFICATE.Status    #'Active' (def) or 'Inactive'

CREDENTIAL_CONTENT.cert_1|2_* #
CREDENTIAL_CONTENT
 .cert_*_active               #'TRUE|FALSE'. Whether there is a SIGNING_CERTIFICATE
CREDENTIAL_CONTENT
 .cert_*_last_rotated         #'DATE' of last update.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVICE CREDENTIAL       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Create                        #Req: SERVICE_CREDENTIAL
 ServiceSpecificCredential()  #  - no ServiceSpecificCredentialId, CreateDate, ServiceUserName, Status
                              #Res: ServiceSpecificCredential SERVICE_CREDENTIAL
Reset                         #Reset the password
 ServiceSpecificCredential()  #Req: SERVICE_CREDENTIAL
                              #  - only ServiceSpecificCredentialId, UserName
                              #Res: ServiceSpecificCredential SERVICE_CREDENTIAL
Update                        #Req: SERVICE_CREDENTIAL
 ServiceSpecificCredential()  #  - no CreateDate, ServiceName, ServiceUserName
                              #Res: empty
List                          #Req: SERVICE_CREDENTIAL
 ServiceSpecificCredentials() #  - only ServiceName, UserName
                              #Res: ServiceSpecificCredentials SERVICE_CREDENTIAL_ARR
Delete                        #Req: SERVICE_CREDENTIAL
 ServiceSpecificCredential()  #  - only ServiceSpecificCredentialId, UserName
                              #Res: empty

SERVICE_CREDENTIAL            #Like LOGIN_PROFILE, but SERVICE-specific
                              #Only for CodeCommit and AWS Keyspaces
SERVICE_CREDENTIAL
 .ServiceSpecificCredentialId #SERVICE_CREDENTIAL_MID
SERVICE_CREDENTIAL.CreateDate #'DATE'
SERVICE_CREDENTIAL.ServiceName#'SERVICE'
SERVICE_CREDENTIAL.UserName   #'USER'
SERVICE_CREDENTIAL
 .ServiceUserName             #STR. Credential's username
SERVICE_CREDENTIAL.Status     #'Active' (def) or 'Inactive'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SSH PUBLIC KEY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadSSHPublicKey()          #Req: SSH_PUBLIC_KEY
                              #  - no SSHPulbicKeyId, UploadDate, Status, Encoding, Fingerprint
                              #Res: SSHPublicKey SSH_PUBLIC_KEY
                              #  - no Encoding
UpdateSSHPublicKey()          #Req: SSH_PUBLIC_KEY
                              #  - no UploadDate, SSHPublicKeyBody, Encoding, Fingerprint
                              #Res: empty
GetSSHPublicKeys()            #Req: SSH_PUBLIC_KEY
                              #  - only SSHPublicKeyId, UserName, Encoding
                              #Res: SSHPublicKey SSH_PUBLIC_KEY
                              #  - no Encoding
ListSSHPublicKey()            #Req: SSH_PUBLIC_KEY
                              #  - only UserName
                              #Res: SSHPublicKeys SSH_PUBLIC_KEY_ARR
                              #  - no Encoding
DeleteSSHPublicKey()          #Req: SSH_PUBLIC_KEY
                              #  - only SSHPublicKeyId, UserName
                              #Res: empty

SSH_PUBLIC_KEY                #SSH public key to authenticate a USER. Only for CodeCommit.
SSH_PUBLIC_KEY.SSHPublicKeyId #SSH_PUBLIC_KEY_MID
SSH_PUBLIC_KEY.UserName       #'USER'
SSH_PUBLIC_KEY.UploadDate     #'DATE'
SSH_PUBLIC_KEY.Status         #'Active' (def) or 'Inactive'
SSH_PUBLIC_KEY
 .SSHPublicKeyBody            #STR. Content of public key
SSH_PUBLIC_KEY.Encoding       #'SSH' (ssh-rsa format) or 'PEM'. Format of SSH_PUBLIC_KEY.SSHPublicKeyBody
                              #Def: either
SSH_PUBLIC_KEY.Fingerprint    #STR. MD5 hash of public key


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            POLICY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreatePolicy()                #Req: POLICY
                              #  - no Arn, PolicyId, CreateDate, UpdateDate, IsAttachable, DefaultVersionId, PermissionsBoundaryUsageCount, AttachmentCount
                              #Res: Policy POLICY
                              #  - no PolicyDocument
GetPolicy()                   #Req: POLICY
                              #  - only Arn -> PolicyArn
                              #Res: Policy POLICY
                              #  - no PolicyDocument
ListPolicies()                #Req:
                              #  - Path -> PathPrefix
                              #  - OnlyAttached BOOL (def: false): if true, only if AttachmentCount > 0
                              #  - PolicyUsageFilter 'PermissionsBoundary' or 'PermissionsPolicy'
                              #  - Scope 'AWS', 'Local' or 'All' (def): whether AWS|customer managed policy
                              #Res: Policies POLICY_ARR
                              #  - no PolicyDocument
ListPolicies                  #Return policies for a given UGROLE on a given AWS service
 GrantingServiceAccess()      #Req:
                              #  - Arn UGROLE_ARN
                              #  - ServiceNamespaces 'SERVICE'_ARR
                              #Res: PoliciesGrantingServiceAccess ARR:
                              #  - ServiceNamespace 'SERVICE'
                              #  - Policies ARR:
                              #     - EntityType 'USER|GROUP|ROLE'
                              #     - EntityName STR
                              #     - PolicyArn POLICY_ARN
                              #     - PolicyName 'POLICY'
                              #     - PolicyType 'INLINE' or 'MANAGED'
DeletePolicy()                #Req: POLICY
                              #  - only Arn -> PolicyArn
                              #Res: empty

POLICY                        #Set of permissions.
                              #Max 1500 (up to 5000 on request) (SUMMARY_MAP.Policies[Quota])
POLICY.Arn                    #POLICY_ARN. 'arn:aws:iam::ACCOUNT_ID:policy[/PATH]/POLICY'
POLICY.PolicyId               #POLICY_MID
POLICY.PolicyName             #'POLICY'
POLICY.Path                   #ARN_PATH
POLICY.CreateDate             #'DATE'
POLICY.UpdateDate             #'DATE'
POLICY.Description            #STR
POLICY.PolicyDocument         #POLICY_DOC
POLICY.IsAttachable           #BOOL (def: true). If false, disabled.
TagPolicy()
ListPolicyTags()
UntagPolicy()                 #AWS TAGS
POLICY.Tags                   #RESOURCE_NAME: PolicyArn POLICY_ARN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY VERSION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreatePolicyVersion()         #Req: POLICY_VERSION
                              #  - no VersionId, CreateDate
                              #  - Document -> PolicyDocument
                              #  - IsDefaultVersion -> SetAsDefault
                              #Res: PolicyVersion POLICY_VERSION
                              #  - no PolicyArn
SetDefaultPolicyVersion()     #Req: POLICY_VERSION
                              #  - only VersionId, PolicyArn
                              #Res: empty
GetPolicyVersion()            #Req: POLICY_VERSION
                              #  - only VersionId, PolicyArn
                              #Res: PolicyVersion POLICY_VERSION
                              #  - no PolicyArn
ListPolicyVersions()          #Req: POLICY_VERSION
                              #  - only PolicyArn
                              #Res: Versions POLICY_VERSION_ARR
                              #  - no PolicyArn
DeletePolicyVersion()         #Req: POLICY_VERSION
                              #  - only VersionId, PolicyArn
                              #Res: empty

POLICY_VERSION                #Specific state of a given POLICY.
                              #Each POLICY update creates a new POLICY_VERSION
                              #Max 1e4 (SUMMARY_MAP.PolicyVersionsInUse[Quota])
                              #Max 5 per POLICY (SUMMARY_MAP.VersionsPerPolicyQuota)
POLICY_VERSION.VersionId      #POLICY_VERSION_ID. 'vNUM[.*]'
POLICY_VERSION.PolicyArn      #POLICY_ARN
POLICY_VERSION.CreateDate     #'DATE'
POLICY_VERSION.Document       #POLICY_DOC

POLICY.DefaultVersionId       #POLICY_VERSION_ID of the POLICY_VERSION currently used
POLICY_VERSION
 .IsDefaultVersion            #BOOL (def: false). True when POLICY.DefaultVersionId === POLICY_VERSION.VersionId


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         INLINE POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUGROLEPolicy()             #Req: IPOLICY
                              #Res: empty
GetUGROLEPolicy()             #Req: IPOLICY
                              #  - only PolicyName, UGROLEName
                              #Res: IPOLICY
ListUGROLEsPolicies()         #Req: IPOLICY
                              #  - only UGROLEName
                              #Res: PolicyNames 'POLICY'_ARR
DeleteUGROLEPolicy()          #Req: IPOLICY
                              #  - only PolicyName, UGROLEName
                              #Res: empty

IPOLICY                       #Identity-based POLICY without an ARN, attached to a single UGROLE
IPOLICY.PolicyName            #'POLICY'
IPOLICY.UGROLEName            #STR
IPOLICY.PolicyDocument        #POLICY_DOC
                              #Max 2KB for USER, 5KB for GROUP, 10KB for ROLE (SUMMARY_MAP.GUROLEPolicySizeQuota)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        MANAGED POLICY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AttachUGROLEPolicy()          #Req: MPOLICY
                              #  - only PolicyArn, UGROLEName
                              #Res: empty
ListAttachedUGROLEPolicies()  #Req: MPOLICY
                              #  - only UGROLEName
                              #Res: AttachedPolicies MPOLICY_ARR
                              #  - no UGROLEName
ListEntitiesForPolicy()       #Req:
                              #  - PolicyArn
                              #  - PathPrefix: of POLICY.Path
                              #  - PolicyUsageFilter: like ListPolicies()
                              #  - EntityFilter STR among:
                              #     - 'User', 'Group' or 'Role'
                              #     - 'AWSManagedPolicy' or 'LocalManagedPolicy' (like ListPolicies())
                              #Res: PolicyUGROLEs ARR
                              #  - UGROLEId ARN
                              #  - UGROLEName STR
DetachUGROLEPolicy()          #Req: MPOLICY
                              #  - only PolicyArn, UGROLEName
                              #Res: empty

MPOLICY                       #Identity-based POLICY with its own ARN, attached to 0-n UGROLEs
                              #Either:
                              #  - AWS managed policy: created by AWS
                              #  - customer managed policy: created by users
                              #Max 10 per UGROLE (up to 20 on request) (SUMMARY_MAP.AttachedPoliciesPerGUROLEQuota)
                              #Max 6KB (SUMMARY_MAP.PolicySizeQuota)
MPOLICY.PolicyArn             #POLICY_ARN
MPOLICY.PolicyName            #'POLICY'
MPOLICY.UGROLEName            #STR

POLICY.AttachmentCount        #NUM of UGROLEs using this as a MPOLICY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PERMISSION BOUNDARY      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PutUROLEPermissionsBoundary() #Req: PERM_BOUNDARY
                              #Res: empty
DeleteUROLEPermissions        #Req: PERM_BOUNDARY
 Boundary()                   #  - only UROLEName
                              #Res: empty
PERM_BOUNDARY                 #Like MPOLICY???
PERM_BOUNDARY
 .PermissionsBoundary         #POLICY_ARN
PERM_BOUNDARY.UROLEName       #STR

UROLE.PermissionsBoundary     #ATTACHED_PERM_BOUNDARY
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryArn      #POLICY_ARN
ATTACHED_PERM_BOUNDARY
 .PermissionsBoundaryType     #Always 'Policy'

POLICY.PermissionsBoundary
 UsageCount                   #NUM of UROLEs using POLICY as PERM_BOUNDARY


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        POLICY DOCUMENT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY_DOC                    #List of permissions of a POLICY
                              #One PRINCIPAL|resource can have multiple POLICYs (that are and'd).
                              #JSON-stringified, URL-encoded.
                              #  - When using CloudFormation, can use YAML instead.
POLICY_DOC.Version            #'2012-10-17'
POLICY_DOC.Id                 #POLICY_DOC_ID. Optional. Using a UUID is recommended.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POLICY STATEMENTS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY.Statement              #STATEMENT_ARR
                              #Statements are and'd
STATEMENT                     #Single permission
STATEMENT.Sid                 #STR. Identifier, used mostly for description

STATEMENT.Effect              #'Allow|Deny'
                              #By default, no AWS_ACTION permitted
                              #  - i.e. at least one 'Allow' must match
                              #If at least one 'Deny' matches, not permitted
                              #  - even if one 'Allow' matches
STATEMENT.Action              #AWS_ACTION[_ARR]
                              #Can use wildcard *

STATEMENT.Resource            #Resource ARN[_ARR]
                              #POLICY must be attached to a PRINCIPAL: "identity-based policy"
                              #Can use wildcard *
STATEMENT.Principal           #PRINCIPAL
                              #POLICY must be attached to a resource: "resource-based policy"

STATEMENT.NotAction
STATEMENT.NotResource         #Like STATEMENT.Action|Resource|Principal but using inverted list.
STATEMENT.NotPrincipal        #Cannot use both STATEMENT.* and STATEMENT.Not*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       POLICY CONDITION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATEMENT.Condition           #VAL[_ARR]
 .CONDITION_TEST.POLICY_VAR   #Applies STATEMENT only if CONDITION_TEST(POLICYVAR, VAL[_ARR]) is true

CONDITION_TEST                #Any of the following
ForAnyValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) || ...
ForAllValue:CONDITION_TEST
 (VAL_ARR, VAL2)              #CONDITION_TEST(VAL, VAL2) && ...
CONDITION_TESTIfExists
 (VAL, VAL2)                  #Adds: VAL !== undefined
Null(VAL, BOOL)               #VAL ===|!== undefined
Bool(BOOL, BOOL2)             #BOOL === BOOL2
String[Not]Equals[IgnoreCase]
 (STR, STR2)                  #STR ===|!== STR2
String[Not]Like(STR, 'GLOB')  #STR =~|!=~ 'GLOB'
Numeric[Not]Equals(NUM, NUM2) #NUM ===|!== NUM2
NumericLess|GreaterThan
 [Equals](NUM, NUM2)          #NUM <|<=|>|>= NUM2
Date[Not]Equals
 ('DATE', 'DATE2')            #DATE ===|!== DATE2
DateLess|GreaterThan
 [Equals]('DATE', 'DATE2')    #DATE <|<=|>|>= DATE2
BinaryEquals(BUFFER, 'BASE64')#BUFFER === 'BASE64'
Arn[Not]Equals('ARN', 'ARN2') #'ARN' ===|!== 'ARN2'
Arn[Not]Like('ARN', 'GLOB')   #'ARN' =~|!=~ 'GLOB'
[Not]IpAddress('IP', 'IP2')   #'IP' =~ 'IP2' (can use mask)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          POLICY VAR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POLICY_VAR                    #Can be used in:
                              #  - CONDITION_TEST.POLICY_VAR key
                              #  - CONDITION_TEST.POLICY_VAR value, as ${POLICYVAR}
                              #  - POLICY_DOC, as ${POLICY_VAR}
                              #If ${POLICY_VAR}, can preprend|append STR.
                              #Can be any of the following values.
                              #Some AWS services define their own too.

aws:PrincipalType             #Whether PRINCIPAL is:
                              #  - "Account":
                              #     - Principal ACCOUNT_ID|ROOT_ARN
                              #     - aws:userid === ACCOUNT_ID
                              #  - "User":
                              #     - Principal USER_ARN|GROUP_ARN|ROLE_ARN
                              #     - aws:username === 'USER', aws:userid === USER.UserId
                              #  - "Anonymous":
                              #     - Principal '*'
                              #  - "FederatedUser":
                              #     - Principal FEDERATED_USER_ARN, 'SERVICE_DOMAIN' or 'DOMAIN'
                              #  - "AssumedRole":
                              #     - Principal ASSUMED_ROLE_ARN|INSTANCE_PROFILE_ARN or SAML_PROVIDER_ARN|OPENID_PROVIDER_ARN
                              #     - aws:userid === 'ROLE_MID:CALLER' (not if SAML)
aws:username                  #STR
aws:userid                    #STR

aws:CurrentTime               #"YYYY-MM-DDTHH:MM:SSZ"
aws:EpochTime                 #NUM
aws:TokenIssueTime            #"YYYY-MM-DDTHH:MM:SSZ". For STS TEMP_CREDS

aws:MultiFactorAuthAge        #NUM (in secs). For MFA tokens

aws:SecureTransport           #BOOL. Whether use SSL

aws:SourceArn                 #ARN of the resource if PRINCIPAL is 'SERVICE_DOMAIN'.
aws:SourceOwner               #ACCOUNT_ID. Same with AWS service owner
aws:SourceIp                  #'IP'
aws:FederatedProvider         #'DOMAIN' if PRINCIPAL 'DOMAIN'

aws:UserAgent                 #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SIMULATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SimulateCustomPolicy()        #Req: SIMULATION
                              #  - no PolicySourceArn, i.e. meant for resource-based policies
                              #Res: EvaluationResult EVAL_RESULT_ARR
SimulatePrincipalPolicy()     #Req: SIMULATION
                              #  - require PolicySourceArn, i.e. meant for principal-based policies
                              #Res: EvaluationResult EVAL_RESULT_ARR

SIMULATION                    #Dry run of POLICYs on a given action + resources
SIMULATION.ActionNames        #AWS_ACTION_ARR
                              #Can only use '*' when using SIMULATION.PolicySourceArn
SIMULATION.PolicySourceArn    #GUROLE_ARN. Use its attached POLICYs
SIMULATION.CallerArn          #USER_ARN used when evaluating any STATEMENT.Principal
                              #Def: SIMULATION.PolicySourceArn (if defined)
SIMULATION.PolicyInputList    #Identity-based POLICY_DOC_ARR attached to the PRINCIPAL
SIMULATION.PermissionsBoundary
 PolicyInputList              #PERM_BOUNDARY-based POLICY_DOC_ARR attached to the PRINCIPAL
SIMULATION.ResourcePolicy     #Resource-based POLICY_DOC attached to the resources
                              #Def: none, even if the resource actually has one
SIMULATION.ResourceArns       #ARN_ARR of the resources
                              #Can point to non-existing resources
                              #Def: '*'
SIMULATION.ResourceOwner      #ROOT_ARN of the owner of the resources and SIMULATION.ResourcePolicy
                              #Def: SIMULATION.CallerArn
                              #Only needed if:
                              #  - SIMULATION.ResourcePolicy used
                              #  - SIMULATION.ResourceArns do not include ACCOUNT_ID (e.g. S3 BUCKET|OBJECTs)
SIMULATION                    #'EC2-VPC-InstanceStore|EBS[-Subnet]'. For EC2, requires the presence of the following resources
 .ResourceHandlingOption      #in SIMULATION.ResourceArns:
                              #  - 'EBS': VOLUME
                              #  - '-Subnet': SUBNET

GetContextKeys                #Retrieve all POLICY_VARs used by specific POLICY_DOCs
 ForCustomPolicy()            #Goal is to pass them as SIMULATION.ContextEntries
                              #Req: PolicyInputList POLICY_DOC_ARR
                              #Res: ContextKeyNames 'POLICY_VAR'_ARR
GetContextKeys
 ForPrincipalPolicy()         #Same but must also pass request parameters: PolicySourceArn GUROLE_ARN

SIMULATION.ContextEntries     #CONTEXT_ENTRY_ARR
CONTEXT_ENTRY                 #POLICY_VAR to use in the POLICY_DOCs
CONTEXT_ENTRY.ContextKeyType  #'boolean|string|numeric|date|binary|ip[List]'
CONTEXT_ENTRY.ContextKeyName  #'POLICY_VAR'
CONTEXT_ENTRY.ContextKeyValues#VAL_ARR. POLICY_VAR value.

EVAL_RESULT                   #Result of a SIMULATION
EVAL_RESULT
 .ResourceSpecificResults     #EVAL_RESOURCE_RESULT. Resource-specific result
EVAL_RESULT.EvalActionName    #AWS_ACTION
EVAL[_RESOURCE]_RESULT
 .EvalResourceName            #ARN
EVAL_RESULT.EvalDecision
EVAL_RESOURCE_RESULT
 .EvalResourceDecision        #'allowed' or 'explicit|implicitDeny'
EVAL[_RESOURCE]_RESULT
 .PermissionsBoundary
  DecisionDetail
 .AllowedByPermissionsBoundary#BOOL. False if action was denied due to a PERM_BOUNDARY's POLICY
EVAL_RESULT
 .OrganizationDecisionDetail
 .AllowedByOrganizations      #BOOL. False if action was denied due to a organization's POLICY (SCP)
EVAL[_RESOURCE]_RESULT
 .MissingContextValues        #'POLICY_VAR'_ARR used in a POLICY but not supplied as SIMULATION.ContextEntries

EVAL[_RESOURCE]_RESULT
 .MatchedStatements           #EVAL_STATEMENT_ARR that were used
EVAL_STATEMENT.SourcePolicyId #POLICY_ARN
EVAL_STATEMENT                #One of:
 .SourcePolicyType            #  - 'user|group|role': IPOLICY
                              #  - 'aws-managed|user-managed': MPOLICY
                              #  - 'resource'
                              #  - 'none'
EVAL_STATEMENT
 .Start|EndPosition
 .Column|Line                 #NUM

EVAL[_RESOURCE]_RESULT
 .EvalDecisionDetails         #EVAL_DETAIL_ARR
EVAL_DETAIL                   #Explanation of why the action was allowed|denied
EVAL_DETAIL.key               #STR
EVAL_DETAIL.value             #STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTH MESSAGE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DecodeAuthorizationMessage()  #Req: ENCODED_AUTH_MESSAGE
                              #Res: DECODED_AUTH_MESSAGE

ENCODED_AUTH_MESSAGE          #AWS 403 responses sometimes include an error message, which is encrypted.
                              #Usually contains: ACTION, resource, PRINCIPAL, deny|allow, POLICYVARs
ENCODED_AUTH_MESSAGE
 .EncodedMessage              #STR

DECODED_AUTH_MESSAGE          #Decrypted ENCODED_AUTH_MESSAGE
DECODED_AUTH_MESSAGE
 .DecodedMessage              #STR

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      SERVER CERTIFICATE       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UploadServerCertificate()     #Req: SERVER_CERTIFICATE
                              #  - no Arn, ServerCertificateId, UploadDate, Expiration
                              #Res: SERVER_CERTIFICATE
                              #  - no CertificateBody, CertificateChain
                              #  - Arn|ServerCertificateId|ServerCertificateName|Path|UploadDate|Expiration -> ServerCertificateMetadata.*
UpdateServerCertificate()     #Req:
                              #  - no Arn, ServerCertificateId, UploadDate, Expiration, CertificateBody, CertificateChain, PrivateKey, Tags
                              #  - ServerCertificateName -> ServerCertificateName + NewServerCertificateName
                              #  - Path -> NewPath
                              #Res: empty
GetServerCertificate()        #Req: SERVER_CERTIFICATE
                              #  - only ServerCertificateName
                              #Res: SERVER_CERTIFICATE
                              #  - no PrivateKey
                              #  - Arn|ServerCertificateId|ServerCertificateName|Path|UploadDate|Expiration -> ServerCertificateMetadata.*
ListServerCertificates()      #Req: SERVER_CERTIFICATE
                              #  - only Path -> PathPrefix
                              #Res: ServerCertificateMetadataList SERVER_CERTIFICATE_ARR
                              #  - no CertificateBody, CertificateChain, PrivateKey, Tags
DeleteServerCertificate()     #Req: SERVER_CERTIFICATE
                              #  - only ServerCertificateName
                              #Res: empty

SERVER_CERTIFICATE            #X.509 server certificate.
                              #Must fist create X.509 certificates manually.
                              #  - prefer using AWS Certificate Manager instead
                              #Max 20 (up to 1000 on request) (SUMMARY_MAP.ServerCertificates[Quota])
SERVER_CERTIFICATE.Arn        #SERVER_CERTIFICATE_ARN. 'arn:aws:iam::ACCOUNT_ID:server-certificate[/PATH]/NAME'
SERVER_CERTIFICATE
 .ServerCertificateId         #SERVER_CERTIFICATE_MID
SERVER_CERTIFICATE
 .ServerCertificateName       #'SERVER_CERTIFICATE'
SERVER_CERTIFICATE.Path       #ARN_PATH
SERVER_CERTIFICATE.UploadDate #'DATE'
SERVER_CERTIFICATE.Expiration #'DATE'
SERVER_CERTIFICATE
 .CertificateBody             #'PEM'. X.509 public key certificate
SERVER_CERTIFICATE
 .CertificateChain            #'PEM'. Concatenation of public keys
SERVER_CERTIFICATE.PrivateKey #'PEM'. Private key

TagServerCertificate()
ListServerCertificateTags()
UntagServerCertificate()      #AWS TAGS
SERVER_CERTIFICATE.Tags       #RESOURCE_NAME: ServerCertificateName 'SERVER_CERTIFICATE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACCOUNT ALIAS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CreateAccountAlias()          #Req: AccountAlias 'ACCOUNT_ALIAS'
                              #Res: empty
ListAccountAliases()          #Req: empty
                              #Res: AccountAliases 'ACCOUNT_ALIAS'_ARR
DeleteAccountAlias()          #Req: AccountAlias 'ACCOUNT_ALIAS'
                              #Res: empty

ACCOUNT_ALIAS                 #STR. Alias for ACCOUNT_ID
                              #Must be [[:alnum:]-] (hyphen only in middle)
                              #Max 1 per ACCOUNT_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORG ACCESSES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Generate                      #Req: ORG_REQ
 OrganizationsAccessReport()  #Res: ORG_JOB
                              #  - no SortKey
Get                           #Req: ORG_JOB
 OrganizationsAccessReport()  #Res: ORG_REPORT

ORG_REQ.EntityPath            #'ORG_ID/ORG_ROOT_ID/PARENT_OU_ID/ACCOUNT_ID'
ORG_REQ.OrganizationsPolicyId #ORG's POLICY (SCP) ID

ORG_JOB.JobId                 #STR
ORG_JOB.SortKey               #'{TYPE}_ASCENDING|DESCENDING' with TYPE being 'SERVICE_NAMESPACE|LAST_AUTHENTICATED_TIME'

ORG_REPORT                    #List of all accesses in a given ORG
                              #Only last 400 days
                              #Does not include anonymous accesses (e.g. S3)
                              #Include failed accesses
ORG_REPORT.JobCreationDate    #'DATE'
ORG_REPORT.JobCompletionDate  #'DATE'. null if JobStatus 'IN_PROGRESS'
ORG_REPORT.JobStatus          #'IN_PROGRESS' or 'COMPLETED|FAILED'

ORG_REPORT
 .NumberOfServicesAccessible  #NUM of SERVICEs that can be accessed with the given ORG's POLICY (SCP)
ORG_REPORT
 .NumberOfServicesNotAccessed #NUM of SERVICEs that can be accessed, but were not accessed

ORG_REPORT.ErrorDetails       #ORG_ERROR_ARR
ORG_ERROR.Code|Message        #STR. Error retrieving ORG_ACCESS

ORG_REPORT.AccessDetails      #ORG_ACCESS_ARR
ORG_ACCESS                    #Single access in a given ORG
ORG_ACCESS.Region             #'REGION' being accessed
ORG_ACCESS.ServiceNamespace   #'SERVICE' being accessed
ORG_ACCESS.ServiceName        #'SERVICE' being accessed, human-friendly
ORG_ACCESS
 .LastAuthenticatedTime       #'DATE' of most recent access
ORG_ACCESS.EntityPath         #'ORG_ID/ORG_ROOT_ID/PARENT_OU_ID/ACCOUNT_ID' of the accessor
ORG_ACCESS
  .TotalAuthenticatedEntities #NUM of ACCOUNTs within accessing ORG that tried to access


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         USER ACCESSES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GenerateServiceLastAccessed   #Req: SERVICE_REQ
 Details()                    #Res: SERVICE_JOB
                              #  - no ServiceNamespace
SERVICE_REQ                   #Requests SERVICE_REPORT|SERVICE_ENTITIES_REPORT
                              #Only last 400 days
                              #Include failed accesses
SERVICE_REQ.Arn               #USER|GROUP|ROLE|POLICY_ARN
SERVICE_REQ.Granularity       #Whether to include ACTION_ACCESSes: 'ACTION_LEVEL' (yes) or 'SERVICE_LEVEL' (no, def)

SERVICE_JOB.JobId             #STR
SERVICE_JOB.ServiceNamespace  #'SERVICE'

GetServiceLastAccessed        #Req: SERVICE_JOB
 Details()                    #  - no ServiceNamespace
                              #Res: SERVICE_REPORT
SERVICE_REPORT                #List of accesses for all SERVICEs
SERVICE_REPORT.JobCreationDate#'DATE'
SERVICE_REPORT
 .JobCompletionDate           #'DATE'
SERVICE_REPORT.JobStatus      #'IN_PROGRESS' or 'COMPLETED|FAILED'
SERVICE_REPORT
 .Error.Code|Message          #STR, when JobStatus 'FAILED'
SERVICE_REPORT.JobType        #SERVICE_REQ.Granularity

SERVICE_REPORT
 .ServiceLastAccessed         #SERVICE_ACCESS_ARR
SERVICE_ACCESS                #List of accesses for one SERVICE
SERVICE_ACCESS
 .ServiceNamespace            #'SERVICE' being accessed
SERVICE_ACCESS.ServiceName    #'SERVICE' being accessed, human-friendly
SERVICE_ACCESS
 .LastAuthenticated           #'DATE' of most recent access
SERVICE_ACCESS
 .LastAuthenticatedEntity     #USER|ROLE_ARN of accessor
SERVICE_ACCESS
 .LastAuthenticatedRegion     #'REGION' of the accessor
SERVICE_ACCESS
 .TotalAuthenticatedEntities  #NUM of USER|ROLEs that tried to access
SERVICE_ACCESS
 .TrackedActionsLastAccessed  #ACTION_ACCESS_ARR

ACTION_ACCESS                 #List of accesses for one AWS_ACTION
ACTION_ACCESS.ActionName      #'SERVICE_ACTION'
ACTION_ACCESS.LastAccessedTime#'DATE' of most recent access
ACTION_ACCESS
 .LastAccessedEntity          #USER|ROLE_ARN of most recent accessor
ACTION_ACCESS
 .LastAccessedRegion          #'REGION' of most recent accessor

GetServiceLastAccessed        #Req: SERVICE_JOB
 DetailsWithEntities()        #Res: SERVICE_ENTITIES_REPORT
SERVICE_ENTITIES_REPORT       #List of accesses for one SERVICE
SERVICE_ENTITIES_REPORT
 .JobCreationDate
 |JobCompletionDate|JobStatus
 |Error                       #Like SERVICE_REPORT.*
SERVICE_ENTITIES_REPORT
 .EntityDetailsList           #ENTITY_ACCESS_ARR

ENTITY_ACCESS                 #List of accesses for one SERVICE and one UGROLE
ENTITY_ACCESS
 .LastAuthenticated           #'DATE' of most recent access
ENTITY_ACCESS.EntityInfo      #ENTITY_INFO
ENTITY_INFO.Arn               #UGROLE_ARN
ENTITY_INFO.Id                #UGROLE_MID
ENTITY_INFO.Name              #'UGROLE'
ENTITY_INFO.Path              #ARN_PATH
ENTITY_INFO.Type              #'USER|GROUP|ROLE'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SUMMARY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GetAccountAuthorization       #Req: SUMMARY_REQ
 Details()                    #Res: SUMMARY

SUMMARY_REQ                   #
SUMMARY_REQ.Filter            #'User|Role|Group|LocalManagedPolicy|AWSManagedPolicy'_ARR
                              #Exclude specific types from SUMMARY.*
SUMMARY                       #All of ACCOUNT's current UGROLEs, POLICYs, POLICY_VERSIONs, MPOLICYs, IPOLICYs, PERM_BOUNDARYs and INSTANCE_PROFILEs

SUMMARY.UserDetailList        #USER_INFO_ARR
USER_INFO                     #Like USER but without PasswordLastUsed

SUMMARY.GroupDetailList       #GROUP_INFO_ARR
GROUP_INFO                    #Like GROUP
USER_INFO.GroupList           #'GROUP_ARR'

SUMMARY.RoleDetailList        #ROLE_INFO_ARR
ROLE_INFO                     #Like ROLE but no Description, MaxSessionDuration

SUMMARY.Policies              #POLICY_INFO_ARR
POLICY_INFO                   #Like POLICY but no Tags
POLICY_INFO.PolicyVersionList #POLICY_VERSION_ARR, without PolicyArn

USER_INFO|GROUP_INFO|ROLE_INFO
 .AttachedManagedPolicies     #MPOLICY_INFO_ARR
MPOLICY_INFO                  #Like MPOLICY but without UGROLEName

USER_INFO.UserPolicyList
GROUP_INFO.GroupPolicyList
ROLE_INFO.RolePolicyList      #IPOLICY_INFO_ARR
IPOLICY_INFO                  #Like IPOLICY but without UGROLEName

USER_INFO|ROLE_INFO
 .PermissionsBoundary         #ATTACHED_PERM_BOUNDARY

ROLE_INFO.InstanceProfileList #INSTANCE_PROFILE_ARR
