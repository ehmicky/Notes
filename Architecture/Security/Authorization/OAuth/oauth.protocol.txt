
         
   OAUTH  
         



OAUTH ==>                         #Version 2.0

                                  ┌──────────┐
                                  │   MAIN   │
                                  └──────────┘

GOAL ==>                          #A "resource owner" (user)
                                  #  - allows a "Resource Server" (integrated app)
                                  #  - to allow a "client" (integrating app)
                                  #  - to do something on its behalf

CLIENT_ID                         #App-specific public ID
CLIENT_SECRET                     #App-specific secret

Authorization:
 Bearer ACCESS_TOKEN [C]
REQ.access_token                  #Usual way to authenticate

                                  ┌────────────────────────┐
                                  │   DISCOVERY DOCUMENT   │
                                  └────────────────────────┘

DISCOVERY DOCUMENT ==>            #Lists main OAuth URLs used by a provider, as JSON
DISCOVERY.issuer                  #ISSUER
DISCOVERY.authorization_endpoint  #AUTH_URL
DISCOVERY.token_endpoint          #TOKEN_URL
DISCOVERY.revocation_endpoint     #REVOKE_URL
DISCOVERY.jwks_uri                #PUBLICKEYS_URL

                                  ┌──────────────┐
                                  │   WEB FLOW   │
                                  └──────────────┘

WEB FLOW ==>                      #When client is browser

GET AUTH_URL                      #First step
?client_id                        #CLIENT_ID
?redirect_uri                     #CALLBACK_URL
?scope                            #'SCOPE', permissions
                                  #E.g. "https://www.googleapis.com/auth/SERVICE ..."
?state                            #'STATE', meant either
                                  #  - to keep information, e.g. original URL
                                  #  - as a random STR to prevent CSRF

GET CALLBACK_URL                  #Done by web page
?state                            #'STATE'. Should verify it
?code                             #'CODE'. Only if succeeded
?error                            #'ERROR'. Only if failed

POST TOKEN_URL                    #Second step, to do inside CALLBACK_URL handler
REQ.code                          #'CODE'
REQ.client_id                     #CLIENT_ID
REQ.client_secret                 #CLIENT_SECRET
REQ.redirect_uri                  #CALLBACK_URL
REQ.grant_type                    #'authorization_code'

RES.token_type                    #'Bearer'
RES.access_token                  #'ACCESS_TOKEN'. JWT, signed by ISSUER private key
                                  #Can verify it with ISSUER's PUBLICKEY
RES.refresh_token                 #'REFRESH_TOKEN'
RES.expires_in                    #NUM (in secs), of the ACCESS_TOKEN
RES.state                         #'STATE'

                                  ┌─────────────────┐
                                  │   DEVICE FLOW   │
                                  └─────────────────┘

DEVICE FLOW ==>                   #When client is a CLI or mobile|desktop app
                                  #Untrusted client:
                                  #  - require user to manually input a random code
                                  #  - instead of letting client redirect to a CALLBACK_URL with a 'CODE'

POST DEVICE_AUTH_URL              #First step
?client_id                        #CLIENT_ID

RES.verification_uri              #'VERIFY_URL'
                                  #User must go that URL and submit 'USER_CODE'
RES.interval                      #NUM (in secs). Polling interval for VERIFY_URL
RES.device_code                   #'DEVICE_CODE'
RES.user_code                     #'USER_CODE'
RES.expires_in                    #NUM (in secs). For DEVICE_CODE|USER_CODE

POST TOKEN_URL                    #Second step, to poll
REQ.client_id                     #CLIENT_ID
REQ.device_code                   #'DEVICE_CODE'
REQ.grant_type                    #'URN'. DEVICE_CODE type

RES.*                             #Like web flow
RES.error                         #'NAME' if user has not entered 'USER_CODE' yet

                                  ┌─────────────┐
                                  │   REFRESH   │
                                  └─────────────┘

POST TOKEN_URL                    #Get a new ACCESS_TOKEN using a REFRESH_TOKEN

REQ.refresh_token                 #'REFRESH_TOKEN'
REQ.client_id                     #CLIENT_ID
REQ.client_secret                 #CLIENT_SECRET
REQ.grant_type                    #'refresh_token'

RES.*                             #Like web flow

                                  ┌────────────┐
                                  │   OPENID   │
                                  └────────────┘

AUTHENTICATION ==>                #Using OAuth for authentication, even though intended initally for authorization

?scope                            #Must be 'openid[ email]'
                                  #If email, ID_TOKEN.email[_verified] present
?state                            #Must be query variable percent encoded
                                  #Including:
                                  #  - security_token STR: CSRF token
RES.id_token                      #ID_TOKEN
ID_TOKEN.iat                      #Core JWT. DATE_NUM
ID_TOKEN.exp                      #Core JWT. DATE_NUM
ID_TOKEN.iss                      #Core JWT. ISSUER. Must verify
ID_TOKEN.aud                      #Core JWT. CLIENT_ID. Must verify
ID_TOKEN.sub                      #Core JWT. USER_ID
ID_TOKEN.azp                      #CLIENT_ID
ID_TOKEN.email                    #STR. A single user ID can have alias emails
ID_TOKEN.email_verified           #BOOL
ID_TOKEN.at_hash                  #STR. Not necessary

                                  ┌────────────┐
                                  │   GOOGLE   │
                                  └────────────┘

GOOGLE APP CONSOLE ==>            #Used to register app
                                  #Can configure user consent window: name, logo, main page URL

https://accounts.google.com
 /.well-known/openid-configuration#DISCOVERY document of Google
DISCOVERY.issuer                  #'https://accounts.google.com'
DISCOVERY.authorization_endpoint  #'https://accounts.google.com/o/oauth2/auth'
DISCOVERY.token_endpoint          #'https://accounts.google.com/o/oauth2/token'
DISCOVERY.revocation_endpoint     #'https://accounts.google.com/o/oauth2/revoke'
DISCOVERY.jwks_uri                #'https://www.googleapis.com/oauth2/v2/certs', updated every day
DISCOVERY
 .device_authorization_endpoint   #'https://oauth2.googleapis.com/device/code'
DISCOVERY.userinfo_endpoint       #'https://openidconnect.googleapis.com/v1/userinfo'
DISCOVERY.response_types_supported#['code', 'token', 'id_token', 'code token', 'code id_token', 'token id_token', 'code token id_token', 'none']
DISCOVERY.subject_types_supported #['public']
DISCOVERY.id_token_signing
 _alg_values_supported            #['RS256']
DISCOVERY
 .code_challenge_methods_supported#['plain', 'S256']
DISCOVERY.token_endpoint
 _auth_methods_supported          #['client_secret_post', 'client_secret_basic']
DISCOVERY.scopes_supported        #['openid', 'email', 'profile']
DISCOVERY.claims_supported        #['aud', 'email', 'email_verified', 'exp', 'family_name', 'given_name', 'iat', 'iss', 'locale', 'name', 'picture', 'sub']
DISCOVERY.grant_types_supported   #['authorization_code', 'refresh_token', 'urn:ietf:params:oauth:grant-type:device_code|jwt-bearer']

POST TOKEN_URL                    #
REQ.api_key                       #API_KEY. Same function as CLIENT_ID
REQ.include_granted_scopes        #BOOL (def: false). Include previously granted scopes
                                  #Goal:
                                  #  - if several requests with different scopes
                                  #  - instead of having several 'ACCESS_TOKEN' with different scopes
                                  #  - the final 'ACCESS_TOKEN' has all the scopes, and others can be dropped
REQ.immediate                     #BOOL (def: false). No popup
REQ.access_type                   #'online|offline'. If 'online' (def), no REFRESH_TOKEN
REQ.approval_prompt               #'force|auto'. If 'force', prompt again even if permission already given for current scope
REQ.login_hint                    #STR. Pre-fill the email|username field
                                  #Must be either the sub USER_ID or the user email address
                                  #Can also be "sub", "email" or "address"
REQ.prompt                        #'none|consent [select_account]'
                                  #  - 'none': doesn't show user consent and fails if not logged in
                                  #  - 'consent': ask for user content and to log in
                                  #  - 'select_account': let user pick account
