
         
   OAUTH  
         


OAUTH ==>       #Version 2.0

DISCOVERY DOC ==>
  - Main URLs used by a provider, as a JSON file.
  - Fields:
     - "issuer" ISSUER
     - "authorization_endpoint" AUTH_URL
     - "token_endpoint" TOKEN_URL
     - "revocation_endpoint" REVOKE_URL
     - "jwks_uri" PUBLICKEYS_URL
  - For Google: https://accounts.google.com/.well-known/openid-configuration:
     - ISSUER: accounts.google.com
     - AUTH_URL: https://accounts.google.com/o/oauth2/auth
     - TOKEN_URL: https://accounts.google.com/o/oauth2/token
     - REVOKE_URL: https://accounts.google.com/o/oauth2/revoke
     - PUBLICKEYS_URL: https://www.googleapis.com/oauth2/v2/certs, updated every day
     - TOKEN_INFO_URL: https://www.googleapi.com/oauth2/v1/tokeninfo
     - "response_types_supported": ["code", "token", "id_token", "code token", "code id_token", "token id_token", "code token id_token",  "none"]
     - "subject_types_supported": ["public"]
     - "id_token_alg_values_supported": ["RS256"]
     - "token_endpoint_auth_methods_supported": ["client_secret_post"]

Main:
  - A given user ("Resource Owner"):
     - allows an application "B" ("Resource Server")
     - to allow any Application "A" ("client")
     - to do something on its behalf
  - Scenarios (this doc only shows [C] and [S]:
     - [C]: client-side
     - [S]:
        - server-side
        - use a CLIENT_SECRET so only specific app can do requests
     - [A]:
        - desktop/mobile apps
        - similar to [S] except for CALLBACK_URL
        - CLIENT_SECRET is in the app, so can't be treated as secret
     - [D]:
        - other devices (game console, printer, etc.)
        - since user consent cannot happen on the device, user gets a key that needs to be entered in a web browser using another device
  - Initial data:
     - Elements:
        - CLIENT_ID: public
        - [S] CLIENT_SECRET (shared secret between "A" and "B")
        - CALLBACK_URL_ARR (only https://)
     - With Google:
        - registration with Google App Console
        - also contains:
           - some content shown on user consent window (name, logo, main page URL)
           - API_KEY (same function as CLIENT_ID)

Scenario (__ means POST variables, ? query variables, # hash):
  - Getting TOKEN [S]:
     - "A": GET AUTH_URL ?TOKEN_REQUEST
     - "B": GET CALLBACK_URL ?AUTHORIZATION_CODE
     - "A": POST AUTH_URL __INTERMEDIARY_TOKEN_REQUEST -> ACCESS_TOKENS
  - Getting TOKEN [C]:
     - "A": GET AUTH_URL ?TOKEN_REQUEST
     - "B": GET CALLBACK_URL #ACCESS_TOKENS
  - Using TOKEN (authorized access):
     - "A": Authorization: Bearer TOKEN or __?access_token=TOKEN
  - Checking TOKEN is valid and not expired:
      - use PUBLICKEY of ISSUER on TOKEN
      - for Google, with authorized access can (but is slow), prefer checking (see GOOGLEAPIS verifyToken())
         - "A". GET TOKEN_INFO_URL -> TOKENINFO (400 if not valid)
  - Getting new TOKEN [S]:
     - "A": POST TOKEN_URL __REFRESH_REQUEST -> ACCESS_TOKENS
        - ACCESS_TOKENS has no user consent nor refresh_token field
  - Revoking a TOKEN [S]:
     - "A": GET REVOKE_URL ?token=REFRESH_TOKEN -> response code 200 if ok, 400 if not

Parameters:
  - TOKEN_REQUEST:
     - response_type STR: "token" [C], "code" [S]
     - client_id CLIENT_ID
     - redirect_uri CALLBACK_URL, percent-encoded
     - scope 'SCOPE'
        - permissions
        - should be only ones needed
        - e.g. "https://www.googleapis.com/auth/SERVICE ..."
     - state 'STATE':
        - passed as is to CALLBACK_URL, percent-encoded
        - e.g. keeping original URL around
        - should also be used as random STR for CSRF
  - TOKEN_REQUEST (Google-specific):
     - api_key API_KEY
     - include_granted_scopes BOOL:
        - include previously granted scopes
        - goal:
           - if several requests with different scopes
           - instead of having several 'ACCESS_TOKEN' with different scopes
           - the final 'ACCESS_TOKEN' has all the scopes, and others can be dropped
     - immediate BOOL:
        - if true, no popup
        - only for refresh ???
     - [S] access_type "online|offline":
        - if "offline", ACCESS_TOKENS will get a refresh_token
     - approval_prompt "force|auto":
        - if "force", prompt again even if permission already given for current scope
     - login_hint STR:
        - pre-fill the email/username field
        - must be either the sub USER_ID or the user email address
        - can also be "sub", "email" or "address"??? (or several???)
     - prompt "none|consent [select_account]":
        - "none": doesn't show user consent and fails if not logged in
        - "consent": ask for user content and to log in
        - "select_account": let user pick account
  - AUTHORIZATION_CODE:
     - error STR: only if fail
     - state 'STATE'
        - should verify CSFR
     - code 'CODE': only if success
  - INTERMEDIARY_TOKEN_REQUEST:
     - code 'CODE'
     - client_id CLIENT_ID
     - client_secret CLIENT_SECRET
     - redirect_uri CALLBACK_URL
     - grant_type "authorization_code"
  - ACCESS_TOKENS:
     - access_token 'ACCESS_TOKEN': JWT, signed by ISSUER private key
     - [S] refresh_token 'REFRESH_TOKEN': only if access_type "offline".
     - expires_in NUM: in seconds, of the ACCESS_TOKEN
     - [S???] token_type "Bearer"
     - state 'STATE'
  - ACCESS_TOKENS (GitHub-specific):
     - refresh_token_expires_in NUM: in seconds, of the RERESH_TOKEN
  - TOKEN_INFO:
     - error STR: only if expired
     - expires_in NUM
     - scope 'SCOPE'
     - audience CLIENT_ID (Google specific???)
  - REFRESH_REQUEST:
     - client_id CLIENT_ID
     - client_secret CLIENT_SECRET
     - grant_type "refresh_token"
     - refresh_token 'REFRESH_TOKEN'

Authentication:
  - Like [S] but:
     - Use scope "openid[ email]": if email, email[_verified] fields will be present in id_token OBJ.
     - Use state STR, where STR is GET variables percent encoded:
        - security_token STR: CSRF token. Must verify that state STR remains unchanged across the exchange.
        - Any other, e.g. former url STR
  - ACCESS_TOKENS has id_token OBJ:
     - iss ISSUER
     - at_hash STR: not necessary
     - sub STR: user ID
     - email STR: a single user ID can have alias emails
     - email_verified BOOL
     - aud CLIENT_ID
     - azp CLIENT_ID
     - iat NUM: when request was made
     - exp NUM: when it expires
  - Must always verify that id_token.iss|aud are good
  - Access to Google+ profile:
     - if scope: "profile", TOKENINFO.userid STR is there
     - GET - https://www.googleapis.com/plus/v1/people/USERID/openIdConnect -> OBJ:
        - kind: "plus#personOpenIdConnect"
        - gender: "male|female|other"
        - sub: user ID
        - [given|family_]name STR
        - profile URL (Google+ page)
        - picture URL
        - email STR
        - email_verified BOOL
        - locale STR: user preferred locale
     - USERID: "me" to use authenticated user (require access authorization with scope: "profile"):
        - https://www.googleapis.com/plus/v1/people/me/openIdConnect = DiscoveryDocument.userinfo_endpoint
