
                      
   EXPRESS-RATE-LIMIT  
                      



VERSION ==>                       #6.5.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RATELIMIT([OPTS])->MDWR           #Express MDWR
                                  #Rate limiting: MAX_NUM requests per WINDOW_MS
OPTS.max[(REQ, RES)]              #[PROMISE_]MAX_NUM
OPTS.windowMs                     #NUM (in ms, def: 1 minute)

OPTS.keyGenerator(REQ, RES)
 ->[PROMISE_]'KEY'                #'KEY' identifies users. Def: REQ.ip

OPTS.handler(REQ, RES, NEXT, OPTS)#What to do when request is above rate limiting
                                  #Def:
                                  #  - RES.status(OPTS.statusCode) (def: 429)
                                  #  - RES.end(OPTS.message[(REQ, RES)]) (def: 'Too many requests, please try again later.')
OPTS.skip(REQ, RES)->[PROMIS_]BOOL#If true, do not rate limit REQ
OPTS.skipSuccessfulRequests       #If true (def: false), do not increment request count if 1|2|3** response
OPTS.skipFailedRequests           #Same for 4|5** response or response closed early ('error'| 'close' events)
OPTS.requestWasSuccessful
 (REQ, RES)->BOOL                 #Customize which responses are considered successful with OPTS.skipSuccessful|FailedRequests

OPTS.legacyHeaders                #If true (def), sets:
                                  #  - X-RateLimit-Limit: MAX_NUM [S]
                                  #  - X-RateLimit-Remaining: MAX_NUM - COUNT [S]
                                  #  - X-RateLimit-Reset: DATE_NUM [S]
                                  #  - Retry-After: NUM [S] (in secs) (only if request was rate limited)
                                  #  - Date: DATE_STR [S]
OPTS.requestPropertyName          #Property on REQ.* (def: 'rateLimit')
REQ.rateLimit.limit               #MAX_NUM
REQ.rateLimit.current             #COUNT
REQ.rateLimit.remaining           #MAX_NUM - COUNT
REQ.rateLimit.resetTime           #DATE of next reset

OPTS.standardHeaders              #BOOL (def: false)
                                  #Same as OPTS.headers but uses names from draft RFC:
                                  #  https://tools.ietf.org/id/draft-polli-ratelimit-headers-01.html
                                  #I.e.:
                                  #  - X-RateLimit-* -> RateLimit-*
                                  #  - RateLimit-Reset is NUM of secs, not DATE_NUM
                                  #  - no Retry-Date [S], but can be used together with OPTS.legacyHeaders true


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STORE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.store                        #STORE, i.e. abstraction of a database to persist state
                                  #It is the responsability of STORE to reset state every WINDOW_MS
                                  #Default is in-memory
                                  #  - it resets all 'KEY' to 0 every WINDOW_MS (instead of handling each 'KEY' separately)
STORE.init(OPTS)                  #
STORE.increment('KEY')
 ->[PROMISE_]OBJ                  #OBJ: totalHits COUNT, resetTime WINDOW_MS
STORE.decrement('KEY')[->PROMISE] #
MDWR|STORE.resetKey('KEY')
 [->PROMISE]                      #
STORE.resetAll()[->PROMISE]       #

new MemoryStore(OPTS)->STORE      #

new RATE-LIMIT-MONGO(OPTS)->STORE##Version 2.3.2
OPTS.uri                         ##
OPTS.user|password               ##
OPTS.authSource                  ##Can be guessed from OPTS.uri as well
OPTS.collectionName              ##Def: 'expressRateRecords'
                                 ##Collection:
                                 ##  - { _id 'KEY', counter COUNT, expirationDate }
                                 ##  - expirationDate is creation time + OPTS.expireTimeMs (def: 60000)
                                 ##     - if OPTS.resetExpireDateOnChange true (def: false), last update time + OPTS.expireTimeMs instead
                                 ##  - have a TTL index on 'expirationDate', if OPTS.createTtlIndex true (def)
OPTS.collection                  ##COLL (alternative to connecting with OPTS.uri|user|password|authSource|collectionName)
OPTS.errorHandler(ERROR)         ##Fired on MongoDB error
OPTS.createTtlIndex              ##BOOL (def: true). Create TTL index on expirationDate field with expireAfterSeconds 0
OPTS.connectionOptions           ##OBJ passed to MongoDB client. Def: { useUnifiedTopology: true, useNewUrlParser: true }
STORE.getClient()->PROMISE_CLIENT##
