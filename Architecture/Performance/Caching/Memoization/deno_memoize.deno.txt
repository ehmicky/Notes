
                
   DENO_MEMOIZE  
                



ALTERNATIVES ==>                  #See moize

VERSION ==>                       #Part of Deno
                                  #Browser compatible

@std/cache/memoize.ts            !#
memoize(FUNC[, OPTS])->FUNC2      #Returns memoized FUNC
                                  #Does not cache if FUNC throws
                                  #If async, PROMISE is initially cached, but then removed if it is rejected
OPTS.getKey                       #FUNC(...ARGS)->VAL computing cache key
                                  #Def:
                                  #  - undefined|null|BOOL|NUM -> String()
                                  #  - STR -> '"..."'
                                  #  - BIGINT -> 'NUMn'
                                  #  - SYM -> 'Symbol.for(SYM.description)'
                                  #  - OBJ|ARR -> '{UINT}', incremented from 0, for a given FUNC2
                                  #  - if several args, joined by ,
OPTS.cache                        #MAP (only get|set|has|delete() needed) (def: new Map()) storing results
                                  #E.g. can use deno LRU cache (see its doc)
FUNC.length|name                  #Are kept
