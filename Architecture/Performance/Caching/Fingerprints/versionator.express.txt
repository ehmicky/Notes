
                                  ┏━━━━━━━━━━━━━━━━━┓
                                  ┃   VERSIONATOR   ┃
                                  ┗━━━━━━━━━━━━━━━━━┛

VERSION ==>                   #0.5.0
                              #Static assets timestamping (unconditional caching)
                              #  - versionPath() adds timestamp to URLs (in output) and stips it (in input)
                              #     - e.g. in RES.locals for RES.render()
                              #  - client will use unconditional caching (browser cache) providing timestamp is same as before
                              #Timestamp can be either global version ID or file content hash

VERSIONATOR.create('VERSION') #VERSION should be global and recreated at each version bump.
 ->VERSION                    #'VERSION' can be read from package.json
VERSION.middleware            #Express MIDWR that strips (if present) "/VERSION/" from REQ.url
                              #Should be first MIDWR
VERSION.versionPath           #Adds "/VERSION/" as last DIR of URL[_ARR]
('URL'[_ARR])->'URL'[_ARR]    #URL should not be absolute.

VERSIONATOR.createMapFromPath 
('DIR', [OBJ, ]               #MAPPEDVERSION is same as VERSION but
FUNC(ERROR, FILEMAP))         #  - uses "/FILE_MD5HASH/" timestamp for each file
VERSIONATOR.createMapped      #     - i.e. file-based (not global) unconditional caching
(FILEMAP)->MAPPEDVERSION      #     - 'URL' should be relative to DIR, and start with '/'
MAPPEDVERSION.middleware      #  - should recreate MAPPEDVERSION on file change
MAPPEDVERSION.versionPath     #OPTS:
('URL'[_ARR])->'URL'[_ARR]    #  - followLinks BOOL (def: true): follow symlinks

VERSIONATOR.createMapFromPath
('DIR', {fileList: 'URL'_ARR},
FUNC(ERROR, FILEMAP))
VERSIONATOR.modifyMap(FILEMAP)#Faster way to update MAPPEDVERSION (do not recalculcate hashes of all files)
