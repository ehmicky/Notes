
             
   LRU-CACHE  
             



VERSION ==>                       #7.14.0
                                  #Node.js or browser

ALTERNATIVES ==>                  #  - node-lru-cache (preferred if needs features):
                                  #     - most high-profile
                                  #     - per-item space, TTL, bounced TTL, iteration, onRemove handler
                                  #     - slowest
                                  #     - Node only
                                  #  - quick-lru (preferred if needs simple):
                                  #     - browser/Node
                                  #     - TTL, iteration
                                  #  - flru:
                                  #     - fast
                                  #     - browser/Node
                                  #  - tiny-lru:
                                  #     - TTL
                                  #     - browser/Node

new LruCache([NUM|OPTS])          #LRU cache
                                  #OPTS:
                                  #  - max NUM (def: 0): max items
                                  #  - maxSize NUM (def: 0):
                                  #     - max space
                                  #     - if on limit, when adding a new item, least recent will be deleted
                                  #  - maxEntrySize NUM (def: 0):
                                  #     - max space per item
                                  #     - if on limit, item will not be added
                                  #  - sizeCalculation(VAL, 'KEY')->NUM:
                                  #     - number of spaces taken by VAL
                                  #     - def: 1
                                  #  - ttl TTL_NUM (def: null, in ms): - TTL per item
                                  #  - ttlAutopurge BOOL:
                                  #     - if false (def), items are lazily deleted (i.e. only when retrieved)
                                  #     - if true, run every OPTS.ttlResolution NUMms instead (def: 1)
                                  #  - updateAgeOnGet|Has BOOL (def: false): update TTL on get|has()
                                  #  - noUpdateTTL BOOL (def: false): do not update TTL on set() if key already exists
                                  #  - allowStale BOOL (def: false):
                                  #     - if false (def): item over maxAge is deleted then returned as undefined
                                  #     - if true: item over maxAge is returned then deleted
                                  #  - dispose[After]('KEY', VAL, STR):
                                  #     - called when KEY is either:
                                  #        - replaced (not initially set) providing OPTS.noDisposeOnSet false (def)
                                  #        - deleted
                                  #     - called before replacement|deletion, i.e. can put in back on next tick
                                  #        - after it if disposeAfter()
                                  #     - STR is 'evict', 'set' or 'delete'
                                  #  - fetchMethod('KEY', VAL, OBJ)->PROMISE_VAL2
                                  #     - see fetch()
                                  #     - VAL is value if stale and OPTS.allowStale true
                                  #     - called only once per fetch()
                                  #     - OBJ: options OPTS, signal ABORT_SIGNAL
                                  #  - fetchContext VAL: passed to fetchMethod()'s OBJ.context
                                  #  - noDeleteOnStaleGet BOOL: if true (def: false), state values are not removed on get()
                                  #  - noDeleteOnFetchRejection BOOL: if true (def: false), stale values are not removed if fetchMethod() throws
                                  #Recentness is updated by get|set|pop|del|reset|[r]forEach|purgeStale|dump|load() but not by
                                  #peek|has|keys|values|size|itemCount()

'KEY'                             #Can be any VAL, using === equality
LRUCACHE.get('KEY'[, OPTS])
 ->VAL|undefined                  #OPTS: updateAgeOnGet|allowStale
LRUCACHE.peek('KEY')
 ->VAL|undefined                  #OPTS: allowStale
LRUCACHE.set('KEY', VAL[, OPTS])  #Returns false if item is bigger than OPTS.max
 ->BOOL                           #OPTS:
                                  #  - size|sizeCalculation|ttl|noDisposeOnSet
                                  #  - start (def: now) for the start time for ttl
LRUCACHE.pop()->VAL               #Returns most recent item, and delete it
LRUCACHE.del('KEY')->BOOL         #
LRUCACHE.clear()                  #

LRUCACHE.has('KEY')->BOOL         #
LRUCACHE.keys()->'KEY'_ARR        #
LRUCACHE.values()->VAL_ARR        #
LRUCACHE.entries()
 ->['KEY', VAL]_ARR               #
LRUCACHE.rkeys|rvalues|rentries() #Same but in reverse order
LRUCACHE.size                     #NUM (in items)
LRUCACHE.calculatedSize           #NUM (in space)
LRUCACHE.[r]forEach               #Most recently used items first
 (FUNC(VAL, 'KEY', LRUCACHE)      #Def CONTEXT is LRUCACHE
 [, CONTEXT])                     #'r' is in reverse order
LRUCACHE.find
 (FUNC(VAL, 'KEY', LRUCACHE)
 ->BOOL[, OPTS])                  #OPTS: same as get()

LRUCACHE.getRemainingTTL('KEY')
 ->NUM                            #0 if not cached. Infinity if no TTL.
LRUCACHE.purgeStale()             #Remove all stale items (instead of waiting for lazy deletion)

LRUCACHE.dump()->ARR              #Save state to ARR of ['KEY', OBJ] with OBJ: value VAL, start TIMESTAMP_NUM, size NUM, ttl NUM
LRUCACHE.load(ARR)                #Restore state from ARR

LRUCACHE.fetch('KEY'[, OPTS])     #Like get() except when not available, calls fetchMethod() to populate it
 ->PROMISE_VAL|undefined          #OPTS:
                                  #  - updateAgeOnGet|allowStale|size|sizeCalculation|ttl|noDisposeOnSet
                                  #  - forceRefresh BOOL (def: false): re-fetch items even if not stale
