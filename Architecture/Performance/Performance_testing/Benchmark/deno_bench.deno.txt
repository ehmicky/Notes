
              
   DENO_BENCH  
              



ALTERNATIVES ==>                  #See benchmark.js

VERSION ==>                       #Part of Deno CLI (see its doc)

deno bench [UPATH|DIR...]         #Like deno test ... but to run Deno.bench()
 [-- ARG...]                      #If DIR, use DIR/**/[..._|.]bench.EXT, with EXT js[x]|mjs|ts[x]|mts
                                  #Same CLI flags except no:
                                  #  - --permit-no-files
                                  #  - --fail-fast
                                  #  - debugging: --inspect*, --trace-ops
                                  #  - parallelism: --parallel, --shuffle
                                  #  - --doc
                                  #  - --coverage
                                  #Prints environment information: CPU, deno version, OS, arch
CONFIG.exclude
CONFIG.bench.include|exclude      #Like CONF.test.include|exclude
--json                           !#Like deno ...

Deno.bench(...)                   #Same as Deno.test(...) except:
                                  #  - TOPTS -> POPTS
                                  #  - T -> P
                                  #Run multiple times, automatically guessing number of iterations
                                  #Reports: mean, min|max, p75|99|995
POPTS.*                           #Same as TOPTS.* but no sanitizeOps|Resources
TOPTS.group                       #'GROUP'. Print summary with comparison of each benchmark of the group with their baseline.
TOPTS.baseline                    #BOOL (def: false). If no explicit baseline, use fastest benchmark

P.name|origin                     #Like T.*
P.start|end()                     #To measure
