
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   MIDDY_HTTP_CONTENT_ENCODING   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #See Express compression

@middy/http-content-encoding      #Version: part of Middy (see its doc)

HTTP-CONTENT-ENCODING             #Compress response body, based on Accept-Encoding [C]
 ([OPTS])->MIDDY_MDWR             #Sets RES:
                                  #  - body STR
                                  #  - Content-Encoding: ALGO [S]
                                  #  - Vary: Accept-Encoding [S]
                                  #  - isBase64Encoded true
                                  #Do not compress nor sets RES headers if either:
                                  #  - no Accept-Encoding [C] and no matching ALGO (including identity)
                                  #  - Cache-Control: no-transform [C]
                                  #     - then Cache-Control: no-transform [S] too
                                  #  - compressed size is bigger
                                  #Works with Middy streamifyResponse
                                  #Must use @middy/http-content-negotiation before (see its doc)
                                  #  - since it relies on NCONTEXT.preferredEncoding[s]

ALGO                              #'deflate', 'gzip' or 'br'
OPTS.overridePreferredEncoding    #'ALGO'_ARR. If set, use first ALGO that is also present in NCONTEXT.preferredEncodings
                                  #If not set, use NCONTEXT.preferredEncoding

OPTS.deflate|gzip|br              #OBJ passed to node:zlib create*Compress(OBJ)
