
                                  ┏━━━━━━━━━━━┓
                                  ┃   P-MAP   ┃
                                  ┗━━━━━━━━━━━┛

P-MAP                             #Version 7.0.2
P-MAP([>]VAL_[ASYNC_]ITERABLE,    #Like Promise.all([...VAL_[ASYNC_]ITERABLE].map(FUNC))
 FUNC(VAL, INDEX)->[>]VAL2[,OPTS])#OPTS:
 ->>VAL2_ARR                      #  - concurrency NUM (def: Infinity): only run NUM values from [ASYNC_]ITERABLE at once
                                  #  - signal ABORT_SIGNAL: on abort, reject PROMISE and stop iteration
                                  #On exception|rejection in FUNC():
                                  #  - if OPTS.stopOnError true (def):
                                  #     - reject PROMISE right away
                                  #     - reject with that ERROR
                                  #  - if OPTS.stopOnError false:
                                  #     - reject PROMISE after all FUNC() have ended
                                  #     - reject with AGGREGATE_ERROR
                                  #Can return pMapSkip (named export) to filter out the value instead
                                  #The following libraries are based on p-map
pMapIterable(...)->VAL2_ITERABLE  #Same but returns ITERABLE
                                  #OPTS:
                                  #  - concurrency: same as above
                                  #  - no signal|stopOnError
                                  #  - backpressure NUM (def|min: OPTS.concurrency):
                                  #     - max NUM of values produced by ITERABLE but not consumed yet
                                  #     - i.e. when FUNC() produces values faster than consumed

P-ALL(FUNC_ITERABLE[, OPTS])      #Like P-MAP(...) except using an iterable of FUNC()->[>]VAL2
 ->>VAL2_ARR                      #I.e. different logic instead of different inputs
                                  #Version 5.0.0

P-ONE([>]VAL_ITERABLE,
 FUNC(VAL, INDEX)->[>]BOOL[,OPTS])#Like P-MAP(...) except checking if at least one FUNC() returns true.
 ->>BOOL                          #Version 2.0.0

P-EVERY([>]VAL_ITERABLE,
 FUNC(VAL, INDEX)->[>]BOOL[,OPTS])#Like P-MAP(...) except checking if all FUNC() returns true.
 ->>BOOL                          #Version 2.0.0

P-TIMES(NUM,
 FUNC(INDEX)->[>]VAL[, OPTS])     #Like P-MAP(...) except iterating NUM times over an incremented INDEX
 ->>VAL_ARR                       #Version 4.0.0

P-FILTER([>]VAL_[ASYNC_]ITERABLE,
 FUNC(VAL, INDEX)->[>]BOOL[,OPTS])#Like P-MAP(...) except filtering VALs instead of mapping them
 ->>VAL_ARR                       #Version 4.1.0
pFilterIterable(...)->VAL_ITERABLE#Same but using pMapIterable(...)

P-PROPS({ KEY: [>]VAL,... }       #Like P-MAP(...) except mapping over the values of an OBJ
 [,FUNC(VAL,KEY)->[>]VAL2][,OPTS])#OBJ can be MAP too
 ->>OBJ                           #Version 6.0.0
