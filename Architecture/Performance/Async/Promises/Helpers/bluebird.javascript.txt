
            
   BLUEBIRD  
            


ALTERNATIVES ==>              #  - q
                              #  - Bluebird (preferred)

P                             #Global variable for web script, usual variable for Node.js require("bluebird")
                              #Version 2.3.5

P.FUNC(PROMISE, ...)          #Same as PROMISE.FUNC(...) for all|props|settle|any|race|some|map|reduce|filter|each()
P.bind(OBJ)                   #Same as P.resolve().bind(OBJ)
P.delay([VAL, ]NUM)           #Same as P.resolve(VAL).delay(NUM)

new P(FUNC3(FUNC(VAL),        #Returns a PROMISE where FUNC3 must call FUNC() for resolve, FUNC2() for rejection.
FUNC2(VAL)))                  #Exceptions fire FUNC2(ERROR)
P.try(FUNC()->VAL             #Returns PROMISE starting with FUNC.call(OBJ, ARGS), which catches exceptions as rejections.
[, ARGS[_ARR]...][, OBJ])     #FUNC() fired right away
P.method(FUNC->VAL)           #Returns as FUNC2(...) returning PROMISE
P.resolve|reject(VAL)         #Like Q() or Q.reject()

PROMISE.then|done|spread(...) #Like Q (without "progress" FUNC3)
PROMISE["catch"]([ERROR|
FUNC(ERROR)->BOOL, ]...)      #Like Q, but can filter with ERROR|FUNC(ERROR)->BOOL too
PROMISE.error(...)            #Like Q PROMISE["catch"] but only for OperationError, which are ERROR thrown by promisified
                              #functions calling FUNC(ERROR)
PROMISE["finally"](...)       #Like Q
P.using(...)                  #Same as P.join(...), except PROMISE2 can have been returned by:
                              #  PROMISE.disposer(FUNC(VAL, PROMISE))
                              #which:
                              #  - does not change state value
                              #  - will fire FUNC() as in PROMISE["finally"]
                              #  - can only be used with P.using(...)

PROMISE.all(PROMISE2_ARR)     #Like Q
PROMISE.some(PROMISE2_ARR,NUM)#Same as all() but only ask for NUM positive resolves.
                              #If too many rejections, throws AggregateError with VAL_ARR
PROMISE.any(PROMISE2_ARR)     #Like PROMISE.some(PROMISE2_ARR, 1)
PROMISE.props(PROMISE2_OBJ)   #Same as all() with a PROMISE2_OBJ
P.join(PROMISE2...,           #Same as all() but with variadic argument, and use FUNC() with resolved values then VAL2 as
FUNC(VAL...)->VAL2)           #final value

PROMISE.map                   #Fires FUNC(VAL) for each resolved value (rejection is just passed round).
(FUNC(VAL[, INDEX[, NUM]][])  #Each FUNC() will change the final resolved ARR (whole PROMISE is rejected if any FUNC() rejects
[, OBJ])                      #state). Can use OBJ.concurrency NUM2 to specify how many FUNC() to run at once.
PROMISE.reduce(...)           #Similar with reduce function
PROMISE.filter(...)           #Similar with filter function
PROMISE.each(FUNC(...))       #Same as map() but does not modify promise state (i.e. FUNC(...) should not return, etc.)

PROMISE.isFulfilled|Rejected|
Pending()                     #Like Q
PROMISE.value|reason()        #Like Q PROMISE.inspect().value|reason
PROMISE.settle()              #Similar to Q PROMISE.allSettled() except state value OBJ_ARR has members isFulfilled|Rejected|
                              #Pending|value|reason()

P.promisify(...)              #Like Q.nbind(...):
                              #  - without last ARGS...
                              #  - If called with several arguments, resolved value will be an array.
P.promisifyAll(OBJ[, OBJ2])   #Call P.promisify() on all OBJ.prototype|__proto__ enumerable members, appending OBJ2.suffix
                              #(def: "Async") to created methods.
                              #Cannot override existing methods.
                              #OBJ2:
                              #  - filter(FUNC_NAME, FUNC, RETURNED_OBJ)->BOOL: to only promisify() some functions
                              #    Def: methods not starting with "_"
PROMISE.nodeify(FUNC[, OBJ])  #Like Q PROMISE.nodeify(FUNC), but can use OBJ.spread true to make Node.js callbacks fired with
                              #several args instead of an array.
PROMISE.coroutine(GENERATOR)  #To make GENERATOR able to yield PROMISE. Only with Node.js 0.12

PROMISE.delay(NUM)            #Like Q
PROMISE.timeout(NUM[, STR])   #Like Q, except timeout fires exception TimeoutError

PROMISE.cancel([ERROR])       #Same as rejection, but PROMISE must have called [un]cancellable() (def: uncancellable()).
                              #Def. ERROR: CancellationError
PROMISE.isCancellable()       #

PROMISE.bind(OBJ)             #Bind this to OBJ for the rest of the chain.
                              #Exception: when a callback return another PROMISE2, stops using OBJ as this.
                              #Can use this as a way to share state accross callbacks too.
                              #Can use bind() at end to remove this OBJ from final PROMISE (if do not want to expose it)

PROMISE.tap(FUNC(VAL))        #Like PROMISE.then(FUNC(VAL)) but does not change state value.

PROMISE.call(...)             #Like Q
PROMISE.get(...)              #Like Q
PROMISE.return(VAL)           #Like Q PROMISE.thenResolve(VAL)
PROMISE.throw(VAL)            #Like Q PROMISE.thenReject(VAL)

P.onPossiblyUnhandledRejection
(FUNC(ERROR))                 #Override exception handler (def: prints to console)
