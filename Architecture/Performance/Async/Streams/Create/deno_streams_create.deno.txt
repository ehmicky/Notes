
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DENO_STREAMS_CREATE   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #Part of Deno
                                  #Browser compatible

@std/streams/buffer.ts            #
Buffer                            #SBUFFER. Like @std/io Buffer (see its doc), except the following
BUFFER.readable                   #Like BUFFER.read[Sync]() but as RSTREAM (16KB chunks)
                                  #There is no BUFFER.readFrom[Sync]()
BUFFER.writable                   #Like BUFFER.write[Sync]() but as WSTREAM (16KB chunks)

@std/io/to-readable-stream.ts
toReadableStream(READER[, OPTS])
 ->UINT8ARR_RSTREAM               #
OPTS.autoClose                    #BOOL (def: true). Call READER.close() (if it exists) on end|cancel
                                  #READER.close() always called on error
OPTS.chunkSize                    #NUM (in bytes, def: 16KB)
OPTS.strategy                     #RROPTS passed to ReadableStream

@std/io/to-writable-stream.ts
toWritableStream(WRITER[, OPTS])
 ->UINT8ARR_WSTREAM               #
OPTS.autoClose                    #BOOL (def: true). Call WRITER.close() (if it exists) on end|abort|error

@std/streams/to-array-buffer.ts   #
toArrayBuffer(RSTREAM)->>ARRBUFFER#

@std/streams/unstable-to-bytes.ts!#
toArrayBuffer(RSTREAM)->>UINT8ARR #

@std/streams/to-blob.ts           #
toArrayBuffer(RSTREAM)->>BLOB     #

@std/streams/to-text.ts           #
toArrayBuffer(RSTREAM)->>STR      #

@std/streams/to-json.ts           #
toArrayBuffer(RSTREAM)->>VAL      #
