
                       
   DENO_STREAMS_CREATE  
                       



VERSION ==>                       #Part of Deno


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BUFFER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/streams/mod.ts                #
Buffer                            #Like std/io Buffer (see its doc), except:
                                  #  - BUFFER.read* -> BUFFER.readable RSTREAM
                                  #     - calls similar logic as BUFFER.readSync()
                                  #     - in chunks of 16KB
                                  #  - BUFFER.write* -> BUFFER.writable WSTREAM
                                  #     - calls similar logic as BUFFER.writeSync()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             READ              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/streams/mod.ts                #
readableStreamFromIterable        #Turn [ASYNC_]ITERABLE into a RSTREAM
 ([ASYNC_]ITERABLE)->RSTREAM      #Each iteration creates a single RSTREAM chunk

readableStreamFromReader          #Turn READER into a RSTREAM
 (READER[, OPTS])->RSTREAM        #Each RSTREAM chunk calls READER.reader() once
OPTS.chunkSize                    #NUM (def: 16KB). Size of each chunk
OPTS.autoClose                    #BOOL (def: true). If READER is a CLOSER, call close() on RSTREAM close|abort|error
OPTS.strategy                     #Custom QUEUINGSTRATEGY

readerFromStreamReader            #Turn RDSTREAM_READER into a READER
 (UINT8ARR_RDSTREAM_READER)       #Each READER.read() gets one RSTREAM chunk
 ->READER                         #If chunk < READER's size:
                                  #  - do not get another RSTREAM chunk
                                  #  - i.e. READER.read(UINT8ARR) returns NUM that is < UINT8ARR.length
                                  #If chunk > READER's size:
                                  #  - buffer it
                                  #  - i.e. spread over multiple READER.read()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             WRITE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/streams/mod.ts                #
writableStreamFromWriter          #Turn WRITER into a WSTREAM
 (WRITER[, OPTS])->WSTREAM        #Each WSTREAM chunk calls n WRITER.write()
OPTS.autoClose                    #BOOL (def: true). If WRITER is a CLOSER, call close() on WSTREAM close|abort|error

writerFromStreamWriter
 (UINT8ARR_WDSTREAM_WRITER)       #Turn WDSTREAM_WRITER into a WRITER
 ->WRITER                         #Each WRITER.write() writes one WSTREAM chunk


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TRANSFORM           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


std/streams/mod.ts                #
toTransformStream
 ((RSTREAM)->[ASYNC_]ITERABLE
 [, WRITE_QUEUING_STRATEGY]       #Turn a FUNC(RSTREAM)->[ASYNC_]ITERABLE (e.g. a generator) into a TSTREAM
 [, READ_QUEUING_STRATEGY])       #FUNC is responsible for consuming RSTREAM
 ->TSTREAM                        #Each ITERABLE iteration creates a write chunk
