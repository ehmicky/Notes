
                                  ┏━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DENO_LEVENSHTEIN   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #Part of Deno

@std/text/levenshtein-distance
levenshteinDistance
 (STR, STR2)->NUM                 #

@std/text/closest-string
closestString
 (STR, STR2_ARR[, OPTS])->STR2    #Uses levenshteinDistance()
OPTS.caseSensitive                #BOOL (def: false)
OPTS.compareFn                    #FUNC(STR, STR2)->-1|0|1 (def: levenshteinDistance)

@std/text/compare-similarity
compareSimilarity(STR[, OPTS])    #Apply levenshteinDistance() for sorting
 ->FUNC(STR2, STR3)->-1|0|1       #Must pass FUNC to STR2_ARR.sort()
OPTS.caseSensitive|compareFn      #Like closestString()

@std/text/word-similarity-sort
wordSimilaritySort
 (STR, STR2_ARR[, OPTS])->STR2_ARR#Like [...STR2_ARR].sort(compareSimilarity(STR, OPTS))
