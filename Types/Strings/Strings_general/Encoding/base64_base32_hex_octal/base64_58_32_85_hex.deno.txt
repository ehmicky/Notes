
                       
   BASE64_58_32_85_HEX  
                       



VERSION ==>                       #See Deno doc
                                  #Part of std
                                  #Browser compatible

btoa|atob(STR)->STR2              #Like DOM

@std/encoding/base64.ts           #STR <-> base64
encodeBase64
 (STR|UINT8ARR|ARRBUFFER)->STR    #
decodeBase64(STR)->UINT8ARR       #

@std/crypto/to_hash_string.ts     #
toHashString(ARRBUFFER, 'base64')
 ->STR                            #

@std/encoding/base64url.ts        #Same with base64url
encodeBase64Url
 (STR|UINT8ARR|ARRBUFFER)->STR    #
decodeBase64Url(STR)->UINT8ARR    #

@std/encoding/base58.ts           #Same with base58
encodeBase58
 (STR|UINT8ARR|ARRBUFFER)->STR    #
decodeBase58(STR)->UINT8ARR       #

@std/encoding/base32.ts           #Same with base32
encodeBase32
 (STR|UINT8ARR|ARRBUFFER)->STR    #
decodeBase32(STR)->UINT8ARR       #

@std/encoding/base32hex.ts       !#Same with base32 (extended hex variation)
encodeBase32Hex
 (STR|UINT8ARR|ARRBUFFER)->STR    #
decodeBase32Hex(STR)->UINT8ARR    #

@std/encoding/ascii85.ts          #Same with base85
encodeAscii85
 (STR|UINT8ARR|ARRBUFFER[, OPTS])
 ->STR                            #
decodeAscii85
 (STR[, OPTS])->UINT8ARR          #
OPTS.delimiter                    #BOOL (def: false). Use delimiters <~ and ~>
OPTS.standard                     #'Adobe|btoa|RFC 1924|Z85'

@std/encoding/hex.ts              #Same with hexadecimal
encodeHex
 (STR|UINT8ARR|ARRBUFFER)->STR2   #
decodeHex(STR)->ARRBUFFER         #

@std/crypto/to_hash_string.ts     #
toHashString(ARRBUFFER[', hex'])
 ->STR                            #Returns as hex
