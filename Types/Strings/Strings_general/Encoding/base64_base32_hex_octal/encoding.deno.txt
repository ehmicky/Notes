
            
   ENCODING  
            



VERSION ==>                       #See Deno doc
                                  #Part of std

std/encoding/base64.ts            #STR <-> base64
encode(STR|UINT8ARR)->STR         #
decode(STR)->UINT8ARR             #

std/encoding/base64url.ts         #Same with base64url
encode(STR|UINT8ARR)->STR         #
decode(STR)->UINT8ARR             #

std/encoding/base58.ts            #Same with base58
encode(STR|UINT8ARR)->STR         #
decode(STR)->UINT8ARR             #

std/encoding/base32.ts            #Same with base32
byteLength(STR)->NUM              #
encode(STR|UINT8ARR)->STR         #
decode(STR)->UINT8ARR             #

std/encoding/ascii85.ts           #Same with base85
encode(STR|UINTARR[, OPTS])->STR  #
decode(STR[, OPTS])->UINT8ARR     #
OPTS.delimiter                    #BOOL (def: false). Use delimiters <~ and ~>
OPTS.standard                     #'Adobe|btoa|RFC 1924|Z85'

std/encoding/hex.ts               #Same with hexadecimal
encode(STR|UINT8ARR)->STR         #
decode(STR)->UINT8ARR             #

std/encoding/varint.ts            #Same with variable INT (like in Protobuf)
                                  #Not documented yet

std/encoding/binary.ts            #
sizeof(STR)->NUM                  #STR is '[u]int8|16|32|64' or 'float32|64'
                                  #Returns 1|2|4|8
readExact(READER, UINT8ARR)       #
