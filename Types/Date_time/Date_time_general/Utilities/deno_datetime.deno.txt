
                                  ┏━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DENO_DATETIME   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #Part of std
                                  #Browser-compatible

FORMAT                            #Can include:
                                  #  - yy[yy]
                                  #  - M[M]
                                  #  - d[d]
                                  #  - H[H] (24h) or h[h] (12h)
                                  #  - m[m]
                                  #  - s[s]
                                  #  - S[S[S]]
                                  #  - a (AM|PM)
                                  #  - '...': not needed for - / .
                                  #Based on Unicode LDML
UNIT                              #One of 'milliseconds|seconds|minutes|hours|days|weeks|months|quarters|years'

@std/datetime/format              #
format(DATE, 'FORMAT'[,OPTS])->STR#Apply date format
OPTS.timezone                     #'TZ' (def: locale's)

@std/datetime/parse               #
format(STR, 'FORMAT')->DATE       #Inverse

@std/datetime/difference          #
difference(DATE, DATE2[, OPTS])   #Returns time difference as OBJ:
 ->OBJ                            #  - keys are 'UNIT' from OPTS.units
                                  #  - values are NUM
OPTS.units                        #'UNIT'_ARR

@std/datetime/constants           #
SECOND|MINUTE|HOUR|DAY|WEEK       #NUM of ms in a second|minute|hour|day|week

@std/datetime/day-of-year         #
dayOfYear(DATE)->NUM              #

@std/datetime/week-of-year        #
weekOfYear(DATE)->NUM             #

@std/datetime/is-leap             #
is[Utc]Leap(DATE|YEAR_NUM)->BOOL  #Whether leap year in local|UTC time
