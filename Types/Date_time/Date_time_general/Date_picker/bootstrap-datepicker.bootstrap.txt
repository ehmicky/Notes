
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   BOOTSTRAP-DATEPICKER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.6.1
                                  #Depends on Bootstrap. 
                                  #Use same conventions as Bootstrap plugins (e.g. data-VAR or $.fn.datepicker.defaults)
DAT                               #Means:
                                  #  - DATE
                                  #  - STR according to OBJ.format:
                                  #     - STR with "d[d]", "m[m]", "yy[yy]", or uppercase for not NUM
                                  #     - or OBJ:
                                  #        - toDisplay(DATE, FORMAT, LANG)->'DATE'
                                  #        - toValue('DATE', FORMAT, LANG)->DATE
                                  #     - def: "mm/dd/yyyy"
                                  #  - "+|-NUMd|w|m|y ..." or 0 (today)
                                  #  - "yesterday|today|tomorrow"
CSTR                              #Means STR_ARR, comma-separated STR, or nothing-separated STR

LOCALIZATION ==>                  #Selected by OBJ.language "LANG" (def: "en")
                                  #Uses $.fn.datepickers.dates.LANG OBJ. Default ones are included in sources.

<elem data-provide="datepicker">  #Both create a datepicker (with INPUT.value "DATE"). JQ can be:
JQ.datepicker([OPTS])             #  - input + popover:
                                  #      input(type="text")
                                  #  - input with form button + popover:
                                  #      .input-group.date
                                  #        input.form-control(type="text")
                                  #        div.input-group-addon
                                  #          span.glyphicon.glyphicon-th
                                  #  - the following, for range (can also use OBJ.inputs ELEM_ARR):
                                  #      .input-group.input-daterange
                                  #        input.form-control(type="text")
                                  #        span.input-group-addon | to
                                  #        input.form-control(type="text")
                                  #  - otherwise inline

OPTS.container                    #SELECTOR (def: "body"): of the popup
OPTS.orientation                  #"auto" (def) or "[top|bottom] [left|right]"
OPTS.zIndexOffset                 #NUM (def: 10)

OPTS.multidate                    #NUM|BOOL (def: false): allows picking up to NUM dates (true for unlim), which will be formatted separated by OBJ.multidateSeparator STR (def: ",")
OPTS.keyboardNavigation           #BOOL (def: true)
OPTS.disableTouchKeyboard         #BOOL (def: false): does not show keyboard on mobile devices
OPTS.showOnFocus                  #BOOL: if true (def), show popup when <input> gets focus
OPTS.enableOnReadonly             #BOOL: if true (def), popup even if readonly
OPTS.immediateUpdates             #BOOL (def: false): if true, selecting months/year updates date
OPTS.autoclose                    #BOOL (def: false): if true, close popup on select
OPTS.toggleActive                 #BOOL (def: same as multidate): if true, selecting same date twice deselects

OPTS.templates                    #OBJ.rightArrow|leftArrow (def: '«»'): arrows
OPTS.title                        #STR (def: ''): on top of popover

OPTS.clearBtn|todayBtn            #BOOL (def: false)
OPTS.defaultstartView|minViewMode|#STR|NUM: 
maxViewMode                       #     - which dimensions to show
                                  #     - 'days'|0, 'months'|1, 'years'|2, 'decades'|3, 'centuries'|4
                                  #     - def: 'months', 'days', 'centuries'
OPTS.calendarWeeks                #BOOL (def: false): if true, shows week number
OPTS.weekStart                    #NUM (def: 0, i.e. Sunday)

OPTS.defaultViewDate              #OBJ: year|month|day (def: today): initial date to view (but is not selected)
OPTS.todayHighlight               #BOOL (def: false)
OPTS.start|endDate                #DAT
OPTS.datesDisabled                #DAT_STR[_ARR]
OPT.daysOfWeekDisabled|Highlighted#CSTR: 0 for Sunday
OPTS.beforeShowDay|Month|Year|    #Iterated on each DATE, where VAL can be:
Decade|Century(DATE)->VAL         #     - OBJ2:
                                  #        - enabled BOOL
                                  #        - classes STR
                                  #        - tooltip STR
                                  #     - BOOL: like { enabled BOOL }
                                  #     - STR: like { classes STR }

OPTS.forceParse                   #BOOL: if true (def), clears input if invalid parsing
OPTS.assumeNearbyYear             #BOOL (def: false): parse YY as YYYY

JQ.datepicker("destroy")          #
JQ.datepicker("show|hide")        #
JQ.datepicker("update", DAT)      #
JQ.datepicker("get[UTC]Date[s]")
->DAT[_ARR]
JQ.datepicker
("set[UTC]Date[s]", DAT[_ARR])    #
JQ.datepicker("clearDates")       #
JQ.datepicker("getStart|EndDate") #
JQ.datepicker
("setStart|EndDate", DAT)         #
JQ.datepicker
("setDatesDisabled", DAT_CSTR)    #
JQ.datepicker
("setDaysOfWeekDisabled|
Highlighted", CSTR)               #

JQ.datepicker().on
("show|hide", FUNC(JQEVENT))      #
JQ.datepicker().on
("changeDate|Month|Year",
FUNC(JQEVENT))                    #
JQ.datepicker().on
("clearDate", FUNC(JQEVENT))      #
JQEVENT.date[s]                   #DATE[_ARR]
JQEVENT.format(NUM, STR)->"DATE"  #Formats JQEVENT.dates[NUM] according to format STR
