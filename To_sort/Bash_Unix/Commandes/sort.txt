
                                  ┏━━━━━━━━━━┓
                                  ┃   SORT   ┃
                                  ┗━━━━━━━━━━┛

sort [FILE]...          #Trie l'ensemble des [FILE]... en prenant comme input
                        #chacune de leur ligne, puis renvoie chaque input
                        #separe par une newline, dans l'ordre alphabetique
                        #
                        #La casse n'importe pas.
                        #Les lettres accentuees sont traitees comme sans accent
                        #Les chiffres precedent les lettres dans l'ordre
                        #alphabetique.
                        #Les caracteres non [:alnum:] (dont blank) en debut
                        #de ligne sont ignores, sauf s'ils sont les seuls de
                        #la ligne, auquel cas ils precedent l'ordre
                        #alphabetique.
                        #
                        #L'ordre est :
                        #  - espaces ou newlines uniquement
                        #  - ponctuation, caracteres speciaux uniquement
                        #  - control characters (dont tab) uniquement
                        #  - ligne contenant des [:alnum:]
                        #
                        #Attention, les locales affectent notamment l'ordre de
                        #tri entre majuscules et minuscules (AaBb ou AaBb).
                        #Mettre LC_ALL=C
                        #
                        #[FILE]... par défaut est stdin : on peut donc rediriger
                        #son input
cat FILE... | sort
==> ERREUR              #Préférer simplement sort FILE...

-r
--reverse               #Reverse the result of comparisons

-b
--ignore-leading-blanks #Ignore leading blanks (defaut)
-d                      #Les caracteres non [:alnum:] ou [:blank:] en debut
--dictionary-order      #de ligne sont ignores, sauf s'ils sont les seuls de
                        #la ligne, auquel cas ils precedent l'ordre. Ainsi, les
                        #caracteres accentues sont consideres comme des
                        #caracteres speciaux
-i                      #Les caracteres non [:print:] en debut de ligne sont
--ignore-nonprinting    #ignores, sauf s'ils sont les seuls de la ligne,
                        #auquel cas ils precedent l'ordre. Ainsi, les
                        #caracteres accentues sont consideres comme des
                        #caracteres speciaux

-f
--ignore-case           #La casse n'importe pas (defaut)

-R
--random-sort
--sort="random"         #Random sort
--random-source=FILE    #Utilise FILE comme source d'aléatoirité. FILE doit être
                        #un character special file générateur d'aléatoirité,
                        #comme /dev/urandom ou /dev/random

-g                      #Les lettres precedent les chiffres dans l'ordre
--general-numeric-sort  #alphabetique, et les nombres sont tries de maniere
--sort="general-numeric"#arithmetique et non alphabetique (ex : 11 vient apres
                        #2)
-n
--numeric-sort          #Compare according to string numerical value (dans les
--sort="numeric"        #faits, similaire a -g)

-k "POS1[,POS2]"        #Plutôt que de trier en fonction de la ligne entière,
--key="POS1[,POS2]"     #trie en fonction des caractères compris entre POS1 et
                        #POS2. POS2 est par défaut la fin de la ligne, soit le
                        #dernier FIELDNUM suivi de .0
                        #Le format de POS est FIELDNUM[.CARACNUM][OPT...], soit
                        #le field numéro FIELDNUM de la ligne, et le caractère
                        #numéro CARACNUM de ce field (par défaut 1 pour POS1, et
                        #0 pour POS2). CARACNUM est calculé par rapport au
                        #début du preceding whitespace, à moins que OPT soit
                        #égal à b ou t. Un CARACNUM de 0 signifie la fin de la
                        #ligne.
                        #OPT... peut contenir des options additionnelles pour la
                        #POS courante en ajoutant la lettre correspondante (r
                        #pour reverse, etc.)
                        #Les fields sont séparés par IFS (par défaut whitespace)
-t "CARACTERE"
--field-separator="CAR" #pour l'option -k, "CARACTERE" devient l'IFS

-o
--output="FILE"         #Write result to FILE

-M
--month-sort            #Place a la fin de l'ordre alphabetique et trie les
--sort="month"          #mois sous la forme "jan" ou "january". Ignore la casse

-V
--version-sort
--sort="version"        #Natural sort of (version) numbers within text

-m                      #Ne trie pas chaque fichier individuellement, mais les
--merge                 #uns par rapport aux autres en les fusionnant (les
                        #fichiers doivent donc etre deja individuellement
                        #tries)

-c
--check                 #Renvoie la premiere occurence non triee et, s'il y en
--check=diagnose-first  #a une, renvoie false comme code exit
-C
--check=quiet,
--check=silent          #Meme chose, mais n'imprime pas la premiere occurence

-T
--temporary-
directory="DIR"         #Use  DIR for temporaries, not $TMPDIR or /tmp

-u                      #Supprime les lignes jumelles. Sera checke par -c si
--unique                #active

-z                      #End lines with null, not newline. Ex : find -print0 |
--zero-terminated       #sort -z | xargs -0i echo {}
                        #(Voir null_newline.txt)

--files0-from="FILE"    #Trie l'ensemble des fichiers specifies dans FILE (batch
                        #mode où null est la newline)
