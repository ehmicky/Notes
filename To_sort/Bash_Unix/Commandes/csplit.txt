
                                  ┏━━━━━━━━━━━━┓
                                  ┃   CSPLIT   ┃
                                  ┗━━━━━━━━━━━━┛

csplit FILE             #Produit une série de fichiers PREFIX1PREFIX2... dans 
LIGNE_PATTERN...        #le répertoire courant, produit par le split de FILE.
                        #Imprime également en output la taille en octet de
                        #chaque fichier créé, suivi d'une newline.
                        #Ce split est une succession de splits opérés à des 
                        #lignes données grâce aux LIGNE_PATTERN... spécifiés. 
                        #PREFIX1 est "xx" par défaut
                        #PREFIX2 commence à 00 et s'incrémente. Après 99,
                        #produit une erreur.
                        #Si une erreur se produit, aucun fichier ne sera créé
                        #
                        #Le processus est :

PROCESSUS ==>           # 1) La première ligne devient LIGNE_DEBUT
                        # 2) La LIGNE_PATTERN courante choisit une ligne 
                        #LIGNE_FIN
                        # 3) Les lignes contenues entre LIGNE_DEBUT (incluse) 
                        #et LIGNE_FIN (excluse) sont imprimées dans un nouveau 
                        #fichier PREFIX
                        # 4) LIGNE_FIN devient la nouvelle LIGNE_DEBUT à moins 
                        #que LIGNE_FIN < LIGNE_DEBUT
                        # 5) Retour à l'étape 2 avec un nouveau LIGNE_PATTERN

EXCEPTION : DEUX        #Si LIGNE_PATTERN est un /PATTERN/ (ou %PATTERN%) 
[/%]PATTERN[/%] A LA    #précédé par un autre /PATTERN/ (ou %PATTERN%), la 
SUITES  ==>             #LIGNE_FIN est incluse, et la nouvelle LIGNE_DEBUT
                        #est égal à LIGNE_FIN + 1

RETOURS EN ARRIERE ==>  #Etape 3, rélever ces cas spéciaux (les éviter) :
                        #  - Si LIGNE_FIN = LIGNE_DEBUT, un fichier vide est 
                        #    créé et un message d'erreur est produit
                        #  - Si LIGNE_FIN < LIGNE_DEBUT, aucun fichier n'est 
                        #    créé et un message d'erreur est produit.
                        #       Exception : si la précédente LIGNE_PATTERN 
                        #       précédente à celle courante était un {NOMBRE}, 
                        #       un fichier vide sera créé et il n'y aura aucun 
                        #       message d'erreur, à condition que la 
                        #       LIGNE_DEBUT avant {NOMBRE} soit < LIGNE_FIN 
                        #       actuelle.
                        #       Par exemple : - csplit FILE 5 1 {3} 6 produira 
                        #                       un fichier vide car 6 > 5
                        #                     - csplit FILE 3 {8} 6 de même, 
                        #                       car 6 > 1 (LIGNE_DEBUT 
                        #                       initiale)
                        #                     - mais csplit FILE 8 1 {3} 6 
                        #                       échouera car 6 < 8

LIGNE_PATTERN ==>       #Les LIGNE_PATTERN choisissent une LIGNE_FIN ainsi :

NOMBRE                  #Désigne la ligne numéro NOMBRE.
/PATTERN/[OFFSET]       #Désigne la prochaine ligne contenant PATTERN 
                        #(LIGNE_DEBUT peut être désignée)
                        #L'OFFSET est [+-]NOMBRE (+ par défaut). Il augmente ou
                        #diminue le numéro de ligne de la LIGNE_FIN désignée
                        #par /PATTERN/
%PATTERN%               #Même chose, mais aucun fichier ne sera imprimé à 
                        #l'étape 3 (permet donc de progresser dans le fichier 
                        #sans imprimer de fichier)
{NOMBRE}                #Répète NOMBRE fois le dernier LIGNE_PATTERN.
                        #Si le dernier LIGNE_PATTERN est simplement "NOMBRE",
                        #il ne désigne plus (lors des itérations) la ligne 
                        #numéro NOMBRE mais LIGNE_DEBUT + NOMBRE
{*}                     #Même chose, mais répète jusqu'à la fin du fichier

-z
--elide-empty-files     #Remove empty output files

-s
--quiet
--silent                #N'imprime pas la taille des fichiers créés

-n "NOMBRE"             
--digits="NOMBRE"       #Utilise NOMBRE chiffres pour PREFIX2, par défaut 2
-f "PREFIX"
--prefix="PREFIX"       #Utilise "PREFIX" pour "PREFIX1", par défaut "xx"
-b "FORMAT"             #Utilise "FORMAT" (au format printf, voir la doc) pour
--suffix-format="FORMAT"#PREFIX2, par défaut "%02d". Seul d et i sont possibles
                        #comme lettres.

-k                      #Produit des fichiers splittés, même si une erreur
--keep-files            #s'est produite

EXEMPLE D'UTILISATION   #  - csplit -z FILE /PATTERN/ {*} coupera le fichier 
                        #    en fonction des lignes contenant PATTERN. L'option
                        #    z est ici au cas où la première ligne contienne le
                        #    PATTERN, auquel cas un fichier vide serait créé
                        #  - csplit FILE %PATTERN% supprimera ce qui précède
                        #    la ligne contenant PATTERN
