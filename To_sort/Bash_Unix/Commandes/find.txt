
                                  ┏━━━━━━━━━━┓
                                  ┃   FIND   ┃
                                  ┗━━━━━━━━━━┛

find [FILE OU DIR]...   #Execute l'EXPRESSION pour FILE OU DIR... de maniere
[EXPRESSION]...         #recursive. Si FILE OU DIR absent, $PWD par defaut.
                        #L'expression consiste en une ACTION... (si absente,
[EXPRESSION] ==>        #print par defaut) qui peut etre filtree par [TEST]...
[OPTION2]...            #et modulee par [OPTION2]...
[TEST]... [OPRATEUR]... #Les EXPRESSION peuvent s'enchainer pour chaque
[ACTION]...             #fichier traite a l'aide d'OPERATEURS.
[OPERATEUR]...          #Il n'est pas possible de piper l'input de find mais
                        #on peut remplacer son input [FILE OU DIR] par par
                        #exemple $(ls -t)
RECHERCHE RECURSIVE     #Pour une action récursive sur DIR sans filtrer la
UTILISER ** EGALEMENT   #récursion ni utiliser d'option, préférer :
==>                     #shopt -s globstar ; for FILE in DIR/** ; do COMMANDES ;
                        #done
                        #à find DIR -exec COMMANDES
                        #à find DIR | xargs COMMANDES
                        #ou à for FILE in find DIR ; do COMMANDES ; done
                        #Cependant, find -print, -delete, etc. restent un peu
                        #plus rapides
                        #De plus, ceci ne dispose pas de la sécurité de -
                        #execdir
                        #Enfin, ce n'est compatible que Bash 4

EXECUTER PLUSIEURS      #Il n'est pas possible dans un -exec de :
SUBSHELLS AVEC -EXEC    #  - piper
 ==>                    #  - mettre {} dans un subshell, par exemple $( )
                        #Solutions possibles, à la place de :
                        #  - find -exec COMMANDE1 {} | COMMANDE2 \;
                        #Faire :
                        # 1) find -exec COMMANDE1 {} \; | COMMANDE2 (piper tout
                        #    le find, pas toujours possible)
                        # 2) find | while read
                        #    do
                        #        COMMANDE1 "$REPLY" | COMMANDE2
                        #    done
                        # 3) find -exec bash -c "COMMANDE1 {} | COMMANDE2" \;
                        # 4) find -print0 | xargs -0I{} COMMANDE1 {} | COMMANDE2
                        #Les solutions 2, 3 et, partiellement 1, permettent en
                        #plus d'utiliser des fonctions, alias, builtins et
                        #keywords (dont déclaration de variables)

                                    OPTION1

OPTION1 ==>             #Contrairement aux OPTION2, les OPTION1 affectent
                        #l'ensemble de find et ne sont pas lies a une
                        #expression particuliere, et sont places avant FILE OU
                        #DIR

-P                      #Ne suit jamais les liens symboliques et analyse les
                        #liens eux-memes et non les fichiers qu'ils pointent
                        #(defaut)
-L                      #Suit toujours les liens symboliques et n'analyse pas
                        #les liens eux-memes mais les fichiers qu'ils pointent
                        #a moins que le lien ne soit corrompu. Implies -noleaf
-H                      #Comme -P, mais agit comme -L uniquement pour les
                        #fichiers specifies dans la ligne de commande

-D "STRING"             #Mode verbose ameliore, affiche des informations en
                        #fonction de "STRING". La plupart me seront inutiles.
                        #Voir la liste avec -D "help". Cependant, "rates"
                        #affiche le taux de reussite, et "search" le niveau
                        #de depth de chaque fichier dans la recursion

-O"LEVEL"               #Change l'ordre d'evaluation des tests pour tenter
                        #d'optimiser les performances (de 0 a 3, 1 par defaut)

                                    OPTION2

OPTION2 ==>             #Affectent l'ensemble des expressions sauf -daystart,
                        #-follow et -regextype, lesquels affectent seulement
                        #les expressions qui suivent.

-regextype "TYPE"       #Regexp syntax used by -regex and -iregex. Valeurs
                        #possibles :
                        #  - "emacs" (defaut)
                        #  - "posix-awk"
                        #  - "posix-basic"
                        #  - "posix-egrep"
                        #  - "posix-extended"

-maxdepth "LEVELS"      #Descend at most "LEVELS" dans la recursion. 0
                        #signifie seulement le FILE ou DIR specifie (ou $PWD
                        #si non renseigne) sans recursion s'il s'agit d'un DIR,
                        #1 signifie seulement son contenu, sans recursion du
                        #contenu
-mindepth "LEVELS"      #Do not apply any tests or actions at "LEVELS" less
                        #than "LEVELS" (a non-negative integer). Possible de
                        #combiner avec maxdepth

-mount
-xdev                   #Don’t descend on other partitions.

-follow                 #Comme -L mais n'affecte que les expressions qui
                        #suivent. Preferer -L

-d                      #Process each directory’s contents before the
-depth                  #directory itself. Preferer -depth

-ignore_readdir_race    #Si un fichier disparait lors de l'inspection,
                        #n'affiche pas de message d'erreur.
-noignore_readdir_race  #Si un fichier disparait lors de l'inspection, affiche
                        #un message d'erreur (defaut)

-warn                   #Si la syntaxe de l'invocation de find n'est pas
                        #optimale (exemple : ordre des options), affiche un
                        #message d'erreur (défaut)
-nowarn                 #Dans le même cas, n'affiche pas de message d'erreur


-daystart               #Measure times (for -amin, -atime, etc.) from the end
                        #of the day plutot que depuis l'heure courante.

-noleaf                 #Do not optimize by assuming that directories contain
                        #2 fewer subdirectories than their hard link count, ce
                        #qui le cas seulement sous Unix

                                     TEST

TESTS ==>               #N'execute l'action et ne renvoie vrai que si le
                        #fichier traite repond au TEST

"NOMBRE"                #Signifie exactement egal a "NOMBRE"
"+NOMBRE"               #Signifie superieur a "NOMBRE"
"-NOMBRE"               #Signifie inferieur a "NOMBRE"

-name "PATTERN"         #Fichier dont le basename correspond au "PATTERN".
                        #Globbing (cependant * match aussi les fichiers
                        #commencant par ".", et il faut entourer de guillemets)
                        #Globbing étendu impossible
-iname "PATTERN"        #Like -name, but case insensitive

-path "PATTERN"         #Fichier dont le chemin complet relatif (jamais absolu)
-wholename "PATTERN"    #correspond au "PATTERN". Globbing (mais on peut
                        #matcher aussi les "." en debut de fichier et les "/",
                        #et il faut entourer de guillemets). Preferer -path a
                        #-wholename. Globbing étendu impossible
-ipath "PATTERN"        #Like -path, but case insensitive. Preferer -ipath a
-iwholename "PATTERN"   #Preferer -ipath a -iwholename

-regex "PATTERN"        #Comme -path mais utilise les regexps. Le type de
                        #regexps utilise depend de l'option -regextype (defaut
                        #Emacs)
-iregex "PATTERN"       #Like -regex, but case insensitive.

-lname "PATTERN"        #Lien symbolique dont le chemin complet du fichier
                        #pointe correspond au "PATTERN". Globbing (memes
                        #remarques que -path). Retourne false si -L, -H ou
                        #-follow active. Globbing étendu impossible
-ilname "PATTERN"       #Like -lname, but case insensitive.

-type "LETTRE"          #File is of type "LETTRE" soit :
                        #  - "f" : regular file
                        #  - "d" : directory
                        #  - "l" : symbolic link
                        #  - "b" : block special file
                        #  - "c" : character special file
                        #  - "p" : named pipe (FIFO)
                        #  - "s" : socket
                        #"l" ne marchera jamais si -L, -H ou -follow active
-xtype "LETTRE"         #Comme -type mais inspecte les fichiers pointes par les
                        #liens symboliques et non les liens eux-meme. -xtype
                        #"l" ne marchera que si -L, -H ou -follow est active

-empty                  #File is empty and is either a regular file or a
                        #directory
-fstype "TYPE"          #File is on a filesystem of type "TYPE". Ex : "ext3",
                        #"tmpfs", etc. Pour une idee des types de filesystem
                        #sur la machine courante, utiliser par exemple mount
                        #sans option ou find avec -printf et %F

-executable             #Le fichier ou repertoire est executable par l'user
                        #courant
-writable               #Le fichier ou repertoire est writable par l'user
                        #courant
-readable               #Le fichier ou repertoire est readable par l'user
                        #courant

-PERM ==>               #Pour les expressions suivantes, "MODE" fait reference
                        #a un mode de permission octal ou symbolique. Il
                        #decompose les 12 bits de permission (user-writable,
                        #user-readable, user-executable, group-writable, etc.
                        #plus le SUID, GUID et Sticky bit) en comptant pour 0
                        #les bits non declares. C'est sur chacun de ces 12 bits
                        #que se fait la comparaison non sur les 3 habituels u,
                        #g et o.
                        #Les bits non declares sont consideres egal a 0.
                        #La notation symbolique avec un - signifiant ce bit est
                        #egal a 0 est donc inutile
                        #La notation symbolique avec un + ou = ont le meme
                        #effet, a savoir declarer que ces bits sont egaux a 1.
                        #Par exemple "u+wr,g+w" signifie bits user-write, user-
                        #read et group-write actives (les autres a 0 par
                        #defaut), ce qui equivaut a "0620"
-perm "MODE"            #Le fichier a exactement ce "MODE" de permission. Ex :
                        #"770" signifie "0770". Autre ex : "u+xwr" signifie
                        #"0700"
-perm -"MODE"           #Le fichier a au moins l'ensemble des bits declares,
                        #et peut avoir ou non ceux non-declares. Exemple :
                        #"740" peut signifier "1740", "0772" mais non "0747".
                        #Autre exemple : "u+xwr" peut signifier "1742", "0770"
                        #mais pas "0440"
-perm /"MODE"           #Le fichier a au moins l'un des bits declares, et peut
-perm +"MODE"           #avoir ou non ceux non-declares. Exemple : "100" peut
                        #signifier "1770", "0772" mais non "0477". Autre ex :
                        #"u+w" peut signifier "1742", "0770" mais pas "0440"
                        #Preferer la syntaxe -perm /"MODE"

-uid "[+-]NOMBRE"
-user "NOMBRE"          #File’s UID is "NOMBRE"
-gid "[+-]NOMBRE"
-group "NOMBRE"         #File’s GID is "NOMBRE"
-user "NOM"             #File is owned by user "NOM"
-group "NOM"            #File is owned by group "NOM"
-nouser                 #File’s UID is not in "/etc/passwd"
-nogroup                #File’s GID is not in "/etc/passwd"

-amin "[+-]NOMBRE"      #atime changed "NOMBRE" minutes ago.
-cmin "[+-]NOMBRE"      #meme chose pour ctime
-mmin "[+-]NOMBRE"      #meme chose pour mtime

-atime "[+-]NOMBRE"     #atime changed "NOMBRE" days ago. La difference entre
                        #l'heure courante et l'atime de chaque fichier est
                        #tronquee a l'unite avant d'etre comparee. Ainsi un
                        #fichier devra avoir ete accessed au moins deux jours
                        #avant pour match -atime "+2"
-ctime "[+-]NOMBRE"     #meme chose pour ctime
-mtime "[+-]NOMBRE"     #meme chose pour mtime

-anewer "FILE"          #atime more recent than "FILE"'s atime.
-cnewer "FILE"          #meme chose pour ctime
-newer "FILE"           #meme chose pour mtime

-used "[+-]NOMBRE"      #atime "NOMBRE" days older than ctime

-newer"X""Y" "FILE"     #"X" et "Y" representent la lettre a, c ou m. Means :
                        #"X"time is newer than "FILE"'s "Y"time. Exemple :
                        #newerac "FILE", meaning atime is newer than "FILE"'s
                        #ctime.
-newer"X"t "DATE"       #"X"time is newer than "DATE". Exemple de format pour
                        #"DATE" : "Jun 4 11:09:28 2010"

-size "[+-]NOMBRE"      #Fichier dont la taille est egal a "NOMBRE".
["LETTRE"]              #Attention : prend aussi en compte l'espace non encore
                        #alloue et est donc different et superieur a la taille
                        #obtenue avec ls
                        #La "LETTRE" indique l'unite :
                        #  - par defaut "b" (512 octets)
                        #  - "c" pour un octet
                        #  - "w" pour 2 octets
                        #  - "k" pour un Ko (1024 octets)
                        #  - "M" pour un Mo (1024 Ko)
                        #  - "G" pour un Go (1024 Mo)

-links "[+-]NOMBRE"     #File has "NOMBRE" links. Tout fichier a au moins un
                        #link (lui-meme). Les hard links (non les soft links)
                        #en ajoutent un par hard link. Tout repertoire a au
                        #moins un hard link supplementaire "." et en a un
                        #supplementaire pour chaque repertoire qu'il contient
                        #(car pointant vers lui avec "..")

-inum "[+-]NOMBRE"      #File has inode number "NOMBRE". Utiliser samefile est
                        #plus simple
-samefile "NOM"         #File has same inode number than "NOM" (dont lui-meme)

-false                  #Always false.
-true                   #Always true.

                                     ACTION

ACTION ==>              #ACTION est :
                        #true pour les print-like, ls-like et prune
                        #true si les exec-like, et delete reussissent, faux
                        #sinon
                        #true ou faux pour les ok-like en fonction de la
                        #reponse donnee
                        #true ou faux pour quit en fonction de ce qui precede

-print                  #Affiche le chemin relatif du fichier, puis une newline
-print0                 #Affiche le chemin relatif du fichier, puis un null
                        #"\0" (Voir null_newline.txt)
-printf "MESSAGE"       #Affiche un "MESSAGE" a chaque fichier, et une newline.
                        #Il est possible d'inclure les sequences d'echappement
                        #backslash (voir doc). Cependant :
                        #  - \e et \xNN ne fonctionnent pas
                        #  - \r supprime également les caractères précédents
                        #  - \\ doit être noté \\\\
                        #Il est aussi possible d'utiliser :
                        #
                        #  %H       #DIR OU NAME specifie a find lors de la
                        #           #recherche de cet element
                        #
                        #  %f       #Basename du fichier
                        #  %h       #Dirname du fichier
                        #  %p       #Chemin relatif du fichier
                        #  %P       #Chemin relatif du fichier, en enlevant %H
                        #           #(dont le slash de fin meme s'il est omis)
                        #
                        #  %y       #File’s type, de la meme maniere que le
                        #           #TEST -type
                        #  %Y       #File’s type, de la meme maniere que le
                        #           #TEST -xtype, et ajoute le type "L" pour
                        #           #les loops de symlinks
                        #
                        #  %s       #File’s size in bytes (meme valeur qu'avec
                        #           #ls -l)
                        #  %b       #Taille en blocks de 512 octets.
                        #           #Attention : prend aussi en compte
                        #           #l'espace non encore alloue et est donc
                        #           #different et superieur a la taille
                        #           #obtenue avec ls -l.
                        #  %k       #Meme chose mais en Ko (1024 octets)
                        #
                        #  %m       #File’s permission bits (in octal mode).
                        #           #Si aucun SUID, GUID ou Sticky bit, le
                        #           #premier zero est omis. Ex : 777 ou 1420
                        #  %M       #File’s permissions (in symbolic form,
                        #           #comme ls -l). Ex : drw-r--r--
                        #
                        #  %u       #File’s user name, or UID if the user has
                        #           #no name.
                        #  %U       #File’s UID.
                        #  %g       #File’s group name, or GID if the group
                        #           #has no name.
                        #  %G       #File’s GID.
                        #
                        #  %d       #File’s depth par rapport au FILE OU DIR
                        #           #specifie a find. 0 signifie qu'il s'agit
                        #           #de FILE OU DIR, 1 qu'il s'agit de son
                        #           #contenu direct, sans recursion
                        #
                        #  %F       #Type de la partition sur laquelle se
                        #           #trouve le fichier de la meme maniere que
                        #           #le TEST -fstype
                        #
                        #  %D       #Device number de la partition sur lequel
                        #           #le fichier se trouve
                        #
                        #  %a       #atime
                        #  %c       #ctime
                        #  %t       #mtime
                        #
                        #  %A"FRMT" #atime specifie en fonction de "LETTRE"
                        #           #correspondant a une sequence d'echappement
                        #           #pour date (voir le d'aide correspondant)
                        #  %C"FRMT" #comme %A"FORMAT" mais pour ctime
                        #  %T"FRMT" #comme %A"FORMAT" mais pour mtime
                        #
                        #  %l       #Chemin relatif du fichier pointe par un
                        #           #symlink (empty string if file is not a
                        #           symbolic link)
                        #  %n       #Number of hard links to file.
                        #
                        #  %i       #File’s inode number

-fprint "FILE"          #Comme print, mais redirige la sortie vers "FILE"
                        #(l'ecrase s'il existe et qu'il s'agit d'un fichier
                        #regulier). Il est possible d'utiliser /dev/stdout et
                        #/dev/stderr
-fprint0 "FILE"         #Meme chose mais pour print0
-fprintf "MESAGE" "FILE"#

-exec "COMMANDE" \;     #Execute COMMANDE pour chaque fichier, ou COMMANDE est
                        #une commande externe uniquement et une seule. Il est
                        #possible de remplacer le nom du fichier une ou
                        #plusieurs fois par {} ou \{\}
                        #Pas possible de mettre une fonction, alias, builtin ou
                        #keyword (donc pas de déclaration de variables) : seules
                        #les commandes externes sont possibles.
                        #Pas possible de piper, ni de mettre {} dans un subshell
                        #tel $( )
                        #Cf plus haut pour la résolution de cela.
-exec "COMMANDE" \{\} + #Meme chose, sauf qu'exec n'est execute qu'une fois
                        #pour l'ensemble du find, et {} remplace l'ensemble
                        #des fichiers trouves. Devrait être évité si l'on
                        #ignore le nombre de fichiers trouvés, car au-dessus
                        #d'un certain nombre d'octets entrés, une ligne de
                        #commande plante (en général 128 Ko)

-ok "COMMANDE" \;       #Comme -exec mais demande confirmation avant chaque
                        #execution du'une commande

-execdir "COMMANDE" \;  #Comme -exec ou -ok mais execute la COMMANDE depuis le
-execdir "COMMANDE"
\{\} +                  #repertoire du fichier et non depuis le repertoire
-okdir "COMMANDE" \;    #depuis lequel find a ete lance, ce qui permet d'eviter
                        #des problemes de securite

-ls                     #Effectue un "ls -lsdi" pour chaque fichier
-fls "FILE"             #Comme -ls mais redirige la sortie vers "FILE" de la
                        #meme maniere que fprint

-delete                 #Effectue un "rm -f" (ne supprime donc pas les
                        #repertoires non vides) pour chaque fichier. Implique
                        #-depth. Faire bien attention avec cette commande !

-quit                   #Stoppe find. Deux interets :
                        #  - Comme les actions qui precedent sont executees,
                        #    apres que la premiere action ait ete effectuee
                        #  - Quitter si l'ACTION ou le TEST qui precede
                        #    renvoie false

-prune                  #Desactive la recherche recursive du fichier (et non
                        #de l'ensemble de la recherche, ce qui le differencie
                        #de -maxdepth 0) s'il s'agit d'un repertoire. Ne
                        #fonctionne pas avec -depth et donc avec -delete

                             OPERATEURS ET NEGATION

OPERATEURS ==>          #Chaque fichier traite peut executer une suite
                        #d'EXPRESSIONS simples (ACTIONS et TESTS isoles) ou
                        #non (suite d'ACTIONS et/ou de TESTS entre
                        #parentheses) avec ou sans OPTIONS (abrege : EXPR) en
                        #les liant par des et-chaines et ou-chaines. Pour
                        #savoir quand une ACTION echoue, voir plus haut. Par
                        #defaut, un -a est implique entre chaque ACTIONS et
                        #TESTS : si l'un echoue, la suite de la ligne de
                        #commande n'a pas lieu pour le fichier courant. Les
                        #OPTIONS renvoient toujours vrai et n'ont rien a faire
                        #avec les OPERATEURS

EXPR1 EXPR2
EXPR1 -a EXPR2
EXPR1 -and EXPR2        #EXPR2 n'est executee que si EXPR1 reussit

EXPR1 -o EXPR2
EXPR1 -or EXPR2         #EXPR2 n'est executee que si EXPR1 echoue

-not EXPR               #Renverse la valeur logique de l'EXPR qui suit.
\! EXPR                 #Modifie donc le sens d'un TEST, mais ne modifie pas
                        #le comportement d'une ACTION en elle-meme mais
                        #seulement son code retour, et donc la possibilite
                        #pour les EXPR suivant cette ACTION d'etre executees

EXPR1 , EXPR2           #EXPR1 et EXPR2 sont executes tous les deux, meme si
                        #EXPR1 echoue. Seul le code erreur d'EXPR2 est retourne

\(suite d'EXPR\)        #Traite la suite d'EXPR simple ou non comme un bloc
                        #EXPR logique unique pour les operations avec les
                        #OPERATEURS
