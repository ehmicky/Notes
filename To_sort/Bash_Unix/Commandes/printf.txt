
                                  ┏━━━━━━━━━━━━┓
                                  ┃   PRINTF   ┃
                                  ┗━━━━━━━━━━━━┛

printf STRING [ARG]...  #Imprime STRING. Chaque SPECIFIER présent dans STRING
                        #renvoie, l'un après l'autre, à un ARG, de manière
                        #obligatoire.
                        #Ainsi, il devrait y avoir autant d'ARG... que de
                        #SPECIFIER. Cependant, s'il y a moins de SPECIFIER, les
                        #ARG... qui restent sont procédés avec les SPECIFIER,
                        #en repartant du début pour ces derniers, et ce 
                        #jusqu'au dernier SPECIFIER. S'il y en a plus, les 
                        #SPECIFIER de strings deviennent null et les SPECIFIER 
                        #numéraux deviennent 0
                        #N'imprime pas de newline, il faut donc la spécifier.

SEQUENCES D'ECHAPPEMENT #Elles sont possibles dans STRING. Dans ARG, elles
BACKSLASH ==>           #doivent avoir %...b comme SPECIFIER et non %...s
                        #\c est impossible et \\ s'écrit \\\\
                        #Voir doc.

-v VAR                  #Imprime le résultat dans VAR plutôt que dans stdout

SPECIFIER   ==>         #Un SPECIFIER se présente sous la forme %FLAGwidthLETTRE
                        #Il renvoie à un ARG qui est imprimé en fonction de ce
                        #SPECIFIER. Voici la liste des LETTRE :

u                       #Unsigned decimal integer
d                       
i                       #Signed decimal integer
o                       #Unsigned octal integer
x                       #Unsigned hexadecimal integer (a-f)
X                       #Unsigned hexadecimal integer (A-F)
f                       #Floating point number
e                       #Double number, in ±eEXPOSANT format
E                       #Double number, in ±EEXPOSANT format
g                       #Double number, but printed like %f or %e
G                       #Double number, but printed like %f or %E
c                       #Character (premier caractère d'une chaine)
s                       #Chaine de caractères (n'interprète pas les séquences
                        #d'échappement)
q                       #Même chose, mais avec ajout de backslash ou quotes
                        #pour échapper les caractères illégaux
b                       #Chaine de caractères (interprète les séquences
                        #d'échappement)
n                       #N'imprime rien en stdout, mais imprime le nombre de
                        #caractères imprimés jusqu'ici par printf dans le
                        #prochain ARG où ARG est considéré comme une variable
%                       #% littéral

WIDTH   ==>             #La width fait référence au nombre de colonnes minimales
                        #occupées par le SPECIFIER. Le padding est effectué par
                        #des espaces par défaut. Le padding devient right-
                        #aligned (par défaut left-aligned)
                        #Si * est spécifié comme WIDTH, le prochain ARG devient
                        #WIDTH

FLAG   ==>              #Voici la liste des FLAG :

0                       #Le padding, s'il est right-aligned, est remplis par des
                        #0
espace                  #Le padding est remplis par des espaces (défaut). Si le
                        #padding est left-aligned, un espace est ajouté au
                        #padding des nombres positifs (pas par défaut)

.WIDTH                  #Pour un nombre à virgule (f, e, E, g ou G), affiche
                        #WIDTH chiffres après la virgule (sauf exponant)
                        #Par défaut 6 pour e, E, g et G
                        #Pour une string, affiche WIDTH caractères
                        #Incompatible avec la width normale (voir ci-dessus),
                        #dont *

-                       #Le padding devient left-aligned

+                       #Un + est ajouté aux nombres positifs

#                       #Avec o, affiche 0 devant le nombre imprimé
                        #Avec x ou X, affiche 0x ou 0X devant le nombre imprimé
                        #Avec .WIDTHg ou .WIDTHG, agit comme .WIDTHe ou .WIDTHE,
                        #sauf que WIDTH désigne le nombre total de chiffres et
                        #non seulement ceux après la virgules (sauf exponant)

NOMBRES DE BASE         #Si un ARG numéral est précédé de certains suffixes, il
DIFFERENTE ==>          #est considéré en lecture (et non en écriture) d'une
                        #base différente de 10. Cela permet les conversions par
                        #exemple. Voici :

0NOMBRE                 #Nombre octal
0xNOMBRE
0XNOMBRE                #Nombre hexadécimal
