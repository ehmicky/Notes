
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SEQUENCE_ECHAPPEMENT_BACKSLASH   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

SEQUENCES D'ECHAPPEMENT #Voici une liste de commandes pouvant utiliser des
AVEC BACKSLASH          #sequences d'echappement backslash :
                        #  -  indique les séquences non reconnues jusqu'à la
                        #    colonne \v, ainsi que \xNN
                        #  - "\\\\" signifie que \\\\ doit être entré et non
                        #    seulement \\ pour entrer un backslash
                        #  - "\0" signifie que la séquence \NNN ne fonctionne
                        #    pas sauf pour \0).
                        #  - "\N" signifie que la séquence \NNN ne fonctionne
                        #    pas sauf pour \N, dont \0).
                        #! signifie pour :
                        #  - \c, qu'il est compris comme \cCHAR pour afficher
                        #    ^CHAR, ou comme un backslash n'échappant pas les
                        #    newlines s'il n'est suivi d'aucun caractère
                        #  - \r, qu'il écrase les caractères précédents
                        #  - \0, qu'il arrête la string, juste avant lui-même
                        #  - \u, que \u{...} et \U{...} sont aussi disponibles
                        #!! means:
                        #  - \u: \U -> \u{...}

                \a  \b  \c  \e  \f  \n  \r  \t  \v  \\\\  \xNN  \NNN  \0  \N  \u

- $' ' en Bash           !                                             !
- echo -e                                                                 
- C et C++               
- printf                                             
- R                                                                  !       !
- awk                                                                        
- stat --printf                                                              
- sed (RANGE et
1ère partie de
s/// et de y///)                    
- sed (s///,
  y/// et RANGE)                                                            
- tr                                                                        
- find -printf                          !                                   
- hexdump -e                                                              
- paste -d                                                               
- time (externe)                                                     
- javascript                                                               !!

SEQUENCES ==>           #Les séquences doivent toujours être échappés sous la
                        #forme "\LETTRE" ou \\LETTRE, sauf pour :
                        #  - $' '
                        #  - sed
                        #qui incluent déjà des simples guillemets.
                        #Par ailleurs, même lorsque des commandes ne permettent
                        #pas nativement d'utiliser une séquence, on peut
                        #utiliser $' ' souvent (parfois en refermant puis
                        #rouvrant les guillemets).
                        #Voici donc la liste :

\a                      #Bell (x07). Emet un son (souvent désactivé)
\b                      #Backspace (x08) : le curseur recule d'une colonne.
                        #Ainsi le prochain caractère entré écrasera le dernier
                        #caractère tapé (à l'impression, pas dans le code lui-
                        #même : CHAR + \b peut par exemple être recherché).
\c                      #Efface tous les caractères qui suivent (dans le code
                        #lui-même et dans l'impression)
                        #Exception : avec $' ' :
                        #  - seul, devient un backslash, ne pouvant pas
                        #    échapper une newline.
                        #  - suivi d'un caractère, signifie ^CHAR (pour afficher
                        #    un control character).
\e                      #Escape character (x1B). Permet par exemple de faire
\E                      #des séquences ANSI de colorisation du shell. \e et \E
                        #sont équivalents.
\f                      #Form feed (x0C) va à la ligne suivante, mais reste à la
                        #même colonne. N'est ni une newline, ni un whitespace,
                        #et est considéré comme un caractère normal. Dans un
                        #terminal, l'efface.
\n                      #Linefeed (x0A). Newline Unix (voir doc sur newline)
\r                      #Carriage return (x0D). Part d'une newline Windows
                        #(voir doc) mais sous Unix, retourne à la première
                        #colonne de la ligne courante (les caractères imprimés
                        #ensuite écraseront donc ceux déjà imprimés, mais à
                        #l'impression, pas dans le code lui-même)
                        #Le retour en arrière écrase quelque fois les caractères
                        #de la ligne courante, mais rarement.
\t                      #Horizontal tab (x09)
\uXXXX                  #
\UXXXXXXXX              #Sequence Unicode.
\v                      #Vertical tab (x0B) (même effet que \f)
\\                      #Backslash littéral

\xN                     #The eight-bit ASCII character with hexadecimal value
\xNN                    #xNN or x0N.

\N
\NN                     #The eight-bit character with octal value NNN, 0NN ou
\NNN                    #00N
\0
\00                     #Parfois, seul null est compris avec cette syntaxe. Avec
\000                    #$' ', la string s'arrête juste avant ce null
