
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   SETJMP.H   ┃
                                  ┗━━━━━━━━━━━━━━┛

struct jmp_buf          #Structure dont les membres enregistrent l'environment
                        #courant

setjmp(STKTJMP_BUF_VAR) #Enregistre l'environment courant, sans la disposition
                        #des signaux bloqués, dans STKTJMP_BUF_VAR
                    ----| et renvoie 0, ou la valeur passée par longjmp() s'il a
                        | été invoqué par longjmp()
                        | Devient une sorte de goto label.
                        | Ainsi, il s'utilise sous la forme :
                        |  - if ( setjmp(STKTJMP_BUF_VAR) != 0 )
                        | pour initialiser le label, tout en entrant dans la 
                        | boucle if si un longjmp() vient d'être effectué, ce
                        | qui permet d'éviter une boucle infinie.
longjmp(STKTJMP_BUF_VAR,#Fait un goto vers le setjmp() ayant enregistré
INT_VAL)                #STKTJMP_BUF_VAR, et lui passe la valeur INT_VAL.
                        #Ce setjmp() n'a pas besoin d'être dans la même 
                        #fonction, mais la fonction courante doit être une
                        #fonction enfant. STKTJMP_BUF_VAR doit être une variable
                        #en dehors de tout bloc, au moins static (si même 
                        #fichier) au mieux extern (si autre fichier)

VOLATILE ==>            #Les variables locales :
                        #  - modifiées après un setjmp(), mais plus accédées
                        #    ensuite dans la frame courante (donc en général
                        #    optimized out par le compiler)
                        #  - mais accédées via un longjmp() invoqué par un 
                        #    subframe, et retournant donc dans le bloc setjmp()
                        #Dans un tel cas, la version modifiée de ces variables
                        #est attendue, non celle enregistrée lors du setjmp().
                        #Il faut donc enlever l'optimization du compiler en les
                        #mettant "volatile".

GOTO, A EVITER ==>      #Ces fonctions permettent de faire un goto, mais au-delà
                        #de la portée locale. Elles sont à éviter dans la mesure
                        #où il s'agit d'un goto-like
