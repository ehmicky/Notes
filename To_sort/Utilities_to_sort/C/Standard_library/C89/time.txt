
                                  ┏━━━━━━━━━━━━┓
                                  ┃   TIME.H   ┃
                                  ┗━━━━━━━━━━━━┛

clock_t                 #Type de ce qui est renvoyé par clock(), en général 
                        #LONG_INT. Cela peut être trop petit, et clock_t 
                        #retourne donc à 0 par exemple toutes les 72 minutes
                        #pour moi
time_t                  #Type de ce qui est renvoyé par time() par exemple, 
                        #faisant référence aux nombres de secondes depuis 
                        #Epoch, en général INT

tm                      #Structure pour stocker une heure et date courante, avec
                        #plusieurs membres de type INT :
                        #  - tm_sec   : seconde (0 - 61)
                        #  - tm_min   : minute (0 - 59)
                        #  - tm_hour  : heure (0 - 23)
                        #  - tm_mday  : jour du mois (1 - 31)
                        #  - tm_mon   : mois (0 - 11)
                        #  - tm_year  : année (0 pour 1900 - 110 pour 2010)
                        #  - tm_wday  : jour de la semaine ( 0 pour dimanche - 6
                        #               pour samedi)
                        #  - tm_yday  : jour de l'année (0 - 365)
                        #  - tm_isdst : nombre d'heure en plus dues à une heure
                        #               d'été

CLOCKS_PER_SEC          #Nombre de "ticks" de l'horloge, par seconde, sous forme
                        #de long int (1,000,000 pour moi)
CLK_TCK                 #Alias obsolète de CLOCKS_PER_SEC

clock(void)         ----# Renvoie une approximation du nombre de ticks écoulé
                        | depuis le début du programme (à diviser donc par
                        | CLOCKS_PER_SEC pour obtenir le nombre de secondes), 
                        | sous forme de clock_t, ou -1 si erreur
time(TIME_T_ADR)        #Affecte l'heure et date courante sous forme de time_t à
                        #l'adresse pointée par TIME_T_ADR, sauf si TIME_T_ADR
                        #est null
                    ----| Renvoie ce même TIME_T_LIT, ou -1 si erreur
difftime(TIM_T_VAL1,----# Renvoie la différence entre TIME_T_VAL1 et TIME_T_VAL2
TIME_T_VAL2)            | en secondes. Il s'agit d'une simple soustraction si
                        | TIME_T est un INT, mais sur certains systèmes, il ne
                        | s'agit pas d'un TOUINT
mktime(TM_ADR)      ----# Renvoie un TIME_T_ADR désignant l'heure en fonction
                        | d'un TM_ADR à l'heure locale, ou -1 en cas d'erreur

gmtime(TIME_T_ADR)  ----# Renvoie un TM_ADR désignant l'heure GMT en fonction 
                        | d'un TIME_T_ADR, ou NULL en cas d'erreur
localtime(TIM_T_ADR)----# Même chose, mais prend en compte l'heure locale
ctime(TIME_T_ADR)   ----# Equivaut à asctime(localtime(TIM_T_ADR)), renvoie
                        | NULL en cas d'erreur

asctime(TM_ADR)     ----# Renvoie une string convertissant en message 
                        | compréhensible une TM_ADR, renvoie NULL en cas 
                        | d'erreur
strftime(STR1,          #Affecte à STR1 les SIZE_T_VAL premiers octets du temps
SIZE_T_VAL, STR2,       #tel qu'indiqué par TM_ADR, selon le formatage STR2.
TM_ADR)                 #Le formatage STR2 est une string normale pouvant
                        #contenir des séquences d'échappement date sous la forme
                        #%LETTRE.
                    ----| Renvoie le nombre de caractères du nouveau STR1 (sans
                        | le leading null), ou 0 si erreur, ou si SIZE_T_VAL
                        | n'était pas assez grand et que le message a été 
                        | tronqué)
