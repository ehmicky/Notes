
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   STRING.H   ┃
                                  ┗━━━━━━━━━━━━━━┛

strlen(STR_VAL)     ----# Renvoie le nombre de caractère de STR_VAL (sans le 
                        | '\0') sous forme de SIZE_T_LIT

strcpy(STR1, STR2)      #Ecrase le contenu de STR1 par celui de STR2.
                        #Les strings de doivent pas overlap.
                    ----| Renvoie le nouveau STR1. 
                        | A éviter, car risque de buffer overflow.
strncpy(STR1, STR2,     #Même chose, mais n'utilise que les TOUINT_VAL premiers 
TOUINT_VAL)             #octets de STR2.
                        #Ne rajoute pas de '\0' si STR2 est donc tronqué : le
                        #rajouter donc soi-même.
strcat(STR1, STR2)      #Fait que STR1 devient la concaténation de lui-même 
                        #(moins son '\0') + STR2, et renvoie le résultat.
                    ----| Renvoie le nouveau STR1.
                        | A éviter car risque de buffer overflow.
strncat(STR1, STR2,     #Même chose, mais n'utilise que les TOUINT_VAL premiers 
TOUINT_VAL)             #octets de STR2, et rajoute un '\0' si STR2 est donc 
                        #tronqué.

memcpy(ADR1, ADR2,      #Copie les SIZE_T_VAL premiers octets commençant à ADR2,
SIZE_T_VAL)             #vers l'adresse pointée par ADR1. ADR1 et ADR2 ne 
                        #doivent pas overlap
                    ----| Retourne ADR1.
memmove(ADR1, ADR2,     #
SIZE_T_VAL)             #Même chose, mais ADR1 et ADR2 peuvent overlap

memset(ADR, INT_VAL,    #Copie SIZE_T_VAL octets de (char)INT_VAL depuis
SIZE_T_VAL)             #l'adresse pointée par ADR
                    ----| Renvoie ADR

strcmp(STR1, STR2)  ----# Renvoie un INT_LIT > 0 si STR1 est ascii-
                        | alphabétiquement supérieur à STR2, -1 si inférieur, 0 
                        | si identique. La comparaison commence au premier
                        | caractère :
                        |   - s'ils sont égaux et qu'ils ne sont pas == '\0',
                        |     compare le prochain caractère
                        |   - sinon, termine et renvoie le résultat de la
                        |     comparaison
                        #Si STR1 ou STR2 est NULL, segfault.
strncmp(STR1, STR2, ----# Même chose, mais ne compare que les SIZE_T_VAL 
SIZE_T_VAL)             | premiers octets
memcmp(ADR1, ADR2,  ----# Même chose, mais les ADR ne pointent pas forcément des
SIZE_T_VAL)             | strings, mais une suite d'octets quelconque (utile
                        | donc surtout pour un test d'égalité)
strcoll(STR1, STR2) ----# Comme strcmp(), mais utilise LC_COLLATE également lors
                        | de la comparaison.
strxfrm(STR1, STR2,     #Convertit STR2 en fonction de LC_COLLATE, et enregistre
SIZE_T_VAL)             #les SIZE_T_VAL premiers octets du résultat dans STR1.
                        #Deux STR2 converties avec strxfrm(), puis comparées
                        #avec strcmp() sont bien comparées en fonction de la
                        #collation locale (comme si elles avaient été 
                        #directement comparées avec strcoll()). Le résultat
                        #de la conversion est cependant peu lisible, mais il ne
                        #faut pas s'en soucier. En général, il s'agit de paquets
                        #de strlen(STR2) octets, chaque paquet faisant référence
                        #l'un après l'autre, à une caractéristique de chaque
                        #caractère (lettre générale, accent, casse, etc.),
                        #prioritaires l'un après l'autre dans la collation.
                    ----| Renvoie le nombre d'octets du résultat converti (sans
                        | le '\0' final. Si ce nombre est > SIZE_T_VAL, cela
                        | signifie qu'il y a eu troncature.

strchr(STR, INT_VAL)----# Renvoie la CHAR_ADR dans STR (ne modifie pas STR), de 
                        | sa première occurence du CHAR désigné par INT_VAL 
                        | (dont '\0'). Cette CHAR_ADR peut être utilisée comme
                        | une STR
                        | Renvoie NULL si ce CHAR n'a pas été trouvé.
strrchr(STR,            # Même chose, sauf que la recherche est effectuée à 
INT_VAL)            ----| l'envers, depuis la fin
strpbrk(STR1,           # Comme strchr(), sauf que l'occurence cherchée est
STR2)               ----| n'importe lequel des caractères de STR2.
strstr(STR1, STR2)  ----# Comme strchr(), sauf que recherche une occurence de
                        | STR2 (et non d'INT_VAL) dans STR1
memchr(ADR, INT_VAL,    # Comme strchr() sauf que :
SIZE_T_VAL)         ----|   - utilise un ADR et pas forcément un STR
                        |   - renvoie un VOID_ADR et non un CHAR_ADR
                        |   - n'effectue a recherche que dans les SIZE_T_VAL
                        |     premiers octets (et renvoie NULL si échec)
strcspn(STR1, STR2) ----# Retourne le nombre de caractères depuis le début STR1
                        | jusqu'à la première occurence dans STR1 d'un des
                        | caractères de STR2.
strspn(STR1, STR2)  ----# Retourne le nombre de caractères depuis le début STR1
                        | jusqu'à la première occurence dans STR1 d'un caractère
                        | n'étant pas l'un des caractères de STR2.

strtok(STR1, STR2)      #Si STR != NULL, tronque STR1 à partir de sa première 
                        #occurence de STR2, sans cette occurence, et garde en 
                        #mémoire le reste (que l'on appelera STR3), sans
                        #l'occurence STR2
                        #Une occurence doublon, en début de STR1 ou en fin de
                        #STR1, est ignorée.
                    ----| Si STR != NULL, renvoie le nouveau STR1.
                        | Si STR == NULL et qu'un STR3 existe, utilise la 
                        | valeur de STR3 à la place de NULL, et affecte la 
                        | deuxième moitié à un nouveau STR3.
                        | Ainsi, à chaque appel avec NULL, la STR1 originelle
                        | est parsée morceau par morceau.
                        | Si STR == NULL et qu'aucun STR3 n'existe, segfault.
                        | Si STR3 est vide, renvoie NULL.
                        | STR2 peut changer à chaque nouvel appel de strtok()

strerror(INT_VAL)   ----# Imprime sur stderr une STR décrivant un message
                        | d'erreur associé à l'errno (qui est donc souvent 
                        | placé comme argument) numéro INT_VAL. Doit donc être 
                        | fait juste après le soupçon de modification d'errno
