
                                  ┏━━━━━━━━━━━━┓
                                  ┃   MATH.H   ┃
                                  ┗━━━━━━━━━━━━┛

ERREURS ==>             #Si une erreur survient, errno est souvent modifié :
                        #  - si une erreur de domaine intervient (par exemple
                        #    √-1), on affecte EDOM à errno
                        #  - si une erreur de out of range intervient :
                        #      - si le range est trop grand, +∞ ou -∞ est 
                        #        renvoyé et on affecte ERANGE à errno
                        #      - si la précision n'est pas assez grande, 0 est
                        #        renvoyé

LIBRARIE ==>            #La librarie libm.so n'est pas lié par défaut : il faut
                        #la rajouter avec -lm

HUGE_VAL                #En général le DOUBLE_LIT +∞
M_PI                    #Pi, soit 3.141592653589793238462643
M_SQRT2                 #Racine de 2, soit 1.4142135623730950488016887

OPERATIONS SUR LES
DOUBLES ==>             #Voici (toutes ces fonctions renvoient un DOUBLE_LIT) :

floor(DOUBLE_VAL)   ----# Renvoie l'arrondi inférieur de DOUBLE_VAL
ceil(DOUBLE_VAL)    ----# Renvoie l'arrondi supérieur de DOUBLE_VAL
fabs(DOUBLE_VAL)    ----# Renvoie la valeur absolue de DOUBLE_VAL
modf(DOUBLE_VAL,        # Stocke la partie entière de DOUBLE_VAL à l'adresse 
DOUBLE_ADR)         ----| DOUBLE_ADR, et renvoie la partie décimale
fmod(DOUBLE_VAL1,       # Renvoie DOUBLE_VAL1 % DOUBLE_VAL2 (% par défaut ne 
DOUBLE_VAL2         ----| marche qu'avec des TOUINT_VAL) 

sqrt(DOUBLE_VAL)    ----# Renvoie la racine carrée de DOUBLE_VAL
pow(DOUBLE_VAL1,        # 
DOUBLE_VAL2)        ----| Renvoie DOUBLE_VAL1 puissance DOUBLE_VAL2
ldexp(DOUBLE_VAL,       # 
INT_VAL)            ----| Renvoie DOUBLE_VAL * ( 2 ^ INT_VAL )
frexp(DOUBLE_VAL,       # Met un exponent entier à l'adresse pointée par INT_ADR
INT_ADR)            ----| et renvoie une mantisse, de sorte que "mantisse * 
                        | 2 ^ *INT_ADR donne DOUBLE_VAL

exp(DOUBLE_VAL)     ----# Renvoie l'exponentielle de DOUBLE_VAL
log(DOUBLE_VAL)     ----# Renvoie le logarithme naturel (aussi appelé ln) de 
                        | DOUBLE_VAL
log10(DOUBLE_VAL)   ----# Renvoie le logarithme base 10 (aussi appelé log) de 
                        | DOUBLE_VAL

TRIGONOMETRIE ==>       #Les opérations suivantes doivent avoir un argument
                        #exprimé en radian et non en degré. Pour convertir :
                        #  - x radian = y degrés / 180 * M_PI

cos(DOUBLE_VAL)     ----# Renvoie le cosinus de DOUBLE_VAL
sin(DOUBLE_VAL)     ----# Renvoie le sinus de DOUBLE_VAL
tan(DOUBLE_VAL)     ----# Renvoie la tangente de DOUBLE_VAL
acos(DOUBLE_VAL)    ----# Renvoie le cosinus inverse de DOUBLE_VAL
asin(DOUBLE_VAL)    ----# Renvoie le sinus inverse de DOUBLE_VALa
atan(DOUBLE_VAL)    ----# Renvoie la tangente inverse de DOUBLE_VAL
atan2(DOUBLE_VAL1,      # Renvoie la tangente inverse de DOUBLE_VAL1 et 
DOUBLE_VAL2)        ----| DOUBLE_VAL2
cosh(DOUBLE_VAL)    ----# Renvoie le cosinus hyperbolique de DOUBLE_VAL
sinh(DOUBLE_VAL)    ----# Renvoie le sinus hyperbolique de DOUBLE_VAL
tanh(DOUBLE_VAL)    ----# Renvoie la tangente hyperbolique de DOUBLE_VAL

OPERATIONS SUR LES      #Ces opérations sont aussi disponibles pour les floats
FLOATS ET LES           #et les long doubles (qui prennent alors et renvoient
LONG_DOUBLES  ==>       #des FLOAT et des LONG_DOUBLE), en rajoutant simplement
                        #f ou l à la fin du nom de la fonction. Cependant, cela
                        #n'est pas portable
