
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   LOCALE.H   ┃
                                  ┗━━━━━━━━━━━━━━┛

LC_ MACROS ==>          #Il s'agit de variables renvoyant une INT_VAL utilisée
                        #comme numéro de catégorie pour des fonctions de
                        #localization (il ne s'agit donc pas des valeurs de ces
                        #catégories, qui peuvent être obtenues avec setlocale(),
                        #mais de leur index). Le numéro associé dépend de
                        #l'implémentation
                        #Ne pas les confondre avec les environment variables du
                        #même nom, qui elles renvoient la valeur de ces 
                        #catégories.

LC_ALL                  #Toutes les locales
LC_COLLATE              #Utilisé pour la comparaison de strings avec strcoll()
                        #et strxfrm()
LC_CTYPE                #Alphabet utilisé (utilisé par exemple pour la 
                        #conversion de casse, mblen(), wctomb(), etc.)
LC_MESSAGES             #La langue des messages (utilisé par gettext() si la
                        #locale est "C")
LC_MONETARY             #Les conventions monétaires (utilisé par localeconv(),
                        #strfmon(), ...)
LC_NUMERIC              #Le formattage des nombres(utilisé par localeconv(), 
                        #printf(), scanf(), ...)
LC_TIME                 #La réprésentation de l'heure et des dates(utilisé par
                        #strftime(), ...)

AUTRES ==>              #Propres à Glibc (pas portable) : LC_TELEPHONE, LC_PAPER, LC_NAME, LC_ADDRESS, LC_MEASUREMENT,
                        #LC_IDENTIFICATION

setlocale(INT_VAL, STR) #INT_VAL doit être une LC_ macro.
                        #La locale de la catégorie INT_VAL devient STR, à
                        #condition que STR soit valide :
                        #  - NULL : la locale actuelle (tout programme commence
                        #           par la locale "C")
                        #  - "" : la locale définie comme défaut par le système.
                        #         Avec glibc, la recherche s'effectue dans cet
                        #         ordre (il s'agit des environment variables pas
                        #         des macros) :
                        #            - LC_ALL
                        #            - Si LC_ALL est vide, la catégorie précise
                        #              recherchée (LC_NUMERIC, LC_TIME, etc.)
                        #            - sinon LANG
                        #  - STR : toute locale définie comme valide par le
                        #          système, comme "C", "fr_FR" ou "en_US.UTF-8"
                        #          Pour savoir la liste, faire locale -a 
                        #          (commande Unix).
                        #La locale "C" est celle par défaut de tout programme C.
                        #"POSIX" est un alias vers "C".
                    ----| Renvoie la STR de la locale définie, ou NULL si STR
                        | n'est pas une STR valide. setlocale(INT_VAL, "")
                        | permet donc de renvoyer la locale définie par défaut
                        | par le système.

localeconv(void)    ----# Renvoie une STKT_ADR de struct lconv, en fonction de
                        | la locale courante. Modifier cette STKT_ADR ne
                        | modifie pas la struct lconv locale elle-même, mais
                        | seulement une copie d'elle

lconv                   #Structure dont les membres font référence à la locale
                        #numérique et monétaire courante.

LCONV_VAR.decimal_point #STR_LIT utilisé pour séparer les unités des décimales
LCONV_VAR.thousands_sep #STR_LIT utilisé pour séparer les milliers
LCONV_VAR.grouping      #STR_LIT utilisé pour formater les nombres à plusieurs
                        #chiffres. STR_LIT est sous la forme "TOUINT_VAL
                        #[;TOUINT_VAL]...". Chaque TOUINT_VAL indique un
                        #groupement de TOUINT_VAL chiffres (depuis les unités,
                        #vers les chiffres plus importants) avant d'imprimer
                        #thousands_sep.
                        #La dernière valeur est répétée indéfiniment.
                        #Une valeur de 0 signifie que le dernier élément est
                        #répété indéfiniment.
                        #Une valeur de CHAR_MAX signifie que thousands_sep n'est
                        #plus imprimé.

LCONV_VAR
.int_curr_symbol        #STR_LIT indiquant la currency symbol, tel qu'indiquée 
                        #internationalement
LCONV_VAR
.currency_symbol        #STR_LIT indiquant la currency symbol, tel qu'indiquée 
                        #localement.
LCONV_VAR
.mon_decimal_point      #Comme decimal_point, mais pour la monnaie
LCONV_VAR
.mon_thousands_sep      #Même chose
LCONV_VAR.mon_grouping  #Même chose
LCONV_VAR.positive_sign #STR_LIT indiquant le signe pour les valeurs monétaires 
                        #positives
LCONV_VAR.negative_sign #Même chose pour les valeurs monétaires negatives
LCONV_VAR
.int_frac_digits        #CHAR_LIT indiquant le nombre de décimales après la 
                        #virgule, dans un contexte international
LCONV_VAR.frac_digits   #Même chose, mais dans un contexte local
LCONV_VAR.p_cs_precedes #CHAR_LIT indiquant si la currency_symbol précède une
                        #valeur positive (1), ou non (0)
LCONV_VAR.n_cs_precedes #Même chose pour les valeurs négatives.
LCONV_VAR.p_sep_by_space#CHAR_LIT indiquant si un espace sépare le 
                        #currency_symbol de la valeur monétaire positives (1), 
                        #ou non (0)
LCONV_VAR.n_sep_by_space#Même chose pour les valeurs négatives.
LCONV_VAR.p_sign_posn   #CHAR_LIT combinant p_cs_precedes et p_sep_by_space :
                        #  - 1 : currency_symbol après la valeur, avec un espace
                        #  - 2 : currency_symbol avant la valeur, avec un espace
                        #  - 3 : currency_symbol après la valeur, sans espace
                        #  - 4 : currency_symbol avant la valeur, sans espace
                        #  - 0 : des parenthèses entourent la valeur
LCONV_VAR.n_sign_posn   #Même chose pour les valeurs négatives
