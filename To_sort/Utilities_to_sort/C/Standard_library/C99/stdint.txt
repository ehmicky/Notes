
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   STDINT.H   ┃
                                  ┗━━━━━━━━━━━━━━┛

TYPES POUR              #Cet header définit des types entiers de taille fixe, ce
INTEROPERABILITE ==>    #qui permet de passer outre les problèmes dus au fait
                        #que la taille des types entiers varie en fonction des
                        #architectures. Cependant, ne pas les utiliser, car
                        #certaines fonctions ne les prend pas en charge.
                        #Les types sont sous la forme :
                        #  - [u]int[AJOUT][NOMBRE]_t
                        #Où :
                        #  - "u" signifie unsigned
                        #  - NOMBRE peut être 8, 16, 32 et 64 (si OS 64 bits,
                        #    sinon pas garanti)
                        #  - AJOUT peut être :
                        #     - "_least", indiquant un type au moins supérieur
                        #       ou égal au type originel.
                        #       Par exemple int_least8_t est un int8_t
                        #       "renforcé" (en général égal)
                        #     - "_fast", indiquant le contraire.
                        #    contrairement aux autres, les types _least et _fast
                        #    dépendent de l'implémentation.
                        #Il existe des macros également :
                        #  - INT[AJOUT][NOMBRE]_MIN
                        #  - [U]INT[AJOUT][NOMBRE]_MAX
                        #indiquant les limites de ce type. AJOUT est à mettre en
                        #lettre capitale.
                        #Ainsi que :
                        #  - [U]INT[NOMBRE]_C(TOUINT_LIT)
                        #Des macros qui convertissent TOUINT_LIT dans le type
                        #désiré.

TYPES SUPPLEMENTAIRES   #NOMBRE a également deux valeurs supplémentaires :
  ==>                   #  - MAX, le type entier le plus large supporté
                        #  - PTR, le type des pointeurs
                        #Cependant :
                        #  - dépendent de l'implémentation
                        #  - ne fonctionnent pas avec AJOUT
                        #  - PTR ne fonctionne pas avec la dernière macro

AUTRES LIMITES          #D'autre limites, dépendant de l'implémentation, sont
  ==>                   #définies :

PTRDIFF_MIN             #Valeur minimale d'un ptrdiff_t (INT_MIN en général)
PTRDIFF_MAX             #Valeur maximale d'un ptrdiff_t (INT_MAX en général)
SIZE_MAX                #Valeur maximale d'un size_t (UINT_MAX en général)
WINT_MIN                #Valeur minimale d'un wint_t (0 en général)
WINT_MAX                #Valeur maximale d'un wint_t (UINT_MAX en général)
SIG_ATOMIC_MIN          #Valeur minimale d'un sig_atomic_t (INT_MIN en général)
SIG_ATOMIC_MAX          #Valeur maximale d'un sig_atomic_t (INT_MAX en général)
