
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   WCHAR.H   ┃
                                  ┗━━━━━━━━━━━━━┛

WIDE CHARACTERS ==>     #Cet header utilise les wide characters, voir la doc.

mbstate_t               #Type utilisé pour enregistrer l'état de shift (utilisé
                        #par les idéogrammes asiatiques)

WCHAR_MAX               #Valeur maximale d'un wchar_t ( en général + 0x7fffffff 
                        #ou + 0x7fff)
WCHAR_MIN               #Valeur maximale d'un wchar_t ( en général - 0x7fffffff 
                        #ou - 0x7fff)

mbstowcs(WSTR, STR,     #Convertit STR en wide characters array WSTR jusqu'au
SIZE_T_VAL)             #SIZE_T_VAL wide charactère ainsi converti. Convertit
                        #aussi le '\0' final, mais ne le rajoute pas si STR est 
                        #tronqué : il faut donc s'assurer que SIZE_T_VAL soit >=
                        #mbstowcs(NULL, STR, 0) + 1
                        #Si WSTR est NULL, SIZE_T_VAL est ignoré, et seule la
                        #valeur est renvoyée.
                    ----| Renvoie le nombre de wide characters ainsi convertis
                        | sans compter le '\0' final
wcstombs(STR, WSTR,     #Même chose, mais dans le sens inverse. SIZE_T_VAL 
SIZE_T_VAL)             #signifie donc le nombre de char multi-octets, et non 
                        #de WCHAR

mbtowc(WSTR, STR,       #Convertit le premier WCHAR de WSTR par la conversion
SIZE_T_VAL)             #en WCHAR du premier caractère (multi-octet ou non) de 
                        #STR, à condition que celui- ci fasse SIZE_T_VAL octets 
                        #ou moins
                        #Si WSTR est NULL, la conversion n'est pas effectuée,
                        #mais la valeur retournée tout de même.
                    ----| Retourne le nombre d'octets convertis à partir de STR,
                        | ou 0 si le caractère converti était '\0'
wctomb(STR, WCHAR)      #Même chose, mais dans le sens inverse, sauf que :
                        #  - STR doit pouvoir accueillir WCHAR sans buffer 
                        #    overflow
                        #  - utilise WCHAR et non le premier WCHAR d'une WSTR
                        #  - SIZE_T_VAL est inutile
                        #  - suivant la taille de WCHAR converti, il peut
                        #    écraser un nombre variable d'octets

mbsinit(MBSTATE         # Renvoie != 0 si MBSTATE_T_ADR est un shift initial, 0
_T_ADR)             ----| sinon.
mbsrtowcs(WSTR, STR_ADR,#
SIZE_T_VAL,             | Comme mbstowcs, mais utilise un MBSTATE_T_ADR pour les
MBSTATE_T_ADR       ----| shifts, et utilise un STR_ADR, et non STR.
wcsrtombs(STR, WSTR_ADR,# 
SIZE_T_VAL,             | Comme wcstombs, mais utilise un MBSTATE_T_ADR pour les
MBSTATE_T_ADR)      ----| shifts, et utilise un WSTR_ADR, et non WSTR.
mbrtowc(WSTR, STR,      #
SIZE_T_VAL,             | Comme mbtowc(), mais avec des considérations sur les
MBSTATE_T_ADR)      ----| shifts (idéogrammes asiatiques)
wcrtomb(STR, WCHAR,     # Comme wctomb(), mais avec des considérations sur les
MBSTATE_T_ADR)      ----| shifts (idéogrammes asiatiques)
mbrlen(STR, SIZE_T_VAL, # Comme mblen(), mais avec des considérations sur les
MBSTATE_T_ADR)      ----| shifts

btowc(INT_VAL)      ----# Retourne un WCHAR représentant le caractère 
                        | (char)INT_VAL, à condition que ce caractère puisse
                        | etre codé sur un seul octet, sinon renvoie WOEF.
                        | Ne pas utiliser donc, car ne peut pas convertir un
                        | caractère multi-octet
wctob(WCHAR)        ----# Retourne un INT_VAL représentant le char équivalent à
                        | WCHAR, à condition que ce char puisse être codé sur un
                        | seul octet, sinon renvoie WOEF. Ne permet donc pas de 
                        | renvoyer un caractère multi-octet : ne pas utiliser.

FONCTIONS EQUIVALENTES  #Des fonctions équivalentes à celles déjà existantes,
  ==>                   #mais marchant pour les wide characters, sont proposées.
                        #Elles sont équivalentes sauf que :
                        #  - STR devient WSTR
                        #  - pour memcpy, memmove, memset, memcmp et memchr, ADR
                        #    devient WSTR
                        #  - CHAR devient WCHAR
                        #  - un INT_VAL devant représenter un char, devient un
                        #    WCHAR (sauf pour fgetws)
                        #  - EOF devient WEOF
                        #Voici la liste des équivalences par rapport à stdio.h :

fgetws                  # fgets
getwchar                # getchar
fgetwc                  # fgetc
getwc                   # getc
ungetwc                 # ungetc
fputws                  # fputs
putwchar                # putchar
fputwc                  # fputc
putwc                   # putc
wprintf                 # printf
fwprintf                # fprintf
swprintf                # sprintf
vwprintf                # vprintf
vfwprintf               # vfprintf
vswprintf               # vsprintf
wscanf                  # scanf
fwscanf                 # fscanf
swscanf                 # sscanf
vwscanf                 # vscanf
vfwscanf                # vfscanf
vswscanf                # vsscanf

                        #Et celles par rapport à string.h :

wcslen                  # strlen
wcscpy                  # strcpy
wcsncpy                 # strncpy
wcscat                  # strcat
wcsncat                 # strncat
wmemcpy                 # memcpy
wmemmove                # memmove
wmemset                 # memset
wcscmp                  # strcmp
wcsncmp                 # strncmp
wmemcmp                 # memcmp
wcsxfrm                 # strxfrm
wcschr                  # strchr
wcsrchr                 # strrchr
wcspbrk                 # strpbrk
wcsstr                  #
wcswcs                  # strstr (wcswcs est un alias déprécié de wcsstr)
wmemchr                 # memchr
wcscspn                 # strcspn
wcsspn                  # strspn

                        #Par ailleurs, cette fonction apport des choses en plus
                        #par rapport à sa version non-wide characters :

wcstok(WSTR1, WSTR2,    #Comme strtok(), sauf que la STR3 implicite est ici
WSTR3_ADR)              #explicitement enregistrée dans *WSTR3_ADR, et que les
                        #STR deviennent des WSTR, etc.
