
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   SYSTEME_DE_FICHIER   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━┛

HEADER ==>              #<sys/param.h>
MAXSYMLINKS             #Retourne le nombre maximum de redirections par symlinks
                        #(20 sur mon système)

HEADER ==>              #<unistd.h>
symlink(STR1, STR2)     #Créé un symlink STR2 pointant vers STR1.
                        #Echoue si STR2 existe.
                        define _BSD_SOURCE ou #define _POSIX_C_SOURCE 200112L
                    ----| Renvoie 0 si succès, -1 sinon
readlink(STR1, STR2,    #Enregistre les SIZE_T_VAL premiers octets du chemin 
SIZE_T_VAL)             #pointé par le symlink dont le chemin est STR1, dans 
                        #STR2. Attention : ne rajoute pas de '\0' final à la fin
                        #de la chaine de caractères copiée.
                    ----| Renvoie le nombre d'octets placés dans STR2, ou -1 si 
                        | erreur. Si STR2 == SIZE_T_VAL, il est possible que le 
                        | chemin ait été tronqué.
                        | #define _BSD_SOURCE ou #define _POSIX_C_SOURCE 200112L
link(STR1, STR2)        #Crée un hard link STR2 à partir de STR1.
                        #Echoue si STR2 existe déjà.
                    ----| Renvoie 0 si succès, -1 sinon.

mkdir(STR, INT_VAL)     #Crée le répertoire dont le chemin est STR, avec les
                        #permissions INT_VAL. INT_VAL est une suite de 
                        #permissions flags commençant par S_, qui sont or'd,
                        #puis and'd avec l'umask
                        #L'avant-dernier répertoire du chemin STR doit exister.
                    ----| 0 pour un succès, -1 si échec
HEADER ==>              #<unistd.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE / _SVID_SOURCE

mknod(STR, MODE_T_VAL,  #Crée un fichier au chemin STR, avec les permissions +
DEV_T_VAL)              #type MODE_T_VAL, et le device number DEV_T_VAL.
                        #Peut en théorie être utilisé pour plusieurs types, mais
                        #ne devrait l'être que pour les special files.
                        #MODE_T_VAL doit comprendre également le type du fichier
                        #et doit être une série de S_* flags or'd
                        #DEV_T_VAL peut être obtenu avec stat(), ou en 
                        #connaissant les major et minor ID et en utilisant
                        #makedev()
                    ----| 0 si succès, -1 sinon

unlink(STR)             #Supprime un fichier non répertoire, dont le chemin est 
                        #STR, en appelant unlink() ou rmdir().
                        #Le contenu du fichier lui-même peut encore être utilisé
                        #par les processes l'utilisant actuellement, mais ne le
                        #sera plus une fois que plus aucun process ne 
                        #l'utilisera.
                        #Ne déréférence pas les symlinks
                    ----| 0 pour un succès, -1 si échec
rmdir(STR)              #Comme unlink(), mais pour un répertoire vide

HEADER ==>              #<sys/types.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

truncate(STR, OFF_T_VAL)#Change la taille du fichier dont le chemin est STR à
                        #OFF_T_VAL octets. Si OFF_T_VAL < sa taille actuelle, il
                        #est tronqué, sinon, de '\0' sont ajoutés.
                    ----| 0 si succès, -1 sinon
ftruncate(INT_VAL,      #Comme truncate(), mais utilise le file descriptor 
OFF_T_VAL)              #INT_VAL

HEADER ==>              #<unistd.h>
getwd(STR)              #Enregistre le chemin absolu du répertoire courant 
                        #(chemin physique et non symbolique) dans STR
                    ----| Retourne ce chemin absolu, ou NULL si erreur
                        | Ne pas utiliser car risque de buffer overflow
HEADER ==>              #<unistd.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

getcwd(STR, SIZE_T_VAL) #Comme getwd(STR), mais :
                        #  - si la taille du chemin absolu ('\0' final compris)
                        #    est > SIZE_T_VAL, NULL est renvoyé
                        #Et avec _GNU_SOURCE :
                        #  - si STR est NULL, il ne tente pas de sauvegarder 
                        #    dans STR, et un STR dynamiquement alloué est
                        #    renvoyé
                        #  - si STR est NULL et que SIZE_T_VAL == 0, la taille
                        #    du STR renvoyé est allouée automatiquement
                    ----| Renvoie NULL si erreur.
HEADER ==>              #<unistd.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

get_current_dir_name    #Equivaut à getcwd(NULL, 0), sauf qu'il s'agit du chemin
(void)                  #symbolique, et non physique.

HEADER ==>              #<unistd.h>
chdir(STR)              #Change le répertoire courant du process courant avec
                        # STR
                    ----| Renvoie 0 si succès, -1 si échec
fchdir(INT_VAL)         #Change le répertoire courant du process associé au file
                        #descriptor INT_VAL avec STR
                    ----| Renvoie 0 si succès, -1 si échec

HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

basename(STR)       ----# Renvoie le basename de STR, où une null string si :
                        |  - STR est "/" (les / doublons sont ignorés)
                        |  - STR est ""
                        | Erreur si STR est NULL, car NULL n'est pas une STR.
                        | Override par la XPG version de basename() si le header
                        | <libgen.h> est inclus
HEADER ==>              #<libgen.h>

MACROS A DEFINIR ==>    #_XOPEN_SOURCE

basename(STR)           #STR doit être modifiable.
                        #Override le basename définit par _GNU_SOURCE, avec ces
                        #modifications :
                        #  - Renvoie le répertoire qui précède le "/" si STR se
                        #    termine par "/"
                        #  - Renvoie "/" si STR est "/" (les "/" doublons sont
                        #    ignorés)
                        #  - Renvoie "." si STR est NULL ou ""
dirname(STR)            #STR doit être modifiable
                        #Renvoie le dirname de STR :
                        #  - Renvoie le répertoire qui précède le dernier
                        #    répertoire si STR se termine par "/"
                        #  - Renvoie "/" si STR est "/" (les "/" doublons sont
                        #    ignorés)
                        #  - Renvoie "." si STR est ""
                        #  - Erreur si STR est NULL

HEADER ==>              #<stdlib.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

realpath(STR1, STR2)    #Pour le chemin STR1 :
                        #  - suit tous les chemins symboliques
                        #  - enlève les "/" doublons
                        #  - s'il s'agit d'un chemin relatif, en fait un chemin
                        #    absolu
                        #et stocke le résultat dans STR2
                    ----| Renvoie STR2, ou NULL si erreur. Si STR2 est NULL,
                        | alors STR2 n'est pas utilisé, et le STR renvoyé sera
                        | automatiquement dynamiquement alloué
                        | Par ailleurs, si l'un des chemins précisé n'existe pas
                        | NULL est renvoyé et le premier répertoire dans STR1
                        | posant problème est stocké (son chemin absolu) dans
                        | STR2
HEADER ==>              #<stdlib.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

canonicalize_file_name  # 
(STR)                   #Equivaut à realpath(STR, NULL)
