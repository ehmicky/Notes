
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   COMMUNICATION_INTERPROCESS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

HEADER ==>              #<unistd.h>
pipe(INT_ARR)           #INT_ARR est une ARR de dimension 2. Crée une anonymous
                        #pipe, et associe deux file descriptors vers elle :
                        #  - un en lecture seule : INT_ARR[0]
                        #  - un en lecture/écriture : INT_ARR[1] (mais devrait
                        #    être utilisé seulement pour l'écriture)
                        #La pipe peut être utilisée autant de fois que l'on veut
                        #du moment que l'on garde le file descriptor.
                        #Devrait être utilisé avant un fork(). Ainsi :
                        #  - le parent process écrit dans INT_ARR[1]
                        #  - l'enfant lit dans INT_ARR[0] ce que son parent lui
                        #    écrit.
                        #Il est possible aussi qu'il y ait deux enfants d'un
                        #même process parent (siblings donc) qui communiquent
                        #entre eux ainsi aussi.
                        #On peut même aller plus loin en redirigeant les stdin 
                        #et stdout des process concernés vers INT_ARR[0] et [1]
                        #Ecrire dans INT_ARR[1] n'attend pas que quelqu'un lise
                        #la pipe : les data sont sauvegardées en attente d'une
                        #lecture.
                        #Par contre, lire dans INT_ARR[0] attend que des data
                        #se trouvent dans la pipe, avant de poursuivre.
                    ----| Renvoie 0 si succès, -1 sinon.
HEADER ==>              #<stdio.h>

MACROS A DEFINIR ==>    #_POSIX_C_SOURCE 2

popen(STR1, STR2)       #Crée un process enfant via un fork() suivi de
                        #system(STR1). L'enfant exécute donc STR1 mais, de plus,
                        #une anonymous pipe est créée, et le stdin (si STR2 est 
                        #"w") ou le stdout (si STR2 est "r") du process enfant 
                        #est redirigé vers cette pipe. 
                    ----| La pipe est renvoyée sous forme de FILE_ADR. Ainsi, si
                        | STR2 est :
                        |  - "w", écrire vers FILE, écrira vers le stdin du
                        |    process enfant.
                        |  - "r", lire FILE, lira le stdout du process enfant.
                        | Le process enfant est donc seulement utilisable via la
                        | pipe renvoyée.
                        | FILE est full-buffered.
                        | Renvoie NULL si erreur.
                        | La pipe doit être fermée avec pclose()
pclose(FILE_ADR)        #Ferme un FILE ouvert avec popen(), mais attends qu'il
                        #termine avant, en exécutant un wait4()
                    ----| Renvoie le code d'exit de wait4() (ne comprends pas
                        | trop pourquoi c'est 0 parfois, ou le PID sinon).
                        | Dans tous les cas, renvoie -1 si erreur.

<sys/types.h>, <sys/stat.h>
mkfifo(STR, MODE_T_VAL) #Crée une named pipe (FIFO) au chemin STR, avec les
                        #permissions MODE_T_VAL (S_* flags or'd)
                        #Une FIFO doit toujours être ouverte en lecture/écriture
                    ----| Renvoie 0 si succès, -1 sinon
