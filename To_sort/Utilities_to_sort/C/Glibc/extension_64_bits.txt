
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   EXTENSION_64_BITS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

EXTENSION 64 BITS ==>   #Tous ces fichiers ont en commun d'utiliser des types
                        #plus long afin de permettre de manipuler des fichiers
                        #dont la taille est > 2GB.
                        #Sinon, ils ont le même fonctionnement que leur
                        #contrepartie sans le "64"
                        define _FILE_OFFSET_BITS 64 fait que leur version 
                        #sans le suffixe "64" pointe vers eux

HEADER ==>              #<stdio.h>
off64_t                 #Souvent ULONG_LONG_INT (alors qu'off_t est souvent
                        #ULONG_INT)
fpos64_t                #

fopen64(STR1, STR2)     #Utilise des off64_t
freopen64(STR1, STR2,   #Utilise des off64_t
FILE_ADR)               #
ftello64(FILE_ADR)      #Renvoie un off64_t
fseeko64(FILE_ADR,      #
OFF64_T_VAL, INT_VAL)   #Utilise un off64_t
fgetpos64(FILE_ADR,     #
FPOS64_T_ADR)           #Utilise un fpos64_t
fsetpos64(FILE_ADR,     #
FPOS64_T_ADR)           #Utilise un fpos64_t
tmpfile64(void)         #Utilise un off64_t
HEADER ==>              #<unistd.h>

MACROS A DEFINIR ==>    #_XOPEN_SOURCE 500

pread64(INT_VAL,        #
VOID_ADR, SIZE_T_VAL,
OFF64_T_VAL)            #Utilise un off64_t
pwrite64(INT_VAL,       #
VOID_ADR, SIZE_T_VAL,
OFF64_T_VAL)            #Utilise un off64_t

HEADER ==>              #<sys/stat.h>
open64(VOID_ADR, INT_VAL#
[, INT_VAL2])           #Utilise des off64_t
creat64(VOID_ADR,       #
INT_VAL2)               #Utilise des off64_t
HEADER ==>              #<unistd.h>
lseek64(INT_VAL,        #
OFF64_T_VAL, INT_VAL2)  #Utilise des off64_t

HEADER ==>              #<sys/types.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

truncate64(STR,         #
OFF64_T_VAL)            #Utilise un off64_t

HEADER ==>              #<dirent.h>
struct dirent64         #Comme dirent, mais certains membres ont potentiellement
                        #plus d'espace, comme d_ino et d_off, qui passent
                        #souvent d'un ULONG_INT vers un ULONG_LONG_INT

HEADER ==>              #<dirent.h>
readdir64(DIR_ADR)      #Renvoie une struct dirent64
versionsort64(ADR1,     #
ADR2)                   #Utilise des struct dirent64

HEADER ==>              #<dirent.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE / _SVID_SOURCE

scandir64(STR,          #
STKT_DIRENT64_ADR_ADR   
_ADR, FONC_ADR,         #
FONC2_ADR)              #Utilise des struct dirent64
alphasort64(ADR1, ADR2) #Utilise des struct dirent64

HEADER ==>              #<sys/stat.h>
ino64_t                 #Souvent ULONG_LONG_INT (alors qu'ino_t est ULONG_INT)
blkcnt64_t              #Souvent ULONG_LONG_INT (alors que blkcnt_t est 
                        #ULONG_INT)

struct stat64           #Comme struct stat, sauf pour ces trois membres :
STK_STAT64_VAR.st_ino   #Utilise un ino64_t
STK_STAT64_VAR.st_size  #Utilise un off64_t
STK_STAT64_VAR.st_blocks#Utilise un blkcnt64_t

stat64(STR,             #
STKT_STAT64_ADR)        #Utilise un struct stat64
fstat64(INT_VAL,        #
STKT_STAT64_ADR)        #Utilise un struct stat64
HEADER ==>              #<sys/stat.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

lstat64(STR,            #
STKT_STAT64_ADR)        #Utilise un struct stat64
