
                                  ┏━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   ENCODAGE_CRYPTO   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━┛

HEADER ==>              #<unistd.h>
MACROS A DEFINIR ==>    #_XOPEN_SOURCE
LIBRARY ==>             #-lcrypt

crypt(STR1, STR2)       #Encrypte STR1 selon STR2. STR2 peut suivre l'encodage :
                        #  - MD5 : il doit alors s'agir d'une STR commençant par
                        #          "$1$", suivie de 8 caractères, suivis de "$"
                        #  - DES : il doit s'agit de 2 caractères [./[:alnum:]]
                        #Dans le cas de DES, seuls les 8 premiers caractères de
                        #STR1 sont pris en compte.
                    ----| Renvoie la version encryptée de STR1, sous forme de 
                        | STR. Si l'encodage utilisé est :
                        |  - MD5 : il s'agit de STR2, suivi de 22 [:alnum:]
                        |  - DES : il s'agit de STR2, suivi de 11 [./[:alnum:]]
                        | Préférer MD5. Un même appel de crypt() avec les mêmes
                        | arguments donne le même résultat, ce qui permet que
                        | le résultat de crypt() soit conservé pour vérifier un
                        | password STR1 (STR2 étant deviné grâce au résultat
                        | conservé) en le comparant au résultat conservé.

HEADER ==>              #<unistd.h>
getpass(STR)            #Imprime STR, puis lit sur /dev/tty (ou stdin si le
                        #process n'est pas associé à un terminal) les prochains
                        #caractères jusqu'à le première newline (non inclus),
                    ----| et renvoie ces derniers sous forme de STR. De plus :
                        |   - Les buffers sont vidés avant et après.
                        |   - Les characters INTR, STOP et SUPR (^C, ^D et ^Z) 
                        |     sont disabled.
                        |   - Les caractères tapés ne sont pas imprimés en echo
                        |     sur le terminal
                        | Obsolète et risque de buffer overflow. A éviter.

HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

strfry(STR)             #Mélange les octets (sauf le '\0') de STR de manière
                        #pseudo-aléatoire.
                    ----| Renvoie STR
memfrob(ADR, SIZE_T_VAL)#Fait un xor binaire 00101010 sur chaque octet de la
                        #suite de SIZE_T_VAL octets depuis ADR. Il s'agit juste
                        #d'un cache simpliste, pas d'une véritable chiffrement
                    ----| Renvoie ADR

HEADER ==>              #<stdlib.h>

MACROS A DEFINIR ==>    #_SVID_SOURCE

l64a(LONG_INT_VAL)      # Renvoie LONG_INT_VAL encrypté, de sorte à renvoyer un
                        | pointeur vers un CHAR imprimable. Sert à convertir,
                        | octet par octet, un stream devant passer sur un 
                        | support de reconnaissant que les caractères 
                        | imprimables (par exemple mails). Préférer l'encodage
                        | MIME pour cela.
                        | LONG_INT_VAL est lu comme un unsigned LONG_INT_VAL
                        | octal, selon cette table :
                        |
                        |      0 1 2 3 4 5 6 7
                        |   
                        |   0  . / 0 1 2 3 4 5
                        |   1  6 7 8 9 A B C D
                        |   2  E F G H I J K L
                        |   3  M N O P Q R S T
                        |   4  U V W X Y Z a b
                        |   5  c d e f g h i j
                        |   6  k l m n o p q r
                        |   7  s t u v w x y z 
                        | 
                        | où la colonne du haut est les unités (combinée à 
                        | chaque octaine), et celle de gauche les octaines 
                        | (chaque octaine produisant un caractère imprimable)
                        | Le nombre octal est écrit sous sa forme la plus courte
                        | sauf si < 10, sera alors écrit 06, 05, ... avant
                        | d'être converti. Si la première octaine est 0, et les
                        | unités 0 aussi, le caractère est " " et non "." :
a64l(CHAR_VAL)          # Fait l'inverse, et renvoie un LONG_INT_VAL
