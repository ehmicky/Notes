
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   STRINGS   ┃
                                  ┗━━━━━━━━━━━━━┛

HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

strdup(STR)             #Alloue strlen(STR) + 1 octets à STR via malloc(), et
                        | renvoie un pointeur vers le STR ainsi alloué, ou NULL
                        | si l'allocation a échoué
HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

strndup(STR, SIZE_T_VAL)#Comme strdup(), mais ne copie que les SIZE_T_VAL 
                        #premiers octets de STR. Si STR est tronqué, un '\0' est
                        #ajouté
strdupa(STR)            #Comme strdup(), mais utilise alloca() et non malloc()
                        #(ne pas utiliser donc)
strndupa(STR,           #Comme strndup(), mais utilise alloca() et non malloc()
SIZE_T_VAL)             #(ne pas utiliser donc)

stpcpy(STR1, STR2)      #Comme strcpy(), mais retourne non pas STR1, mais STR1 +
                        #strlen(STR2) (pointe donc vers le nouveau '\0' de STR1)
stpncpy(STR1, STR2,     #Comme strncpy(), mais retourne non pas STR1, mais STR1
SIZE_T_VAL)             # + SIZE_T_VAL si la copie est tronquée, vers le '\0'
                        #final de STR1 sinon.
mempcpy(ADR1, ADR2,     #Equivaut à memcpy(), mais retourne ADR1 + SIZE_T_VAL
SIZE_T_VAL)             #plutôt qu'ADR1
HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE, _SVID_SOURCE

memccpy(ADR1, ADR2,     #Comme memcpy(), sauf que la copie s'arrête quand le
INT_VAL, SIZE_T_VAL)    #caractère (char)INT_VAL est rencontré et copié avant
                        # que SIZE_T_VAL octets ne soient copiés.
                    ----| Renvoie ADR1 + nombres de caractères copiés, ou NULL
                        | si INT_VAL n'a pas été rencontré, et que donc
                        | SIZE_T_VAL octets ont été copiés.
HEADER ==>              #<strings.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

bcopy(ADR1, ADR2,       #Equivaut à memove(ADR2, ADR1, SIZE_T_VAL), sauf que
SIZE_T_VAL)             #rien n'est renvoyé. Déprécié.
bzero(ADR, SIZE_T_VAL)  #Equivaut à memset(ADR, '\0', SIZE_T_VAL), sauf que rien
                        #n'est renvoyé. Déprécié.

HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

strnlen(STR, SIZE_T_VAL)#Comme strlen(STR), mais s'arrête après SIZE_T_VAL, et
                        #renvoie donc SIZE_T_VAL si STR a eu une taille >= à
                        #SIZE_T_VAL (sans le '\0')

strcasestr(STR1, STR2)  # Comme strstr(), mais insensible à la casse
strchrnul(STR, INT_VAL)-# Comme strchr(), sauf que '\0' et non NULL est renvoyé
                        | si INT_VAL n'a pas été trouvé
HEADER ==>              #<strings.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

index(STR, INT_VAL)     #Alias, déprécié, de strchr()
rindex(STR, INT_VAL)    #Alias, déprécié, de strrchr()
HEADER ==>              #<string.h>

MACROS A DEFINIR ==>    #_GNU_SOURCE

memrchr(ADR, INT_VAL,   # Comme memchr(), sauf que la recherche est effectuée à 
SIZE_T_VAL)         ----| l'envers, depuis la fin
memmem(ADR1, SIZ_T_VAL1,#Comme memchr(), sauf que recherche une occurence des
ADR2, SIZE_T_VAL2)      #SIZE_T_VAL2 premiers octets de SIZE_T_VAL2 plutôt qu'un
                        #INT_VAL.
rawmemchr(ADR, INT_VAL) #Comme memchr(), mais ne spécifie pas la taille
                        #maximale de la recherche (continue de chercher jusqu'à
                        #en trouver un). Plus performant, mais devrait être sûr
                        #de trouver INT_VAL avant de sortir des limites
                        #entraînant un segfault.
                    ----| Le résultat est indéfini si INT_VAL n'est jamais 
                        | trouvé

strverscmp(STR1, STR2)  #Agit comme strcmp(STR1, STR2) ; cependant, dès que deux
                        #chiffres doivent être comparés, les chiffres qui les
                        #suivent sont pris en compte dans la comparaison ( = le
                        #nombre entier), et la comparaison est numérique, pas
                        #ASCII. A préférer pour les comparaisons de noms de
                        #fichier
HEADER ==>              #<strings.h>

MACROS A DEFINIR ==>    #_BSD_SOURCE

strcasecmp(STR1, STR2)  #Equivaut à strcmp(), mais insensible à la casse
strncasecmp(STR1, STR2) #Equivaut à strncmp(), mais insensible à la casse
bcmp(ADR1, ADR2,        #Equivaut à memcmp(), sauf que != 0 est retourné en cas
SIZE_T_VAL)             #de non-égalité (et non < 0 et > 0 suivant le fait qu'il
                        #s'agisse de supériorité ou d'infériorité). Déprécié

strsep(STR1_ADR, STR2)  #Supprime tout ce qui précède la première occurence de
                        #STR2 dans STR1 (dont STR2). STR1 devient une null
                        #string si STR2 n'est pas trouvé
                    ----| Renvoie le morceau de STR1 (sans STR2) qui a été 
                        | tronqué, ou NULL si STR2 n'a pas été trouvé
