            
   STRING   
            

HEADER ==>              #<string>

INDEXS ==>              #Les indexs commencent à 0.

string                  #Objet contenant une chaîne de caractères. Ne pas
                        #confondre STRING qui est la classe string en C++ et
                        #STR, qui est une C-String. Une STRING peut contenir des
                        #'\0' contrairement à une C-String, et ne peut pas avoir
                        #de buffer overflow (sa taille est gérée 
                        #automatiquement)
                        #Il s'agit en fait d'un typedef pour basic_string <char>

...::size_type          #size_t
...::difference_type    #ptrdiff_t
...::value_type         #char
...::reference          #char&
...::const_reference    #char const&

string()                #Renvoie une STRING vide.
string(STRING)          #Renvoie une copie de STRING.
string(STRING,          #Renvoie une copie de STRING depuis son caractère numéro
SIZE_T_VAL)             #SIZE_T_VAL, sous forme de STRING.
string(STRING,          #Renvoie une copie des SIZE_T_VAL2 premiers caractères 
SIZE_T_VAL1,            #(au plus) de STRING, depuis son caractère numéro 
SIZE_T_VAL2)            #SIZE_T_VAL1, sous forme de STRING. Si SIZ_T_VAL2 est
                        #out of range, lance une exception out_of_range
string(STR)             #Renvoie une copie de STR.
string(STR, SIZE_T_VAL) #Renvoie une copie des SIZE_T_VAL premiers caractères 
                        #(au plus) de STR, sous forme de STRING.
string(SIZE_T_VAL,      #Renvoie une STRING composée de SIZE_T_VAL CHAR_VAL à la
CHAR_VAL)               #suite.
string                  #Renvoie une STRING composée des éléments allant de 
(TOU_CONT_INPT_ITVR1,   #TOU_CONT_INPUT_ITVR1 (inclus) à TOU_CONT_INPUT_ITVR2 
TOU_CONT_INPT_ITVR2)    #(exclus). Voir les containers pour la signification de 
                        #"TOU_CONT". Les éléments du container CONT sont 
                        #interprétés comme des CHAR_VAL
ALLOCATOR ==>           #Le dernier argument peut toujours être un ALLOCATOR
                        #optionnel, qui peut être renvoyé via 
                        #STRING.get_allocator()

STRING = STRING2        
STRING = STR            #STRING2, STR ou CHAR_VAL est affecté à STRING, et
STRING = CHAR_VAL       #STRING est renvoyé.
STRING.assign(ARGUMENTS)#Equivaut à STRING = string(ARGUMENTS)

STRING.npos             #Indique la plus grande valeur possible d'un size_t.
string::npos            #Comme size_t est unsigned, elle est alors définie sur
                        #-1, ce qui donne en unsigned la plus grande valeur.
                        #Elle a trois fonctions :
                        #  - indique "as many as possible"
                        #  - dans une opération ne pouvant pas être out of range
                        #    est utilisé pour indiquer la fin d'une string
                        #  - est utilisée comme return value pour indiquer une
                        #    erreur
string::[const_]iterator#Classe ITRTR associée aux STRING. A initialisé avec
                        #STRING.begin(), etc.
                        #Respecte RandomAccessIt.
string::
[const_]reverse_iterator#Même chose mais pour rbegin() et rend()

STRING.begin()          #
STRING.end()            #
STRING.rbegin()         #
STRING.rend()           #Comme pour les containers, mais ici avec des STRING

STRING                  #Renvoie la chaîne de caractères contenue dans STRING,
                        #sous forme de STRING.
STRING.data()           #Quasiment équivalent, sauf que la valeur renvoyée ne
                        #devrait pas être modifiée.
STRING.c_str()          #Renvoie la chaîne de caractères contenue dans STRING,
                        #sous forme de STR. Ne devrait pas être modifiée. 
                        #Utiliser strcpy()-like fonctions pour la mettre dans
                        #une STR, plutôt que STR = STRING.c_str.
STRING[SIZE_T_VAL]      #Renvoie la référence (peut donc être une lvalue) au 
                        #caractère numéro SIZE_T_VAL de STRING. Si SIZE_T_VAL
                        #est out of range, renvoie une référence malgré le
                        #buffer overflow. Préférer STRING.at()
STRING.at(SIZE_T_VAL)   #Comme STRING[SIZE_T_VAL], mais lance une exception
                        #out_of_range si SIZE_T_VAL > STRING.size()

STRING.size()           #Renvoie le nombre de caractères de STRING, sous forme
STRING.length()         #de SIZE_T_VAL.
STRING.capacity()       #Nombre d'octets alloués à STRING, sous forme SIZE_T_VAL
                        #Est >= STRING.size().
                        #Est automatiquement augmenté si le contenu de STRING
                        #augmente.
STRING.max_size()       #Nombre d'octets maximum pouvant être alloués à STRING,
                        #sous forme de SIZE_T_VAL.
                        #Une exception length_error est lancée si ces fonctions
                        #utilisent une taille supérieure à STRING.max_size() sur
                        #une STRING :
                        #  - STRING.resize()
                        #  - STRING.reserve()
STRING.empty()          #Retourne true si STRING est une null-string,
                        #c'est-à-dire si STRING.size() == 0, ou false sinon.

STRING.resize(SIZE_T_VAL#Change la taille de STRING. CHAR_VAL est '\0' par 
[, CHAR_VAL])           #défaut.
                        #Si SIZE_T_VAL < STRING.size(), STRING est tronqué (la
                        #mémoire allouée demeure identique).
                        #Si SIZE_T_VAL > STRING.size(), des CHAR_VAL sont
                        #appended, et la mémoire alloué est éventuellement
                        #augmentée.
STRING.reserve          #Si STRING.size() est < SIZE_T_VAL, alors la mémoire
([SIZE_T_VAL])          #allouée à STRING devient au moins SIZE_T_VAL (par 
                        #défaut 0). "Au moins" car cela peut être légèrement
                        #supérieur pour arrondir à une taille préférée pour le
                        #buffer.
STRING.clear()          #Equivaut à STRING = ""

STRING += STRING2       #Equivaut à STRING = STRING + STRING2
STRING += STR           #Equivaut à STRING = STRING + STR
STRING += CHAR_VAL      
STRING.push_back        #
(CHAR_VAL)              #Equivaut à STRING = STRING + CHAR_VAL
STRING.append(ARGUMENTS)#Equivaut à STRING = STRING + string(ARGUMENTS)
STRING.insert(SIZ_T_VAL,#Insert string(ARGUMENTS) dans STRING juste après son
ARGUMENTS)              #élément numéro SIZE_T_VAL. Cependant ARGUMENTS ne peut
                        #pas contenir d'ITRTR.
                        #Renvoie le nouveau STRING.
STRING.insert(          #Insert string(SIZE_T_VAL, CHAR_VAL) dans STRING à
TOU_CONT_INPUT_ITVR,    #l'endroit TOU_CONT_INPUT_ITVR. SIZE_T_VAL est par
[SIZE_T_VAL], CHAR_VAL) #défaut 1.
TOU_CONT.insert(        #
TOU_CONT_INPUT_ITVR,    #
TOU_CONT_INPUT_ITVR1,   #Même chose, mais avec string(TOU_CONT_INPUT_ITVR1,
TOU_CONT_INPUT_ITVR2)   #TOU_CONT_INPUT_ITVR2)

STRING.erase            #Supprime dans STRING les SIZE_T_VAL2 (par défaut 
([SIZE_T_VAL1],         #STRING.fpos) lettres qui suivent la lettre numéro 
[SIZE_T_VAL2])          #SIZE_T_VAL1 (par défaut 0). Si SIZE_T_VAL2 est trop 
                        #grand, ce n'est pas un problème. Renvoie le nouveau
                        #STRING.
STRING.erase            #Supprime le caractère se trouvant à l'endroit
(STRING_ITRTR_VAR)      #STRING_ITRTR_VAR.
STRING.erase            #Supprime tous les caractères se trouvant entre
(STRING_ITRTR_VAR1,     #STRING_ITRTR_VAR1 (inclus) et STRING_ITRTR_VAR2
STRING_ITRTR_VAR2)      #(exclus)
STRING.replace          #Equivaut à STRING.erase(SIZE_T_VAL1, SIZE_T_VAL2) suivi
(SIZE_T_VAL1,           #de STRING.insert(SIZE_T_VAL1, ARGUMENTS), sauf que
SIZE_T_VAL2, ARGUMENTS) #ARGUMENTS ne peut pas être la forme STRING, SIZE_T_VAL.
STRING.replace          #Equivaut à STRING.erase(STRING_ITRTR_VAR1,
(STRING_ITRTR_VAR1,     #STRING_ITRTR_VAR2), suivi d'une insertion de
STRING_ITRTR_VAR2,      #string(ARGUMENTS) à l'endroit STRING_INPT_ITRTR_VAR1
ARGUMENTS)              #(sauf que ARGUMENTS ne peut pas être STRING suivi de un
                        #ou deux arguments)
STRING.swap(STRING2)    #Swap STRING et STRING2 : STRING devient STRING2 et
                        #STRING2 devient STRING.
                        #Existe aussi en global setter :
                        #  - swap(STRING, STRING2)

STRING.substr           #
(SIZE_T_VAL1,
SIZE_T_VAL2)            #Renvoie string(STRING, SIZE_T_VAL1, SIZE_T_VAL2)

STRING.copy(STR,        #Fait que string(STRING, SIZE_T_VAL2, SIZE_T_VAL1) est 
SIZE_T_VAL1, SIZ_T_VAL2)#copié dans STR depuis son début. STR n'est pas écrasé :
                        #aucun '\0' n'est donc rajouté à la fin des octets
                        #copiés.
                        #Renvoie le nombre d'octets effectivement copiés.

STRING.find(STRING2,    #
[SIZE_T_VAL],           #Renvoie l'index - 1 de la première occurrence de 
[SIZE_T_VAL2])          #STRING2, STR ou CHAR_VAL (entier) dans STRING à partir 
STRING.find(STR,        #de sa lettre numéro SIZE_T_VAL (par défaut 0), ou 
[SIZE_T_VAL])           #STRING.npos si rien n'a été trouvé.
STRING.find(CHAR_VAL,   #Si SIZE_T_VAL2 est spécifié, ne recherche que les 
[SIZE_T_VAL])           #SIZE_T_VAL2 premiers octets de STRING2, STR ou CHAR_VAL
STRING.rfind(...)       #Comme STRING.find(), mais renvoie la dernière 
                        #occurence, et non la première.
STRING.find_first_of    #Comme STRING.find(), mais recherche la première 
(...)                   #occurrence de n'importe quelle lettre et non de 
                        #STRING2, STR ou CHAR_VAL entier.
STRING.find_last_of(...)#Comme STRING.find_first_of(), mais recherche la 
                        #dernière occurrence et non la première.
STRING.find_first_not_of#Comme STRING.find_first_of(), mais recherche la 
(...)                   #première occurrence de n'importe quelle lettre n'étant
                        #pas (et non étant) dans STRING2, STR ou CHAR_VAL.
STRING.find_last_not_of #Comme STRING.find_first_not_of(), mais recherche la 
(...)                   #dernière occurrence et non la première.

STRING.compare          #Compare SIZE_T_VAL2 (par défaut STRING.npos) octets de 
([SIZE_T_VAL1,          #STRING, à partir de sa lettre numéro SIZE_T_VAL1 (par 
SIZE_T_VAL2], STRING2   #défaut 0) avec SIZE_T_VAL4 (par défaut npos) octets de 
[[, SIZE_T_VAL3]        #STRING2 ou STR, à partir de leur lettre numéro
, SIZE_T_VAL4])         #SIZE_T_VAL3 (par défaut 0).
STRING.compare          #Notez l'ordre des arguments facultatifs. Par exemple,
([SIZE_T_VAL1,          #SIZE_T_VAL3 ne peut être spécifié que si SIZE_T_VAL4
SIZE_T_VAL2], STR       #l'est.
[[, SIZE_T_VAL3]        #Renvoie 0 si égalité, < 0 si STRING est inférieure,
, SIZE_T_VAL4])         #> 0 si STRING est supérieure.
                        #Lance un out_of_range exception si SIZE_T_VAL1 ou
                        #SIZE_T_VAL3 est out of range.

STRING + STRING
STRING + STR
STRING + CHAR_VAL
STR + STRING            #Retourne le concaténation des deux éléments, sous forme
CHAR_VAL + STRING       #de STRING.

STRING == STRING2
STRING == STR           #Renvoie true si les deux éléments ont le même contenu,
STR == STRING           #false sinon.
STRING != STRING2
etc.                    #Même chose, mais pour !=
STRING < STRING2
etc.                    #Même chose, mais pour <
STRING <= STRING2
etc.                    #Même chose, mais pour <=
STRING > STRING2
etc.                    #Même chose, mais pour >
STRING >= STRING2
etc.                    #Même chose, mais pour >=

                                  ┌─────────────────┐
                                  │   CHAR_TRAITS   │
                                  └─────────────────┘

char_traits <WVAL>      #Struct désignant les caractéristiques des éléments
                        #d'une STRING. Il y a deux spécialisations de cette
                        #struct : char_traits <char> et char_traits <wchar> qui
                        #sont implémentées avec des valeurs précises.
                        #Cela sert à l'instantiation de basic_string.
                        #Je mets pour les membres de char_traits décrits
                        #ci-dessous la valeur entre parenthèses pour mon système
                        #pour <char> puis <wchar_t>

char_traits<WVAL>::     #Type utilisé pour les caractères, sous forme de type
char_type               #fondamental (char, wchar_t). Exemple :
                        #  - char_traits<char>::char_type VAR;
                        #est équivalent à :
                        #  - char VAR;
char_traits<WVAL>::     #
int_type                #Type utilisé pour les nombres (int, wint_t)
char_traits<WVAL>::     #Type utilisé pour les offsets relatifs (streamoff, 
off_type                #streamoff)
char_traits<WVAL>::     #Type utilisé pour les offsets absolus (streampos,
pos_type                #streampos)
char_traits<WVAL>::     #Type utilisé pour les shift states (mbstate_t, 
state_type              #mbstate_t)

CHAR_T                  #Renverra dans ma documentation à char_traits<WVAL-P>::
                        #char_type, où WVAL-P est celui utilisé pour instantier
                        #CHAR_TRAITS si CHAR_TRAITS est dans l'expression.
INT_T                   #Même chose que CHAR_T, mais pour un int_type.
STR_T                   #Renverra dans ma documentation à char_traits<WVAL-P>::
                        #char_type*, etc.
                        #C'est-à-dire une STR ou WSTR donc en général

CHAR_TRAITS.to_char_type#
(INT_T_VAL)             #Renvoie (CHAR_T) INT_T_VAL.
CHAR_TRAITS.to_int_type #
(CHAR_T_VAL)            #Renvoie (INT_T) CHAR_T_VAL.

CHAR_TRAITS.eof()       #Renvoie l'EOF utilisé par CHAR_TRAITS (EOF, WEOF)
CHAR_TRAITS.not_eof     #Renvoie INT_T_VAL s'il est == CHAR_TRAITS.eof(), ou
(INT_T_VAL)             #!= INT_VAL sinon.

CHAR_TRAITS.eq          #
(CHR_T_VAL1, CHR_T_VAL2)#Equivaut à ( CHR_T_VAL1 == CHR_T_VAL2 )
CHAR_TRAITS.eq_int_type #
(INT_T_VAL1, INT_T_VAL2)#Equivaut à ( INT_T_VAL1 == INT_T_VAL2 )
CHAR_TRAITS.lt          #
(CHR_T_VAL1, CHR_T_VAL2)#Equivaut à ( CHR_T_VAL1 < CHR_T_VAL2 )
CHAR_TRAITS.compare     #Compare les SIZE_T_VAL premiers octets de STR_T_VAL1
(STR_T_VAL1, STR_T_VAL2,#à STR_T_VAL2, et renvoie 0, < 0 ou > 0 en fonction,
SIZE_T_VAL)             #comme strncmp()

CHAR_TRAITS.assign      #
(CHAR_T_VAR, CHAR_T_VAL)#Equivaut à CHAR_T_VAR = CHAR_T_VAL
CHAR_TRAITS.assign      #
(STR_T_VAR, SIZE_T_VAL, #Copie un flux de SIZE_T_VAL CHAR_T_VAL dans STR_T_VAR
CHAR_T_VAL)             #depuis son début, et renvoie le nouveau STR_T_VAR.
CHAR_TRAITS.copy        #Copie les SIZE_T_VAL premiers octets de STR_T_VAL dans
(STR_T_VAR, STR_T_VAL,  #STR_T_VAR à partir de son début, et renvoie le nouveau
SIZE_T_VAL)             #STR_T_VAR. STR_T_VAR et STR_T_VAL ne doivent pas
                        #overlap.
CHAR_TRAITS.move        #
(STR_T_VAR, STR_T_VAL,  #Comme CHAR_TRAITS.copy(), mais STR_T_VAR et STR_T_VAL
SIZE_T_VAL)             #peuvent overlap.

CHAR_TRAITS.find        #Renvoie STR_T_VAL tronqué à partir de son élément 
(STR_T_VAL, SIZE_T_VAL, #numéro SIZE_T_VAL, puis de sa première occurrence de
CHAR_T_VAL)             #CHAR_T_VAL (non incluse). Renvoie donc une null-string
                        #si CHAR_T_VAL n'a pas été trouvé

CHAR_TRAITS.length      #Renvoie le nombre d'éléments de STR_T_VAL, sans 
(STR_T_VAL)             #l'éventuel '\0' final

                                  ┌──────────────────┐
                                  │   BASIC_STRING   │
                                  └──────────────────┘

basic_string <WVAR      #Base classe des STRING. WVAR désigne l'élément de
[, WVAR2]>              #chaque lettre, WVAR2 ses traits (par défaut 
                        #char_traits <WVAR2>). Il existe deux spécialisations :
                        #une avec char pour WVAR (string), une avec wchar_t
                        #(wstring)
wstring                 #Typedef pour basic_string <wchar_t>. Peut donc utiliser
                        #les mêmes membres que string, mais en utilisant des
                        #WSTR et non des STR, et des WCHAR et non des CHAR
