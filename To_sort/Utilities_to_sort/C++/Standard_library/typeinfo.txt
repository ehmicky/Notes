
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   TYPEINFO   ┃
                                  ┗━━━━━━━━━━━━━━┛

HEADER ==>              #<typeinfo>

type_info               #Classe contenant des informations sur un type (dont
                        #classe). Ses constructors ne sont pas public : il ne
                        #peut être obtenu que via typeid.
                        #Cela permet de tester la classe d'un objet 
                        #polymorphique pendant le runtime, ce qui permet de 
                        #faire le boulot des type casters comme dynamic_cast.
                        #Non copiable.

TYPE_INFO.name()        #Renvoie le nom du type/classe, sous forme de STR. La
                        #STR retournée dépend de l'implémentation : chez moi, je
                        #n'ai que des abbréviations, les pointeurs sont précédés
                        #de "P", les fonctions de "F" (avec le type de leur
                        #arguments suivant), les classes d'un "6", etc.
TYPE_INFO == TYPE_INFO2
TYPE_INFO != TYPE_INFO2 #Tests d'égalité.
TYPE_INFO.before        #Renvoie true si TYPE_INFO est "avant" TYPE_INFO2 selon
(TYPE_INFO2)            #un ordre dépendant de l'implémentation.

typeid(VAL)             #Renvoie le type (une classe étant un type) de VAL, sous
                        #forme de TYPE_INFO_VAL
                        #A noter que :
                        #  - les typedefs sont suivis
                        #  - si VAL est un ADR initialisé de manière 
                        #    polymorphique avec un objet d'une classe abstraite
                        #    ou polymorphique, la classe la plus dérivée est
                        #    renvoyée
                        #Si VAL est une CLASS_ADR déférencée sous la forme
                        #*CLASS_ADR, d'une CLASS polymorphique ou abstraite, 
                        #mais initialisée avec NULL, une exception bad_typeid 
                        #est lancée.
                        #Je ne réussis à lance
typeid(TYPE)            #Renvoie TYPE (qui peut être une classe), sous forme de
                        #TYPE_INFO_VAL.

bad_typeid              #Exception, enfant d'exception, lancée par typeid s'il
                        #cherche à déréférencée un mauvais CLASS_ADR 
                        #polymorphique initialisé sur NULL
bad_cast                #Exception, enfant d'exception, lancée si dynamic_cast
                        #cherche à transtyper vers une autre CLASS2& (référence)
                        #une CLASS_VAR.
