
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   EXCEPTION   ┃
                                  ┗━━━━━━━━━━━━━━━┛

HEADER ==>              #<exception>

exception               #Classe pour les exceptions. La plupart des exceptions
                        #dont des objets d'enfants de cette classe. Elle a un
                        #constructor par défaut qui ne fait rien, un copy
                        #constructor et un copy operator.
                        #Ses constructors, destructors et toutes ses méthodes ne
                        #peuvent et ne doivent pas jeter d'exceptions.

EXCEPTION.what()        #Renvoie une STR décrivant l'exception.
                        #Virtual fonction, doit être redéfinie.

unexpected_handler      #Type des FONC_ADR utilisées par set_unexpected() : il
                        #s'agit d'un pointeur vers un VOID_FONC_VAR ne prenant
                        #pas d'argument. 
terminate_handler       #Type des FONC_ADR utilisées par set_terminate() : il
                        #s'agit d'un pointeur vers un VOID_FONC_VAR ne prenant
                        #pas d'argument.

set_terminate(FONC_ADR) #Fait que FONC_ADR (qui doit être de type 
                        #terminate_handler) est déclenché automatiquement si
                        #une exception est lancée et parcourt tout le programme
                        #sans être attrapée par un bloc catch (pas même un
                        #catch (...))
set_unexpected(FONC_ADR)#Fait que FONC_ADR (qui doit être de type 
                        #unexpected_handler) est déclenché automatiquement si
                        #une fonction est spécifiée avec un throw( ) dans sa
                        #déclaration, par exemple :
                        #  - TYPE FONC_VAR throw(EXCEPTION...) { ... }
                        #Et que la fonction lance une exception non spécifiée
                        #dans les exceptions précisées dans throw(EXCEPTION...)
                        #Si un throw sans argument est relancé dans cette
                        #fonction, et que la fonction ayant lancé le premier
                        #throw accepte de lancer des bad_exception dans son
                        #throw(EXCEPTION...), alors une bad_exception est thrown

bad_exception           #Exception, enfant d'exception, lancée par 
                        #set_unexpected() dans certaines conditions (voir cette
                        #fonction)

uncaught_exception()    #A mettre dans un destructor. Les destructors d'une
                        #CLASS_VAR déclarée dans le même bloc try qu'un throw
                        #lancé, sont exécutées que ce throw soit intercepté ou
                        #non.
                        #Cette fonction renvoie true si le destructor est appelé
                        #à cause d'un throw, false sinon.

HEADER ==>              #<stdexcept>

logic_error             #Base classe, enfant d'exception, spécifiant une
                        #erreur intervenant lors du compile-time (en théorie, 
                        #mais peut survenir runtime)

LOGIC_ERROR(STRING)     #Instantie un LOGIC_ERROR, et fait que STRING devient ce
                        #qu'il renvoie avec what()

domain_error            #Exception, enfant de logic_error, spécifiant une domain
                        #error, par exemple une racine carré sur un nombre
                        #négatif, ou une division par zero.
invalid_argument        #Exception, enfant de logic_error, spécifiant un 
                        #argument mauvais. Lancé par exemple par le constructor
                        #de bitset si on lui donne une string avec autre chose
                        #que des 0 et des 1
length_error            #Exception, enfant de logic_error, spécifiant une
                        #tentative d'aller au-delà des limites d'une longueur,
                        #par exemple resize un container au-delà de sa max_size.
out_of_range            #Exception, enfant de logic_error, spécifiant une
                        #tentative d'accès au-delà d'un range, par exemple un
                        #élément au-delà du range d'un container.

runtime_error           #Base classe, enfant d'exception, spécifiant une
                        #erreur intervenant lors du runtime.

RUNTIME_ERROR(STRING)   #Instantie un RUNTIME_ERROR, et fait que STRING devient 
                        #ce qu'il renvoie avec what()

range_error             #Exception, enfant de runtime_error, spécifiant une
                        #erreur de range lors du runtime.
overflow_error          #Exception, enfant de runtime_error, spécifiant un
                        #overflow.
underflow_error         #Exception, enfant de runtime_error, spécifiant un
                        #underflow.
