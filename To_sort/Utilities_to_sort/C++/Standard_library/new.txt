
                                  ┏━━━━━━━━━┓
                                  ┃   NEW   ┃
                                  ┗━━━━━━━━━┛

HEADER ==>              #<new>

nothrow_t               #Classe vide et utilisée pour instantier des objets
                        #utilisés par new.

nothrow                 #Instantiation de nothrow_t provided afin de l'utiliser
                        #directement avec new.

new (NOTHROW_T) TYPE    #Comme new TYPE, sauf qu'une exception bad_alloc n'est
                        #pas lancée en cas de problème d'allocation mémoire,
                        #mais NULL est renvoyé.
                        #NOTHROW_T peut être directement std::nothrow.
new (ADR) TYPE          #Comme new TYPE, sauf que :
                        #  - le pointeur retourné est ADR et non un pointeur
                        #    créé par new.
                        #  - l'espace n'est pas alloué automatiquement
                        #    Cependant, le constructor de TYPE (s'il s'agit 
                        #    d'une classe) a lieu.
                        #  - utile seulement si on veut qu'un pointeur (dont
                        #    pointeur de classe) soit placé exactement à 
                        #    l'adresse mémoire ADR, mais du coup très dangereux
                        #    car pas de check runtime.
                        #  - ne lance pas d'exceptions : si une exception est lancée, l'operator delete correspondant est
                        #    appelé.
                        #  - il faut appeler soi-même le destructor de manière explicite.
                        #new est dans le namespace global, pas std::
new (NOTHROW_T) TYPE
[TOUINT_VAL]
new (TYPE_ADR) TYPE     
[TOUINT_VAL]            #Même chose, mais pour un array de TYPE.

OVERLOADER L'OPERATOR   #L'overloadable operator new doit :
NEW ==>                 #  - renvoyer un VOID_ADR (un pointeur vers l'espace
                        #    alloué)
                        #  - prendre un SIZE_T_VAL en premier argument, qui sera
                        #    rempli automatiquement par sizeof(TYPE)
                        #  - être invoqué sous la forme :
                        #      - new TYPE
                        #    s'il ne prend qu'un argument, ou :
                        #      - new (...) TYPE
                        #    s'il prend plus d'un argument (le premier argument
                        #    sera toujours sizeof(TYPE)
                        #  - Il est possible de lui donner autant d'arguments 
                        #    que l'on veut.
                        #  - Il est conseillé de faire deux versions :
                        #     - une prenant un NOTHROW_T comme deuxième argument
                        #       afin de donner l'opportunité d'utiliser nothrow
                        #     - une normale.
                        #Ainsi l'on peut customiser l'allocation de mémoire
                        #effectuée par new sur une classe donnée par exemple :
                        #  - void* operator new(SIZE_T_VAL, STRING) {
                        #        cout << "Allocation..." << STRING << endl;
                        #        return calloc(1, SIZE_T_VAL);
                        #    }
                        #Tout fonctionne pareil pour l'overloadable operator 
                        #new[].
OVERLOADER L'OPERATOR   #L'overloadable operator delete doit :
DELETE ==>              #  - être de type void.
                        #  - prendre un VOID_ADR comme premier argument 
                        #    (l'adresse de TYPE)
                        #  - peut prendre autant d'arguments qu'il veut, et est
                        #    invoqué sous la forme delete TYPE ou delete (...)
                        #    TYPE, comme pour new.
                        #Même chose pour delete[]

new_handler             #Type de VOID_FONC_ADR, ne prenant pas d'argument, 
                        #utilisé par set_new_handler()

set_new_handler         #Fait que si new ne parvient pas à allouer de la mémoire
(NEW_HANDLER)           #plutôt de lancer une exception bad_alloc (défaut),
                        #NEW_HANDLER est appelé, puis new est invoqué à défaut.
                        #Si NEW_HANDLER ne parvient pas à allouer de la mémoire
                        #ou à arranger la situation, il serait d'usage qu'il
                        #lance lui-même une exception bad_alloc ou interrompe 
                        #le programme.
                        #Ne semble fonctionner que sur l'operator new par défaut
                        #Renvoie l'ancien NEW_HANDLER, ou NULL s'il s'agit du
                        #premier appel à set_new_handler()

bad_alloc               #Exception lancée quand new ne parvient pas à allouer de
                        #la mémoire (enfant d'exception).
