
                                  ┏━━━━━━━━━━━┓
                                  ┃   TIMER   ┃
                                  ┗━━━━━━━━━━━┛

HEADER ==>              #<boost/timer.hpp>

timer                   #Classe agissant comme un chronomètre. Compte le temps à
                        #partir de son instantiation. De même que 
                        #progress_timer, il vaut mieux préférer std::clock(),
                        #plus sûr.

TIMER()                 #Instantiation.

TIMER.elapsed()         #Renvoie le nombre de secondes écoulées.

TIMER.restart()         #Remet le chrono à zero

TIMER.elapsed_min()     #Renvoie le plus petit interval de temps mesurable, en
                        #secondes.
TIMER.elapsed_max()     #Renvoie le plus grand interval de temps mesurable,
                        #avant que ça retombe à zéro (pour moi : 35 minutes)

HEADER ==>              #<boost/progress.hpp>

progress_timer          #Classe agissant comme un chronomètre. Compte le temps à
                        #partir de son instantiation, et imprime le temps écoulé
                        #lors de sa destruction sur un OSTREAM, sous la forme
                        #par exemple "3.14 s\n"

PROGRESS_TIMER          #Instantie un PROGRESS_TIMER, lié à OSTREAM (par défaut
([OSTREAM])             #std::cout). Une exception std::bad_alloc peut être
                        #lancée.

progress_display        #Classe affichant une progress bar (non GUI).

PROGRESS_DISPLAY        #Instantiation : ULONG_VAL est la limite à atteindre,
(ULONG_VAL[, OSTREAM    #une fois atteinte, la progress bar cesse et est 
[, STR1[, STR2          #complète. Elle est imprimée sur OSTREAM (par défaut
[, STR3]]]])            #std::cout). STR1 est affichée au début de la progress
                        #bar (par défaut "\n"), STR2 au milieu (par défaut ""),
                        #STR3 à la fin (par défaut "").
                        #La progress bar est imprimée.
                        #Exemple d'utilisation :
                        #  - for ( ; PROGRESS_DISPLAY.count() < LIMITE ; 
                        #    ++PROGRESS_DISPLAY ) { }

++PROGRESS_DISPLAY      #Ajoute 1 à la progress bar (et MàJ éventuellement son
                        #affichage).
PROGRESS_DISPLAY +=
ULONG_VAL               #Incrémente de ULONG_VAL la progress bar
PROGRESS_DISPLAY.restart#Résintancie PROGRESS_DISPLAY, en la faisant recommencer
(ULONG_VAL)             #depuis le début, et avec une nouvelle limite ULONG_VAL.
                        #Une nouvelle progress bar est imprimée.

PROGRESS_DISPLAY.       
expected_count()        #Renvoie la limite à atteindre.
PROGRESS_DISPLAY.count()#Renvoie le compte actuel.
