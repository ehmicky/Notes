
                                  ┏━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   DYNAMIC_BITSET   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━┛

HEADER ==>              #<boost/dynamic_bitset.h>

dynamic_bitset<[WVAR1   #Classe désignant un bitset comme std::bitset.
[, WVAR2]]>             #Avantages par rapport à bitset :
                        #  - taille dynamique.
                        #  - plus de membres.
                        #WVAR1 désigne la block_type (cf ci-dessous), WVAR2
                        #désigne l'allocator_type (par défaut std::Allocator())
                        #Comme std::bitset, n'est pas un container, et ne peut
                        #pas avoir d'itérators.
                        #Tous les membres de std::bitset sont les mêmes, sauf le
                        #template, les constructors, et l'absence d'un membre
                        #to_string().
                        #Les nouveaux membres sont ci-dessous.

EXCEPTIONS ==>          #std::alloc peut être jeté par de nombreux membres.
                        #Les exceptions out_of_range de std::bitset ne sont pas
                        #lancées, mais il y a des erreurs malgré tout.

dynamic_bitset<...>::   #Typedef depuis le type utilisé pour les blocks utilisés
block_type              #en interne par dynamic_bitset, par défaut ULONG_VAL.
dynamic_bitset<...>::   
allocator_type          #Typedef depuis le type utilisé pour l'allocator.

dynamic_bitset<...>::   #Nombre de bits contenus dans 
bits_per_block          #dynamic_bitset<...>::block_type (dépend de 
                        #l'architecture donc)

DYNAMIC_BITSET([WVAL2]) #Construit un dynamic_bitset de taille 0, avec 
                        #l'allocator WVAL2 (par défaut std::Allocator())
DYNAMIC_BITSET(SIZ_T_VAL#Construit un dynamic_bitset de taille SIZE_T_VAL,
[, ULONG_VAL[, WVAL2]]) #remplit avec ULONG_VAL convertie en binaire (qui peut 
                        #être décimal, octal ou hexadécimal) (par défaut 0), et 
                        #l'allocator WVAL2 (par défaut std::Allocator()). Si 
                        #SIZ_T_VAL n'est pas assez grand, ULONG_VAL est tronqué
DYNAMIC_BITSET(STRING   
[, SIZE_T_VAL           #Comme le constructor de std::bitset, sauf qu'il est
[, SIZ_T_VAL2[, WVL2]]])#possible d'ajouter un allocator WVAL2.
DYNAMIC_BITSET          
(INPT_ITVR1, INPT_ITVR2 #Equivaut à DYNAMIC_BITSET(WVAL2) suivi de
[, WVAL2])              #DYNAMIC_BITSET.append(INPT_ITVR1, INPT_ITVR2).

DYNAMIC_BITSET -=       
DYNAMIC_BITSET2         #Cf ci-dessus. Doivent être de la même taille.

DYNAMIC_BITSET - 
DYNAMIC_BITSET2         #Idem
DYNAMIC_BITSET <        
DYNAMIC_BITSET2
DYNAMIC_BITSET > 
DYNAMIC_BITSET2
DYNAMIC_BITSET <= 
DYNAMIC_BITSET2
DYNAMIC_BITSET >= 
DYNAMIC_BITSET2         #Test d'égalités. Doivent être de la même taille.

DYNAMIC_BITSET
[SIZE_T_VAL] |= BOOL_VAL
DYNAMIC_BITSET
[SIZE_T_VAL] &= BOOL_VAL
DYNAMIC_BITSET
[SIZE_T_VAL] ^= BOOL_VAL
DYNAMIC_BITSET          #Si VAL == 1, DYNAMIC_BITSET[SIZE_T_VAL] = 0, sinon
[SIZE_T_VAL] -= BOOL_VAL#rien ne se passe.

DYNAMIC_BITSET.         #Renvoie true si chaque bit activé dans DYNAMIC_BITSET
is_subset_of            #l'est aussi dans DYNAMIC_BITSET2.
(DYNAMIC_BITSET2)       #Les DYNAMIC_BITSET doivent avoir la même taille.
DYNAMIC_BITSET.
is_proper_subset_of     #Même chose, sauf que DYNAMIC_BITSET doit !=
(DYNAMIC_BITSET2)       #DYNAMIC_BITSET2.

DYNAMIC_BITSET.resize   #Change la taille de DYNAMIC_BITSET. S'il est agrandi,
(SIZE_T_VAL[, BOOL_VAL])#les bits ajoutés ont une valeur BOOL_VAL (par défaut 0)
DYNAMIC_BITSET.clear()  #Equivaut à resize(0).

DYNAMIC_BITSET.empty()  #Renvoie true si DYNAMIC_BITSET a une taille de 0.
DYNAMIC_BITSET.         
num_blocks()            #Renvoie le nombre de blocks utilisés par DYNAMIC_BITSET
DYNAMIC_BITSET.max_size #Renvoie la size() maximum d'un DYNAMIC_BITSET sur la
()                      #plateforme courante (pour moi, c'est UINTMAX_MAX)

DYNAMIC_BITSET.push_back#Rajoute BOOL_VAL à DYNAMIC_BITSET (most significant 
(BOOL_VAL)              #bit, à gauche donc), incrémentant sa taille de 1.
DYNAMIC_BITSET.append   #Rajoute WVAL1 (type block_type, converti en binaire 
(WVAL1)                 #donc) à DYNAMIC_BITSET (après le most significant bit),
                        #incrémentant sa taille de bits_per_block.
DYNAMIC_BITSET.append   #Les itérators désignent un range dont la value_type est
(INPT_ITVR1, INPT_ITVR2)#convertible en block_type. Effectue une série 
                        #d'append(WVAL1) sur chaque élément du range
from_block_range        #Le range est du même genre que pour append.
(DYNAMIC_BITSET,        #DYNAMIC_BITSET doit avoir une size() >= nombre de bits
INPT_ITVR1, INPT_ITVR2) #du range. Contrairement à append(), la size() n'est pas
                        #modifiée, car DYNAMIC_BITSET n'est pas incrémenté mais
                        #écrasé avec les data du range, qui sont copiées sur ses
                        #least significant bits.

to_string(DYNAMIC_BITST,#Copie DYNAMIC_BITSET sous forme de STRING avec des '0'
STRING)                 #et '1' dans STRING.
to_block_range          #Ecrit DYNAMIC_BITSET à partir de OUTPT_ITVR. OUTPT_ITVR
(DYNAMIC_BITSET,        #doit avoir une value_type convertible en block_type.
OUTPT_ITVR)             #Le range commençant à OUTPT_ITVR doit avoir la taille
                        #requise.

DYNAMIC_BITSET.         #Renvoie la position du premier bit égal à 1, en partant
find_first()            #du least significant bit (position 0), ou renvoie
                        #max_size() si aucun bit n'est égal à 1.
DYNAMIC_BITSET.find_next#Même chose, mais commence la recherche à partir du bit
(SIZE_T_VAL)            #à la position SIZE_T_VAL exclus (la position renvoyée 
                        #est pour autant toujours relative au least significant 
                        #bit, et non à celle de ce bit)

DYNAMIC_BITSET.swap     #
(DYNAMIC_BITSET2)

DYNAMIC_BITSET.
get_allocator()         #Renvoie l'allocator WVAL2.
