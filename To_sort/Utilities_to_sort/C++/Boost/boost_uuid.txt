
                                  ┏━━━━━━━━━━━━━━━━┓
                                  ┃   BOOST_UUID   ┃
                                  ┗━━━━━━━━━━━━━━━━┛

HEADER ==>              #<boost/uuid/uuid_generators.hpp>
NAMESPACE ==>           #Il s'agit de boost::uuids::

uuid                    #UUID.
                        #Utiliser le constructor ou générer avec l'un des 
                        #fonctors prévus pour.
                        #Est implémenté comme un ensemble de 16 octets 
                        #simplement (sizeof(uuid) == 16) => on peut le 
                        #transférer vers un std::vector pour manipuler les 
                        #octets séparément.
                        #Peut être utilisé avec boost::hash.
                        #Est Serializable avec boost::serialization
                        #(inclure <boost/uuid/uuid_serialize.hpp>)

UUID()                  #Construit un UUID aléatoire et unique, time-based.

UUID == UUID2
UUID != UUID2
UUID < UUID2
UUID > UUID2
UUID <= UUID2
UUID >= UUID2           #Test d'égalités.
UUID.is_nil()           #Renvoie true si UUID est égal à :
                        #   - 00000000-0000-0000-0000-000000000000

uuid::iterator          #Iterateur (*iterator renvoie des UINT8_VAL)

UUID.begin()            #
UUID.end()              #A utiliser avec uuid::iterator

UUID.data               #UUID, sous forme d'UINT8_ADR.

UUID.swap(UUID2)        #
swap(UUID, UUID2)       #Swappe UUID et UUID2

UUID.static_size()      #Renvoie toujours 16.

UUID.size()             #Renvoie toujours 16.
UUID.variant()          #Renvoie la VARIANT_TYPE d'UUID (read-only)
UUID.version()          #Renvoie la VERSION_TYPE d'UUID (read-only)

UUID.variant_type       #Enum représentant la variante de l'algorithme de
UUID.                   #génération des UUID. Valeurs possibles :
UUID.variant_ncs        #
UUID.variant_rfc_4122   #
UUID.variant_microsoft  #(défaut)
UUID.variant_future     #

UUID.version_type       #Enum représentant la version de l'algorithme. Valeurs
                        #possibles :
UUID.version_unknown    #
UUID.version_time_based #(défaut avec le constructor par défaut)
UUID.
version_dce_security    #
UUID.
version_name_based_md5  #
UUID.
version_random_number_  #
based                   
UUID.
version_name_based_sha1 #

basic_random_generator  #Functor, générant des UUID aléatoires, selon 
<RAND_GEN_PA>           #RAND_GEN_PA, random-based.

BASIC_RANDOM_GENERATOR()#Génèration.

random_generator        #Typedef depuis basic_random_generator <boost::mt19937>

string_generator        #Functor, générant des UUID identiques à une STRING, qui
                        #doit être sous la forme :
                        #   - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

STRING_GENERATOR(STRING)#Génèration.

name_generator          #Functor, générant des UUIDS aléatoires et uniques, mais
                        #en fonction d'un autre UUID et d'une STRING (ou STR, 
                        #etc.), et renvoie toujours le même UUID avec ces deux
                        #éléments, name-based donc.

NAME_GENERATOR(UUID)    #Construit un NAME_GENERATOR lié à UUID.

NAME_GENERATOR(STR)
NAME_GENERATOR(WSTR)
NAME_GENERATOR(STRING)
NAME_GENERATOR(WSTRING) 
NAME_GENERATOR(ADR,     
SIZE_T_VAL)             #Génération.

nil_generator           #Functor, générant des UUID nuls :
                        #   - 00000000-0000-0000-0000-000000000000

NIL_GENERATOR()         #Génèration.

HEADER ==>              #<boost/uuid/uuid_io.hpp>

ISTREAM >> UUID
OSTREAM << UUID         #UUID est alors considéré comme une STRING.

to_string(UUID)         #Renvoie UUID sous forme de STRING
to_wstring(UUID)        #Renvoie UUID sous forme de WSTRING
