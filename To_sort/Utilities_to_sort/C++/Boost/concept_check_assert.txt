
                         
   CONCEPT CHECK ASSERTS  
                         

HEADER ==>              #<boost/static_assert.hpp>
BOOST_STATIC_ASSERT     #Si TEST est faux, annule la compilation. TEST est (et
((TEST))                #doit pouvoir être) évalué compile-time, et non runtime
                        #(contrairement à assert()). Sert donc à checker par
                        #exemple :
                        #  - conditions de compilation de l'environnement
                        #    courants (std::numeric_limits, etc.)
                        #S'il est dans un header, sans être dans une classe ou
                        #fonction, le mettre dans un namespace isolé pour lui
                        #tout seul, avec un nom propre à lui.
HEADER ==>              #<boost/assert.hpp>
BOOST_ASSERT(( TEST ))  #Runtime assert : comme std::assert(), mais :
                        #  - peut être customisé en définissant
                        #    assertion_failed, si BOOST_ENABLE_ASSERT_HANDLER
                        #    (avant l'#include) est define
                        #  - peut être ignoré avec un simple
                        #    #define BOOST_DISABLE_ASSERTS
                        #Préférer BOOST_ASSERT_MSG
assertion_failed        #Return type void.
(const STR1, const STR2,#STR1 est le TEST, STR2 le prototype de la fonction
const STR3, LONG_VAL)   #laquelle il se trouvait, STR3 le fichier et LONG_VAL
                        #la ligne.
BOOST_ASSERT_MSG        #Comme BOOST_ASSERT, mais imprime STR4 comme message
( TEST, STR4 )          #supplémentaire et :
                        #  - assertion_failed est ici assertion_failed_msg,
                        #    et prend une STR4 entre STR1 et STR2 contenant
                        #    STR4.
                        #  - la macro NDEBUG est disponible en plus de
                        #    BOOST_DISABLE_ASSERTS (même effet)
                        #  - On peut définir BOOST_ASSERT_MSG_OSTREAM sur un
                        #    std::ostream sur lequel imprimer, au lieu de
                        #    std::cerr (std::cout produit des messages plus
                        #    compréhensibles avec MSCV++ ???)

HEADER ==>              #<boost/concept_check.hpp>

IDEE ==>                #Implémente des concept checks (et donne des messages
                        #d'erreur plus clairs)
                        #CONCEPT désignera une classe de concept, par exemple
                        #EqualityComparable<WVAR>
BONNE PRATIQUE ==>      #  - toute fonction ou classe à template devrait faire
                        #    des concept checks
                        #  - il faut chercher à minimiser les concepts requis
                        #    tant que possible, sans pour autant ne pas checker
                        #    les concepts nécessaires
                        #  - mettre les macros de checks dans l'interface
                        #    publique.
NAMESPACE ==>           #Les macros n'ont pas de namespace boost::

BOOST_CONCEPT_ASSERT    #Produit une erreur compile-time si CONCEPT n'est pas
((CONCEPT))             #respecté. A mettre dans le corps d'un classe à template
                        #ou d'une fonction à template. Exemple :
                        #  - template <class T>
                        #    TYPE FUNC_VAR(T_VAL)
                        #    {
                        #       BOOST_CONCEPT_ASSERT((EqualityComparable<T>));
                        #       ...
                        #    }
                        #Préférer utiliser l'héritage de concept pour les
                        #classes, car plus simple (mais même effet), sauf si
                        #l'on peut utiliser des typedefs définis dans la classe
                        #pour raccourcir.
template <class T>      #Une classe héritant d'un CONCEPT ne compile pas si
class CLASS : CONCEPT   #l'instantiation de son template ne remplit pas le
                        #CONCEPT.
BOOST_CONCEPT_USAGE     #A mettre au sein d'une class CLASS. Les ... doivent
(CLASS) {...}           #être remplacées par des opérations qui seront
                        #checkées compile-time, juste pour voir si ces
                        #opérations sont possibles. Il faut utiliser les
                        #CLASSDT de CLASS pour ce faire autant que possible.
                        #Par exemple si CLASS contient un membre T_VAL dont il
                        #faut vérifier qu'il est post-incrémentable, faire :
                        #  - { T_VAL++; }
                        #Cela n'incrémentera pas vraiment T_VAL.
                        #Doit être mis dans un partie avec un accès "public".

HEADER ==>              #<boost/concept/requires.hpp>

template <class T>      #BOOST_CONCEPT_REQUIRES est à mettre à la place du
BOOST_CONCEPT_REQUIRES  #return type d'une fonction uniquement. TYPE est le
(((CONCEPT))..., (TYPE))#return type de départ. Même effet que
FUNC_VAR(T_VAL) {...}   #BOOST_CONCEPT_ASSERT, sauf que :
                        #  - rend le concept visible dans la public interface
                        #    (par exemple doc. d'une bibliothèque) :
                        #    self-documenting interface (mais moins lisible)
                        #  - est checké lors de la déclaration de la fonction,
                        #    et non lors de la lecture d'une instantiation de
                        #    la fonction par le compiler -> mieux.

CREER UNE CLASSE DE     #Il suffit de créer une template classe :
CONCEPT ==>             #  - pour un refinement, c'est-à-dire pour les
                        #    requirements ayant des concepts déjà existants,
                        #    checker ces concepts via BOOST_CONCEPT_REQUIRES,
                        #    BOOST_CONCEPT_ASSERT et l'héritage de concepts
                        #    dans la nouvelle classe de concept.
                        #  - pour les nouveaux requirements, utiliser
                        #    BOOST_CONCEPT_USAGE.
                        #  - les VAL utilisées dans BOOST_CONCEPT_USAGE doivent
                        #    provenir de CLASSDT définies dans la classe de
                        #    concept, et non d'instantations directes faite
                        #    dans le scope de BOOST_CONCEPT_USAGE { }, car
                        #    cela impliquerait des requirements sur leur
                        #    construction (par exemple qu'ils soient
                        #    default-constructibles, etc.)
                        #  - pour checker que telle opération retourne tel type,
                        #    mettre l'opération en private, et appeler
                        #    opération() dans BOOST_CONCEPT_USAGE

HEADER ==>              #<boost/concept_check.hpp>

                        #Voici une liste de CONCEPT, suivi de l'opération qu'ils
                        #vérifient :

EqualityComparable<TYPE>#WVAL == WVAL2, et renvoie une BOOL_VAL
                        #WVAL != WVAL2, et renvoie une BOOL_VAL
                        #Ne checke pas :
                        #  - WVAL == WVAL est vrai
                        #  - Si WVAL == WVAL2, alors WVAL2 == WVAL
                        #  - Si WVL == WVL2 et que WVAL2 == WVAL3, WVAL == WVAL3
                        #  - Si WVAL& == WVAL2&, alors WVAL == WVAL2
LessThanComparable<TYPE>#WVAL < WVAL2, et renvoie une BOOL_VAL
                        #Ne checke pas :
                        #  - WVAL < WVAL est faux
                        #  - Si WVAL < WVAL2, alors WVAL2 < WVAL est faux
                        #  - Si WVAL < WVAL2 et que WVAL2 < WVAL3, WVAL < WVAL3
Comparable<TYPE>        #WVAL < WVAL2, et renvoie une BOOL_VAL
                        #Même chose pour <=, > et >=
                        #Même chose pour "ne checke pas"

DefaultConstructible    #WVAL()
<TYPE>                  #&WVAL est disponible.
CopyConstructible<TYPE> #WVAL(const WVAL2&)
                        #&WVAL est disponible.
Assignable<TYPE>        #WVAL_VAR = CONST_WVAL. Il faut donc qu'un operator=
                        #( WVAR ) ou ( const WVAR& ) soit défini.
                        #Ne checke pas la présence d'un operator=(  ) const { }
                        #ni le fait de renvoyer une WVAR&
SGIAssignable<TYPE>     #Concepts Assignable + CopyConstructible
Convertible<TYPE1,TYPE2>#WVAL2(const WVAL1&)
                        #(non réciproque)
                        #Ne checke pas assignation WVAL2 = WVAL1 (exigeant
                        #que WVAL2 soit Assignable)

Integer<TYPE>           #WVAL est un built-in entier.
SignedInteger<TYPE>     #WVAL est un built-in entier signed.
UnsignedInteger<TYPE>   #WVAL est un built-in entier unsigned.

EqualOp<TYPE1,TYPE2>    #WVAR1_VAL == WVAR2_VAL, et renvoie bool
NotEqualOp<TYPE1,TYPE2> #
LessEqual<TYPE1,TYPE2>  #
LessThanOp<TYPE1,TYPE2> #
GreaterEqualOp<TYP1,TP2>#
GreaterThan<TYPE1,TYPE2>#Même chose pour !=, <=, < >=, >
PlusOp<T1, T2, T3>      #WVAR2_VAL + WVAR3_VAL, et renvoie TYPE1.
SubstractOp<T1, T2, T3> #
TimesOp<T1, T2, T3>     #
DivideOp<T1, T2, T3>    #
ModOp<T1, T2, T3>       #Même chose pour -, *, / et %

Generator<T1,T2>        #WVAR2_VAL (sauf si void) = WVAR1_VAL()
UnaryFunction<T1,T2,T3> #WVAR2_VAL (sauf void) = WVAR1_VAL(WVAR3_VAL)
BinaryFunction<T1,T2,T3,#
T4>                     #WVAR2_VAL (sauf void) = WVAR1_VAL(WVAR3_VAL, WVR4_VAL)
UnaryPredicate<T1,T2>   #Equivaut à UnaryFunction<T1,bool,T2>
BinaryPredicate<T1,T2,  #
T3>                     #Equivaut à BinaryFunction<T1,bool,T2, T3>
Const_BinaryPredicate   #Respecte BinaryPredicate<T1,T2,T3> et si T1 est une
<T1,T2,T3>              #classe, son operator() est const.

AdaptableGenerator      #Respecte Generator<T1,T2>, et T1::result_type est
<T1,T2>                 #Convertible en T2.
AdaptableUnaryFunction  #Respecte UnaryFunction<T1,T2,T3>, T1::result_type
<T1,T2,T3>              #Convertible en T2, et T1::argument_type Convertible
                        #en T3.
AdaptableBinaryFunction #Respecte UnaryFunction<T1,T2,T3,T4>, T1::result_type
<T1,T2,T3,T4>           #Convertible en T2, T1::first_argument_type Convertible
                        #en T3, et T1::second_argument_type Convertible en T4.
AdaptablePredicate      #
<T1,T2>                 #Respecte AdaptableUnaryFunction<T1,bool,T2>
AdaptableBinaryPredicate#
<T1,T2,T3>              #Respecte AdaptableBinaryFunction<T1,bool,T2,T3>

Container<T1>           #Respecte Assignable<T1>
                        #Possède les typedefs value_type, difference_type,
                        #size_type, const_reference, const_pointer,
                        #const_iterator.
                        #const_iterator respecte InputIterator.
                        #CONTAINER.begin() et CONTAINER.end() renvoient un
                        #const_iterator. CONTAINER.size() et
                        #CONTAINER.max_size() renvoient un size_type.
                        #CONTAINER.empty() renvoie un BOOL_VAL.
Mutable_Container<T1>   #Respecte Container<T1>
                        #Possède les typedefs reference, iterator, pointer.
                        #value_type est Assignable.
                        #iterator respecte InputIterator.
                        #begin() et end() renvoient un iterator ou
                        #const_iterator, en fonction de la constness de
                        #MUTABLECONTAINER.
                        #MUTABLECONTAINER.swap(MUTABLECONTAINER2)
ForwardContainer<T1>    #Respecte Container<T1>
                        #const_iterator respecte ForwardIterator.
Mutable_ForwardContainer#Respecte Mutable_Container<T1>
<T1>                    #iterator respecte Mutable_ForwardIterator.
ReversibleContainer<T1> #Respecte ForwardContainer<T1>
                        #Typedef const_reverse_iterator.
                        #const_iterator et const_reverse_iterator respectent
                        #BidirectionalIterator.
                        #rbegin() et rend() renvoient un const_reverse_iterator
Mutable_Reversible      #Respecte Mutable_ForwardContainer<T1> et
Container<T1>           #ReversibleContainer<T1>
                        #Typedef reverse_iterator.
                        #iterator et reverse_iterator respectent
                        #BidirectionalIterator.
                        #rbegin() et rend() renvoient un const_reverse_iterator
                        #ou reverse_iterator en fonction de la constness de
                        #MUTABLE_REVERSIBLECONTAINER.
RandomAccessContainer   #Respecte ReversibleContainer<T1>
<T1>                    #const_iterator respecte RandomAccessIterator.
                        #RANDOMACCESSCONTAINER[SIZE_TYPE_VAL] renvoie une
                        #const_reference.
Mutable_RandomAccess    #Respecte RandomAccessContainer<T1> et
Container<T1>           #Mutable_ReversibleContainer<T1>.
                        #iterator et reverse_iterator respectent
                        #Mutable_RandomAccessIterator.
                        #RANDOMACCESSCONTAINER[SIZE_TYPE_VAL] renvoie une
                        #reference ou const_reference en fonction de la
                        #constness de MUTABLE_RANDOMACCESSCONTAINER.

Sequence<T1>            #Respecte DefaultConstructible<T1> et
                        #Mutable_ForwardContainer<T1>
                        #Constructors :
                        #  - SEQUENCE(SIZE_TYPE_VAL)
                        #  - SEQUENCE(SIZE_TYPE_VAL, VALUE_TYPE_VAL)
                        #  - SEQUENCE(VALUE_TYPE_ADR, VALUE_TYPE_ADR2)
                        #insert(ITERATOR, ARGS), où ARGS sont les mêmes
                        #arguments que pour le constructor.
                        #erase(ITERATOR), erase(ITERATOR, ITERATOR2)
                        #front() renvoie une REFERENCE ou CONST_REFERENCE
                        #selon la constness de SEQUENCE.
FrontInsertionSequence  #Respecte Sequence<T1>.
<T1>                    #push_front(VALUE_TYPE_VAL) et pop_front().
BackInsertionSequence   #Respecte Sequence<T1>.
<T1>                    #push_back(VALUE_TYPE_VAL) et pop_back().
                        #back() renvoie une REFERENCE ou CONST_REFERENCE
                        #selon la constness de BACKINSERTIONSEQUENCE.
AssociativeContainer<T1>#Respecte DefaultConstructible<T1> et
                        #ForwardContainer<T1>
                        #typedefs key_type, key_compare, value_compare.
                        #key_compare respecte BinaryPredicate
                        #<key_compare, key_type, key_type>
                        #value_compare respecte BinaryPredicate
                        #<value_compare, value_type, value_type>
                        #find(KEY_TYPE_VAL) renvoie un [CONST_]ITERATOR
                        #equal_range(KEY_TYPE_VAL) renvoie un
                        #STD::PAIR<[CONST_]ITERATOR, [CONST_]ITERATOR>
                        #erase(KEY_TYPE_VAL), erase(ITERATOR),
                        #erase(STD::PAIR<...>.FIRST, STD::PAIR<...>.SECOND)
UniqueAssociative       #Respecte AssociativeContainer<T1>
Container<T1>           #Constructor avec (VALUE_TYPE_ADR, VALUE_TYPE_ADR2)
                        #insert(VALUE_TYPE_ADR, VALUE_TYPE_ADR2)
                        #insert(VALUE_TYPE_VAL) renvoie une
                        #STD::PAIR<ITERATOR, BOOL>
MultipleAssociative     #Comme UniqueAssociativeContainer, sauf que insert
Container<T1>           #(VALUE_TYPE_VAL) renvoie un ITERATOR.
SimpleAssociative       #Respecte AssociativeContainer<T1>
Container<T1>           #key_type et value_type sont les mêmes types.
PairAssociativeContainer#Respecte AssociativeContainer<T1>
<T1>                    #typedef mapped_type.
                        #value_type est std::pair<const key_type, mapped_type>
SortedAssociative       #Respecte AssociativeContainer<T1> et
Container<T1>           #ReversibleContainer<T1>
                        #Constructors :
                        #  - (KEY_COMPARE)
                        #  - (VALUE_TYPE_ADR, VALUE_TYPE_ADR2[, KEY_COMPARE ])
                        #upper_bound(KEY_TYPE_VAL) et lower_bound(KEY_TYPE_VAL)
                        #renvoie [CONST_]ITERATOR.
                        #equal_range(KEY_TYPE_VAL) renvoie
                        #STD::PAIR<[CONST_]ITERATOR, [CONST_]ITERATOR2>
                        #insert(ITERATOR, VALUE_TYPE_VAL)
                        #key_comp() renvoie un KEY_COMPARE.
                        #value_comp() renvoie un VALUE_COMPARE.
Collection<T1>          #Typedefs value_type, iterator, const_iterator,
                        #reference, const_reference, difference_type, size_type.
                        #[const_]iterator respecte InputIterator.
                        #value_type respecte CopyConstructible.
                        #begin() et end() renvoient [const_]iterator
                        #swap(COLLECTION)
                        #size() renvoie un SIZE_TYPE_VAL
                        #empty() renvoie un BOOL_VAL.

HEADER ==>              #<boost/concept_archetype.hpp>
ARCHETYPE ==>           #Tandis que les concepts sont conçus pour les
                        #utilisateurs de bibliothèques, les archetypes sont
                        #conçus pour les designers de bibliothèques : sont
                        #donc utilisés lors de l'élaboration de la bibliothèque
                        #mais pas donnés dans le produit final.
                        #Quand ce dernier indique les concepts minimaux requis,
                        #il peut oublier certains concepts pourtant utilisés
                        #par la fonction.
                        #Un archetype est alors une classe implémentant un
                        #concept précis : l'ensemble de ses requirements, mais
                        #pas un seul de plus. Les fonctions doivent être
                        #minimalistes et implémenter seulement les
                        #requirements.
                        #Une classe héritant de l'ensemble des archetypes
                        #requis pour une fonction (ou une instantiation de
                        #l'archetype s'il n'y a qu'un concept) est donné
                        #comme argument à la fonction : si un requirement
                        #supplémentaire a été oublié, une erreur est produite
                        #et le designer modifie les concepts requis en
                        #conséquence.
                        #On peut mettre ces instantations dans un anonymous
                        #namespace pour les exécuter à chaque compilation,
                        #sans que cela ait une incidence sur autre chose que
                        #la compilation.

                                  ┌─────────────┐
                                  │   A FAIRE   │
                                  └─────────────┘

    - archetypes, iterator archetypes, range archetypes
