
                                  ┏━━━━━━━━━┓
                                  ┃   ANY   ┃
                                  ┗━━━━━━━━━┛

HEADER ==>              #<boost/any.hpp>

any                     #Classe désignant tout type possible ("type erasure")
                        #N'est pas convertible implicitement avec ce type, on
                        #est obligé d'utiliser any_cast pour l'utiliser.
                        #Permet de faire du "runtime polymorphism" : sorte de 
                        #"run-time" templates ; par exemple, un container 
                        #d'any peut prendre des int ou des floats, et ne 
                        #transtype que lors de la première tentative de 
                        #lecture, via any_cast. Un template forcerait 
                        #l'utilisation d'un type précis pour le container, 
                        #compile-time.
                        #Le transtypage n'est donc effectué que runtime, et non
                        #compile-time, comme avec les templates.

ANY()                   #Constructor vide.
ANY(WVAL)               #WVAL doit être CopyConstructible, Assignable,
ANY = WVAL              #et ne lance pas d'exception lors du constructor, de 
                        #l'assignement et lors du destructor.

ANY.swap(ANY2)

ANY.empty()             #Renvoie true si ANY a été default constructed
ANY.type()              #Renvoie le STD::TYPE_INFO du WVAL instantié

any_cast<WVAR>(ANY)     #Renvoie la WVAL d'ANY, convertie en WVAR_VAL. Si la
                        #conversion est impossible, bad_any_cast est lancé.
any_cast<WVAR>(ANY_ADR) #Renvoie la WVAL d'ANY, convertie en WVAR_ADR. Si la
                        #conversion est impossible, NULL est renvoyé.

bad_any_cast            #Exception lancée par any_cast, enfant de std::bad_cast
