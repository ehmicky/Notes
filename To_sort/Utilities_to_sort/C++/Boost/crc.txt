
                                  ┏━━━━━━━━━┓
                                  ┃   CRC   ┃
                                  ┗━━━━━━━━━┛

HEADER ==>              #<boost/crc.hpp>
NAMESPACE ==>           #Il s'agit de boost::

crc_32_type             #Functor générant des checksums. A utiliser pour 
                        #vérifier l'intégrité de données sur un réseau, et non
                        #pour une hash table, ou pour une raison de sécurité.
                        #Pour chaque génération d'une checksum, il faut :
                        #  1) La remettre à zéro
                        #  2) La nourrir avec les data dont il faut calculer la
                        #     checksum
                        #  3) Renvoyer la checksum.

CRC_32_TYPE()           #Constructor vide, mais effectue un CRC_32_TYPE.reset()

CRC_32_TYPE.reset()     #Remet CRC_32_TYPE à zéro.
CRC_32_TYPE.process_byte#
(UCHAR_VAL)
CRC_32_TYP.process_block#
(VOID_ADR1, VOID_ADR2)  #Nourrit CRC_32_TYPE d'UCHAR_VAL, des octets allant de
CRC_32_TYP.process_bytes#VOID_ADR1 à VOID_ADR2 (exclus), ou de SIZE_T_VAL octets
(VOID_ADR, SIZE_T_VAL)  #en partant de VOID_ADR.

CRC_32_TYPE()           
CRC_32_TYPE.checksum()  #Renvoie la checksum, sous forme d'UINT32_VAL.

CRC_32_TYPE.            #Renvoie l'état actuel de CRC_32_TYPE, sous forme 
get_interim_remainder() #d'UINT32_VAL.

CRC_32_TYPE.reset       #Remet CRC_32_TYPE à l'état indiqué par UINT32_VAL,
(UINT32_VAL)            #obtenu via un get_interim_remainder().

crc_16_type             #
crc_ccitt_type          #Autres functors disponibles, avec les mêmes membres,
crc_xmodem_type         #mais utilisant des UINT16_VAL et non des UINT32_VAL
