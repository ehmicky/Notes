
            
   GLIBMM   
            

                                  ┌─────────────┐
                                  │   GENERAL   │
                                  └─────────────┘

GENERAL ==>             #Nom : libglibmm
                        #Header : 
                        #  <glibmm.h>
                        #  <glibmm/datetime.h> : DateTime
                        #  <glibmm/timezone.h> : TimeZone
                        #Option de compilation : $(pkg-config glibmm-VERSION --cflags --libs)
                        #En C : glibmm -> glib
                        #Namespace : Glib:: (en C : "g_")
                        #Inclus par gtkmm.
                        #Wrapper C++ de Glib

TYPES FONDAMENTAUX ==>  #Tout GNOME utilise des types définis. Dans la doc', j'utilise leur typedef, mais le code, utiliser
                        #les g* types au cas où typedef change (ce qui ne semble pas le cas actuellement)
                        #Pour TYPE char, short, int, long, float, double
                        #  - gTYPE : typedef depuis TYPE
                        #  - guTYPE : typedef depuis unsigned TYPE
                        #Puis :
                        #  - gboolean : typedef depuis int (mais utilisé comme bool)
                        #     - initialisé avec TRUE ou FALSE
                        #  - g[const]pointer : typedef depuis [const] void*
                        #  - g[u]int[8,16,32,64] : typedef depuis type correspondant
                        #  - g[s]size/g[u]intptr : typedef depuis [signed] unsigned long
                        #  - goffset : typedef depuis gint64
                        #  - gunichar : guint32
                        #Macros G_{MIN,MAX}[U]INT{8,16,32,64}
                        #Macro G_BYTE_ORDER, égal à G_{BIG,LITTLE}_ENDIAN

init()                  #Init fonction, à faire au début. Appelée par Gtk::Main. (absent en C)

                                  ┌───────────┐
                                  │   MATHS   │
                                  └───────────┘

MIN( A, B )
MAX( A, B )             #A et B doivent avoir <
ABS( A, B )             #A doit avoir < et -A
CLAMP( A, B, C )        #MAX( MIN( A, C ), B )

G_STRUCT_MEMBER_P
( STRUCT, NOMBRE )      #Renvoie membre de STRUCT dont offset est NOMBRE, sous forme de void*
G_STRUCT_MEMBER( TYPE,
STRUCT, NOMBRE )        #Renvoie membre de STRUCT dont offset est NOMBRE, sous forme de type*
G_STRUCT_OFFSET
( TYPE, MEMBRE )        #Renvoie offset

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

G_OS_WIN32              #
G_OS_BEOS               #
G_OS_UNIX               #Macro définie en fonction de l'OS

G_DIR_SEPARATOR         #'/' sous Unix, '\\' sous Windows
G_DIR_SEPARATOR_S       #Pareil, mais sous forme de STR
G_IS_DIR_SEPARATOR
( CHAR_VAL )            #Renvoie true si == G_DIR_SEPARATOR ou == '/'
G_SEARCHPATH_SEPARATOR  #':' sous Unix, ';' sous Windows
G_SEARCHPATH_SEPARATOR_S#Pareil, mais sous forme de STR

G_MEM_TYPE              #Nombre d'octets pour l'alignement

                                  ┌───────────────────────┐
                                  │   MEMORY ALLOCATION   │
                                  └───────────────────────┘

g_new[0]( TYPE, INT_VAL)#Equivaut à ( TYPE )malloc( INT_VAL, sizeof( TYPE ) ), avec quelques trucs propres à Glib (profiling,
                        #etc.). Si 0, initialisé à 0.
g_renew( TYPE, ADR, 
INT_VAL )               #Pareil pour realloc
g_malloc[0]*            #Comme malloc, avec qq trucs propres à Glib. Si 0, initialisé à 0.
g_realloc[0]*           #Pareil pour realloc
g_*alloc_n*             #Comme g_*alloc*, mais prend un second ULONG_VAL, multipliant le premier (comme calloc())
g_try_*                 #Pareil que précédents, sauf que si erreur, renvoie NULL (et non abort le programme)
g_free( ADR )           #Pareil que free(), mais pour fonctions précédentes

g_alloca( ULONG_VAL )   #Comme malloc(), sauf qu'alloue mémoire sur le stack non le heap : plus rapide et pas besoin de faire
                        #de free() (mémoire libérer lors de l'exit du stack). Cependant, abort le programme en cas d'erreur 
                        #(et non renvoie NULL), et ne doit pas dépsser stack size (souvent 2Mo)
g_newa*                 #Comme g_new, mais avec g_alloca

g_memdup
( VOID_ADR, UINT_VAL )  #Renvoie VOID_ADR2 avec une copie allouée des UINT_VAL premiers octets de VOID_ADR

g_mem_set_vtable        #Modifie fonctions utilisées en interne par g_malloc(), g_new(), etc.
( GMEMVTABLE_ADR )      #GMemVTable a comme membre : malloc, realloc, free, calloc, try_malloc, try_realloc, pointeurs vers
                        #fonction.
                        #A faire au début du programme, et ne pas changer au milieu.
                        #On peut utiliser glib_mem_profiler_table, une GMEMVTABLE_ADR donnant des infos de profiling, 
                        #permettant d'utiliser g_mem_profile(), qui imprime des infos sur mémoire allouée et libérée.
g_mem_is_system_malloc()#Renvoie true si g_malloc* utilise en interne malloc()

                                  ┌─────────────┐
                                  │   STRINGS   │
                                  └─────────────┘

g_strdup( STR )         #Renvoie une copie STR2 allouée via g_new (utiliser g_free() donc) de STR.
g_strndup(STR,ULONG_VAL)#Pareil, mais ne copie que les ULONG_VAL premiers octets de STR, et alloue un extra octet pour le '\0'
                        #final de STR2.
g_strdupv( STR_ARR )    #Renvoie une copie STR_ARR2 dont les STR et l'ARR elle-même sont alloués comme pour g_strdup. Utiliser
                        #g_free() sur les STR puis sur l'ARR, ou utiliser g_strfreev( STR_ARR ) qui fait cela.
                        #STR_ARR doit être terminée par un NULL
g_strdup_printf(STR,...)#Comme g_strdup(), mais avec une printf string.
g_strdup_vprintf( STR,
VA_LIST )               #Pareil, avec une VA_LIST
g_strnfill( ULONG_VAL, 
CHAR_VAL )              #Renvoie une copie STR2 allouée avec g_new (utiliser g_free()) de ULONG_VAL octets remplis avec CHARVAL
g_stpcpy( STR, STR2 )   #Copie STR2 vers STR, et renvoie un CHAR_ADR pointant vers nouvelle fin de STR.
g_strlcpy( STR, STR2,   #Comme strncpy(), sauf que réserve toujours au moins 1 octet pour le '\0' final dans STR, et LONG_VAL
LONG_VAL )              #est taille de STR.
g_strlcat( STR, STR2,   
LONG_VAL )              #Pareil, pour strncat().

g_strv_length( STR_ARR )#Renvoie nombre de STR contenues dans STR_ARR, qui doit contenir à la fin un NULL

g_strrstr( STR, STR2 )  #Comme strstr(), mais recherche dernière occurence
g_strstr_len( STR,      #Comme strstr(), sauf que recherche que parmi les LONG_VAL premiers octets de STR (si -1, équivaut à 
LONG_VAL, STR2 )        #strstr()).
g_strrstr_len*          #Pareil, mais dernière occurence.
g_str_has_{pre,suf}fix
( STR, STR2 )           #Renvoie true si STR commence/finit par STR2

g_strcmp0( STR, STR2 )  #Comme strcmp(), sauf que si STR ou STR2 est NULL, pas de segfault.

g_ascii_dtostr( STR_VAR,#Affecte à STR_VAR, dont la taille est INT_VAL, la représentation sous forme de STR, de DOUBLE_VAL.
INT_VAL, DOUBLE_VAL )   #La taille maximale de la représentation d'un DOUBLE_VAL en STR est G_ASCII_DTOSTR_BUF_SIZE
                        #Renvoie STR_VAR
g_ascii_formatd(STR_VAR,#Pareil, mais utilise une format string STR pouvant contenir uniquement %e, %E, %f, %F, %g ou %G,
INT_VAL, STR,DOUBLE_VAL)#avec specifiers possibles entre % et la lettre

g_strchug( STR_VAR )    #Supprime leading whitespaces, et renvoie STR_VAR.
g_strchomp( STR_VAR )   #Supprime trailing whitespaces, et renvoie STR_VAR.
g_strstrip( STR_VAR )   #Supprime trailing et leading whitespaces, et renvoie STR_VAR.
g_strdelimit( STR_VAR,  #Remplace toute occurence de l'un des caractères de STR2 dans STR_VAR par CHAR_VAL, et renvoie STR_VAR
STR2, CHAR_VAL )        #STR2 peut notamment être la macro G_STR_DELIMITERS : "_-|> <."
g_strcanon*             #Inverse : toute occurence ne se trouvant pas dans STR2
g_strescape             #Remplace toute occurence dans STR_VAR d'un control caracter par sa représentation graphique "\NNN"
( STR_VAR, STR2 )       #ou "\n", sauf si caractère se trouve dans STR2. Renvoie STR_VAR
g_strcompress( STR_VAR )#Inverse

g_strsplit( STR1, STR2, #Split STR1 selon le delimiter STR2, INT_VAL - 1 maximum fois, et renvoie le résultat
INT_VAL )               #sous forme de STR_ARR (allouée, utiliser g_strfreev())
g_strsplit_set( STR1, 
STR2, INT_VAL )         #Pareil, mais utilise STR2 comme un ensemble de delimiters d'un octet.
g_stroncat( STR
[, STR2]..., NULL )     #Renvoie concaténation des STR sous forme d'une STR allouée (utiliser g_free())
g_strjoin*              #Pareil, sauf que STR est inséré entre chaque string.
g_strjoinv( STR,STR_ARR)#Pareil, avec un STR_ARR

GString                 #Une classe équivalent à std::string en C++
GSTRING.str             #STR
GSTRING.len             #Taille de STR
GSTRING.allocated_len   #Taille allouée

g_string_new( STR )     #Renvoie une GSTRING_ADR avec STR, dont la taille est celle de STR
g_string_new_len    
( STR, LONG_VAL )       #Pareil mais seulement les LONG_VAL premiers octets de STR, en rajoutant un '\0' à la fin.
g_string_sized_new
( LONG_VAL )            #Renvoie une GSTRING_ADR vide dont la taille est LONG_VAL
g_string_free
( GSTRING_ADR, BOOL_VAL)#Si true, renvoie NULL. Si false, renvoie la STR interne, qui doit être g_free() ensuite.

g_string_assign
( GSTRING_ADR, STR )    #Réinitialise contenu avec STR, augmentant taille si besoin. Renvoie GSTRING_ADR.
g_string_printf
( GSTRING_ADR, STR, ...)#Pareil, avec une printf string, et ne renvoie rien.
g_string_vprintf
( GSTRING_ADR, STR, 
VA_LIST )               #Utilise une VA_LIST
g_string_append*        #Comme g_string_assign*, sauf que append
g_string_append_*printf*#Comme g_string_*printf*, sauf que append
g_string_append_c
( GSTRING_ADR, CHAR_VAL)#Comme g_string_append(), mais avec un CHAR_VAL
g_string_append_unichar
( GSTRING_ADR, GUNICHAR)#Pareil avec un GUNICHAR (Codepoint converti en UTF8, puis ajouté à GSTRING, qui doit donc être UTF8)
g_string_append_len
( GSTRING_ADR, STR,
LONG_VAL )              #Comme g_string_append, mais n'utilise que les LONG_VAL premiers caractères de STR.
g_string_append_uri_    #Comme g_string_append, mais échappe avec URI encoding (ex: %2F pour /), tout caractère n'étant pas
escaped( GSTRING_ADR,   #présent dans STR2 (caractères possibles) et, si true, n'utilise pas de caractère UTF8.
STR1, STR2, BOOL_VAL )  #L'encoding de STR1 et STR2 est ignoré, considéré comme suite d'octets. STR2 comprend toujours 
                        #implicitement [[:alnum:]_-]
g_string_prepend*       #Comme g_string_append* (sauf append_*printf* et append_uri_espaced), mais au début
g_string_insert*        #Pareil, mais à la position LONG_VAL (deuxième argument, supplémentaire)
g_string_overwrite*     #Comme g_string_insert* (sauf insert_unichar et insert_c), mais overwrite.

g_string_erase
( GSTRING_ADR,LONG_VAL1,
LONG_VAL2 )             #Supprime LONG_VAL2 (si -1 tout ceux qui suivent) octets depuis position LONG_VAL1. Renvoie GSTRING_ADR
g_string_truncate
(GSTRING_ADR, LONG_VAL1)#Comme g_string_erase( GSTRING_ADR, -1, LONG_VAL1 )
g_string_set_size       #Modifie taille de STR. Si tronque, rajoute un '\0' à la fin. Si extend, octets ajoutés sont pas 
(GSTRING_ADR, LONG_VAL1)#initialisés.

g_string_equal
( 2 GSTRING_ADR )       #Renvoie TRUE si égales.
g_string_hash
( GSTRING_ADR )         #Renvoie un checksum UINT_VAL 

                                  ┌────────────┐
                                  │   REFPTR   │
                                  └────────────┘

RefPtr<WVAR>            #C'est un shared pointer. Seules fonctions :
                        #  - constructor( ADR ) seulement si VAR a classes reference() et unreference()
                        #  - ->, pas de *
                        #  - if ( REFPTR )
                        #  - ==, !=, <, <=, >, >=
                        #  - Default constructor, copy constructor.
                        #  - reset(void)
                        #  - swap
                        #  - cast_dynamic, cast_static, cast_const (comme pointer_cast, etc.)
                        #WVAR doit avoir CLASSFK reference() et unreference(), ce qui est le cas de Glib::Object et ses enfants
                        #En C : pointeurs.

                                  ┌─────────────┐
                                  │   CHARSET   │
                                  └─────────────┘

ustring                 #Proche de std::string, mais avec un meilleur support de l'internationalization (UTF-8). Avantages par
                        #rapport à WSTRING :
                        #  - possibilité de transformer une STR ou STRING en une string unicode (sinon impossible de 
                        #    transformer STRING en WSTRING)
                        #  - méthodes supplémentaires, dont changement de casse, compose() et format()
                        #Le constructor attend un argument UTF-8 : faire donc : USTRING( locale_to_utf8( STRING ) ) au lieu de 
                        #USTRING( STRING ) et STRING( locale_from_utf8( USTRING ) ) au lieu de STRING( USTRING ) au cas où
                        #locale courante ne soit pas UTF-8.
                        #Ou filename*, si la STRING représente un chemin de fichier.
                        #Mêmes méthodes que std::string sauf :
                        #  - n'utilise pas des char ou wchar_t (dont la signedness et taille peut varier, bien qu'en général
                        #    int32_t), mais des gunichar (uint32_t) (== codepoint Unicode, non UTF8). gunichar est dans le
                        #    namespace global.
                        #    Partout où il y a version CHAR_VAL (et non STR), une version GUNICHAR est disponible, notamment
                        #    constructor USTRING( SIZE_T_VAL, GUNICHAR ), +, +=, insert(), replace(), etc.
                        #  - il enregistre non en UTF8, mais l'Unicode Codepoint en GUNICHAR : utiliser constructor précédent
                        #    pour les afficher
                        #  - a instantier avec des STR ou STRING, comme std::string
                        #  - USTRING.raw() renvoie USTRING sous forme de STRING
                        #  - peut être manipulé avec cout ou wcout, et non l'un ou l'autre (même chose pour cin, etc.).
                        #    Préférer wcout.
                        #  - renvoie exception ConvertError si instantié, assigné, etc. avec caractères invalides.
                        #En C : STR.
                        #De plus les méthodes suivantes :
USTRING.bytes()         #Renvoie nombre d'octets, et non de caractères comme size() et length()
USTRING.collate_key()   #USTRING.compare(), <, etc. sont peu efficientes. Cette fonction renvoie une STRING représentant 
                        #USTRING, à comparer avec la collate key d'une autre USTRING : plus efficient (et même résultat) que
                        #comparer directement les deux USTRING.
USTRING.
casefold_collate_key()  #Même chose, mais comparaison case-insensitive.
USTRING.is_ascii()      #Renvoie true si que ASCII.
USTRING.validate        
( [USTRING::ITERATOR] ) #Renvoie false si UTF8 invalide. Si ITERATOR, ITERATOR = premier caractère invalide (ou end() si aucun)
USTRING.uppercase()     #Renvoie USTRING avec case uppercase (dont "é", etc.)
USTRING.lowercase()     #
USTRING.casefold()      #Même chose lowercase
USTRING.normalize       #La normalization est le fait de transformer une string Unicode de sorte que deux caractères aux
( [NORMALIZEMODE] )     #codepoints différents mais avec la même représentation aient le même codepoint. Plusieurs algorithmes
                        #existent parmi : NORMALIZE_{DEFAULT,NFD,DEFAULT_COMPOSE,NFC,ALL,NFKD,ALL_COMPOSE,NFKC} (défaut
                        #NORMALIZE_DEFAULT)
ustring::compose        #Renvoie USTRING, avec %N (où N est un chiffre entre 1 et 9) remplacé par la T_VAL numéro N, de tout
( USTRING[, T_VAL...] ) #type. Par exemple ( "aaa %1 %2", 3, 4.5 ) renvoie "aaa 3 4.5".
                        #Si pas de T_VAL, mettre un template quelconque : compose<int>( USTRING )
ustring::format         #Reviens à instantier une WISTREAMSTRING, à faire << T_VAL1, puis << T_VAL2, etc., puis à renvoyer cet
( T_VAL... )            #WISTREAMSTRING sous forme d'USTRING. Jusqu'à 8 T_VAL.
                        #De plus, T_VAL peut être STR, WSTR, STRING, WSTRING, USTRING, CHAR ou WCHAR.
                        #Est en général utiliser pour appliquer des IO manipulators, comme std::setprecision, sur des T_VAL,
                        #avant de les transformer en USTRING.
                        #Utiliser des WCHAR avec std::setfill.

get_charset( [STRING] ) #Renvoie true si charset est UTF-8. Si STRING, met dans STRING le charset courant : "UTF-8", "UTF-16",
                        #"Latin1", etc.
convert( 3 STRING )     #Convertit STRING1 de l'encoding STRING3 vers l'encoding STRING2, et le renvoie sous forme de STRING.
                        #Exception ConvertError si un caractère pas traduisible
convert_with_fallback   #Même chose, mais s caractère intraduisible, utilise USTRING pour représenter le caractère.
( 3 STRING[, USTRING] ) #Par défaut \uXXXX. Si USTRING intraduisible dans l'encoding d'arrivée, exception ConvertError.
locale_to_utf8( STRING )#Comme convert( STRING, "UTF-8", encoding de locale ), mais renvoie une USTRING.
locale_from_utf8(USTRNG)#Inverse. Renvoie une STRING.
filename_to_utf8(STRING)#
filename_from_utf8      #
( USTRING )             #Comme locale*, sauf que la locale utilisée est celle utilisée par l'OS courant pour les filenames.
filename_display_name   #
( STRING )              #Presque identique.
filename_display_
basename( STRING )      #Pareil, mais ne renvoie que le basename.
filename_to_uri         #STRING doit être chemin absolu, en UTF8. 
( STRING[, STRING2] )   #Résultat : file:/// + percent-encoded (%C2%80 au lieu de \xc2\x80 par exemple), sous forme d'USTRING.
                        #Si STRING2, STRING2 + "/" est mis après file:///
                        #STRING2 doit avoir que des caractères légaux dans un nom de fichier : pas de "/", de "é", etc.
                        #Par défaut, STRING2 est rien.
                        #Si problème, exception ConvertError.
filename_from_uri       #Inverse. Pas besoin de mettre STRING percent-encoded, mais s'il y a du percent-encoding, le traduit 
( USTRING[, USTRING2] ) #en UTF8. Renvoie STRING.

Unicode::     ==>       #Les méthodes suivantes sont dans le namespace Glib::Unicode::
isalnum( GUNICHAR_VAL ) #
isalpha( GUNICHAR_VAL ) #
iscntrl( GUNICHAR_VAL ) #
isdigit( GUNICHAR_VAL ) #
isgraph( GUNICHAR_VAL ) #
islower( GUNICHAR_VAL ) #
isprint( GUNICHAR_VAL ) #
ispunct( GUNICHAR_VAL ) #
isspace( GUNICHAR_VAL ) #
isupper( GUNICHAR_VAL ) #
isxdigit( GUNICHAR_VAL )#Comme std::, mais GUNICHAR_VAL est un codepoint Unicode (cf ustring)
g_ascii_is*( CHAR_VAL ) #Comme std::, mais force locale courante comme ASCII et prend un CHAR_VAL

validate( GUNICHAR_VAL )#Renvoie true si codepoint valide. Invalide : U+d800 à U+dfff, U+fdd0 à U+deff, U+fffe, *fffe et *ffff,
                        # >= 110000
istitle( GUNICHAR_VAL ) #Renvoie true pour ǅ ǈ ǋ ǲ ᾈ ᾉ ᾊ ᾋ ᾌ ᾍ ᾎ ᾏ ᾘ ᾙ ᾚ ᾛ ᾜ ᾝ ᾞ ᾟ ᾨ ᾩ ᾪ ᾫ ᾬ ᾭ ᾮ ᾯ ᾼ ῌ ῼ
totitle( GUNICHAR_VAL ) #Renvoie GUNICHAR_VAL
isdefined( GUNICHAR_VAL)#Renvoie false si caractère Unicode pas assigné par Unicode.
iswide( GUNICHAR_VAL )  #Renvoie true si caractère prend la place de deux caractères en largeur (notamment les caractères CJK)

toupper( GUNICHAR_VAL ) #
tolower( GUNICHAR_VAL ) #Renvoie GUNICHAR_VAL
g_ascii_to[upp|low]er*  #Comme std::, mais force locale courante comme ASCII, et prend un CHAR_VAL
g_string_ascii_{up,down}
( GSTRING_ADR )         #Pareil, avec une GSTRING_ADR, renvoyant GSTRING_ADR
g_ascii_str[up|down]
( STR, LONG_VAL )       #Pareil, mais prend une STR de taille LONG_VAL octets, et renvoie une STR2 allouée (faire g_free())
g_ascii_strcasecmp
( STR1, STR2 )          #Comme strcmp(), mais case-insensitive, mais seulement pour ASCII
g_ascii_strncasecmp
( STR1, STR2, ULONG_VAL)#Pareil, mais ne compare que les premiers ULONG_VAL octets.

digitvalue(GUNICHAR_VAL)#Si représente un chiffre, renvoie ce chiffre sous forme d'INT_VAL, sinon renvoie -1.
                        #Comprend chiffres romains, mais aussi chiffres des autres scripts : arabe, most indian scripts,
                        #most South-Eastern asian scripts, tibetain, mongolien, soudanais, liberia, wided latin numbers used by
                        #CJK
xdigitvalue(GUNICHARVAL)#Même chose pour chiffre hexadécimal (ne rajoute que les a-f, A-F latins)
g_ascii_*digitvalue*    #Pareil, mais seulement pour ASCII. Prend un CHAR_VAL, et renvoie INT_VAL

g_strreverse( STR_VAR ) #Renverse STR_VAR, et le renvoie.

type( GUNICHAR_VAL )    #Renvoie UNICODETYPE parmi : UNICODE_{CONTROL,FORMAT,UNASSIGNED,PRIVATE_USE,SURROGATE,LOWERCASE_LETTER,
                        #MODIFIER_LETTER,OTHER_LETTER,TITLECASE_LETTER,UPPERCASE_LETTER,SPACING_MARK,ENCLOSING_MARK,
                        #NON_SPACING_MARK,DECIMAL_NUMBER,LETTER_NUMBER,OTHER_NUMBER,CONNECT_PUNCTUATION,DASH_PUNCTUATION,
                        #CLOSE_PUNCTUATION,FINAL_PUNCTUATION,INITIAL_PUNCTUATION,OTHER_PUNCTUATION,OPEN_PUNCTUATION,
                        #CURRENCY_SYMBOL,MODIFIER_SYMBOL,MATH_SYMBOL,OTHER_SYMBOL,LINE_SEPARATOR,PARAGRAPH_SEPARATOR,
                        #SPACE_SEPARATOR}
break_type(GUNICHAR_VAL)#Renvoie UNICODEBREAKTYPE parmi : UNICODE_BREAK_{MANDATORY,CARRIAGE_RETURN,LINE_FEED,COMBINING_MARK,
                        #SURROGATE,ZERO_WIDTH_SPACE,INSEPARABLE,NON_BREAKING_GLUE,CONTINGENT,SPACE,AFTER,BEFORE,
                        #BEFORE_AND_AFTER,HYPHEN,NON_STARTER,OPEN_PUNCTUATION,CLOSE_PUNCTUATION,QUOTATION,EXCLAMATION,
                        #IDEOGRAPHIC,NUMERIC,INFIX_SEPARATOR,SYMBOL,ALPHABETIC,PREFIX,POSTFIX,COMPLEX_CONTEXT,AMBIGUOUS,
                        #UNKNOWN,NEXT_LINE,WORD_JOINER,HANGUL_L_JAMO,HANGUL_V_JAMO,HANGUL_T_JAMO,HANGUL_LV_SYLLABLE,
                        #HANGUL_LVT_SYLLABLE,CLOSE_PARANTHESIS}

I18N.H ==>              #Inclure <glibmm/i18n.h> après avoir défini macros GETTEXT_PACKAGE et LOCALEDIR (arguments de 
                        #bindtextdomain()) :
                        #   - définit macros (me semblent inutiles) :
                        #     _( String ) -> dgettext( GETTEXT_PACKAGE, String ) (équivaut à gettext() si pas library)
                        #     N_( String ) -> ( String )
                        #     C_( Contexte, String ) -> pdgettext( Contexte, GETTEXT_PACKAGE, String )
                        #   - définit deux fonctions :
                        #     - g_get_local_variants( STR ) : renvoie la locale STR décomposée de plus en plus, sous forme de 
                        #       STR_ADR, par exemple "fr_FR" -> "fr_FR", "fr"
                        #     - g_get_language_names() : pareil, sauf que :
                        #       - utilise locale courante
                        #       - regarde ensemble de LANGUAGE, LC_* et LANG
                        #       - renvoie aussi en dernier ressort "C" locale
                        #       - valeur renvoyée être const const

                                  ┌──────────────┐
                                  │   MAINLOOP   │
                                  └──────────────┘

MainLoop                #Main loop. Gtk::Main n'est pas un enfant de MAINLOOP mais semble en contenir une.
                        #L'instance par défaut (ou toute nouvelle instance) != du GTK::MAIN
MainLoop::create
( [REFPTR<MAINCONTEXT>])#Par défaut MainContext::get_default()
MAINLOOP.run()          #
MAINLOOP.quit()         #
MAINLOOP.is_running()   #
MAINLOOP.get_context()  #Renvoie le REFPTR<MAINCONTEXT> associé

MainContext             #Contexte d'un MAINLOOP.
MainContext::create()   #
MainContext::
get_default()           #
MAINCONTEXT.
signal_timeout()        #Renvoie un SIGNALTIMEOUT
MAINCONTEXT.acquire()   #Essaie de locker le mutex interne à MAINCONTEXT.

signal_timeout()        #Renvoie un SIGNALTIMEOUT lié au MainContext par défaut.
SignalTimeout           #Sert à connecter un fonctor intervenant à intervals fixes de la main loop.
SIGNALTIMEOUT.connect   #
( SIGC::SLOT<BOOL>,     #Invoque SLOT toutes les UINT_VAL millisecondes de la main loop jusqu'à ce que SLOT renvoie false.
UINT_VAL )              #Renvoie un SIGC::CONNECTION.
SIGNALTIMEOUT.
connect_seconds*        #Pareil, mais toutes les UINT_VAL secondes.
SIGNALTIMEOUT.
connect_*_once*         #Comme deux précédents, mais ne le fait qu'une fois, et ne renvoie pas de SIGC::CONNECTION

signal_idle()           #Renvoie un SIGNALIDLE lié au MainContext par défaut.
SignalIdle              #Comme signal_timeout, mais est effectué quand rien ne se passe.
SIGNALIDLE.connect      #
( SIGC::SLOT<BOOL> )
SIGNALIDLE.connect_once #
( SIGC::SLOT<BOOL> )

                                  ┌────────────────────┐
                                  │   MULTITHREADING   │
                                  └────────────────────┘

Thread                  #
Thread::create
( SIGC::SLOT<VOID>,     
BOOL_VAL )              #Lance le thread et le renvoie sous THREAD_ADR. Si false, impossible de faire join().
Thread::self()          #Renvoie le THREAD_ADR courant.
Thread::yield()         #Thread courant donne la main
Thread::exit()          #Stoppe le thread. Lance une exception THREAD::EXIT : attention à ne pas la catcher.
                        #Le faire pour quitter tout thread (même fin du thread), sinon memory leak.
THREAD.join()           #Attend que THREAD finisse

Mutex                   #
MUTEX.lock()            #Pas thread-safe : utiliser Mutex::Lock
MUTEX.trylock()         #Renvoie BOOL_VAL
MUTEX.unlock()          #

Mutex::Lock             #RAII Mutex
MUTEX::LOCK
( MUTEX[, ARGS] )       #Invoque MUTEX.lock(). ARGS peut être Threads::NOT_LOCK (comme boost::defer_lock) ou Threads::TRY_LOCK
....acquire()           #Invoque MUTEX.lock()
....try_acquire()       #Invoque MUTEX.trylock()
....release()           #Invoque MUTEX.unlock()
....locked()            #Renvoie BOOL_VAL

RecMutex                #
RecMutex::Lock          #Comme Mutex, mais recursif (cf boost::recursive_mutex)

RWMutex                 #Comme Mutex, sauf que le verrou s'applique sur l'écriture ou la lecture.
reader_*lock()          #
writer_*lock()          #
RWMutex::ReaderLock     #
RWMutex::WriterLock     #

Cond                    #Condition variable
COND.signal()           #Similaire à BOOST::CONDITION_VARIABLE.notify_one()
COND.broadcast()        #Similaire à BOOST::CONDITION_VARIABLE.notify_all()
COND.wait(MUTEX_VAR)    #
COND.wait_until
(MUTEX_VAR, TIMEVAL_VAL)#

                                  ┌──────────────┐
                                  │   CHECKSUM   │
                                  └──────────────┘

Checksum                #
CHECKSUM([CHECKSUMTYPE])#Parmi : Checksum::CHECKSUM_{MD5,SHA1,SHA256}. Si pas de CHECKSUMTYPE, est vide.
( CHECKSUM )            #Renvoie false si CHECKSUM vide
CHECKSUM.update
( CHECKSUM_ARGS )       #Feed le checksum avec CHECKSUM_ARGS : soit STRING, ou ULONG_VAL octets depuis UCHAR_ADR
CHECKSUM.get_string()   #Renvoie le digest sous forme de STRING
CHECKSUM.get_digest
( UCHAR_ADR, ULONG_ADR )#Renvoie le digest à partir d'UCHAR_ADR, et met taille dans ULONG_ADR
CHECKSUM.reset()        #Remet à 0
Checksum::get_length
( CHECKSUMTYPE )        #Renvoie taille du digest sous forme de LONG_ADR
Checksum::compute_
checksum( CHECKSUMTYPE, 
CHECKSUM_ARGS )         #Renvoie digest sous forme de STRING

                                  ┌──────────┐
                                  │   DATE   │
                                  └──────────┘

Date                    #Représente un jour (calendrier grégorien proleptique) ("C : *_free")
DATE()                  #Constructor pour date invalide (g_date_new())
DATE( UINT32_VAL )      #Construit à partir d'un jour julien (g_date_new_julian())
DATE( UCHAR_VAL, MONTH, #Construit à partir de jour UCHAR_VAL, Month (enum avec Date::BAD_MONTH, Date::JANUARY, ...,
UINT16_VAL )            #Date::DECEMBER) et année UINT16_VAL (g_date_new_dmy())
DATE.set_dmy( ARGS )    #Même arguments que constructor précédent
DATE.{g,s}et_day
( UCHAR_VAL )           #
DATE.{g,s}set_month
( MONTH )               #
DATE.{g,s}et_year
( UINT16_VAL )          #
DAT.{g,s}et_julian
( UINT32_VAL )          #
DATE.set_time( TIME_T ) #
DAT.to_struct_tm(TM_VAR)#Met DATE dans TM_VAR
DATE.set_time_current() #Initialise avec date courante.
DATE.set_parse( USTRING)#Initialise avec une représentant USTRING de la date, selon le date format "%x" (DD/MM/YYYY de la
                        #locale courante). Devine intelligemment le délimiteur. Si problème, met une date invalide.

DATE.clear()            #Rend date invalide
DATE.valid()            #Renvoie false si date invalide ou non-existant.
Date::valid_*( ARGS )   #Soit * et ARGS comme pour DATE.set_*, renvoie false si invalide

DATE.format_string      #Renvoie USTRING après remplissage des "%*" (séquence d'échappement date) selon DATE, sous forme
( USTRING )             #d'USTRING.
                        #Faire un if ( DATE.valid() avant )
                        #Exception Glib::ConvertError si problème.
                        #Equivalent C :
                        #g_date_strftime( STR, ULONG_VAL, STR2, GDATE_ADR ) : écrit dans buffer STR, de taille ULONG_VAL
                        #octets, et renvoie nombre d'octets écrits (ou 0 si buffer trop petit). STR2 est le format string.

DATE.get_weekday()      #Renvoie DATE::WEEKDAY, parmi : BAD_WEEKDAY, MONDAY, ..., SUNDAY
DATE.get_day_of_year()  #Renvoie UINT_VAL
DATE.get_{monday,sunday,#Renvoie numéro de la semaine dans l'année sous forme d'UINT_VAL. La première semaine est la première
iso8601}_week_of_year() #avec 4 jours ou + ("iso8601"), ou un seul ("monday" et "sunday"). La semaine commence le dimanche si
                        #"sunday".
Date::get_
{monday,sunday}_weeks_
in_year( UINT16_VAL )   
Date::get_days_in_month 
( MONTH, UINT16_VAL )   #Renvoie nombre de jours, sous forme d'UCHAR_VAL
DATE.is_{first,last}_
of_month()              #Renvoie BOOL_VAL
Date::is_leap_year
( UINT16_VAL )          #Renvoie BOOL_VAL

DATE.{add,substract}_
{days,months,years}     #
( INT_VAL )             #Rajoute ou supprime des jours/mois/année, et renvoie par référence
DATE - DATE2            #Renvoie INT_VAL. Equivalent : DATE.days_between( DATE2 )
DATE == DATE2           #
DATE < DATE2, etc.      #Quasi-équivalent : DATE.compare( DATE2 ), qui renvoie -1, 0 ou 1

DATE.clamp_min( DATE2 ) #if ( DATE < DATE2 ) DATE = DATE2; (C++ only)
DATE.clamp_max( DATE2 ) #if ( DATE > DATE2 ) DATE = DATE2; (C++ only)
DATE.clamp(DATE2, DATE3)#Combinaison
DATE.order( DATE2 )     #if ( DATE > DATE2 ) swap( DATE, DATE2 )

usleep( ULONG_VAL )     #Effectue un sleep d'ULONG_VAL microsecondes
g_get_monotonic_time()  #Renvoie nombres de microsecondes écoulées depuis un certain nombre d'heures (INT64_VAL avec un cycle)
                        #Sur certaines config de Windows, ce temps peut être mis à jour que chaque 10 millisecondes.
                        #A utiliser pour des intervals de temps courant.

DateTime                #Représente une date + time ("C : *_ref")
DateTime::create_now
( TIMEZONE )            #Renvoie la DATETIME courante, selon TIMEZONE ("C : *new_now")
DateTime::create_now_
[local|utc]()           #Pareil, mais pour TIMEZONE locale, ou UTC ("C : *new_now_[local|utc]")
DateTime::create_now_
[local|utc]( INT64_VAL )#Pareil, mais avec date désignée par Unix Time INT64_VAL ("C : *new_from_unix_[local|utc]")
DateTime::create
( TIMEZONE, 5 INT_VAL,  #Renvoie la DATETIME représentée par TIMEZONE, puis année, mois, jour, heure, minutes, secondes.
DOUBLE_VAL )            #("C : *new")
DateTime::create_
[local|utc]( 5 INT_VAL, 
DOUBLE_VAL )            #Pareil, mais pour TIMEZONE locale ou UTC ("C : *new_[local|utc]")

DATETIME.format(USTRING)#Comme pour DATE.format_string()

DATETIME.get_ymd
( 3 INT_VAR )           #Met dans les VAR
DATETIME.get_{year,
month,hour,minute,
second,microsecond}()   #Sous forme d'INT_VAL
DATETIME.get_seconds()  #Sous forme de DOUBLE_VAL
DATETIME.get_{day_of_
year,day_of_week}()     #Sous forme d'INT_VAL
DATETIME.to_unix()      #Renvoie Posix Time, en INT64_VAL

DATETIME.add(INT64_VAL) #Renvoie un DATETIME avec un ajout/suppression de INT64_VAL microsecondes
DATETIME.add_{years,
months,weeks,days,hours,
minutes}( INT_VAL )     
DATETIME.add_seconds
( DOUBLE_VAL )          #Pareil
DATETIME.add_full( ARGS)#Pareil, et mêmes ARGS que DateTime::create()
DATETIME.difference
( DATETIME2 )           #Renvoie DATETIME - DATETIME2, sous forme d'INT64_VAL microsecondes
DATETIME.compare
( DATETIME2 )           #Renvoie comparaison (-1, 0 ou 1)
DATETIME.equal(DATETIM2)#Comme un ( DATETIME == DATETIME2 )

DATETIME.hash()         #Renvoie un fingerprint sous forme de UINT_VAL (dont la timezone)

DATETIM.get_utc_offset()#Renvoie UTC offset sous forme d'INT64_VAL, en minutes
DATETIME.get_timezone_
abbreviation()          #Renvoie timezone name sous forme d'USTRING
DATETIME.
is_daylight_savings()   #

DATETIME.to_timezone
( TIMEZONE )
DATETIME.to_utc()
DATETIME.to_local()     #Renvoie DATETIME avec une autre timezone

TimeZone                #("C : *_ref")
TimeZone::create(USTRNG)#Renvoie une TIMEZONE. USTRING est comme pour boost::date_time, ou peut être simplement ±HH[[:]MM]
TimeZone::create_local()#Renvoie TIMEZONE locale
TimeZone::create_utc()  #Renvoie TIMEZONE UTC
TIMEZONE.find_interval  #Renvoie interval pour l'heure (Posix Time) INT64_VAL, selon TIMEZONE, pour une heure étant
( TIMETYPE, INT64_VAL ) #TIMETYPE, parmi : TIME_TYPE_{STANDARD,DAYLIGHT,UNIVERSAL} (locale sans DST, locale avec DST, UTC)
                        #L'interval est le time shift depuis l'heure normale d'une timezone, dû à un DST
TIMEZONE.adjust_interval
( TIMETYPE, INT64_VAR ) #Pareil, mais modifie INT64_VA3 en conséquence.
TIMEZONE.
get_abbreviation(INTVAL)#Renvoie l'abbréviation de la timezone, avec comme indication également l'interval INT_VAL.
TIMEZONE.get_offset
( INT_VAL )             #Même chose pour l'offset UTC en INT32_VAL, en minutes.
TIMEZONE.is_dst(INT_VAL)#Même chose pour le fait d'être en DST

Timer                   #Chrono avec résolution à la microseconde ("C : *_destroy"). (En C, new() invoque g_timer_start(),
                        #et TIMER.start() équivaut à g_timer_continue())
                        #Construction démarre chrono.
TIMER.stop()
TIMER.start()
TIMER.reset()
TIMER.elapsed([ULONGVR])#Renvoie nombre de secondes en DOUBLE_VAL, et si ULONG_VAR, nombre de microsecondes est mis dedans.

                                  ┌───────────┐
                                  │   INFOS   │
                                  └───────────┘

GQuark                  #Représente une string associée à un id (comme dans une associative array).
                        #Est lui même en fait cet id (un UINT32_VAL)
g_quark_from[_static]_  #Renvoie le GQUARK associé à la string STR ou, si aucun n'est associé, le crée.
string( STR )           #Si "static_", utilise STR et non le copie : modifier STR invalide donc le GQUARK.
g_quark_try_string      #
( STR )                 #Renvoie le GQUARK associé à la string STR ou, si aucun n'est associé, 0.
g_quark_to_string       #
( GQUARK )              #Renvoie la string associée à GQUARK sous forme de const STR
g_intern_[static_]string#Retourne un pointeur STR garanti d'être toujours le même pour une string STR associée à un GQUARK
( STR )                 #donnée. Permet de faire des comparaisons entre deux GQUARK rapide. Cf dessus pour "static_"

QueryQuark              #Equivalent (avec son enfant Quark) C++ de GQuark. 
QUERYQUARK( STR )       #STR doit être UTF8
QUERYQUARK( USTRING )
operator ustring()
QUERYQUARK.id()         #Renvoie un GQUARK (operator GQuark aussi disponible)
QUERYQUARK == QUERYQURK2
QUERYQUARK != QUERYQURK2

Quark                   #Enfant de QueryQuark, pas de nouvelle méthode, utilisant "from_string" dans constructor là où 
                        #QueryQuark utilise "try_string"

GError                  #Pour 
                        #Si erreur non-recoverable par le caller, préférer g_return_val_if_fail(), assert(), etc.

g_return_val_if_fail    #
( TEST, FALSE )         #Affiche warning "assertion TEST failed" et quitte runtime.
g_return_val_if_reached #
( FALSE )               #Equivaut à g_return_val_if_fail( false, FALSE )
g_warn_*                #Comme g_return_val*, mais seulement warning, et sans argument FALSE

g_print( STR )          #Equivaut à puts( STR ), sauf que l'on peut redéfinir handler via g_set_print_handler( FONC_ADR ),
                        #FONC_ADR prenant STR en argument et renvoyant rien.
g_printerr( STR )       #Equivaut à fputs( stderr, STR ). Pareil pour handler, sauf que c'est g_set_printerr_handler
g_strerror( INT_VAL )   #Comme strerror, mais renvoie STR sous forme UTF8, et est plus portable.
g_strsignal( INT_VAL )  #Pareil pour un signal

g_log( STR1,            #STR1 est le log domain : si application, mettre G_LOG_DOMAIN (équivaut à NULL), si bibliothèque, 
GLOGLEVELFLAGS, ... )   #mettre nom de la bibliothèque.
                        #GLOGLEVELFLAGS est le niveau d'urgence parmi G_LOG_LEVEL_{ERROR,CRITICAL,WARNING,MESSAGE,INFO,DEBUG}
                        #... est le message à afficher, en format printf. Sera précédé de log domain et du niveau d'urgence.
                        #Imprime sur stderr pour >= MESSAGE, et stdout pour <= INFO
g_logv*                 #Comme g_log, mais utilise non ..., mais une STR suivi d'une va_list
g_error*
g_critical*
g_warning*
g_message*
g_debug*                #Macro sur g_log, remplissant automatiqument le GLOGLEVELFLAGS, et G_LOG_DOMAIN pour STR1
g_log_set_handler( STR, #Modifie fonction invoquée par g_log, pour un log domain STR1 et un GLOGLEVELFLAGS donné.
GLOGLEVELFLAGS,FONC_ADR,#FONC_ADR renvoie rien et prend comme argument const STR1, GLOGLEVELFLAGS, const STR2, VOID_ADR, les 
VOID_ADR )              #trois premiers étant les ARGS de g_log, et le dernier celui statique invoqué par g_log_set_handler()
                        #GLOGLEVELFLAGS :
                        #  - doit être combiné avec G_LOG_FLAG_FATAL | G_LOG_FLAG_RECURSION
                        #  - peut être G_LOG_LEVEL_MASK (également combiné) pour désigner tous les GLOGLEVELFLAGS possibles.
                        #Renvoie un id UINT_VAL, à utiliser par g_log_remove_handler()
g_log_remove_handler    #
( STR, UINT_VAL )       #Enlève un log handler.
g_log_set_default_      #
handler( FONC_ADR,      
VOID_ADR )              #Comme g_log_set_handler, mais pour tous les log domain et GLOGLEVELFLAGS. Renvoie FONC_ADR.
g_log_set_fatal_mask    #
( STR, GLOGLEVELFLAGS ) #Pour un log domain STR donné, fait que GLOGLEVELFLAGS abort le programme. Par défaut G_LOG_FATAL_MASK.
g_log_set_always_fatal  #
( GLOGLEVELFLAGS )      #Comme g_log_set_fatal_mask(), mais pour tous les log domains
