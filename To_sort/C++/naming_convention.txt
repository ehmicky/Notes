
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   NAMING_CONVENTION   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

NAMING CONVENTION ==>   #  - MyClass, MyStruct, MyType
                        #     - alternative : my_class, my_struct, my_type
                        #  - myFunction
                        #     - alternative : my_function
                        #  - variable
                        #  - MACRO
                        #Toujours explicite.

NOM DES FICHIERS ==>    #Lowercase ; commence par une lettre ; que des lettres, . - _ ; . utilisé que pour une extension suivi
                        #de max 3 lettres ; utiliser les extensions ; avoir des noms explicites (ou pour une définition de
                        #classe, le nom de la classe ; utiliser les noms "dédiés" (ex: README)

HUNGARIAN NOTATION ==>  #Il s'agit d'une convention (facultative, mais 
                        #recommandée) d'écriture des noms de variables, qui fait
                        #préfixer leur nom (commençant par une majuscule) par
                        #des lettres minuscules indiquant :
                        #  - son type :

b                       #bool
ch                      #char utilisé comme caractère imprimable
char                    #char utilisé comme un nombre
d                       #double, long double
e                       #enum
f                       #float
n                       #short, int, long, long long
s                       #struct     
str                     #C++ string     
sz                      #C-string   

                        #  - précédé par son type, de manière plus poussée :

a                       #Static array
p                       #Pointeur
pa                      #Array dynamique
r                       #Reference  
u                       #Unsigned   

                        #  - précédé par sa portée :

g_                      #Globale
m_                      #Membre d'une classe
s_                      #Membre statique d'une classe
(rien)                  #Locale
