
                     
   TEAM_MANAGEMENT   
                     


                                  ┌──────────┐
                                  │   TEAM   │
                                  └──────────┘

TEAM MEMBERS MANAGING ==>         #Must understand: processes, employees skills/weaknesses/personality
                                  #Must provide: shared long-term focus, clear/achievable short-term goals

INTERVENING ==>                   #Should only intervene in extreme cases, prefer team self-manage instead
                                  #  - opposite is "micro-management"
                                  #Prefer facilitating communication instead of forcing decisions:
                                  #  - every key player voice should be heard
                                  #  - clear|agreed description|evidence of problem
                                  #  - confirm solution is understood by all

                                  ┌─────────────────────────┐
                                  │   INFORMATION SHARING   │
                                  └─────────────────────────┘

KNOWLEDGE SHARING ==>             #Should promote knowledge sharing and mentoring inside teams and cross teams
                                  #The opposite is "intellectual violence", i.e. when people use knowledge to dominate others:
                                  #  - using concepts not understood by others, in order to sideline them from decision-making

MUSHROOM MANAGEMENT ==>           #Antipattern where:
                                  #  - software developers and end-users do not communicate
                                  #  - entertained by management in order to prevent developers from influencing decision making
                                  #Problems:
                                  #  - poor architecture/design choices because of requirements not clear|detailed enough
                                  #  - less feedback from end-users, e.g. through prototyping or short iterations
