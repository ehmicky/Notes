
                                  ┏━━━━━━━━━━━━━━━┓
                                  ┃   MOUSETRAP   ┃
                                  ┗━━━━━━━━━━━━━━━┛

VERSION ==>                       #1.4.6
                                  #High-level API on DOM key events handling, e.g. for sequence of keys or shortcuts
                                 ##Means must download extra "plugin" JavaScript file.

Mousetrap.bind(KSTR[_ARR],        #Event handle on keystrokes KSTR:
FUNC(EVENT, KSTR)[, STR2])        #  - simple char, e.g. "4" or "?"
                                  #  - "command|shift|ctrl|alt|option|meta|mod+CHAR": mod is command on Mac, ctrl otherwise
                                  #  - "up|down|left|right"
                                  #  - "backspace|tab|enter|return|capslock|esc|escape|space|pageup|pagedown|end|home|
                                  #    left|up|right|down|ins|del"
                                  #  - "... ...": sequence
                                  #STR2 specifies which DOM event, among "keypress", "keydown" or "keyup".
                                  #Def to either "keypress" or "keydown" depending on case.
                                 ##Can also use { KSTR: FUNC(...) } instead of KSTR, FUNC(...)
Mousetrap.unbind(KSTR[_ARR])      #
Mousetrap.reset()                 #Unbinds everything
Mousetrap.trigger(KSTR[, STR2])   #Triggers a combination KSTR (not the actual keypress event, just the Mousetrap callback).

Mousetrap.stopCallback            #Filters whether Mousetrap should handle it (false) or not (true)
(EVENT, ELEM, KSTR)->BOOL         #Def. implementation:
                                  #  if element.className === "mousetrap"; return false
                                  #  return element.tagName === "INPUT|SELECT|TEXTAREA" or element.contentEditable === "true"  
                                  #Meaning Mousetrap not fired on <input>, <textarea> and <select> unless they have class .mousetrap
                                  #Can override if custom controls not based on <input>, etc.
Mousetrap.bindGlobal(...)        ##Like Mousetrap.bind(...) but does not use stopCallback().

Mousetrap.[un]pause()            ##Pause Mousetrap UI interactions, not Mousetrap.trigger()
Mousetrap.record(FUNC(KSTR))     ##Record next typed KSTR
