
                                  ┏━━━━━━━━━━━━━┓
                                  ┃   NG-GRID   ┃
                                  ┗━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - ngtable
                                  #  - ng-grid (prefer)

VERSION ==>                       #Part of Angular UI. Also called UI grid. Bower package: angular-ui-grid
                                  #Features:
                                  #  - UI-friendly: menus, selection, navigation, inline edits (with backend changes),
                                  #    save state, move/resize/hide columns
                                  #  - table organization: filtering, sorting, grouping, sub-tables, footers, columns pinning
                                  #  - performance: good on big data, infinite scroll
                                  #  - export/import
                                  #  - Angular data binding for both rows and columns
                                  #Must include ngAnimate and ngTouch.
                                  #Version 3.0.0-rc.20
                                  #MODULE "ui.grid"
                                  #FEATURE: means require also MODULE "ui.grid.FEATURE" + DIRECTIVE ui-grid-FEATURE
                                  #SERVICE are available for almost everything (e.g.uiGridCellNavService) to decorate
                                  #(change builtin implementation functions) in order to customize. See online doc.

GRID                              #GRID. Available through GRIDA.grid.
gridApi                           #GRIDA. Available through PARAM_OBJ.onRegisterApi(GRIDA)
uiGridConstants                   #CONST. SERVICE.
uiGridFEATUREConstants            #CONSTFEATURE. SERVICE.

<any>                             #PARAM_OBJ:
  ui-grid="PARAM_OBJ_EXPR"        #  - data ROWDEF_ARR: data being shown, row by row. See columnDefs.
                                  #    Adds member $$hashKey to each object.
                                  #  - columnDefs COLDEF_ARR: data being shown, column by column
                                  #  - excludeProperties STR_ARR (def: ["$$hashKey"]): do not show COLDEF with this name
                                  #  - appScopeProvider SCOPE (def: parent SCOPE): make it available through GRID.appScope
                                  #    (since directive uses isolated scope)
                                  #GRIDA.core:
                                  #  - addRowHeaderColumn(COLDEF)
                                  #  - notifyDataChange(NUM): notify when data changed, according to flag CONSTDATACHANGE.*:
                                  #     - OPTIONS: PARAM_OBJ
                                  #     - EDIT: ROWDEF
                                  #     - COLUMN: COLDEF
                                  #     - ALL

COLDEF                            #COL definitions:
                                  #  - name STR: header title
                                  #  - field EXPR: data being shown, where each data OBJ is the context, e.g.:
                                  #     - "VAR[.VAR2]", "VAR[NUM]": look into data.VAR[.VAR2], etc.
                                  #     - "FUNC()": calls data.FUNC(), where this is current OBJ
                                  #  - flatEntityAccess BOOL (def: false): if true, faster but cannot use field "FUNC()"
                                  #  - [header]cellFilter "FILTER[: ARGS]": apply FILTER(VAL) to data being shown on UI
                                  #    (not on model)
                                  #  - cellTooltip BOOL|STR|FUNC(ROW,COL)->STR: if BOOL true, uses field STR

COL                               #Members:
                                  #  - name, field, sortingAlgorithm: like COLDEF
                                  #  - updateColumnDef(COLDEF)
                                  #  - setPropertyOrDefault(COLDEF, VAR_STR[, VAL]): sets COLDEF.VAR, or VAL if COLDEF.VAR null

ROW                               #Members:
                                  #  - entity ROWDEF
                                  #  - get[Entity]QualifiedColField(COL): returns field as "[row.]FIELD"
                                  #  - grid GRID
                                  #  - uid STR


STYLE ==>                         #PARAM_OBJ:
                                  #  - row|headerHeight NUM (def: 30)
                                  #  - minRowsToShow NUM (def: 10): to calculate height
                                  #  - minimumColumnSize NUM (def: 10)
                                  #  - row|headerTemplate HTML_STR|URL: customize cell|header template.
                                  #  - showHeader BOOL (def: true)
                                  #  - showGridFooter BOOL (def: false): if true, display footer for all columns with
                                  #    number of items: total, filtered, selected
                                  #COLDEF:
                                  #  - width CSS_STR
                                  #  - minWidth|maxWidth NUM
                                  #  - [header]cellClass STR|FUNC(GRID, ROW, COL, NUM, NUM2)->STR: CSS class assigned to
                                  #    each [header] cell
                                  #  - [header]cellTemplate HTML_STR|URL
                                  #ROW:
                                  #  - height NUM


GRID MENU ==>                     #PARAM_OBJ:
                                  #  - enableGridMenu BOOL (def: false): if true, show menu button on top-right, allowing
                                  #    toggling visibility of columns
                                  #  - gridMenuTitleFilter "FILTER[: ARGS]": apply FILTER(VAL) to column names shown in
                                  #    grid menu
                                  #  - gridMenuCustomItems OBJ_ARR: same as menuItems, but for gridMenu.
                                  #GRIDA.core:
                                  #  - addToGridMenu(GRID, OBJ_ARR)
                                  #  - removeFromGridMenu(GRID, ID_STR)


COLUMN MENU ==>                   #PARAM_OBJ:
                                  #  - enableColumnMenus BOOL: if true (def), each column gets a menu with sorting options, etc
                                  #COLDEF:
                                  #  - enableColumnMenu BOOL
                                  #  - menuItems OBJ_ARR: add items to column menu, where OBJ:
                                  #     - title STR
                                  #     - icon STR: CSS class
                                  #     - action(AEVENT): when clicked on
                                  #     - shown()->BOOL: whether to show or not.
                                  #     - active()->BOOL: whether to highlight or not.
                                  #     - context OBJ: bind to this.context. Can be e.g. SCOPE
                                  #    In action|shown|active(), this:
                                  #     - is OBJ
                                  #     - this.grid GRID
                                  #     - this.context
                                  #     - this.context.col COL


HIDDING ==>                       #PARAM_OBJ:
                                  #  - gridMenuShowHideColumns BOOL: same as enableHiding, but for grid menu, all cols
                                  #COLDEF:
                                  #  - enableHiding BOOL (def: true)
                                  #  - visible BOOL
                                  #COL:
                                  #  - hide|showColumn()
                                  #GRIDA.core:
                                  #  - on.columnVisibilityChanged(SCOPE, FUNC(COL))


SORTING ==>                       #PARAM_OBJ:
                                  #  - enableSorting BOOL (def: true): for multiple-cols sort: can shift-click, or use
                                  #    dropdown menu.
                                  #COLDEF:
                                  #  - enableSorting: like PARAM_OBJ
                                  #  - sort:
                                  #     - direction CONST.ASC|DESC
                                  #     - priority NUM (for multi-columns sorting)
                                  #  - suppressRemoveSort BOOL (def: false): if true, do not let users remove sorting
                                  #    Set to false on grouped column (FEATURE "grouping")
                                  #  - sortingAlgorithm(VAL, VAL2)->-1|0|1: for custom sorting. needs to start with:
                                  #     var nulls = GRIDA.core.sortHandleNulls(VAL, VAL2);
                                  #     if ( nulls !== null ) { return nulls } else { ... }
                                  #  - useExternalSorting BOOL (def: false): if true, do not use native sorting, so must
                                  #    implementing sorting by changing PARAM_OBJ.data in on.sortChanged()
                                  #GRIDA.core:
                                  #  - on.sortChanged(SCOPE, FUNC(GRID, COL_ARR))


FILTERING ==>                     #PARAM_OBJ:
                                  #  - enableFiltering BOOL (def: false)
                                  #COLDEF:
                                  #  - enableFiltering: like PARAM_OBJ
                                  #  - filter OBJ:
                                  #     - condition(STR, STR2, ROW, COL)->BOOL:
                                  #        - can use CONST.filter.FILTER builtin functions, where FILTER can be:
                                  #           - BEGINS|ENDS_WITH
                                  #           - LESS|GREATER_THAN
                                  #        - def: globbing only including * and can only be at end, beginning or both
                                  #     - flags.caseSensitive BOOL (def: true): with def. condition
                                  #     - term STR: propulates filter
                                  #     - placeholder STR: for filter input box
                                  #     - noTerm BOOL (def: true): if false, does not allow user input.
                                  #       To use when condition is set programatically, and does not need search input
                                  #  - filters OBJ_ARR: will show several search inputs
                                  #  - useExternalFiltering BOOL (def: false): same as useExternalSorting but for filters
                                  #COL:
                                  #  - filter[s]: like COLDEF
                                  #GRIDA.core:
                                  #  - on.filterChanged(SCOPE, FUNC())


FOOTER PER COLUMN ==>             #PARAM_OBJ:
                                  #  - showColumnFooter BOOL (def: false): if true, show footer for each column, according
                                  #    to aggregationType|footerCellTemplate
                                  #  - columnFooterHeight NUM
                                  #  - footerTemplate HTML_STR|URL
                                  #COLDEF:
                                  #  - footerCellClass: like cellClass, but for footer
                                  #  - footerCellFilter: like cellFilter, but for footer
                                  #  - footerCellTemplate HTML_STR|URL: should be <div class="ui-grid-cell-contents">...</div>
                                  #  - aggregationType FUNC(ARR)->HTML_STR: can also use builtin functions
                                  #    CONST.aggregationTypes.sum|avg|min|max|count
                                  #  - aggregationLabel STR: overrides first part of label, usually set from aggregationType
                                  #    NUM template
                                  #  - aggregationHideLabel BOOL (def: false): if true, hides aggregationLabel
                                  #COL:
                                  #  - getAggregationText(): returns aggregationLabel
                                  #  - getAggregationValue(): returns cell value after aggregation


FEATURE "grouping" ==>            #Similar to SQL grouping (grouping columns vs grouped columns) or to Excel pivot tables.
                                  #Some columns can be not grouping nor grouped, but there can just one set of
                                  #grouping vs grouped columns.
                                  #Does not work well with columns whose value are based on FUNC().
                                  #Let user group|ungroup and choose aggregation functions.
                                  #PARAM_OBJ:
                                  #  - enableGrouping BOOL (def: true)
                                  #  - groupingRowHeaderWidth NUM (def: 30): base width or grouping header, besides indents
                                  #  - groupingIndent NUM (def: 10): pixel shift at each sublevel
                                  #  - groupingRowHeaderAlwaysVisible BOOL: if false (def), do not show grouping row if no
                                  #    grouped row.
                                  #  - groupingShowCounts BOOL (def: true): show count in front of grouping column
                                  #COLDEF:
                                  #  - enableGrouping: like for PARAM_OBJ
                                  #  - grouping:
                                  #     - groupPriority NUM: make it a grouping column. Lower NUM means higher priority.
                                  #     - aggregation: CONSTGROUPING.COUNT|SUM|AVG|MAX|MIN: make it a grouped column.
                                  #  - groupingSuppressAggregationText BOOL (def: false): if true, remove the STR prepended
                                  #    to grouped column (e.g. "sum: "). To do if there is a cellFilter.
                                  #GRIDA.grouping:
                                  #  - expand|collapseAllRows()
                                  #  - expandAll BOOL
                                  #  - expand|collapseRow(ROW)
                                  #  - expandRowChildren(ROW): as opposed to expandRow(), collapse also grand-children
                                  #  - toggleRowGroupingState(ROW): toggle row
                                  #  - numberLevels NUM: number of grouping columns
                                  #  - rowExpandedStates OBJ.COL_VAR[.COL2_VAR...].state "expanded|collapsed":
                                  #    COL_VAR is grouping column, COL2_VAR grouped column


FEATURE "expandable" ==>          #PARAM_OBJ:
                                  #  - enableExpandable BOOL: if true (def): add child element, that appears with a toggle
                                  #    button for each row, e.g. another <div ui-grid>
                                  #  - enableExpandableRowHeader BOOL: if true (def), show toggle header. If false, must
                                  #    implement custom one and call GRIDA.expandable.*()
                                  #  - expandableRowTemplate HTML_STR|URL
                                  #  - expandableRowHeaderWidth NUM (def: 40)
                                  #  - expandableRowHeight NUM (def: 150)
                                  #  - expandableRowScope
                                  #GRIDA.expandable:
                                  #  - expand|collapse|toggleAllRows()
                                  #  - toggleRowExpansion(ROWDEF)
                                  #  - on.RowExpandedStateChanged(SCOPE, FUNC(ROW))
                                  #GRID.parentRow ROW: reference to parent


FEATURE "edit" ==>                #PARAM_OBJ:
                                  #  - cellEditableCondition BOOL|FUNC(SCOPE)->BOOL
                                  #  - editableCellTemplate STR: HTML, URL, or "ui-grid/dropdownEditor" (used for next two
                                  #    options, to have a dropdown menu).
                                  #  - enableCellEdit BOOL (def: true, except if type "object"): let user inline edit.
                                  #  - enableCellEditOnFocus BOOL: make it editable while navigating with FEATURE cellNav
                                  #COLDEF:
                                  #  - cellEditableCondition, editableCellTemplate, enableCellEdit[OnFocus]: like PARAM_OBJ
                                  #  - type "string|boolean|number|date|object" (def: "string"): uses checkbox, arrows,
                                  #    datepicker
                                  #  - editDropdownOptionsArray OBJ_ARR: id, value. Both used by <option>.
                                  #    Can use different member than id|value with editDropdownId|ValueLabel VAR_STR
                                  #  - editDropdownRowEntityOptionsArrayPath STR: alternative to editDropdownOptionsArray,
                                  #    where OBJ_ARR is ROWDEF[STR] (STR can be "VAR[.VAR2]", etc. like field)
                                  #  - editDropdownFilter: same as cellFilter but for dropdown options
                                  #GRIDA.core:
                                  #  - on.begin|after|cancelCellEdit(SCOPE, FUNC(ROW, COL[, NEW_VAL, OLD_VAL])):
                                  #    NEW_VAL|OLD_VAL only for afterCellEdit()


FEATURE "rowEdit" ==>             #Make inline edit save in the backend, i.e. call on.saveRow() when:
                                  #  - on same row and no action since rowEditWaitInterval
                                  #  - or on another row
                                  #Require FEATURE "edit".
                                  #PARAM_OBJ:
                                  #  - rowEditWaitInterval NUM (def: 2000 in ms): if -1, must manually flushDirtyRows() instead
                                  #ROW:
                                  #  - isDirty BOOL: will be saved, but not yet
                                  #  - isSaving BOOL
                                  #  - isError BOOL: saving PROMISE rejected
                                  #GRIDA.rowEdit:
                                  #  - on.saveRow(SCOPE, FUNC(ROWDEF)): must call setSavePromise()
                                  #  - setSavePromise(ROWDEF, PROMISE): sets the PROMISE to tell when saving is done
                                  #  - flushDirtyRows()->PROMISE: force saving dirty rows.
                                  #  - getDirty|ErrorRows(): returns ROW_ARR
                                  #  - setRowsDirty(ROWDEF_ARR)


FEATURE "pinning" ==>             #PARAM_OBJ:
                                  #  - enablePinning BOOL (def: true): let user move columns to extreme left|right
                                  #COLDEF:
                                  #  - enablePinning BOOL: like PARAM_OBJ
                                  #  - pinnedLeft|Right BOOL


FEATURE "cellNav" ==>             #PARAM_OBJ:
                                  #  - modifierKeysToMultiSelectCells BOOL (def: false): if true, allow selecting several
                                  #    cells while navigating, while pressing Ctrl/Shift
                                  #COLDEF:
                                  #  - allowCellFocus BOOL (def: true): if false, navigation jumps over that column
                                  #ROW_COL is { row: ROW, col: COL }
                                  #GRIDA.cellNav:
                                  #  - getFocusedCell(): returns ROW_COL (null if none)
                                  #  - getCurrentSelection(): returns ROW_COL_ARR ([] if none)
                                  #  - rowColSelectIndex(ROW_COL): returns -1 if cell not selected, NUM specifying the order
                                  #    it was selected otherwise.
                                  #  - scrollTo[Focus|IfNecessary](ROWDEF, COLDEF)
                                  #  - on.navigate(SCOPE, FUNC(NEW_ROW_COL, OLD_ROW_COL))


FEATURE "selection" ==>           #PARAM_OBJ:
                                  #  - enableRowSelection BOOL: if true (def), let programatically select row
                                  #  - enableRowHeaderSelection BOOL: if true (def), let user select row with checkboxes on
                                  #    left
                                  #  - enableSelectAll BOOL: if true (def) checkbox to select all.
                                  #    When adding new data, must call selectAllVisibleRows() if getSelectAllState() true.
                                  #  - multiSelect BOOL: single or multiple choice
                                  #  - modifierKeysToMultiSelectCells BOOL: like FEATURE "cellNav". Only if multiSelect true.
                                  #  - noUnselect BOOL: can select but not unselect. Only if multiSelect false.
                                  #  - enableSelectionBatchEvent BOOL: if true (def), calls on.rowSelectionChangedBatch()
                                  #  - selectionRowHeaderWidth NUM (def: 30): size of selection checkboxes on left
                                  #  - enableFooterTotalSelected BOOL: if true (def), show total selected as footer
                                  #  - isRowSelectable(ROW)->BOOL: condition whether can be selected
                                  #ROW:
                                  #  - setSelected(BOOL)
                                  #  - isSelected BOOL
                                  #GRIDA.selection:
                                  #  - selectRow|toggleRowSelection(ROWDEF)
                                  #  - selectRowByVisibleIndex(NUM)
                                  #  - unSelectRow(ROWDEF)
                                  #  - selectAll[Visible]Rows()
                                  #  - clearSelectedRows()
                                  #  - getSelected[Grid]Rows()->ROW_ARR
                                  #  - selectedCount NUM
                                  #  - getSelectAllState(): returns true if "select all" checkbox currently used
                                  #  - setMultiSelect(BOOL)
                                  #  - setModifierKeysToMultiSelectCells(BOOL)
                                  #  - on.rowSelectionChanged(SCOPE, FUNC(ROW))
                                  #  - on.rowSelectionChangedBatch(SCOPE, FUNC(ROW_ARR))


FEATURE "moveColumns" ==>         #PARAM_OBJ:
                                  #  - enableColumnMoving BOOL: if true (def), let user move columns
                                  #COLDEF:
                                  #  - enableColumnMoving BOOL: like PARAM_OBJ
                                  #GRIDA.colMovable:
                                  #  - moveColumn(OLD_NUM, NEW_NUM)
                                  #  - on.columnPositionChanged(SCOPE, FUNC(COL, OLD_NUM, NEW_NUM))


FEATURE "resizeColumns" ==>       #PARAM_OBJ:
                                  #  - enableColumnResizing BOOL (def: true): let user resize columns
                                  #COLDEF:
                                  #  - enableColumnResizing BOOL: like PARAM_OBJ
                                  #GRIDA.colResizable:
                                  #  - on.columnSizeChanged(SCOPE, FUNC(COL, NUM)): NUM is the change


VIRTUALIZATION ==>                #Create/destroy only the DOM elements that can be viewed on the viewport, so never heavy
                                  #even with big tables.
                                  #PARAM_OBJ:
                                  #  - excessColumns|Rows NUM (def: 4): number of extra non-visible to render
                                  #  - [column]VirtualizationThreshold NUM (def: 20|10): when to start using virtualization for
                                  #    columns|rows
                                  #  - maxVisibleColumnCount NUM (def: 200)
                                  #GRIDA.core:
                                  #  - getVisibleRows()->ROW_ARR
                                  #  - set|clearRowInvisible(ROWDEF)
                                  #  - on.rowsVisibleChanged(SCOPE, FUNC(NUM))
                                  #ROW:
                                  #  - visible BOOL


FEATURE "autoResize" ==>          #Change grid size if container size changes. Polls every 250 ms.
                                  #Without it, problems with tables that appear first in width|height-less container
                                  #(e.g. hidden), except if instead:
                                  #  - specify expicit width|height
                                  #  - delay the table rendering until container has width|height, e.g. with simple
                                  #    ng-if="BOOL_EXPR", which is true when container has width|height
                                  #  - manually call GRIDA.core.handleWindowResize()->PROMISE
                                  #Problems can arise when table appear in an animation of the container width|height.
                                  #GRIDA.core:
                                  #  - on.canvasHeightChanged(SCOPE, FUNC(OLD_NUM, NEW_NUM))


FEATURE "saveState" ==>           #PARAM_OBJ:
                                  #  - saveFocus|Scroll|Widths|Order|Visible|Sort|Filter|Selection BOOL
                                  #    (def: true, except saveScroll)
                                  #  - saveRowIndentity(ROWDEF)->ID_STR: to define to make sure can go back to same rows
                                  #GRIDA.saveState:
                                  #  - save()->STATE_OBJ: returns current state (user interaction state, not ng-grid options)
                                  #    Can then save it the way we want.
                                  #  - restore(SCOPE, STATE_OBJ)


FEATURE "exporter" ==>            #CSV/PDF export.
                                  #Require package pdfmake for PDF. Must enableGridMenu true.
                                  #Has extra functions if FEATURE "selection" on.
                                  #PARAM_OBJ:
                                  #  - exporterSuppressMenu BOOL: if true (def), show export in grid menu
                                  #  - exporterMenuCsv|Pdf BOOL: if true (def), show option in grid menu
                                  #  - exporterMenuLabel STR (def: "Export")
                                  #  - exporterSuppressColumns STR_ARR: do not exports those columns
                                  #  - exporterFieldCallback(GRID, ROW, COL, VAL)->VAL2: modify cell values before export
                                  #  - exporterHeaderFilter: like cellFilter but for exporter header names.
                                  #    Use name if exporterHeaderFilterUseName true, displayName if false (def)
                                  #  - exporterOlderExcelCompatibility BOOL (def: false): if true, do not use UTF-16, in order
                                  #    to support older Excel versions
                                  #  - exporterCsvFileName STR (def: "download.csv")
                                  #  - exporterCsvColumnSeparator STR (def: ",")
                                  #  - exporterPdfDefault|Table[Header]Style STYLE_OBJ. See pdfmake, e.g. include:
                                  #     - fontSize NUM
                                  #     - bold|italics BOOL
                                  #     - color STR
                                  #     - margin NUM_ARR
                                  #  - exporterPdfHeader|Footer VAL|FUNC(NUM, NUM2)->VAL (current page, total page).
                                  #    VAL can be STR, or pdfmake OBJ, e.g.:
                                  #     - text STR
                                  #     - style "*Style"
                                  #  - exporterPdfCustomFormatter(OBJ)->OBJ, where OBJ is:
                                  #     - styles.*Style STYLE_OBJ
                                  #  - exporterTableLayout OBJ. See pdfmake.
                                  #  - exporterPdfOrientation "portrait|landscape" (def: "landscape")
                                  #  - exporterPdfPageSize STR, e.g. STR: pdfmake options, e.g. "A4" (def), "LETTER", etc.
                                  #  - exporterPdfMaxGridWidth NUM (def: 720 for "A4", 670 for "LETTER")
                                  #COLDEF:
                                  #  - exporterPdfAlign "left|right|center"
                                  #  - exporterSuppressExport BOOL
                                  #GRIDA.exporter:
                                  #  - csv|pdfExport(NUM, NUM2): NUM|NUM2 are for rows|cols and can be
                                  #    CONSTEXPORTER.ALL|VISIBLE|SELECTED


FEATURE "importer" ==>            #CSV/JSON import. Can add support for other formats.
                                  #Require package csv-js
                                  #PARAM_OBJ:
                                  #  - enableImporter BOOL (def: true)
                                  #  - importerShowMenu BOOL: if true (def), show in GridMenu. Musr enableGridMenu true.
                                  #  - importerDataAddCallback(GRID, OBJ_ARR): to the simplest, concat OBJ_ARR to data
                                  #  - importerHeaderFilter(STR)->STR2: run on CSV headers or JSON keys before importing, e.g.
                                  #    if they are not in English (i18n)
                                  #  - importerNewObject FUNC: use new FUNC(OBJ) instead of OBJ
                                  #  - importerObjectCallback(GRID, OBJ)->OBJ2: use OBJ2 instead of OBJ. Called after
                                  #    importerNewObject
                                  #  - importerProcessHeaders(STR_ARR)->STR2_ARR: use STR2_ARR instead of STR_ARR as column
                                  #    headers
                                  #  - importerErrorCallback(GRID, STR, STR2, OBJ) (def: alert box + console.error()):
                                  #    STR is "importer.noHeaders|Objects|invalidCsv|invalidJson|jsonNotArray", STR2 error
                                  #    message, OBJ the problematic element
                                  #GRIDA.importer:
                                  #  - importFile(FILE): JavaScript FILE object


FEATURE "pagination" ==>          #PARAM_OBJ:
                                  #  - enablePagination BOOL
                                  #  - enablePaginationControls BOOL: if true (def), show footer with controls and info
                                  #  - paginationCurrentPage NUM (def: 1)
                                  #  - paginationPageSize NUM (def: paginationPageSizes[0], can be 0): current
                                  #  - paginationPageSizes NUM_ARR (def: [ 250, 500, 1000 ]): available
                                  #  - totalItems NUM: must be manually updated in some cases
                                  #  - useExternalPagination BOOL: like useExternalSorting, but for pagination
                                  #  - paginationTemplate HTML_STR|URL
                                  #GRIDA.pagination:
                                  #  - getPage()
                                  #  - getTotalPages()
                                  #  - previous|nextPage()
                                  #  - seek(NUM): change page
                                  #  - on.paginationChanged(SCOPE, FUNC(NEW_NUM, PAGE_SIZE))


SCROLLING ==>                     #PARAM_OBJ:
                                  #  - enableHorizontal|VerticalScrollbar CONST.scrollbars.ALWAYS|NEVER (def: ALWAYS)
                                  #  - [horizontal|vertical]ScrollThreshold NUM (def: 4)
                                  #  - scrollThrottle NUM (def: 70, in ms): min. time between two scroll events
                                  #GRID:
                                  #  - isScrollingVertically|Horizontically BOOL
                                  #  - scrollDirection CONST.UP|DOWN|LEFT|RIGHT|NONE
                                  #GRIDA.core:
                                  #  - on.scrollEvent(SCOPE, FUNC())


FEATURE "infiniteScroll" ==>      #PARAM_OBJ:
                                  #  - enableInfiniteScroll BOOL
                                  #  - infiniteScrollPercentage NUM (0 to 100): infinite scrolling, which lazy loads
                                  #    increments of NUM% of data.
                                  #GRIDA.infiniteScroll:
                                  #  - on.needLoadMoreData[Top](SCOPE, FUNC()): called when data needed on bottom|top.
                                  #    When done, must call GRIDA.infiniteScroll.dataLoaded()


GRIDTEST                          #Object returned by gridTestUtils.scenario.js, used for e2e testing.
                                  #Defines things like GRIDTEST.expectRowCount(ID, NUM), GRIDTEST.clickColumnMenu(), etc.
                                  #Requires Protractor. However, Protractor is built on WebdriverJS, not wd.js, so I do not
                                  #use right now.
