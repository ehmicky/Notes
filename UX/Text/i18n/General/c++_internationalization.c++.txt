
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   C++_INTERNATIONALIZATION   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

LOCALES ==>             #Utiliser std::locale (ou imbue) si automatique et aussi use_facet-has_facet si soi-même.

WSTREAM ET WSTRING ==>  #Ne pas mélanger WSTREAM et STREAM manipulations :
                        #  - l'instantiation de cout, cin, cerr ou log fait que les prochaines instantiations de wcout, etc.
                        #    seront considérés comme des cout -> brise les caractères multibytes en plusieurs morceaux
                        #  - inversement -> cout n'imprimera rien, etc.
                        #Utiliser des WSTRING et des WSTR avec les WSTREAM.
                        #Faire avant un std::locale::global( std::locale( "" ) ); pour les WSTREAM et WSTRING pour avoir la
                        #bonne facet codecvt (et imbue sur les objetss cin, cout, cerr et clog)
                        #Pour code générique, utiliser basic_* ou overload :
                        #  - template <class T>
                        #    void Fonc( std::basic_string<T> const& )
                        #    { std::basic_istream<T> ...  }
                        #  - impossible avec wcout, etc., qui ne sont pas des classes, mais des objets :
                        #    void imprimer( std::string const& mystring )
                        #    { std::cout << mystring << "\n"; }   
                        #    void imprimer( std::wstring const& mystring )
                        #    { std::wcout << mystring << L"\n"; }   
                        #Une WSTRING va bien considéré chaque caractère Unicode comme un caractère à part, que ce soit 'a' ou
                        #un caractère CJK.
                        #Une STRING va considéré une STRING comme une suite de caractère d'un seul octet.

USTRING ==>             #Avantanges par rapport à une WSTRING :
                        #  - possibilité de transformer une STR ou STRING en une string code (sinon impossible de transformer
                        #    STRING en WSTRING)
                        #  - méthodes supplémentaires, dont changement de casse, compose() et format()

SEQUENCES D'ECHAPPEMENTS#Normalement inutile grâce aux WSTRING et USTRING qui prennent en compte la représentation normale.
 ==>                    #Sinon : 
                        #  - C et C++ : \uXXXX  pour le codepoint XXXX
                        #               \xXX... pour une suite formatées UTF8 ou UTF16 : à éviter car dépend de locale UTF8 ou 
                        #                       UTF16
                        #Rappel : WSTR : L" " et WCHAR : L' '
