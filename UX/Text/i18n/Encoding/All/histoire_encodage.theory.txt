
                                  ┏━━━━━━━━━━━━━━━━━━━━━━━┓
                                  ┃   HISTOIRE_ENCODAGE   ┃
                                  ┗━━━━━━━━━━━━━━━━━━━━━━━┛

CHARSET ==>             #Un character set (charset) (jeu de caractère), 
                        #character encoding, character map ou code page (ce 
                        #dernier est surtout utilisé pour parler des Windows 
                        #code pages et des DOS code pages) est un ensemble de 
                        #nombres (en général binaire) utilisé pour symboliser 
                        #un ensemble de symboles graphiques ou non.

LE ROLE DU              #Il s'agit de normes et standards, qui sont ensuite 
LOGICIEL ==>            #implémentés par les logiciels (qui peuvent mal 
                        #l'implémenter, comme dans certains cas de l'UTF-8 et 
                        #ses caractères illégaux). Il faut aussi que des 
                        #polices puissent afficher les caractères désignés. 
                        #DejaVu est la plus populaire des polices Unicode open-
                        #source

ORIGINES ==>            #Son histoire commence avec la télégraphie, qui devait 
                        #transmettre des symboles (alphabet et chiffres 
                        #notamment) en utilisant d'autres biais.
                        #Il y a d'abord le morse. Puis le code Baudot au début 
                        #du XIXeme siècle, qui utilisait 2 "octets" pour 
                        #afficher chiffres, lettres (seulement capitales) et 
                        #l'ancêtre des characters code (NUL, LF, CR, ENQ, BEL) 
                        #en utilisant des système de SHIFT.

ISO 646 ==>             #ISO 646 (ou IA5) un jeu de caractères invariants plus 
                        #quelques variantes pour les alphabets nationaux. Il 
                        #est codé sur 7 bits
                        #Les caractère invariants sont appelés ISO 646/INV (ou 
                        #ISO-IR/170). Il s'agit des caractères 32 à 34, 37 à 90 
                        #(sauf 64), 95, 97 à 122
                        #Les caractère variants sont les numéro 35, 36, 64, 91 
                        #à 94, 96, 123 à 127
                        #ISO 646/C0 (ou ISO-IR/001, parfois désigné simplement 
                        #par C0) est pour les control characters, 0 à 31. Ceux-
                        #ci font référence aux codes télégraphiques à la base 
                        #(utilisation pour la première fois par les 
                        #laboratoires Bell)
                        #La variante américaine est nommée ISO 646/US (ou ISO-
                        #IR/006) 
                        #La variante française est nommée IOS 646/FR

ASCII ==>               #ASCII est la version américaine de ISO 646,   
                        #standardisée depuis 1963-1967
                        #Codé sur 7 bits, mais enregistré sur 8 car les words 
                        #étaient sur 8 bits
                        #Du coup, le 8ème bit était un bit de parité, valant 1 
                        #pour chaque charactère impair, et 0 pour les 
                        #caractères pair (ou l'inverse selon la norme), ce qui 
                        #permettait de détecter la moitié des erreurs de 
                        #transmission si le bit de parité était incorrect
                        #Lorsque ce bit de parité ne fut plus utile, il fut 
                        #remplacé par 0
                        #Utilisée pour la première fois commercialement par 
                        #AT & T

EDBDIC ==>              #IBM produit un character encoding concurrent à 
                        #l'ASCII, nommé EDBDIC, critiqué pour son mauvais 
                        #design (alphabet non contigu, ...), la multiplicité de 
                        #ses versions non compatibles entre elles, etc. et 
                        #utilisé uniquement par des OS IBM prévu pour des 
                        #superordinateurs et des gros ordinateurs.
                        #EDBDIC sera ensuite décliné en version pseudo-Latin-1, 
                        #pseudo-Unicode, etc.

ISO 8859                #Puis vient l'ISO 8859, qui permet d'utiliser le 8ème 
ISO 8859-1              #bit inutilisé par ASCII pour afficher des lettres 
ET LATIN-1 ==>          #spécifiques aux langues locales. Cependant, les 
                        #control characters classiques (0 à 31, soit x00 à x1F) 
                        #et les control characters "haut" (127 à 159, soit x7F 
                        #à x9F) ne sont pas compris dans un jeu de caractères 
                        #ISO 8859. L'IANA a développé des jeux de caractères 
                        #incluant ces control characters, qui sont nommés ISO-
                        #8859 (avec le tiret). Dans les faits, les gens 
                        #utilisent la première orthographe pour la seconde (ce 
                        #que je vais faire pour la suite)
                        #ISO 8859 est donc également codé sur un octet
                        #Il existe 16 tables ISO 8859 différentes appelées ISO 
                        #8859-X, où X fait référence à un nombre de 1 à 16. Les 
                        #plus connues sont :
                        #  - ISO 8859-1 (aussi appelé Latin-1, CP819 ou "Europe 
                        #    occidentale") pour les langues latines, 
                        #    germaniques et nordiques
                        #  - ISO 8859-15 (appelé Latin-9, ou improprement Latin-
                        #    0), quasi-identique mais introduisant €, ainsi que 
                        #    Š, š, Ž, ž, Œ, œ, et Ÿ, pour le français, le 
                        #    finnois et l'estonien
                        #Latin-1 a été très populaire, et devient standard pour 
                        #plusieurs choses

DOS ET LE CP437, LE     #DOS utilisait lui aussi une version de l'ASCII 
CP850 ET LE CP858 ==>   #utilisant le 8ème bit pour ajouter 128 caractères, 
                        #mais il ne s'agissait pas d'ISO 8859, mais de CP437 
                        #(page de code 437) Les 128 caractères ne sont pas les 
                        #mêmes ou pas dans le même ordre que toute table ISO 
                        #8859. De plus la plupart des control characters bas 
                        #(01 à 1F) ont une représentation graphique.
                        #CP850 le remplaça ensuite, pour l'Europe, remplaçant 
                        #notamment des caractères grecs et des caractères 
                        #permettant de dessiner une bounding box par des 
                        #caractères européens
                        #CP858 ajouta seulement l'€ à CP850
                        #CP858 demeure utilisé dans l'invité de commande de 
                        #Windows.

MAC OS ET LE MAC OS     #MAC OS (et non MAC OS X), depuis 1984 venait avec lui 
ROMAN ==>               #aussi une version de l'ASCII avec 128 caractères 
                        #supplémentaires nommé MAC OS Roman, mais encore une 
                        #fois, ces derniers étaient dans un autre ordre, avec 
                        #plusieurs symboles différents. De plus, tous les 
                        #control characters (dont DEL) sont supprimés (00 à 1F) 
                        #sauf TAB, LF et CR

WINDOWS-1252 ==>        #Windows venait par défaut (dont IE) depuis Windows 3.0 
                        #en Europe et aux Etat-Unis avec une version modifiée 
                        #de Latin-1 : Windows-1252 (appelé aussi CP1252, ou 
                        #improprement ANSI). Il s'agit de la même chose, sauf 
                        #que les control characters "haut" (sauf DEL, numéro 
                        #127) (de 128 à 159, soit x7F à x9F) sont remplacés par 
                        #des caractères imprimables, dont l'€, œ, ™ et †
                        #Des versions similaires, mais pour l'Europe centrale 
                        #(Windows-1250, ou CP1250) et l'alphabet cyrillique 
                        #(Windows-1251, ou CP1251) existent aussi

IEC-6937 ==>            #IEC-6937 était une autre version d'ASCII étendu, mais 
                        #sans control characters (ni "haut", ni bas), 
                        #standardisée mais peu utilisée

L'APPARITION D'ISO 646  #ISO 646 et Unicode sont ensuite apparus, définissant 
ET D'UNICODE ==>        #une table de 1 millions de caractères, chacun associés 
                        #à un nombre et une description. Ceci permet de régler 
                        #la question de l'internationalisation. Cette table 
                        #n'est pas un encodage en elle-même (voir doc)

UTF-8, UTF-16 ET        #Les formats UTF-8, UCS-2 (supplanté par UTF-16) et UTF-
COMPAGNIE ==>           #32 (aussi appelé UCS-4) pour encoder la table Unicode :
                        #  - un texte ASCII peut être lu en UTF-8 car ce 
                        #    dernier utilise une série variable de 1 à 4 octets 
                        #    pour coder chaque caractère Unicode, utilisant un 
                        #    système de clef pour le premier octet pour 
                        #    indiquer la longueur totale du caractère. C'est 
                        #    l'encodage d'Unix (sauf Mac OS X)
                        #  - UCS-2 utilise deux octets, mais ne peut pas 
                        #    adresser tous les caractères Unicode. Il a été 
                        #    remplacé par UTF-16, mais est encore utilisé par 
                        #    Symbian et Python
                        #  - UTF-16 utilise une série variable de 2 à 4 octets 
                        #    pour représenter un caractère Unicode. Il est 
                        #    utilisé par Mac OS X, Windows, Java (en partie, 
                        #    avec Modified UTF-8 également), .NET, Cocoa ou Qt
                        #  - UTF-32 utilise quatre octets pour représenter un 
                        #    caractère Unicode. Il est déprécié.
                        #  - CESU-8 est un encodage mixte entre UTF-8 et UTF-16 
                        #    peu utilisé. C'est l'encodage d'Oracle avant la 
                        #    version 9
                        #  - Modified UTF-8 est similaire à CESU-8 mais permet 
                        #    d'insérer des null dans les C-String. C'est 
                        #    l'encodage de Java (en partie, avec UTF-16 
                        #    également)
