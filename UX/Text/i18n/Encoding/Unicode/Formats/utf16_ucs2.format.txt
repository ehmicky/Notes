
              
   UTF16_UCS2  
              


UCS-2 ==>               #Unicode encoding.
                        #2 bytes <-> codepoint.
                        #Example: U+cdef <-> 0xcd 0xef
                        #Pro:
                        #  - Fast to encode|decode
                        #  - Human readable
                        #  - U+0800-Uffff require 2 characters
                        #Cons:
                        #  - not ASCII compatible
                        #  - ASCII requires 2 bytes
                        #  - cannot represent codepoints >= U+10000
                        #Deprecated.

UTF-16 ==>              #Unicode encoding.
                        #Pro|cons: like UCS-2 except:
                        #  - pro: can represent codepoints >= U+10000
                        #For U+000000-U+00ffff:
                        #  - like UCS-2
                        #  - except d800-dfff invalid unless as a valid sequence as shown below
                        #For U+100000-U+1fffff:
                        #  - 4 bytes:
                        #     - d800-dbff (high|leading surrogate code): 0xd800 + Floor((codepoint - 0x10000)/400)
                        #     - dc00-dfff (low|trailing surrogate code): 0xdc00 + codepoint%400
                        #  - codepoint -> bytes: (high - 0xd800) * 400 + low - 0x1dc00

ENDIANNESS ==>          #Iterating over each byte pairs follows endianness
BOM ==>                 #Byte Order Mark
                        #U+FEFF (codepoint), 0xef 0xbb 0xbf (bytes)
                        #Codepoint for ZWNBS (zero-width non-breaking space), i.e. no impact on text
                        #Required with UCS-2, optional with UTF-16
                        #First character in a document: based on how it is read, allows guessing endianness
                        #Alternative: specifying endianness in encoding name: UTF-16BE|LE, UCS-2BE|LE
