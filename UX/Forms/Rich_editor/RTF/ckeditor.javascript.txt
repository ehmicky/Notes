
                                  ┏━━━━━━━━━━━━━━┓
                                  ┃   CKEDITOR   ┃
                                  ┗━━━━━━━━━━━━━━┛

ALTERNATIVES ==>                  #  - redactor
                                  #  - CKEditor (prefer): more features

VERSION ==>                       #4.5.4

INSTALLATION ==>                  #Bower: ckeditor
                                  #No RequireJS

BUILDING ==>                      #Goal:
                                  #  - create release (minify, etc.)
                                  #  - pick only needed parts
                                  #  - concatenate into one file:
                                  #     - presence:
                                  #        - source are still present (but can remove with 'ignore' PATH_ARR)
                                  #        - non-picked languages/skins are not present
                                  #     - load:
                                  #        - will still load:
                                  #           - at CKEDITOR init:
                                  #              - styles.js unless CONF.stylesSet not 'default'
                                  #              - config.js unless CONF.customConfig defined
                                  #           - at EDITOR init:
                                  #              - skin: skin.js, editor.css
                                  #              - lang/LANG.js
                                  #           - at first plugin init:
                                  #              - plugin images, but bundled as two sprite images
                                  #              - contents.css, unless CONF.contentsCss defined
                                  #        - will not concatenate nor load (must do manually):
                                  #           - adapters/jquery.js
                                  #        - must define CKEDITOR_BASEPATH global variable before library is loaded,
                                  #          in order to change CKEDITOR.basePath to fetch those files loaded at runtime
                                  #Use dev/builder/build.sh:
                                  #  - download and launch ckbuilder.jar
                                  #  - based on build-config.js, which defines CKBUILDER_CONFIG OBJ:
                                  #     - skin 'SKIN'
                                  #     - plugins.PLUGIN 1|0 (def: none)
                                  #     - languages.LANG (e.g. 'en' or 'en-us') 1|0 (def: all)
                                  #     - ignore PATH_ARR
                                  #     - js 'PATH[,start|aftercore|end]'_ARR: custom JavaScript added to build
                                  #  - create ./release/ckbuilder/ (optimized but not concatenated)
                                  #  - options:
                                  #     --build-config FILE
                                  #     --overwrite
                                  #     --leave-js|css-unminified
                                  #     --no-zip|tar
                                  #Can use online builder, or online toolbar configurator to do it too.

SUMMARY ==>                       #Initialization:
                                  #  - init
                                  #  - inline mode
                                  #  - normal mode
                                  #  - jquery
                                  #  - config
                                  #Base:
                                  #  - events
                                  #Environment:
                                  #  - env
                                  #  - adobeair: Adobe Air support
                                  #  - about: credits dialog
                                  #Helpers:
                                  #  - XML
                                  #  - AJAX
                                  #i18n:
                                  #  - i18n: base
                                  #  - language: let user change HTML lang|dir attribute
                                  #  - bdi
                                  #Design:
                                  #  - skins
                                  #  - uicolor: allow user change base color
                                  #DOM:
                                  #  - editable
                                  #UI:
                                  #  - UI: base
                                  #  - panel
                                  #  - floatpanel
                                  #  - menu
                                  #  - contextmenu
                                  #  - button
                                  #  - panelbutton
                                  #  - menubutton
                                  #  - listblock
                                  #  - richcombo
                                  #Dialogs:
                                  #  - dialog: base
                                  #  - dialogui: base UI elements
                                  #  - dialogadvtab: advanced tab (change id|dir|style|class)
                                  #  - iframedialog: <iframe> dialog
                                  #  - colordialog: color picker dialog
                                  #  - popup: window.open()
                                  #Notification:
                                  #  - notification
                                  #  - notificationaggregator: one notification for several tasks
                                  #Toolbar:
                                  #  - wysiwygarea: main editing mode
                                  #  - divarea: 'inline mode' alternative
                                  #  - toolbar
                                  #  - floatingspace: where to place toolbar in 'inline mode'
                                  #  - sharedspace: one toolbar, several EDITOR
                                  #  - fixed: toolbar always on top (while editor present and 'normal mode')
                                  #  - maximize
                                  #UX:
                                  #  - keystokes
                                  #  - focusmanager
                                  #Styles
                                  #IO base:
                                  #  - DTD: HTML correctness
                                  #  - htmlparser: HTML raw reader|writer
                                  #  - htmlwriter: beautified HTML writer
                                  #  - htmlparser nodes: HTML nodes JavaScript representation
                                  #  - dataprocessor: I/O base
                                  #  - I/O: I/O high-level
                                  #IO:
                                  #  - enterkey: typing 'Enter'
                                  #  - tab: typing 'Tab'
                                  #  - entities: HTML entities
                                  #  - lineutils: creating horizontal spaces
                                  #  - markdown: edit in Markdown
                                  #  - bbcode: BBCode output
                                  #  - autosave
                                  #  - lite: track changes
                                  #Filters:
                                  #  - htmlparser rules: filtering
                                  #  - filters
                                  #  - feature: command + filter
                                  #Extensions:
                                  #  - commands: functions to fire
                                  #  - resourcemanager: load scripts/images/etc. on demand
                                  #  - plugins: resourcemanager for a set of features (e.g. buttons, widgets, etc.)
                                  #  - widget: single entity on the editor
                                  #Basic:
                                  #  - readonly
                                  #  - undo
                                  #  - find
                                  #  - newpage: clears page
                                  #Selection:
                                  #  - selection: base
                                  #  - selectall
                                  #clipboard:
                                  #  - clipboard: base
                                  #  - pastetext: paste as plain text
                                  #  - pasteword: paste from Word
                                  #Font formatting:
                                  #  - basicstyles: bold|italic|underline|strike|subscript|superscript
                                  #  - removeformat
                                  #  - stylescombo: list of predefined styles
                                  #  - stylesheetparser: use CSS files for 'stylescombo'
                                  #  - font: font-family, font-size
                                  #  - ckeditor-gwf-plugin: Google Web Font font families
                                  #  - colorbutton: color, background-color
                                  #  - texttransform: change case
                                  #  - letterspacing: CSS letter-spacing
                                  #Paragraph formatting:
                                  #  - indent[block]: indent|outdent button
                                  #  - justify
                                  #  - lineheight
                                  #  - format: list of predefined styles
                                  #  - blockquote: <blockquote>
                                  #  - div: <div>
                                  #Insert:
                                  #  - link
                                  #  - autolink: when pasting
                                  #  - horizontalrule
                                  #  - specialchar
                                  #  - forms: <input>, etc.
                                  #  - html5validation: form validation
                                  #  - templates: predefined 'HTML' chunks
                                  #  - placeholder: [[...]] WIDGET
                                  #  - token: similar to placeholder
                                  #  - footnotes
                                  #List:
                                  #  - indenlist: indent|outdent with Tab
                                  #  - list
                                  #  - liststyles: edit list-style-*
                                  #Tables:
                                  #  - table
                                  #  - tabletools: add context menu options on <table>
                                  #  - tableresize
                                  #  - quicktable: like <table>, but also shows quicktable
                                  #  - layoutmanager: <table> meant for layout
                                  #Multimedia:
                                  #  - image[2]
                                  #  - imagerotate: rotate <img>
                                  #  - chart: insert charts using chart.js
                                  #  - youtube
                                  #  - locationmap: Google Maps
                                  #  - googledocs
                                  #  - audio: <audio>
                                  #  - flash: Adobe Flash
                                  #  - slideshow: inserting slideshows
                                  #  - smiley
                                  #  - fontawesome: insert FontAwesome icons
                                  #embed:
                                  #  - fakeobjects: replace by <img> when editor idle
                                  #  - embedbase: base
                                  #  - embed[semantic]: <iframe> oEmbed
                                  #  - autoembed: when pasting
                                  #  - iframe: <iframe>
                                  #  - codesnippet[geshi]: code editor
                                  #  - codemirror: code editor
                                  #  - mathjax: TeX
                                  #  - widgetboostrap: insert Boostrap widgets
                                  #Upload:
                                  #  - save: <form> submit
                                  #  - filebrowser: filebrowser popup
                                  #  - filetools: file upload helpers
                                  #  - uploadwidget
                                  #  - uploadimage
                                  #  - imageuploader
                                  #Size:
                                  #  - autogrow
                                  #  - resize
                                  #  - wordcount: bottom bar word count, and possibility to restrict max length
                                  #Correction:
                                  #  - scayt|swc: auto-correction
                                  #  - autocorrect: substitute sequences as you type, e.g. <--> to ↔
                                  #Print:
                                  #  - print: browser print popup
                                  #  - preview: popup with HTML output
                                  #  - pagebreak
                                  #a11y:
                                  #  - tabindex
                                  #  - magicline: easy insert with red line helper
                                  #  - a11yhelp: shortcuts popup
                                  #Developers:
                                  #  - sourcearea|sourcedialog: editing HTML code
                                  #  - docprops: page properties
                                  #  - devtools: dialog development visual helpers
                                  #  - showborders: table development visual helpers
                                  #  - showblocks: visual helpers
                                  #  - elementspath: HTML path in bottom bar




                  
   INITIALIZATION  
                  



                                  ┌──────────┐
                                  │   INIT   │
                                  └──────────┘

CKEDITOR.version|revision         #STR
CKEDITOR.status                   #Can be:
                                  #  - 'unloaded'
                                  #  - 'basic_loaded|read': before loading core
                                  #  - 'loaded': after loading core. Fire 'loaded'.

new CKEDITOR.editor
(CONF, DOM_ELEM, MODE)            #Low-level
CKEDITOR.instances.ID             #EDITOR
EDITOR.id                         #
CKEDITOR.currentInstance          #EDITOR with focus
                                  #When changed, fire 'currentInstance'

EDITOR.on
('instance', FUNC(null, EDITOR))  #When created but not ready
EDITOR.status                     #Can be:
                                  #  - 'unloaded'
                                  #  - 'loaded':
                                  #      - logic ready (e.g. plugins loaded)
                                  #      - also fire 'loaded', CKEDITOR 'instanceLoaded'
                                  #      - sets EDITOR.loaded true
                                  #  - 'ready':
                                  #      - UI also ready
                                  #      - fire 'uiReady', then 'contentDom', then 'instanceReady', CKEDITOR 'instanceReady'
                                  #      - EDITOR.instanceReady true
                                  #  - 'destroyed'
EDITOR.destroy()                  #Fires '[before]destroy', CKEDITOR 'instanceDestroyed'

EDITOR.window                     #DOM_WINDOW
CKEDITOR|EDITOR.document          #DOM_DOCUMENT
EDITOR.container|element          #ELEM
EDITOR.ui.contentsElement         #ELEM. In 'inline mode', EDITOR.container. In 'normal mode', excludes toolbar.

CONF.title                        #HTML 'title' attribute on the container (def: 'Rich Text Editor, EDITOR_ID', i18n'd)
                                  #Can be false


EDITOR.elementMode                #Either:
                                  #  - CKEDITOR.ELEMENT_MODE_INLINE ('inline mode')
                                  #     - on any[contenteditable="BOOL"]: read-write or read-only
                                  #  - CKEDITOR.ELEMENT_MODE_REPLACE|APPENDTO ('normal mode'):
                                  #     - with toolbars, etc., in an <iframe>
                                  #     - automatically updates element with HTML content


                                  ┌─────────────────┐
                                  │   INLINE MODE   │
                                  └─────────────────┘

CKEDITOR.inline                   #Creates new EDITOR in 'inline mode':
(ELEM|'ID', CONF)                 #  - EDITOR.setData(ELEM.getHtml())
                                  #     - with textarea, use instead:
                                  #        - EDITOR.setData(ELEM.getValue())
                                  #        - hide textarea, and use a new sibling <div contenteditable="true"> instead
                                  #  - EDITOR.editable(ELEM)
                                  #  - ELEM must be among DTD.$editable or be a <textarea>
CKEDITOR.inlineAll()              #Does CKEDITOR.inline() on all elements with contenteditable="true"
                                  #Fires 'inline' with CEVENT.data: element ELEM, config CONF:
                                  #  - can modify CONF (empty at first)
                                  #  - can return false to not instantiate
                                  #Done at DOM ready if CKEDITOR.disableAutoInline false

                                  ┌─────────────────┐
                                  │   NORMAL MODE   │
                                  └─────────────────┘

CKEDITOR.appendTo                 #Create new EDITOR in 'normal mode':
(ELEM|'ID'[, CONF[, 'HTML']])     #  - ELEM.append()
                                  #  - EDITOR.setData('HTML')
CKEDITOR.replace(ELEM|'ID'[,CONF])#Creates new EDITOR in 'normal mode':
                                  #  - ELEM.hide() + VAL.insertAfter(ELEM)
                                  #  - EDITOR.setData(null)
CKEDITOR.replaceAll(['CLASS'|     #CKEDITOR.replace() on all <textarea> (with a name|id)
FUNC(TEXTAREA, CONF)->BOOL])      #Can restrict to only some 'CLASS' or when FUNC() returns true
                                  #With FUNC, CONF is empty at first but can be manipulated.

CONF.width|height                 #'CSS_LENP'|NUM (def: ''|200)
EDITOR.resize                     #  - BOOL: if true, applied to content area, otherwise to entire editor area
(NUM, NUM2[, BOOL[, BOOL2]])      #  - BOOL2: if true, applied to inner area, otherwise to outer area
                                  #Fires 'resize' with CEVENT.data: outerHeight|Width, contentsHeight
EDITOR.getResizable([BOOL])       #Returns container (if false) or container without toolbar (if true)

                                  ┌────────────┐
                                  │   JQUERY   │
                                  └────────────┘

JQ.ckeditor([CONF])               #Use jQuery adapter to instantiate, calling CKEDITOR.replace|inline(ELEM, CONF)
                                  #(according to whether it is <textarea>)
                                  #Do nothing if already initialized.
                                  #Must load adapters/jquery.js
                                  #Returns a jQuery PROMISE, resolved when loaded, with also property:
                                  #  - editor EDITOR
                                  #JQ.val([VAL]):
                                  #  - will call EDITOR.getData()->VAL and EDITOR.setData(VAL)->PROMISE
                                  #  - unless CONF.jqueryOverrideVal false
                                  #  - only in 'normal mode'
                                  #Exposes some CEVENT as JQEVENTs: 'instanceReady|destroy|setData|getData|dataReady.ckeditor'
JQ.ckeditorGet()                  #EDITOR (throws if not initialized)

                                  ┌────────────┐
                                  │   CONFIG   │
                                  └────────────┘

CKEDITOR.config                   #all-EDITOR CONF
EDITOR.config                     #EDITOR-specific CONF
CKEDITOR.editorConfig(CONF)       #Function which, when called, can modify all-EDITOR CONF
                                  #If defines a CONF.customConfig, recursively loads it.
CONF.customConfig                 #FILE in BASEPATH, which usually define CKEDITOR.editorConfig
                                  #Def: 'config.js'

                                  ┌──────────┐
                                  │   MODE   │
                                  └──────────┘

EDITOR.mode                       #'wysiwyg|source' ('source' available with a plugin)
EDITOR.addMode
('MODE', FUNC(FUNC2()))           #Adds a mode
EDITOR.setMode('MODE'[, FUNC2()]) #Changes modes
                                  #Fires:
                                  #  - 'beforeSetMode' with CEVENT.data 'MODE'
                                  #  - 'mode'
COMMAND_DEF.modes                 #Which modes can execute this commands as OBJ.MODE 0|1
CONF.startupMode                  #Only for 'normal mode' (def: 'wysiwyg')





        
   BASE  
        



                                  ┌────────────┐
                                  │   EVENTS   │
                                  └────────────┘

CEVENTEMITTER.fire
('EVENT'[, OBJ[, EDITOR]])        #Returns false if cancelled, VAL otherwise.
CEVENTEMITTER.fireOnce(...)       #Same as CEVENTEMITTER.fire(...) followed by removeListener()
CEVENTEMITTER.
on|once('EVENT', FUNC(CEVENT)
[, THIS][, OBJ2][, PRIO_NUM])     #OBJ2 available at CEVENT.listenerData
CEVENTEMITER.hasListeners('EVENT')#
CEVENTEMITTER.removeListener
('EVENT')                         #
CEVENTEMITTER.removeAllListeners()#
CEVENTEMITTER.define('EVENT', OBJ)#If OBJ.errorProof true, wrap listener in try|catch block
CEVENTEMITTER.capture()           #???


CEVENT
CEVENT.data                       #OBJ
CEVENT.name                       #STR
CEVENT.editor                     #EDITOR
CEVENT.sender                     #OBJ that sends the event

CEVENT.cancel|stop()              #fire() will return false|true
CEVENT.removeListener()           #Removes current listener


CONF.on.EVENT(...)                #Sets event listeners directly in the config




               
   ENVIRONMENT  
               



                                  ┌─────────┐
                                  │   ENV   │
                                  └─────────┘

CKEDITOR.env                      #ENV
ENV.air|chrome|edge|gecko|ie|
safari|webkit                     #BOOL
ENV.version                       #NUM browser version
ENV.iOS|mac                       #BOOL

ENV.isCompatible                  #BOOL: supported by CKEditor
                                  #If false, throws at init.

ENV.quirks                        #BOOL (IE quirks mode)
ENV.needsBr|NbspFiller            #BOOL: needs to fix <br> or non-breaking space.

ENV.secure()->BOOL                #HTTPS

                                  ┌──────────────┐
                                  │   ADOBEAIR   │
                                  └──────────────┘

                                 ##Plugin 'adobeair'
                                  #Support for Adobe Air

                                  ┌───────────┐
                                  │   ABOUT   │
                                  └───────────┘

                                 ##Plugin 'about' (depends: 'dialog')
COMMAND 'about'                   #Fires dialog 'about', which shows credits.
                                  #Done by button 'About'




           
   HELPERS  
           



                                  ┌─────────┐
                                  │   XML   │
                                  └─────────┘

                                 ##Plugin 'xml'
new CKEDITOR.xml('XML')           #Returns XML
XML.baseXml                       #XML as OBJ
XML.getInnerXml('XPATH'[,CONTEXT])#
XML.selectNodes('XPATH'[,CONTEXT])#
XML.selectSingleNode
('XPATH'[, CONTEXT])              #

                                  ┌──────────┐
                                  │   URLS   │
                                  └──────────┘

CKEDITOR.getUrl('PATH|URL')       #Function resolving URLs internally used.
                                  #If 'URL', adds CKEDITOR.timestamp (build timestamp) at the end as "?t=TIMESTAMP"
                                  #(to bust browser caching when CKEDITOR is upgraded)
                                  #If 'URL' or absolute 'PATH', returns it
                                  #If relative 'PATH', appends BASEPATH
                                  #Can override with global variable CKEDITOR_GETURL('PATH|URL')
                                  #(if returns false|undefined, use CKEDITOR.getUrl())
CKEDITOR.basePath                 #BASEPATH:
                                  #  - def: where CKEDITOR is loaded (using <script> src)
                                  #  - can override with global variable CKEDITOR_BASEPATH:
                                  #     - must do it when <script> not present, i.e. when concatenating CKEDITOR library in
                                  #       a bundle

                                  ┌──────────┐
                                  │   AJAX   │
                                  └──────────┘

                                 ##Plugin 'ajax' (depends: 'xml')
CKEDITOR.ajax.load[Xml]|post(...) #Ajax helpers used by other plugins




        
   I18N  
        



                                  ┌──────────┐
                                  │   I18N   │
                                  └──────────┘

EDITOR.langCode                   #Current 'LANG':
                                  #  - def: CONF.language
                                  #     - def: CKEDITOR.lang.detect(CONF.defaultLanguage (def: 'en'))))
EDITOR.lang.[PLUGIN.]LANG         #OBJ of translations to use
                                  #Done at initialization, so cannot dynamically change.


CKEDITOR.lang.load                #Loads BASEPATH/lang/LANG3.js, which fills CKEDITOR.lang.LANG (core translations)
('LANG'[, 'LANG2'],               #Done once at initialization.
FUNC('LANG3', OBJ))               #LANG3:
                                  #  - 'LANG'
                                  #  - if null|undefined: CKEDITOR.lang.detect('LANG2'):
                                  #     - by order of priority:
                                  #        - NAVIGATOR.userLanguage|language
                                  #        - 'LANG2'
                                  #     - checks if part of supported languages (CKEDITOR.lang.languages, depends on build)
                                  #OBJ is CKEDITOR.lang.LANG3, with also OBJ.dir 'rtl|ltr'
                                  #Fire 'langLoaded'

PLUGIN_DEF.lang                   #Languages supported by the PLUGIN, as 'LANG,...'|'LANG'_ARR
                                  #When plugin is initialized, this will load plugin translations into CKEDITOR.lang.PLUGIN.LANG:
                                  #  - load BASEPATH/plugins/PLUGIN/lang/LANG.js, which should call
                                  #    PLUGINS.setLang('PLUGIN', 'LANG', OBJ):
                                  #     - this will CKEDITOR.lang.PLUGIN.LANG = OBJ


                                  ┌──────────────┐
                                  │   LANGUAGE   │
                                  └──────────────┘

                                 ##Plugin 'language' (depends: 'menubutton')
COMMAND 'language'                #Toggle settings HTML attributes lang and dir on all <span>
                                  #Done by MENUBUTTON 'Language' and contextMenu (MENUGROUP 'language[_remove]')
CONF.language_list                #STR_ARR of 'CODE:LABEL[:rtl|ltr]', e.g. 'fr:French'

                                  ┌─────────┐
                                  │   BDI   │
                                  └─────────┘

                                 ##Plugin 'bdi'
COMMAND 'BidiLtr|Rtl'             #Change direction. Done by buttons 'ltr|rtl' (toolbar 'bidi')
EDITOR.on('dirChanged')           #Fired with CEVENT.data: node DOM_NODE, dir STR




          
   DESIGN  
          



                                  ┌───────────┐
                                  │   SKINS   │
                                  └───────────┘

STRUCTURE ==>                     #Files:
                                  #  - skin.js: logic, which must define:
                                  #     - CKEDITOR.skin.name
                                  #     - CKEDITOR.skin.ua_editor|dialog 'BROWSER,...'
                                  #     - CKEDITOR.skin.chameleon(...)
                                  #  - editor[_BROWSER].css: main CSS
                                  #     - BROWSER is loaded if ENV[BROWSER] is true
                                  #  - dialog[_BROWSER].css:
                                  #     - dialogs CSS
                                  #     - to support 'dialog' busy state, see online doc on CSS to add
                                  #  - PART.css: any other part:
                                  #     - notification.css: for 'notification' plugin (can copy from Moono skin)
                                  #  - icons/ICON.png: will override default ones provided by plugins
                                  #Available ones depends on build
                                  #Can be packaged (concatenates, minify, sprites) using:
                                  #  java -jar ckbuilder.jar --build-skin "SKIN" "SKIN-release"

CKEDITOR.skinName
CONF.skin                         #'SKIN[,SKINPATH]'
CKEDITOR.skin                     #SKIN

SKIN.name                         #'SKIN'
SKIN.path()                       #Returns BASEPATH/SKINPATH (def SKINPATH: "skins/SKIN/")
SKIN.getPath('PART')              #Returns BASEPATH/SKINPATH/PART.css
                                  #If SKIN.ua_PART 'ENV,...' defined, loads PATH_ENV instead, where CKEDITOR.env.ENV true
SKIN.loadPart('PART'[, FUNC()])   #Loads on demand (adds <style> tag) BASEPATH/SKINPATH/PART.css
                                  #and (if not current SKIN) BASEPATH/SKINPATH/skin.js
                                  #At init, does:
                                  #  - SKING.loadPart('editor')

SKINS.icons                       #OBJ
SKIN.addIcon('ICON', 'PATH'[, Y]
[, STR])                          #STR is background-size CSS value
SKIN.getIconStyle('ICON'[, BOOL]) #Returns CSS style of 'ICON'. If true, indicates RTL.

EDITOR.uiColor                    #"CSS_COLOR", which will replace '$color' occurences in chameleon output
CONF.uiColor                      #SKIN.chameleon('EDITOR', 'PART')->'HTML' must be defined.
                                  #Can use plugin 'uicolor' to let user define it.
EDITOR.getUIColor()               #
EDITOR.setUIColor('CSS_COLOR')    #

                                  ┌─────────┐
                                  │   CSS   │
                                  └─────────┘

EXTRA CLASSES ==>                 #On the editor:
                                  #  - .cke_rtl: RTL
                                  #  - .cke_hc: High contrast

CSS RESET ==>                     #.cke_reset_all on 'normal mode', but not 'inline mode' (except toolbar)

CKEDITOR.addCss('CSS')            #Adds CSS which will be on root of each EDITABLE (including EDITOR element)

CONF.contentsCss                  #'PATH'[_ARR] (def: getUrl('contents.css'))
EDITOR.addContentsCss('PATH')     #Only in 'normal mode', for the <iframe>, or the UI float elements (in either mode)
                                  #(e.g. buttons dropdowns)

                                  ┌─────────────┐
                                  │   UICOLOR   │
                                  └─────────────┘

                                 ##Plugin 'uicolor' (depends: 'dialog')
COMMAND 'uicolor'                 #Opens dialog 'uicolor', which let user change toolbar color.
                                  #Done by button 'UIColor' (toolbar 'tools')





       
   DOM  
       



NOTE ==>                          #Not all is documented.
                                  #What can be done using jQuery or native DOM is not.

                                  ┌───────────────┐
                                  │   DOMOBJECT   │
                                  └───────────────┘

DOM_OBJ                           #Wrapper around generic DOM object. Is EVENTEMITTER
DOM_OBJ.$                         #ELEM

DOM_OBJ.setCustomData('KEY', VAL) #Data to be removed when processing HTML (i.e. EDITOR.getData())
                                  #Is actually set in JavaScript, not HTML.
DOM_OBJ.getCustomData('KEY')      #
DOM_OBJ.clearCustomData()         #

DOM_OBJ.getUniqueId()             #

                                  ┌───────────────┐
                                  │   DOMWINDOW   │
                                  └───────────────┘

DOM_WINDOW                        #Wrapper around WINDOW. Child of DOM_OBJ
DOM_WINDOW.$                      #WINDOW

                                  ┌─────────────────┐
                                  │   DOMDOCUMENT   │
                                  └─────────────────┘

DOM_DOCUMENT                      #Wrapper around DOCUMENT. Child of DOM_OBJ
DOM_DOCUMENT.$                    #DOCUMENT

DOM_DOCUMENT.getActive()          #Get element with focus, or no focus but considered as 'active'

                                  ┌──────────────┐
                                  │   DOM_NODE   │
                                  └──────────────┘

DOM_NODE                          #Wrapper around NODE. Child of DOM_OBJ
DOM_NODE.$                        #NODE

                                  ┌──────────────────┐
                                  │   DOM_NODELIST   │
                                  └──────────────────┘

DOM_NODELIST                      #Wrapper around NODELIST.
DOM_NODELIST.$                    #NODELIST
DOM_NODELIST.getItem(NUM)         #
DOM_NODELIST.count()              #

                                  ┌─────────────────┐
                                  │   DOM_COMMENT   │
                                  └─────────────────┘

DOM_COMMENT                       #Wrapper around comment NODE. Child of DOM_NODE
DOM_COMMENT.$                     #Comment NODE
DOM_COMMENT.getOuterHtml()        #'<!--...-->'

                                  ┌──────────────┐
                                  │   DOM_TEXT   │
                                  └──────────────┘

DOM_TEXT                          #Wrapper around text NODE. Child of DOM_NODE
DOM_TEXT.$                        #Text NODE
DOM_TEXT.getText()                #
DOM_TEXT.setText(STR)             #

                                  ┌──────────────┐
                                  │   DOM_ELEM   │
                                  └──────────────┘

DOM_ELEM                          #Wrapper around ELEM. Child of DOM_NODE
DOM_ELEM.$                        #ELEM

CKEDITOR.dom.element.setMarker    #Like DOM_ELEM.setCustomData('KEY', VAL), except can cleanup with
(OBJ, DOM_ELEM, 'KEY', VAL)       #CKEDITOR.dom.element.clearMarkers(OBJ, DOM_ELEM, 'KEY') or
                                  #CKEDITOR.dom.element.clearAllMarkers(OBJ)

CKEDITOR.dom.element.
createFromHtml('HTML')            #Returns DOM_ELEM

                                  ┌──────────────┐
                                  │   EDITABLE   │
                                  └──────────────┘


CKEDITOR.editable                 #EDITABLE, child of DOM_ELEM
                                  #Is a custom <textarea>-like
EDITABLE.editor                   #EDITOR

EDITABLE.attachClass('CLASS')     #Adds temporary CLASS
EDITABLE.changeAttr('ATTR', VAL)  #Temporarily change HTML attribute value
EDITABLE.detach()                 #Makes it not editable anymore, removing temporary things

EDITABLE.setData|getData(...)     #See EDITOR.setData|getData(...)
EDITABLE.insertHtml|Text|Element
(...)                             #See EDITOR.insertHtml|Text|Element(...)
EDITABLE.insertHtmlIntoRange
('HTML', DOM_RANGE)               #
EDITABL.insertElementIntoSelection
(DOM_ELEM)                        #
EDITABL.insertElementIntoRange
(DOM_ELEM, DOM_RANGE)             #

DOM_ELEM.isEditable()             #

                                  ┌──────────────────┐
                                  │   DOM_FRAGMENT   │
                                  └──────────────────┘

DOM_FRAGMENT                      #Wrapper around FRAGMENT
DOM_FRAGMENT.$                    #FRAGMENT
DOM_FRAGMENT.getHtml()            #'HTML'

                                  ┌───────────────┐
                                  │   DOM_EVENT   │
                                  └───────────────┘

DOM_EVENT                         #Wrapper around EVENT
DOM_EVENT.$                       #EVENT

                                  ┌──────────────┐
                                  │   DOM_PATH   │
                                  └──────────────┘

DOM_PATH                          #List of DOM_ELEM, parents to a given DOM_ELEM

EDITOR.elementPath(DOM_NODE)      #DOM_PATH

DOM_PATH.elements                 #DOM_ELEM_ARR
DOM_PATH.root|lastElement         #From DOM_PATH.elements

DOM_PATH.block                    #First splittable block DOM_ELEM in path
DOM_PATH.blockLimit               #First block DOM_ELEM which can contain other blocks

DOM_PATH.direction()              #'ltr|rtl'

DOM_PATH.compare(DOM_PATH2)       #Do they target same elements (using ===)
DOM_PATH.contains
(DOM_ELEM|'TAG'[_ARR]|{ TAG ... }|
FUNC(DOM_NODE)->BOOL              #If BOOL2 true, excludes root node.
[, BOOL2[, BOOL3]])               #If BOOL3 true, start search from top instead of bottom.

                                  ┌──────────────────┐
                                  │   DOM_ITERATOR   │
                                  └──────────────────┘

new DOM_ITERATOR(DOM_RANGE)       #
DOM_ITERATOR.range                #DOM_RANGE

DOM_ITERATOR.getNextParagraph     #Returns next paragraph-like P_ELEM, or null.
(['TAG'])                         #In block-less elements, use parent 'TAG' (def: 'p')
DOM_ITERATOR.enforceRealBlocks    #If true, create blocks when necessary
DOM_ITERATOR.enlargeBr            #If true, create <br> when necessary
DOM_ITERATOR.forceBrBreak         #

DOM_ITERATOR.[active]Filter       #FILTER


                                  ┌────────────────┐
                                  │   DOM_WALKER   │
                                  └────────────────┘

DOM_WALKER                        #Walker along DOM_NODE




      
   UI  
      



EDITOR.createRange()              #DOM_RANGE

CONF.baseFloatZIndex              #Def: 1000
                                  #E.g. used by PANEL

                                  ┌────────┐
                                  │   UI   │
                                  └────────┘

EDITOR.ui                         #UI. Is an EVENTEMITTER
UI.editor                         #EDITOR

UITYPE                            #Builtin: CKEDITOR.UI_BUTTON|MENUBUTTON|PANEL|PANEL_BUTTON|RICHCOMBO|SEPARATOR,
UI.addHandler(UITYPE, HANDLER_OBJ)#Adds a new UITYPE. HANDLER_OBJ:
                                  #  - create(OBJ2[, ...])->DOM_ELEM
UI.add('NAME', UITYPE, OBJ[, ...])#Registers new UI object with UITYPE and definition OBJ:
                                  #  - command 'COMMAND': allow tracking COMMAND.uiItems UI_OBJ_ARR
                                  #  - args [OBJ, ...]: passed to HANDLER_OBJ.create(...)
                                  #When ready, fires 'ready'
                                  #  - contentsElement DOM_ELEM2: container
UI.create('NAME')                 #Creates new UI object:
                                  #  - fires|returns HANDLER_OBJ.create(UI_OBJ.args...)->UI_OBJ (with UI as this)
                                  #  - UI_OBJ.type UITYPE automatically set
                                  #  - UI_OBJ.render(EDITOR, ARR)->'HTML' should be defined (push 'HTML' to ARR if defined)
UI.get('NAME')->UI_OBJ            #

UI.space('bottom|contents|top')   #Returns UI container for main UI elements, i.e. bottom|top bars and content.
UI.spaceId('...')                 #Same but returns ID

                                  ┌───────────┐
                                  │   PANEL   │
                                  └───────────┘

                                 ##Plugin 'panel'
                                  #Lower-level UI used by toolbar
CKEDITOR.PANEL                    #UITYPE with HANDLER_OBJ.create(PANEL_OBJ)->PANEL
                                  #Is:
                                  #  div .cke.cke_reset_all.cke_panel[.PANEL_OBJ.className]
                                  #    [<iframe><html>]: see below

PANEL                             #DOM_ELEM
PANEL.id                          #
PANEL.document                    #DOM_DOCUMENT

PANEL_OBJ.forceIFrame             #BOOL (def: false). Use an <iframe>
PANEL_OBJ.css                     #STR_ARR
PANEL.isFramed                    #

PANEL.addBlock('BLOCK', BLOCK_DEF)#Adds and show BLOCK, i.e:
                                  #  div .cke_panel_block
                                  #BLOCK_DEF:
                                  #  - attributes: role (def: 'presentation'), 'aria-label', title (def: same as 'aria-label')
                                  #Can navigate through blocks with keyboard.
                                  #Returns BLOCK
PANEL.getBlock('BLOCK')->BLOCK    #
PANEL.destroy()                   #

BLOCK.markItem(NUM)               #Mark as activated
BLOCK.onMark(ELEM)                #When activated

BLOCK.show|hide()                 #
BLOCK.onHide(BLOCK)->BOOL         #If true, does not hide.

                                  ┌────────────────┐
                                  │   FLOATPANEL   │
                                  └────────────────┘

                                 ##Plugin 'floatpanel' (depends: 'panel')
                                  #Lower-level UI used by dropdowns, PANEL child.
new CKEDITOR.ui.floatPanel(EDITOR,#DOM_ELEM is parent container (def if FLOATPANEL_DEF.toolbarRelated true: toolbar)
DOM_ELEM, FLOATPANEL_DEF, NUM)    #Creates new FLOATPANEL (with forceIFrame true)
FLOATPANEL.element                #DOM_ELEM2 (actual panel)

FLOATPANEL.showBlock('BLOCK',     #DOM_ELEM is offset parent, NUM is 1|2|3|4 for different corners.
DOM_ELEM, NUM[, X][, Y][, FUNC()])#FUNC is done callback.
FLOATPANEL.showAsChild
(FLOATPANEL2, ...)                #Using FLOATPANEL2.showBlock(...)
FLOATPANEL.reposition()           #Put in same position as last showBlock()
FLOATPANEL.hide[Child]()          #

                                  ┌───────────────┐
                                  │   LISTBLOCK   │
                                  └───────────────┘

                                 ##Plugin 'listblock' (depends: 'panel')
                                  #Allow adding lists to FLOATPANEL

FLOATPANEL.addListBlock           #Does a FLOATPANEL.addBlock(...), where BLOCK is:
('LIST_BLOCK', LISTBLOCK_DEF)     #  h1
                                  #  ul
                                  #    l1
                                  #LISTBLOCK_DEF:
                                  #  - multiSelect BOOL
LISTBLOCK.add('ITEM', 'HTML',
'TITLE')                          #Adds new item
LISTBLOCK.startGroup('GROUP')     #
LISTBLOCK.onClick('ITEM', BOOL)   #BOOL is whether selected

LISTBLOCK.hideGroup('GROUP')      #
LISTBLOCK.hideItem('ITEM')        #
LISTBLOCK.showAll()               #

LISTBLOCK.toggle('ITEM')          #Toggle whether an item is selected
LISTBLOCK.[un]mark('ITEM')        #
LISTBLOCK.unmarkAll()             #
LISTBLOCK.isMarked()              #

LISTBLOCK.focus('ITEM')           #

LISTBLOCK.commit()                #Appends final HTML to FLOATPANEL.element

                                  ┌──────────┐
                                  │   MENU   │
                                  └──────────┘

                                 ##Plugin 'menu' (depends: 'floatpanel')
                                  #Lower-level UI used by dropdowns

CONF.menu_subMenuDelay            #Delay before showing menu options (def: 400)

EDITOR.addMenuGroup('NAME', NUM)  #
EDITOR.

new CKEDITOR.menu(EDITOR,MENU_DEF)#MENU_DEF:
                                  #  - block.attributes or attributes:
                                  #     - role (def: 'menu')
                                  #  - used as FLOATPANEL_DEF
MENU.add(MENUITEM)                #
MENU.removeAll()                  #
MENU.show(DOM_ELEM, NUM, X, Y)    #See FLOATPANEL.showBlock()
                                  #Fires EDITOR 'menuShow' with CEVENT.data panel [PANEL]
MENU.hide()                       #

MENU.addListener                  #Add|remove elements to some context menu
(FUNC(DOM_ELEM, DOM_SELECTION,    #Fired when the PANEL is shown, to get list of MENUITEM to show.
DOM_PATH))                        #Should return { 'MENUITEM': CKEDITOR.TRISTATE_* }

new CKEDITOR.menuItem             #Is:
(EDITOR, 'NAME', MENUITEM_DEF)    #  span.cke_menuitem
MENUITEM.order                    #NUM
MENUITEM.group                    #'MENUGROUP' (like order, but higher priority)
                                  #Order is taken from:
                                  #  - CONF.menu_groups 'MENUGROUP,...'
                                  #  - EDITOR.addMenuGroup('MENUGROUP'[, NUM])
MENUITEM.name                     #STR
MENUITEM.label                    #STR
MENUITEM.className                #STR
MENUITEM.icon                     #'ICON' (def: MENUITEM.name)
MENUITEM.getItems()               #MENUITEM_DEF_ARR, for submenu

MENUITEM.onClick()                #Def: EDITOR.execCommand(MENUITEM.command)

                                  ┌─────────────────┐
                                  │   CONTEXTMENU   │
                                  └─────────────────┘

                                 ##Plugin 'contextmenu' (depends: 'menu')

EDITOR.contextMenu                #Underlying MENU, replacing native context menu.
COMMAND 'contextMenu'             #Opens context menu. Also done on Shift-F10

DOM_ELEM.disableContextMenu()     #

EDITOR.addMenuItem
('MENUITEM', MENUITEM_DEF)        #
EDITOR.addMenuItems
(MENUITEM_DEF_ARR)                #
EDITOR.getMenuItem('MENUITEM')    #
EDITOR.removeMenuItem('MENUITEM') #

CONF.browserContextMenuOnCtrl     #If false, do not show when pressing 'Ctrl' + click

                                  ┌────────────┐
                                  │   BUTTON   │
                                  └────────────┘

                                 ##Plugins 'button'

CKEDITOR.UI_BUTTON                #UITYPE, with HANDLER_OBJ.create(BUTTON_DEF)
                                  #Will use SKIN.getIconStyle('BUTTON')
UI.addButton('BUTTON', BUTTON_DEF)#Same as UI.add('BUTTON', CKEDITOR.UI_BUTTON, BUTTON_DEF)
BUTTON_DEF.label                  #STR
BUTTON_DEF.title                  #STR (def: BUTTON_DEF.label)
BUTTON_DEF.click(EDITOR)          #Def: EDITOR.execCommand(BUTTON_DEF.command)
BUTTON_DEF.toolbar                #'BUTTON_GROUP[,NUM]'
BUTTON_DEF.bidirectional          #BOOL
BUTTON_DEF.className              #STR
BUTTON_DEF.hasArrow               #BOOL

BUTTON.setState(STATE)            #See COMMAND.setState(STATE)
BUTTON.getState()                 #

                                  ┌─────────────────┐
                                  │   PANELBUTTON   │
                                  └─────────────────┘

                                 ##Plugin 'panelbutton' (depends: 'button')
                                  #Buttons opening a FLOATPANEL (e.g. 'colorbutton')
                                  #PANELBUTTON is child of BUTTON
CKEDITOR.UI_PANELBUTTON           #UITYPE, with HANDLER_OBJ.create(PANELBUTTON_DEF)
                                  #PANELBUTTON_DEF:
                                  #  - panel FLOATPANEL_DEF, with also:
                                  #     - parent DOM_ELEM (def: <body>)
                                  #     - block BLOCK_DEF: only block of the new FLOATPANEL
                                  #  - hasArrow is true
                                  #  - on click, create FLOATPANEL
PANELBUTTON.onOpen|Close()        #
PANELBUTTON.onBlock(PANEL, BLOCK) #

                                  ┌────────────────┐
                                  │   MENUBUTTON   │
                                  └────────────────┘

                                 ##Plugin 'menubutton' (depends: 'menu', 'button')
                                  #Buttons opening a MENU (e.g. 'language')
                                  #MENUBUTTON is child of BUTTON
CKEDITOR.UI_MENUBUTTON            #UITYPE, with HANDLER_OBJ.create(MENUBUTTON_DEF)
                                  #MENUBUTTON_DEF:
                                  #  - hasArrow is true
                                  #  - on click, create MENU
                                  #  - onMenu(...): use MENU.addListener(onMenu)


                                  ┌───────────────┐
                                  │   RICHCOMBO   │
                                  └───────────────┘

                                 ##Plugin 'richcombo' (depends: 'floatpanel', 'listblock', 'button')
                                  #BUTTON opening a FLOATPANEL with a LISTBLOCK
                                  #Child of LISTBLOCK
CKEDITOR.UI_RICHCOMBO             #UITYPE, with HANDLER_OBJ.handler(RICHCOMBO_DEF)
                                  #RICHCOMBO_DEF:
                                  #  - panel FLOATPANEL_DEF
                                  #  - multiSelect|attributes: passed to LISTBLOCK_DEF
                                  #  - command 'COMMAND'
                                  #  - label STR
                                  #  - title STR
                                  #  - className STR
                                  #  - name STR
                                  #  - toolbar 'BUTTON_GROUP[,NUM]'
UI.addRichCombo
('RICHCOMBO', RICHCOMBO_DEF)      #Same as UI.add('RICHBUTTON', CKEDITOR.UI_RICHBUTTON, RICHCOMBO_DEF)

RICHCOMBO.setState(STATE)         #
RICHCOMBO.getState()              #
RICHCOMBO.enable|disable()        #



           
   DIALOGS  
           



                                  ┌────────────┐
                                  │   DIALOG   │
                                  └────────────┘

                                 ##Plugin 'dialog'


CKEDITOR.dialog                   #DIALOGS
DIALOGS.add('DIALOG',             #Registers 'DIALOG'.
FUNC(EDITOR)->DIALOGDEF|PATH)     #Fires CKEDITOR 'dialogDefinition' with CEVENT.data:
                                  #  - name 'DIALOG'
                                  #  - definition DIALOGDEF
                                  #PATH: usually plugins/PLUGIN/dialogs/*.js

EDITOR.openDialog('DIALOG',FUNC())#FUNC is done callback. Returns DIALOG|null
EDITOR.on('dialogHide|Show')      #CEVENT.data DIALOG
DIALOGDEF.onLoad|Show()           #First|every time
DIALOG.hide|show()                #Fires 'hide|show'

new CKEDITOR.dialogCommand
('DIALOG')                        #Returns a COMMAND_DEF that does EDITOR.openDialog('DIALOG')


DIALOGDEF.title                   #STR
CONF.dialog_backgroundCoverOpacity#NUM (def: 0.5): backdrop of the modal
CONF.dialog_backgroundCoverColor  #'COLOR' (def: 'white')


DIALOGS.getCurrent()              #
DIALOGS.exists('DIALOG')          #

DIALOG.getName()                  #'DIALOG'
DIALOG.getElement()               #Root DOM_ELEM
DIALOG.getParentEditor()          #EDITOR

DIALOG_DEF.getContents('TAB')     #Returns TAB. Available in 'dialogDefinition' event
TAB.get('D_ELEM')                 #Returns D_ELEM
DIALOG.getContentElement
('TAB', 'D_ELEM_ID')              #


DIALOG.setupContent(...)          #Calls each D_ELEM.setup(...), supposed to initialize element
DIALOG.commitContent(...)         #Calls each D_ELEM.commit(...), supposed to process submitted values
DIALOG.foreach(FUNC)              #Calls FUNC(D_ELEM) for each D_ELEM


DIALOGDEF.minHeight|Width         #NUM (def: 400|600)
DIALOGDEF.height|width            #NUM (def: DIALOGDEF.minHeight|Width)
DIALOG.getSize()                  #OBJ.height|width
DIALOGDEF.resizable               #CKEDITOR.DIALOG_RESIZE_NONE|WIDTH|HEIGHT
                                  #When resized, fires:
                                  #  - 'resize' on DIALOG with CEVENT.data DIALOG.getSize()
                                  #  - 'resize' on DIALOGS with also CEVENT.data.dialog DIALOG
DIALOG.resize(WIDTH, HEIGHT)      #
CONF.dialog_magnetDistance        #NUM (def: 20) for the handler magnet.

DIALOG.getPosition()              #OBJ.x|y NUM (in the viewport)
DIALOG.move(X, Y[, BOOL])         #If true, remembers
DIALOG.layout()                   #Put back to last position, or middle of window|viewport


DIALOG.state                      #CKEDITOR.DIALOG_STATE_IDLE|BUSY
                                  #Changes title (puts 'busy' icon)
DIALOG.setState(VAL)              #Fires event 'state' with CEVENT.data DIALOG.state


DIALOG.addPage(TABDEF)            #
DIALOG.hide|showPage('TAB')       #
DIALOG.selectPage('TAB')          #When done by user or programmatically, fires 'selectPage'
                                  #with CEVENT.data: page 'TAB', currentPage 'TAB'
DIALOG.getPageCount()             #
CONF.removeDialogTabs STR         #Remove tabs, as 'DIALOG:TAB;...'
DIALOG.isTableEnabled
(EDITOR, 'DIALOG', 'TAB')         #Check if part of removeDialogTabs


DIALOGDEF.contents                #Tabs. TABDEF_ARR
DIALOGDEF.buttons                 #Buttons on botton of tab as D_BUTTON_DEF_ARR[()]
                                  #Def: [DIALOGS.okButton, DIALOG.cancelbutton, which fires 'ok|cancel'
DIALOGS.addIframe('DIALOG', TITLE,
MINWIDTH, MINHEIGHT
[, FUNC(DIALOGDEF)][, DIALOGDEF]) #Add <iframe> DIALOG.
DIALOGS.addUIElement('TYPE', FUNC)#Add custom D_ELEM

DIALOG.getValueOf
('TAB', 'D_ELEM_ID')
DIALOG.setValueOf
('TAB', 'D_ELEM_ID', VAL)         #Calls D_ELEM.getValue|setValue(...)
DIALOG.reset()                    #Resets all input values.


DIALOG.addFocusable
(DOM_ELEM[, NUM])                 #
DIALOG.getSelectedElement()       #DOM_ELEM

DIALOGDEF.onOk|Cancel()           #
CONF.dialog_noConfirmCancel       #If false (def), ask for confirmation when cancelling.
CONF.dialog_buttonsOrder          #Can be 'OS' (def, OS-specific) or 'lrt|rtl'

DIALOG.getButton('BUTTON')        #
DIALOG.click('BUTTON')            #
DIALOG.disable|enableButton
('BUTTON')                        #


                                  ┌──────────────┐
                                  │   DIALOGUI   │
                                  └──────────────┘

                                 ##Plugin 'dialogui'

TABDEF                            #A tab
TABDEF.id                         #
TABDEF.label                      #STR
TABDEF.title                      #STR
TABDEF.accessKey                  #STR
TABDEF.elements                   #D_ELEM_DEF_ARR

D_ELEM_DEF.id                     #
D_ELEM_DEF.align|className|style|
title                             #HTML attributes
D_ELEM_DEF.requiredContent        #RULES
D_ELEM_DEF.type                   #'button|fileButton|checkbox|textarea|text|select|radio|file|fieldset|hbox|vbox|html'
D_ELEM_DEF.onHide|Show()          #When DIALOG is hidden|shown
D_ELEM_DEF.onLoad()               #When first displayed
D_ELEM_DEF.setup|commit(...)      #Called by DIALOG.setupContent|commitContent(...)

D_ELEM.getDialog()                #DIALOG
D_ELEM.getElement()               #HTML_ELEM
D_ELEM.getInputElement()          #HTML_ELEM

D_ELEM.getValue()                 #ELEM.value
D_ELEM.setValue(VAL)              #Fires 'change' with CEVENT.data VAL
D_ELEM.isChanged()                #
D_ELEM.getValue|setValue|isChanged#Override

D_ELEM.disable|enable()           #
D_ELEM.isEnabled()                #
D_ELEM.isVisible()                #

D_ELEM-selectParentTab()          #
D_ELEM.accessKeyDown|Up
(DIALOG, 'KEY')                   #Event handler

D_ELEM_DEF.validate(DIALOG)       #Called when 'ok' will be fired.
                                  #If returns false|STR:
                                  #  - does not fire it
                                  #  - gives element focus.
                                  #  - if STR, calls alert(STR)
                                  #Fires 'validated' with CEVENT.data: valid BOOL, msg STR


D_BUTTON_DEF                      #Child of D_ELEM_DEF
D_BUTTON_DEF.disabled             #BOOL

D_BUTTON.click()                  #


D_FILEBUTTON_DEF                  #Child of D_ELEM_DEF
D_FILEBUTTON_DEF.filebrowser      #When file is uploaded:
                                  #  - 'TAB:D_ELEM': updates D_ELEM
                                  #  - OBJ:
                                  #     - onSelect(URL, OBJ2)
D_FILEBUTTON_DEF.for              #[ 'TAB', 'D_ELEM' ]

D_FILEBUTTON                      #Child of D_BUTTON (not D_ELEM)
D_FILEBUTTON.on('formLoaded')     #


D_CHECKBOX_DEF                    #Child of D_ELEM_DEF
D_CHECKBOX_DEF.default            #Default value for HTML attribute checked


D_LABELED_ELEM_DEF                #Child of D_ELEM_DEF. Control element.
D_LABELED_ELEM_DEF.
controlStyle|inputStyle|labelStyle#'CSS' of the container|containee|label
D_LABELED_ELEM_DEF.labelLayout    #'horizontal' or 'vertical' (def)
D_LABELED_ELEM_DEF.widths         #NUM_ARR

D_LABELED_ELEM.getLabel()         #
D_LABELED_ELEM.setLabel(STR)      #


D_TEXTAREA_DEF                    #Child of D_LABELED_ELEM_DEF
D_TEXTAREA_DEF.bidi               #BOOL
D_TEXTAREA_DEF.cols|rows          #NUM
D_TEXTAREA_DEF.default            #STR


D_TEXTINPUT_DEF                   #Child of D_LABELED_ELEM_DEF
D_TEXTINPUT_DEF.bidi              #BOOL
D_TEXTINPUT_DEF.default           #STR
D_TEXTINPUT_DEF.maxLength|size    #NUM

D_TEXTINPUT.getDirectionMarker()  #STR
D_TEXTINPT.setDirectionMarker(STR)#
D_TEXTINPUT.select()              #


D_SELECT_DEF                      #Child of D_LABELED_ELEM_DEF
D_SELECT_DEF.default              #STR
D_SELECT_DEF.items                #STR_ARR
D_SELECT_DEF.multiple             #BOOL
D_SELECT_DEF.size                 #NUM

D_SELECT.add(STR, VAL[, NUM])     #
D_SELECT.remove(NUM)              #
D_SELECT.clear()                  #


D_RADIO_DEF                       #Child of D_LABELED_ELEM_DEF
D_RADIO_DEF.default               #STR
D_RADIO_DEF.items                 #STR_ARR


D_FILE_DEF                        #Child of D_LABELED_ELEM_DEF
D_FILE_DEF.size                   #NUM

D_FILE.submit()                   #
D_FILE.reset()                    #
D_FILE.getAction()                #<form> HTML attribute action


D_FIELDSET_DEF                    #Child of D_ELEM_DEF


D_HBOX_DEF                        #Child of D_ELEM_DEF
D_HBOX_DEF.children               #D_ELEM_DEF_ARR
D_HBOX_DEF.height                 #NUM
D_HBOX_DEF.widths                 #NUM_ARR
D_HBOX_DEF.padding                #NUM
D_HBOX_DEF.styles                 #'CSS'


D_VBOX_DEF                        #Same as D_HBOX, except widths->width, height->heights and:
D_VBOX_DEF.expand                 #BOOL


D_HTML_DEF                        #Child of D_HTML_DEF
D_HTML_DEF.html                   #'HTML'

                                  ┌──────────────────┐
                                  │   DIALOGADVTAB   │
                                  └──────────────────┘

                                 ##Plugin 'dialogadvtab' (depends: 'dialog')
                                  #'Advanced' tab in dialogs, allowing to set HTML attrs id|dir|style|class

                                  ┌──────────────────┐
                                  │   IFRAMEDIALOG   │
                                  └──────────────────┘

                                 ##Plugin 'iframedialog' (depends: 'dialog')
CKEDITOR.dialog.addIframe(...)    #Create a DIALOG containing an <iframe>

                                  ┌─────────────────┐
                                  │   COLORDIALOG   │
                                  └─────────────────┘

                                 ##Plugin 'colordialog' (requires: 'dialog')
                                  #Color picker in dialogs where user needs to pick a color
                                  #Dialog|command 'colordialog'
EDITOR.getColorFromDialog
(FUNC('COLOR')[, THIS])           #

                                  ┌───────────┐
                                  │   POPUP   │
                                  └───────────┘

                                 ##Plugin 'popup'
EDITOR.popup                      #Opens popup.
('URL'[, STR][, STR2][, STR3])    #Def STR[2]: '80%|70%'
                                  #STR3: passed to window.open(). Def: 'location=no,menubar=no,toolbar=no,
                                  #dependent=yes,minimizable=no,modal=yes,alwaysRaised=yes,resizable=yes,scrollbars=yes'




                
   NOTIFICATION  
                



                                  ┌──────────────────┐
                                  │   NOTIFICATION   │
                                  └──────────────────┘

                                 ##Plugin 'notification' (depends: 'toolbar')
                                  #Shows notifications
new CKEDITOR.plugins.notification #Returns NOTIFICATION
(EDITOR, OBJ)                     #OBJ:
                                  #  - message STR
                                  #  - type 'info' (def) or 'warning|success|progress'
                                  #  - progress NUM
                                  #  - duration NUM: how long visible.
                                  #    Def:
                                  #     - warning|progress: 0, i.e. disabled
                                  #     - info|success: CONF.notification_duration NUM (def: 5000)
                                  #  - important BOOL
EDITOR.showNotification
(STR[, STR[, NUM]])               #Returns NOTIFICATION, with message, type, progress|duration
NOTIFICATION.message|type|progress
|duration                         #
NOTIFICATION.element              #DOM_ELEM
NOTIFICATION.editor               #EDITOR
NOTIFICATION.id                   #
NOTIFICATION.show|hide()          #Fires EDITOR event 'notificationShow|Hide' with CEVENT.data.notification NOTIFICATION
NOTIFICATION.update(OBJ)          #Fires EDITOR event 'notificationUpdate' with CEVENT.data.notification NOTIFICATION and
                                  #CEVENT.data.options OBJ
                                  #OBJ is same as constructor.
NOTIFICATION.isVisible()          #

                                  ┌────────────────────────────┐
                                  │   NOTIFICATIONAGGREGATOR   │
                                  └────────────────────────────┘

                                 ##Plugin 'notificationaggregator'
                                  #Used to fire only one notification when several tasks performed (see online doc)
CKEDITOR.plugins.
notificationaggregator.*          #




           
   TOOLBAR  
           

                                  ┌─────────────────┐
                                  │   WYSIWYGAREA   │
                                  └─────────────────┘

                                 ##Plugin 'wysiwygarea'
                                  #'wysiwyg' mode (i.e. main editing mode)

CONF.fullPage                     #If true (def: false), outputs a full HTML page (as an <iframe>)

CONF.docType                      #Def: '<!DOCTYPE html>'.
CONF.bodyId|bodyClass             #Only if CONF.fullPage false.

CONF.contentsLanguage             #If CONF.fullPage true, <html lang="VAL"> (def: EDITOR.langCode)
CONF.contentsLangDirection        #'' (def) or 'rtl|ltr'


CONF.disableObjectResizing        #If true (def: false), allow user to resize images and tables
                                  #Does not work on IE.
CONF.disableNativeTableHandles    #If true (def), disables Firefox native <table> tools

CONF.baseHref                     #Base URL for <a> (using <base>)

                                  ┌─────────────┐
                                  │   DIVAREA   │
                                  └─────────────┘

                                 ##Plugin 'divarea'
                                  #Similar to inline mode, using a <div>

                                  ┌─────────────┐
                                  │   TOOLBAR   │
                                  └─────────────┘

                                 ##Plugin 'toolbar' (depends: 'button')
CONF.toolbarLocation              #'top|bottom' (def: 'top'). In 'normal mode'
CONF.toolbarCanCollapse           #If true (def: false), user can collapse toolbar. In 'normal mode'
CONF.toolbarStartupExpanded       #If true (def), and CONF.toolbarCanCollapse true, starts collapsed.
CONF.toolbarGroupCycling          #If true (def), arrow keystokes navigate between button groups, not buttons

EDITOR.toolbar                    #TOOLBAR
CONF.toolbar                      #Buttons. Either:
                                  #  - 'TOOLBAR'
                                  #  - VAL_ARR:
                                  #     - OBJ:
                                  #        - name 'BUTTON_GROUP'
                                  #        - items 'BUTTON'_ARR
                                  #           - '-': separator
                                  #     - '/': newline
CONF.toolbar_TOOLBAR              #Same but defines a 'TOOLBAR'


CONF.toolbarGroups                #Button groups. Same value as CONF.toolbar VAL_ARR, except:
                                  #  - items -> groups
                                  #  - 'PLUGIN' instead of 'BUTTON'
UI.addToolbarGroup('BUTTON_GROUP',
'NEXT_BUTTON_GROUP'|NUM
[,'PARENT_BUTTON_GROUP'])

CONF.removeButtons                #"BUTTON,...". Prefer removePlugins

                                  ┌───────────────────┐
                                  │   FLOATINGSPACE   │
                                  └───────────────────┘

                                 ##Plugin 'floatingspace'
                                  #Place the toolbar, when in inline mode

CONF.floatSpaceDocked|            #Space between element and bar when toolbar is docked|pinned
PinnedOffsetX|Y                   #Def: 10,10 (docked) and 20,20 (pinned)
CONF.floatSpacePreferRight        #If true (def: false), align to right, not left

                                  ┌─────────────────┐
                                  │   SHAREDSPACE   │
                                  └─────────────────┘

                                 ##Plugin 'sharedspace'
                                  #Detach toolbar and bottom bar from content area, and share those across several EDITOR.
                                  #Not compatible with 'resize|maximize'
CONF.sharedSpaces.top|bottom      #'ID'|ELEM: where to put toolbar and bottom bar.

                                  ┌───────────┐
                                  │   FIXED   │
                                  └───────────┘

                                 ##Community plugin 'fixed' (1.0)
                                  #Keeps toolbar on top of screen when scrolling:
                                  #  - in 'normal mode'
                                  #  - as long as editor still on screen
                                  #Does it by doing DOM manipulation (not using CKEditor API)

                                  ┌──────────────┐
                                  │   MAXIMIZE   │
                                  └──────────────┘

                                 ##Plugin 'maximize'
COMMAND 'maximize'                #Full screen editor. Fire 'maximize' with CEVENT.data CKEDITOR.TRISTATE_ON|OFF
                                  #Done by button 'Maximize' (toolbar 'maximize')
                                  #Does not work with 'sharedspaces' or in inline mode




      
   UX  
      



                                  ┌────────────────┐
                                  │   KEYSTROKES   │
                                  └────────────────┘

EDITOR.keystokeHandler            #KEYSTROKEHANDLER
KEYSTROKEHANDLER.keystrokes       #OBJ.KEY 'COMMAND' (def: CONF.keystokes, as [KEY, 'COMMAND'|null]_ARR):
                                  #  - KEY:
                                  #     - is EVENT.keyCode|which
                                  #     - can use CKEDITOR.CTRL|SHIFT|ALT
                                  #  - fires 'key' with CEVENT.data: domEvent EVENT, keyCode KEY
                                  #  - fires COMMAND({ from: 'keystrokeHandler' })->BOOL on 'keydown' KEY
                                  #     - unless 'key' event handler returns false
                                  #  - does EVENT.preventDefault() if:
                                  #     - COMMAND returns false
                                  #     - or KEYSTROKEHANDLER.blockedKeystrokes.KEY true (def: CONF.blockedKeystrokes KEY_ARR)
                                  #       (def: CTRL+B, CTRL+I, CTRL+U)
EDITOR.setKeystoke
(KEY, 'COMMAND'|null)
EDITOR.setKeystoke
([KEY, 'COMMAND'|null]_ARR)       #
KEYSTROKEHANDLER.attach(ELEM)     #

EDITOR.on('doubleclick')          #CEVENT.data: element DOM_ELEM

                                  ┌──────────────────┐
                                  │   FOCUSMANAGER   │
                                  └──────────────────┘

CONF.startupFocus                 #If true (def: false), EDITOR.focus() called on startup

EDITOR.focusManager               #FOCUSMANAGER, i.e. underlying class handling all focus|blur on one EDITOR
FOCUSMANAGER.editor               #EDITOR

EDITOR.focus()                    #EDITOR.container has class .cke_focus if focused
EDITOR.on('focus|blur')           #

FOCUSMANAGER.focus([DOM_ELEM])    #
FOCUSMANAGER.blur()               #

EDITABLE|FOCUSMANAGER.hasFocus    #BOOL
FOCUSMANAGER.currentActive        #DOM_ELEM

FOCUSMANAGER.[un]lock()           #Cannot change which element has focus until unlocked.


COMMAND_DEF.editorFocus           #If true (def), firing commands gives focus to EDITOR

COMMAND 'toolbarFocus'            #Gives focus (also shortcut F10)

DOM_WINDOW|DOM_ELEM|D_ELEM.focus()#
DOM_ELEM.focusNext|Previous()     #Using tabindex
D_ELEM.isFocusable()              #

CONF.dialog_startupFocusTab       #If true (def: false), gives focus to newly opened dialog.

FLOATPANEL.blur|focus()           #
FLOATPANEL.allowBlur(BOOL)        #


WIDGETS.focused                   #Currently focused WIDGET, or undefined
                                  #Also adds CSS class 'cke_widget_focused'
WIDGET.focusedEditable            #Currently focused EDITABLE, or undefined
WIDGETS.
widgetHoldingFocusedEditable      #WIDGET, or undefined
WIDGETS.on('focus|blur')          #When focusing|blurring a WIDGET
WIDGET.setFocused(BOOL)           #





          
   STYLES  
          



new CKEDITOR.style(STYLEDEF[,ARR])#Returns STYLE
                                  #Can use '#(NUM)' in STYLE_DEF.attributes|styles values, replaced by ARR[NUM]
STYLE.getDefinition()->STYLE_DEF  #


STYLE_DEF.type                    #How STYLE is applied|removed.
                                  #Can be:
                                  #  - 'block': applied to whole current block elements
                                  #  - 'object': applied to replaced elements, list elements, table elements,
                                  #    <a>, <hr>, <form>
                                  #  - 'inline': applies to whole current inline elements
                                  #  - 'CUSTOM':
                                  #     - must use CKEDITOR.style.addCustomHandler(STYLE_DEF)->STYLE_FUNC:
                                  #        - STYLE_DEF:
                                  #           - type 'CUSTOM'
                                  #           - setup(STYLE_DEF), with STYLE as this: called at construction
                                  #           - assignedTo NUM (def: CKEDITOR.STYLE_OBJECT)
                                  #        - can also use new STYLE_FUNC instead of new CKEDITOR.style
                                  #Def between 'block|object|inline': depends on STYLE_DEF.element
STYLE_DEF.name                    #STR
STYLE_DEF.element                 #'TAG ...' or { TAG: 1|0, ... }
STYLE_DEF.attributes              #HTML attributes as { VAR: VAL }
STYLE_DEF.styles                  #CSS properties as { VAR: VAL }
                                  #CKEDITOR.style.getStyleText(STYLE_DEF) returns STYLE_DEF as 'CSS'
STYLE_DEF.includeReadonly         #If true (def: false), can apply inline STYLE on read-only elements,
                                  #unless CONF.disableReadonlyStyling true (def)
STYLE_DEF.alwaysRemoveElement     #If true (def: false), STYLE.remove() works even if not right TAG


EDITOR.applyStyle|removeStyle
(STYLE)
STYLE.apply|remove(EDITOR)        #Applies style on current selection, if STYLE.checkApplicable()

STYLE.buildPreview([STR])         #Returns 'HTML' that would result of applying STYLE on a text node STR
                                  #(def: STYLE_DEF.name)

STYLE.checkApplicable             #Returns true if can apply STYLE, i.e.:
(HTML_PATH, EDITOR[, FILTER])     #  - right HTML tag (e.g. block element for 'block' STYLE)
                                  #  - and optionally FILTER.check(STYLE)
STYLE.checkActive
(HTML_PATH, EDITOR)               #Returns true if STYLE active in HTML_PATH


CKEDITOR.styleCommand
(STYLE[, COMMAND_DEF])            #Returns COMMAND which exec() does EDITOR.applyStyle|removeStyle(STYLE)




            
   I/O BASE  
            



P_ELEM VS DOM_ELEM ==>            #CKEditor uses three states for I/O:
                                  #  - unprocessed 'HTML'
                                  #  - parsed FRAGMENT|P_NODE (including P_ELEM): just for I/O, not DOM manipulation
                                  #  - processed 'HTML'
                                  #'HTML' can be DOM manipulated (like jQuery) by using DOM_OBJ (including DOM_ELEM)

                                  ┌─────────┐
                                  │   DTD   │
                                  └─────────┘

CKEDITOR.dtd                      #DTD
                                  #Information about HTML tags, used by core modules.

DTD.TAG                           #OBJ.TAG2 1, i.e. TAG can contain TAG2 elements
                                  #TAG2 '#' means text node.

DTD.$block|inline                 #OBJ.TAG 1, i.e. TAG is a block|inline element.
DTD.$object                       #Replaced elements
DTD.$list[Item]                   #List parent|children
DTD.$tableContent                 #Elements that can live inside a <table>

DTD.$nonBodyContent               #Can be outside of <body>
DTD.$blockLimit                   #Same for blocks containing other blocks
DTD.$intermidiate                 #Must live within its parent

DTD.$cdata                        #<script> and <style>

DTD.$[non]Editable                #Whether can edit in the browser
DTD.$transparent                  #Elements that are not visible
DTD.$tabIndex                     #Can use tabindex

DTD.$empty                        #Self-closing tags
DTD.$removeEmpty                  #If no children, should be filtered out.



                                  ┌────────────────┐
                                  │   HTMLPARSER   │
                                  └────────────────┘

new CKEDITOR.htmlParser()         #
P_PARSER.parse('HTML')            #Will fires P_PARSER:
                                  #  - onTagOpen('TAG', ATTR_OBJ, BOOL):
                                  #     - ATTR_OBJ.VAR will be 'VAR' instead of '' for those HTML attributes without a value:
                                  #       checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected
                                  #     - BOOL true if self closing
                                  #  - onTagClose('TAG')
                                  #  - onText(STR)
                                  #  - onCDATA(STR): like onText(), but for tags from DTD.$cdata, i.e. <script|style>
                                  #  - onComment(STR): only comment content

new CKEDITOR.htmlWriter()         #Internal 'HTML' buffer
P_WRITER.getHtml([BOOL])          #Returns current buffer. If true, P_WRITER.reset()
P_WRITER.reset()                  #Resets buffer to ''
P_WRITER.write|text('STR')        #Adds 'STR'         to buffer
P_WRITER.comment('STR')           #Adds '<!--STR-->'  to buffer
P_WRITER.openTag('TAG')           #Adds '<TAG'        to buffer
P_WRITER.openTagClose             #Adds '>'           to buffer (if false)
('TAG'[, BOOL])                   #Adds ' />'         to buffer (if true)
P_WRITER.closeTag('TAG')          #Adds '</TAG>'      to buffer
P_WRITER.attribute('ATTR', VAL)   #Adds ' ATTR="VAL"' to buffer

                                  ┌────────────────┐
                                  │   HTMLWRITER   │
                                  └────────────────┘

                                 ##Plugin 'htmlwriter'

WRITER                            #Child of P_WRITER, with beautified HTML output.
                                  #Replaces EDITOR.dataProcessor.writer

WRITER.setRules('TAG', W_OBJ)     #Formatting for that tag.
                                  #Def W_OBJ:
                                  #  - indent: true if cannot contain text node, except <pre>, <title>, <style>
                                  #  - breakBeforeOpen: true, except <title>
                                  #  - breakAfterOpen: true for <pre>
                                  #  - breakBeforeClose: true if cannot contain text node, plus <style>
                                  #  - breakAfterClose: true

WRITER.indentation()              #Write indentation:
                                  #  - uses WRITER.indentationChars STR
                                  #    (def: CONF.dataIndentationChars (def: '\t'))
                                  #  - done:
                                  #     - after newlines
                                  #     - on children unless W_OBJ.indent false
WRITER.lineBreak()                #Write newlines:
                                  #  - uses WRITER.lineBreakChars (def: '\n')
                                  #  - done according to W_OBJ.breakBefore|AfterOpen|Close BOOL
                                  #Also adds extra '\n' after tag if W_OBJ.needsSpace true

WRITER.selfClosingEnd             #How self-closing tags are closed: '>' or '/>' (def)
WRITER.sortAttributes             #BOOL: sort HTML attributes
WRITER.forceSimpleAmpersand       #If true, HTML encode HTML attributes values '&'
                                  #Def: CONF.forceSimpleAmpersand (def: false)

                                  ┌──────────────────────┐
                                  │   HTMLPARSER NODES   │
                                  └──────────────────────┘

P_NODE                            #Generic HTML element
P_NODE.parent                     #P_NODE
P_NODE.children                   #P_NODE_ARR
P_NODE.previous|next              #P_NODE: siblings
P_NODE.remove()                   #
P_NODE.replaceWith(P_NODE2)       #
P_NODE.insertBefore|After(P_NODE2)#Manipulates P_NODE.parent|children|previous|next

P_NODE.getIndex()                 #Among siblings
P_NOD.getAscendant(FUNC|STR[_ARR])#Returns first P_ELEM parent that satisties condition (or null):
                                  #  - FUNC(P_NODE)->BOOL
                                  #  - STR[_ARR]: tag name
P_NODE.wrapWith(P_ELEM)           #Does P_NODE.replaceWith(P_ELEM) then P_ELEM.add(P_NODE)

P_NODE.type                       #CKEDITOR.NODE_TEXT|COMMENT|ELEMENT
P_FILTER.applyTo(P_NODE|P_FRAGMNT)#Same
P_NODE|P_FRAGMENT.writeHtml       #Calls:
(P_WRITER[, P_FILTER])            #  - P_NODE|P_FRAGMENT.filter(P_FILTER, VAL)
                                  #  - relevant P_WRITER.TYPE(VAL), i.e. write corresponding 'HTML'
                                  #  - P_ELEM. use P_ELEM.name|attributes
                                  #  - P_ELEM|P_FRAGMENT also call P_ELEM|P_FRAGMENT.writeChildrenHtml(...),
                                  #    which does writeHtml(...) recursively


P_TEXT                            #P_NODE child
P_TEXT.value                      #STR


P_CDATA                           #Like P_TEXT except no filters.


P_COMMENT                         #P_NODE child
P_COMMENT.value                   #STR


P_ELEM                            #P_NODE child
P_ELEM.name                       #'TAG'
P_ELEM.attributes                 #OBJ
P_ELEM.addClass|removeClass
('CLASS')                         #
P_ELEM.hasClass('CLASS')          #

P_ELEM.clone()                    #
P_ELEM.add(P_NODE, NUM)           #Manipulates P_ELEM.children
P_ELEM.replaceWithChildren()      #Replaces P_ELEM by P_ELEM.children
P_ELEM.split(NUM)                 #Add clone as next siblings, giving it some of its children.
P_ELEM.getFirst([FUNC|STR[_ARR]]) #Same as P_NODE.getAscendant() but for direct children

P_ELEM.forEach                    #Calls FUNC(P_NODE)->BOOL for recursive children. If false, not recursive on that element.
(FUNC(...)[, TYPE[, BOOL]])       #If BOOL false (def), calls on P_ELEM itself first.
                                  #Can only do for specific TYPE.

P_ELEM.get[Outer]Html()           #Gets 'HTML'
                                  #Uses a temp P_WRITER, then P_ELEM.write[Children]Html(P_WRITER), returns P_WRITER.getHtml()
P_ELEM.setHtml('HTML')            #Sets P_ELEM.children
                                  #Uses CKEDITOR.htmlParser.fragment.fromHtml('HTML').children, with parent P_ELEM
CKDTR.htmlParser.fragment.fromHtml#Returns 'HTML' as P_FRAGMENT
('HTML'[, P_ELEM|'TAG'[, 'TAG2']])#P_ELEM|'TAG' is ROOT (def: new P_FRAGMENT)
                                  #If 'TAG2':
                                  #  - wrap ROOT direct children in 'TAG2'
                                  #  - if child tag is in DTD.$inline and not in DTD.$head
                                  #Uses P_PARSER.parse('HTML'): on parser events, add children, e.g.:
                                  #  P_PARSER.onCDATA = function(STR) { ROOT.add(new P_CDATA(STR)) }
                                  #Also does some fixes:
                                  #  - remove empty tags if are in DTD.$removeEmpty
                                  #  - <br> are pushed outside of unallowed tags
                                  #  - compress whitespaces in text nodes
                                  #  - others


P_FRAGMENT                        #Not P_NODE child. Represents a root element that should not be written (only its children)
P_FRAGMENT.type                   #CKEDITOR.DOCUMENT_FRAGMENT
P_FRAGMENT.add|forEach(...)       #Like P_ELEM.add|forEach(...)


new CKEDITOR.htmlParser.cssStyle
(P_ELEM|'CSS')                    #If P_ELEM, takes P_ELEM.attributes.style 'CSS'
CSSSTYLE.rules                    #OBJ.prop 'VAL'
CSSSTYLE.toString()               #Returns 'CSS'
CSSSTYLE.populate(P_ELEM|DOM_ELEM)#Applies to style HTML attribute

                                  ┌───────────────────┐
                                  │   DATAPROCESSOR   │
                                  └───────────────────┘

EDITOR.dataProcessor              #DATAPROCESSOR
DATAPROCESSOR.toDataFormat('HTML')#From unprocessed HTML to processed HTML, and inverse.
                                  #Processing depends on DATAPROCESSOR
DATAPROCESSOR.toHtml('HTML')      #From processed HTML to unprocessed HTML, and inverse.
                                  #Processing depends on DATAPROCESSOR


HTML_DATAPROCESSOR                #Default DATAPROCESSOR.
HTML_DATAPROCESSOR.toDataFormat   #Processing:
('HTML'[, OBJ])                   #  - removes /^<br>/ unless enterMode ENTER_BR (OBJ.enterMode (def: EDITOR.enterMode))
                                  #  - temporarily transforms to FRAGMENT:
                                  #     - first, FRAGMENT = CKEDITOR.htlmParser.fragment.fromHtml('HTML', OBJ.context, 'TAG'):
                                  #        - 'TAG':
                                  #           - 'div|p' if enterMode ENTER_DIV|P
                                  #           - null if enterMode ENTER_BR or CONF.autoParagraph false
                                  #     - last, HTML_DATAPROCESSOR.writer P_WRITER:
                                  #        - P_WRITER.reset()
                                  #        - FRAGMENT.writeChildrenHtml(P_WRITER)
                                  #        - P_WRITER.getHtml()
                                  #  - filters FRAGMENT:
                                  #     - FRAGMENT.filterChildren(HTML_DATAPROCESSOR.dataFilter P_FILTER):
                                  #        - protect some HTML attributes|tags|etc., restored by HTML_DATAPROCESSOR.htmlFilter
                                  #     - FILTER.applyTo(FRAGMENT), with OBJ.filter (def: EDITOR.filter)
                                  #  - adds '&nsbp;' in empty block elements if CONF.fillEmptyBlocks BOOL[(DOM_ELEM)] (def: true)
                                  #    Used to properly render line-height
HTML_DATAPROCESSOR.toHtml         #Processing:
('HTML'[, OBJ])                   #  - like toDataFormat() but reverse order
                                  #  - uses HTML_DATAPROCESSOR.htmlFilter instead:
                                  #     - <a>: remove if no name|id
                                  #     - <embed>: copy parent <object> width|height
                                  #     - <html>: remove HTML attributes contenteditable|class
                                  #     - <body>: remove HTML attributes contenteditable|spellcheck
                                  #     - remove all HTML tags prefix 'cke:'
                                  #     - remove all HTML attributes prefix 'data-cke-'
                                  #     - remove elements with data-cke-temp

HTML_DATAPROCESSOR.editor         #EDITOR

CONF.protectedSource              #REGEXP on HTML that should not be available in unprocessed HTML

                                  ┌─────────┐
                                  │   I/O   │
                                  └─────────┘

EDITOR.getData()                  #Returns unprocessed 'HTML':
                                  #  - will call EDITABLE.getData('HTML'), i.e. P_ELEM.getHtml()
                                  #    then DATAPROCESSOR.toDataFormat('HTML')
                                  #Fires '[before]getData' with CEVENT.data.dataValue 'HTML' (getData() only)
EDITOR.setData(STR[, OBJ])        #Sets HTML content from unprocessed 'HTML'
                                  #Fires '[after]setData' with CEVENT.data.dataValue 'HTML'
                                  #  - will call EDITABLE.setData('HTML'), i.e. DATAPROCESSOR.toHtml('HTML')
                                  #    then P_ELEM.setHtml('HTML')
                                  #Fires 'dataReady' and OBJ.callback()
                                  #If OBJ.noSnapshot true, do not record in undo history.

EDITOR.getSelectedHtml([BOOL])    #Returns STR (if true) or FRAGMENT (if false)
EDITOR.extractSelectedHtml([BOOL])#Same but also removes it

EDITOR.insertHtml                 #STR is 'HTML'
(STR[, STR2[, DOM_RANGE]])        #STR2 can be:
                                  #  - 'html': filtered by CKEDITOR.filter
                                  #  - 'unfiltered_html': no FILTER
                                  #  - 'text': plain text, i.e. will inherit current position styles
                                  #DOM_RANGE (def: current selection)
                                  #Fires:
                                  #  - 'insertHtml' with CEVENT.data: mode STR2, dataValue STR, range DOM_RANGE
                                  #  - 'afterInsertHtml' with CEVENT.data: intoRange DOM_RANGE
EDITOR.insertText(STR)            #Like EDITOR.insertHtml(STR, 'text')
EDITOR.insertElement(DOM_ELEM)    #Like EDITOR.insertHtml(DOM_ELEM.getOuterHtml()), except fires different events:
                                  #  - 'insertElement' with CEVENT.data DOM_ELEM

EDITOR.on('change')               #Only in 'wysiwyg' mode.

CONF.htmlEncodeOutput             #If true, HTML encode serialized data set to DOM element when EDITOR is destroyed.

CONF.ignoreEmptyParagraph         #If true (def), if getData() is '<p></p>' -> ''



       
   I/O  
       


                                  ┌──────────────┐
                                  │   ENTERKEY   │
                                  └──────────────┘

                                 ##Plugin 'enterkey'
                                  #What happens when typing '[shift-]enter'
CONF.[active][shift]enterMode     #Default behavior when hitting [SHIFT-]ENTER among CKEDITOR.ENTER_P|BR|DIV (def: P and BR)
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITR.setActiveEnterMode(VAL,VAL2)#For activeEnterMode and activeShiftEnterMode
                                  #Fires 'activeEnterModeChange'
FILTER.getAllowedEnterMode        #Check if FILTER allows this enterMode (shiftEnterMode if true), i.e. if <p>, <br> or <div>
(VAL[, BOOL])                     #are allowed. If none, returns CKEDITOR.EDITOR_BR

CONF.forceEnterMode               #If false (def), do not use enterMode in some circumstances where it does not make sense.

COMMAND '[shifte|E]nter'          #Programmatically

                                  ┌─────────┐
                                  │   TAB   │
                                  └─────────┘

                                 ##Plugin 'tab'
                                  #Make [Shift-]Tab fire COMMAND:
                                  #  - 'blur[Back]': going to next EDITOR
                                  #  - 'selectNext|PreviousCell': going to next <table> cell (if CONF.enableTabKeyTools true (def))
                                  #Or insert CONF.tabSpaces (def: 0) spaces


                                  ┌──────────────┐
                                  │   ENTITIES   │
                                  └──────────────┘

                                 ##Plugin 'entities'
CONF.basicEntities                #If true (def), escape basic HTML entities
CONF.entities                     #If true (def), escape HTML entities
CONF.entities_greek|latin         #If true (def), escape Greek|Latin HTML entities
CONF.entities_processNumerical    #If true (def: false), convert all Unicode numbers into HTML entities.
CONF.entities_additional          #Comma-separated (def: "#39", i.e. quote char)

                                  ┌───────────────┐
                                  │   LINEUTILS   │
                                  └───────────────┘

                                  #Plugin 'lineutils'
CKEDITOR.plugins.lineutils.
finder|locator|liner              #Utilities to create horizontal spaces in the editor

                                  ┌──────────────┐
                                  │   MARKDOWN   │
                                  └──────────────┘

                                 ##Community plugin 'markdown' (1.0)
                                  #Adds mode 'markdown' (use marked library)

COMMAND 'markdown'                #Changes mode
                                  #Done by button 'Markdown'

CONF.markdown.mode                #Def: 'gfm'
CONF.markdown.lineNumbers         #Def: true
CONF.markdown.theme               #Def: 'default'

                                  ┌────────────┐
                                  │   BBCODE   │
                                  └────────────┘

                                 ##Plugin 'bbcode' (depends: 'entities')
                                  #Outputs BBCode instead of HTML (by using a FILTER)

                                  ┌──────────────┐
                                  │   AUTOSAVE   │
                                  └──────────────┘

                                ##Community plugin 'autosave'
                                 #Saves to localStorage

                                  ┌──────────┐
                                  │   LITE   │
                                  └──────────┘

                                ##Community plugin 'lite'
                                 #Track changes




           
   FILTERS  
           


P_FILTER VS FILTER ==>            #Both processed by HTML_DATAPROCESSOR.
                                  #P_FILTER is lower-level:
                                  #  - HTML correctness
                                  #  - usually not changed
                                  #FILTER is higher-level:
                                  #  - allowed|disallowed HTML

                                  ┌──────────────────────┐
                                  │   HTMLPARSER RULES   │
                                  └──────────────────────┘

P_NODE|P_FRAGMENT.filter          #Calls relevant P_FILTER.onTYPE(VAL, VAL2, P_NODE|P_FRAGMENT):
(P_FILTER[, VAL])                 #  - if filtered, transforms with P_NODE.remove|replaceWith()
                                  #  - returns BOOL (filtered or not)
                                  #  - def VAL: {}
                                  #  - P_ELEM|P_FRAGMENT also call P_ELEM|P_FRAGMENT.filterChildren(...),
                                  #    which does filter(...) recursively
                                  #  - not done on P_ELEM with HTML attribute data-cke-processor="off"
                                  #Called by P_NODE|P_FRAGMENT.writeHtml(...) and HTMLDATAPROCESSOR.toDataFormat|Html(...)


new CKEDITR.htmlParser.filter(OBJ)#Creates P_FILTER, and do P_FILTER.addRules(OBJ)
P_FILTER.addRules(OBJ[, RULE_OPT])#Adds to relevant P_FILTERGROUP.rules
                                  #RULE_OPT: priority NUM (def: 10)
P_FILTER.id                       #

P_FILTERGROUP.rules               #OBJ_ARR:
                                  #  - value PRULE, i.e. either:
                                  #     - FUNC(P_NODE|P_FRAGMENT|STR)->P_NODE|P_FRAGMENT|STR|false:
                                  #        - transforms|filters it
                                  #     - [ REGEXP|STR, STR|FUNC ]:
                                  #        - transform using STR.replace(REGEXP|STR, STR|FUNC)
                                  #        - for elementName|attributeName
                                  #  - priority NUM: OBJ_ARR is sorted accordingly
                                  #  - options RULE_OPT
P_FILTERGROUP.exec(VAL,VAL2[,...])#Applies all rules on VAL2, returning filtered VAL2:
                                  #  - VAL is VAL2's parent.
                                  #  - VAL|VAL2 is P_NODE|P_FRAGMENT|STR
                                  #  - calls each rule FUNC(VAL2)->VAL2, returning final VAL2.
                                  #Iteration stops at first rule that returns:
                                  #  - false
                                  #  - VAL2 with different VAL2.name|type (unless VAL2 is STR)
                                  #Do not do anything if:
                                  #  - VAL.nonEditable, unless RULE_OPT.applyToAll true
                                  #  - VAL.nestedEditable and RULE_OPT.excludeNestedEditable true
P_FILTERGROUP.execOnName(VAL, STR)#Like P_FILTERGROUP.exec(...) but using instead STR.replace(PRULE[0], PRULE[1])

P_FILTER.text|comment|rootRules   #P_FILTERGROUP for P_TEXT|P_COMMENT|P_FRAGMENT:
                                  #  - add rules with P_FILTER.addRules() OBJ.text|comment|root PRULE
                                  #  - P_FILTER.onText|Comment|Root(VAL, P_TEXT|P_COMMENT|P_FRAGMENT):
                                  #     - returns P_FILTERGROUP.exec(...)

P_FILTER.elementName|             #P_FILTERGROUP for 'TAG' and 'ATTR' names:
attributeNameRules                #  - add rules with P_FILTER.addRules() OBJ.elementNames|attributeNames PRULE_ARR
                                  #  - P_FILTER.onElementName|AttributeName(VAL, 'TAG|ATTR'):
                                  #     - returns P_FILTERGROUP.execOnName(...)

P_FILTER.element.TAG              #P_FILTERGROUP for P_ELEM:
                                  #  - add rules with P_FILTER.addRules() OBJ.elements.TAG PRULE:
                                  #  - TAG can be '^' or '$', i.e. any TAG (applied before|after other PRULE)
                                  #  - P_FILTER.onElement(VAL, P_ELEM):
                                  #     - returns P_FILTERGROUP.exec(VAL, P_ELEM, P_FILTER) ('TAG' is P_ELEM.name)
                                  #     - if it returns P_NODE !== P_ELEM, it then returns P_FILTER.onNode(VAL, P_NODE)

P_FILTER.attribute.ATTR           #P_FILTERGROUP for P_ELEM attributes:
                                  #  - add rules with P_FILTER.addRules() OBJ.attributes.ATTR PRULE
                                  #  - P_FILTER.onAttribute(VAL, P_ELEM, 'ATTR', ATTR_VAL):
                                  #     - returns P_FILTERGROUP.exec(VAL, ATTR_VAL, P_ELEM, P_FILTER)

P_FILTER.onNode(VAL, P_NODE)      #Returns according to P_NODE:
                                  #  - P_ELEM: P_FILTER.onElement(...)
                                  #  - P_TEXT: P_FILTER.onText(...), then new P_TEXT()
                                  #  - P_COMMENT: P_FILTER.onComment(...), then new P_TEXT()
                                  #  - null


                                  ┌─────────────┐
                                  │   FILTERS   │
                                  └─────────────┘


FILTER                            #Filters input
new CKEDITOR.filter(RULES|EDITOR) #Create new FILTER:
                                  #  - RULES: calls FILTER.allow(RULES, 'default')
                                  #  - EDITOR: calls:
                                  #     - FILTER.allow(EDITOR.config.allowedContent, 'config')
                                  #     - FILTER.allow(EDITOR.config.extraAllowedContent, 'extra')
                                  #     - FILTER.disallow(EDITOR.config.disallowedContent)
CKEDITOR.filter.instances.ID      #FILTER, according to FILTER.id NUM
EDITOR.[active]filter             #FILTER
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITOR.setActiveFilter(FILTER)    #Fires event 'activeFilterChange'

FILTER.destroy()                  #

FILTER.id                         #
FILTER.editor                     #EDITOR. null if standalone
                                  #It seems like standalone FILTER are never cleaned up.


FILTER|FEATURE.allowedContent     #RULES:
                                  #  - OBJ:
                                  #     - same as RULE_ARR below, where key:
                                  #        - if 'TAG ...' -> OBJ.elements
                                  #        - if '$NUM': not used
                                  #  - RULE_ARR:
                                  #     - OBJ:
                                  #        - elements 'TAG ...' or { TAG: BOOL }
                                  #        - [required]styles|attributes|classes (CSS prop, HTML ATTR, HTML class)
                                  #           - OBJ.VAR BOOL or '[!]STR ...' ('!' means required)
                                  #              - required (if not there, erase tag) vs optional (do not erase in this tag)
                                  #              - VAR can use * meaning "anything", or e.g. attributes '*' or 'data-*'
                                  #        - match(ELEM)->BOOL
                                  #        - propertiesOnly BOOL: if true, works only if another RULE allows those TAGs
                                  #        - featureName 'FEATURE'
                                  #     - true: same as {}, i.e. everything
                                  #     - FUNC: same as {match: FUNC}
                                  #     - "RULE;...", where "RULE" can be "OBJ.elements{OBJ.styles}[OBJ.attributes](OBJ.classes)"
                                  #     - STYLE, converted to OBJ as:
                                  #        - STYLEDEF.element:
                                  #           - [required]styles: STYLEDEF.styles
                                  #           - [required]classes: STYLEDEF.attributes.class
                                  #           - [required]attributes: STYLEDEF.attributes
                                  #        - if STYLE.toAllowedContentRules(EDITOR)->RULES, use it instead
                                  #Read-only. Can be written with:
                                  #  - CONF.allowedContent RULES
                                  #    When not set, is in "automatic mode", i.e. defined by plugins.
                                  #  - CONF.extraAllowedContent: same but does not overwrite plugins definitions.
FILTER.disallowedContent          #RULES, applied before allowedContent.
                                  #Read-only. Can be written with CONF.disallowedContent
FILTER.customConfig               #True if CONF.extraAllowedContent used.
FILTER._.allowedRules.elements    #Optimized|condensed version of FILTER.allowedContent, used internally

FILTER.allow(RULES[, 'FEATURE'])  #Adds to FILTER.allowedContent.
                                  #'FEATURE': change RULE.featureName (should be lowercase)
                                  #Done by most plugins.
FILTER.disallow(RULES)            #Adds to FILTER.disallowedContent
FILTER.disable()                  #Sets allowedContent to true
FILTER.disabled                   #BOOL


FILTER.addElementCallback
(FUNC(HTML_ELEM)
[->CKEDITOR.FILTER_SKIP_TREE])    #Whether not to filter that element.

FILTER.check                      #Returns true if not filtered.
(RULES[, BOOL][, BOOL2])          #Ignores requiredStyles|Attributes|Classes unless BOOL2 true
                                  #Ignores transformations if BOOL false
FILTER.applyTo(HTML_ELEM|FRAGMENT #Modifies element. Returns true if something was changed.
[, BOOL][, BOOL2][, VAL])         #  - BOOL should be true when using with HTMLDATAPROCESSOR.toHtml()
                                  #  - transformOnly BOOL2 (def: false)
                                  #  - enterMode VAL (def: CKEDITOR.editor.activeEnterMode)

FILTER.addTransformations         #Add transformation groups VAL_ARR:
(VAL_ARR_ARR)                     #  - for each group, picks the first transformation OBJ that matches
                                  #Transformation VAL:
                                  #  - OBJ:
                                  #     - element 'TAG,...': only transform if matches
                                  #     - left(HTML_NODE)->BOOL: does not transform if false
                                  #     - check RULES: does transform if FILTER.check(RULES, false)
                                  #     - right(HTML_ELEM, TRANSFORMTOOLS) or STR (i.e. TRANSFORMTOOLS[STR](HTML_ELEM)): transformation
                                  #  - 'OBJ.check:OBJ.right'

TRANSFORMTOOLS.matchesStyle
(HTML_ELEM, STYLE)->BOOL          #Whether HTML_ELEM matches at least STYLE
TRANSFORMTOOLS.transform
(HTML_ELEM, STYLE)                #Applies STYLE

TRANSFORMTOOLS.lengthToStyle
(HTML_ELEM, 'ATTR'[, 'STYLE'])    #HTML attribute -> CSS style property (adds 'px' if NUM)
TRANSFORMTOOLS.lengthToAttribute
(HTML_ELEM, 'STYLE'[, 'ATTR'])    #Inverse
TRANSFORMTOOLS.
sizeToStyle|Attribute(HTML_ELEM)  #Same as TRANSFORMTOOLS.lengthToStyle|Attribute(HTML_ELEM, 'width|height')
TRANSFORMTOOLS.
alignmentToAttribute|Style        #Same as TRANSFORMTOOLS.lengthToStyle|Attribute(HTML_ELEM, 'float', 'align'), except only
(HTML_ELEM)                       #accepts 'left|right'

FILTER.addContentForms(VAL_ARR)   #If an input TAG matches any VAL, is replaced by the first VAL that is not filtered out.
                                  #VAL are:
                                  #  - RULES
                                  #  - [RULES, FUNC(HTML_ELEM)->BOOL]

                                  ┌─────────────┐
                                  │   FEATURE   │
                                  └─────────────┘

GOAL ==>                          #RULES associated with any VAL (usually COMMAND, BUTTON, RICHCOMBO, etc.):
                                  #  - FEATURE is either:
                                  #     - implemented directly on VAL
                                  #     - VAL.toFeature(EDITOR)->FEATURE
                                  #  - add RULES to current FILTER with EDITOR.addFeature(FEATURE)
                                  #     - use FEATURE.name|allowedContent|contentForms|contentTransformations
                                  #     - automatically done on CONF.toolbarGroups PLUGIN (does not add if filtered out)
                                  #  - check if RULES are compatible with current FILTER:
                                  #     - FILTER.checkFeature(FEATURE):
                                  #        - returns FILTER.check(FEATURE.requiredContent)
                                  #        - returned by FILTER.addFeature(FEATURE)
                                  #     - COMMAND.checkAllowed()

EDITOR.addFeature(FEATURE)        #Same as EDITOR.filter.addFeature(FEATURE)
FILTER.addFeature(FEATURE)        #Calls:
                                  #  - FILTER.allow(FEATURE.allowedContent, FEATURE.name)
                                  #  - FILTER.addTransformations(FEATURE.contentTransformations)
                                  #  - FILTER.addContentForms(FEATURE.contentForms)
                                  #Returns FILTER.checkFeature(FEATURE), which returns same as FILTER.check(FEATURE.requiredContent)

COMMAND.checkAllowed([BOOL])      #Returns CKEDITOR.editor.activeFilter.checkFeature(COMMAND), i.e. COMMAND implements FEATURE.
                                  #If BOOL true, no caching.




              
   EXTENSIONS  
              



                                  ┌──────────────┐
                                  │   COMMANDS   │
                                  └──────────────┘

EDITOR.addCommand
('COMMAND', COMMAND_DEF)          #Function to fire.
EDITOR.getCommand('COMMAND')      #COMMAND

COMMAND_DEF.exec(EDITOR[, VAL])   #Main function fired.
EDITOR.execCommand('COMAND',[VAL])#Can return VAL2
EDITOR.on('beforeCommandExec')    #CEVENT.data: name 'COMMAND', command COMMAND, commandData VAL
                                  #If returns false, stops command.
EDITOR.on('afterCommandExec')     #CEVENT.data is same, with also returnValue VAL2
                                  #If returns false, exec() returns false too.

COMMAND_DEF.async                 #If true (def: false), fires async:
                                  #  - exec(EDITOR, VAL) does not return anything
                                  #  - 'afterCommandExec' not fired

COMMAND_DEF.contextSensitive      #If false (def: true), COMMAND_DEF.refresh() not fired.
COMMAND_DEF.context               #If true (def), DOM_PATH is passed to COMMAND_DEF.refresh()
COMMAND_DEF.refresh               #Function fired when selection or activeFilter changed. Should call:
(EDITOR, DOM_PATH)                #  - should call COMMAND.setState()
                                  #Fire COMMAND 'refresh'

COMMAND                           #Instance. Has all COMMAND_DEF properties|methods, plus:
                                  #Is an EVENTEMITTER.
COMMAND.[previous]state           #STATE:
                                  #  - CKEDITOR.TRISTATE_DISABLED: disabled
                                  #  - CKEDITOR.TRISTATE_ON|OFF: enabled and active|inactive
                                  #When changed, fires 'state'
COMMAND.setState(STATE)           #
COMMAND.toggleState()             #Toggle between TRISTATE_ON|OFF
COMMAND.disable|enable()          #Toggle between TRISTATE_DISABLED and TRISTATE_ON|OFF
COMMAND_DEF.startDisabled         #If true (def: false), disabled until a selection is being made.

                                  ┌─────────────────────┐
                                  │   RESOURCEMANAGER   │
                                  └─────────────────────┘

new CKEDITOR.resourceManager
(BASEPATH, FILENAME)              #Returns RESOURCEMANAGER, filling RESOURCEMANAGER.basePath|fileName
RESOURCEMANAGER.add               #Register resource, i.e. adds to RESOURCEMANAGER.registered OBJ
('RESOURCE', RESOURCE)            #RESOURCE:
                                  #  - name 'RESOURCE'
                                  #  - path: either:
                                  #     - external:
                                  #        - RESOURCEMANAGER.addExternal('RESOURCE,...', 'DIR[/FILE]' [, 'FILE'])
                                  #          has been called before
                                  #        - this will fill RESOURCEMANAGER.externals OBJ.dir|fileName
                                  #     - local: use RESOURCEMANAGER.basePath|fileName
                                  #     - both will call DIR/RESOURCE/FILE
                                  #Fires 'RESOURCE' + Capitalize(fileName) + 'Ready' with CEVENT.data RESOURCE
RESOURCEMANAGER.get('RESOURCE')   #Returns registered RESOURCE
RESOURCEMANAGER.get[File]Path
('RESOURCE')                      #dirname|filename

RESOURCEMANAGER.load
('RESOURCE'[_ARR],                #Calls CKEDITOR.scriptLoader.load(URL_ARR) (unless already done)
FUNC(RESOURCES_OBJ)[, THIS])      #Adds to RESOURCEMANAGER.loaded OBJ

                                  ┌─────────────┐
                                  │   PLUGINS   │
                                  └─────────────┘

CKEDITOR.plugins                  #PLUGINS, children of RESOURCEMANAGER with basePath 'plugins/', fileName 'plugin'
PLUGINS.load                      #Loads plugins/PLUGIN/plugin.js, which should call PLUGINS.add('PLUGIN', PLUGIN_DEF)
('PLUGIN'[_ARR], FUNC(PLUGIN_ARR) #Also loads dependencies (PLUGIN_DEF.requires)
[, THIS])                         #At initialization, called once for all plugins according to:
                                  #  - CONF.plugins "PLUGIN,..." (depends on build)
                                  #  - CONF.extraPlugins "PLUGIN,...": same without override def. CONF.plugins
                                  #  - CONF.removePlugins "PLUGIN,..."

PLUGIN_DEF.[before|after]init     #Called once per EDITOR, e.g. calling EDITOR.ui.addButton()
(EDITOR)                          #Fires EDITOR 'pluginsLoaded'
PLUGIN_DEF.onLoad()               #Called once at each PLUGINS.load(), i.e. usually once for all EDITORs
                                  #Return false to disable.

PLUGIN_DEF.requires               #Dependencies, as 'PLUGIN,...' or 'PLUGIN'[_ARR]

PLUGIN_DEF.icons                  #'ICON,...', using plugins/PLUGIN/icons/ICON.png, as 16x16px
                                  #Calls CKEDITOR.skin.addIcon('ICON', 'PATH') on plugin load.
PLUGIN_DEF.hidpi                  #If true (def), provides HiDPI under plugins/PLUGIN/icons|images/hidpi/*,
                                  #with e.g. a pixel ratio of 2

                                  ┌────────────┐
                                  │   WIDGET   │
                                  └────────────┘

                                 ##Plugin 'widget' (depends: 'lineutils', 'clipboard')
WIDGETS ==>                       #Elements treated as a single entity in the editor:
                                  #  - when added|removed (including pasted)
                                  #  - when selected|focus
                                  #  - when moved: handles drag&drop and copy&paste
                                  #Lifecycle:
                                  #  - on EDITOR.setData(), eligible HTML tags are 'upcasted' to WIDGETs markup
                                  #  - on EDITOR.getData(), WIDGETs are 'downcasted' to simpler markup


EDITOR.widgets                    #WIDGETS
EDITOR.widgets.instances          #WIDGET_ARR
WIDGETS.editor                    #EDITOR
WIDGETS.getByElement
(HTML_ELEM[, BOOL])               #Returns WIDGET containing HTML_ELEM (if true, only checks wrapper)

WIDGETS.add('WIDGET', WIDGET_DEF) #Registers new WIDGET
                                  #Fires 'widgetDefinition' WIDGET_DEF
                                  #WIDGET_DEF members are copied to WIDGET
WIDGETS.registered.WIDGET         #WIDGET_DEF

WIDGETS.del(WIDGET)               #Removes WIDGET
WIDGETS.destroy(WIDGET)
WIDGET.destroy()                  #
WIDGETS.destroyAll()              #Fires 'instanceDestroyed' with CEVENT.data WIDGET
WIDGET.destroyEditable('EDITABLE')#


WIDGETS.onWidget('WIDGET', ...)   #Like WIDGET.on(...)
WIDGET.on('key')                  #Forwarded from EDITOR.on('key')
WIDGET.on
('contextMenu|doubleclick')       #


WIDGETS.selected                  #Currently selected WIDGET_ARR, or undefined
WIDGETS.on('[de]select')          #
WIDGET.setSelected(BOOL)          #


WIDGET.data                       #WIDGET state, as OBJ
                                  #Stored in data-cke-widget-data="OBJ"
                                  #When changed, fires 'data' with CEVENT.data OBJ (which should handle UI change)
                                  #OBJ.classes { CLASS 1|0 }: when changed, change widget classes.
WIDGET.setData(OBJ)
WIDGET.setData('VAR', VAL)        #


WIDGET_DEF.name                   #'COMMAND' created, with:
                                  #  - WIDGET_DEF.allowedContent|requiredContent|contentForms|contentTransformations
                                  #    copied to COMMAND_DEF
                                  #  - inserts a new WIDGET:
                                  #     - WIDGET_DEF.template 'TEMPLATE_HTML'->'HTML'
                                  #        - 'TEMPLATE_HTML' can contain '{VAR}', replaced by WIDGET_DEF.defaults[()])
                                  #          (which fills WIDGET.data)
                                  #     - WIDGETS.initOn(HTML_ELEM, WIDGET_DEF[, OBJ.startupData])
                                  #     - WIDGET.edit()
                                  #     - EDITOR.insertElement(HTML_ELEM)
                                  #     - WIDGET.ready true, and fire 'ready'
                                  #  - instead of WIDGET_DEF.template, can customize with WIDGET_DEF.insert()
                                  #  - argument OBJ: setup WIDGET.data

WIDGET_DEF.button                 #'BUTTON'
                                  #Calls UI.addButton('Widget' (capitalized), { label 'BUTTON', command 'widget', toolbar 'insert,10' })

WIDGET.edit()                     #If WIDGET_DEF.dialog 'DIALOG' defined, does EDITOR.openDialog('DIALOG'):
                                  #  - can prevent:
                                  #     - by returning false in 'dialog' event handler
                                  #     - with WIDGET_DEF.edit({ dialog DIALOG })->BOOL
                                  #  - on:
                                  #     - 'show': DIALOG.setupContent(WIDGET):
                                  #        - should use WIDGET.data to setup DIALOG, e.g. D_ELEM.setValue(WIDGET.data.VAR)
                                  #     - 'ok': DIALOG.commitContent(WIDGET):
                                  #        - should use DIALOG state to setup WIDGET, e.g. WIDGET.setData('VAR', D_ELEM.getValue()),
                                  #          with event handler 'data' doing the WIDGET UI change
                                  #     - 'cancel': WIDGETS.destroy(WIDGET, true)
                                  #Done on doubleclick.


WIDGET_DEF.upcast                 #FUNC(HTML_ELEM, OBJ)->VAL or 'FUNC,...' (using WIDGETS.upcasts.FUNC)
                                  #Called on EDITOR 'toHtml', i.e.:
                                  #  - on EDITOR.setData()
                                  #  - after EDITOR.filter, before dataProcessor.dataFilter)
                                  #OBJ allows to set WIDGET.data
                                  #Transform any element:
                                  #  - with VAL true|HTML_ELEM, or data-widget="WIDGET"
                                  #  - can prevent with WIDGETs.addUpcastCallback(FUNC(HTML_ELEM)->false)
                                  #  - can define WIDGET_DEF.upcastPriority (def: 10)
WIDGET_DEF.downcast               #FUNC(HTML_ELEM)->VAL or 'FUNC,...' (using WIDGETS.downcasts.FUNC)
                                  #Optional. Called on EDITOR 'toDataFormat', i.e. on EDITOR.getData()
                                  #Transform any WIDGET with VAL HTML_NODE

WIDGET.initOnAll([HTML_ELEM])     #Calls WIDGETS.initOn(...) on all children with '.cke_widget_new' (i.e. new widgets not initialized yet)
WIDGETS.initOn                    #Initialize WIDGET on HTML_ELEM
(HTML_ELEM[, WIDGET_DEF][, OBJ])  #OBJ will fill in WIDGET.data
                                  #Can either use WIDGET_DEF or data-widget="WIDGET"
                                  #Returns WIDGET (or null if not initialized)
WIDGETS.wrapElement               #Wrap HTML[PARSER]_ELEM as:
(HTML[PARSER]_ELEM[, 'WIDGET'])   #  <div|span>: according to whether inline element or not (can force with WIDGET_DEF.inline BOOL))
                                  #  contenteditable="false"
                                  #  data-cke-widget-wrapper="1"
                                  #  data-cke-filter="off"
                                  #  class="cke_widget_wrapper cke_widget_new|element cke_widget_inline|block":
                                  #  data-cke-display-name="WIDGET_DEF.pathName" (def: 'div|span')
                                  #    <any> (available at WIDGET.element)
                                  #    data-cke-widget-keep-attr="1"
                                  #    data-widget="widget"
                                  #Def WIDGET: data-widget="WIDGET"
                                  #Done by initOn()

WIDGETS.on('instanceCreated')     #CEVENT.data WIDGET
WIDGET_DEF.init()
WIDGET.inited|ready
WIDGET.on('ready')                #When initialized


WIDGET_DEF.parts.VAR              #'SELECTOR': replaced by HTML_ELEM

WIDGET_DEF.editables.EDITABLE     #EDITABLE_DEF, replaced by HTML_ELEM, queried by EDITABLE_DEF.selector 'SELECTOR'
                                  #  - are the parts of the widgets that can be edited
                                  #  - HTML_ELEM.filter = new FILTER(EDITABLE_DEF.allowedContent)
                                  #  - inserted by alphabetical order
                                  #  - tag must be one of DTD.$editable, i.e. block element
                                  #  - HTML attributes:
                                  #     - contenteditable="true"
                                  #     - data-cke-widget-editable="EDITABLE"
                                  #     - data-cke-enter-mode"="FILTER.getAllowedEnterMode(EDITOR.enterMode)"
                                  #     - data-cke-filter="FILTER.id" (if EDITABLE_DEF.filter)
                                  #     - class="cke_widget_editable"
                                  #     - data-cke-display-name="EDITABLE_DEF.pathName"
                                  #     - data-cke-widget-data="???"
                                  #     - data-CUSTOM: according to OBJ
                                  #       Also fires 'data' OBJ
                                  #  - EDITABLE_DEF 'SELECTOR': like EDITABLE_DEF { selector: 'SELECTOR' }
                                  #  - are downcasted|upcasted using setData|getData()

WIDGET_DEF.mask                   #If true (def: false), adds transparent <img> in order to prevent clicks.
                                  #Available at WIDGET.mask

WIDGET_DEF.draggable              #If true (def), adds drag handler:
                                  #  - available at WIDGET.dragHandlerContainer
                                  #  - handles both block and inline elements, but differently


STYLE_DEF.type 'widget'           #Allows using STYLE on widgets:
                                  #  - STYLE_DEF.widget 'WIDGET'
                                  #  - STYLE will be applied to WIDGET_DEF.styleableElements 'TAG ...'
                                  #     - only STYLE.attributes.classes, with propertiesOnly true
                                  #Must use WIDGET_DEF.styleToAllowedContentRules(WIDGET) instead of toAllowedContentRules()




         
   BASIC  
         



                                  ┌──────────────┐
                                  │   READONLY   │
                                  └──────────────┘

EDITOR.setReadOnly(BOOL)          #
EDITOR.readOnly                   #
COMMAND_DEF.readOnly              #If true (def: false), will call COMMAND.disable|enable() according to read-only mode

                                  ┌──────────┐
                                  │   UNDO   │
                                  └──────────┘

                                 ##Plugin 'undo'
COMMAND 'undo|redo'               #Fires 'afterUndo|Redo'
                                  #Assigned automatically to shortcuts and to buttons 'Undo|Redo' (toolbar 'clipboard')
EDITOR.fire('saveSnapshot')       #Programmatically adds an undo step
                                  #Done automatically:
                                  #  - after each 'COMMAND' unless COMMAND_DEF.canUndo false
                                  #  - after DOM editing
EDITOR.fire('updateSnapshot')     #Same but first remove last undo.
EDITOR.fire('[un]lockSnapshot')   #No undos recorded
EDITOR.resetUndo()                #

CONF.undoStackSize                #Def: 20

                                  ┌──────────┐
                                  │   FIND   │
                                  └──────────┘

                                 ##Plugin 'find'
COMMAND 'find'                    #Launch dialog 'Find'
                                  #Done by Button 'Find'
COMMAND 'replace'                 #Launch dialog 'Replace'
                                  #Done by Button 'Replace'

CONF.find_highlight               #STYLE_DEF used when highlighting findings

                                  ┌─────────────┐
                                  │   NEWPAGE   │
                                  └─────────────┘

                                 ##Plugin 'newpage'
COMMAND 'newpage'                 #Reset HTML with EDITOR.setData(CONF.newpage_html) (def: '')
                                  #Done by button 'NewPage' (toolbar 'document')




             
   SELECTION  
             


                                  ┌───────────────┐
                                  │   SELECTION   │
                                  └───────────────┘

SELECTION                         #User selection
SELECTION.getNative()             #Native DOM object

EDITOR|DOM_DOCUMENT.getSelection()#Returns DOM_SELECTION

SLCTION.getStart|SelectedElement()#Returns DOM_ELEM
SELECTION.getSelectedText()       #
SELECTION.getRanges([BOOL])       #Returns as DOM_RANGE_ARR.
                                  #If true, only editable ones.

SELECTION.getCommonAncestor()     #As DOM_ELEM, of all selections.
SELECTION.document                #DOM_DOCUMENT
SELECTION.root                    #DOM_ELEM

SELECTION.selectElement(DOM_ELEM) #
SLCTIN.selectRanges(DOM_RANGE_ARR)#
SELECTION.reset()                 #
SELECTION.removeAllRanges()       #

SELECTION.getType()               #Among CKEDITOR.SELECTION_NODE|TEXT|ELEMENT
SELECTION.isHidden()              #Selecting hidden element

SELECTION.[un]lock()              #Keeps selection even when editor loses focus.
EDITOR.[un]lockSelection
([DOM_SELECTION])                 #
SELECTION.isLocked                #BOOL

SLCTION.createBookmarks[2]([BOOL])#Calls underlying DOM_RANGE.createBookmarks[2](...)
SELECTION.selectBookmarks
(BOOKMARK_ARR)                    #

SELECTION.fake(DOM_ELEM)          #Select DOM_ELEM, but does let UI or browser 'know' it.
SELECTION.isFake                  #BOOL

SELECTION.scrollIntoView()        #

                                  ┌───────────────┐
                                  │   SELECTALL   │
                                  └───────────────┘

                                 ##Plugin 'selectall'
COMMAND 'selectall'               #Select all
                                  #Done by button 'SelectAll' (toolbar 'selection')




             
   CLIPBOARD  
             


                                  ┌───────────────┐
                                  │   CLIPBOARD   │
                                  └───────────────┘

                                 ##Plugin 'clipboard' (requires: 'dialog')
                                  #Handlers pasted and dropped content.
                                  #Adds Button 'Cut|Copy|Paste' (toolbar 'clipboard')
CONF.clipboard_defaultContentType #If not sure whether 'text' or 'html' (def).
CONF.forcePasteAsPlainText        #If true, forces all pasted content as 'text'.

EDITOR.getClipboardData           #Open window to paste data.
(OBJ, FUNC(OBJ2))                 #OBJ: title STR
                                  #OBJ2: type STR, dataValue STR

EDITOR.on('[afterP|p]aste')       #CEVENT.data:
                                  #  - type STR (e.g. 'html', 'text', 'auto')
                                  #  - dataValue STR
                                  #  - method 'drop|paste'
                                  #  - dataTransfer DATATRANSFER
                                  #  - dontFilter BOOL: if true, does not apply CONF.pasteFilter
EDITOR.on('dragstart|end')        #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
EDITOR.on('drop')                 #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
                                  #  - drag|dropRange DOM_RANGE
                                  #    Can also use CLIPBOARD.getRangeAtDropPosition(EVENT, EDITOR)-> DOM_RANGE
CLIPBOARD.mainPasteEvent          #'[after]paste': which event to prefer listening to with this browser

EDITOR.pasteFilter                #FILTER.
                                  #Not applied when input comes from CKEditor.
                                  #Def: CONF.pasteFilter:
                                  #  - 'plain-text': will convert to plain text (RULES 'br')
                                  #  - 'semantic-content' (def for Chrome, Safari, Opera): usual HTML tags
                                  #  - RULES (see filters)
                                  #  - null (def for other browsers)
                                  #Is a standalone FILTER, but not cleaned up when EDITOR is destroyed.

DATATRANSFER                      #Higher-level API for DOM DATATRANSFER
DATATRANSFER.getData('TYPE')      #
DATATRANSFER.setData('TYPE', STR) #
DATATRANSFER.isEmpty()            #
DATATRANSFER.getFile(NUM)         #
DATATRANSFER.getFilesCount()      #

DATATRANSFER.$                    #DOM clipboard event
DATATRANSFER.id                   #
DATATRANSFER.sourceEditor         #EDITOR

CKEDITOR.plugins.clipboard        #CLIPBOARD
CLIPBOARD.canClipboardApiBeTrusted
(DATATRANSFER, EDITOR)            #False if browser does not support 'hmtl' type in DOM clipboard.
CLIPBOARD.isCustomCopyCutSupported#False if browser does not allow using DOM clipboard.
CLIPBOARD.
isCustomDataTypesSupported        #True if browser allows using custom data types in DOM clipboard's getData|setData()
CLIPBOARD.isFileApiSupported      #True if browser supports DOM files.

CLIPBOARD.getDropTarget(EDITOR)   #Returns DOM_OBJ
CLIPBOARD.
preventDefaultDropOnElement
(DOM_OBJ)                         #Prevents dropping on it.

CLIPBOARD.
initDrag|PasteDataTransfer
([DOM_EVENT[, EDITOR]])           #
CLIPBOARD.resetDragDataTransfer   #Programmatically create drag|paste

                                  ┌───────────────┐
                                  │   PASTETEXT   │
                                  └───────────────┘

                                 ##Plugin 'pastetext' (depends: 'clipboard')
COMMAND 'pastetext'               #Paste as plain text
                                  #Done by button 'PasteText' (toolbar 'clipboard'), or automatically on paste.

                                  ┌───────────────────┐
                                  │   PASTEFROMWORD   │
                                  └───────────────────┘

                                 ##Plugin 'pastefromword' (depends: 'clipboard')
COMMAND 'pastefromword'           #Paste, with special filtering for Microsoft Word
                                  #Done by button 'PasteFromWord' (toolbar 'clipboard'), or automatically on paste.

CONF.pasteFromWordCleanupFile     #FILE. Module providing MSWord cleanup function
CONF.pasteFromWord
NumberedHeadingsToList            #BOOL (def: false)
CONF.pasteFromWordPromptCleanup   #If true (def: false), shows dialog to say content will be cleaned.
CONF.pasteFromWordRemoveFontStyles#Def: true
CONF.pasteFromWordRemoveStyles    #Def: true




                   
   FONT FORMATTING  
                   



                                  ┌─────────────────┐
                                  │   BASICSTYLES   │
                                  └─────────────────┘

                                 ##Plugin 'basicstyles'
                                  #Font formatting
CONF.coreStyles_bold|italic|strike#STYLE_DEF applied
|subscript|superscript|underline  #Used by button (e.g. 'Bold') in toolbar 'basicstyles', and command (e.g. 'bold')

                                  ┌──────────────────┐
                                  │   REMOVEFORMAT   │
                                  └──────────────────┘

                                 ##Plugin 'removeformat'
                                  #Remove font formatting
COMMAND 'removeFormat'            #Remove wrapping tags and some HTML attributes.
                                  #Fires 'removeFormatCleanup' with CEVENT.data DOM_ELEM
                                  #Done by button 'RemoveFormat' (toolbar 'cleanup')
CONF.removeFormatTags             #Inline 'TAG,...' to remove (unwrap)
                                  #Def: 'b,big,cite,code,del,dfn,em,font,i,ins,kbd,q,s,samp,small,
                                  #      span,strike,strong,sub,sup,tt,u,var'
CONF.removeFormatAttributes       #HTML 'ATTR,...' to remove
                                  #Def: 'class,style,lang,width,height,align,hspace,valign'
EDITOR.addRemoveFormatFilter
(FUNC(DOM_ELEM)->BOOL)            #If false, do not remove format.

                                  ┌─────────────────┐
                                  │   STYLESCOMBO   │
                                  └─────────────────┘

                                 ##Plugin 'stylescombo' (depends: 'richcombo')
RICHCOMBO 'Styles'                #Applies a STYLE_DEF (toolbar 'styles')
CONF.stylesSet                    #Can be:
                                  #  - false
                                  #  - STYLE_DEF_ARR
                                  #  - 'NAME[:URL]' (def: 'default')
                                  #     - if 'default' -> 'styles.js'
                                  #     - uses CKEDITOR.stylesSet:
                                  #        - RESOURCEMANAGER with basePath '', fileName 'stylesSet'
                                  #        - RESOURCE is STYLE_DEF_ARR
                                  #        - calls RESOURCEMANAGER.addExternal() then RESOURCEMANAGER.load()
EDITOR.getStylesSet
(FUNC(STYLE_DEF_ARR))             #

EDITOR.attachStyleStateChange
(STYLE,
FUNC(CKEDITOR.TRISTATE_ON|OFF))   #When STYLE is applied or not applied on current selection, fires FUNC

                                  ┌──────────────────────┐
                                  │   STYLESHEETPARSER   │
                                  └──────────────────────┘

                                 ##Plugin 'stylesheetparser'
                                  #Parse CSS files from CONF.contentsCss in order to define CKEDITOR.styleSet
CONF.stylesheetParser_
skip|validSelectors               #REGEXP (def: /(^body\.|^\.)/i and /\w+\.\w+/)

                                  ┌──────────┐
                                  │   FONT   │
                                  └──────────┘

                                 ##Plugin 'font' (depends: 'richcombo')
                                  #Add RICHCOMBO (in toolbar 'styles'):
                                  #  - 'Font': changing font-family
                                  #  - 'FontSize'

CONF.font_names                   #Font families, colon-separated (def: usual ones)
CONF.font_defaultLabel            #What's shown for unknown font families (def: '')
CONF.font_style                   #STYLE_DEF applied when picking font family (def: CSS font-family)

CONF.fontSize_sizes               #Font sizes, colon-separated (def: 8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72)
CONF.fontSize_defaultLabel        #(def: '')
CONF.fontSize_style               #STYLE_DEF applied when picking a size (def: CSS font-size)

                                  ┌─────────────────────────┐
                                  │   CKEDITOR-GWF-PLUGIN   │
                                  └─────────────────────────┘

                                 ##Community plugin 'ckeditor-gwf-plugin' (0.1.1)
                                  #Allow using Google Web Font as CONF.font_names

CONF.gwfplugin.font.label         #Def: 'GoogleWebFonts'
CONF.gwfplugin.ok|cancel          #OK|Cancel buttons message
CONF.gwfplugin.message            #Popup message

                                  ┌─────────────────┐
                                  │   COLORBUTTON   │
                                  └─────────────────┘

                                 ##Plugin 'colorbutton' (depends: 'panelbutton', 'floatpanel')
                                  #Font and background colors
                                  #Buttons 'TextColor|BGColor' (toolbar 'colors')
CONF.colorButton_enableMore       #If true (def), shows color picker
CONF.colorButton_colors           #List of colors displayed as 'CSS_COLOR,...'
CONF.
colorButton_foreStyle|backStyle   #STYLE_DEF describing how the format is applied (can use "#(color)")

                                  ┌───────────────────┐
                                  │   TEXTTRANSFORM   │
                                  └───────────────────┘

                                 ##Community plugin 'texttransform' (1.1)
COMMAND 'transformTextToUppercase|#Change case.
Lowercase|Capitalize|Switch'      #Done by button 'TransformTextToUppercase|Lowercase|Capitalize|Switcher'

                                  ┌───────────────────┐
                                  │   LETTERSPACING   │
                                  └───────────────────┘

                                 ##Community plugin 'letterspacing' (0.1.2) (depends: 'richcombo')
RICHCOMBO 'letterspacing'         #Changes CSS letter-spacing (from -10 to 11)




                        
   PARAGRAPH FORMATTING  
                        



                                  ┌────────────┐
                                  │   INDENT   │
                                  └────────────┘

                                 ##Plugin 'indent'
COMMAND 'indent|outdent'          #Indent|outdent text.
                                  #Done by button 'Indent|Outdent' (toolbar: 'indent')
CKEDITOR.plugins.indent.*         #

                                  ┌─────────────────┐
                                  │   INDENTBLOCK   │
                                  └─────────────────┘

                                 ##Plugin 'indentblock' (depends: 'indent')
COMMAND 'indent|outdentblock'     #Indents|outdents paragraph

CONF.indentOffset                 #NUM (def: 4)
CONF.indentUnit                   #STR (def: 'em')
CONF.indentClasses                #'CLASS'_ARR to use instead of CONF.indentOffset|Unit

                                  ┌─────────────┐
                                  │   JUSTIFY   │
                                  └─────────────┘

                                 ##Plugin 'justify'
COMMAND                           #Justifies text, using CSS text-align or (if defined) adding CSS classes
'justifyleft|center|right|block'  #defined by CONF.justifyClasses 'CLASS'_ARR (4 values).
                                  #Done by button 'JustifyLeft|Right|Center|Block' (in toolbar 'align')

                                  ┌────────────────┐
                                  │   LINEHEIGHT   │
                                  └────────────────┘

                                 ##Community plugin 'lineheight' (depends: 'richcombo') (1.0.4)
RICHCOMBO 'lineheight'            #Applies CONF.lineHeight_style (def: line-height: '#(size)'), where #(size) is changed
                                  #by user pick, among CONF.line_height  "CSS;..." (def: 1 to 72)

                                  ┌────────────┐
                                  │   FORMAT   │
                                  └────────────┘

                                 ##Plugin 'format' (depends: 'richcombo')
                                  #Paragraph formatting, using RICHCOMBO 'Format' (toolbar: 'styles')
CONF.format_VAR                   #STYLE_DEF
CONF.format_tags                  #'VAR;..." (def: 'p;h1;h2;h3;h4;h5;h6;pre;address;div')

                                  ┌────────────────┐
                                  │   BLOCKQUOTE   │
                                  └────────────────┘

                                 ##Plugin 'blockquote'
COMMAND 'blockquote'              #Put selection in <blockquote>
                                  #Done by button 'Blockquote' (toolbar 'blocks')

                                  ┌─────────┐
                                  │   DIV   │
                                  └─────────┘

                                 ##Plugin 'div' (depends: 'dialog')
COMMAND 'creatediv'               #Open dialog 'creatediv', to put selection in <div>
                                  #Done by button 'CreateDiv' (toolbar 'blocks')
COMMAND 'editdiv'                 #Open dialog 'editdiv', to ...
                                  #Done by contextmenu item in MENUGROUP 'div'
COMMAND 'removediv'               #Remove <div>
                                  #Done by contextmenu item in MENUGROUP 'div'




          
   INSERT  
          



                                  ┌──────────┐
                                  │   LINK   │
                                  └──────────┘

                                 ##Plugin 'link' (depends: 'dialog', 'fakeobjects')

COMMAND 'link'                    #Open dialog 'link', which inserts <a href>
                                  #Done by button 'Link' (toolbar 'links'), shortcut Ctrl-L, double click or
                                  #contextMenu (MENUGROUP 'link')
COMMAND 'unlink'                  #Remove wrapping <a href>
                                  #Done by button 'Unlink' (toolbar 'links') or contextMenu (MENUGROUP 'link')
CONF.linkShowTargetTab            #If true (def), show dialog tab to change 'target', 'onclick'
CONF.linkShowAdvancedTab          #If true (def), show dialog tab to change 'dir', etc.

COMMAND 'anchor'                  #Open dialog 'anchor'
                                  #Done by button 'Anchor' (toolbar 'links'), doubleclick or contextMenu (MENUGROUP 'anchor')
COMMAND 'removeAnchor'            #
                                  #Done by contextMenu (MENUGROUP 'anchor')

                                  ┌──────────────┐
                                  │   AUTOLINK   │
                                  └──────────────┘

                                 ##Plugin 'autolink' (depends: 'clipboard')
                                  #Turns pasted URLs into <a>

                                  ┌────────────────────┐
                                  │   HORIZONTALRULE   │
                                  └────────────────────┘

                                 ##Plugin 'horizontalrule'
COMMAND 'horizontalrule'          #Inserts <hr>. Done by button 'HorizontalRule' (toolbar: 'insert')

                                  ┌─────────────────┐
                                  │   SPECIALCHAR   │
                                  └─────────────────┘

                                 ##Plugin 'specialchar' (depends: 'dialog')
COMMAND 'specialchar'             #Open dialog 'specialchar', to insert chars.
                                  #Done by button 'SpecialChar' (toolbar 'insert')
CONF.specialChars                 #STR_ARR

                                  ┌───────────┐
                                  │   FORMS   │
                                  └───────────┘

                                 ##Plugin 'forms' (depends: 'dialog', 'fakeobjects')
COMMAND 'checkbox|
radio|textfield|textarea|select|  #Add an HTML control
[image]button|hiddenfield')       #Done by buttons (toolbar: 'forms') or double click on element
COMMAND 'form'                    #Edit an HTML control
                                  #Dont by contextMenu MENUGROUP 'form'

                                  ┌─────────────────────┐
                                  │   HTML5VALIDATION   │
                                  └─────────────────────┘

                                 ##Community plugin 'html5validation'
                                  #Form validation

                                  ┌───────────────┐
                                  │   TEMPLATES   │
                                  └───────────────┘

                                 ##Plugin 'templates' (depends: 'dialog')
COMMAND 'templates'               #Open dialog 'templates' that inserts predefined chunks of 'HTML'
                                  #Can replace content if checkbox checked (default state: CONF.templates_replaceContent BOOL
                                  #(def: true))
                                  #Done by button 'templates' (toolbar 'doctools')
CONF.templates_files              #'URL'_ARR of files using CKEDITOR.addTemplates(...) (def: define 'default')
CONF.templates                    #'TEMPLATES,...' to use (def: 'default')

CKEDITOR.addTemplates
('TEMPLATES', TEMPLATES_CONF)     #
TEMPLATES_CONF.imagesPath         #'DIR'
TEMPLATES_CONF.templates          #TEMPLATE_CONF_ARR

TEMPLATE_CONF.title               #STR
TEMPLATE_CONF.description         #STR
TEMPLATE_CONF.image               #'FILE'
TEMPLATE_CONF.html                #'HTML'

                                  ┌─────────────────┐
                                  │   PLACEHOLDER   │
                                  └─────────────────┘

                                 ##Plugin 'placeholder' (depends: 'widget', 'dialog')
WIDGET 'placeholder'              #Is <span class="cke_placeholder">[[...]]</span> (outputed without wrapping <span>)
                                  #Inserted by button 'CreatePlaceholder' (toolbar 'insert'), launching dialog 'placeholder'

                                  ┌───────────┐
                                  │   TOKEN   │
                                  └───────────┘

                                 ##Community plugin 'token' (1.0) (depends: 'widget', 'dialog')

COMMAND 'token'                   #Opens DIALOG 'token', which inserts WIDGET 'token':
                                  #  <span class="cke_token" name="...">...</span>
                                  #Done by button 'CreateToken' (toolbar 'insert')

CONF.availableTokens              #VAL_ARR, where VAL is ['DISPLAY_VAL', 'OUTPUT_VAL']
CONF.tokenStart|End               #Def: '${' and '}'

                                  ┌───────────────┐
                                  │   FOOTNOTES   │
                                  └───────────────┘

                                 ##Community plugin 'footnotes' (1.0.9) (depends: jQuery, 'widget')

COMMAND 'footnotes'               #Opens dialog 'footnotesDialog', which inserts footnotes WIDGETs on bottom of page
                                  #Done by button 'Footnotes' (toolbar 'insert')
WIDGET 'footnotes'                #<section class="footnotes">
WIDGET 'footnotemarker'           #<sup data-footnote-id="NUM">

CONF.footnotesTitle               #Def: 'Footnotes'
CONF.footnotesHeaderEls           #['<TAG>...', '</TAG>...'] (def: ['<h2>', '</h2>'])
CONF.footnotesPrefix              #Def: ''




        
   LIST  
        



                                  ┌────────────────┐
                                  │   INDENTLIST   │
                                  └────────────────┘

                                 ##Plugin 'indentlist' (depends: 'indent')
                                  #Must be loaded before 'tab'
COMMAND 'indent|outdentlist'      #Indents|outdents <ol|ul>
                                  #Done by shortcuts [Shift-]Tab

                                  ┌──────────┐
                                  │   LIST   │
                                  └──────────┘

                                 ##Plugin 'list' (requires: 'indentlist')
COMMAND 'numbered|bulletedList'   #Insert <ol|ul>
                                  #Done by button 'Numbered|BulletedList' (toolbar 'list')

                                  ┌────────────────┐
                                  │   LISTSTYLES   │
                                  └────────────────┘

                                 ##Plugin 'liststyles' (requires 'dialog', 'contextmenu')
COMMAND                           #Adds CSS properties list-style-* to <ol|ul> and HTML attribute start
'numbered|bulletedListStyle'      #Opens dialog 'numbered|bulletedListStyle'
                                  #Done by contextMenu (MENUGROUP 'list')




          
   TABLES  
          



                                  ┌───────────┐
                                  │   TABLE   │
                                  └───────────┘

                                 ##Plugin 'table' (depends 'dialog')
COMMAND 'table'                   #Opens dialog 'table', which insert a <table>
                                  #Done by button 'Table' (toolbar 'insert')
COMMAND 'tableProperties'         #Opens dialog 'tableProperties', which edits a <table>
                                  #Done by contextMenu (GROUP 'table') or doubleclick
COMMAND 'tableDelete'             #Remove <table>
                                  #Done by contextMenu (GROUP 'table')

                                  ┌────────────────┐
                                  │   TABLETOOLS   │
                                  └────────────────┘

                                 ##Plugin 'tabletools' (depends: 'table', 'dialog', 'contextmenu')
COMMAND 'cellProperties'          #Open dialog 'cellProperties', which edit cell properties.
                                  #Done on contextMenu
COMMAND 'row|column|cellDelete|
InsertBefore|InsertAfter')        #Done on contextMenu
COMMAND 'cellMerge[Right|Down]|
[Vertical|Horizontal]Split')      #Done on contextMenu

                                  ┌─────────────────┐
                                  │   TABLERESIZE   │
                                  └─────────────────┘

                                 ##Plugin 'tableresize' (depends: 'tabletools')
                                  #Resize handle for columns|rows

                                  ┌────────────────┐
                                  │   QUICKTABLE   │
                                  └────────────────┘

                                 ##Community plugin 'quicktable' (1.0.6) (depends: 'table', 'panelbutton', 'floatpanel')

COMMAND 'table'                   #Insert <table> with a quicktable, or if clicking 'More' the 'table' dialog.
                                  #Done by Button 'Table' (toolbar 'insert')

INSERTED TABLE ==>                #
CONF.qtBorder                     #CSS border-width (def: '1')
CONF.qtWidth                      #CSS width (def. '500px')
CONF.qtStyle                      #STYLE_DEF
CONF.qtClass                      #'CLASS' (def: '')
CONF.qtCellPadding|Spacing        #Def: '1'

PREVIEW TABLE ==>                 #
CONF.qtRows|Columns               #Def: 20
CONF.qtPreviewBorder              #CSS border (def: '4px double black')
CONF.qtPreviewSize                #Cell size (def: '4px')
CONF.qtPreviewBackground          #Cell background-color (def: '#c8def4')

                                  ┌───────────────────┐
                                  │   LAYOUTMANAGER   │
                                  └───────────────────┘

                                 ##Community plugin 'layoutmanager'
                                  #Inserts <table> meant for layout



              
   MULTIMEDIA  
              



                                  ┌───────────┐
                                  │   IMAGE   │
                                  └───────────┘

                                 ##Plugin 'image' (depends: 'dialog')
COMMAND 'image'                   #Inserts|edits <img> with dialog 'image'
                                  #Done by button 'Image' (toolbar 'insert'), double click and context menu (group 'image')
CONF.image_prefillDimensions      #If true (def), upload box prefills dimensions.
CONF.image_previewText            #Preview text shown in upload box.
CONF.image_removeLinkByEmptyURL   #If true (def), remove links when URL is ''

                                  ┌────────────┐
                                  │   IMAGE2   │
                                  └────────────┘

                                 ##Plugin 'image2' (depends: 'dialog', 'widget')
                                  #Instering images. By default produces <img>
                                  #Replace "image" plugin. Allows:
                                  #  - captions
                                  #  - resize handler
                                  #  - drag&drop
                                  #By default produces:
                                  #  figure.image
                                  #    img
                                  #    figcaption
COMMAND 'image'                   #Inserts|edits <img> with dialog 'image2'
                                  #Done by button 'Image' (toolbar 'insert'), double click and context menu (group 'image')
CONF.image2_captionedClass        #'CLASS' applied to <figure> (def: 'image')
CONF.image2_alignClasses          #STR_ARR. 3 CSS classes also applied to <figure> when aligned to left|center|right
                                  #Def: use style="float:left|right" and 'text-align: center'
CONF.image2_disableResizer        #If false (def), allow resizing image.
CONF.image2_prefillDimensions     #Like CONF:image_prefillDimensions

                                  ┌─────────────────┐
                                  │   IMAGEROTATE   │
                                  └─────────────────┘

                                 ##Community plugin 'imagerotate' (1.1)
COMMAND 'rotateLeft|Right'        #Rotate selected image (by assigning <img> src="DATA_URI")
                                  #Done by contextMenu on <img> (MENUGROUP 'image')

                                  ┌───────────┐
                                  │   CHART   │
                                  └───────────┘

                                 ##Community plugin 'chart'
                                  #Insert charts, using chart.js

                                  ┌─────────────┐
                                  │   YOUTUBE   │
                                  └─────────────┘

                                 ##Community plugin 'youtube'

                                  ┌─────────────────┐
                                  │   LOCATIONMAP   │
                                  └─────────────────┘

                                 ##Community plugin 'locationmap'
                                  #Inserting Google Maps

                                  ┌────────────────┐
                                  │   GOOGLEDOCS   │
                                  └────────────────┘

                                 ##Community plugin 'googledocs'
                                  #Inserting Google Docs

                                  ┌───────────┐
                                  │   AUDIO   │
                                  └───────────┘

                                 ##Community plugin 'Audio' (1.0)
COMMAND 'Audio'                   #Opens dialog 'audio' to insert|edit <audio>
                                  #Done by button 'Audio' (toolbar: 'Audio'), doubleclick or contextMenu on <audio>
                                  #(MENUGROUP 'flash')

                                  ┌───────────┐
                                  │   FLASH   │
                                  └───────────┘

                                 ##Plugin 'flash' (depends: 'fakeobjects', 'dialog', 'embed')
                                  #Handles Adobe Flash content
COMMAND 'flash'                   #Launch dialog 'flash', to insert Flash content
                                  #Done by button 'Flash', contextMenu in MENUGROUP 'flash' and doubleclick on Flash content

                                  ┌───────────────┐
                                  │   SLIDESHOW   │
                                  └───────────────┘

                                 ##Community plugin 'slideshow'
                                  #Inserting slideshows


                                  ┌────────────┐
                                  │   SMILEY   │
                                  └────────────┘

                                 ##Plugin 'smiley' (depends: 'dialog')
COMMAND 'smiley'                  #Open dialog 'smiley', which inserts <img> among a choice
                                  #Done by button 'Smiley' (toolbar 'insert')
CONF.smiley_path                  #URL (def: 'BASEPATH/plugins/smiley/images/')
CONF.smiley_images                #'FILE'_ARR
CONF.smiley_descriptions          #STR_ARR
CONF.smiley_columns               #NUM (def: 6)

                                  ┌─────────────────┐
                                  │   FONTAWESOME   │
                                  └─────────────────┘

                                 ##Community plugin 'fontawesome' (1.1)
                                  #Button 'FontAwesome', adds dialog, which allows:
                                  #  - picking font (inserted as WIDGET)
                                  #  - changing CSS color, font-size
                                  #  - adding class 'fa-spin|fw|border|rotate-*|flip-*'
                                  #Filter must not remove empty <span>, e.g. CKEDITOR.dtd.$removeEmpty = false




         
   EMBED  
         



                                  ┌─────────────────┐
                                  │   FAKEOBJECTS   │
                                  └─────────────────┘

                                 ##Plugin 'fakeobjects'
                                  #Replace content by <img> when not in edit mode
EDITOR.createFakeElement(...)     #
EDITR.createFakeParserElement(...)#
EDITOR.restoreFakeElement(...)    #

                                  ┌───────────────┐
                                  │   EMBEDBASE   │
                                  └───────────────┘

                                 ##Plugin 'embedbase' (depends: 'widget', 'notificationaggregator')
                                  #Base plugin for "embed[semantic]"
                                  #Use dialog 'embedBase'
CKEDITOR.plugins.embedBase.*      #

                                  ┌─────────────────────┐
                                  │   EMBED[SEMANTIC]   │
                                  └─────────────────────┘

                                 ##Plugin 'embed[semantic]' (depends: 'embedbase')
                                  #Embedded URL content in an <iframe> using Iframely.
                                  #If "semantic", uses oEmbed standard.
                                  #Add 'embed[Semantic]' WIDGET
CONF.embed_provider
CKEDITOR.plugins.embedBase.       #oEmbed provider (def: "//ckeditor.iframe.key/api/oEmbed={url}&callback={callback}")
baseDefinition.providerUrl        #Can use "{url}" (requested URL) and "{callback}" (JSONP)

                                  ┌───────────────┐
                                  │   AUTOEMBED   │
                                  └───────────────┘

                                 ##Plugin 'autoembed' (requires: 'autolink', 'undo') (usually requires also: 'embed', 'embedsemantic')
                                  #Autoembed URLs when pasted (show error when cannot automatically embed)
CONF.autoEmbed_widget             #Plugin "STR,..."[(URL)] to use (def: "embed,embedsemantic")

                                  ┌────────────┐
                                  │   IFRAME   │
                                  └────────────┘

                                 ##Plugin 'iframe' (depends: 'dialog', 'fakeobjects')
COMMAND 'iframe'                  #Adds|edits an <iframe>
                                  #Done by button 'Iframe', double click on it and context menu MENUGROUP 'image'

                                  ┌─────────────────┐
                                  │   CODESNIPPET   │
                                  └─────────────────┘

                                 ##Plugin 'codesnippet' (depends: 'widget', 'dialog')
                                  #Insert code snippets (using highlight.js)
                                  #In 'inline mode', needs to load hightlight.js JavaScript and CSS.
                                  #Dialog 'codeSnippet', button 'codeSnippet' (in 'insert' toolbar), command 'codeSnippet'

CONF.codeSnippet_codeClass        #'CLASS' of <code> (def: 'hljs')
CONF.codeSnippet_languages        #OBJ of programming languages (def: null, i.e. all)
CONF.codeSnippet_theme            #STR color theme (def: 'default')

CONF.codesnippet.
setHighlighter(HIGHLIGHTER)       #Use another highlighter than highlight.js
CKEDITOR.plugins.codesnippet.
hightlighter                      #HIGHLIGHTER

                                  ┌──────────────────────┐
                                  │   CODESNIPPETGESHI   │
                                  └──────────────────────┘

                                 ##Plugin 'codesnippetgeshi' (depends: 'codesnippet', 'ajax')
                                  #Like 'codesnippet', but uses GeSHI hightlighter (server-side) instead of highlight.js
CONF.codeSnippetGeshi_url         #'URL' (PHP)

                                  ┌────────────────┐
                                  │   CODEMIRROR   │
                                  └────────────────┘

                                 ##Community plugin 'codemirror'
                                  #Insert code highlighter

p

                                  ┌─────────────┐
                                  │   MATHJAX   │
                                  └─────────────┘

                                 ##Plugin 'mathjax' (depends: 'widget', 'dialog')
                                  #Inserting TeX WIDGET 'mathjax', done by button '', opening dialog 'mathjax'
CONF.mathJaxClass                 #'CLASS'. Any elements with this CSS class will be converted (def: 'math-tex')
CONF.mathJaxLib                   #MathJax library path
CKEDITOR.plugins.mathjax.*        #Helpers

                                  ┌─────────────────────┐
                                  │   WIDGETBOOTSTRAP   │
                                  └─────────────────────┘

                                 ##Community plugin 'widgetbootstrap'
                                  #Inserts Bootstrap widgets




          
   UPLOAD  
          



                                  ┌──────────┐
                                  │   SAVE   │
                                  └──────────┘

                                 ##Plugin 'save'
                                  #Only with 'normal' mode, if EDITOR is on a <form>
COMMAND 'save'                    #Fires <form> submit
                                  #Fires 'save'

                                  ┌─────────────────┐
                                  │   FILEBROWSER   │
                                  └─────────────────┘

                                 ##Plugin 'filebrowser' (depends: 'popup')

CONF.filebrowser[Image|Flash]
Browse|UploadUrl                  #'URL' (def: '')
CONF.filebrowserImageBrowseLinkUrl#'URL' (def: '')

CONF.filebrowserWindowFeatures    #
CONF.filebrowserWindowWidth|Height#Passed to EDITOR.popup() STR, STR2 and STR3

                                  ┌───────────────┐
                                  │   FILETOOLS   │
                                  └───────────────┘

                                 ##Plugin 'filetools'

CKEDITOR.fileTools                #FILETOOLS
FILTOOLS.getUploadUrl(CONF,'TYPE')#Returns:
                                  #  - CONF.TYPEuploadUrl
                                  #  - CONF.filebrowserTYPEUploadUrl + '&responseType=json'
FILETOOLS.isTypeSupported
(BLOB, REGEXP)                    #Checks BLOB.type against REGEXP


EDITOR.uploadRepository           #REPO, i.e. several XHRs
REPO.create(BLOB|STR[, FILENAME]) #Adds and returns new FileLoader(EDITOR, BLOB|STR, FILENAME) to REPO.loaders ARR
                                  #Fires 'instanceCreated' with CEVENT.data LOADER
REPO.isFinished()                 #Checks all REPO.loaders.isFinished()


new FILETOOLS.FileLoader          #FILELOADER, i.e. single XHR. STR is base64.
(EDITOR, BLOB|STR[, FILENAME])    #Def FILENAME (e.g. for files without names, e.g. base64 pasted in): conf.fileTools_defaultFileName
                                  #(def: '', i.e. according to MIME type)
FILELOADER.file                   #BLOB
FILELOADER.total                  #NUM (in bytes)
FILELOADER.status                 #'created|loading|loaded|uploaded|error|abort'
                                  #When changed, fire event of same name, and also 'update'
FILELOADER.isFinished()           #True if 'loaded|uploaded|error|abort'

FILELOADER.load()                 #Loads file from storage to memory, setting FILELOADER:
                                  #  - reader FILEREADER
                                  #  - status 'loading|loaded|error|abort'
                                  #     - message STR if 'error'
                                  #  - loaded NUM (in bytes)
                                  #  - data BLOB: loaded data (as opposed to FILELOADER.file)
                                  #Only useful when using BLOB (not Base64 STR)
FILELOADER.upload(URL)            #Sends XHR, setting FILELOADER:
                                  #  - xhr XHR
                                  #  - uploadUrl URL
                                  #  - status 'uploading|uploaded|error|abort'
                                  #     - if 'error' (including if status code not 2**), sets FILELOADER.message STR
                                  #  - uploadTotal NUM: equals FILELOADER.total
                                  #  - uploaded NUM (in bytes)
                                  #  - message|fileName|url VAL: copied from XHR on success
                                  #Fires:
                                  #  - 'update' on each upload chunk.
                                  #  - 'fileUploadRequest' with CEVENT.data.fileLoader FILELOADER on request:
                                  #     - can return false to stop request
                                  #     - EDITOR will do:
                                  #        - XHR.open('POST', URL, true)
                                  #        - FORMDATA = new FormData(); FORMDATA.append('upload', BLOB, FILENAME)
                                  #        - XHR.send(FORMDATA)
                                  #  - 'fileUploadResponse' with CEVENT.data (on success)
                                  #     - fileLoader FILELOADER
                                  #     - data (must be JSON response) (if RESPONSE.uploaded true)
                                  #        - fileName RESPONSE.fileName
                                  #        - url RESPONSE.url
                                  #        - message: if RESPONSE.error.message
FILELOADER.loadAndUpload(URL)     #Does FILELOADER.load(), then FILELOADER.upload(URL)
FILELOADER.abort()                #

CONF.uploadUrl                    #'URL' (def: '')

                                  ┌──────────────────┐
                                  │   UPLOADWIDGET   │
                                  └──────────────────┘

                                 ##Plugin 'uploadwidget' (depends: 'widget', 'clipboard', 'filetools', 'notificationaggregator')
FILETOOLS.addUploadWidget         #Adds new 'WIDGET' type showing loading image while a file is uploading:
(EDITOR, 'WIDGET', OBJ)           #  - markup: data-cke-upload-id="FILELOADER.id", data-widget="WIDGET"
                                  #     - performed by FILETOOLS.markElement(HTML_ELEM, 'WIDGET', ID)
                                  #     - no upcast done, use data-widget="WIDGET" instead
                                  #  - on init, will do on FILELOADER 'update' with status 'STATUS':
                                  #     - OBJ.onSTATUS(FILELOADER):
                                  #        - can call this.replaceWith('HTML') to replace WIDGET with 'HTML', e.g. loading image
                                  #     - add class cke_upload_STATUS, unless onSTATUS(FILELOADER)->false
                                  #  - WIDGET is meant temporary: downcasted to '', removed on 'error|abort'
                                  #On paste image:
                                  #  - fires new FILELOADER request:
                                  #     - REPO.create(BLOB)
                                  #     - FILELOADER[LOADMETHOD](URL):
                                  #        - LOADMETHOD OBJ.loadMethod (def: 'loadAndUpload')
                                  #        - URL OBJ.uploadUrl (e.g. FILETOOLS.getUploadUrl(CONF))
                                  #  - add markup to pasted image:
                                  #     - OBJ.fileToElement(BLOB)->DOM_ELEM
                                  #     - FILETOOLS.markElement(...)
                                  #  - FILETOOLS.bindNotifications(EDITOR, FILELOADER), which shows NOTIFICATION on uploaded|error|abort
                                  #  - can restrict with OBJ.supportedTypes REGEXP

                                  ┌─────────────────┐
                                  │   UPLOADIMAGE   │
                                  └─────────────────┘

                                 ##Plugin 'uploadimage' (depends: 'uploadwidget')
WIDGET 'uploadimage'              #Uses FILETOOLS.addUploadWidget():
                                  #  - uploadUrl FILETOOLS.getUploadUrl(CONF, 'image'), i.e.:
                                  #     - CONF.imageUploadUrl
                                  #     - CONF.filebrowserImageUploadUrl + '&responseType=json'
                                  #  - supportedTypes 'image/jpeg|png|gif|bmp'
                                  #  - on:
                                  #     - paste -> black square image
                                  #     - uploading: currently loaded data
                                  #     - uploaded: final <img src="RESPONSE.url">

                                  ┌───────────────────┐
                                  │   IMAGEUPLOADER   │
                                  └───────────────────┘

                                 ##Community plugin 'imageuploader'
                                  #Better image uploader




        
   SIZE  
        




                                  ┌──────────────┐
                                  │   AUTOGROW   │
                                  └──────────────┘

                                 ##Plugin 'autogrow'
                                  #Adapt height to content. Not needed in 'inline mode'
COMMAND 'autogrow'                #
CONF.autoGrow_min|maxHeight       #NUM (def: 200|0)
CONF.autoGrow_bottomSpace         #NUM (def: 0), space between content and bottom border
CONF.autoGrow_onStartup           #BOOL (def: false), if true, adjust initial height on startup instead of focus.

                                  ┌────────────┐
                                  │   RESIZE   │
                                  └────────────┘

                                 ##Plugin 'resize'
                                  #Only 'normal mode'
CONF.resize_enabled               #BOOL (def: true). Show resizing handle in bottom right corner.
CONF.resize_max|minHeight|Width   #NUM
CONF.resize_dir                   #'both|vertical|horizontal'

                                  ┌───────────────┐
                                  │   WORDCOUNT   │
                                  └───────────────┘

                                 ##Community plugin 'wordcount' (0.13) (depends: 'htmlwriter', 'notification', 'undo')
CONF.showParagraphs|WordCount|
CharCount                         #If true, show count on bottom bar (def: true, true, false)
CONF.countSpacesAsChars           #Def: false
CONF.countHTML                    #Def: false
CONF.maxWordCount|CharCount       #Def: -1. Does not allow bigger than this.
                                  #Fires events 'word|charCountLess|GreaterThanMaxLengthEvent' with CEVENT.data:
                                  #currentLength NUM, maxLength NUM





              
   CORRECTION  
              



                                  ┌───────────┐
                                  │   SCAYT   │
                                  └───────────┘

                                  #Spell checker as you type. Uses WebSpellChecker.net
                                  #Uses ads (unless purchasing license)
CONF.disableNativeSpellChecker    #If true (def), disable browser's native spell checking.
CONF.scayt_autoStartup            #Def: false

CONF.scayt_sLang                  #Lang among (def. 'en_US')
CONF.scayt_userDictionaryName     #User-defined dictionary

CONF.scayt_contextCommands        #"STR|..." for the context menu options.
                                  #Def: 'ignore|ignoreall|add'
                                  #Also available: 'off|all' and 'option|language|dictionary|about'
CONF.scayt_uiTabs                 #'1|0,1|0,1|0': whether to show 'Options', 'Languages', 'Dictionary' (def: '1,1,1')
CONF.scayt_contextMenuItemsOrder  #Suggestions context menu order. Def: 'suggest|moresuggest|control'
CONF.scayt_moreSuggestions        #'on|off' (def: 'on')

CONF.scayt_minWordLength          #NUM (def: 4)
CONF.scayt_maxSuggestions         #NUM (def: 5)
CONF.scayt_disableOptionsStorage  #STR[_ARR] for the "Options" menu to disable (def: '')
                                  #Available: 'options', 'ignore-all-caps-words', 'ignore-domain-names',
                                  #'ignore-words-with-mixed-cases', 'ignore-words-with-numbers', 'lang', 'all'
CONF.scayt_elementsToIgnore       #'TAG,...' (def: 'style')

CONF.scayt_service
Host|Path|Port|Protocol           #Which endpoint to use (def: 'http://svc.webspellchecker.net/spellcheck31/script/ssrv.cgi')

CONF.scayt_customDictionaryIds    #Custom dictionaries 'ID,...' (only licensed version)
CONF.scayt_customerId             #Customer ID (only licensed version)

                                  ┌─────────┐
                                  │   WSC   │
                                  └─────────┘

                                  #Spell checker through a dialog box, using also WebSpellChecker.net.
CONF.wsc_cmd                      #Which tabs is opened by default in dialog box, among 'spell|thes|grammar' (def: 'spell')

CONF.wsc_lang                     #Like CONF.scayt_sLang
CONF.wsc_userDictionaryName       #Like CONF.scayt_userDictionaryName
CONF.wsc_customerDictionaryIds    #Like CONF.scayt_customerDictionaryIds
CONF.wsc_customerId               #Like CONF.scayt_customerId

                                  ┌─────────────────┐
                                  │   AUTOCORRECT   │
                                  └─────────────────┘

                                 ##Community plugin 'autocorrect' (3.0) (depends: 'menubutton')

COMMAND 'autocorrect'             #Replace sequences of characters by others, as you type.
                                  #Does replacements (if CONF.autocorrect_enabled true (def))::
                                  #  - <-- and -->     ← and →
                                  #  - <-->            ↔
                                  #  - -+ or +-        ±
                                  #  - ~=              ≈
                                  #  - (c), (r), (tm)  ©, ®, ™
                                  #  - (o)             ˚
                                  #  - ...             …
                                  #  - << and >>       « and »
                                  #  - 1/2, 1/4, 3/4   ½, ¼, ¾
                                  #  - URL             <a href="URL"></a>
                                  #                    (if CONF.autocorrect_recognizeUrls true (def))
                                  #  - --              CONF.autocorrect_dash (def: '–')
                                  #                    (if CONF.autocorrect_replaceHyphens true (def))
                                  #  - ' and "         CONF.autocorrect_single|doubleQuotes (def: ‘’ and “”)
                                  #                    (if CONF.autocorrect_replaceSingle|DoubleQuotes true (def))
                                  #  - --- or ___      <hr>
                                  #                    (if CONF.autocorrect_createHorizontalRules true (def))
                                  #  - *|+             <ul><li>
                                  #                    (if CONF.autocorrect_formatBulletedLists true (def))
                                  #  - 1.|a.|I.        <ol><li>
                                  #                    (if CONF.autocorrect_formatNumberedLists true (def))
                                  #  - 1st             1st
                                  #                    (if CONF.autocorrect_formatOrdinals true (def))
                                  #  - custom:
                                  #     - if CONF.autocorrect_useReplacementTable true (def)
                                  #     - by augmenting CONF.autocorrect_replacementTable OBJ
                                  #Done by button 'AutoCorrect' or contextMenu (MENUGROUP 'autocorrect')

COMMAND 'toggleAutocorrect'       #Does it as you type
                                  #Done by contextMenu (MENUGROUP 'toggleAutocorrect')

COMMAND 'autocorrectOptions'      #Opens dialog 'autocorrectOptions', to setup options.
                                  #Done by contextMenu (MENUGROUP 'autocorrectOptions')




         
   PRINT  
         



                                  ┌───────────┐
                                  │   PRINT   │
                                  └───────────┘

                                 ##Plugin 'print'
COMMAND 'print'                   #Open browser print dialog
                                  #Done by button 'Print' (toolbar 'document')

                                  ┌─────────────┐
                                  │   PREVIEW   │
                                  └─────────────┘

                                 ##Plugin 'preview'
COMMAND 'preview'                 #Open popup with EDITOR.getData()
                                  #Fires 'contentPreview' with CEVENT.data 'HTML'
                                  #Done by button 'Preview' (toolbar 'document')

                                  ┌───────────────┐
                                  │   PAGEBREAK   │
                                  └───────────────┘

                                 ##Plugin 'pagebreak'
COMMAND 'pagebreak'               #Inserts <div>:
                                  #  - meant as a printing break (e.g. use CSS page-break-after: always)
                                  #  - show visual line
                                  #Done by button 'PageBreak' (toolbar 'insert')




        
   A11Y  
        



                                  ┌──────────────┐
                                  │   TABINDEX   │
                                  └──────────────┘

CONF.tabIndex                     #

                                  ┌───────────────┐
                                  │   MAGICLINE   │
                                  └───────────────┘

                                 ##Plugin 'magicline'
COMMAND 'accessPrevious|NextSpace'#Inserting new lines when it is hard to do so.
                                  #Done by clicking on a red line what appears when needed,
                                  #or when using shortcut CONF.magicline_keystrokeNext|Previous (def: Ctrl-Shift-3|4)

CONF.magicline_color              #'CSS'. Def: "red"
CONF.magicline_everywhere         #If false (def), only shows when needed
CONF.magicline_triggerOffset      #How close to make it appear (def: 30)
CONF.magicline_holdDistance       #How close to catch focus, as percentage of triggerOffset (def: 0.5)
CONF.magicline_tabuList           #Do not show if element has those HTML attributes STR_ARR (def: ['data-widget-wrapper'])

                                  ┌──────────────┐
                                  │   A11YHELP   │
                                  └──────────────┘

                                 ##Plugin 'a11yhelp' (depends: 'dialog')
                                  #Create command 'a11yhelp', which fires shortcuts dialog 'a11yHelp', which is also shown on Alt+0




              
   DEVELOPERS  
              



                                  ┌─────────────────────────────┐
                                  │   SOURCEAREA|SOURCEDIALOG   │
                                  └─────────────────────────────┘

                                 ##Plugin 'sourcearea|sourcedialog'
COMMAND 'source'                  #Shows HTML source editing, inline. Only for 'normal mode'
                                  #Done by button 'Source' (toolbar 'mode')
COMMAND 'sourcedialog'            #Shows HTML source editing through a dialog 'sourcedialog'.
                                  #Done by button 'Sourcedialog' (toolbar 'mode')

CONF.sourceAreaTabSize            #Def: 4 (tab-size CSS property)
                                  #Only if CONF.dataIndentationChars is '\t'

                                  ┌──────────────┐
                                  │   DOCPROPS   │
                                  └──────────────┘

                                 ##Plugin 'docprops' (depends: 'wysiwygarea', 'dialog', 'colordialog')
COMMAND 'docProps'                #With 'wysiwygarea', allows changing page properties.
                                  #Opens dialog 'docProps'.
                                  #Done by button 'DocProps' (toolbar 'document')

                                  ┌──────────────┐
                                  │   DEVTOOLS   │
                                  └──────────────┘

                                 ##Plugin 'devtools'
                                  #Show extra dev infos about dialogs as popovers
CONF.devtools_styles              #'CSS' to be applied to popovers
CONF.devtools_textCallback(...)   #Text to be shown in popovers

                                  ┌─────────────────┐
                                  │   SHOWBORDERS   │
                                  └─────────────────┘

                                 ##Plugin 'showborders'
COMMAND 'showborders'             #Show outline outside <table> with borders
CONF.startupShowBorders           #If true (def), enabled on startup.

                                  ┌────────────────┐
                                  │   SHOWBLOCKS   │
                                  └────────────────┘

                                 ##Plugin 'showblocks'
COMMAND 'showblocks'              #Show paragraphs blocks (with HTML tagname)
                                  #Done by button 'ShowBlocks' (toolbar 'tools')
CONF.startupInlineBlocks          #If true (def: false), enabled on startup.

                                  ┌──────────────────┐
                                  │   ELEMENTSPATH   │
                                  └──────────────────┘

                                 ##Plugin 'elementspath'
                                  #Shows HTML path of focused element in bottom bar.
COMMAND 'elementsPathFocus'       #Gives it the focus (also F11 shortcut)
