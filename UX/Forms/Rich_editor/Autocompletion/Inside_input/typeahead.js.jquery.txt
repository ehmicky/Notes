
                                  ┏━━━━━━━━━━━━━━━━━━┓
                                  ┃   TYPEAHEAD.JS   ┃
                                  ┗━━━━━━━━━━━━━━━━━━┛

VERSION ==>                       #0.11.1 (Node/AMD/global)
                                  #Does (can also load only one of them):
                                  #  - JQ.typeahead(): <input> which shows suggestions
                                  #  - BLOODHOUND: fetches suggestions remotely or locally

new Bloodhound(BOBJ)              #Returns BLOODHOUND, i.e. fetches STR_ARR and matches them with "QUERY"
                                  #Data are SOBJ, i.e. any VAL which must translate to STR_ARR with:
                                  #  - optional BOBJ.remote.transform(SOBJ_ARR)->VAL
                                  #  - then BOBJ.datumTokenizer(VAL)->STR_ARR, with possible defaults:
                                  #     - Bloodhound.tokenizers.whitespace|nonword(VAL)->STR_ARR (according to /\s+/ or /\W+/)
                                  #     - Bloodhound.tokenizers.obj.whitespace|nonword("KEY"[_ARR]...)(VAL)->STR_ARR:
                                  #       same but only use OBJ.KEY
                                  #SOBJ can be populated|fetched:
                                  #  - remotely:
                                  #     - fetched using $.ajax(OBJ): 
                                  #        - OBJ is { url BOBJ.remote[.url] URL, type "GET", dataType "json" }
                                  #        - can modify it with BOBJ.remote.prepare("QUERY", OBJ)->OBJ
                                  #        - or (instead) use BOBJ.remote.wildcard STR, which replaces STR in URL with
                                  #          encodeURIComponent("QUERY")
                                  #     - called when local data number of SOBJ is less than BOBJ.sufficient NUM (def: 5)
                                  #     - BOBJ.remote OBJ:
                                  #        - rateLimitWait NUM (def: 300), rateLimitBy "debounce" (def) or "throttle"
                                  #  - locally: 
                                  #     - prefetched:
                                  #        - using BOBJ.prefetch[.url] URL, once on initialization
                                  #          Can use BOBJ.prefetch.prepare() like above
                                  #        - if BOBJ.prefetch.cache true (def), stored on localStorage, according to
                                  #          BOBJ.prefetch:
                                  #           - ttl NUM (in ms, def: 1 day)
                                  #           - cacheKey STR (def: URL)
                                  #           - thumbprint STR: added to cacheKey, so that cache is invalidated if different
                                  #     - manually added by BOBJ.local SOBJ_ARR[()] or BLOODHOUND.add(SOBJ[_ARR])|clear()
                                  #     - sorted if BOBJ.sorter(SOBJ, SOBJ2)->-1|0|1
BLOODHOUND.initialize([BOOL])     #Inits everything. Returns PROMISE.
                                  #Done by constructor if BOBJ.initialize true (def). Done only once unless BOOL true.
BLOODHOUND.search("QUERY",        #Does:
FUNC(SOBJ_ARR), FUNC2(SOBJ_ARR))  #  - tokenize "QUERY" using BOBJ.queryTokenizer("QUERY")->STR_ARR (see above)
                                  #  - matches with the tokenized SOBJ_ARR, from their beginning, case-insensitively.
                                  #  - fire FUNC for local data, FUNC2 for remote
BLOODHOUND.get(VAL_ARR)->SOBJ_ARR #Only on local data and when BOBJ.identify(SOBJ)->VAL === VAL (nothing when cannot be found)

JQ.typeahead(OBJ[, D_OBJ...])     #Make an <input type="text"> show suggestions while typing. OBJ:
                                  #  - minLength NUM (def: 1): automatically open suggestions
                                  #    Can return default suggestion by using NUM 0
                                  #  - hint BOOL: if true (def), shows top suggestion as hint (like a placeholder)
                                  #  - highlight BOOL: if true (def: false), adds CSS class "tt-highlight" and wrap with
                                  #    <strong> the part of the suggestion matching the current input
                                  #  - classNames OBJ: default CSS classes, where default is always "tt-VAR"
                                  #     - input, hint, menu|empty|open, dataset, suggestion|cursor, highlight
                                  #D_OBJ (data sources):
                                  #  - name D_NAME (def: random number): used for the CSS class
                                  #  - source BLOODHOUND or any FUNC with same signature as BLOODHOUND.search(...)
                                  #  - async BOOL: informs there will be async results (def: true)
                                  #  - limit NUM (def: 5): same as BOBJ.sufficient
                                  #  - display FUNC(SOBJ)->STR or "KEY": how suggestion is set as INPUT value
                                  #  - templates: how suggestion is displayed in HTML.
                                  #     - pending "HTML"[("QUERY")]: when retrieving
                                  #     - suggestion "HTML"[(SOBJ)] (def: "<div>SOBJ.display</div>")
                                  #     - notFound "HMTL"[("QUERY")]: when 0 results
                                  #Several D_OBJ...:
                                  #  - category grouping
                                  #  - use D_OBJ.templates.header|footer "HTML"[("QUERY", SOBJ_ARR)]
                                  #Fires events:
                                  #  - typeahead:active|idle()
                                  #  - typeahead:open|close()
                                  #  - typeahead:change(): on focus lost if value changed
                                  #  - typeahead:render(JQEVENT, SOBJ_ARR, ISREMOTE_BOOL, D_NAME): suggestions displayed
                                  #  - typeahead:select(JQEVENT, SOBJ): suggestion selected
                                  #  - typeahead:autocomplete(JQEVENT, SOBJ)
                                  #  - typeahead:cursorchange(JQEVENT, SOBJ): hovering suggestion
                                  #  - typeahead:asyncrequest(JQEVENT, "QUERY", D_NAME): remote request
                                  #  - typeahead:asyncreceive|asynccancel(JQEVENT, "QUERY", D_NAME): remote response
JQ.typeahead("destroy")           #
JQ.typeahead("val"[, STR])        #Gets/sets INPUT value
JQ.typeahead("open|close")        #Opens/close suggestions
